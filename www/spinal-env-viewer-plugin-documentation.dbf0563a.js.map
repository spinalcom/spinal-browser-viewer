{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,mBAAmC;IACjD,OAAO,kBAAkB,QAAQ,mBAAmC;IACpE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAgC;IAC9D,QAAQ,oBAAiC,QAAQ;IACjD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A;A;A;;A;;A;;A,I,gB;I,M;I,O;Q,U,C;Q,qB;Y,S,I,C,C,C;Q;Q,sB;Y,S,I,C,C,C;Q;Q,mB;Y,S,I,C,C,C;Q;I;I,Y;Q,qB,C,G,0B;Q,wB,C,G,6B;I;I;Q,I,C,gB;Y,U,O,O,a,U;Y,Q,W;Q;Q,O;Y,U;gB,a;gB,I,E;Y;Y,mB;Y,iB;Y,kB,E;Y,e;Y,c;Y,a;Q;I;I,S;Q,M;Y,I,C,mB,E;Y,I,I,C,S,c;gB,I,Q,M,C,G,+D,E,S,I,C,S;gB,I,I;gB,K,I,Q,M;oB,I,M;wB,I;wB,U,K,Q,W,K,Q,S,Q;wB,S,K,Q,Q;wB,M,I,C,O,K,Q,K;wB,M,K,Q,O,K,Q,K,Q;wB,M,K,Q;wB,c,K;wB,S,K;wB,W,K,Q;oB;oB,I,C,iB,K;oB;gB;Y;Q;Q,Q,S,I;Y,O,C,G,sB,E,M,O;Q;Q,M;Y,I,I,C,S,G,W,G;Y,M,C,G,+D,E,c,I,C,S,c,I,C,S,I,I,C,e,I,C,oB,I,I,C,kB;Q;Q,W,I,E,O,E,I,E,I;Y,O,C,G,+D,E,Q,M,I,C,e,S,M,M,I,C,oB,I,I,C,kB;Q;Q,M;Y,I,O,I,C,S,iB,a;gB,I,C,S,e,M,I,C,qB,I,C,S,O,I,C,S;gB,I,C;gB,I,C;Y;Y,M,I,C;Y,I,C,S,K,E;Y,I,I,C,S,Y,O,W,G;Y,M,I,C,U,I,C,S,c,I,C,S;Y,I,C,S,c;Y,I,C;Y,I,C;Q;Q;Y,O,O,O,a,U;Q;Q;Y,I,Y,S,c;Y,W;gB,U,Y,U;Y,G;Q;Q;Y,I,I,C,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AkB,QAAQ,mBAA0B;IAC3D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAuB;IACrD,QAAQ,oBAAwB,QAAQ;IACxC,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A,I,gB;I,M;I,O;Q,M,C;Q,U,C;Q,S,C;Q,M,C;Q,M,C;Q,W,C;I;I,Y;Q,e,C,G,6B;I;I;Q,I,C,gB,C,G,wC;Q,O;Y,O;Y,O;Y,M;Q;I;I;Q,W;Y,Q,I,a,I,C;Y,I,C;Q,G;I;I,S;Q;Y,I,I,C,M,I,C,K,K,C;gB,I,C,O;gB,E,K,K,C;oB,I,C,Q,K;gB;Y;Q;Q;Y,I,U,S,c;Y,Q,a,Q,gB,I,C;Y,Q,a,Y,I,C,K,K;Y,Q;Q;Q;Y,M,S,O,O,Y;Y,I,O,K,I,C,W,W,G;Y,M,kB,I,C,U,U;Y,M,oB,I,C,U,Y;Y,M,Y,K,M;Y,M,c,K,M;Y,O,a;Y,I,C,U,Q,Y;Y,I,C,Q,Q,Y;Q;Q,S,M,E,K;Y,M,mB,O,O;Y,M,I,C;gB,M,Y,iB,uB,C,G,Q,C;gB,M,Q,O,iB,kB;gB,O,K,kB,Q,G,K;Y;Q;Q,W,M,E,K;Y,M,mB,O,O;Y,M,I,C;gB,M,Y,iB,uB,C,G,Q,C;gB,M,Q,O,iB,kB;gB,M,S,a,G,W,O;Y;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA6B;IAC3C,OAAO,kBAAkB,QAAQ,oBAA6B;IAC9D,OAAO,WAAW;IAG5B,QAAQ,oBAA2B,QAAQ;IAC3C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;Q;K;I,S;Q;Y,Q,I,I,C;Y,I,I,C,a,I,C,U,e,gB,I,C,U,e,gB,O;Y,O;Q;Q;Y,I,C,M;Q;Q;Y,I,C,M;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,A,I,Q,G,O;Q,G,a;Y,a;Y,I;gB,S,I;Y;Q,G;Y,G,W;gB,a;Y,G;gB,I,G;a;Y,I,G;S,E;Q,I,G;Q,I,e,G,a;Y,a;Y,I;gB,S,I;Y;Q,G;Y,G,W;gB,a;Y,G;gB,I,G;a;Y,I,G;S,E,K,I;K,E,K,I;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,A,I,S,I,c,O,G,M;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Q;gB,a;Y,G;gB,I,G,I,G,I;a;Y,I,G;Y,G,Q;gB,a;Y,G;gB,I,G,I,G,I;a;S;Q,I,G;Q,G,O;Y,a;Y,I;gB,a,S,M;oB,I,Q;gB;gB,c,S,M;oB,I,Q;gB;Y;Q,G;Y,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;gB,I,G,a,I,G,I,W;a,E;Y,I,G;Y,G,e;gB,a;gB,O;oB,S,I;oB,a,I;gB;gB,I;oB,Y,I;oB,gB,I;gB;Y;S,E;K,I,A,I,S,I,c,Q,G,M;Q,a;Q,I;Y,a,S,M;gB,I,Q;Y;Y,c,S,M;gB,I,Q;Y;Q;I,G;Q,G,O;Y,a;Q,G;Y,G,Q;gB,a;Y,G;gB,I,G,I,G,I;a;Y,I,G;Y,G,Q;gB,a;Y,G;gB,I,G,I,G,I;a;S;Q,I,G;Q,G,O;Y,a;Y,I;gB,a,S,M;oB,I,Q;gB;gB,c,S,M;oB,I,Q;gB;Y;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,I,G,I,G,I;iB;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,O;wB,O;4B,O,gB,I;4B,O;wB;oB;iB;a;Y,I,G;Y,G,e;gB,a;gB,O;oB,S,I;oB,a,I;gB;gB,I;oB,Y,I;oB,gB,I;gB;Y;S,E;K,I,G,M;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Q;gB,a;Y,G;gB,I,G,I,G,I;a;Y,I,G;Y,G,Q;gB,a;Y,G;gB,I,G,I,G,I;a;S;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,I,G,a,I,G,I,W;a;S;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA6B;IAC3C,OAAO,kBAAkB,QAAQ,oBAA6B;IAC9D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA0B;IACxD,QAAQ,oBAA2B,QAAQ;IAC3C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;K;I;Q,O,C;I;I,S;Q;Y,I,C,M,U,I,C;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,Y;gB;oB,M;oB,S;oB,O,I,K;oB,Y;gB;a;Y,a;Q,G;Y,I,G,I,G,I,K;S;Q,I,G;Q,G,O;Y,a;Y,I;gB,S,I;Y;Q,G;Y,I,G;S;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,c;Y,a;Y,O;gB,M;Y;Q,G;Y,G,M;gB,a;Y,G,I,G,I,kB,S,I,E,K;gB,O,G,qB;oB,K;oB,O;wB,Q,K;wB,Y,K;wB,W,K;wB,Q,K;wB,Q,K;wB,a,K;oB;gB;Y,I;S;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,Q;gB,a;gB,I;oB,U,S,M;wB,O;wB,O,I,Q,M,M;oB;gB;Y,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,gB;wB;oB,G;wB,G,wB;4B,a;wB,G;4B,G,W;gC,a;4B,G;gC,I,G;6B;4B,I,G;4B,G,W;gC,a;4B,G;gC,I,G;6B;yB,E;wB,I,G;wB,G,yB;4B,G,a;gC,a;gC,O;oC,S;gC;gC,I;oC,S,I;gC;4B,G;gC,G,W;oC,I,G;iC;6B,E;4B,I,G;4B,G,a;gC,a;gC,O;oC,S;gC;gC,I;oC,S,I;gC;4B,G;gC,G,W;oC,I,G;iC;6B,E;4B,I,G;4B,G,a;gC,a;gC,O;oC,S;gC;gC,I;oC,S,I;gC;4B,G;gC,G,W;oC,I,G;iC;6B,E;yB,E;qB,E;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,c;wB,a;oB,G,I,G,I,S,I,S,I,E,K;wB,O,G,wB;4B,K;4B,O;gC,Q;4B;4B,I;gC,U,I;4B;wB,G;4B,I,G,I,G,K,Q;yB;oB,I;oB,I,G;oB,G,O;wB,a;oB,G;wB,G,Y;4B,a;wB,G;4B,G,S;gC,I,G;6B;4B,I,G;4B,G,Y;gC,O;oC,O,I,S;oC,U,S,G;wC,I,K,I,U,e;oC;oC,Y;gC;4B;yB,E;qB,E;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,a;wB,a;wB,O;4B,Q;4B,S;wB;oB,G;wB,G,W;4B,I,G;yB;qB,E;iB,E;a;S;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AHJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf","sources":["node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/messageComponent.vue","node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/message.vue","node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/actionsBtn.vue","node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/attachment.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"notesContainer\">\n      <md-content\n         id=\"myList\"\n         class=\"messages md-scrollbar\"\n      >\n         <ul class=\"div_messages\">\n            <message-component\n               v-for=\"(note,index) in notesDisplayList\"\n               :key=\"index\"\n               :date=\"note.date\"\n               :username=\"note.username\"\n               :message=\"note.message\"\n               :type=\"note.type\"\n               :file=\"note.file\"\n               :viewPoint=\"note.viewPoint\"\n            ></message-component>\n         </ul>\n\n      </md-content>\n\n      <div class=\"form\">\n         <form\n            @submit.prevent=\"addNote\"\n            class=\"noteForm\"\n         >\n\n            <!-- <div class=\"icons\">\n          <md-button class=\"icons md-icon-button md-raised md-primary\"\n                     @click=\"addPJ\"\n                     :title=\"'Add Attachment'\">\n            <md-icon>attach_file</md-icon>\n          </md-button>\n\n          <md-button class=\"icons md-icon-button md-raised md-primary\"\n                     @click=\"TakeScreenShot\"\n                     :title=\"'Take a screenshot'\">\n            <md-icon>add_a_photo</md-icon>\n          </md-button>\n\n          <md-button class=\"icons md-icon-button md-raised md-primary\"\n                     @click=\"saveViewPoint\"\n                     :title=\"'save point of view'\">\n            <md-icon>near_me</md-icon>\n          </md-button>\n        </div> -->\n            <div class=\"icons\">\n               <md-speed-dial md-direction=\"top\">\n                  <md-speed-dial-target class=\"md-fab md-mini md-primary\">\n                     <md-icon class=\"md-morph-initial\">menu</md-icon>\n                     <md-icon class=\"md-morph-final\">close</md-icon>\n                  </md-speed-dial-target>\n\n                  <md-speed-dial-content>\n\n                     <md-button\n                        class=\"md-icon-button md-raised md-primary md-fab md-mini\"\n                        @click=\"saveViewPoint\"\n                        :title=\"'save point of view'\"\n                     >\n                        <md-icon>near_me</md-icon>\n                     </md-button>\n\n                     <md-button\n                        class=\"md-icon-button md-raised md-primary md-fab md-mini\"\n                        @click=\"TakeScreenShot\"\n                        :title=\"'Take a screenshot'\"\n                     >\n                        <md-icon>add_a_photo</md-icon>\n                     </md-button>\n\n                     <md-button\n                        class=\"md-icon-button md-raised md-primary md-fab md-mini\"\n                        @click=\"addPJ\"\n                        :title=\"'Add Attachment'\"\n                     >\n                        <md-icon>attach_file</md-icon>\n                     </md-button>\n\n                  </md-speed-dial-content>\n               </md-speed-dial>\n            </div>\n\n            <div class=\"messageForm\">\n               <!-- v-if=\"messages.pj.length > 0\" -->\n               <md-content class=\"pjDiv md-scrollbar\">\n\n                  <attachment-component\n                     v-for=\"(file,index) in messages.pj\"\n                     :key=\"index\"\n                     :file=\"file\"\n                     @remove=\"removePJ\"\n                  >{{file.name}}\n                  </attachment-component>\n               </md-content>\n               <div class=\"messageField\">\n                  <md-field class=\"myField md-inline\">\n                     <label>Message</label>\n                     <md-input v-model=\"messages.messageUser\"></md-input>\n                  </md-field>\n               </div>\n\n            </div>\n\n            <div class=\"sendBtn\">\n               <!-- <md-button\n                  type=\"submit\"\n                  class=\"md-dense md-raised md-primary\"\n               >\n                  Send\n                  <md-icon>send</md-icon>\n               </md-button> -->\n\n               <md-button\n                  class=\"md-icon-button md-raised md-primary\"\n                  type=\"submit\"\n                  title=\"send\"\n               >\n                  <md-icon>send</md-icon>\n               </md-button>\n            </div>\n\n         </form>\n      </div>\n   </div>\n</template>\n\n<script>\nimport { MESSAGE_TYPES } from \"spinal-models-documentation\";\n\nimport {\n   SpinalNode,\n   SpinalGraphService,\n} from \"spinal-env-viewer-graph-service\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nimport { NOTE_TYPE } from \"spinal-env-viewer-plugin-documentation-service/dist/Models/constants\";\n\nimport moment from \"moment\";\nimport messageVue from \"./message.vue\";\nimport attachmentVue from \"./attachment.vue\";\n\nexport default {\n   name: \"messageComponent\",\n\n   props: {\n      nodeInfo: {},\n      noteContextSelected: {\n         default: () => ({}),\n      },\n      noteCategorySelected: {\n         default: () => ({}),\n      },\n      noteGroupSelected: {\n         default: () => ({}),\n      },\n   },\n\n   components: {\n      \"message-component\": messageVue,\n      \"attachment-component\": attachmentVue,\n   },\n\n   data() {\n      this.userConnected = {\n         username: window.spinal.spinalSystem.getUser().username,\n         userId: FileSystem._user_id,\n      };\n      return {\n         messages: {\n            messageUser: \"\",\n            pj: [],\n         },\n         // messageUser: \"\",\n         messageUserEdit: \"\",\n         notesDisplayList: [],\n         editNodePopup: false,\n         selectedNote: undefined,\n         scrollToEnd: false,\n      };\n   },\n\n   methods: {\n      async updateNotesList() {\n         this.notesDisplayList = [];\n\n         if (this.nodeInfo.selectedNode) {\n            let notes = await serviceDocumentation.getNotes(\n               this.nodeInfo.selectedNode\n            );\n\n            let i = 0;\n            for (let note of notes) {\n               let obj = {\n                  id: i,\n                  username: note.element.username\n                     ? note.element.username.get()\n                     : \"unknow\",\n                  message: note.element.message.get(),\n                  date: this.toDate(note.element.date.get()),\n                  type: note.element.type ? note.element.type.get() : undefined,\n                  file: note.element.file,\n                  selectedNode: note.selectedNode,\n                  element: note.element,\n                  viewPoint: note.element.viewPoint,\n               };\n               this.notesDisplayList.push(obj);\n               i++;\n            }\n         }\n      },\n\n      toDate: function (date) {\n         return moment(date).format(\"MMMM Do YYYY, h:mm:ss a\");\n      },\n\n      async addFilesNote() {\n         if (this.messages.pj.length === 0) return;\n\n         await serviceDocumentation.addFileAsNote(\n            this.nodeInfo.selectedNode,\n            this.messages.pj,\n            this.userConnected,\n            this.noteContextSelected.id,\n            this.noteGroupSelected.id\n         );\n      },\n\n      _sendNote(node, message, type, path) {\n         return serviceDocumentation.addNote(\n            node,\n            this.userConnected,\n            message,\n            type,\n            path,\n            this.noteContextSelected.id,\n            this.noteGroupSelected.id\n         );\n      },\n\n      async addNote() {\n         if (typeof this.nodeInfo.selectedNode === \"undefined\") {\n            this.nodeInfo.selectedNode = await this._createBimObjectNode(\n               this.nodeInfo.model,\n               this.nodeInfo.dbid\n            );\n\n            this.resetBind();\n            this.updatedd();\n         }\n\n         await this.addFilesNote();\n         this.messages.pj = [];\n\n         if (this.messages.messageUser.trim().length === 0) return;\n\n         await this._sendNote(\n            this.nodeInfo.selectedNode,\n            this.messages.messageUser\n         );\n         this.messages.messageUser = \"\";\n         this.resetBind();\n         this.updatedd();\n      },\n\n      getUsername() {\n         return window.spinal.spinalSystem.getUser().username;\n      },\n\n      updatedd() {\n         var container = document.querySelector(\"#myList\");\n         setTimeout(() => {\n            container.scrollTop = container.scrollHeight;\n         }, 300);\n      },\n\n      resetBind() {\n         if (this.nodeInfo !== undefined) {\n            if (this.nodeInfo.selectedNode !== undefined) {\n               if (this.myBind !== undefined) {\n                  this.nodeInfo.selectedNode.unbind(this.myBind);\n                  this.myBind = undefined;\n               }\n               if (this.myBind === undefined) {\n                  this.myBind = this.nodeInfo.selectedNode.bind(\n                     this.updateNotesList.bind(this)\n                  );\n               }\n            }\n         }\n      },\n\n      addPJ() {\n         const maxSize = 25000000;\n         const input = document.createElement(\"input\");\n         input.type = \"file\";\n         input.multiple = true;\n\n         input.click();\n\n         input.addEventListener(\n            \"change\",\n            (event) => {\n               const files = event.target.files;\n\n               let filelist = [];\n               for (const file of files) {\n                  filelist.push(file);\n               }\n\n               filelist.push(...this.messages.pj);\n\n               const sizes = filelist.map((el) => el.size);\n\n               const filesSize = sizes.reduce((a, b) => a + b);\n\n               if (filesSize > maxSize) {\n                  alert(\n                     \"The selected file(s) is too large. The maximum size must not exceed 25 MB\"\n                  );\n                  return;\n               }\n\n               this.messages.pj = filelist;\n            },\n            false\n         );\n      },\n\n      removePJ(file) {\n         this.messages.pj = this.messages.pj.filter(\n            (el) => el.name !== file.name\n         );\n      },\n\n      async TakeScreenShot() {\n         const file = await this.getScreenShotFile();\n         this.messages.pj.push(file);\n      },\n\n      getScreenShotFile(isViewPoint = false) {\n         return new Promise(async (resolve, reject) => {\n            window.spinal.ForgeViewer.viewer.getScreenShot(\n               0,\n               0,\n               async (url) => {\n                  let blob = await fetch(url).then((r) => r.blob());\n\n                  const name = this.nodeInfo.selectedNote\n                     ? this.nodeInfo.selectedNote.getName().get()\n                     : await this.getObjectName(\n                          this.nodeInfo.model,\n                          this.nodeInfo.dbid\n                       );\n\n                  let file_name;\n\n                  if (!isViewPoint) {\n                     file_name = `screenshot of ${name} from ${moment().format(\n                        \"L\"\n                     )}.png`;\n                  } else {\n                     file_name = `viewPoint of ${name} from ${moment().format(\n                        \"L\"\n                     )}.png`;\n                  }\n\n                  let file = this.blobToFile(blob, file_name);\n\n                  resolve(file);\n               }\n            );\n         });\n      },\n\n      getObjectName(model, dbid) {\n         if (model && dbid) {\n            return new Promise((resolve) => {\n               model.getProperties(dbid, async (res) => {\n                  console.log(res.name);\n                  resolve(res.name);\n               });\n            });\n         }\n         return \"\";\n      },\n\n      blobToFile(theBlob, fileName) {\n         theBlob.lastModifiedDate = new Date();\n         theBlob.name = fileName;\n         return theBlob;\n      },\n\n      _createBimObjectNode(model, dbid) {\n         if (model && dbid) {\n            return new Promise((resolve) => {\n               model.getProperties(dbid, async (res) => {\n                  const info = await window.spinal.BimObjectService.createBIMObject(\n                     dbid,\n                     res.name,\n                     model\n                  );\n                  if (info instanceof SpinalNode) return resolve(info);\n\n                  resolve(SpinalGraphService.getRealNode(info.id.get()));\n               });\n            });\n         }\n      },\n\n      async saveViewPoint() {\n         const getCircularReplacer = () => {\n            const seen = new WeakSet();\n            return (key, value) => {\n               if (typeof value === \"object\" && value !== null) {\n                  if (seen.has(value)) {\n                     return;\n                  }\n                  seen.add(value);\n               }\n               return value;\n            };\n         };\n\n         const viewer = window.spinal.ForgeViewer.viewer;\n\n         const filter = {\n            guid: true,\n            seedURN: true,\n            overrides: true,\n            objectSet: false,\n            viewport: true,\n            renderOptions: true,\n         };\n         const file = await this.getScreenShotFile(true);\n         const viewerState = viewer.getState(filter);\n         const objectState = {\n            isolated: viewer\n               .getAggregateIsolation()\n               .map((el) => ({ modelId: el.model.id, ids: el.ids })),\n\n            selected: viewer.getAggregateSelection().map((el) => ({\n               modelId: el.model.id,\n               selection: el.selection,\n            })),\n         };\n\n         file.viewState = JSON.stringify(viewerState, getCircularReplacer());\n         file.objectState = JSON.stringify(objectState, getCircularReplacer());\n\n         this.messages.pj.push(file);\n      },\n   },\n\n   watch: {\n      nodeInfo() {\n         this.resetBind();\n         this.updatedd();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.notesContainer {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: space-between;\n   flex-direction: column;\n   margin: auto;\n}\n\n.notesContainer .messages {\n   width: 100%;\n   height: calc(70% - 10px);\n   background: transparent;\n   overflow: hidden;\n   overflow-y: auto;\n   padding: 0;\n}\n\n.div_messages {\n   width: 90%;\n   height: 100%;\n   margin: auto;\n}\n\n.notesContainer .form {\n   width: 100%;\n   height: 30%;\n}\n\n.notesContainer .form .noteForm {\n   width: 100%;\n   height: 100%;\n   margin: auto;\n   display: flex;\n   /* flex-direction: column; */\n   justify-content: space-between;\n}\n\n/* .notesContainer .form .noteForm .icons {\n   flex: 0 0 10%;\n   display: flex;\n   // align-items: flex-end; \n   align-self: flex-end;\n   // border-radius: 20%; \n   // padding-left: 5px; \n} */\n\n.notesContainer .form .noteForm .sendBtn,\n.notesContainer .form .noteForm .icons {\n   /* flex: 0 0 10%; */\n   width: 10%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: flex-end;\n}\n\n.notesContainer .form .noteForm .messageForm {\n   /* flex: 1 1 calc(100% - 80px); */\n   /* flex: 0 0 80%; */\n   width: calc(80% - 20px);\n   height: calc(100% - 15px);\n   display: flex;\n   flex-direction: column;\n   justify-content: flex-end;\n}\n\n.notesContainer .form .noteForm .messageForm .pjDiv {\n   height: calc(100% - 40px);\n   background: transparent;\n   border: 1px dashed grey;\n   overflow: auto;\n}\n\n.notesContainer .form .noteForm .messageForm .pjDiv p {\n   margin: 0px;\n}\n\n.notesContainer .form .noteForm .messageForm .messageField {\n   width: 100%;\n   height: 40px;\n   display: flex;\n   align-items: flex-end;\n}\n\n.notesContainer .form .noteForm .messageForm .messageField .myField {\n   margin: 0px !important;\n   min-height: unset !important;\n}\n</style>\n\n<style>\n.notesContainer .form .noteForm .sendBtn .md-button .md-ripple {\n   padding: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\n  <li class=\"clearfix\"\n      v-if=\"type === MESSAGE_TYPES.file\">\n    <div class=\"message-data align-right\">\n      <span class=\"message-data-time\">{{date}}</span> &nbsp; &nbsp;\n      <span class=\"message-data-name\">{{username}}</span>\n    </div>\n    <div class=\"message messageIcon other-message float-right\"\n         @mouseover=\"hover = true\"\n         @mouseleave=\"hover = false\">\n      <div class=\"texte\">\n        <md-icon class=\"description\">description</md-icon>\n        {{message}}\n      </div>\n\n      <actions-btn class=\"message_actions\"\n                   :hover=\"hover\"\n                   @download=\"download\"\n                   @restoreState=\"restoreState\"\n                   :viewPoint=\"viewPoint\"></actions-btn>\n\n      <!-- <div class=\"message_actions\"\n           v-if=\"hover\">\n        <md-button class=\"md-dense md-primary\"\n                   @click=\"download\">\n          <md-icon>get_app</md-icon>\n          Download\n        </md-button>\n      </div> -->\n\n    </div>\n\n  </li>\n\n  <li class=\"clearfix\"\n      v-else-if=\"type === MESSAGE_TYPES.image\"\n      @mouseover=\"hover = true\"\n      @mouseleave=\"hover = false\">\n    <div class=\"message-data align-right\">\n      <span class=\"message-data-time\">{{date}}</span> &nbsp; &nbsp;\n      <span class=\"message-data-name\">{{username}}</span>\n    </div>\n    <div class=\"message other-message float-right\"\n         @mouseover=\"hover = true\"\n         @mouseleave=\"hover = false\">\n      <div class=\"images\">\n        <div class=\"img_texte\">{{message}}</div>\n        <div class=\"image\">\n          <img :src=\"`/sceen/_?u=${image}`\"\n               alt=\"image\" />\n        </div>\n      </div>\n\n      <actions-btn class=\"message_actions\"\n                   :hover=\"hover\"\n                   @download=\"download\"\n                   @restoreState=\"restoreState\"\n                   :viewPoint=\"viewPoint\"></actions-btn>\n\n    </div>\n  </li>\n\n  <li class=\"clearfix\"\n      v-else>\n    <div class=\"message-data align-right\">\n      <span class=\"message-data-time\">{{date}}</span> &nbsp; &nbsp;\n      <span class=\"message-data-name\">{{username}}</span>\n    </div>\n    <div class=\"message other-message float-right\">\n      <div class=\"texte\">\n        {{message}}\n      </div>\n    </div>\n\n  </li>\n</template>\n\n<script>\nimport { MESSAGE_TYPES } from \"spinal-models-documentation\";\nimport actionBtnVue from \"./actionsBtn.vue\";\n\nexport default {\n  name: \"message\",\n  props: {\n    date: {},\n    username: {},\n    message: {},\n    type: {},\n    file: {},\n    viewPoint: {},\n  },\n  components: {\n    \"actions-btn\": actionBtnVue,\n  },\n  data() {\n    this.MESSAGE_TYPES = MESSAGE_TYPES;\n    return {\n      hover: false,\n      image: undefined,\n      info: undefined,\n    };\n  },\n  mounted() {\n    setTimeout(() => {\n      console.log(\"this.file\", this.viewPoint);\n      this.chargeImg();\n    }, 500);\n  },\n  methods: {\n    chargeImg() {\n      if (this.file) {\n        this.file.load((f) => {\n          this.info = f;\n          f._ptr.load((path) => {\n            this.image = path._server_id;\n          });\n        });\n      }\n    },\n\n    download() {\n      var element = document.createElement(\"a\");\n      element.setAttribute(\"href\", \"/sceen/_?u=\" + this.image);\n      element.setAttribute(\"download\", this.info.name.get());\n      element.click();\n    },\n\n    restoreState() {\n      const viewer = window.spinal.ForgeViewer.viewer;\n\n      if (Object.keys(this.viewPoint).length === 0) return;\n\n      const viewStateString = this.viewPoint.viewState.get();\n      const objectStateString = this.viewPoint.objectState.get();\n\n      const viewState = JSON.parse(viewStateString);\n      const objectState = JSON.parse(objectStateString);\n\n      viewer.restoreState(viewState);\n\n      this.selection(viewer, objectState.selected);\n      this.isolate(viewer, objectState.isolated);\n    },\n\n    isolate(viewer, items) {\n      const bimObjectService = window.spinal.BimObjectService;\n      items.map((el) => {\n        const bimFileId =\n          bimObjectService.mappingModelIdBimFileId[el.modelId].bimFileId;\n        const model = spinal.BimObjectService.getModelByBimfile(bimFileId);\n\n        viewer.impl.visibilityManager.isolate(el.ids, model);\n      });\n    },\n\n    selection(viewer, items) {\n      const bimObjectService = window.spinal.BimObjectService;\n      items.map((el) => {\n        const bimFileId =\n          bimObjectService.mappingModelIdBimFileId[el.modelId].bimFileId;\n        const model = spinal.BimObjectService.getModelByBimfile(bimFileId);\n\n        model.selector.setSelection(el.selection, model, \"selectOnly\");\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n$green: #86bb71;\n$blue: #ffffff;\n$orange: #e38968;\n$gray: #92959e;\n$black: #000000;\n\nli.clearfix {\n  padding-bottom: 20px;\n  list-style: none;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\n.message-data {\n  margin-bottom: 15px;\n}\n\n.message-data-time {\n  color: lighten($gray, 8%);\n  padding-left: 6px;\n}\n\n.message-data-name {\n  color: $blue;\n  text-transform: capitalize;\n}\n\n.message_actions {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  border-radius: 7px 7px 0 0;\n  justify-content: flex-end;\n  align-items: center;\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  padding: 10px;\n  background-color: #424242;\n}\n\n.message {\n  color: #000000;\n  padding: 10px 10px 5px 10px;\n  line-height: 26px;\n  font-size: 16px;\n  border-radius: 7px;\n  margin-bottom: 40px;\n  width: 100%;\n  position: relative;\n  min-height: 30px;\n\n  &:after {\n    bottom: 100%;\n    left: 7%;\n    border: solid transparent;\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n    border-bottom-color: $green;\n    border-width: 10px;\n    margin-left: -10px;\n  }\n}\n\n.message:hover {\n  cursor: pointer;\n}\n\n.my-message {\n  background: $green;\n}\n\n.other-message {\n  background: $blue;\n\n  &:after {\n    border-bottom-color: $blue;\n    left: 93%;\n  }\n}\n\n.me {\n  margin-right: 3px;\n  font-size: 10px;\n  color: $blue;\n}\n\n.align-left {\n  text-align: left;\n}\n\n.align-right {\n  text-align: right;\n}\n\n.float-right {\n  float: right;\n}\n\n.clearfix:after {\n  visibility: hidden;\n  display: block;\n  font-size: 0;\n  content: \" \";\n  clear: both;\n  height: 0;\n}\n</style>\n\n<style lang=\"scss\">\n$black: #000000;\n\nli.clearfix .description.md-icon.md-theme-default.md-icon-font {\n  color: $black !important;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div v-if=\"hover\">\n    <md-button class=\"md-dense md-primary\"\n               @click=\"download\">\n      <md-icon class=\"md-primary\">get_app</md-icon>\n      Download\n    </md-button>\n\n    <md-button class=\"md-dense md-primary\"\n               v-if=\"displayBtn()\"\n               @click=\"restoreState\">\n      <md-icon class=\"md-primary\">near_me</md-icon>\n      Restore viewpoint\n    </md-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"actionsBtn\",\n  props: [\"hover\", \"viewPoint\"],\n  methods: {\n    displayBtn() {\n      console.log(this.viewPoint);\n      if (\n        this.viewPoint &&\n        this.viewPoint.hasOwnProperty(\"viewState\") &&\n        this.viewPoint.hasOwnProperty(\"objectState\")\n      )\n        return true;\n      return false;\n    },\n    download() {\n      this.$emit(\"download\");\n    },\n    restoreState() {\n      this.$emit(\"restoreState\");\n    },\n  },\n};\n</script>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"content\">\n      <div\n         class=\"md-caption name\"\n         v-tooltip=\"file.name\"\n      >{{file.name}}</div>\n      <div\n         class=\"md-caption delete\"\n         @click=\"remove\"\n      >X</div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"attachment\",\n   props: [\"file\"],\n   data() {\n      return {};\n   },\n   methods: {\n      remove() {\n         this.$emit(\"remove\", this.file);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.content {\n   width: 95%;\n   margin: auto;\n   display: flex;\n   font-weight: bold;\n   justify-content: space-between;\n}\n\n.content .name {\n   width: calc(100% - 35px);\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.content .delete {\n   /* margin-right: 30px; */\n   width: 30px;\n   text-align: center;\n   color: #ff0000;\n}\n\n.content .delete:hover {\n   cursor: pointer;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-documentation.dbf0563a.js.map"}