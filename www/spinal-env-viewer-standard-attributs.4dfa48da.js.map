{"mappings":"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","sources":["node_modules/spinal-env-viewer-standard-attributs/index.js","node_modules/spinal-env-viewer-standard-attributs/classes/StandardAttribute.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js"],"sourcesContent":["/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst HeaderBarName = \"GraphManagerTopBar\";\nconst sidebarName = \"GraphManagerSideBar\";\nconst { spinalContextMenuService } = require(\"spinal-env-viewer-context-menu-service\");\nconst StandardAttribute = require(\"./classes/StandardAttribute\")\n\n\nspinalContextMenuService.registerApp(HeaderBarName, new StandardAttribute(), [\n  3\n]);\n\n","/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst { SpinalGraphService } = require(\"spinal-env-viewer-graph-service\")\nconst { NODE_TO_CATEGORY_RELATION } = require(\"spinal-env-viewer-plugin-documentation-service/dist/Models/constants\");\nconst { serviceDocumentation } = require('spinal-env-viewer-plugin-documentation-service')\n\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\nconst {\n  spinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nclass StandardAttribute extends SpinalContextApp {\n  constructor() {\n    super(\"initialize standard attributes\",\n      \"This button initialize standard attributes\", {\n      icon: \"my_library_books\",\n      icon_type: \"in\",\n      backgroundColor: \"#FF0000\",\n      fontColor: \"#FFFFFF\"\n    });\n  }\n  isShown() {\n    return Promise.resolve(true);\n  }\n\n  async action() {\n    // getGraph\n    const graph = SpinalGraphService.getGraph();\n    // let Buildings;\n    // let Floors;\n    let AllRooms = [];\n    // get Contexts\n    await graph.getChildren(\"hasContext\").then(async (contexts) => {\n      for (const context of contexts) {\n        if (context.getName().get() === \"spatial\") {\n          // get buildings\n          await context.getChildren(\"hasGeographicBuilding\").then(async (Buildings) => {\n            if (Buildings) {\n              for (const building of Buildings) {\n                // get floors\n                await building.getChildren(\"hasGeographicFloor\").then(async (Floors) => {\n                  if (Floors) {\n                    for (const floor of Floors) {\n                      let Rooms = await floor.getChildren(\"hasGeographicRoom\")\n                      if (Rooms) {\n                        for (const room of Rooms) {\n                          // get rooms\n                          AllRooms.push(room)\n                        }\n                      }\n                    }\n                  }\n                })\n              }\n            }\n          })\n        }\n      }\n    })\n    console.log(AllRooms);\n    // for (const context of contexts) {\n    //   if (context.getName().get() === \"spatial\") {\n    //     // get buildings\n    //     Buildings = await context.getChildren(\"hasGeographicBuilding\")\n    //   }\n    // }\n    // if (Buildings) {\n    //   for (const building of Buildings) {\n    //     // get floors\n    //     Floors = await building.getChildren(\"hasGeographicFloor\")\n    //   }\n    // }\n    // if (Floors) {\n    //   for (const floor of Floors) {\n    //     let Rooms = await floor.getChildren(\"hasGeographicRoom\")\n    //     if (Rooms) {\n    //       for (const room of Rooms) {\n    //         // get rooms\n    //         AllRooms.push(room)\n    //       }\n    //     }\n    //   }\n    // }\n    // interface attributes\n    var infoAttributes = {\n      attributeLabel: \"capacity\",\n      attributeType: \"number\",\n      attributeUnit: \"people\",\n    }\n\n\n    // for (const room of AllRooms) {\n    //   let categoryAttributesList = await room.getChildren(NODE_TO_CATEGORY_RELATION);\n    //   for (const category of categoryAttributesList) {\n    //     if (category.getName().get() === \"Standard Attributes\") {\n    //       serviceDocumentation.removeNode(category);\n    //     }\n    //   }\n    // }\n\n\n\n    // list Of Categories attributes\n    for (const room of AllRooms) {\n      var _room = room\n      let categoryAttributesList = await room.getChildren(NODE_TO_CATEGORY_RELATION);\n      if (categoryStandardAttributesExist(categoryAttributesList) === false) {\n        await serviceDocumentation.addCategoryAttribute(_room, \"Standard Attributes\").then(async (result) => {\n          let categoryResult = result.node\n          let cap = await calculCapacity(categoryAttributesList)\n          await serviceDocumentation.addAttributeByCategoryName(_room, categoryResult.getName().get(), infoAttributes.attributeLabel, cap, infoAttributes.attributeType, infoAttributes.attributeUnit)\n        })\n      } else {\n        for (const category of categoryAttributesList) {\n          if (category.getName().get() === \"Standard Attributes\") {\n            let cap = calculCapacity(categoryAttributesList)\n            let attributes = (await category.element.load()).get();\n            if (!attributeCapacityExist(attributes)) {\n              await serviceDocumentation.addAttributeByCategoryName(_room, category.getName().get(), infoAttributes.attributeLabel, cap, infoAttributes.attributeType, infoAttributes.attributeUnit)\n            }\n          }\n        }\n      }\n    }\n    function attributeCapacityExist(attributes) {\n      for (const attr of attributes) {\n        if (attr.label === \"capacity\") return true\n        else return false\n      }\n    }\n    function categoryStandardAttributesExist(categoryAttributesList) {\n      for (const category of categoryAttributesList) {\n        if (category.getName().get() === \"Standard Attributes\") return true\n        else return false\n      }\n    }\n    async function calculCapacity(categoryAttributesList) {\n      for (const category of categoryAttributesList) {\n        if (category.getName().get() === \"Spatial\") {\n          const attributes = (await category.element.load()).get();\n          for (const attribute of attributes) {\n            if (attribute.label === \"area\") {\n              return Math.round(attribute.value / 5)\n            }\n          }\n        }\n      }\n    }\n\n  }\n}\n\nmodule.exports = StandardAttribute;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n"],"names":[],"version":3,"file":"spinal-env-viewer-standard-attributs.4dfa48da.js.map"}