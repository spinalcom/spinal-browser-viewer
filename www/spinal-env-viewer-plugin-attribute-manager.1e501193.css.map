{"mappingssources":["node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/typesList.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/tableContent.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tooltips/createAttribute.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tooltips/changeCol.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/fabs.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/index.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tablePage.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/panel.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/mdSelect.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/createItem.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tooltips/addItem.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/displayList.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/configurations.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/configuration-crud.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/currentConfiguration.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/configurationPanel.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/context.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/createByAttribute.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/createByName.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/createByFixedValue.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/category.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/group.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/configurationStep.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/launchGenerationStep.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/selectionStep.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/panel.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/displayList.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/editParamsComponent.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/paramsUploaded.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/createParamsComponent.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/paramsDialog.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/importAttributeExcelDialog.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/dialogs/import.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/dialogs/configurations.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/dialogs/select-type.vue"],"sourcesContent":["<template>\n  <div v-if=\"types\"\n       class=\"_container\">\n    <div class=\"_containerItem\"\n         v-for=\"(type,index) in types\"\n         :key=\"index\"\n         @click=\"selectType(type)\">\n      <div class=\"text\">{{type}}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"typeLstComponent\",\n  props: {\n    types: {\n      required: true\n    }\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    selectType(type) {\n      this.$emit(\"select\", type);\n    }\n  }\n};\n</script>\n\n<style scoped>\n._container {\n  width: calc(100% - 40px);\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding-left: 20px;\n  padding-right: 20px;\n}\n\n._containerItem {\n  width: 45%;\n  height: 150px;\n  border: 1px solid gray;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10px;\n}\n\n._container ._containerItem .text {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n._containerItem:hover {\n  background-color: gray;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"content\"\n       v-if=\"data\"\n       @mouseover=\"mouseIsOver\"\n       @mouseleave=\"mouseOutOver\">\n\n    <div class=\"valueDiv\"\n         :class=\"{'contentEditable' : editable}\"\n         :contenteditable=\"editable\"\n         ref=\"display\"\n         @input=\"changeValue\">\n      {{data.displayValue}}\n    </div>\n\n    <md-button class=\"contentIcon md-icon-button md-dense\"\n               v-if=\"displayBtn()\"\n               @click=\"findValueInMaquette\">\n      <md-tooltip>find value in maquette</md-tooltip>\n      <md-icon>my_location</md-icon>\n    </md-button>\n\n    <!-- <md-icon class=\"contentIcon\"\n             v-if=\"displayBtn()\"\n             @click=\"findValueInMaquette\">my_location</md-icon> -->\n\n  </div>\n</template>\n\n<script>\nimport attributeService from \"../../../../../services\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nconst lodash = require(\"lodash\");\n\nexport default {\n  name: \"tableContentComponent\",\n  props: [\"editable\", \"item\", \"attribute\", \"itemsMap\"],\n  data() {\n    return {\n      // value: \"\",\n      // displayValue: \"\"\n      data: undefined,\n      mouseOver: false,\n    };\n  },\n  mounted() {\n    // this.value = this.getValue();\n    // this.displayValue = this.value;\n\n    this.data = this.getValue();\n  },\n  methods: {\n    getValue() {\n      let value = this.itemsMap.get(this.item.id);\n      return value[`${this.attribute.category}_${this.attribute.label}`];\n      // let found;\n      // if (this.item && this.attribute) {\n      //   found = this.item.attributes.find(el => {\n      //     return (\n      //       el.label === this.attribute.label &&\n      //       el.category === this.attribute.category\n      //     );\n      //   });\n      // }\n      // if (found) {\n      //   found[\"displayValue\"] = found.value;\n      //   return found;\n      // }\n      // return {\n      //   value: \"-\",\n      //   displayValue: \"-\"\n      // };\n    },\n\n    setValue() {\n      this.$emit(\"setValue\", {\n        item: this.item,\n        attribute: this.attribute,\n        value: this.data.displayValue,\n      });\n    },\n\n    cancelValue() {\n      this.data.displayValue = this.data.value;\n      this.$refs.display.innerText = this.data.displayValue;\n      this.itemsMap.get(this.item.id)[\n        `${this.attribute.category}_${this.attribute.label}`\n      ][\"displayValue\"] = this.itemsMap.get(this.item.id)[\n        `${this.attribute.category}_${this.attribute.label}`\n      ][\"value\"];\n    },\n\n    changeValue(event) {\n      const el = event.target;\n\n      this.itemsMap.get(this.item.id)[\n        `${this.attribute.category}_${this.attribute.label}`\n      ][\"displayValue\"] = this.$refs.display.innerText;\n      this.displayValue = el.innerText;\n\n      this.setCursorAtEnd(el);\n    },\n\n    setValueToColumn(category, label, value) {\n      if (\n        value.length > 0 &&\n        this.attribute.category === category &&\n        this.attribute.label === label\n      ) {\n        this.data.displayValue = value;\n        this.$refs.display.innerText = value;\n      }\n    },\n\n    validateValue() {\n      this.data.displayValue = this.$refs.display.innerText;\n\n      if (this.data.displayValue !== this.data.value) {\n        attributeService\n          .updateAttributeValue(\n            this.item.id,\n            this.attribute.category,\n            this.attribute.label,\n            this.data.displayValue\n          )\n          .then(() => {\n            this.data.value = this.data.displayValue;\n            this.setValue();\n          });\n      }\n    },\n\n    mouseIsOver() {\n      this.mouseOver = true;\n    },\n\n    displayBtn() {\n      let nodeInfo = SpinalGraphService.getInfo(this.item.id);\n\n      // const isBimObject = nodeInfo && nodeInfo.type.get() === \"BIMObject\";\n      const is3DItem = nodeInfo && (nodeInfo.dbId || nodeInfo.externalId);\n\n      return this.editable && this.mouseOver && is3DItem;\n    },\n\n    mouseOutOver() {\n      this.mouseOver = false;\n    },\n\n    findValueInMaquette() {\n      this.$emit(\"findValueInMaquette\", {\n        id: this.item.id,\n        category: this.attribute.category,\n        attribute: this.attribute.label,\n      });\n    },\n\n    setCursorAtEnd(el) {\n      el.focus();\n      if (\n        typeof window.getSelection != \"undefined\" &&\n        typeof document.createRange != \"undefined\"\n      ) {\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        range.collapse(false);\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n      } else if (typeof document.body.createTextRange != \"undefined\") {\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(el);\n        textRange.collapse(false);\n        textRange.select();\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.content {\n  width: 100%;\n  word-break: break-word;\n  display: flex;\n}\n\n.content .valueDiv {\n  width: 80%;\n}\n\n.content .contentEditable {\n  /* width: 80%; */\n  padding-bottom: 6px;\n  border-bottom: 1px solid gray;\n}\n\n.content .contentIcon {\n  /* width: 20%;\n  min-width: 10px;\n  width: 10px;\n  height: 10px; */\n  /* z-index: 999999; */\n\n  width: 24px;\n  min-width: 24px;\n  padding: 0px;\n  margin: 0px;\n  height: 24px;\n}\n\n.content .contentIcon:hover {\n  cursor: pointer;\n  color: #448aff;\n}\n</style>\n\n<style>\n.content .contentIcon .md-ripple {\n  padding: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover trigger=\"manual\"\n             :open=\"show\"\n             :auto-hide=\"false\"\n             offset=\"16\">\n    <!-- <md-button class=\"md-primary attr_btn\"\n               title=\"add attribute\"\n               @click=\"open\">\n      <md-icon>add</md-icon>\n      ADD ATTRIBUTE\n    </md-button> -->\n\n    <md-button @click=\"open\"\n               class=\"md-elevation-4 md-dense\"\n               style=\"background-color : #448aff\">\n      <md-icon>add</md-icon>\n      &nbsp;\n      Add attribute\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <label>Category name</label>\n            <md-input v-model=\"categoryName\"></md-input>\n          </md-field>\n\n          <md-field class=\"tooltip-content\">\n            <label>Label Name</label>\n            <md-input v-model=\"attributeName\"></md-input>\n          </md-field>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             @click=\"open\">Close</a>\n\n          <a class=\"btn\"\n             @click=\"Validate\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n\n</template>\n\n<script>\nimport attributeService from \"../../../../../services\";\nexport default {\n  name: \"createAttributeTooltip\",\n  props: {\n    show: {\n      default: false\n    },\n    itemFiltered: {\n      required: true\n    }\n  },\n  data() {\n    return {\n      categoryName: \"\",\n      attributeName: \"\"\n    };\n  },\n  methods: {\n    open() {\n      this.$emit(\"open\");\n    },\n    Validate() {\n      if (this.itemFiltered.length > 0) {\n        let promises = this.itemFiltered.map(el => {\n          return attributeService.createAttribute(\n            el.id,\n            this.categoryName,\n            this.attributeName\n          );\n        });\n\n        return Promise.all(promises).then(() => {\n          this.$emit(\"validate\");\n        });\n      } else {\n        alert(\"select at least one item !\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer {\n  width: 200px;\n  height: 200px;\n  color: black;\n}\n\n.popoverContainer ._popoverContent {\n  width: 100%;\n  height: calc(100% - 40px);\n}\n\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>\n\n<style lang=\"scss\">\n.tooltip {\n  // ...\n\n  &.popover {\n    // $color: #f9f9f9;\n    $color: rgb(44, 43, 43);\n\n    .popoverContainer {\n      pointer-events: auto;\n    }\n\n    .popover-inner {\n      background: $color;\n      color: black;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 5px 30px rgba(black, 0.1);\n    }\n\n    .popover-arrow {\n      border-color: $color;\n    }\n  }\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover :auto-hide=\"false\"\n             offset=\"16\">\n    <!-- <md-button class=\"md-primary attr_btn\"\n               title=\"add attribute\">\n      <md-icon>view_column</md-icon>\n      EDIT COLUMN\n    </md-button> -->\n\n    <md-button title=\"edit column value\"\n               class=\"md-fab md-mini md-plain\"\n               style=\"background-color : #f39508\">\n      <md-icon>view_column</md-icon>\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <md-select v-model=\"columnSelected\"\n                       placeholder=\"Select Column\"\n                       name=\"columns\"\n                       id=\"columns\">\n\n              <md-option v-if=\"!columnsFiltered || columnsFiltered.length === 0\"\n                         disabled>No column</md-option>\n\n              <md-option v-for=\"(head,index) in columnsFiltered\"\n                         :key=\"index\"\n                         :value=\"`${head.category}/${head.label}`\">\n                {{`${head.category} / ${head.label}`}}\n              </md-option>\n            </md-select>\n          </md-field>\n\n          <!-- <div class=\"tooltip-content\">\n            <md-checkbox v-model=\"getValueOnBIM\"\n                         class=\"md-primary\">get BIM Value</md-checkbox>\n          </div> -->\n\n          <md-checkbox v-model=\"useMaquetteValue\"\n                       class=\"md-primary\">Import from BIM value</md-checkbox>\n\n          <md-field class=\"tooltip-content\">\n            <label>Value</label>\n            <md-input v-model=\"value\"\n                      :disabled=\"useMaquetteValue || (!columnSelected || columnSelected.trim().length === 0)\">\n            </md-input>\n          </md-field>\n\n          <div class=\"tooltip-content pageSelect\">\n\n            <md-radio v-model=\"pageOnly\"\n                      class=\"md-primary\"\n                      :value=\"true\">This page only</md-radio>\n\n            <md-radio v-model=\"pageOnly\"\n                      class=\"md-primary\"\n                      :value=\"false\">All page</md-radio>\n\n          </div>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             v-close-popover>Close</a>\n\n          <a class=\"btn\"\n             v-close-popover\n             @click=\"Validate\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n\n</template>\n\n<script>\n// import attributeService from \"../../../../services\";\n\nexport default {\n  name: \"createAttributeTooltip\",\n  props: {\n    columns: {},\n    itemsSelected: {}\n  },\n  data() {\n    return {\n      columnSelected: \"\",\n      columnsFiltered: [],\n      useMaquetteValue: false,\n      pageOnly: true,\n      value: \"\"\n    };\n  },\n  mounted() {\n    this.columnsFiltered = this.columns.filter(el => {\n      const hasNoCategory = typeof el.category !== \"undefined\";\n      const hasNoLabel = typeof el.label !== \"undefined\";\n\n      return hasNoCategory && hasNoLabel;\n    });\n  },\n  methods: {\n    Validate() {\n      if (\n        this.itemsSelected &&\n        (this.value.trim().length > 0 || this.useMaquetteValue)\n      ) {\n        const value = this.$emit(\"setValueToColumn\", {\n          value: this.value.trim(),\n          column: this.columnSelected,\n          pageOnly: this.pageOnly,\n          useMaquetteValue: this.useMaquetteValue\n        });\n      } else {\n        alert(\"select at least one item, select value !\");\n      }\n    }\n  },\n  watch: {\n    useMaquetteValue() {\n      if (this.useMaquetteValue) this.value = \"\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer {\n  width: 250px;\n  height: 350px;\n  color: white;\n}\n\n.popoverContainer ._popoverContent {\n  width: 100%;\n  height: calc(100% - 40px);\n}\n\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>\n\n<style lang=\"scss\">\n.tooltip {\n  // ...\n\n  &.popover {\n    // $color: #f9f9f9;\n    $color: rgb(44, 43, 43);\n\n    .popoverContainer {\n      pointer-events: auto;\n    }\n\n    .popover-inner {\n      background: $color;\n      color: black;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 5px 30px rgba(black, 0.1);\n    }\n\n    .popover-arrow {\n      border-color: $color;\n    }\n  }\n}\n</style>\n\n<style>\n.md-select-menu.md-menu-content-bottom-start.md-menu-content-small.md-menu-content.md-theme-default {\n  z-index: 99999 !important;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <div class=\"fabs\">\n    <md-speed-dial v-if=\"!editMode\"\n                   md-direction=\"top\"\n                   md-event=\"click\">\n      <md-speed-dial-target class=\"md-fab md-mini md-primary\">\n        <md-icon class=\"md-morph-initial\">menu</md-icon>\n        <md-icon class=\"md-morph-final\">menu_open</md-icon>\n      </md-speed-dial-target>\n\n      <md-speed-dial-content class=\"mdSpeedDialBtn\">\n        <md-button v-for=\"(btn, index) in buttons\"\n                   :key=\"index\"\n                   class=\"md-primary md-dense\"\n                   @click=\"sendEvent(btn.event)\">\n          <md-icon>{{ btn.icon }}</md-icon>\n          &nbsp;\n          {{ btn.text }}\n        </md-button>\n      </md-speed-dial-content>\n    </md-speed-dial>\n\n    <!-- IF EDIT MODE -->\n    <div v-if=\"editMode\"\n         class=\"editModeBtn\">\n      <md-button title=\"Cancel modification\"\n                 @click=\"validateOrCancel(false)\"\n                 class=\"md-fab md-mini md-plain\">\n        <md-icon>clear</md-icon>\n      </md-button>\n\n      <change-col-value :columns=\"headerDisplayed\"\n                        :itemsSelected=\"itemsSelected\"\n                        @setValueToColumn=\"setValueToColumn\">\n      </change-col-value>\n\n      <md-button title=\"Validate modification\"\n                 @click=\"validateOrCancel(true)\"\n                 class=\"md-fab md-mini md-primary\">\n        <md-icon>done</md-icon>\n      </md-button>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport ChangeColValue from \"../tooltips/changeCol.vue\";\n\nexport default {\n  name: \"fabComponent\",\n  components: {\n    \"change-col-value\": ChangeColValue\n  },\n  props: { editMode: {}, itemsSelected: {}, headerDisplayed: {} },\n  data() {\n    this.buttons = [\n      {\n        icon: \"build\",\n        text: \"Classify in group\",\n        event: \"generateGroup\"\n      },\n      {\n        icon: \"settings_applications\",\n        text: \"Configuration\",\n        event: \"configure\",\n        action: this.OpenParamsDialog\n      },\n      {\n        icon: \"link\",\n        text: \"Link to group\",\n        event: \"link\",\n        action: this.LinkItem\n      },\n      {\n        icon: \"edit\",\n        text: \"Active edit mode\",\n        event: \"edit\",\n        action: this.ActiveEditMode\n      }\n    ];\n\n    return {};\n  },\n  methods: {\n    sendEvent(name) {\n      this.$emit(name);\n    },\n    setValueToColumn(res) {\n      this.$emit(\"setToColumn\", res);\n    },\n    validateOrCancel(res) {\n      this.$emit(\"valid\", res);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.fabs {\n  width: 100%;\n  height: 100%;\n}\n\n.fabs .mdSpeedDialBtn {\n  z-index: 999;\n}\n\n.fabs > * {\n  justify-content: center;\n  align-items: flex-end;\n}\n\n.fabs .editModeBtn {\n  display: flex;\n  flex-direction: row;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"_tableContent\" data-app>\n    <div class=\"buttonFab\">\n      <fabs-component\n        :editMode=\"editMode\"\n        :itemsSelected=\"itemsSelected\"\n        :headerDisplayed=\"headerDisplayed\"\n        @configure=\"OpenParamsDialog\"\n        @link=\"LinkItem\"\n        @edit=\"ActiveEditMode\"\n        @valid=\"validateOrCancel\"\n        @setToColumn=\"setValueToColumn\"\n        @generateGroup=\"generateGroup\"\n      ></fabs-component>\n    </div>\n\n    <div class=\"mdToolbar\" md-elevation=\"0\">\n      <div class=\"toolbar-start\">\n        <standard-buttons\n          :itemsSelected=\"itemsSelected\"\n          @refresh=\"refresh\"\n        ></standard-buttons>\n      </div>\n\n      <div class=\"toolbar-end\">\n        <div class=\"searchDiv\">\n          <!-- <md-radio v-model=\"searchBy\"\n                    class=\"md-primary\"\n                    :value=\"0\">Search by name</md-radio>\n\n          <md-radio v-model=\"searchBy\"\n                    class=\"md-primary\"\n                    :value=\"1\">Search by value</md-radio> -->\n\n          <md-field>\n            <!-- <label for=\"searchBy\">Search By</label> -->\n            <md-select v-model=\"searchBy\" name=\"searchBy\" id=\"searchBy\">\n              <md-option :value=\"0\">Search by name</md-option>\n              <md-option :value=\"1\">Search by value</md-option>\n            </md-select>\n          </md-field>\n        </div>\n\n        <md-field>\n          <input\n            class=\"md-input\"\n            placeholder=\"Search...\"\n            v-model=\"searchValue\"\n          />\n          <md-icon>search</md-icon>\n        </md-field>\n      </div>\n    </div>\n    <!-- End First Toolbar -->\n\n    <!-- :value=\"itemsSelected\"\n            :v-model=\"itemsSelected\"  :custom-sort=\"sortByName\"-->\n    <div class=\"_tableContainer\">\n      <v-data-table\n        :headers=\"headerDisplayed\"\n        :items=\"searched\"\n        :rows-per-page-items=\"rowsPerPageText\"\n        :pagination.sync=\"pagination\"\n        dark\n        class=\"elevation-1\"\n      >\n        <template v-slot:headers=\"props\">\n          <tr>\n            <th style=\"text-align: left\">\n              <md-menu class=\"selectionMenu\" md-size=\"small\">\n                <md-button md-menu-trigger>\n                  <md-icon>menu</md-icon>\n                  &nbsp; Select\n                </md-button>\n\n                <md-menu-content>\n                  <md-menu-item\n                    v-for=\"(m, index) in checkboxSelects\"\n                    :key=\"index\"\n                    @click=\"m.action\"\n                  >\n                    <!-- <md-icon>{{\n                      m.value ? 'check_box' : 'check_box_outline_blank'\n                    }}</md-icon> -->\n                    {{ m.text }}\n                  </md-menu-item>\n                </md-menu-content>\n              </md-menu>\n            </th>\n\n            <th\n              style=\"text-align: left\"\n              v-for=\"(head, index) in props.headers\"\n              :key=\"index\"\n            >\n              {{ head.text }}\n            </th>\n            <th></th>\n          </tr>\n        </template>\n\n        <template v-slot:items=\"props\">\n          <td>\n            <v-checkbox\n              v-model=\"props.item.selected\"\n              @change=\"checkItem(props.item)\"\n              primary\n              hide-details\n            ></v-checkbox>\n          </td>\n          <td class=\"nameCell\" @click=\"selectItemInViewer(props.item)\">\n            <md-tooltip md-direction=\"top\">{{ props.item.name }}</md-tooltip>\n            {{ props.item.name }}\n          </td>\n          <td>{{ props.item.type }}</td>\n          <td\n            class=\"text-xs-center\"\n            v-for=\"(attribute, index) in header\"\n            :key=\"index\"\n          >\n            <table-content-component\n              :editable=\"editMode\"\n              :item=\"props.item\"\n              :attribute=\"attribute\"\n              :itemsMap=\"itemsMap\"\n              @setValue=\"refresh\"\n              @findValueInMaquette=\"findValueInMaquette\"\n              ref=\"editableComponent\"\n            >\n            </table-content-component>\n          </td>\n          <td>\n            <md-button\n              class=\"md-icon-button\"\n              @click=\"openAttributesPanel(props.item)\"\n            >\n              <md-tooltip>Open Properties Panel</md-tooltip>\n              <md-icon>tune</md-icon>\n            </md-button>\n          </td>\n        </template>\n      </v-data-table>\n\n      <!-- <div class=\"text-xs-center pt-2\"> -->\n      <!-- <div class=\"paginationDiv\">\n        <v-pagination v-model=\"pagination.page\"\n                      :length=\"pages\"\n                      :total-visible=\"5\"\n                      color=\"blue\"></v-pagination>\n\n        <div class=\"detail\">\n          Total items : {{searched.length}}\n        </div>\n\n      </div> -->\n    </div>\n\n    <!-- <div class=\"pageNumber\"></div> -->\n    <!-- </md-table> -->\n  </div>\n</template>\n\n<script>\nimport TableContentComponent from './tableContent.vue';\nimport CreateAttributeTooltips from '../tooltips/createAttribute.vue';\n// import ChangeColValue from \"../tooltips/changeCol.vue\";\nimport attributeService from '../../../../../services';\n\nimport StandardButtons from './standard-buttons.vue';\nimport FabsComponent from './fabs.vue';\n\nimport EventBus from '../../../../../js/events/events';\n// import tableContentVue from \"./tableContent.vue\";\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\n\nconst {\n  spinalPanelManagerService,\n} = require('spinal-env-viewer-panel-manager-service');\n\nconst debounce = require('lodash.debounce');\n\nimport $ from 'jquery';\n\nexport default {\n  name: 'TableComponent',\n  props: {\n    tableContent: {},\n    header: {},\n    typeSelected: {},\n  },\n  components: {\n    'fabs-component': FabsComponent,\n    'table-content-component': TableContentComponent,\n    'create-attribute': CreateAttributeTooltips,\n    'standard-buttons': StandardButtons,\n  },\n  data() {\n    this.checkboxSelects = [\n      { text: 'select All', value: true, action: this.selectAll },\n      {\n        text: 'select only the current page',\n        value: true,\n        action: this.selectOnLyTheCurrentPage,\n      },\n    ];\n\n    return {\n      showAttrTooltip: false,\n      editMode: false,\n      searched: [],\n      searchValue: '',\n      searchBy: 0,\n\n      itemsSelected: [],\n      headerDisplayed: [],\n      pagination: {\n        page: 1,\n        rowsPerPage: 20,\n        totalItems: 0,\n      },\n      rowsPerPageText: [20, 30, 40],\n\n      itemsMap: new Map(),\n    };\n  },\n\n  created() {\n    this.searchAndFilterTable = debounce(this.searchOnTable, 500);\n  },\n\n  mounted() {\n    this.searched = this.sortByName(\n      this.tableContent.map((el) => {\n        el.selected = false;\n        return el;\n      })\n    );\n    setTimeout(() => {\n      this._addPageNumber();\n    }, 200);\n  },\n\n  methods: {\n    async validateOrCancel(valid) {\n      if (valid) {\n        await this._changeValue();\n      }\n      this.refresh();\n      this.editMode = false;\n    },\n\n    ActiveEditMode() {\n      this.editMode = true;\n    },\n\n    createAttribute() {\n      this.$emit('refresh');\n    },\n\n    filterByName(liste, name) {\n      if (name.trim().length > 0) {\n        return liste\n          .filter((item) => {\n            return item.name.toLowerCase().includes(name.trim().toLowerCase());\n          })\n          .map((el) => {\n            el.selected = false;\n            return el;\n          });\n      }\n\n      return liste.map((el) => {\n        el.selected = false;\n        return el;\n      });\n    },\n\n    filterByValue(liste, value) {\n      if (value.trim().length > 0) {\n        return liste\n          .filter((el) => {\n            let found = el.attributes.find((attr) => {\n              return attr.value\n                .toString()\n                .toLowerCase()\n                .includes(value.trim().toLowerCase());\n            });\n\n            return found ? true : false;\n          })\n          .map((el) => {\n            el.selected = false;\n            return el;\n          });\n      }\n\n      return liste.map((el) => {\n        el.selected = false;\n        return el;\n      });\n    },\n\n    searchOnTable() {\n      switch (this.searchBy) {\n        case 0:\n          this.searched = this.sortByName(\n            this.filterByName(this.tableContent, this.searchValue)\n          );\n          break;\n\n        case 1:\n          this.searched = this.sortByName(\n            this.filterByValue(this.tableContent, this.searchValue)\n          );\n\n          break;\n      }\n    },\n\n    selectAll(value) {\n      this.searched = this.searched.map((el) => {\n        el.selected = true;\n        return el;\n      });\n    },\n\n    unSelectAll() {\n      this.searched = this.searched.map((el) => {\n        el.selected = false;\n        return el;\n      });\n    },\n\n    selectOnLyTheCurrentPage() {\n      this.unSelectAll();\n      this.selectCurrentPage();\n    },\n\n    selectCurrentPage() {\n      const pageNumber = this.pagination.page;\n      const itemByPage = this.pagination.rowsPerPage;\n\n      const begin = (pageNumber - 1) * itemByPage;\n      const end = begin + itemByPage;\n\n      this.searched = this.searched.map((el, index) => {\n        if (index >= begin && index < end) {\n          el.selected = true;\n        }\n        return el;\n      });\n    },\n\n    unSelectCurrentPage() {\n      const pageNumber = this.pagination.page;\n      const itemByPage = this.pagination.rowsPerPage;\n\n      const begin = (pageNumber - 1) * itemByPage;\n      const end = begin + itemByPage;\n\n      this.searched = this.searched.map((el, index) => {\n        if (index >= begin && index < end) {\n          el.selected = false;\n        }\n        return el;\n      });\n    },\n\n    refresh() {\n      this.$emit('refresh');\n    },\n\n    setValueToColumn(res) {\n      let value = res.value;\n      let category = res.column.split('/')[0];\n      let label = res.column.split('/')[1];\n\n      if (res.pageOnly) {\n        let references = this.$refs['editableComponent'];\n\n        references.forEach((el) => {\n          if (res.useMaquetteValue) {\n            this.findValueInMaquette(\n              {\n                id: el.item.id,\n                category: category,\n                attribute: label,\n              },\n              false\n            );\n          } else {\n            el.setValueToColumn(category, label, value);\n          }\n        });\n      } else {\n        for (const id of this.itemsMap.keys()) {\n          if (res.useMaquetteValue) {\n            this.findValueInMaquette(\n              {\n                id: id,\n                category: category,\n                attribute: label,\n              },\n              false\n            );\n          } else {\n            this.setValue(id, category, label, value);\n          }\n        }\n      }\n    },\n\n    LinkItem() {\n      // console.log(this.itemsSelected, this.searched);\n      if (this.itemsSelected.length === 0)\n        return alert('you must select at less one item');\n      spinalPanelManagerService.openPanel('linkToGroupDialog', {\n        type: this.typeSelected,\n        itemSelected: this.itemsSelected,\n      });\n    },\n\n    generateGroup() {\n      // console.log(this.itemsSelected, this.searched);\n\n      //  const itemsFiltered = this._filterElementSelected(this.searched);\n      if (this.itemsSelected.length === 0) {\n        window.alert('select at less one item');\n        return;\n      }\n      //  if (itemsFiltered.length === 0) {\n      //     window.alert(\"select at less one item\");\n      //     return;\n      //  }\n      spinalPanelManagerService.openPanel('generateGroupPanel', {\n        type: this.typeSelected,\n        // items: itemsFiltered,\n        items: this.itemsSelected,\n      });\n    },\n\n    OpenParamsDialog() {\n      // spinalPanelManagerService.openPanel(\"paramDialogComponent\", {\n      //   tableContent: this.tableContent,\n      //   header: this.header,\n      //   typeSelected: this.typeSelected,\n      //   callback: () => {\n      //     this.$emit(\"refresh\");\n      //   }\n      // });\n\n      spinalPanelManagerService.openPanel('configurationPanel', {\n        callback: () => {\n          this.$emit('refresh');\n        },\n      });\n    },\n\n    sortByName(items) {\n      return items.sort((a, b) => {\n        const name1 = a.name.toUpperCase();\n        const name2 = b.name.toUpperCase();\n\n        let comparison = 0;\n        if (name1 > name2) {\n          comparison = 1;\n        } else if (name1 < name2) {\n          comparison = -1;\n        }\n        return comparison;\n      });\n    },\n\n    selectItemInViewer(item) {\n      EventBus.$emit('selectElement', item);\n    },\n\n    constructMap() {\n      for (const content of this.tableContent) {\n        const element = {};\n        for (const attr of content.attributes) {\n          element[`${attr.category}_${attr.label}`] = {\n            value: attr.value,\n            displayValue: attr.value,\n          };\n        }\n        this.itemsMap.set(content.id, element);\n      }\n    },\n\n    async findValueInMaquette(res, alert = true) {\n      const node = SpinalGraphService.getInfo(res.id);\n\n      const value = await attributeService.getBimObjectAttribute(\n        node.get(),\n        res.attribute\n      );\n\n      if (value === '-') {\n        if (alert) window.alert('no value found !');\n        return;\n      } else {\n        this.setValue(res.id, res.category, res.attribute, value);\n      }\n    },\n\n    openAttributesPanel(item) {\n      let info = SpinalGraphService.getInfo(item.id);\n\n      const viewer = window.spinal.ForgeViewer.viewer;\n      let propertyPanel = viewer.getPropertyPanel();\n\n      if (typeof propertyPanel === 'undefined') {\n        propertyPanel =\n          new Autodesk.Viewing.Extensions.ViewerPropertyPanel.prototype.constructor(\n            viewer\n          );\n        viewer.setPropertyPanel(propertyPanel);\n      }\n\n      const model = window.spinal.BimObjectService.getModelByBimfile(\n        info.bimFileId.get()\n      );\n\n      propertyPanel.currentModel = model;\n\n      propertyPanel.setVisible(true);\n      propertyPanel.setNodeProperties(info.dbid.get());\n    },\n\n    openCreateAttrTooltips() {\n      this.showAttrTooltip = !this.showAttrTooltip;\n    },\n\n    setValue(id, category, attribute, value = '-') {\n      const obj = this.itemsMap.get(id);\n      obj[`${category}_${attribute}`]['displayValue'] = value;\n    },\n\n    async _changeValue() {\n      const promises = [];\n\n      for (const nodeId of this.itemsMap.keys()) {\n        const found = this.tableContent.find((el) => el.id === nodeId);\n\n        if (found && found.attributes) {\n          for (const attr of found.attributes) {\n            let value =\n              this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n                'value'\n              ];\n            let displayValue =\n              this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n                'displayValue'\n              ];\n\n            if (value !== displayValue) {\n              promises.push(\n                attributeService.updateAttributeValue(\n                  nodeId,\n                  attr.category,\n                  attr.label,\n                  displayValue\n                )\n              );\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises);\n    },\n\n    async _cancelValue() {\n      for (const nodeId of this.itemsMap.keys()) {\n        const found = this.tableContent.find((el) => el.id === nodeId);\n\n        if (found && found.attributes) {\n          for (const attr of found.attributes) {\n            this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n              'displayValue'\n            ] =\n              this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n                'value'\n              ];\n          }\n        }\n      }\n\n      return;\n    },\n\n    _addPageNumber() {\n      const actionDiv = $(\n        '._tableContent .theme--dark.v-datatable .v-datatable__actions .v-datatable__actions__range-controls'\n      )[0];\n\n      const div = $(\n        `<div class=\"v-datatable__actions__page-number\">Page : ${this.pagination.page} / ${this.pages}</div>`\n      );\n\n      actionDiv.before(div[0]);\n    },\n\n    _filterElementSelected(liste) {\n      if (this.searchValue.trim().length > 0) {\n        return liste.filter((item) => {\n          const found = this.itemsSelected.find((el) => el.id === item.id);\n          return found;\n        });\n      }\n      return liste;\n    },\n\n    checkItem(item) {\n      this.itemsSelected = this.searched.filter((el) => el.selected);\n    },\n  },\n  computed: {\n    pages() {\n      return Math.ceil(this.searched.length / this.pagination.rowsPerPage);\n    },\n\n    searchDataBind() {\n      return `${this.searchValue}|${this.searchBy}`;\n    },\n  },\n  watch: {\n    searched() {\n      this.itemsSelected = this.searched.filter((el) => el.selected);\n    },\n    async tableContent() {\n      this.constructMap();\n      this.searched = this.sortByName(\n        this.filterByName(this.tableContent, this.searchValue)\n      );\n      this.pagination.totalItems = this.searched.length;\n    },\n\n    header() {\n      let formated = this.header.map((el) => {\n        let val = Object.assign({}, el);\n\n        val['text'] = `${el.category} / ${el.label}`;\n        val['value'] = `${el.category}_${el.label}`;\n\n        return val;\n      });\n\n      this.headerDisplayed = [\n        {\n          text: 'Name',\n          value: 'name',\n        },\n        {\n          text: 'Type',\n          value: 'type',\n        },\n        ...formated,\n      ];\n    },\n\n    pagination() {\n      const div = $('.v-datatable__actions__page-number')[0];\n      if (div) div.innerHTML = `Page : ${this.pagination.page} / ${this.pages}`;\n    },\n\n    searchDataBind() {\n      this.searchAndFilterTable();\n    },\n  },\n};\n</script>\n\n<style scoped>\n._tableContent {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n._tableContent .mdToolbar {\n  width: 100%;\n  height: 100px;\n  padding: 0px;\n  margin-bottom: 10px;\n  background-color: transparent;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n._tableContent .mdToolbar .toolbar-start {\n  width: 40%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n._tableContent .mdToolbar .toolbar-end {\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n._tableContent .mdToolbar .toolbar-end .searchDiv {\n  display: flex;\n}\n\n._tableContent .md-content.md-theme-default {\n  background: transparent !important;\n}\n\n._tableContent ._tableContainer {\n  width: 100%;\n  height: calc(100% - 118px);\n}\n\n._tableContent ._tableContainer .nameCell {\n  padding: 0px;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 200px;\n  text-overflow: ellipsis;\n}\n\n._tableContent ._tableContainer .paginationDiv {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n._tableContent ._tableContainer .paginationDiv .detail {\n  display: flex;\n  align-items: center;\n  font-size: 15px;\n}\n\n.buttonFab {\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n}\n</style>\n\n<style>\n._tableContent ._tableContainer .elevation-1 {\n  width: 100%;\n  height: 100%;\n}\n\n._tableContent ._tableContainer .elevation-1 .v-table__overflow {\n  height: calc(100% - 63px);\n  overflow-y: auto;\n}\n\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow\n  .theme--dark.v-table {\n  background-color: transparent;\n}\n\n.selectionMenu .md-button .md-ripple,\n._tableContent .mdToolbar .md-ripple,\n._tableContent ._tableContainer .md-ripple {\n  padding: 0px;\n}\n\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar {\n  background-color: #fff;\n  width: 10px;\n}\n\n/* background of the scrollbar except button or resizer */\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar-track {\n  /* background-color: #fff; */\n  background-color: #424242;\n}\n\n/* scrollbar itself */\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar-thumb {\n  background-color: #babac0;\n  border-radius: 16px;\n  /* border: 5px solid #fff; */\n}\n\n/* set button(top and bottom of the scrollbar) */\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar-button {\n  display: none;\n}\n\n.mdSpeedDialBtn .md-button .md-ripple {\n  width: 170px;\n  display: flex;\n  background-color: transparent;\n  justify-content: center;\n  align-items: center;\n  /* color: #448aff; */\n}\n\n._tableContent .mdToolbar .toolbar-end .md-field {\n  min-height: unset;\n  padding: 0px;\n  margin: 0px;\n}\n\n._tableContent .mdToolbar .toolbar-end .searchDiv .md-radio:not(.md-disabled),\n.md-radio:not(.md-disabled) .md-radio-label {\n  white-space: nowrap;\n}\n\n._tableContent .theme--dark.v-table,\n._tableContent .theme--dark.v-datatable .v-datatable__actions {\n  background-color: transparent;\n}\n\n._tableContent .theme--dark.v-datatable .v-datatable__actions {\n  width: 90%;\n  justify-content: space-between;\n  /* background-color: crimson; */\n}\n\n._tableContent\n  .theme--dark.v-datatable\n  .v-datatable__actions\n  .v-datatable__actions__select {\n  width: 30%;\n  justify-content: center;\n}\n\n._tableContent\n  .theme--dark.v-datatable\n  .v-datatable__actions\n  .v-datatable__actions__page-number {\n  /* width: 40px;\n  height: 100%;\n  text-align: center;\n  background-color: #448aff;\n  font-size: 1.5em;\n  font-weight: bold; */\n\n  width: 100px;\n  height: 50px;\n  /* font-size: 1.5em; */\n  /* font-weight: bold; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* border: 1px solid;\n  border-radius: 50%; */\n}\n\n._tableContent\n  .v-menu__content.theme--dark.v-menu__content--auto.menuable__content__active {\n  position: fixed;\n}\n\n._tableContent ._tableContainer .selectionMenu .md-list-item-content {\n  justify-content: unset;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"tablePage\"\n       v-if=\"itemDisplayed\">\n    <div class=\"_mdContainer\"\n         v-if=\"appState === STATES.normal\">\n      <div class=\"header\">\n        <div class=\"backBtn\">\n          <md-button @click=\"back\">\n            <md-icon>arrow_back</md-icon>\n            &nbsp;\n            BACK\n          </md-button>\n        </div>\n        <div class=\"exportImport\">\n          <md-button class=\"md-primary attr_btn\"\n                     @click=\"importExcel\">\n            <md-icon>get_app</md-icon>\n            &nbsp;\n            Import\n          </md-button>\n          <md-button class=\"md-primary attr_btn\"\n                     @click=\"exportData\">\n            <md-icon>publish</md-icon>\n            &nbsp;\n            Export\n          </md-button>\n\n        </div>\n      </div>\n\n      <div class=\"tableContent\">\n        <table-component ref=\"tableContent\"\n                         :tableContent=\"tableContent\"\n                         :header=\"header\"\n                         :typeSelected=\"typeSelected\"\n                         @refresh=\"createAttribute\"></table-component>\n      </div>\n    </div>\n\n    <div class=\"loading\"\n         v-if=\"appState === STATES.loading\">\n      <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n\n    </div>\n  </div>\n\n</template>\n\n<script>\n// import lodash from \"lodash\";\n\n// import CreateAttributeTooltips from \"./tooltips/createAttribute.vue\";\n\nimport TableComponent from \"./table/index.vue\";\nimport spinalExcelManager from \"spinal-env-viewer-plugin-excel-manager-service\";\n\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nimport FileSaver from \"file-saver\";\n\n// import utilities from \"../../../../js/utilities\";\n\nimport { spinalConfigurationService } from \"../../../../services\";\nimport { BIM_OBJECT_TYPE } from \"spinal-env-viewer-plugin-forge/dist/Constants\";\n\nexport default {\n  name: \"tablePage\",\n  components: {\n    // \"create-attribute\": CreateAttributeTooltips,\n    \"table-component\": TableComponent,\n  },\n  props: {\n    itemDisplayed: {\n      type: Array,\n    },\n    attributesDisplayed: {\n      type: Array,\n    },\n    typeSelected: {},\n  },\n  data() {\n    this.STATES = Object.freeze({\n      normal: 0,\n      loading: 1,\n      error: 2,\n    });\n\n    return {\n      // showAttrTooltip: false,\n      appState: this.STATES.normal,\n      tableContent: [],\n      header: [],\n    };\n  },\n  async mounted() {\n    this.tableContent = await this.getTableContent();\n    this.header = await this.getAttributes();\n  },\n  methods: {\n    back() {\n      this.$emit(\"back\");\n    },\n\n    // openCreateAttrTooltips() {\n    //   this.showAttrTooltip = !this.showAttrTooltip;\n    // },\n    createAttribute() {\n      this.$emit(\"refresh\");\n    },\n\n    async getTableContent() {\n      let content = [];\n      let attributes = await this.getAttributes();\n\n      if (this.itemDisplayed) {\n        content = this.itemDisplayed.map((item) => {\n          return {\n            id: item.id,\n            name: item.name,\n            type: item.type,\n            attributes: attributes.map((el) => {\n              return {\n                category: el.category,\n                label: el.label,\n                date: el.date,\n                value: this.getAttributeValue(item, el),\n              };\n            }),\n          };\n        });\n      }\n\n      // return { header: attributes, data: content };\n      return content;\n    },\n\n    getAttributes() {\n      // if (this.itemDisplayed) {\n      //   this.itemDisplayed.forEach(el => {\n      //     attrs.push(...el.attributes);\n      //   });\n      // }\n\n      // return attrs.filter((elem, index, self) => {\n      //   return (\n      //     self.findIndex(t => {\n      //       return t.category === elem.category && t.label === elem.label;\n      //     }) === index\n      //   );\n      // });\n\n      return spinalConfigurationService\n        .getCurrentConfiguration()\n        .then((conf) => {\n          let values = conf.categories;\n\n          // let values = res.get();\n          let attrs = [];\n\n          values.forEach((value) => {\n            let items = value.attributes\n              .map((attr) => {\n                if (attr.show) {\n                  return {\n                    category: value.name,\n                    label: attr.name,\n                  };\n                }\n                return;\n              })\n              .filter((el2) => typeof el2 !== \"undefined\");\n\n            attrs.push(...items);\n          });\n\n          return attrs;\n        });\n    },\n\n    getAttributeValue(item, attr) {\n      let found;\n      if (item && attr) {\n        found = item.attributes.find((el) => el.label === attr.label);\n      }\n\n      return typeof found !== \"undefined\" ? found.value : \"-\";\n    },\n\n    getExportHeadersData() {\n      let headers = [\n        {\n          key: \"id\",\n          header: \"SpinalGraph ID\",\n          width: 65,\n        },\n        {\n          key: \"revit_id\",\n          header: \"Revit ID\",\n          width: 15,\n        },\n        {\n          key: \"name\",\n          header: \"Name\",\n          width: 50,\n        },\n        // {\n        //   key: \"type\",\n        //   header: \"Type\",\n        //   width: 30\n        // }\n      ];\n\n      this.header.forEach((head) => {\n        headers.push({\n          key: `${head.category}_${head.label}`,\n          header: `${head.category} / ${head.label}`,\n          width: 15,\n        });\n      });\n\n      return headers;\n    },\n\n    getValue(item, attribute) {\n      let found = item.attributes.find((el) => {\n        return (\n          el.label === attribute.label && el.category === attribute.category\n        );\n      });\n\n      return typeof found !== \"undefined\" ? found.value : \"-\";\n    },\n\n    _sortByName(items) {\n      return items.sort((a, b) => {\n        const name1 = a.name.toUpperCase();\n        const name2 = b.name.toUpperCase();\n\n        let comparison = 0;\n        if (name1 > name2) {\n          comparison = 1;\n        } else if (name1 < name2) {\n          comparison = -1;\n        }\n        return comparison;\n      });\n    },\n\n    getExportRowsData() {\n      const tableReference = this.$refs[\"tableContent\"];\n\n      if (tableReference) {\n        const liste = tableReference.itemsSelected || [];\n        const tableSorted = this._sortByName(liste);\n        return tableSorted.map((content) => {\n          let info = {\n            id: content.id,\n            name: content.name,\n            revit_id:\n              content.type === BIM_OBJECT_TYPE\n                ? this._getRevitID(content.name)\n                : \"-\",\n          };\n          this.header.forEach((head) => {\n            let value = this.getValue(content, head);\n            info[`${head.category}_${head.label}`] = value;\n          });\n          return info;\n        });\n      }\n    },\n\n    formatExportData() {\n      return [\n        {\n          data: [\n            {\n              name: \"sheet 1\",\n              header: this.getExportHeadersData(),\n              rows: this.getExportRowsData(),\n            },\n          ],\n        },\n      ];\n    },\n\n    exportData() {\n      let result = this.formatExportData();\n\n      spinalExcelManager.export(result).then((buffer) => {\n        FileSaver.saveAs(new Blob(buffer), `spinalcom.xlsx`);\n      });\n    },\n\n    _getRevitID(name) {\n      let reg = /\\[(.*)\\]/gim;\n      let macthed = name.match(reg);\n      if (macthed && macthed.length > 0) {\n        let value = JSON.parse(JSON.stringify(macthed[macthed.length - 1]));\n        return value.replace(/\\[|\\]/g, (el) => \"\");\n      }\n\n      return \"-\";\n    },\n\n    importExcel() {\n      let input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept =\n        \".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n      input.click();\n\n      input.addEventListener(\n        \"change\",\n        async (event) => {\n          const file = event.target.files[0];\n\n          this.appState = this.STATES.loading;\n\n          const dataJson = await spinalExcelManager.convertExcelToJson(file);\n\n          this.$emit(\"openExportDialog\", {\n            data: dataJson,\n            table: this.tableContent,\n          });\n\n          this.$destroy();\n          // this.appState = this.STATES.normal;\n        },\n        false\n      );\n    },\n  },\n  watch: {\n    itemDisplayed: async function () {\n      this.tableContent = await this.getTableContent();\n      this.header = await this.getAttributes();\n    },\n    // attributesDisplayed: function() {\n\n    //   lodash.debounce(this.getTableContent, 500, { maxWait: 1000 });\n    // }\n  },\n  beforeDestroy() {\n    this.appState = this.STATES.normal;\n  },\n};\n</script>\n\n<style scoped>\n.tablePage {\n  width: calc(100% - 10px);\n  height: calc(100% - 10px);\n}\n\n.tablePage ._mdContainer {\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  overflow: hidden !important;\n}\n\n.tablePage ._mdContainer .header {\n  width: 100%;\n  height: 60px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.tablePage ._mdContainer .tableContent {\n  width: 100%;\n  height: calc(100% - 60px);\n}\n\n.categoryInHead {\n  color: #448aff;\n}\n\n.tablePage .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n\n<style>\n.attr_btn {\n  border: 1px solid #448aff;\n  min-width: 100px;\n  max-width: 150px;\n  padding-right: 5px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\"mdContainer md-scrollbar\">\n\n      <type-lst-component\n         v-if=\"data && appState === STATES.normal && visiblePage === pages.types\"\n         :types=\"data.types\"\n         @select=\"selectType\"\n      >\n      </type-lst-component>\n\n      <table-page\n         v-if=\"appState === STATES.normal && typeSelected && visiblePage === pages.table\"\n         :itemDisplayed=\"itemDisplayed\"\n         :attributesDisplayed=\"attributesDisplayed\"\n         :typeSelected=\"typeSelected\"\n         @back=\"goBack\"\n         @refresh=\"validateItem\"\n         @openExportDialog=\"openExportDialog\"\n      >\n      </table-page>\n\n      <!--\n          /////////////////////////////////\n          Loading\n          ////////////////////////////////\n        -->\n      <div\n         v-if=\"appState === STATES.loading\"\n         class=\"loading\"\n      >\n         <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n   </md-content>\n</template>\n\n<script>\nconst {\n   spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport TypeLstComponent from \"./components/typesList.vue\";\nimport TablePage from \"./components/tablePage.vue\";\n\nimport SpinalAttributeManager from \"../../../services\";\n\nimport EventBus from \"../../../js/events/events\";\n\nexport default {\n   name: \"attributeManagerPanel\",\n   components: {\n      \"type-lst-component\": TypeLstComponent,\n      \"table-page\": TablePage,\n   },\n   mounted() {\n      EventBus.$on(\"refreshTable\", () => {\n         this.refreshData();\n      });\n   },\n   data() {\n      this.STATES = Object.freeze({\n         normal: 0,\n         loading: 1,\n         error: 2,\n      });\n\n      this.pages = Object.freeze({\n         types: 0,\n         table: 1,\n      });\n\n      this.data = null;\n\n      return {\n         appState: this.STATES.normal,\n         itemSelected: null,\n         contextSelected: null,\n         typeSelected: null,\n         visiblePage: this.pages.types,\n         itemDisplayed: null,\n         // attributesDisplayed: []\n      };\n   },\n   methods: {\n      opened(params) {\n         this.itemSelected = params.nodeSelected;\n         this.contextSelected = params.context;\n      },\n\n      closed() {},\n\n      setTitle(title) {\n         spinalPanelManagerService.panels.attributeManagerPanel.panel.setTitle(\n            title\n         );\n      },\n      getAllData() {\n         return SpinalAttributeManager.getAllData(\n            this.contextSelected.id,\n            this.itemSelected.id\n         );\n      },\n      selectType(type) {\n         this.typeSelected = type;\n         this.itemDisplayed = this.data.data[type];\n         // this.attributesDisplayed = this.data.attributes;\n         // this.attributesDisplayed = this.getAttributes();\n         this.visiblePage = this.pages.table;\n      },\n\n      getAttributes() {\n         return this.data.data[this.typeSelected]\n            .map((el) => {\n               return el.attributes.map((el2) => {\n                  return { category: el2.category, label: el2.label };\n               });\n            })\n            .flat();\n      },\n\n      goBack() {\n         this.typeSelected = null;\n         this.visiblePage = this.pages.types;\n      },\n\n      validateItem() {\n         // setTimeout(() => {\n         this.refreshData();\n         // }, 500);\n      },\n\n      refreshData() {\n         this.appState = this.STATES.loading;\n\n         this.getAllData()\n            .then((res) => {\n               this.data = res;\n\n               const typeFound = this.data.types.find(\n                  (el) => el === this.typeSelected\n               );\n\n               this.typeSelected = typeFound ? typeFound : null;\n\n               if (this.typeSelected) {\n                  this.selectType(this.typeSelected);\n               } else {\n                  this.visiblePage = this.pages.types;\n               }\n\n               this.appState = this.STATES.normal;\n            })\n            .catch((err) => {\n               this.appState = this.STATES.normal;\n               console.error(err);\n            });\n      },\n\n      openExportDialog(res) {\n         this.appState = this.STATES.loading;\n\n         spinalPanelManagerService.openPanel(\"importAttributeExcelDialog\", {\n            tableData: res.table,\n            excelData: res.data,\n            callback: () => {\n               this.refreshData();\n            },\n         });\n      },\n   },\n   watch: {\n      itemSelected() {\n         this.setTitle(`Attribute Manager : ${this.itemSelected.name}`);\n         this.refreshData();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.mdContainer {\n   width: 100%;\n   height: calc(100% - 20px);\n   overflow: auto;\n   background: transparent;\n}\n\n.loading {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"select-content\">\n\n    <md-field class=\"select-field\">\n      <md-select v-model=\"itemSelected\"\n                 name=\"select-item\"\n                 id=\"select-item\"\n                 :placeholder=\"placeholder\"\n                 @md-selected=\"selectItem\">\n        <md-option v-if=\"!data || data.length === 0\"\n                   disabled>No Item found</md-option>\n\n        <md-option v-for=\"(item,index) in data\"\n                   :key=\"index\"\n                   :value=\"item.id\">\n          {{item.name}}\n        </md-option>\n\n      </md-select>\n    </md-field>\n\n    <!-- <md-button class=\"create-button md-icon-button md-primary\">\n      <md-icon>add</md-icon>\n    </md-button> -->\n\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: \"select-template\",\n  props: {\n    placeholder: {\n      type: String\n    },\n    data: {},\n    value: {}\n  },\n  data() {\n    return {\n      itemSelected: undefined\n    };\n  },\n  methods: {\n    selectItem(id) {\n      if (id) this.$emit(\"select\", id);\n    }\n  },\n  watch: {\n    value() {\n      this.itemSelected = this.value;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.select-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.select-content .select-field {\n  min-height: 0px;\n}\n</style>\n\n<style>\n.select-content .create-button .md-ripple {\n  padding: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover :auto-hide=\"false\"\n             offset=\"16\"\n             :open=\"show && !disabled\">\n\n    <md-button class=\"md-dense md-raised md-primary\"\n               :disabled=\"disabled\"\n               @click.stop=\"OpenAttribute\">\n      <md-tooltip>{{title}}</md-tooltip>\n      <md-icon>{{icon}}</md-icon>\n      {{title}}\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <label>{{fieldText}}</label>\n            <md-input v-model=\"name\"></md-input>\n          </md-field>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             @click=\"Validate(false)\">Close</a>\n\n          <a class=\"btn\"\n             @click=\"Validate(true)\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n</template>\n\n<script>\nexport default {\n  name: \"createItem\",\n  props: {\n    title: {\n      type: String\n    },\n    fieldText: {\n      type: String\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      name: \"\",\n      show: false\n    };\n  },\n  methods: {\n    Validate(isValid) {\n      this.show = false;\n      if (isValid && this.name.trim().length > 0) {\n        // if (this.category) {\n        //   // let varCategory = serviceDocumentation.\n\n        //   this.$emit(\"add\", { category: this.category, label: this.name });\n        // } else {\n        //   this.$emit(\"add\", { category: this.name });\n        // }\n        this.$emit(\"create\", this.name.trim());\n      }\n\n      this.name = \"\";\n    },\n\n    OpenAttribute() {\n      this.show = !this.show;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover :auto-hide=\"false\"\n             offset=\"16\"\n             :open=\"show\">\n\n    <!-- <md-button v-if=\"category\"\n               class=\"md-icon-button\"\n               title=\"add label\"\n               @click.stop=\"OpenAttribute\">\n      <md-icon>add_circle_outline</md-icon>\n    </md-button> -->\n\n    <!-- <md-button v-if=\"!category\"\n               class=\"md-icon-button md-raised md-primary\"\n               title=\"add category\"\n               @click.stop=\"OpenAttribute\">\n      <md-icon>add</md-icon>\n    </md-button> -->\n\n    <!-- <md-button v-if=\"!category\"\n               title=\"add category\"\n               @click.stop=\"OpenAttribute\"\n               class=\"md-dense md-primary\">\n      <md-icon>add</md-icon>\n      &nbsp;\n      Add category\n    </md-button> -->\n\n    <v-btn outline\n           color=\"#448aff\"\n           v-if=\"!category\"\n           title=\"add category\"\n           @click.stop=\"OpenAttribute\">Add category</v-btn>\n\n    <v-btn v-if=\"category\"\n           title=\"add label\"\n           @click.stop=\"OpenAttribute\"\n           flat\n           icon\n           small\n           color=\"blue\">\n      <v-icon>add</v-icon>\n    </v-btn>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <label>{{category ? \"Add attribute\" : \"Add category\"}}</label>\n            <md-input v-model=\"name\"></md-input>\n          </md-field>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             @click=\"Validate(false)\">Close</a>\n\n          <a class=\"btn\"\n             @click=\"Validate(true)\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n</template>\n\n<script>\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\n\nexport default {\n  name: \"CreateLabel\",\n  props: [\"category\"],\n  data() {\n    return {\n      name: \"\",\n      show: false\n    };\n  },\n  methods: {\n    Validate(isValid) {\n      this.show = false;\n      if (isValid && this.name.trim().length > 0) {\n        if (this.category) {\n          // let varCategory = serviceDocumentation.\n\n          this.$emit(\"add\", { category: this.category, label: this.name });\n        } else {\n          this.$emit(\"add\", { category: this.name });\n        }\n      }\n\n      this.name = \"\";\n    },\n    OpenAttribute() {\n      this.show = !this.show;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"myListContainer  md-scrollbar\">\n    <v-list v-if=\"categories && categories.length > 0\"\n            class=\"listContainer\"\n            expand\n            dark\n            flat>\n      <v-list-group v-for=\"(item,index) in categories\"\n                    :key=\"index\"\n                    prepend-icon=\"keyboard_arrow_down\"\n                    append-icon=\"\"\n                    :one-line=\"false\"\n                    no-action>\n        <v-list-tile slot=\"activator\">\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{item.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n\n            <menu-component :category=\"item.name\"\n                            @add=\"addAttributes\"></menu-component>\n\n          </v-list-tile-action>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn flat\n                   icon\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click.stop=\"remove(item,true)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       SubHeaders                      |\n        ---------------------------------------------------------\n     -->\n        <v-list-tile v-for=\"(subItem,subIndex) in item.attributes\"\n                     :key=\"subIndex\">\n\n          <v-list-tile-action>\n            <v-checkbox :disabled=\"!editMode\"\n                        color=\"blue\"\n                        v-model=\"subItem.show\"></v-checkbox>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{subItem.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn icon\n                   flat\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click=\"remove(item,false,subItem)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       End SubHeaders                  |\n        ---------------------------------------------------------\n     -->\n\n      </v-list-group>\n    </v-list>\n\n    <div class=\"emptyList\"\n         v-if=\"categories && categories.length === 0\">\n      {{message}}\n    </div>\n\n  </md-content>\n\n</template>\n\n<script>\nimport menuComponent from \"../../attributePanel/components/tooltips/addItem.vue\";\n\nexport default {\n  name: \"displayListComponent\",\n  components: {\n    \"menu-component\": menuComponent\n  },\n  props: {\n    categories: {},\n    message: {\n      type: String,\n      default: \"No data found\"\n    },\n    editMode: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  methods: {\n    addAttributes(res) {\n      this.$emit(\"add\", res);\n    },\n\n    remove(category, isCategory, attribute) {\n      let item = {\n        category: category,\n        attr: attribute\n      };\n\n      this.$emit(\"remove\", item);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.myListContainer {\n  width: 100%;\n  height: calc(100% - 50px);\n  /* overflow: auto; */\n}\n\n.myListContainer .listContainer {\n  width: 100%;\n  height: 100%;\n  /* overflow: auto; */\n}\n\n.myListContainer .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div\n      class=\"container\"\n      v-if=\"configurationData\"\n   >\n      <div class=\"header\">\n\n         <div class=\"name\">\n            <md-tooltip>{{configurationData.name}}</md-tooltip>\n            <span>{{configurationData.name}}</span>\n         </div>\n\n         <div class=\"actions\">\n            <div\n               class=\"editMode\"\n               v-if=\"editMode\"\n            >\n               <!-- <v-btn outline\n                 color=\"#448aff\">Add Category</v-btn> -->\n\n               <!-- color=\"#448aff\" -->\n\n               <v-btn\n                  outline\n                  color=\"teal\"\n                  @click=\"save\"\n               >Save</v-btn>\n\n               <v-btn\n                  outline\n                  color=\"#ff5252\"\n                  @click=\"cancel\"\n               >Cancel</v-btn>\n\n               <menu-component @add=\"addAttributeCategory\"></menu-component>\n            </div>\n\n            <div\n               class=\"normalMode\"\n               v-else\n            >\n               <!-- #448aff -->\n               <v-btn\n                  outline\n                  color=\"orange\"\n                  @click=\"activeEditMode\"\n               >Active edit Mode</v-btn>\n\n               <v-btn\n                  outline\n                  color=\"#448aff\"\n                  v-if=\"configurationSelected !== currentConfiguration\"\n                  @click=\"setAsCurrentConf\"\n               >Set as Current Configuration</v-btn>\n\n               <v-btn\n                  outline\n                  v-if=\"configurationSelected === currentConfiguration\"\n                  color=\"teal\"\n                  @click=\"deleteAsCurrentConf\"\n               >\n                  <v-icon>check</v-icon>\n                  Current Configuration\n               </v-btn>\n\n            </div>\n         </div>\n      </div>\n\n      <div class=\"content\">\n         <display-list\n            class=\"displayList md-scrollbar\"\n            :categories=\"configurationData.categories\"\n            :editMode=\"editMode\"\n            :message=\"'No Attribute category found !'\"\n            @add=\"addSubItem\"\n            @remove=\"removeItem\"\n         >\n         </display-list>\n      </div>\n\n   </div>\n</template>\n\n<script>\nimport DisplayList from \"./displayList.vue\";\nimport MenuComponent from \"../../attributePanel/components/tooltips/addItem.vue\";\n\nimport { spinalConfigurationService } from \"../../../../services\";\nimport EventBus from \"../../../../js/events/events\";\n\nexport default {\n   name: \"editConfiguration\",\n   components: {\n      \"display-list\": DisplayList,\n      \"menu-component\": MenuComponent,\n   },\n   props: {\n      configurationSelected: {\n         type: String,\n         default: \"\",\n      },\n      currentConfiguration: {},\n   },\n   data() {\n      return {\n         configurationData: {\n            name: \"\",\n            categories: [],\n         },\n         editMode: false,\n      };\n   },\n   mounted() {\n      this.getConfiguration();\n   },\n   methods: {\n      async getConfiguration() {\n         if (this.configurationSelected) {\n            this.configurationData = await spinalConfigurationService.getConfigurationById(\n               this.configurationSelected\n            );\n         } else {\n            this.configurationData = {\n               name: \"\",\n               categories: [],\n            };\n         }\n      },\n\n      activeEditMode() {\n         this.editMode = true;\n      },\n\n      async setAsCurrentConf() {\n         await spinalConfigurationService.setAsCurrentConfiguration(\n            this.configurationSelected\n         );\n         this.$emit(\"getCurrentConf\");\n         this.refreshPanel();\n      },\n\n      async deleteAsCurrentConf() {\n         await spinalConfigurationService.deleteCurrentConf();\n\n         this.$emit(\"getCurrentConf\");\n         this.refreshPanel();\n      },\n\n      addAttributeCategory(res) {\n         let found = this.configurationData.categories.find(\n            (el) => el.name === res.category\n         );\n\n         if (!found) {\n            this.configurationData.categories.push({\n               id: Date.now(),\n               name: res.category,\n               attributes: [],\n            });\n         }\n      },\n\n      addSubItem(res) {\n         if (res.category && res.label) {\n            let found = this.configurationData.categories.find((el) => {\n               return el.name === res.category;\n            });\n\n            if (found) {\n               let attrFound = found.attributes.find(\n                  (el) => el.name === res.label\n               );\n               if (typeof attrFound === \"undefined\") {\n                  found.attributes.push({\n                     show: true,\n                     name: res.label,\n                     id: Date.now(),\n                  });\n               }\n            }\n         }\n      },\n\n      removeItem(res) {\n         if (typeof res.attr === \"undefined\") {\n            this.configurationData.categories = this.configurationData.categories.filter(\n               (el) => {\n                  return el.id !== res.category.id;\n               }\n            );\n         } else {\n            let found = this.configurationData.categories.find((el) => {\n               return el.id === res.category.id;\n            });\n\n            if (found) {\n               found.attributes = found.attributes.filter(\n                  (el) => el.id !== res.attr.id\n               );\n            }\n         }\n      },\n\n      cancel() {\n         this.editMode = false;\n         this.getConfiguration();\n      },\n\n      async save() {\n         this.editMode = false;\n         await spinalConfigurationService.editConfiguration(\n            this.configurationSelected,\n            this.configurationData\n         );\n\n         this.refreshPanel();\n      },\n\n      refreshPanel() {\n         EventBus.$emit(\"refreshTable\");\n      },\n   },\n   watch: {\n      configurationSelected: function () {\n         this.getConfiguration();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.container {\n   width: 100%;\n   height: 100%;\n   padding: 0;\n   overflow: hidden;\n}\n\n.container .header {\n   width: 100%;\n   height: 50px;\n   display: flex;\n   justify-content: space-between;\n}\n\n.container .header .name {\n   width: 30%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   padding: 0 5px 0 5px;\n   font-size: 1.5em;\n}\n\n.container .header .name span {\n   white-space: nowrap;\n   overflow: hidden;\n   text-overflow: ellipsis;\n}\n\n.container .header .actions {\n   /* width: 60%; */\n   height: 100%;\n   flex: 1 0 60%;\n   display: flex;\n   justify-content: flex-end;\n   flex-wrap: nowrap;\n}\n\n.container .header .actions .editMode,\n.container .header .actions .normalMode {\n   display: flex;\n   flex-wrap: nowrap;\n}\n\n.container .content {\n   width: 100%;\n   height: calc(100% - 50px);\n   overflow: hidden;\n}\n\n.container .content .displayList {\n   width: 100%;\n   height: 100%;\n   overflow: hidden;\n   overflow-y: auto;\n}\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\"_container md-scrollbar\">\n\n      <div class=\"fabs\">\n         <md-speed-dial\n            md-direction=\"top\"\n            md-event=\"click\"\n            md-effect=\"scale\"\n         >\n            <md-speed-dial-target class=\"md-fab md-bottom-right md-mini md-primary\">\n               <md-icon class=\"md-morph-initial\">menu</md-icon>\n               <md-icon class=\"md-morph-final\">menu_open</md-icon>\n            </md-speed-dial-target>\n\n            <md-speed-dial-content class=\"configMdSpeedDialBtn\">\n\n               <create-item\n                  :title=\"'Create Configuration Profil'\"\n                  :fieldText=\"'Configuration Profil Name'\"\n                  @create=\"createConfiguration\"\n                  :disabled=\"!item.groupSelected\"\n                  v-if=\"item.groupSelected\"\n                  :icon=\"'add'\"\n               ></create-item>\n\n               <create-item\n                  :title=\"'Create Group'\"\n                  :fieldText=\"'Group Name'\"\n                  @create=\"createGroup\"\n                  :disabled=\"!item.categorySelected\"\n                  v-if=\"item.categorySelected\"\n                  :icon=\"'add'\"\n               ></create-item>\n\n               <create-item\n                  :title=\"'Create Category'\"\n                  :fieldText=\"'Category Name'\"\n                  @create=\"createCategory\"\n                  :icon=\"'add'\"\n               ></create-item>\n\n               <!-- <md-button class=\"md-primary md-dense\"\n                     @click.stop=\"importFile\">\n            <md-tooltip>Import</md-tooltip>\n            Import\n          </md-button>\n\n          <md-button class=\"md-primary md-dense\"\n                     @click.stop=\"exportFile\">\n            <md-tooltip>Export</md-tooltip>\n            Export\n          </md-button> -->\n\n            </md-speed-dial-content>\n         </md-speed-dial>\n      </div>\n\n      <div class=\"exportHead\">\n\n         <v-btn\n            outline\n            color=\"#448aff\"\n            @click.stop=\"importFile\"\n         >Import</v-btn>\n\n         <v-btn\n            outline\n            color=\"#448aff\"\n            @click.stop=\"exportFile\"\n         >Export</v-btn>\n\n      </div>\n\n      <div class=\"header\">\n\n         <div class=\"select select-categories\">\n            <select-item\n               :placeholder=\"'Select category'\"\n               :data=\"item.categories\"\n               @select=\"selectCategory\"\n               :value=\"item.categorySelected\"\n            ></select-item>\n         </div>\n\n         <div class=\"select select-groups\">\n            <select-item\n               :placeholder=\"'Select group'\"\n               :data=\"item.groups\"\n               @select=\"selectGroup\"\n               :value=\"item.groupSelected\"\n            ></select-item>\n         </div>\n\n         <div class=\"select select-configurations\">\n            <select-item\n               :placeholder=\"'select configuration'\"\n               :data=\"item.configurations\"\n               @select=\"selectConfiguration\"\n               :value=\"item.configurationSelected\"\n            ></select-item>\n         </div>\n\n      </div>\n\n      <div class=\"body\">\n\n         <div\n            class=\"no-conf\"\n            v-if=\"!item.configurationSelected\"\n         >\n            Select a configuration\n         </div>\n\n         <configuration-component\n            v-else\n            :configurationSelected=\"item.configurationSelected\"\n            :currentConfiguration=\"currentConfiguration\"\n            @getCurrentConf=\"currentConf\"\n         >\n         </configuration-component>\n\n      </div>\n   </md-content>\n</template>\n\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nimport { spinalConfigurationService } from \"../../../../services\";\n\nimport spinalExcelManager from \"spinal-env-viewer-plugin-excel-manager-service\";\n\nimport FileSaver from \"file-saver\";\n\nimport SelectItem from \"./mdSelect.vue\";\nimport CreateItem from \"./createItem.vue\";\nimport ConfigurationsComponent from \"./configurations.vue\";\n\nexport default {\n   name: \"configuration-template\",\n   props: {\n      currentConfiguration: {},\n      item: {},\n      tempData: {},\n   },\n   components: {\n      \"create-item\": CreateItem,\n      \"select-item\": SelectItem,\n      \"configuration-component\": ConfigurationsComponent,\n   },\n   data() {\n      return {};\n   },\n   async mounted() {\n      const categories = await spinalConfigurationService.getCategories();\n      this.item.categories = categories.map((el) => el.get());\n   },\n\n   methods: {\n      async createCategory(name) {\n         const category = await spinalConfigurationService.createCategory(\n            name,\n            \"add\"\n         );\n\n         if (category && category.info) {\n            this.item.categories.push(category.info.get());\n            this.selectCategory(category.getId().get());\n         }\n      },\n\n      async createGroup(name) {\n         const group = await spinalConfigurationService.createGroup(\n            this.item.categorySelected,\n            name,\n            \"#000000\"\n         );\n\n         if (group && group.info) {\n            this.item.groups.push(group.info.get());\n            this.selectGroup(group.getId().get());\n         }\n      },\n\n      async createConfiguration(name) {\n         const configuration = await spinalConfigurationService.createConfiguration(\n            this.item.groupSelected,\n            name\n         );\n\n         if (configuration && configuration.info) {\n            this.item.configurations.push(configuration.info.get());\n            this.selectConfiguration(configuration.getId().get());\n         }\n      },\n\n      async selectCategory(id) {\n         if (typeof id !== \"undefined\") {\n            this.item.categorySelected = id;\n            const groups = await spinalConfigurationService.getGroups(id);\n            this.item.groups = groups.map((el) => el.get());\n\n            // init group && configuration\n            this.item.groupSelected = undefined;\n            this.item.configurationSelected = undefined;\n            // end\n         }\n      },\n\n      async selectGroup(id) {\n         if (typeof id !== \"undefined\") {\n            this.item.groupSelected = id;\n            const configurations = await spinalConfigurationService.getConfigurations(\n               id\n            );\n            this.item.configurations = configurations.map((el) => el.get());\n\n            // init configuration\n            this.item.configurationSelected = undefined;\n            //end\n         }\n      },\n\n      async selectConfiguration(id) {\n         this.item.configurationSelected = id;\n      },\n\n      currentConf() {\n         this.$emit(\"currentConf\");\n      },\n\n      async exportFile() {\n         //\n         // spinalPanelManagerService.openPanel(\"exportConfigurationDialog\", {});\n\n         const result = {\n            data: [],\n         };\n\n         if (this.item.configurationSelected) {\n            const item = await this._formatConfiguration(\n               this.item.configurationSelected,\n               this.item.groupSelected,\n               this.item.categorySelected\n            );\n\n            result.data.push(item);\n         } else if (this.item.groupSelected) {\n            const items = await this._getGroupsItems(this.item.groupSelected);\n            result.data.push(...items);\n         } else if (this.item.categorySelected) {\n            let groupsItems = this.item.groups.map((group) => {\n               return this._getGroupsItems(group.id);\n            });\n\n            let items = await Promise.all(groupsItems);\n\n            items.forEach((el) => {\n               result.data.push(...el);\n            });\n         }\n\n         spinalExcelManager.export(result).then((buffer) => {\n            FileSaver.saveAs(new Blob(buffer), `configurations_spinalcom.xlsx`);\n         });\n      },\n\n      importFile() {\n         let input = document.createElement(\"input\");\n         input.type = \"file\";\n         input.accept =\n            \".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n         input.click();\n\n         input.addEventListener(\n            \"change\",\n            async (event) => {\n               const file = event.target.files[0];\n               const dataJson = await spinalExcelManager.convertConfigurationFile(\n                  file\n               );\n\n               spinalPanelManagerService.openPanel(\n                  \"importConfigurationDialog\",\n                  dataJson\n               );\n            },\n            false\n         );\n      },\n\n      async _formatConfiguration(configurationId, groupId, categoryId) {\n         const data = {\n            name: \"\",\n            header: this._getExcelHeaders(),\n            rows: [],\n         };\n\n         const categoryFound = this.item.categories.find(\n            (el) => el.id === categoryId\n         );\n\n         const groupFound = this.item.groups.find((el) => el.id === groupId);\n\n         const configFound = this.item.configurations.find(\n            (el) => el.id === configurationId\n         );\n\n         const config = await spinalConfigurationService.getConfigurationById(\n            configurationId\n         );\n\n         if (categoryFound && groupFound && configFound && config) {\n            // data.name = `${categoryFound.name}|${groupFound.name}|${config.name}`;\n\n            data.name = configFound.name;\n\n            data.rows.push([\"Category : \", categoryFound.name]);\n            data.rows.push([\"Group : \", groupFound.name]);\n            data.rows.push([\"Configuration Profil : \", configFound.name]);\n\n            data.rows.push([, ,]);\n            data.rows.push([, ,]);\n            data.rows.push([\"Attribute Category\", \"Attribute Name\"]);\n\n            config.categories.forEach((category) => {\n               const res = category.attributes.map((attribute) => {\n                  // return {\n                  //   name: attribute.name,\n                  //   attrCategory: category.name,\n                  //   ConfigProfil: configFound.name,\n                  //   spinalCategory: categoryFound.name,\n                  //   spinalGroup: groupFound.name\n                  // };\n\n                  return [category.name, attribute.name];\n               });\n\n               data.rows.push(...res);\n            });\n            return data;\n         }\n      },\n\n      _getExcelHeaders(attributes) {\n         const header = [\n            // {\n            //   key: \"attrCategory\",\n            //   header: \"Attribute Category\",\n            //   width: 30\n            // },\n            // {\n            //   key: \"name\",\n            //   header: \"Attribute Name\",\n            //   width: 30\n            // }\n            // // {\n            // //   key: \"ConfigProfil\",\n            // //   header: \"Configuration Profil\",\n            // //   width: 30\n            // // },\n            // // {\n            // //   key: \"spinalCategory\",\n            // //   header: \"Category\",\n            // //   width: 30\n            // // },\n            // // {\n            // //   key: \"spinalGroup\",\n            // //   header: \"Group\",\n            // //   width: 30\n            // // }\n         ];\n\n         return header;\n      },\n\n      async _getGroupsItems(groupId) {\n         let configurations = [];\n\n         if (this.item.groupSelected === groupId) {\n            configurations = this.item.configurations;\n         } else {\n            configurations = await spinalConfigurationService.getConfigurations(\n               groupId\n            );\n         }\n\n         const promises = configurations.map((configuration) => {\n            return this._formatConfiguration(\n               configuration.id,\n               groupId,\n               this.item.categorySelected\n            );\n         });\n\n         return Promise.all(promises);\n      },\n\n      Open(...res) {\n         // console.log(\"res\", res);\n      },\n   },\n   watch: {\n      async tempData() {\n         if (this.tempData.hasOwnProperty(\"categoryId\")) {\n            await this.selectCategory(this.tempData.categoryId);\n         }\n\n         if (this.tempData.hasOwnProperty(\"groupId\")) {\n            await this.selectGroup(this.tempData.groupId);\n         }\n\n         if (this.tempData.hasOwnProperty(\"configId\")) {\n            await this.selectConfiguration(this.tempData.configId);\n         }\n      },\n   },\n};\n</script>\n\n<style scoped>\n._container {\n   width: 100%;\n   height: 100%;\n   background-color: transparent;\n   overflow: hidden;\n   overflow-x: auto;\n}\n\n._container .header {\n   width: 100%;\n   height: 40px;\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   margin-bottom: 10px;\n}\n\n._container .header .select {\n   width: 25%;\n}\n\n._container .exportHead {\n   height: 40px;\n   display: flex;\n   justify-content: flex-end;\n   margin-bottom: 10px;\n}\n\n._container .body {\n   width: 100%;\n   height: calc(100% - 100px);\n}\n\n._container .body .no-conf {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   font-size: 1.6em;\n}\n\n._container .fabs {\n   position: absolute;\n   bottom: 24px;\n   right: 20px;\n   display: flex;\n   justify-content: flex-end;\n   align-items: flex-end;\n   /* width: 300px;\n  height: 300px; */\n}\n\n._container .fabs > * {\n   display: flex;\n   justify-content: center;\n   align-items: flex-end;\n}\n\n/* ._container .fabs > * {\n  justify-content: center;\n  align-items: flex-end;\n} */\n\n/* ._container .fabs .configMdSpeedDialBtn {\n  z-index: 999;\n} */\n</style>\n\n\n<style>\n._container .fabs .configMdSpeedDialBtn .md-button .md-ripple {\n   width: 250px;\n}\n\n._container .fabs .md-speed-dial-content {\n   z-index: unset !important;\n}\n\n/* \nwhen fabs not active \n*/\n._container\n   .fabs\n   .md-speed-dial.md-theme-default.md-direction-top.md-effect-scale\n   .md-speed-dial-content.configMdSpeedDialBtn {\n   display: none;\n}\n\n/* \nwhen fabs active \n*/\n._container\n   .fabs\n   .md-speed-dial.md-theme-default.md-active.md-direction-top.md-effect-scale\n   .md-speed-dial-content.configMdSpeedDialBtn {\n   display: flex;\n}\n\n/* ._container\n  .fabs\n  .md-speed-dial.md-direction-top.md-effect-fling\n  .md-speed-dial-content\n  .md-button {\n  background-color: #448aff;\n  color: white;\n} */\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"container md-scrollbar\">\n\n    <!-- <div class=\"header\">\n      <v-btn outline\n             color=\"#448aff\">Import</v-btn>\n\n      <v-btn outline\n             color=\"#448aff\">Export</v-btn>\n    </div> -->\n\n    <configuration-component class=\"configuration\"\n                             v-if=\"currentConfiguration\"\n                             :configurationSelected=\"currentConfiguration\"\n                             :currentConfiguration=\"currentConfiguration\">\n    </configuration-component>\n\n    <div class=\"empty\"\n         v-else>\n      No configuration Set\n    </div>\n\n  </md-content>\n</template>\n\n<script>\nimport ConfigurationsComponent from \"./configurations.vue\";\n\nexport default {\n  name: \"current-configuration-template\",\n  components: {\n    \"configuration-component\": ConfigurationsComponent\n  },\n  props: {\n    currentConfiguration: {}\n  },\n  data() {\n    return {};\n  },\n  methods: {}\n};\n</script>\n\n<style scoped>\n.container {\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  overflow: hidden;\n  overflow-x: auto;\n}\n\n.container .header {\n  width: 100%;\n  height: 50px;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.container .configuration {\n  width: 100%;\n  height: 100%;\n  /* height: calc(100% - 60px); */\n}\n\n.container .empty {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5em;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content\n      class=\"paramsContainer\"\n      style=\"overflow : hidden\"\n   >\n      <md-tabs\n         class=\"myTabs\"\n         md-alignment=\"centered\"\n         @md-changed=\"changeTab\"\n         :md-active-tab=\"tabDisplayed ? 'all-params-tab' : 'current-param-tab'\"\n      >\n\n         <md-tab\n            id=\"current-param-tab\"\n            md-label=\"Current configuration\"\n            md-icon=\"offline_pin\"\n         ></md-tab>\n\n         <md-tab\n            id=\"all-params-tab\"\n            md-label=\"Configurations\"\n            md-icon=\"settings_applications\"\n         ></md-tab>\n\n         <!-- <md-tab id=\"all-params-tab\"\n                md-label=\"All configuration\"\n                md-icon=\"settings_applications\"></md-tab> -->\n\n      </md-tabs>\n\n      <md-content class=\"tabsContent\">\n\n         <configuration-template\n            class=\"content\"\n            v-if=\"tabDisplayed === 1\"\n            :tempData=\"tempData\"\n            :item=\"item\"\n            :currentConfiguration=\"currentConfiguration\"\n            @currentConf=\"getCurrentConfiguration\"\n         >\n         </configuration-template>\n\n         <current-configuration-template\n            class=\"content\"\n            v-if=\"tabDisplayed === 0\"\n            :currentConfiguration=\"currentConfiguration\"\n         >\n         </current-configuration-template>\n\n         <!-- <current-param v-if=\"tabDisplayed === 0\"\n                       :currentConfiguration=\"currentConf\"\n                       @refresh=\"RefreshData\">\n        </current-param>\n\n        <edit-param v-if=\"tabDisplayed === 1\"\n                    :data=\"allConfigurations\"\n                    :currentConfiguration=\"currentConf\"\n                    @change=\"changeCurrentConf\"\n                    @refresh=\"RefreshData\"></edit-param>\n\n        <create-param v-if=\"tabDisplayed === 2\"\n                      @refresh=\"RefreshData\"></create-param> -->\n\n      </md-content>\n\n   </md-content>\n</template>\n\n<script>\nimport ConfigurationCrud from \"./components/configuration-crud.vue\";\n\nimport CurrentConfigurationComponent from \"./components/currentConfiguration.vue\";\n\nimport { spinalConfigurationService } from \"../../../services\";\n\nexport default {\n   name: \"configurationPanel\",\n   components: {\n      \"configuration-template\": ConfigurationCrud,\n      \"current-configuration-template\": CurrentConfigurationComponent,\n   },\n   data() {\n      return {\n         tabDisplayed: 1,\n         currentConfiguration: undefined,\n         item: {\n            categorySelected: \"\",\n            categories: [],\n            groupSelected: \"\",\n            groups: [],\n            configurationSelected: \"\",\n            configurations: [],\n         },\n         tempData: {},\n      };\n   },\n   mounted() {},\n   methods: {\n      opened(params) {\n         this.getCurrentConfiguration();\n\n         if (params && Object.keys(params).length > 0) {\n            this.tempData = params;\n            this.tabDisplayed = 1;\n         }\n\n         // if (params.hasOwnProperty(\"categoryId\")) {\n         //   this.item.categorySelected = params.categoryId;\n         //   this.tabDisplayed = 1;\n         // }\n\n         // if (params.hasOwnProperty(\"groupId\")) {\n         //   this.item.groupSelected = params.groupId;\n         //   this.tabDisplayed = 1;\n         // }\n\n         // if (params.hasOwnProperty(\"configId\")) {\n         //   this.item.configurationSelected = params.configId;\n         //   this.tabDisplayed = 1;\n         // }\n      },\n\n      closed() {},\n\n      changeTab(activeTab) {\n         switch (activeTab) {\n            case \"current-param-tab\":\n               this.tabDisplayed = 0;\n               break;\n\n            case \"all-params-tab\":\n               this.tabDisplayed = 1;\n               break;\n\n            // case \"create-param-tab\":\n            //   this.tabDisplayed = 2;\n            //   break;\n         }\n      },\n\n      async getCurrentConfiguration() {\n         const currentConf = await spinalConfigurationService.getCurrentConfiguration();\n         // console.log(\"currentConf\", currentConf);\n         this.currentConfiguration = currentConf.id;\n      },\n   },\n};\n</script>\n\n<style scoped>\n.paramsContainer {\n   width: 100%;\n   height: calc(100% - 15px);\n   overflow: hidden;\n}\n\n.paramsContainer .myTabs {\n   width: 100%;\n   height: 70px;\n}\n\n.paramsContainer .tabsContent {\n   width: calc(100% - 20px);\n   height: calc(100% - 90px);\n   margin: auto;\n   margin-top: 10px;\n   overflow: hidden;\n}\n</style>\n\n<style>\n.paramsContainer .myTabs .md-tabs-navigation .md-button {\n   margin: 0;\n   cursor: pointer;\n   border-radius: 0;\n   font-size: 13px;\n   flex: 1 0 50%;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n    <md-subheader>Context</md-subheader>\n    <div class=\"contentDiv\">\n      <div class=\"radios\">\n        <md-radio v-model=\"data.context.create\"\n                  :value=\"false\"\n                  @change=\"changeRadio\"\n                  class=\"md-primary\">Select Context</md-radio>\n\n        <md-radio v-model=\"data.context.create\"\n                  :value=\"true\"\n                  @change=\"changeRadio\"\n                  class=\"md-primary\">Create Context</md-radio>\n      </div>\n\n      <div class=\"inputDiv\"\n           v-if=\"data.context.create\">\n        <md-field>\n          <label>Context Name</label>\n          <md-input v-model=\"data.context.name\"></md-input>\n        </md-field>\n      </div>\n\n      <div class=\"inputDiv\"\n           v-else>\n        <md-field>\n          <label for=\"context\">Select context</label>\n          <md-select v-model=\"data.context.id\"\n                     name=\"context\"\n                     id=\"context\"\n                     @md-selected=\"selectItem\">\n            <md-option v-if=\"contexts.length === 0\"\n                       disabled>No Item</md-option>\n\n            <md-option v-for=\"(item,index) in contexts\"\n                       :value=\"item.id\"\n                       :key=\"index\">{{item.name}}</md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport PanelVue from \"../panel.vue\";\n\nexport default {\n  name: \"contextTemplate\",\n  props: [\"data\", \"type\"],\n  data() {\n    return {\n      contexts: []\n    };\n  },\n  mounted() {\n    this.getContexts();\n  },\n  methods: {\n    async getContexts() {\n      this.contexts = await groupManagerService.getGroupContexts(this.type);\n    },\n\n    async selectItem(id) {\n      const config = await this.getConfiguration(id);\n\n      if (config && config.context) {\n        this._setValue(\"context\", config.context.get());\n      }\n      if (config && config.category) {\n        this._setValue(\"category\", config.category.get());\n      }\n      if (config && config.group) {\n        this._setValue(\"group\", config.group.get());\n      }\n    },\n\n    changeRadio() {\n      this.data.context.name = \"\";\n      this.data.context.id = \"\";\n    },\n\n    async getConfiguration(id) {\n      const context = SpinalGraphService.getRealNode(id);\n      if (context) {\n        let _ptr = context.info.generate_group_config;\n\n        if (typeof _ptr !== \"undefined\") {\n          return new Promise(resolve => {\n            _ptr.load(info => {\n              resolve(info);\n            });\n          });\n        }\n      }\n\n      return;\n    },\n\n    _setValue(objectProperty, liste) {\n      for (const key of Object.keys(liste)) {\n        if (this.data[objectProperty].hasOwnProperty(key)) {\n          if (key === \"regex\") {\n            this.data[objectProperty][key] = this._getRegex(liste[key]);\n          } else {\n            this.data[objectProperty][key] = liste[key];\n          }\n        }\n      }\n    },\n\n    _getRegex(inputstring) {\n      var match = inputstring.match(new RegExp(\"^/(.*?)/([gimyu]*)$\"));\n      if (match) return new RegExp(match[1], match[2]);\n\n      return \"\";\n    }\n  },\n  watch: {\n    type() {\n      this.getContexts();\n      this.data.context.id = \"\";\n      this.data.context.name = \"\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sub-content {\n  padding: 16px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv {\n  display: flex;\n  flex-direction: column;\n  /* justify-content: space-between; */\n}\n\n.sub-content .contentDiv .inputDiv {\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.sub-content .contentDiv .radios {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  /* padding-top: 16px; */\n}\n</style>\n\n<style>\n.inputDiv .md-field {\n  min-height: unset;\n  margin: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"div_container\">\n    <div class=\"inputs\">\n      <md-field md-clearable>\n        <label>Attribute name</label>\n        <md-input v-model=\"name\"\n                  :disabled=\"advanced\"\n                  @blur=\"setValue\"></md-input>\n\n        <span v-if=\"advanced\"\n              class=\"md-primary md-helper-text\">You use regex\n          <a @click=\"removeRegex\">remove it!</a></span>\n      </md-field>\n\n      <md-checkbox :disabled=\"advanced\"\n                   v-model=\"contains\"\n                   class=\"md-primary\">select element includes</md-checkbox>\n    </div>\n\n    <div class=\"buttons\">\n      <md-button class=\"md-raised md-primary\"\n                 @click=\"openDialog\">Use Regex</md-button>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nexport default {\n  name: \"create-by-attribute\",\n  props: {\n    propsName: {},\n    propsContains: {},\n    propsRegex: {},\n    propsAdvanced: {}\n  },\n  data() {\n    return {\n      name: \"\",\n      contains: false,\n      regex: \"\",\n      advanced: false\n    };\n  },\n  methods: {\n    openDialog() {\n      spinalPanelManagerService.openPanel(\"configureGenerationDialog\", {\n        callback: regex => {\n          this.regex = regex;\n          this.advanced = true;\n          //   this.contains = false;\n          this.name = \"\";\n\n          this.setValue();\n        }\n      });\n    },\n\n    removeRegex() {\n      this.regex = \"\";\n      this.advanced = false;\n    },\n\n    getRegex() {\n      if (this.advanced) {\n        return this.regex;\n      } else if (!this.advanced && this.name.trim().length > 0) {\n        if (this.contains) {\n          return new RegExp(`${RegExp.escape(this.name.trim())}`, \"i\");\n        } else {\n          return new RegExp(`^${RegExp.escape(this.name.trim())}$`, \"i\");\n        }\n      } else {\n        return \"\";\n      }\n    },\n\n    setValue() {\n      this.$emit(\"setValue\", {\n        name: this.name,\n        contains: this.contains,\n        regex: this.getRegex()\n      });\n    }\n  },\n  watch: {\n    contains() {\n      this.setValue();\n    },\n    propsName() {\n      if (this.propsName !== this.name) this.name = this.propsName;\n    },\n\n    propsContains() {\n      if (this.propsContains !== this.contains) {\n        this.contains = this.propsContains;\n      }\n    },\n    propsRegex() {\n      if (this.propsRegex !== this.regex) {\n        this.regex = this.propsRegex;\n      }\n    },\n    propsAdvanced() {\n      if (this.propsAdvanced !== this.advanced) {\n        this.advanced = this.propsAdvanced;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.div_container {\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.div_container .inputs {\n  flex: 0 0 70%;\n}\n\n.div_container .buttons {\n  flex: 0 0 20%;\n}\n</style>\n\n<style>\n.div_container .inputs .md-field {\n  /* margin: 0px; */\n  /* padding: 0px; */\n  min-height: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"div_container\">\n    <div class=\"sub-container\">\n      <md-field>\n        <label>Separator</label>\n        <md-input v-model=\"separator\"\n                  @blur=\"setValue\"></md-input>\n      </md-field>\n    </div>\n\n    <div class=\"sub-container\">\n      <md-field>\n        <label>Index</label>\n        <md-input v-model=\"position\"\n                  type=\"number\"\n                  :min=\"1\"\n                  @blur=\"setValue\"></md-input>\n      </md-field>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"create-by-name\",\n  props: {\n    propsSeparator: {},\n    propsPosition: {}\n  },\n  data() {\n    return {\n      separator: \"\",\n      position: 1\n    };\n  },\n  methods: {\n    setValue() {\n      this.$emit(\"setValue\", {\n        separator: this.separator,\n        index: this.position\n      });\n    }\n  },\n  watch: {\n    propsSeparator() {\n      if (this.propsSeparator !== this.separator)\n        this.separator = this.propsSeparator;\n    },\n\n    propsPosition() {\n      if (this.propsPosition !== this.position)\n        this.position = this.propsPosition;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.div_container {\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.div_container .sub-container {\n  width: 40%;\n}\n</style>\n\n<style>\n.div_container .sub-container .md-field {\n  min-height: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"div_container\">\n    <div class=\"inputs\">\n      <md-field md-clearable>\n        <label>value</label>\n        <md-input v-model=\"name\"\n                  @blur=\"setValue\"></md-input>\n      </md-field>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"create-by-fixed-value\",\n  props: {\n    propsName: {}\n  },\n  data() {\n    return {\n      name: \"\"\n    };\n  },\n  methods: {\n    setValue() {\n      this.$emit(\"setValue\", {\n        name: this.name\n      });\n    }\n  },\n  watch: {\n    propsName() {\n      if (this.propsName !== this.name) this.name = this.propsName;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.div_container {\n  width: 100%;\n}\n</style>\n\n<style>\n.div_container .inputs .md-field {\n  /* margin: 0px; */\n  /* padding: 0px; */\n  min-height: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n    <md-subheader>Category</md-subheader>\n\n    <div class=\"contentDiv\">\n\n      <div class=\"radiosDiv\">\n\n        <md-subheader>Create By using : </md-subheader>\n\n        <md-radio v-model=\"data.category.createBy\"\n                  :value=\"CREATE_DATA.attribute\"\n                  class=\"md-primary\">Attribute</md-radio>\n\n        <md-radio v-model=\"data.category.createBy\"\n                  :value=\"CREATE_DATA.name\"\n                  class=\"md-primary\">Name</md-radio>\n\n        <md-radio v-model=\"data.category.createBy\"\n                  :value=\"CREATE_DATA.fixed\"\n                  class=\"md-primary\">Fixed value</md-radio>\n\n      </div>\n\n      <div class=\"content\">\n\n        <create-by-attribute v-if=\"data.category.createBy === CREATE_DATA.attribute\"\n                             :propsName=\"data.category.name\"\n                             :propsContains=\"data.category.contains\"\n                             :propsRegex=\"data.category.regex\"\n                             :propsAdvanced=\"data.category.advanced\"\n                             @setValue=\"setAttributeValue\">\n        </create-by-attribute>\n\n        <create-by-name v-else-if=\"data.category.createBy === CREATE_DATA.name\"\n                        :propsSeparator=\"data.category.separator\"\n                        :propsPosition=\"data.category.position\"\n                        @setValue=\"setNameValue\">\n        </create-by-name>\n\n        <create-by-fixed-value v-else-if=\"data.category.createBy === CREATE_DATA.fixed\"\n                               @setValue=\"setFixedValue\"\n                               :propsName=\"data.category.fixedValue\">\n        </create-by-fixed-value>\n\n        <!-- <md-field class=\"fixedInput inputDiv\"\n                  v-if=\"data.category.fixed\">\n          <label>Category Name</label>\n          <md-input :disabled=\"!data.category.fixed\"\n                    v-model=\"data.category.name\"></md-input>\n        </md-field> -->\n\n        <!-- <div class=\"dynamicDiv\">\n          <md-field class=\"inputDiv\">\n            <label>regex</label>\n            <md-input v-model=\"data.category.regex\"\n                      disabled></md-input>\n\n          </md-field>\n\n          <md-button class=\"md-raised md-primary md-suffix\"\n                     @click=\"openDialog\">\n            <md-tooltip>Create dynamically</md-tooltip>\n            Edit\n          </md-button>\n\n        </div> -->\n\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport create_data from \"../js/data.js\";\nimport CreateByAttribute from \"./createByAttribute.vue\";\nimport CreateByName from \"./createByName.vue\";\nimport CreateByFixedValue from \"./createByFixedValue.vue\";\n\nexport default {\n  name: \"categoryVue\",\n  components: {\n    \"create-by-attribute\": CreateByAttribute,\n    \"create-by-name\": CreateByName,\n    \"create-by-fixed-value\": CreateByFixedValue\n  },\n  props: {\n    data: {}\n  },\n  data() {\n    this.CREATE_DATA = create_data;\n    return {};\n  },\n  methods: {\n    // openDialog() {\n    //   spinalPanelManagerService.openPanel(\"configureGenerationDialog\", {\n    //     callback: (regex, fixed) => {\n    //       this.data.category.regex = regex;\n    //       this.data.category.fixed = fixed;\n    //     }\n    //   });\n    // }\n\n    setAttributeValue(res) {\n      this.data.category.contains = res.contains;\n      this.data.category.name = res.name;\n      this.data.category.regex = res.regex;\n    },\n\n    setNameValue(res) {\n      this.data.category.separator = res.separator;\n      this.data.category.index = res.index;\n    },\n\n    setFixedValue(res) {\n      this.data.category.fixedValue = res.name;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sub-content {\n  padding: 16px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.sub-content .contentDiv .radiosDiv {\n  width: 100%;\n  display: flex;\n  /* justify-content: space-around; */\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv .content {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .fixedInput {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .dynamicDiv {\n  width: 100%;\n  display: flex;\n}\n\n.sub-content .contentDiv .content .dynamicDiv .inputDiv {\n  width: 80%;\n}\n\n.sub-content .contentDiv .content .inputDiv {\n  margin: 0px;\n  /* padding: 0px; */\n}\n\n/* .sub-content .contentDiv .checkboxDiv {\n  height: 100%;\n  flex: 0 0 130px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n}\n\n\n\n.sub-content .contentDiv .dynamicDialog {\n  flex: 0 0 60px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n    <md-subheader>Group</md-subheader>\n\n    <div class=\"contentDiv\">\n\n      <div class=\"radiosDiv\">\n\n        <md-subheader>Create By using : </md-subheader>\n\n        <md-radio v-model=\"data.group.createBy\"\n                  :value=\"CREATE_DATA.attribute\"\n                  class=\"md-primary\">Attribute</md-radio>\n\n        <md-radio v-model=\"data.group.createBy\"\n                  :value=\"CREATE_DATA.name\"\n                  class=\"md-primary\">Name</md-radio>\n\n        <md-radio v-model=\"data.group.createBy\"\n                  :value=\"CREATE_DATA.fixed\"\n                  class=\"md-primary\">Fixed value</md-radio>\n\n      </div>\n\n      <div class=\"content\">\n\n        <create-by-attribute v-if=\"data.group.createBy === CREATE_DATA.attribute\"\n                             :propsName=\"data.group.name\"\n                             :propsContains=\"data.group.contains\"\n                             :propsRegex=\"data.group.regex\"\n                             :propsAdvanced=\"data.group.advanced\"\n                             @setValue=\"setAttributeValue\">\n        </create-by-attribute>\n\n        <create-by-name v-else-if=\"data.group.createBy === CREATE_DATA.name\"\n                        :propsSeparator=\"data.group.separator\"\n                        :propsPosition=\"data.group.position\"\n                        @setValue=\"setNameValue\">\n        </create-by-name>\n\n        <create-by-fixed-value v-else-if=\"data.group.createBy === CREATE_DATA.fixed\"\n                               @setValue=\"setFixedValue\"\n                               :propsName=\"data.group.fixedValue\">\n        </create-by-fixed-value>\n\n        <!-- <md-field class=\"fixedInput inputDiv\"\n                  v-if=\"data.group.fixed\">\n          <label>Category Name</label>\n          <md-input :disabled=\"!data.group.fixed\"\n                    v-model=\"data.group.name\"></md-input>\n        </md-field> -->\n\n        <!-- <div class=\"dynamicDiv\">\n          <md-field class=\"inputDiv\">\n            <label>regex</label>\n            <md-input v-model=\"data.group.regex\"\n                      disabled></md-input>\n\n          </md-field>\n\n          <md-button class=\"md-raised md-primary md-suffix\"\n                     @click=\"openDialog\">\n            <md-tooltip>Create dynamically</md-tooltip>\n            Edit\n          </md-button>\n\n        </div> -->\n\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport create_data from \"../js/data.js\";\nimport CreateByAttribute from \"./createByAttribute.vue\";\nimport CreateByName from \"./createByName.vue\";\nimport CreateByFixedValue from \"./createByFixedValue.vue\";\n\nexport default {\n  name: \"groupVue\",\n  components: {\n    \"create-by-attribute\": CreateByAttribute,\n    \"create-by-name\": CreateByName,\n    \"create-by-fixed-value\": CreateByFixedValue\n  },\n  props: {\n    data: {}\n  },\n  data() {\n    this.CREATE_DATA = create_data;\n    return {};\n  },\n  methods: {\n    // openDialog() {\n    //   spinalPanelManagerService.openPanel(\"configureGenerationDialog\", {\n    //     callback: (regex, fixed) => {\n    //       this.data.group.regex = regex;\n    //       this.data.group.fixed = fixed;\n    //     }\n    //   });\n    // }\n\n    setAttributeValue(res) {\n      this.data.group.contains = res.contains;\n      this.data.group.name = res.name;\n      this.data.group.regex = res.regex;\n    },\n\n    setNameValue(res) {\n      this.data.group.separator = res.separator;\n      this.data.group.index = res.index;\n    },\n\n    setFixedValue(res) {\n      this.data.group.fixedValue = res.name;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sub-content {\n  padding: 16px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.sub-content .contentDiv .radiosDiv {\n  width: 100%;\n  display: flex;\n  /* justify-content: space-around; */\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv .content {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .fixedInput {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .dynamicDiv {\n  width: 100%;\n  display: flex;\n}\n\n.sub-content .contentDiv .content .dynamicDiv .inputDiv {\n  width: 80%;\n}\n\n.sub-content .contentDiv .content .inputDiv {\n  margin: 0px;\n  /* padding: 0px; */\n}\n\n/* .sub-content .contentDiv .checkboxDiv {\n  height: 100%;\n  flex: 0 0 130px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n}\n\n\n\n.sub-content .contentDiv .dynamicDialog {\n  flex: 0 0 60px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"_container\">\n    <div class=\"content\"\n         v-if=\"isLoaded\">\n\n      <context-vue :data=\"data\"\n                   :type=\"type\"\n                   @load=\"refresh\"></context-vue>\n\n      <!-- <md-divider></md-divider> -->\n\n      <category-vue :data=\"data\"></category-vue>\n\n      <!-- <md-divider></md-divider> -->\n\n      <group-vue :data=\"data\"></group-vue>\n\n    </div>\n    <div class=\"loading\"\n         v-else>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport contextVue from \"./context.vue\";\nimport categoryVue from \"./category.vue\";\nimport groupVue from \"./group.vue\";\n\nexport default {\n  name: \"configuration\",\n  props: {\n    data: {},\n    type: {}\n  },\n  components: {\n    \"context-vue\": contextVue,\n    \"category-vue\": categoryVue,\n    \"group-vue\": groupVue\n  },\n  data() {\n    return {\n      isLoaded: true\n    };\n  },\n  methods: {\n    refresh() {\n      this.isLoaded = false;\n      setTimeout(() => {\n        this.isLoaded = true;\n      }, 300);\n    }\n\n    // goToNext() {\n    //   this.$emit(\"next\", { id: \"first\", index: \"second\" });\n    // }\n  }\n};\n</script>\n\n<style scoped>\n._container {\n  width: 100%;\n  height: 100%;\n  padding: 0 0 0 0;\n}\n\n._container .content {\n  width: 100%;\n  height: 100%;\n}\n\n/* .container .buttons {\n  width: 100%;\n  height: 10%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"content\">\n\n      <div\n         class=\"buttons\"\n         v-if=\"appState === STATES.normal\"\n      >\n         <!-- <md-button v-if=\"!verified\"\n                 class=\"md-raised md-primary\"\n                 @click=\"launchVerification\">Verify</md-button> -->\n         <md-button\n            :disabled=\"error\"\n            class=\"md-raised md-primary\"\n            @click=\"launchGeneration\"\n         >Launch Generation</md-button>\n      </div>\n\n      <div\n         class=\"state\"\n         v-else-if=\"appState === STATES.loading\"\n      >\n         <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n\n      </div>\n\n      <div\n         class=\"state\"\n         v-else-if=\"appState === STATES.success\"\n      >\n         <md-icon class=\"md-size-4x\">check</md-icon>\n\n      </div>\n\n      <div\n         class=\"state\"\n         v-else-if=\"appState === STATES.error\"\n      >\n         <md-icon class=\"md-size-4x\">close</md-icon>\n      </div>\n\n   </div>\n</template>\n\n<script>\nimport CREATE_DATA from \"../js/data.js\";\n\nimport utilities from \"../js/utilities.js\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport groupManagerService from \"spinal-env-viewer-plugin-group-manager-service\";\n\nimport { Ptr, Model } from \"spinal-core-connectorjs_type\";\n\nexport default {\n   name: \"launchGeneration\",\n   props: {\n      data: {},\n      type: {},\n      error: {},\n   },\n   data() {\n      this.STATES = {\n         loading: 1,\n         normal: 2,\n         success: 3,\n         error: 4,\n      };\n      return {\n         verified: false,\n         valueGrouped: null,\n         appState: this.STATES.normal,\n      };\n   },\n   methods: {\n      async launchVerification() {\n         this.appState = this.STATES.loading;\n         const contextCondition = this.data.context.name.trim().length > 0;\n\n         const categoryCondition =\n            this.data.category.regex.toString().length > 0 ||\n            this.data.category.name.trim().length > 0;\n\n         const groupCondition =\n            this.data.group.regex.toString().length > 0 ||\n            this.data.group.name.trim().length > 0;\n\n         // if (contextCondition && categoryCondition && groupCondition) {\n         this.valueGrouped = await this.classifyItem(\n            this.data.category,\n            this.data.group\n         );\n\n         this.verified = true;\n         // } else {\n         //   this.$emit(\"error\");\n         // }\n         // console.log(\"items\", this.valueGrouped);\n         this.appState = this.STATES.normal;\n      },\n\n      async launchGeneration() {\n         this.appState = this.STATES.loading;\n         let contextId = await this.getContext();\n\n         this.createNodes(contextId)\n            .then((res) => {\n               this.saveConfiguration(contextId, this.data);\n               this._displayResult(this.STATES.success);\n            })\n            .catch((err) => {\n               this._displayResult(this.STATES.error);\n               console.error(err);\n            });\n      },\n\n      _displayResult(result) {\n         this.appState = result;\n         setTimeout(() => {\n            this.appState = this.STATES.normal;\n         }, 1000);\n      },\n\n      async classifyItem(categoryInfo, groupInfo) {\n         const res = [];\n         const unclassify = \"unclassify\";\n\n         for (const item of this.data.items) {\n            const spinalId = item.id;\n\n            const categoryName = await utilities.getValue(\n               spinalId,\n               categoryInfo,\n               this.type\n            );\n            const groupName = await utilities.getValue(\n               spinalId,\n               groupInfo,\n               this.type\n            );\n\n            let categoryFound = res.find((el) => {\n               if (categoryName) return el.name === categoryName;\n               return el.name === unclassify;\n            });\n\n            if (typeof categoryFound === \"undefined\") {\n               categoryFound = {\n                  name: categoryName ? categoryName : unclassify,\n                  groups: [],\n               };\n               res.push(categoryFound);\n            }\n\n            let groupFound = categoryFound.groups.find((el) => {\n               if (groupName) return el.name === groupName;\n               return el.name === unclassify;\n            });\n\n            if (typeof groupFound === \"undefined\") {\n               groupFound = {\n                  name: groupName ? groupName : unclassify,\n                  items: [],\n                  color: groupName ? this._generateColor() : \"#ff0000\",\n               };\n               categoryFound.groups.push(groupFound);\n            }\n\n            groupFound.items.push(item);\n         }\n\n         return res;\n      },\n\n      async getContext() {\n         if (this.data.context.create) {\n            const contextName = utilities._getValidContextName(\n               this.data.context.name\n            );\n\n            const context = await groupManagerService.createGroupContext(\n               contextName,\n               this.type\n            );\n\n            return context.info.id.get();\n         }\n\n         return this.data.context.id;\n      },\n\n      async createNodes(contextId) {\n         this.valueGrouped = await this.classifyItem(\n            this.data.category,\n            this.data.group\n         );\n\n         for (const obj of this.valueGrouped) {\n            const category = await utilities.createCategory(\n               contextId,\n               obj.name\n            );\n\n            for (const el of obj.groups) {\n               const group = await utilities.createGroup(\n                  contextId,\n                  category.info.id.get(),\n                  el.name,\n                  el.color\n               );\n\n               for (const item of el.items) {\n                  utilities.addElement(contextId, group.info.id.get(), item.id);\n               }\n            }\n         }\n\n         return;\n      },\n\n      saveConfiguration(contextId, configuration) {\n         const context = SpinalGraphService.getRealNode(contextId);\n         const dataCopy = Object.assign({}, this.data);\n\n         dataCopy.context.create = false;\n         dataCopy.context.id = contextId;\n         dataCopy.category.regex = dataCopy.category.regex.toString();\n         dataCopy.group.regex = dataCopy.group.regex.toString();\n\n         if (context) {\n            if (context.info.generate_group_config) {\n               context.info.rem_attr(\"generate_group_config\");\n            }\n\n            const model = new Model({\n               context: dataCopy.context,\n               category: dataCopy.category,\n               group: dataCopy.group,\n            });\n\n            context.info.add_attr({\n               generate_group_config: new Ptr(model),\n            });\n         }\n      },\n\n      _generateColor() {\n         return \"#\" + ((Math.random() * 0xffffff) << 0).toString(16);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.content {\n   width: 100%;\n   height: 100%;\n}\n\n.content .buttons {\n   width: 100%;\n   display: flex;\n   justify-content: center;\n}\n\n.state {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n\n    <div class=\"countdiv typeSelected\">\n      Type selected : {{type ? type : \"None\"}}\n    </div>\n\n    <div class=\"countdiv\">\n      {{count}} item(s) selected\n    </div>\n\n    <div class=\"buttons\">\n      <md-button @click=\"addSelection\">\n        <md-icon>add</md-icon>\n        <md-tooltip md-delay=\"300\">Add Bim objects selected</md-tooltip>\n      </md-button>\n\n      <md-button @click=\"clearReferential\">\n        <md-icon>clear</md-icon>\n        <md-tooltip md-delay=\"300\">Clear selected</md-tooltip>\n      </md-button>\n\n      <!-- <md-button @click=\"showReferential\">\n        <md-icon>visibility</md-icon>\n        <md-tooltip md-delay=\"300\">Show referential</md-tooltip>\n      </md-button> -->\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport geographicService from \"spinal-env-viewer-context-geographic-service\";\nimport { bimObjectManagerService } from \"spinal-env-viewer-bim-manager-service\";\n\nexport default {\n  name: \"selectionStep\",\n  props: {\n    data: {},\n    type: {}\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    addSelection() {\n      const EQUIPMENT_TYPE = geographicService.constants.EQUIPMENT_TYPE;\n\n      if (this.type === EQUIPMENT_TYPE || this.data.items.length === 0) {\n        if (this.data.items.length === 0)\n          this.$emit(\"changeType\", EQUIPMENT_TYPE);\n\n        this.addItemSelected();\n      } else {\n        window.alert(`can not add ${EQUIPMENT_TYPE} to ${this.type} type`);\n      }\n    },\n\n    clearReferential() {\n      this.data.items = [];\n      this.$emit(\"changeType\");\n    },\n\n    async addItemSelected() {\n      const aggregateSelection = window.spinal.ForgeViewer.viewer.getAggregateSelection();\n\n      const selection = await this.getLeafDbIds(aggregateSelection);\n\n      const nodespromises = selection.map(async el => {\n        return this.getBimObjectsNodes(el);\n      });\n\n      let promisesValues = await Promise.all(nodespromises);\n\n      for (const iterator of promisesValues) {\n        const listeFiltered = this.filterList(iterator);\n        this.data.items = [...this.data.items, ...listeFiltered];\n      }\n    },\n\n    getLeafDbIds(selections) {\n      const dbIds = selections.map(el => {\n        return bimObjectManagerService.getLeafDbIds(el.model, el.selection);\n      });\n\n      return Promise.all(dbIds);\n    },\n\n    getBimObjectsNodes(el) {\n      let nodes = el.selection.map(async dbId => {\n        let node = await window.spinal.BimObjectService.createBIMObject(\n          dbId,\n          el.model\n        );\n        return node.get();\n      });\n\n      return Promise.all(nodes);\n    },\n\n    filterList(liste) {\n      return liste.filter(el => {\n        const found = this.data.items.find(i => i.id === el.id);\n        if (found) return false;\n        return true;\n      });\n    }\n  },\n  computed: {\n    count() {\n      return this.data && this.data.items ? this.data.items.length : 0;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.countdiv {\n  height: 60px;\n  display: flex;\n  align-items: center;\n  font-size: 1.2em;\n}\n</style>\n\n<style>\n.sub-content .buttons .md-button .md-ripple {\n  padding: 0px !important;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"_container\">\n\n      <md-steppers\n         md-vertical\n         class=\"steppers\"\n         :md-dynamic-height=\"true\"\n         @md-changed=\"changeStep\"\n      >\n\n         <md-step\n            id=\"first\"\n            md-label=\"Selection Step\"\n            md-description=\"select\"\n         >\n            <md-content class=\"step-container md-scrollbar\">\n               <selection-step\n                  :data=\"data\"\n                  :type=\"type\"\n                  @changeType=\"changeType\"\n               ></selection-step>\n            </md-content>\n\n         </md-step>\n\n         <md-step\n            id=\"second\"\n            md-label=\"Configuration Step\"\n            md-description=\"configure\"\n            :md-error=\"errorInConfig\"\n         >\n            <md-content class=\"step-container md-scrollbar\">\n               <configuration-step\n                  :data=\"data\"\n                  :type=\"type\"\n               ></configuration-step>\n            </md-content>\n\n         </md-step>\n\n         <md-step\n            id=\"third\"\n            md-label=\"Creation Step\"\n            md-description=\"create\"\n         >\n\n            <md-content class=\"step-container md-scrollbar\">\n               <launch-generation-step\n                  :data=\"data\"\n                  :type=\"type\"\n                  :error=\"firstStepError\"\n               >\n               </launch-generation-step>\n            </md-content>\n\n         </md-step>\n\n      </md-steppers>\n   </div>\n</template>\n\n\n<script>\nimport ConfigurationStep from \"./components/configurationStep.vue\";\nimport launchGenerationStep from \"./components/launchGenerationStep.vue\";\nimport selectionStep from \"./components/selectionStep.vue\";\n\nimport create_data from \"./js/data.js\";\nimport data_json from \"./js/data.config\";\n\nexport default {\n   name: \"generateGroupPanel\",\n   components: {\n      \"configuration-step\": ConfigurationStep,\n      \"launch-generation-step\": launchGenerationStep,\n      \"selection-step\": selectionStep,\n   },\n   data() {\n      this.CREATE_DATA = create_data;\n\n      return {\n         active: \"first\",\n         errorInConfig: null,\n         first: false,\n         second: false,\n         third: false,\n         type: undefined,\n         firstStepError: false,\n         data: Object.assign({}, data_json),\n         verification: {\n            context: {\n               isVerified: false,\n               message: \"\",\n            },\n            category: {\n               isVerified: false,\n               message: \"\",\n            },\n            group: {\n               isVerified: false,\n               message: \"\",\n            },\n         },\n      };\n   },\n   methods: {\n      opened(params) {\n         this.type = params.type;\n         this.data.items = params.items;\n      },\n\n      closed() {},\n\n      errorInFirstStep() {\n         this.errorInConfig = \"This is an error!\";\n      },\n\n      changeStep(step) {\n         if (step === \"second\") {\n            this.errorInConfig = null;\n         } else if (step === \"third\") {\n            const contextIsOk = this.contextIsVerified();\n            const categoryisOk = this.categoryOrGroupIsVerified(\n               this.data.category\n            );\n            const groupIsOk = this.categoryOrGroupIsVerified(this.data.group);\n\n            if (!contextIsOk || !categoryisOk || !groupIsOk) {\n               this.firstStepError = true;\n               this.errorInConfig = \"This is an error!\";\n            } else {\n               this.firstStepError = false;\n            }\n         }\n      },\n\n      changeType(type) {\n         this.type = type;\n         // if (this.data.context.create) {\n         //   this.data.context.id = \"\";\n         //   this.data.context.name = \"\";\n         // }\n      },\n\n      contextIsVerified() {\n         if (this.data.context.create) {\n            return this.data.context.name.trim().length > 0;\n         } else {\n            return (\n               this.data.context.name.trim().length > 0 &&\n               this.data.context.id.trim().length > 0\n            );\n         }\n      },\n\n      categoryOrGroupIsVerified(info) {\n         // createBy: this.CREATE_DATA.attribute,\n         //     contains: false,\n         //     name: \"\",\n         //     regex: \"\",\n         //     separator: \"\",\n         //     index: -1\n\n         if (info.createBy === this.CREATE_DATA.attribute) {\n            return info.regex.toString().trim().length > 0;\n         } else if (info.createBy === this.CREATE_DATA.name) {\n            return parseInt(info.index) >= 1;\n            // return info.separator.length > 0 && parseInt(info.index) >= 1;\n         } else if (info.createBy === this.CREATE_DATA.fixed) {\n            return info.fixedValue.trim().length > 0;\n         }\n      },\n\n      // setDone(res) {\n      //   this[res.id] = true;\n\n      //   if (res.index) {\n      //     this.active = res.index;\n      //   }\n      // }\n   },\n};\n</script>\n\n<style scoped>\n._container {\n   width: 100%;\n   height: calc(100% - 15px);\n}\n\n._container .steppers {\n   width: 100%;\n   height: 100%;\n   background-color: transparent;\n}\n\n._container .steppers .step-container {\n   height: 100%;\n   max-height: 450px;\n   padding: 16px;\n   overflow: hidden;\n   overflow-y: auto;\n   background-color: transparent;\n}\n</style>\n\n<style>\n._container .md-steppers.md-vertical .md-stepper-content {\n   padding: 0 0 0 35px;\n}\n\n/* ._container .md-steppers.md-steppers.md-vertical .md-stepper-content.md-active {\n  max-height: calc(100% - 180px);\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"myListContainer\">\n    <v-list v-if=\"categories && categories.length > 0\"\n            class=\"listContainer\"\n            expand\n            flat\n            dark>\n      <v-list-group v-for=\"(item,index) in categories\"\n                    :key=\"index\"\n                    prepend-icon=\"keyboard_arrow_down\"\n                    append-icon=\"\"\n                    :one-line=\"false\"\n                    no-action>\n        <v-list-tile slot=\"activator\">\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{item.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n\n            <menu-component :category=\"item.name\"\n                            @add=\"addAttributes\"></menu-component>\n\n          </v-list-tile-action>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn flat\n                   icon\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click.stop=\"remove(item,true)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       SubHeaders                      |\n        ---------------------------------------------------------\n     -->\n        <v-list-tile v-for=\"(subItem,subIndex) in item.attributes\"\n                     :key=\"subIndex\">\n\n          <v-list-tile-action>\n            <v-checkbox :disabled=\"!editMode\"\n                        color=\"blue\"\n                        v-model=\"subItem.show\"></v-checkbox>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{subItem.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn icon\n                   flat\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click=\"remove(item,false,subItem)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       End SubHeaders                  |\n        ---------------------------------------------------------\n     -->\n\n      </v-list-group>\n    </v-list>\n\n    <div class=\"emptyList\"\n         v-if=\"categories && categories.length === 0\">\n      {{message}}\n    </div>\n\n  </div>\n\n</template>\n\n<script>\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\n\nexport default {\n  name: \"displayListComponent\",\n  components: {\n    \"menu-component\": menuComponent\n  },\n  props: {\n    categories: {},\n    message: {\n      type: String,\n      default: \"No data found\"\n    },\n    editMode: {\n      type: Boolean,\n      default: true\n    }\n  },\n  methods: {\n    addAttributes(res) {\n      this.$emit(\"add\", res);\n    },\n    remove(category, isCategory, attribute) {\n      let item = {\n        category: category,\n        attr: attribute\n      };\n\n      this.$emit(\"remove\", item);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.myListContainer {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n\n.myListContainer .listContainer {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.myListContainer .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"list\">\n\n    <!-- <md-list :md-expand-single=\"false\">\n      <md-list-item v-for=\"(item,index) in data\"\n                    :key=\"index\"\n                    md-expand>\n\n        <span class=\"md-list-item-text\">{{item.category}}</span>\n\n        <menu-component :category=\"item.category\"\n                        @add=\"addLabel\"></menu-component>\n\n        <md-list slot=\"md-expand\">\n          <md-list-item class=\"md-inset\"\n                        v-for=\"(attr,i) in item.attributes\"\n                        :key=\"i\">\n            <md-checkbox class=\"md-primary\"\n                         v-model=\"attr.show\" />\n            <span class=\"md-list-item-text\">{{attr.label}}</span>\n          </md-list-item>\n\n        </md-list>\n      </md-list-item>\n    </md-list>\n\n    <menu-component class=\"addCategoryBtn\"\n                    @add=\"addLabel\"></menu-component> -->\n\n    <div v-if=\"!editMode\"\n         class=\"md-layout md-alignment-space-between header\">\n\n      <div class=\"md-layout-item md-size-55\">\n        <md-field>\n          <label for=\"movie\">Select configuration</label>\n          <md-select v-model=\"configurationSelected\"\n                     name=\"configuration\"\n                     id=\"configuration\">\n            <md-option v-for=\"(configuration,index) in data\"\n                       :key=\"index\"\n                       :value=\"configuration.id\">{{configuration.name}}\n            </md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n\n      <div class=\"md-layout-item md-size-40\">\n        <v-btn outline\n               v-if=\"!isCurrentConfiguration()\"\n               @click=\"setAsCurrentConfiguration\"\n               :disabled=\"!configurationSelected\"\n               color=\"blue\">Set as current configuration</v-btn>\n\n        <v-alert :value=\"true\"\n                 v-if=\"isCurrentConfiguration()\"\n                 color=\"green\"\n                 outline\n                 icon=\"check_circle\">\n          current configuration.\n        </v-alert>\n      </div>\n\n    </div>\n\n    <div v-if=\"configurationSelected\"\n         class=\"content\"\n         :class=\"{'contentWithOutHeader' : editMode}\">\n      <div class=\"header\">\n        <div>{{configurationData.name}}</div>\n\n        <div class=\"buttons\">\n          <v-btn fab\n                 blue\n                 outline\n                 small\n                 color=\"red\"\n                 v-if=\"editMode\"\n                 @click=\"activeEditMode(false)\">\n            <v-icon>close</v-icon>\n          </v-btn>\n\n          <v-btn fab\n                 blue\n                 outline\n                 small\n                 color=\"blue\"\n                 @click=\"activeEditMode(true)\">\n            <v-icon>{{editMode ? \"check\" : \"edit\"}}</v-icon>\n          </v-btn>\n        </div>\n      </div>\n\n      <display-list-component class=\"content md-scrollbar\"\n                              :categories=\"configurationData.categories\"\n                              :editMode=\"editMode\"\n                              :message=\"'No category found create. Create one with the button below !'\"\n                              @add=\"addSubItem\"\n                              @remove=\"removeItem\">\n      </display-list-component>\n\n      <div class=\"header\">\n        <menu-component class=\"addCat\"\n                        v-if=\"editMode\"\n                        @add=\"addCategory\"></menu-component>\n\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n// import menuComponent from \"../../../vue/panels/components/tooltips/addItem.vue\";\n\nimport displayListComponent from \"../components/displayList.vue\";\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\n\nimport Utilities from \"../../../js/utilities\";\n\nexport default {\n  name: \"editParamsComponent\",\n  components: {\n    \"menu-component\": menuComponent,\n    \"display-list-component\": displayListComponent\n  },\n  props: {\n    data: {\n      default: new Array()\n    },\n    currentConfiguration: {}\n  },\n  data() {\n    this.copyItem;\n    return {\n      editMode: false,\n      configurationSelected: undefined,\n      configurationData: {\n        name: \"\",\n        categories: []\n      }\n    };\n  },\n  mounted() {\n    // console.log(\"this.currentConfiguration\", this.currentConfiguration);\n  },\n  methods: {\n    async activeEditMode(edit) {\n      this.editMode = !this.editMode;\n\n      if (!this.editMode && edit) {\n        await Utilities.editConfiguration(\n          this.configurationSelected,\n          this.configurationData\n        );\n\n        this.$emit(\"refresh\");\n      } else if (!this.editMode && !edit) {\n        // console.log(\"cancel edit\", this.copyItem);\n        this.configurationData = JSON.parse(JSON.stringify(this.copyItem));\n      }\n    },\n\n    async setAsCurrentConfiguration() {\n      await Utilities.setAsCurrentConfiguration(this.configurationSelected);\n      this.$emit(\"change\");\n    },\n\n    isCurrentConfiguration() {\n      if (typeof this.configurationSelected === \"undefined\") return false;\n\n      if (\n        this.currentConfiguration &&\n        this.currentConfiguration.id === this.configurationSelected\n      )\n        return true;\n\n      return false;\n    },\n\n    addSubItem(res) {\n      if (res.category && res.label) {\n        let found = this.configurationData.categories.find(el => {\n          return el.name === res.category;\n        });\n\n        if (found) {\n          let attrFound = found.attributes.find(el => el.name === res.label);\n          if (typeof attrFound === \"undefined\") {\n            found.attributes.push({\n              show: false,\n              name: res.label,\n              id: Date.now()\n            });\n          }\n        }\n      }\n    },\n\n    removeItem(res) {\n      if (typeof res.attr === \"undefined\") {\n        this.configurationData.categories = this.configurationData.categories.filter(\n          el => {\n            return el.id !== res.category.id;\n          }\n        );\n      } else {\n        let found = this.configurationData.categories.find(el => {\n          return el.id === res.category.id;\n        });\n\n        if (found) {\n          found.attributes = found.attributes.filter(\n            el => el.id !== res.attr.id\n          );\n        }\n      }\n    },\n\n    addCategory(res) {\n      let found = this.configurationData.categories.find(\n        el => el.name === res.category\n      );\n\n      if (!found) {\n        this.configurationData.categories.push({\n          id: Date.now(),\n          name: res.category,\n          attributes: []\n        });\n      }\n    }\n  },\n  watch: {\n    configurationSelected() {\n      let found = this.data.find(el => el.id === this.configurationSelected);\n      this.configurationData = JSON.parse(JSON.stringify(found));\n      this.copyItem = JSON.parse(JSON.stringify(found));\n    }\n  }\n};\n</script>\n\n<style scoped>\n.list {\n  width: 100%;\n  height: 100%; /* border: 1px solid red; */\n}\n\n.list .header {\n  height: 80px;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.list .content {\n  width: 100%;\n  height: calc(100% - 80px);\n}\n\n.list .content.contentWithOutHeader {\n  width: 100%;\n  height: 100%;\n}\n\n.list .content .content {\n  width: 100%;\n  height: calc(100% - 120px);\n}\n\n.list .content .header {\n  width: 100%;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  text-transform: uppercase;\n  justify-content: space-between;\n}\n\n.list .content .header .addCat {\n  border: 1px solid #448aff;\n}\n\n.list .content .header .buttons {\n  display: flex;\n  flex-direction: row;\n}\n\n/* .mdDialogContainer.paramsDialogContainer .list .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n} */\n</style>\n\n<style >\n.list .content .content .myListContainer .v-list.listContainer.theme--dark {\n  overflow: auto;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"list\"\n       v-if=\"configurationCopy\">\n\n    <div class=\"header\">\n      <div>{{configurationCopy.name}}</div>\n\n      <!-- <v-alert :value=\"true\"\n               color=\"green\"\n               outline\n               icon=\"check_circle\">\n        current configuration.\n      </v-alert> -->\n\n    </div>\n\n    <display-list-component class=\"content md-scrollbar\"\n                            :categories=\"configurationCopy.categories\"\n                            :editMode=\"true\"\n                            :message=\"'No category found create. Create one with the button below !'\"\n                            @add=\"addSubItem\"\n                            @remove=\"removeItem\">\n    </display-list-component>\n\n    <div class=\"header\">\n      <menu-component class=\"addCatBtn\"\n                      @add=\"addCategory\"></menu-component>\n\n      <v-btn outline\n             color=\"#2196f3\"\n             @click=\"updateConfiguration\">\n        <v-icon dark>check</v-icon>\n        &nbsp;\n        Save Modification\n      </v-btn>\n\n    </div>\n\n  </div>\n\n  <div class=\"empty\"\n       v-else>\n    No current configuration is set\n  </div>\n\n</template>\n\n<script>\nimport displayListComponent from \"../components/displayList.vue\";\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\n\nimport Utilities from \"../../../js/utilities\";\n\nexport default {\n  name: \"currentParams\",\n  components: {\n    \"menu-component\": menuComponent,\n    \"display-list-component\": displayListComponent\n  },\n  props: {\n    currentConfiguration: {}\n  },\n  data() {\n    return {\n      configurationCopy: {}\n    };\n  },\n  mounted() {\n    this.configurationCopy = Object.assign({}, this.currentConfiguration);\n  },\n  methods: {\n    async updateConfiguration() {\n      await Utilities.editConfiguration(\n        this.configurationCopy.id,\n        this.configurationCopy\n      );\n\n      this.$emit(\"refresh\");\n    },\n    addCategory(res) {\n      let found = this.configurationCopy.categories.find(\n        el => el.name === res.category\n      );\n\n      if (!found) {\n        this.configurationCopy.categories.push({\n          id: Date.now(),\n          name: res.category,\n          attributes: []\n        });\n      }\n    },\n    addSubItem(res) {\n      if (res.category && res.label) {\n        let found = this.configurationCopy.categories.find(el => {\n          return el.name === res.category;\n        });\n\n        if (found) {\n          let attrFound = found.attributes.find(el => el.name === res.label);\n          if (typeof attrFound === \"undefined\") {\n            found.attributes.push({\n              show: false,\n              name: res.label,\n              id: Date.now()\n            });\n          }\n        }\n      }\n    },\n    removeItem(res) {\n      if (typeof res.attr === \"undefined\") {\n        this.configurationCopy.categories = this.configurationCopy.categories.filter(\n          el => {\n            return el.id !== res.category.id;\n          }\n        );\n      } else {\n        let found = this.configurationCopy.categories.find(el => {\n          return el.id === res.category.id;\n        });\n\n        if (found) {\n          found.attributes = found.attributes.filter(\n            el => el.id !== res.attr.id\n          );\n        }\n      }\n    }\n  },\n  watch: {\n    currentConfiguration() {\n      this.configurationCopy = Object.assign({}, this.currentConfiguration);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.list {\n  width: 100%;\n  height: 100%; /* border: 1px solid red; */\n}\n\n.list .content {\n  width: 100%;\n  height: calc(100% - 120px);\n  overflow: hidden;\n  overflow-y: auto;\n}\n\n.list .header {\n  width: 100%;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  text-transform: uppercase;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.list .header .buttonsDiv {\n  display: flex;\n  flex-direction: row;\n}\n\n.empty {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n}\n</style>\n\n<style>\n.list .header .addCatBtn .md-ripple {\n  border: 1px solid #2196f3;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"list\">\n\n    <div class=\"content\">\n\n      <md-field>\n        <label>configuration name</label>\n        <md-input v-model=\"data.paramName\"></md-input>\n      </md-field>\n\n      <display-list-component :categories=\"data.categories\"\n                              :message=\"'No category found create. Create one with the button below !'\"\n                              @add=\"addAttributes\">\n      </display-list-component>\n\n      <!-- <md-list :md-expand-single=\"false\">\n        <md-list-item v-for=\"(item,index) in data.categories\"\n                      :key=\"index\"\n                      md-expand>\n\n          <span class=\"md-list-item-text\">{{item.name}}</span>\n\n          <menu-component :category=\"item.name\"\n                          @add=\"addAttributes\"></menu-component>\n\n          <md-list slot=\"md-expand\">\n            <md-list-item class=\"md-inset\"\n                          v-for=\"(attr,i) in item.attributes\"\n                          :key=\"i\">\n              <md-checkbox class=\"md-primary\"\n                           v-model=\"attr.show\" />\n              <span class=\"md-list-item-text\">{{attr.name}}</span>\n            </md-list-item>\n\n          </md-list>\n        </md-list-item>\n      </md-list> -->\n    </div>\n\n    <div class=\"header\">\n\n      <div class=\"headerButtons addCategoryBtn\">\n        <menu-component @add=\"addAttributes\"></menu-component>\n\n        <div class=\"trigger\">\n          <md-button title=\"add category\"\n                     class=\"md-dense md-primary\"\n                     :disabled=\"disableSaveButton()\"\n                     @click=\"saveConfiguration\">\n            <md-icon>save_alt</md-icon>\n            &nbsp;\n            Save configuration\n          </md-button>\n        </div>\n\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\nimport displayListComponent from \"../components/displayList.vue\";\n\nimport utilities from \"../../../js/utilities\";\n\nexport default {\n  name: \"createParamsComponent\",\n  components: {\n    \"menu-component\": menuComponent,\n    \"display-list-component\": displayListComponent\n  },\n  data() {\n    return {\n      data: {\n        paramName: \"\",\n        categories: []\n      }\n    };\n  },\n  methods: {\n    disableSaveButton() {\n      return (\n        this.data.paramName.trim().length === 0 ||\n        this.data.categories.length === 0\n      );\n    },\n    addAttributes(res) {\n      if (res.category && res.label) {\n        let found = this.data.categories.find(el => {\n          return el.name === res.category;\n        });\n\n        if (found) {\n          let attrFound = found.attributes.find(el => el.name === res.label);\n          if (typeof attrFound === \"undefined\") {\n            found.attributes.push({\n              show: false,\n              name: res.label,\n              id: Date.now()\n            });\n          }\n        }\n      } else if (res.category) {\n        let found = this.data.categories.find(el => el.name === res.category);\n\n        if (!found) {\n          this.data.categories.push({\n            id: Date.now(),\n            name: res.category,\n            attributes: []\n          });\n        }\n      }\n    },\n\n    saveConfiguration() {\n      utilities\n        .createConfiguration(this.data.paramName.trim(), this.data.categories)\n        .then(res => {\n          if (typeof res !== \"undefined\") {\n            this.data.paramName = \"\";\n            this.data.categories = [];\n          }\n          this.$emit(\"refresh\");\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.list {\n  width: 100%;\n  height: 100%; /* border: 1px solid red; */\n}\n\n.list .header {\n  width: 100%;\n  height: 60px;\n}\n\n.list .header .headerButtons {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 40px;\n}\n\n/* .list .header .headerButtons.addCategoryBtn .trigger {\n  margin-left: 10px;\n} */\n\n.list .content {\n  width: 100%;\n  height: calc(100% - 80px);\n  /* overflow: auto; */\n}\n</style>\n\n<style>\n.list .header .headerButtons.addCategoryBtn .trigger {\n  border: 1px solid #448aff;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer paramsDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title style=\"text-align : center\">\n      Set your configurations\n    </md-dialog-title>\n    <md-dialog-content style=\"overflow : hidden\">\n\n      <md-tabs class=\"myTabs\"\n               md-alignment=\"centered\"\n               @md-changed=\"changeTab\">\n        <md-tab id=\"current-param-tab\"\n                md-label=\"Current configuration\"\n                md-icon=\"offline_pin\"></md-tab>\n\n        <md-tab id=\"create-param-tab\"\n                md-label=\"Create configuration\"\n                md-icon=\"add\"></md-tab>\n\n        <md-tab id=\"all-params-tab\"\n                md-label=\"All configuration\"\n                md-icon=\"settings_applications\"></md-tab>\n\n      </md-tabs>\n\n      <div class=\"tabsContent\">\n\n        <current-param v-if=\"tabDisplayed === 0\"\n                       :currentConfiguration=\"currentConf\"\n                       @refresh=\"RefreshData\">\n        </current-param>\n\n        <edit-param v-if=\"tabDisplayed === 1\"\n                    :data=\"allConfigurations\"\n                    :currentConfiguration=\"currentConf\"\n                    @change=\"changeCurrentConf\"\n                    @refresh=\"RefreshData\"></edit-param>\n\n        <create-param v-if=\"tabDisplayed === 2\"\n                      @refresh=\"RefreshData\"></create-param>\n\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <!-- <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button> -->\n    </md-dialog-actions>\n  </md-dialog>\n\n</template>\n\n<script>\n// import menuComponent from \"../../vue/panels/components/tooltips/addItem.vue\";\nimport utilities from \"../../js/utilities\";\n\nimport editParamsComponent from \"./components/editParamsComponent.vue\";\nimport currentConfiguration from \"./components/paramsUploaded.vue\";\nimport addConfiguration from \"./components/createParamsComponent.vue\";\n\nexport default {\n  name: \"paramDialogComponent\",\n  components: {\n    \"edit-param\": editParamsComponent,\n    \"current-param\": currentConfiguration,\n    \"create-param\": addConfiguration\n  },\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      typeSelected: \"\",\n      data: [],\n      callback: null,\n      tabDisplayed: 0,\n      allConfigurations: [],\n      currentConf: undefined\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.typeSelected = option.typeSelected;\n      this.callback = option.callback;\n      this.allConfigurations = await utilities.getAllConfiguration();\n      this.currentConf = await utilities.getCurrentConfiguration();\n      // this.data = await this.formatData(option.header, option.typeSelected);\n    },\n\n    async changeCurrentConf() {\n      this.currentConf = await utilities.getCurrentConfiguration();\n    },\n\n    async RefreshData() {\n      this.allConfigurations = await utilities.getAllConfiguration();\n      this.currentConf = await utilities.getCurrentConfiguration();\n    },\n\n    removed(option) {\n      // if (option) {\n      //   utilities.addElement(this.typeSelected, this.data);\n      // }\n\n      this.callback();\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n    // addLabel(res) {\n    //   if (res.category && res.label) {\n    //     let found = this.data.find(el => {\n    //       return el.category === res.category;\n    //     });\n\n    //     if (found) {\n    //       let attrFound = found.attributes.find(el => el.label === res.label);\n    //       if (typeof attrFound === \"undefined\") {\n    //         found.attributes.push({\n    //           show: false,\n    //           label: res.label\n    //         });\n    //       }\n    //     }\n    //   } else if (res.category) {\n    //     let found = this.data.find(el => el.category === res.category);\n\n    //     if (!found) {\n    //       this.data.push({\n    //         category: res.category,\n    //         attributes: []\n    //       });\n    //     }\n    //   }\n    // },\n\n    formatData(headers, type) {\n      return utilities.getElements(type).then(el => {\n        if (el && el.get().length > 0) {\n          return el.get();\n        }\n\n        let res = [];\n        headers.forEach(el => {\n          let found = res.find(el2 => el2.category === el.category);\n\n          if (found) {\n            found.attributes.push({\n              show: false,\n              label: el.label,\n              date: el.date\n            });\n          } else {\n            res.push({\n              category: el.category,\n              attributes: [\n                {\n                  show: false,\n                  label: el.label,\n                  date: el.date\n                }\n              ]\n            });\n          }\n        });\n\n        return res;\n      });\n    },\n\n    changeTab(activeTab) {\n      switch (activeTab) {\n        case \"current-param-tab\":\n          this.tabDisplayed = 0;\n          break;\n\n        case \"all-params-tab\":\n          this.tabDisplayed = 1;\n          break;\n\n        case \"create-param-tab\":\n          this.tabDisplayed = 2;\n          break;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.mdDialogContainer.paramsDialogContainer {\n  width: 700px !important;\n  height: 700px;\n}\n\n.mdDialogContainer.paramsDialogContainer .myTabs {\n  height: 70px;\n}\n\n.mdDialogContainer.paramsDialogContainer .tabsContent {\n  width: calc(100% - 70px);\n  height: calc(100% - 70px);\n  margin: auto;\n  margin-top: 10px;\n}\n\n.mdDialogContainer.paramsDialogContainer .list .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n}\n\n.mdDialogContainer.paramsDialogContainer .list .addCategoryBtn {\n  position: absolute;\n  bottom: 30px;\n  right: 20px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Import Data</md-dialog-title>\n    <md-dialog-content class=\"mdDialogContainer\">\n      <div v-if=\"appState === STATES.valid\"\n           class=\"valid\">\n        <md-icon class=\"md-size-4x\">check</md-icon>\n        <div>File imported.</div>\n\n      </div>\n\n      <div v-if=\"appState === STATES.normal\"\n           class=\"valid\">\n\n        <div>This file can be imported.</div>\n      </div>\n\n      <div v-else-if=\"appState === STATES.loading\"\n           class=\"loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n\n      </div>\n\n      <div class=\"error\"\n           v-else-if=\"appState === STATES.error\">\n        <md-icon class=\"md-size-4x\">close</md-icon>\n        <div>Something went wrong !</div>\n        <div>Check if the file is the same as the exported one</div>\n      </div>\n\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Cancel</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"appState !== STATES.normal\">Import</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport attributeService from \"../../services\";\n\nexport default {\n  name: \"ImportAttributeExcelDialog\",\n  props: [\"onFinised\"],\n  data() {\n    this.STATES = Object.freeze({\n      valid: 0,\n      loading: 1,\n      error: 2,\n      normal: 3,\n    });\n\n    return {\n      appState: this.STATES.normal,\n      showDialog: true,\n      data: [],\n      itemsMap: new Map(),\n      callback: () => {},\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.appState = this.STATES.loading;\n\n      this.callback = option.callback;\n\n      this.constructMap(option.tableData);\n\n      const excelData = this.concatSheets(option.excelData);\n\n      const data = this.formatExcelData(excelData);\n\n      this.data = await this.getDifferenceBetweenData(data, option.tableData);\n\n      if (this.data) {\n        this.appState = this.STATES.normal;\n      } else {\n        this.appState = this.STATES.error;\n      }\n\n      // const tableFormated = this.convertDataToJson(option.tableData);\n\n      // this.data = this.getDataModified(excelData, tableFormated);\n    },\n\n    async removed(option) {\n      this.appState = this.STATES.loading;\n\n      if (option && this.data) {\n        this._changeValue()\n          .then(() => {\n            this.appState = this.STATES.valid;\n            this.callback();\n            setTimeout(() => {\n              this.showDialog = false;\n            }, 1000);\n          })\n          .catch((el) => {\n            this.appState = this.STATES.error;\n          });\n      } else {\n        this.showDialog = false;\n        this.callback();\n      }\n\n      // this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    formatExcelData(excelData) {\n      return excelData.map((data) => {\n        let obj = { id: \"\", attributes: [] };\n\n        obj.id = data[\"SpinalGraph ID\"];\n        obj.name = data[\"Name\"];\n\n        const lists = [\"name\", \"spinalgraph id\", \"revit id\"];\n\n        for (const key of Object.keys(data)) {\n          // if (!key.includes(\" / \")) continue;\n\n          if (lists.indexOf(key.toLowerCase()) !== -1) continue;\n\n          const list = key.split(\" / \");\n\n          obj.attributes.push({\n            category: list[0] ? list[0] : \"\",\n            label: list[1] ? list[1] : \"\",\n            value: data[key] ? data[key] : \"-\",\n          });\n        }\n\n        return obj;\n      });\n    },\n\n    concatSheets(excelData) {\n      const data = [];\n      for (const values of Object.values(excelData)) {\n        data.push(...values);\n      }\n      return data;\n    },\n\n    constructMap(tableContent) {\n      for (const content of tableContent) {\n        const element = {};\n        for (const attr of content.attributes) {\n          element[`${attr.category}_${attr.label}`] = {\n            value: attr.value,\n            displayValue: attr.value,\n          };\n        }\n        this.itemsMap.set(content.id, element);\n      }\n    },\n\n    getDifferenceBetweenData(excelData, tableContent) {\n      const diff = [];\n      for (const dataIterator of excelData) {\n        let found = tableContent.find((el) => el.id === dataIterator.id);\n\n        if (found && found.attributes) {\n          const diffAttr = this._getAttrDiff(found, dataIterator);\n\n          if (typeof diffAttr === \"undefined\") {\n            continue;\n          } else if (\n            diffAttr &&\n            (diffAttr.newName || diffAttr.attributes.length > 0)\n          ) {\n            diff.push(diffAttr);\n          }\n        }\n      }\n\n      return diff;\n    },\n\n    async _changeValue() {\n      const promises = [];\n\n      for (const found of this.data) {\n        // const found = this.data.find(el => el.id === nodeId);\n        // console.log(\"found\", found);\n        if (found && found.attributes) {\n          if (found.newName) {\n            await this.editNodeName(found.id, found.newName);\n          }\n\n          for (const attr of found.attributes) {\n            // let value = this.itemsMap.get(nodeId)[\n            //   `${attr.category}_${attr.label}`\n            // ][\"value\"];\n            // let displayValue = this.itemsMap.get(nodeId)[\n            //   `${attr.category}_${attr.label}`\n            // ][\"displayValue\"];\n            // console.log(\"value\", value, \"displayValue\", displayValue);\n            // if (value !== displayValue) {\n            promises.push(\n              attributeService.updateAttributeValue(\n                found.id,\n                attr.category,\n                attr.label,\n                attr.value\n              )\n            );\n            // }\n          }\n        }\n      }\n\n      return Promise.all(promises);\n    },\n\n    _getAttrDiff(tableItem, excelItem) {\n      let obj = {\n        id: tableItem.id,\n        attributes: [],\n      };\n\n      if (tableItem.name !== excelItem.name) {\n        obj.newName = excelItem.name;\n      }\n\n      for (const attr of excelItem.attributes) {\n        let attrFound = tableItem.attributes.find((el) => {\n          return attr.category === el.category && attr.label === el.label;\n        });\n\n        if (attrFound && attrFound.value != attr.value) {\n          obj.attributes.push(attr);\n        }\n        // else if (typeof attrFound === \"undefined\") {\n        //   return;\n        // }\n      }\n\n      return obj;\n    },\n\n    editNodeName(nodeId, newName) {\n      const realNode = SpinalGraphService.getRealNode(nodeId);\n      if (realNode) {\n        realNode.info.name.set(newName);\n      }\n    },\n\n    /*\n    convertDataToJson(tableData) {\n      return tableData.map(el => {\n        let res = {};\n\n        res[\"SpinalGraph ID\"] = el.id;\n        res[\"Name\"] = el.name;\n\n        el.attributes.forEach(attr => {\n          res[`${attr.category} / ${attr.label}`] = attr.value;\n        });\n\n        return res;\n      });\n    },\n\n    getDataModified(excelData, tableData) {\n      let formated = excelData.map(data => {\n        let found = tableData.find(el => {\n          return el[\"SpinalGraph ID\"] === data[\"SpinalGraph ID\"];\n        });\n\n        if (typeof found !== \"undefined\") {\n        }\n\n        return;\n      });\n\n      return formated.filter(el => {\n        return typeof el !== \"undefined\";\n      });\n    },\n\n    */\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .valid,\n.mdDialogContainer .error {\n  text-align: center;\n  font-size: 20px;\n}\n\n.mdDialogContainer .valid .md-icon {\n  color: green;\n}\n\n.mdDialogContainer .error .md-icon {\n  color: red;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">import Configuration</md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n      <div v-if=\"appState === STATES.valid\" class=\"valid\">\n        <md-icon class=\"md-size-4x\">check</md-icon>\n        <div>File imported.</div>\n      </div>\n\n      <div v-if=\"appState === STATES.normal\" class=\"valid\">\n        <div>This file can be imported.</div>\n      </div>\n\n      <div v-else-if=\"appState === STATES.loading\" class=\"loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div class=\"error\" v-else-if=\"appState === STATES.error\">\n        <md-icon class=\"md-size-4x\">close</md-icon>\n        <div>Something went wrong !</div>\n        <div>Check if the file is the same as the exported one</div>\n      </div>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n      <md-button\n        class=\"md-primary\"\n        @click=\"closeDialog(true)\"\n        :disabled=\"appState !== STATES.normal\"\n        >Import</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { spinalConfigurationService } from '../../../../services';\n\nexport default {\n  name: 'importConfigurationDialog',\n  props: ['onFinised'],\n  data() {\n    this.STATES = Object.freeze({\n      valid: 0,\n      loading: 1,\n      error: 2,\n      normal: 3,\n    });\n\n    return {\n      appState: this.STATES.normal,\n      showDialog: true,\n      data: [],\n    };\n  },\n  methods: {\n    opened(option) {\n      this.appState = this.STATES.loading;\n      const data = this.concatSheets(option);\n      this.data = this.formatData(data);\n      this.appState = this.STATES.normal;\n    },\n\n    async removed(option) {\n      this.appState = this.STATES.loading;\n      if (option) {\n        this.createElements(this.data)\n          .then(() => {\n            this.appState = this.STATES.valid;\n          })\n          .catch((el) => {\n            this.appState = this.STATES.error;\n          });\n      } else {\n        this.showDialog = false;\n      }\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised(closeResult);\n      }\n    },\n\n    concatSheets(excelData) {\n      const data = [];\n      for (const values of Object.values(excelData)) {\n        data.push(...values);\n      }\n      return data;\n    },\n\n    formatData(argExcelData) {\n      const data = [];\n\n      for (const element of argExcelData) {\n        let categoryFound = data.find((el) => {\n          return el.name.toLowerCase() == element.Category.toLowerCase();\n        });\n\n        if (typeof categoryFound === 'undefined') {\n          categoryFound = {\n            name: element.Category,\n            groups: [],\n          };\n\n          data.push(categoryFound);\n        }\n\n        let groupFound = categoryFound.groups.find((el) => {\n          return el.name.toLowerCase() == element.Group.toLowerCase();\n        });\n\n        if (typeof groupFound === 'undefined') {\n          groupFound = {\n            name: element.Group,\n            configurations: [],\n          };\n\n          categoryFound.groups.push(groupFound);\n        }\n\n        let configurationFound = groupFound.configurations.find((el) => {\n          return (\n            el.name.toLowerCase() ==\n            element['Configuration Profil'].toLowerCase()\n          );\n        });\n\n        if (typeof configurationFound === 'undefined') {\n          configurationFound = {\n            name: element['Configuration Profil'],\n            categories: [],\n          };\n\n          groupFound.configurations.push(configurationFound);\n        }\n\n        let attributeCategoryFound = configurationFound.categories.find(\n          (el) => {\n            return (\n              el.name.toLowerCase() ===\n              element['Attribute Category'].toLowerCase()\n            );\n          }\n        );\n\n        if (typeof attributeCategoryFound === 'undefined') {\n          attributeCategoryFound = {\n            name: element['Attribute Category'],\n            attributes: [],\n          };\n\n          configurationFound.categories.push(attributeCategoryFound);\n        }\n\n        let attributeFound = attributeCategoryFound.attributes.find((el) => {\n          return (\n            el.name.toLowerCase() === element['Attribute Name'].toLowerCase()\n          );\n        });\n\n        if (typeof attributeFound === 'undefined') {\n          attributeCategoryFound.attributes.push({\n            show: true,\n            name: element['Attribute Name'],\n            id: Date.now(),\n          });\n        }\n      }\n\n      return data;\n    },\n\n    async createElements(data) {\n      for (const iterator of data) {\n        const categoryId = await this._createCategory(iterator.name);\n\n        for (const groupIterator of iterator.groups) {\n          const groupId = await this._createGroup(\n            categoryId,\n            groupIterator.name\n          );\n\n          for (const configuration of groupIterator.configurations) {\n            const configId = await this._createConfiguration(\n              groupId,\n              configuration.name\n            );\n\n            spinalConfigurationService.editConfiguration(\n              configId,\n              configuration\n            );\n          }\n        }\n      }\n    },\n\n    async _createCategory(name) {\n      const category = await spinalConfigurationService.createCategory(\n        name,\n        'add'\n      );\n\n      return category.info.id.get();\n    },\n\n    async _createGroup(categoryId, name) {\n      const group = await spinalConfigurationService.createGroup(\n        categoryId,\n        name,\n        '#000000'\n      );\n\n      return group.info.id.get();\n    },\n\n    async _createConfiguration(groupId, name) {\n      const configuration =\n        await spinalConfigurationService.createConfiguration(groupId, name);\n\n      return configuration.info.id.get();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .valid,\n.mdDialogContainer .error {\n  text-align: center;\n  font-size: 20px;\n}\n\n.mdDialogContainer .valid .md-icon {\n  color: green;\n}\n\n.mdDialogContainer .error .md-icon {\n  color: red;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n\n    <md-dialog-title class=\"dialogTitle\">\n      Use Regex\n    </md-dialog-title>\n\n    <md-dialog-content class=\"dialogContent\">\n\n      <!-- <div class=\"_title\">\n\n        <md-subheader>Create By using : </md-subheader>\n\n        <div class=\"radios\">\n          <md-radio v-model=\"data.fixed\"\n                    :value=\"fase\"\n                    class=\"md-primary\">Fixed Value</md-radio>\n\n          <md-radio v-model=\"data.fixed\"\n                    :value=\"true\"\n                    class=\"md-primary\">Dynamic Value</md-radio>\n        </div>\n\n      </div> -->\n\n      <div class=\"content\">\n\n        <!-- <div class=\"advancedCheckbox\">\n          <md-checkbox v-model=\"advanced\"\n                       class=\"md-primary\">Use advanced option</md-checkbox>\n        </div> -->\n\n        <!-- \n        //////////////////////////////////////////\n        //  NOT Advanced\n        //////////////////////////////////////////\n     -->\n        <!-- <div class=\"normal\"\n             v-if=\"!advanced\">\n\n          <md-list>\n            <md-list-item>\n              <md-field>\n                <label>name</label>\n                <md-input v-model=\"value\"></md-input>\n              </md-field>\n            </md-list-item>\n\n            <md-list-item>\n              <md-checkbox v-model=\"contains\"\n                           class=\"md-primary\">\n                select the elements which contain this key</md-checkbox>\n            </md-list-item>\n          </md-list>\n\n        </div> -->\n        <!-- \n        //////////////////////////////////////////\n        //  Advanced\n        //////////////////////////////////////////\n     -->\n        <div class=\"advanced\">\n          <md-list>\n            <md-list-item>\n              <md-field class=\"_mdField\">\n                <label>Regex</label>\n                <span class=\"md-prefix\">{{delimiterV}}</span>\n                <md-input v-model=\"value\"\n                          palceholder=\"Regex\"></md-input>\n                <span class=\"md-icon md-suffix\">{{delimiterV}}</span>\n\n              </md-field>\n            </md-list-item>\n\n            <md-list-item>\n              <md-field class=\"_mdField\">\n                <label>Flags</label>\n\n                <md-select v-model=\"flags\"\n                           name=\"flags\"\n                           id=\"flags\"\n                           md-dense\n                           multiple>\n\n                  <md-option v-for=\"(flag,index) in flagsList\"\n                             :key=\"index\"\n                             :value=\"flag.value\">{{flag.name}}</md-option>\n\n                </md-select>\n\n              </md-field>\n\n            </md-list-item>\n\n          </md-list>\n        </div>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport flagsList from \"../js/flags.js\";\nimport create_data from \"../js/data.js\";\n\nexport default {\n  name: \"configureDialog\",\n  props: [\"onFinised\"],\n  data() {\n    this.CREATE_DATA = create_data;\n    this.flagsList = flagsList;\n\n    return {\n      showDialog: true,\n      value: \"\",\n      advanced: true,\n      contains: false,\n      delimiterV: \"/\",\n      flags: [],\n\n      data: {\n        fixed: true\n      },\n      callback: null\n    };\n  },\n  methods: {\n    opened(params) {\n      this.callback = params.callback;\n    },\n    removed(option) {\n      if (option) {\n        const regex = this.getRegex(\n          this.value,\n          this.advanced,\n          this.contains,\n          this.flags.join(\"\"),\n          this.delimiterV\n        );\n\n        if (this.callback) this.callback(regex, this.data.fixed);\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    getRegex(value, advanced, contains, flag, delimiter = \"/\") {\n      let regex;\n\n      switch (advanced) {\n        case false:\n          if (contains) {\n            regex = new RegExp(`${RegExp.escape(value.trim())}`, \"i\");\n          } else {\n            regex = new RegExp(`^${RegExp.escape(value.trim())}$`, \"i\");\n          }\n          break;\n        case true:\n          regex = new RegExp(value, flag);\n          break;\n      }\n\n      return regex;\n    }\n  },\n  computed: {\n    getLabel() {\n      switch (this.data.createBy) {\n        case this.CREATE_DATA.attribute:\n          return \"Attribute Key\";\n        case this.CREATE_DATA.name:\n          return \"name key\";\n        default:\n          break;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 500px;\n  height: 500px;\n}\n\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .dialogContent {\n  padding-bottom: 0px;\n}\n\n.mdDialogContainer .dialogContent ._title {\n  display: flex;\n  /* justify-content: space-between; */\n}\n\n.mdDialogContainer .dialogContent .advancedCheckbox {\n  padding-left: 16px;\n}\n\n/* .mdDialogContainer .dialogContent .sub-content {\n  width: 100%;\n  height: 33%;\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"_mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n\n    <md-dialog-title class=\"_dialogTitle\">\n      Select type\n    </md-dialog-title>\n\n    <md-dialog-content class=\"_dialogContent\">\n\n      <div class=\"loading\"\n           v-if=\"appState === STATES.normal\">\n        <md-field>\n          <label for=\"type\">Type</label>\n          <md-select v-model=\"typeSelected\"\n                     name=\"type\"\n                     id=\"type\">\n            <md-option v-if=\"!data || data.types.length === 0\"\n                       disabled>No found</md-option>\n\n            <md-option v-for=\"(type, index) in data.types\"\n                       :key=\"index\"\n                       :value=\"type\">{{type}}</md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n\n      <!--\n          /////////////////////////////////\n          Loading\n          ////////////////////////////////\n        -->\n      <div v-if=\"appState === STATES.loading\"\n           class=\"loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"disabled()\">Save</md-button>\n\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport SpinalAttributeManager from \"../../../../services\";\n\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nexport default {\n  name: \"select-type\",\n  props: [\"onFinised\"],\n  data() {\n    this.STATES = Object.freeze({\n      normal: 0,\n      loading: 1,\n      error: 2\n    });\n\n    return {\n      appState: this.STATES.error,\n      showDialog: true,\n      data: {},\n      typeSelected: \"\"\n    };\n  },\n  methods: {\n    async opened(params) {\n      this.appState = this.STATES.loading;\n      this.data = await this.getAllData(params);\n      this.appState = this.STATES.normal;\n    },\n\n    removed(option) {\n      if (option) {\n        const items = this.getItems(this.typeSelected);\n\n        spinalPanelManagerService.openPanel(\"generateGroupPanel\", {\n          type: this.typeSelected,\n          items: items\n        });\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    getAllData(params) {\n      return SpinalAttributeManager.getAllData(params.id, params.id);\n    },\n\n    getItems(type) {\n      return this.data.data[type];\n    },\n\n    disabled() {\n      return this.typeSelected.trim().length === 0;\n    }\n  }\n};\n</script>\n\n<style scoped>\n._mdDialogContainer {\n  width: 300px;\n  height: 300px;\n}\n\n._mdDialogContainer ._dialogTitle {\n  text-align: center;\n}\n\n._mdDialogContainer .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-attribute-manager.1e501193.css.map"}