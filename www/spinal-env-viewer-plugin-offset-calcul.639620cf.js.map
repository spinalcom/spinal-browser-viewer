{"mappings":"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AkB,IAAI,EAAE,cAAc;YACpC,oBAAoB;YACpB,OAAO,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,iBAAiB,CAC3D,MACA;YAEF,qBAAqB;YACrB,OAAO,MAAM,CAAC,qBAAqB,CAAC,YAAY,CAAC;QACnD;IACF;AACF;;;;;AC3SA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,mBAAyB,MAAM;IAC7C,OAAO,eAAe,GAAG,QAAQ,mBAAyB,eAAe;IACzE,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAsB,OAAO;IAC3D,QAAQ,oBAAuB,OAAO,CAAC;IACvC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;A;A,I,gB;I,M,C,G,sB,A;I;Q,O;Y,c;Y,S;Y,M,E;Q;I;I,S;Q,M,Q,M;Y,I,C,O,G,O,O;Y,I,C,Y,G,O,Y;Y,I,C,I,G,M,I,C,O,C,I,C,Y,E,I,C,O;Q;Q,W;Q,M,S,Y,E,O;Y,I,a,I,C,G,O,C,G,oB,A,G;gB,M,W,M,I,C,W,C,a,E,C,G,I,Q,E,C,G,I;gB,O;oB,I,C,iB,C,c;iB;Y;Y,I,a,E,C,G,O,Q,E,C,G,I;gB,M,S,M,C,G,+C,A,E,oB,C,a,E,C,G,I,Q,E,C,G;gB,M,W,O,G,C,O;oB,M,W,M,I,C,W,C,M,E,C,G,I,Q,E,C,G,I;oB,O,I,C,iB,C,O;gB;gB,O,Q,G,C;Y;Y,O,E;Q;Q,a,M,E,S,E,U,K;Y,I,W,a,S,O,C,G,+C,A,E,oB,C,Q;Y,O;gB,C,G,+C,A,E,O,C;a;Q;Q,M,iB,K,E,O;YAwCf,MAAA,OAAA,UAAA;gBAAA;aAAA,GAAA,MAAA,QAAA,CAAA,GAAA,CAAA,CAAA,QAAA,MAAA,IAAA;Y,M,W,K,G,C,O;gBAGA,MAAA,cAAA,MAAA,IAAA,CAAA,UAAA,CAAA;gBACA,MAAA,SAAA,MAAA,IAAA,CAAA,SAAA,CAAA,OAAA,YAAA,OAAA,CAAA,GAAA;gBACA,IAAA,CAAA,SAAA,CAAA,aAAA,MAAA,EAAA,EAAA;gBACA,OAAA;YACA;YAEA,OAAA,QAAA,GAAA,CAAA;QAEA,0CAAA;QACA,kDAAA;QACA,yDAAA;QAEA,gCAAA;QACA,2DAAA;Q,qC;QAEA,IAAA;Q;Q,M,Y,O;YAIA,MAAA,UAAA,MAAA,QAAA,OAAA,CAAA,IAAA;Y,O,I,Q,C,S;gBAEA,QAAA,cAAA,CAAA,IAAA,CAAA,CAAA;oBACA,QAAA;gBACA;YACA;QACA;QAEA,MAAA,WAAA,MAAA;YACA,MAAA,SAAA,MAAA,CAAA,GAAA,+CAAA,AAAA,EAAA,UAAA,CAAA,QAAA;gBAAA;aAAA;YACA,OAAA,OAAA,GAAA,CAAA,CAAA,QAAA,MAAA,GAAA;QACA;QAEA,MAAA,WAAA,KAAA,EAAA,OAAA;Y,M,U;gBAEA,gBAAA;gBACA,gBAAA;gB,kB;YAEA;Y,I,M,gB,K,Q,c,E,O,O,iB,C,kB;YAGA,IAAA,MAAA,gBAAA,KAAA,QAAA,gBAAA,EAAA,OAAA,OAAA,iBAAA,CAAA,gBAAA,CAAA;QACA;QAEA,WAAA,WAAA,EAAA,OAAA,EAAA,MAAA;YAEA,IAAA,CAAA,YAAA,MAAA,EAAA,YAAA,QAAA,CAAA;gBAAA,QAAA,CAAA;YAAA;YACA,IAAA,CAAA,YAAA,MAAA,CAAA,QAAA,EAAA,YAAA,MAAA,CAAA,QAAA,CAAA;gBAAA,CAAA,QAAA,EAAA,CAAA;YAAA;YAEA,YAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,OAAA,CAAA;Y,Y,M,C,Q,C,Q,C,K,O,C;Y,Y,M,C,Q,C,Q,C,K,O,C;Q,2D;QAKA,qEAAA;QACA,wFAAA;QAEA,wDAAA;QACA,wDAAA;QACA,wDAAA;QAEA;QAEA,mBAAA,IAAA,EAAA,QAAA;YACA,MAAA,OAAA,KAAA,GAAA;YACA,KAAA,IAAA,GAAA;Y,K,Q,G,S,G,C,C,Q,I,C,iB,C,O,E;YAEA,OAAA;QACA;I;AAmBA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,W,I,E,C,I,I,E,S,K;Y,O,G,gB;gB,K,M,E;gB,O;oB,a;gB;gB,I;oB,S,S,M;wB,O,e;wB,O,A,C;4B,O,I,e,C;wB,C,E,K,C,M;oB;gB;Y,G;gB,G,W;oB,I,E,C;iB;gB,I,E,C;gB,G,Q;oB,a;gB,G;oB,I,E,C,qB,I,E,C,M,I,I;iB;gB,I,E,C;gB,G,W;oB,a;oB,O;wB,Q;oB;oB,M;gB,G,I,E,C,M,Q,E,S,G;oB,O,G,gB;wB,K,I,E;oB,G;wB,G,O;4B,a;wB,G;4B,G,Q;gC,I,E,C,I,E,C,I,I;6B;4B,I,E,C;4B,G,Q;gC,I,E,C,0B,I,E,C;6B;yB;wB,I,E,C;wB,G,a;4B,a;4B,I;gC,S,S,M;oC,O,e;oC,O,A,C;wC,O,I,e,C,O,I,I;oC,C,E,K,C,M;gC;4B;wB,G;4B,G,W;gC,I,E,C;6B;yB,E;qB,E;gB,I;gB,I,E,C;gB,G,a;oB,a;gB,G;oB,G,W;wB,I,E,C;qB;iB,E;a,E;Q,I;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAnJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf","sources":["node_modules/spinal-env-viewer-plugin-offset-calcul/index.js","node_modules/spinal-env-viewer-plugin-offset-calcul/src/buttons/index.js","node_modules/spinal-env-viewer-plugin-offset-calcul/src/buttons/generateBtn.js","node_modules/spinal-env-viewer-plugin-offset-calcul/src/js/constants.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-plugin-offset-calcul/src/panels/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-plugin-offset-calcul/src/panels/components/config.vue"],"sourcesContent":["import \"./src/buttons\";\nimport \"./src/panels\";","export * from \"./generateBtn\";","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { ConfigPanel, SIDEBAR, SCENE_CONTEXT, sceneType } from \"../js/constants\";\n import { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n  \nclass GenerateOffsetBtn extends SpinalContextApp {\n    constructor() {\n        super(\"Generate Offset\", \"This button generates an offset\", {\n            icon: \"add\",\n            icon_type: \"in\",\n            backgroundColor: \"#FF0000\",\n            fontColor: \"#FFFFFF\"\n        });\n    }\n\n    async isShown(option) {\n        const { context, selectedNode } = option;\n        \n        const contextName = context.name.get();\n        if (contextName !== SCENE_CONTEXT) return -1;\n        if(context.id.get() === selectedNode.id.get() ) return true;\n        if (selectedNode.type.get() === sceneType) return true;\n        \n        return -1\n\n    }\n\n\n    action(option) {\n        spinalPanelManagerService.openPanel(ConfigPanel, option);\n    }\n}\n\n\nconst generateOffsetBtn = new GenerateOffsetBtn();\nspinalContextMenuService.registerApp(SIDEBAR, generateOffsetBtn, [3]);\n\nexport default generateOffsetBtn;","export const SIDEBAR = \"GraphManagerSideBar\";\nexport const SCENE_CONTEXT = \"Scenes\";\nexport const ConfigPanel = \"ConfigPanel\";\nexport const sceneType = \"scene\";","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","import Vue from \"vue\";\nimport { SpinalForgeExtention } from \"spinal-env-viewer-panel-manager-service_spinalforgeextention\";\nimport { ConfigPanel } from \"../js/constants\";\nimport ConfigPanelVue from \"./components/config.vue\";\n\n\nconst panels = [\n    {\n        name: ConfigPanel,\n        vueMountComponent: Vue.extend(ConfigPanelVue),\n        panel: {\n            title: \"Calcul offset\", \n            closeBehaviour: \"hide\",\n        },\n        style: {\n            minWidth: \"660px\",\n            height: \"475px\",\n            left: \"400px\",\n        },\n    },\n];\n\n\nfor (const element of panels) {\n  const panelExtension = SpinalForgeExtention.createExtention(element);\n  SpinalForgeExtention.registerExtention(element.name, panelExtension);\n}","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","<template>\n  <div class=\"config_container\">\n    \n    <md-list>\n        <md-list-item md-expand \n            v-for=\"scene in tree\" \n            :key=\"scene.id\" @click.stop=\"() => calculateOffset(scene)\">\n\n            <md-icon>apartment</md-icon>\n            <span class=\"md-list-item-text\">\n                {{scene.name}}\n            </span>\n\n            <md-list slot=\"md-expand\" class=\"md-double-line\">\n                <md-list-item \n                        v-for=\"rvt in scene.children\" :key=\"rvt.id\" >\n                     <div class=\"md-list-item-text\">\n                        <span>{{rvt.name}}</span>\n                        <span>actual offsetValue : {{\"-\"}}</span>\n                    </div>\n\n                    <md-button class=\"md-icon-button md-list-action\" @click.stop=\"() => calculateOffset(scene,rvt.node)\">\n                        <md-icon>sync</md-icon>\n                    </md-button>\n                </md-list-item>\n            </md-list>\n\n            <md-button class=\"md-icon-button md-list-action\">\n                <md-icon>sync</md-icon>\n            </md-button>\n        </md-list-item>\n    </md-list>\n\n    <!-- <md-list class=\"md-double-line\">\n      <md-subheader>Calculate offset</md-subheader>\n\n      <md-list-item v-for=\"rvt in rvtNodes\" :key=\"rvt.id\" @click=\"() => calculateOffset(rvt)\">\n        <md-icon class=\"md-primary\">apartment</md-icon>\n\n        <div class=\"md-list-item-text\">\n          <span>{{rvt.name}}</span>\n          <span>actual offsetValue : {{rvt.offset || \"-\"}}</span>\n        </div>\n\n        <md-button class=\"md-icon-button md-list-action\">\n          <md-icon>add</md-icon>\n        </md-button>\n      </md-list-item>\n    </md-list> -->\n    \n  </div>\n</template>\n\n\n<script>\nimport { ConfigPanel, sceneType } from \"../../js/constants\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\n\nexport default {\n    name: ConfigPanel,\n    data() {\n        return {\n            selectedNode: null,\n            context: null,\n            tree: [],\n        }\n    },\n    methods: {\n        async opened(option) {\n            \n            this.context = option.context;\n            this.selectedNode = option.selectedNode;\n\n            this.tree = await this.getTree(this.selectedNode, this.context);\n            \n        },\n\n        closed() { },\n\n        async getTree(selectedNode, context) {\n            if (selectedNode.type.get() === sceneType) {\n                const children = await this.getRvtNodes(selectedNode.id.get(), context.id.get(), true);\n                return [this._formatNodeAsTree(selectedNode, children)];\n            }\n\n            if(selectedNode.id.get() === context.id.get()) {\n                const scenes = await SpinalGraphService.getChildrenInContext(selectedNode.id.get(), context.id.get());\n                const promises = scenes.map(async scene => {\n                    const children = await this.getRvtNodes(scene.id.get(), context.id.get(), true);\n                    return this._formatNodeAsTree(scene, children);\n                });\n\n                return Promise.all(promises);\n            }\n\n            return [];\n        },\n\n        getRvtNodes(nodeId, contextId, isScene = false) {\n            if (nodeId === contextId || isScene) {\n                return SpinalGraphService.getChildrenInContext(nodeId, contextId);\n            }\n\n            return [SpinalGraphService.getInfo(nodeId)];\n        },\n\n        async calculateOffset(scene, nodeRef) {\n\n\n            const refs = nodeRef ? [nodeRef] : scene.children.map(child => child.node);\n\n            const promises = refs.map(async ref => {\n                const fileVersion = await this.getSvfFile(ref);\n                const offset = await this.getOffset(scene, fileVersion.aecPath.get());\n                this.setOffset(fileVersion, scene.id, offset);\n                return offset\n            });\n\n            return Promise.all(promises);\n\n            // const nodeRef = this.nodeRefs[node.id];\n            // const aecPath = await this.getAecPath(nodeRef);\n            // const scenes = await this.getScenes(nodeRef.id.get());\n\n            // for (const scene of scenes) {\n            //     const offset = await this.getOffset(scene, aecPath);\n            //     console.log(\"offset\", offset);\n            // }\n        },\n\n        async getSvfFile(bimFile) {\n            const element = await bimFile.element.load();\n            return new Promise((resolve, reject) => {\n                element.currentVersion.load((version) => {\n                    resolve(version);\n                });\n            });\n        },\n\n        async getScenes(nodeId) {\n            const scenes = await SpinalGraphService.getParents(nodeId, [\"hasParts\"]);\n            return scenes.map(scene => scene.get());\n        },\n\n        async getOffset(scene, aecPath) {\n            const methods = {\n                CenterToCenter : 0,\n                OriginToOrigin : 1,\n                ShareCoordinates : 2\n            }\n\n            if(scene.sceneAlignMethod === methods.OriginToOrigin) return spinal.SpinalForgeViewer.get1stGlobalOffset();\n            if(scene.sceneAlignMethod === methods.ShareCoordinates) return spinal.SpinalForgeViewer.addOffsetFromAEC(aecPath);\n        },\n\n        setOffset(fileVersion, sceneId, offset) {\n\n            if (!fileVersion.offset) fileVersion.add_attr({ offset: {} });\n            if (!fileVersion.offset[sceneId]) fileVersion.offset.add_attr({ [sceneId]: {} });\n\n            fileVersion.offset[sceneId].mod_attr('x',offset.x);\n            fileVersion.offset[sceneId].mod_attr('y',offset.y);\n            fileVersion.offset[sceneId].mod_attr('z',offset.z);\n\n            // const realNode = SpinalGraphService.getRealNode(nodeId);\n            // if (!realNode.info.offset) realNode.info.add_attr({ offset: {} });\n            // if (!realNode.info.offset[sceneId]) realNode.info.offset.add_attr({ [sceneId]: {} });\n\n            // realNode.info.offset[sceneId].mod_attr('x',offset.x);\n            // realNode.info.offset[sceneId].mod_attr('y',offset.y);\n            // realNode.info.offset[sceneId].mod_attr('z',offset.z);\n            \n        },\n\n        _formatNodeAsTree(node, children) {\n            const info = node.get();\n            info.node = node;\n            info.children = children.map(child => this._formatNodeAsTree(child, []));\n            return info;\n        },\n\n        // _createAttributes(node) {\n        //     const categoryName = \"Spatial\";\n        //     const realNode = SpinalGraphService.getRealNode(nodeId);\n\n        //     return serviceDocumentation.addCategoryAttribute(realNode, categoryName).then((attributeCategory) => {\n        //     const promises = []\n\n        //     for (const key of elementModel._attribute_names) {\n        //         promises.push(serviceDocumentation.addAttributeByCategory(realNode, attributeCategory, key, elementModel[key]));\n        //     }\n\n        //     return Promise.all(promises);\n        //     }).catch((err) => {\n\n        //     });\n        // }\n    }\n}\n</script>\n\n<style  lang=\"scss\" scoped>\n    .config_container {\n        width: 100%;\n        height: calc(100% - 15px);\n        overflow: auto;\n          \n    }\n</style>\n\n<style lang=\"scss\">\n// .config_container {\n//     .md-list-item-content {\n//         background: transparent !important;\n//     }\n// }\n\n.config_container * {\n    box-sizing: border-box;\n    background: transparent !important;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-offset-calcul.639620cf.js.map"}