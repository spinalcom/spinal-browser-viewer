{"mappings":"A;;;;;;;;;A;;;;A;;;;;A;;;;;;;;A;;;;;A;;;;;;A;;;;;;;A;;;;;;A;;;;;;;;;A;;;;;;;;;A;;;;A;;;;A;;;;;A;;;;;A;;;;;;;;AG6NA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;AAGA;;;;AAIA;;;;;;;AAMA;;;;;AAKA;;;;;;;;;;AASA;;;;A;;;;;AAOA;;;;;;;;;;;;;AAYA;;;;;AAIA;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;AAIA;;;;A;;;;;;;A;;;;;;A;;;;A;;;;A;;;;;;;;;;;;A;;;;;;;A;;;;;;;;;;;;;A;;;;;;;;;;;;A;;;;;;;;A;;;;A;;;;A;;;;;A;;;;;;;;;A;;;;;;;;A;;;;;;;;;;;A;;;;;;;;;A;;;;;;;;;;;;A;;;;A;;;;;A;;;;;;A;;;;;;;;A;;;;A;;;;A;;;;;;A;;;;;;;A;;;;;A;;;;;A;;;;;;;;;A;;;;;A;;;;;A;;;;;A;;;;A;;;;;;;;;A","sources":["node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/header.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/popover/boolean.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/popover/number.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/popover/popover.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/endpoint/endpoint.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/tabs/tab-template.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/components/content.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/panel/dashboardPanel.vue","node_modules/spinal-env-viewer-plugin-dashboard-panel/vue/panel/unlinkBmsNodePanel.vue"],"sourcesContent":["<template>\n\t<div class=\"panel_header\">\n\t\t<div class=\"text\">\n\t\t\tNumber of columns : <span class=\"count\">{{ itemCountPerLine }}</span>\n\t\t</div>\n\t\t<div class=\"buttons\">\n\t\t\t<md-button class=\"md-dense md-accent\" @click=\"decrements\">\n\t\t\t\t-1\n\t\t\t</md-button>\n\t\t\t<md-button class=\"md-dense md-primary\" @click=\"increments\">\n\t\t\t\t+1\n\t\t\t</md-button>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: \"panel-header\",\n\t\tprops: {\n\t\t\titemCountPerLine: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\tmin: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 5,\n\t\t\t},\n\t\t},\n\t\tdata() {\n\t\t\treturn {};\n\t\t},\n\t\tmethods: {\n\t\t\tincrements() {\n\t\t\t\tif (this.itemCountPerLine < this.max) this.$emit(\"increments\");\n\t\t\t},\n\t\t\tdecrements() {\n\t\t\t\tif (this.itemCountPerLine > this.min) this.$emit(\"decrements\");\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.panel_header {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tfont-size: 1.5em;\n\t\t/* border-bottom: 1px solid grey; */\n\t}\n\n\t.panel_header .text .count {\n\t\tcolor: #f68204;\n\t}\n</style>\n","<template>\n\t<div class=\"data-content\">\n\t\t<h3 class=\"name\">Select value</h3>\n\t\t<div class=\"content\">\n\t\t\t<div class=\"inactive\">\n\t\t\t\t<md-radio v-model=\"data.value\" :value=\"false\">OFF</md-radio>\n\t\t\t</div>\n\n\t\t\t<div class=\"active\">\n\t\t\t\t<md-radio v-model=\"data.value\" :value=\"true\">ON</md-radio>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: \"booleanComponent\",\n\t\tprops: {\n\t\t\tdata: {},\n\t\t},\n\t\tdata() {\n\t\t\treturn {};\n\t\t},\n\t\tmethods: {},\n\t};\n</script>\n\n<style scoped>\n\t.data-content {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t.data-content .content {\n\t\twidth: 100%;\n\t\theight: 80%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t}\n\n\t.data-content .content .active,\n\t.data-content .inactive {\n\t\twidth: 49%;\n\t\ttext-align: center;\n\t}\n\n\t.data-content .content .switch {\n\t\twidth: 55%;\n\t}\n</style>\n\n<style>\n\t/* .data-content .content .switch .md-switch,\n   .data-content .content .switch .md-switch .md-switch-container {\n      width: 100%;\n   } */\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<div class=\"data-content\">\n\t\t<md-field>\n\t\t\t<label>value</label>\n\t\t\t<md-input v-model=\"data.value\"></md-input>\n\t\t</md-field>\n\n\t\t<!-- <div class=\"slider\">\n\t\t\t<vue-slider\n\t\t\t\tref=\"slider\"\n\t\t\t\tv-model=\"data.value\"\n\t\t\t\tv-bind=\"option\"\n\t\t\t></vue-slider>\n\t\t</div> -->\n\t</div>\n</template>\n\n<script>\n\timport vueSlider from \"vue-slider-component\";\n\n\texport default {\n\t\tname: \"numberComponent\",\n\t\tcomponents: {\n\t\t\t\"vue-slider\": vueSlider,\n\t\t},\n\t\tprops: {\n\t\t\tdata: {},\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\toption: {\n\t\t\t\t\tmin: -2000,\n\t\t\t\t\tmax: 2000,\n\t\t\t\t\tinterval: 1,\n\t\t\t\t\ttooltip: \"hover\",\n\t\t\t\t\ttooltipPlacement: \"bottom\",\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\tmethods: {},\n\t};\n</script>\n\n<style scoped>\n\t.data-content {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n</style>\n","<!--\nCopyright 2022 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover offset=\"16\"\n             @hide=\"setNormalMode\">\n    <md-button class=\"md-icon-button md-dense tooltip-target b3\"\n               title=\"Update\">\n      <md-icon class=\"endpointIcons\">edit </md-icon>\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"endpoint_popover_container\">\n        <div class=\"popover-content\"\n             v-if=\"state === STATES.normal\">\n          <number-component v-if=\"type === TYPES.number\"\n                            :data=\"data\"></number-component>\n          <boolean-component v-else-if=\"type === TYPES.boolean\"\n                             :data=\"data\"></boolean-component>\n        </div>\n\n        <div class=\"popover-content\"\n             v-else>\n          <div class=\"state-content\"\n               v-if=\"state === STATES.processing\">\n            <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n          </div>\n\n          <div class=\"state-content\"\n               v-else-if=\"state === STATES.error\">\n            <div>\n              <md-icon class=\"error md-size-3x\">close</md-icon>\n            </div>\n            <div class=\"error\">error</div>\n          </div>\n\n          <div class=\"state-content\"\n               v-else-if=\"state === STATES.success\">\n            <div>\n              <md-icon class=\"success md-size-3x\">check</md-icon>\n            </div>\n            <div class=\"success\">Edited with Success</div>\n          </div>\n        </div>\n\n        <div class=\"actions\">\n          <md-button v-close-popover\n                     class=\"md-dense md-accent\">\n            Close\n          </md-button>\n\n          <md-button class=\"md-dense md-primary\"\n                     :disabled=\"state !== STATES.normal\"\n                     @click=\"update\">Update</md-button>\n        </div>\n      </div>\n    </template>\n  </v-popover>\n</template>\n\n<script>\nimport booleanComponent from \"./boolean.vue\";\nimport numberComponent from \"./number.vue\";\n\nexport default {\n  name: \"popoverComponent\",\n  components: {\n    \"boolean-component\": booleanComponent,\n    \"number-component\": numberComponent,\n  },\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n    },\n    defaultValue: Number | Boolean | String,\n  },\n\n  data() {\n    this.TYPES = {\n      string: 0,\n      boolean: 1,\n      number: 2,\n    };\n\n    this.STATES = {\n      normal: 1,\n      processing: 2,\n      success: 3,\n      error: 4,\n    };\n\n    return {\n      data: {\n        value: undefined,\n      },\n      type: undefined,\n      state: this.STATES.normal,\n    };\n  },\n  mounted() {\n    this.data.value = this.defaultValue;\n    this.type = this.TYPES[typeof this.data.value];\n    this.state = this.STATES.normal;\n  },\n  methods: {\n    update() {\n      this.state = this.STATES.processing;\n      this.$emit(\"update\", this.data.value);\n    },\n\n    setNormalMode() {\n      this.state = this.STATES.normal;\n    },\n\n    setProcessingMode() {\n      this.state = this.STATES.processing;\n    },\n\n    setSuccessMode() {\n      this.state = this.STATES.success;\n    },\n\n    setErrorMode() {\n      this.state = this.STATES.error;\n    },\n  },\n  watch: {\n    defaultValue() {\n      this.data.value = this.defaultValue;\n      this.type = this.TYPES[typeof this.data.value];\n    },\n  },\n};\n</script>\n\n<style scoped>\n.endpoint_popover_container {\n  width: 200px;\n  height: 150px;\n  pointer-events: all;\n}\n\n.endpoint_popover_container .popover-content {\n  width: 100%;\n  height: calc(100% - 30px);\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.endpoint_popover_container .popover-content .state-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.endpoint_popover_container .popover-content .state-content .success {\n  color: rgb(37, 216, 37);\n}\n\n.endpoint_popover_container .popover-content .state-content .error {\n  color: #ff5252;\n}\n\n.endpoint_popover_container .popover-content .md-field {\n  min-height: unset !important;\n  margin: unset !important;\n}\n\n.endpoint_popover_container .popover-content .slider {\n  width: 100%;\n  margin-top: 10px;\n}\n\n.endpoint_popover_container .actions {\n  width: 100%;\n  height: 30px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>\n\n<style>\n/* .endpoint_popover_container .actions .btn {\n   cursor: pointer;\n} */\n\n/*\n////////////////////////////////////////////////////////\n////                    Slider CSS                    //\n////////////////////////////////////////////////////////\n*/\n\n/* component style */\n.vue-slider-disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* rail style */\n.vue-slider-rail {\n  background-color: #ccc;\n  border-radius: 15px;\n}\n\n/* process style */\n.vue-slider-process {\n  background-color: #3498db;\n  border-radius: 15px;\n}\n\n/* mark style */\n.vue-slider-mark {\n  z-index: 4;\n}\n.vue-slider-mark:first-child .vue-slider-mark-step,\n.vue-slider-mark:last-child .vue-slider-mark-step {\n  display: none;\n}\n.vue-slider-mark-step {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 0, 0.16);\n}\n.vue-slider-mark-label {\n  font-size: 14px;\n  white-space: nowrap;\n}\n/* dot style */\n.vue-slider-dot-handle {\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: #fff;\n  box-sizing: border-box;\n  box-shadow: 0.5px 0.5px 2px 1px rgba(0, 0, 0, 0.32);\n}\n.vue-slider-dot-handle-focus {\n  box-shadow: 0px 0px 1px 2px rgba(52, 152, 219, 0.36);\n}\n\n.vue-slider-dot-handle-disabled {\n  cursor: not-allowed;\n  background-color: #ccc;\n}\n\n.vue-slider-dot-tooltip-inner {\n  font-size: 14px;\n  white-space: nowrap;\n  padding: 2px 5px;\n  min-width: 20px;\n  text-align: center;\n  color: #fff;\n  border-radius: 5px;\n  border-color: #3498db;\n  background-color: #3498db;\n  box-sizing: content-box;\n}\n.vue-slider-dot-tooltip-inner::after {\n  content: \"\";\n  position: absolute;\n}\n.vue-slider-dot-tooltip-inner-top::after {\n  top: 100%;\n  left: 50%;\n  transform: translate(-50%, 0);\n  height: 0;\n  width: 0;\n  border-color: transparent;\n  border-style: solid;\n  border-width: 5px;\n  border-top-color: inherit;\n}\n.vue-slider-dot-tooltip-inner-bottom::after {\n  bottom: 100%;\n  left: 50%;\n  transform: translate(-50%, 0);\n  height: 0;\n  width: 0;\n  border-color: transparent;\n  border-style: solid;\n  border-width: 5px;\n  border-bottom-color: inherit;\n}\n.vue-slider-dot-tooltip-inner-left::after {\n  left: 100%;\n  top: 50%;\n  transform: translate(0, -50%);\n  height: 0;\n  width: 0;\n  border-color: transparent;\n  border-style: solid;\n  border-width: 5px;\n  border-left-color: inherit;\n}\n.vue-slider-dot-tooltip-inner-right::after {\n  right: 100%;\n  top: 50%;\n  transform: translate(0, -50%);\n  height: 0;\n  width: 0;\n  border-color: transparent;\n  border-style: solid;\n  border-width: 5px;\n  border-right-color: inherit;\n}\n\n.vue-slider-dot-tooltip-wrapper {\n  opacity: 0;\n  transition: all 0.3s;\n}\n.vue-slider-dot-tooltip-wrapper-show {\n  opacity: 1;\n}\n\n/*# sourceMappingURL=default.css.map */\n</style>\n","<!--\nCopyright 2022 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div\n    class=\"endpointDiv\"\n    :class=\"{ selected: isSelected }\"\n    @click=\"selectEndpoint\"\n    v-if=\"endpoint\"\n  >\n    <div class=\"name\" v-tooltip=\"endpoint.name\">{{ endpoint.name }}</div>\n    <div class=\"values\">\n      <div class=\"value\" v-tooltip=\"endpoint.currentValue\">\n        {{ endpoint.currentValue | formatValue }}\n      </div>\n\n      <div class=\"unit\" v-tooltip=\"endpoint.unit\">\n        {{ endpoint.unit | formatUnit }}\n      </div>\n    </div>\n\n    <div class=\"btnGroup\">\n      <template v-if=\"iconsItems.length < 3\">\n        <md-button\n          v-for=\"icon in iconsItems\"\n          :key=\"icon.iconName\"\n          class=\"md-icon-button md-dense\"\n          :title=\"icon.title\"\n          @click=\"icon.clickMethod\"\n        >\n          <md-icon class=\"endpointIcons\">\n            {{ icon.iconName }}\n          </md-icon>\n        </md-button>\n      </template>\n      <popover-component\n        ref=\"popover\"\n        :defaultValue=\"endpoint.currentValue\"\n        @update=\"update\"\n      ></popover-component>\n      <template v-if=\"iconsItems.length >= 3\">\n        <md-menu md-size=\"small\">\n          <md-button md-menu-trigger class=\"md-icon-button\">\n            <md-icon>more_vert</md-icon>\n          </md-button>\n\n          <md-menu-content>\n            <md-menu-item\n              v-for=\"icon in iconsItems\"\n              class=\"endpointMenuItem\"\n              :key=\"icon.iconName\"\n              :title=\"icon.title\"\n              @click=\"icon.clickMethod\"\n            >\n              <md-icon class=\"endpointIcons\">\n                {{ icon.iconName }}\n              </md-icon>\n              {{ icon.title }}\n            </md-menu-item>\n          </md-menu-content>\n        </md-menu>\n\n        <!-- <md-button v-for=\"icon in iconsItems\"\n                   :key=\"icon.iconName\"\n                   class=\"md-icon-button md-dense\"\n                   :title=\"icon.title\"\n                   @click=\"icon.clickMethod\">\n          <md-icon class=\"endpointIcons\">\n            {{ icon.iconName }}\n          </md-icon>\n        </md-button> -->\n      </template>\n    </div>\n  </div>\n\n  <div class=\"endpointDiv loading\" v-else>\n    <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n  </div>\n</template>\n\n<script>\nconst {\n  spinalPanelManagerService,\n} = require('spinal-env-viewer-panel-manager-service');\n\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nimport pilotageUtilities from '../../../js/pilotage_utilities';\nimport PopoverComponent from '../popover/popover.vue';\nimport { SpinalServiceTimeseries } from 'spinal-model-timeseries';\nimport { utils, writeFile } from 'xlsx';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport NetworkService from 'spinal-model-bmsnetwork';\n\nconst spinalServiceTimeseries = new SpinalServiceTimeseries();\n\nexport default {\n  name: 'endpoint-component',\n  props: ['endpointId', 'endpointSelected', 'isControlPoint'],\n  components: {\n    'popover-component': PopoverComponent,\n  },\n  data() {\n    this.iconsItems = [\n      {\n        title: 'open Graph Panel',\n        clickMethod: this.openGraphPanel,\n        iconName: 'show_chart',\n      },\n      {\n        title: 'Documentation',\n        clickMethod: this.openDocumentationPanel,\n        iconName: 'folder',\n      },\n      {\n        title: 'Delete',\n        clickMethod: this.deleteEndpoint,\n        iconName: 'delete',\n      },\n      {\n        title: 'Download',\n        clickMethod: this.download,\n        iconName: 'file_download',\n      },\n    ];\n    this.bindId;\n\n    return {\n      endpointElement: null,\n      endpointNode: null,\n      endpoint: {},\n      timeseriesItems: [],\n    };\n  },\n  async mounted() {\n    this.endpointNode = SpinalGraphService.getRealNode(this.endpointId);\n    this.endpointElement =\n      this.endpointNode && (await this.endpointNode.getElement());\n\n    this.bindEndpointElement();\n  },\n  methods: {\n    selectEndpoint() {\n      this.$emit('select', this.endpointId);\n    },\n\n    async download() {\n      //console.log(\"Hello from download\\n\");\n      //console.log(this.endpointNode.info.endpointId);\n      if (this.endpointNode.info.id) {\n        let getTSvar = await spinalServiceTimeseries.getTimeSeries(\n          this.endpointNode.info.id\n        );\n        //console.log(getTSvar);\n        if (getTSvar) {\n          console.log('defined endpoint timeseries');\n          let getInter = await spinalServiceTimeseries.getFromIntervalTime(\n            getTSvar\n          );\n          this.timeseriesItems = getInter;\n\n          let nodeTitle =\n            spinalPanelManagerService.panels.spinal_dashboard_panel.panel.title.innerText.split(\n              ':'\n            );\n          //let splitArray = nodeTitle.split(\":\");\n\n          let excelFileName =\n            nodeTitle[nodeTitle.length - 1] +\n            '_' +\n            this.endpointNode.info.name.get();\n\n          let getUnit = await attributeService.getAttributesByCategory(\n            this.endpointNode,\n            'default',\n            'unit'\n          );\n\n          const filename = `${excelFileName}.xlsx`.trim();\n          console.log('this is unit: ', getUnit[0].value.get());\n          let unit = getUnit[0].value.get();\n\n          for (let el of this.timeseriesItems) {\n            el.date = new Date(el.date);\n            el.unit = unit;\n          }\n\n          console.log(this.timeseriesItems);\n\n          const data = utils.json_to_sheet(this.timeseriesItems);\n          const wb = utils.book_new();\n          utils.book_append_sheet(wb, data, 'endpoint_controlpoint');\n          writeFile(wb, filename);\n        } else {\n          console.log('undefined endpoint timeseries');\n        }\n\n        //console.log(getInter);\n      }\n\n      /* let parentEndpoint = await SpinalGraphService.getRealNode(\n        this.endpointId\n      ).getParents();\n      console.log(\"this is parent: \\n\");\n      console.log(parentEndpoint[0].info.name);\n      let parentOfParent = await parentEndpoint[0].getParents();\n      for (let par of parentOfParent) {\n        if (par) {\n          if (par.info.type == \"geographicFloor\") {\n            console.log(\"this is floor wanted : \\n\");\n            console.log(par.info.name.get());\n          }\n        }\n      } */\n    },\n\n    openGraphPanel() {\n      console.log(this.endpointNode);\n      spinalPanelManagerService.openPanel('endpoint_chart_viewer', {\n        selectedNode: SpinalGraphService.getInfo(this.endpointId),\n      });\n    },\n\n    openDocumentationPanel() {\n      let realNode = SpinalGraphService.getRealNode(this.endpointId);\n      let paramSent = {\n        selectedNode: realNode,\n        info: realNode.info,\n      };\n      paramSent.selectedNode.id = realNode.info.id;\n      spinalPanelManagerService.openPanel('panel-documentation', paramSent);\n    },\n\n    bindEndpointElement() {\n      this.bindId = this.endpointElement.bind(() => {\n        this.endpoint = this.endpointElement.get();\n      });\n    },\n\n    async update(value) {\n      const p = this.$refs['popover'];\n      const popovers = Array.isArray(p) ? p : [p];\n\n      try {\n        const id = this.endpointId;\n        const spinalPilot = await pilotageUtilities.sendUpdateRequest(\n          id,\n          this.endpointNode,\n          value\n        );\n        if (spinalPilot) {\n          this.bindState(spinalPilot, popovers, value);\n        } else {\n          const changed = await this.changeEndpointValueInGraph(\n            this.endpointElement.currentValue,\n            value\n          );\n\n          if (changed) {\n            popovers.map((el) => el.setSuccessMode());\n            this.endpointNode.info.mod_attr(\n              'directModificationDate',\n              Date.now()\n            );\n            // await this.SaveTimeSeries(value);\n          } else popovers.map((el) => el.setErrorMode());\n        }\n      } catch (error) {\n        console.error(error);\n        popovers.map((el) => el.setErrorMode());\n      }\n    },\n\n    bindState(spinalPilot, popovers, value) {\n      const bindId = spinalPilot.state.bind(async () => {\n        switch (spinalPilot.state.get()) {\n          case 'success':\n            const changed = await this.changeEndpointValueInGraph(\n              this.endpointElement.currentValue,\n              value\n            );\n            if (changed) {\n              popovers.map((el) => el.setSuccessMode());\n              if (this.endpointNode.info.directModificationDate)\n                this.endpointNode.info.directModificationDate.set(Date.now());\n              else\n                this.endpointNode.info.add_attr({\n                  directModificationDate: Date.now(),\n                });\n            } else popovers.map((el) => el.setErrorMode());\n            spinalPilot.state.unbind(bindId);\n            await spinalPilot.removeToNode();\n            break;\n          case 'error':\n            popovers.map((el) => el.setErrorMode());\n            spinalPilot.state.unbind(bindId);\n            await spinalPilot.removeToNode();\n            break;\n\n          default:\n            break;\n        }\n      });\n    },\n\n    async changeEndpointValueInGraph(endpointValueModel, newValue) {\n      if (!isNaN(newValue)) newValue = Number(newValue);\n\n      if (\n        typeof newValue === 'string' &&\n        (endpointValueModel instanceof Val ||\n          endpointValueModel instanceof Bool)\n      ) {\n        return false;\n      }\n\n      const saveTimeSeries = this.getSaveTimeSeries();\n      const node = SpinalGraphService.getInfo(this.endpointId);\n      const networkService = new NetworkService(saveTimeSeries);\n      const reference = { currentValue: newValue };\n\n      try {\n        await networkService.updateEndpoint(node, reference);\n        return true;\n      } catch (error) {\n        return false;\n      }\n\n      // return endpointValueModel.set(newValue);\n    },\n\n    deleteEndpoint() {\n      spinalPanelManagerService.openPanel('deleteEndpointDialog', {\n        title: 'This endpoint will be removed from graph',\n        message: \"You won't be able to revert this!\",\n        callback: async () => {\n          await SpinalGraphService.removeFromGraph(this.endpointId);\n          this.$emit('removed', this.endpointId);\n        },\n      });\n    },\n\n    getSaveTimeSeries() {\n      if (!this.isControlPoint) return true;\n      const save =\n        this.endpointElement.saveTimeSeries &&\n        this.endpointElement.saveTimeSeries.get();\n      return save ? true : false;\n    },\n\n    // SaveTimeSeries(value) {\n    //   const save =\n    //     this.endpointElement.saveTimeSeries &&\n    //     this.endpointElement.saveTimeSeries.get();\n\n    //   if (!save) return;\n\n    //   const endpointId = this.endpointNode.getId().get();\n    //   return spinalServiceTimeseries.pushFromEndpoint(endpointId, value);\n    // },\n  },\n  computed: {\n    isSelected() {\n      return this.endpointSelected === this.endpointId;\n    },\n  },\n  filters: {\n    formatValue(argCurrentValue) {\n      var argCurrentValueNumber = Number(argCurrentValue);\n      if (\n        !isNaN(argCurrentValueNumber) &&\n        !Number.isInteger(argCurrentValueNumber)\n      )\n        return Number(argCurrentValue).toFixed(2);\n      return argCurrentValue;\n    },\n\n    formatUnit(argUnit) {\n      return argUnit && argUnit.length > 0 ? argUnit : '-';\n    },\n  },\n\n  beforeDestroy() {\n    if (this.endpointElement) this.endpointElement.unbind(this.bindId);\n  },\n};\n</script>\n\n<style scoped>\n.endpointDiv {\n  width: 95%;\n  height: 95%;\n  padding: 7px;\n  border: 1px solid #fff;\n  /* background: #000; */\n}\n\n.endpointDiv.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.endpointDiv:hover {\n  cursor: pointer;\n}\n\n.endpointDiv.selected {\n  background: #356bab !important;\n}\n\n.endpointDiv .name {\n  width: 100%;\n  height: 20%;\n  text-align: center;\n  font-size: 1em;\n  text-transform: uppercase;\n  font-weight: bold;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.endpointDiv .values {\n  width: 100%;\n  height: 50%;\n  color: #f68204;\n  text-transform: uppercase;\n}\n\n.endpointDiv .values .value {\n  width: 70%;\n  height: 60%;\n  margin: auto;\n  padding-top: 7px;\n  font-size: 1.9em;\n  align-items: center;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.endpointDiv .values .unit {\n  width: 50%;\n  height: 40%;\n  float: right;\n  text-align: right;\n  font-size: 0.9em;\n  align-items: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.endpointDiv .btnGroup {\n  width: 100%;\n  height: 30%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n</style>\n\n<style>\n.endpointDiv .btnGroup .md-button .md-ripple {\n  padding: unset !important;\n}\n\n.endpointMenuItem .md-list-item-content.md-ripple {\n  justify-content: unset !important;\n}\n</style>\n","<!--\nCopyright 2022 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"controlpoint_main\">\n    <div class=\"search\">\n      <div class=\"buscar-caja\">\n        <input type=\"text\"\n               name=\"search\"\n               class=\"buscar-txt\"\n               placeholder=\"Search...\"\n               v-model.trim=\"searchText\" />\n        <a class=\"md-icon-button buscar-btn\"\n           @click=\"openSearchBar\">\n          <md-icon>search</md-icon>\n        </a>\n      </div>\n    </div>\n\n    <md-content class=\"main md-scrollbar\"\n                :style=\"gridStyle\">\n      <endpoint-component v-for=\"endpoint of itemsDiplayed\"\n                          :key=\"endpoint.id\"\n                          :endpointId=\"endpoint.id\"\n                          :endpointSelected=\"endpointSelected\"\n                          :isControlPoint=\"isControlPoint\"\n                          @select=\"selectEndpoint\"\n                          @removed=\"removeEndpoint\"></endpoint-component>\n\n      <span v-if=\"itemsDiplayed.length === 0\">No item found !</span>\n    </md-content>\n\n    <div class=\"footer\">\n      <jw-pagination :items=\"search\"\n                     :pageSize=\"9\"\n                     @changePage=\"onPageChange\"></jw-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport EndpointComponent from \"../endpoint/endpoint.vue\";\nimport JwPagination from \"jw-vue-pagination\";\n\nexport default {\n  name: \"control-points\",\n  props: {\n    itemCountPerLine: {\n      type: Number,\n      default: 3,\n    },\n    isControlPoint: Boolean,\n    data: Array,\n  },\n  components: {\n    \"endpoint-component\": EndpointComponent,\n    \"jw-pagination\": JwPagination,\n  },\n  data() {\n    return {\n      searchText: \"\",\n      isOpened: false,\n      endpointSelected: null,\n      search: [],\n      itemsDiplayed: [],\n    };\n  },\n  mounted() {\n    this.filteredData();\n  },\n  methods: {\n    onPageChange(items) {\n      this.itemsDiplayed = items;\n    },\n\n    selectEndpoint(id) {\n      this.endpointSelected = id;\n    },\n\n    filteredData() {\n      this.search = this.data.filter((el) => {\n        if (this.searchText.length === 0) return true;\n        return el.name.toLowerCase().includes(this.searchText.toLowerCase());\n      });\n    },\n\n    openSearchBar() {\n      this.isOpened = !this.isOpened;\n    },\n\n    removeEndpoint(data) {\n      this.$emit(\"removed\", data);\n    },\n  },\n\n  computed: {\n    gridStyle() {\n      if (this.itemsDiplayed.length > 0) {\n        return {\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${this.itemCountPerLine}, minmax(20%, 100%))`,\n          gridGap: \"15px\",\n          gridAutoRows: \"minmax(140px, 140px)\",\n        };\n      } else {\n        return {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        };\n      }\n    },\n  },\n  watch: {\n    data() {\n      this.filteredData();\n    },\n    searchText() {\n      this.filteredData();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.controlpoint_main {\n  width: 100%;\n  height: 100%;\n}\n\n.controlpoint_main .main {\n  width: calc(100% - 30px);\n  height: calc(100% - 100px);\n  margin: auto;\n  overflow: hidden;\n  overflow-y: auto;\n  padding: 0 15px;\n  /* background: brown; */\n}\n\n.controlpoint_main .search,\n.controlpoint_main .footer {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.controlpoint_main .search .buscar-caja {\n  width: 98%;\n  height: 35px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 40px;\n  border: 1px solid #fff;\n  background: #2f3640;\n}\n\n.controlpoint_main .search .buscar-caja .buscar-txt {\n  width: 90%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-left: 10px;\n}\n\n.controlpoint_main .search .buscar-caja .buscar-btn {\n  width: 10%;\n  height: 100%;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: 0.4s;\n  color: white;\n  cursor: pointer;\n}\n\n.controlpoint_main .search .buscar-caja .buscar-btn > i {\n  font-size: 30px;\n}\n\n/* .controlpoint_main .search .buscar-caja .buscar-txt {\n\t\tborder: none;\n\t\tbackground: none;\n\t\toutline: none;\n\t\tfloat: left;\n\t\tpadding: 0;\n\t\tcolor: white;\n\t\tfont-size: 16px;\n\t\ttransition: 0.4s;\n\t\tline-height: 40px;\n\t\twidth: 0px;\n\t} */\n</style>\n","<!--\nCopyright 2022 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"panel_content\">\n    <div class=\"tabs\">\n      <div class=\"tab\"\n           :class=\"{ active: tabSelected == tabs.endpoints }\"\n           @click=\"selectTab(tabs.endpoints)\">\n        Endpoints\n      </div>\n      <div class=\"tab\"\n           :class=\"{ active: tabSelected == tabs.controlPoints }\"\n           @click=\"selectTab(tabs.controlPoints)\">\n        Control Points\n      </div>\n    </div>\n    <div class=\"main\">\n      <tab-content-component @removed=\"removeEndpoint\"\n                             :isControlPoint=\"tabSelected == tabs.controlPoints\"\n                             :data=\"contents\"\n                             :itemCountPerLine=\"itemCountPerLine\">\n      </tab-content-component>\n    </div>\n  </div>\n</template>\n\n<script>\nimport TabContentTemplate from \"./tabs/tab-template.vue\";\n\nexport default {\n  name: \"panel-content\",\n  components: {\n    \"tab-content-component\": TabContentTemplate,\n  },\n  props: {\n    itemCountPerLine: {\n      type: Number,\n      default: 3,\n    },\n    tabs: {},\n    endpoints: Array,\n    controlEndpoints: Array,\n  },\n  data() {\n    return {\n      tabSelected: \"\",\n      contents: [],\n    };\n  },\n\n  mounted() {\n    this.tabSelected = this.tabs.endpoints;\n    // this.endpoints = this.data.endpoints;\n    // this.controlpoints = this.data.controlPoints;\n  },\n\n  methods: {\n    selectTab(tabName) {\n      this.tabSelected = tabName;\n    },\n\n    updateContents() {\n      switch (this.tabSelected) {\n        case this.tabs.endpoints:\n          this.contents = this.endpoints;\n          break;\n        case this.tabs.controlPoints:\n          this.contents = this.controlEndpoints;\n          break;\n        default:\n          return [];\n      }\n    },\n\n    removeEndpoint(data) {\n      this.$emit(\"removed\", { id: data, type: this.tabSelected });\n    },\n  },\n  watch: {\n    tabSelected() {\n      this.updateContents();\n    },\n\n    endpoints() {\n      this.updateContents();\n    },\n\n    controlEndpoints() {\n      this.updateContents();\n    },\n  },\n  // computed: {\n  // \tcontents() {\n  // \t\tswitch (this.tabSelected) {\n  // \t\t\tcase this.tabs.endpoints:\n  // \t\t\t\treturn this.data.endpoints;\n  // \t\t\tcase this.tabs.controlPoints:\n  // \t\t\t\treturn this.data.controlPoints;\n  // \t\t\tdefault:\n  // \t\t\t\treturn [];\n  // \t\t}\n  // \t},\n  // },\n};\n</script>\n\n<style scoped>\n.panel_content {\n  width: 100%;\n  height: 100%;\n}\n\n.panel_content .tabs {\n  width: 100%;\n  height: 50px;\n  display: flex;\n}\n\n.panel_content .tabs .tab {\n  flex: 1 1 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #222;\n\n  /* border: 1px solid grey; */\n}\n\n.panel_content .tabs .tab:hover {\n  cursor: pointer;\n}\n\n.panel_content .tabs .tab.active {\n  border-bottom: 2px solid #448aff;\n}\n\n.panel_content .main {\n  width: 100%;\n  height: calc(100% - 50px);\n  overflow: hidden;\n  /* display: grid;\n\t\tgrid-auto-rows: minmax(140px, 140px);\n\t\toverflow: hidden;\n\t\toverflow-y: auto; */\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"dashboardPanelContent\" v-if=\"pageSelected === PAGES.normal\">\n    <div class=\"header\">\n      <panel-header\n        :itemCountPerLine=\"itemCountPerLine\"\n        @increments=\"itemCountPerLine++\"\n        @decrements=\"itemCountPerLine--\"\n      ></panel-header>\n    </div>\n\n    <div class=\"content\">\n      <panel-content\n        :itemCountPerLine=\"itemCountPerLine\"\n        @removed=\"removeEndpoint\"\n        :tabs=\"tabs\"\n        :endpoints=\"endpoints\"\n        :controlEndpoints=\"controlEndpoints\"\n      ></panel-content>\n    </div>\n  </div>\n\n  <div class=\"dashboardPanelContent state\" v-else>\n    <md-progress-spinner\n      v-if=\"pageSelected === PAGES.loading\"\n      md-mode=\"indeterminate\"\n    >\n    </md-progress-spinner>\n\n    <md-icon v-else-if=\"pageSelected === PAGES.error\" class=\"md-size-4x\">\n      close\n    </md-icon>\n  </div>\n</template>\n\n<script>\nconst {\n  spinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport endpointUtilities from \"../../js/endpoint_utilities\";\nimport HeaderComponent from \"../components/header.vue\";\nimport ContentComponent from \"../components/content.vue\";\n\nexport default {\n  name: \"dashboard-panel\",\n  components: {\n    \"panel-header\": HeaderComponent,\n    \"panel-content\": ContentComponent\n  },\n  data() {\n    this.viewer;\n    this.PAGES = {\n      normal: 1,\n      loading: 2,\n      error: 3\n    };\n\n    this.tabs = {\n      endpoints: \"endpoints-component\",\n      controlPoints: \"controlpoints-component\"\n    };\n\n    return {\n      pageSelected: this.PAGES.normal,\n      // endpointsNode: null,\n      // endpointSelected: null,\n      itemCountPerLine: 3,\n      endpoints: [],\n      controlEndpoints: []\n    };\n  },\n  methods: {\n    opened(option, viewer) {\n      this.viewer = viewer;\n\n      this.setTitle(option.name.get());\n      this.pageSelected = this.PAGES.loading;\n      endpointUtilities\n        .getTreeStructure(option.id.get())\n        .then(result => {\n          this.endpoints = result.endpoints;\n          this.controlEndpoints = result.controlPoints;\n\n          this.pageSelected = this.PAGES.normal;\n        })\n        .catch(err => (this.pageSelected = this.PAGES.error));\n    },\n\n    closed() {},\n\n    removeEndpoint(data) {\n      switch (data.type) {\n        case this.tabs.endpoints:\n          this.endpoints = this.endpoints.filter(el => el.id !== data.id);\n          break;\n        case this.tabs.controlPoints:\n          this.controlEndpoints = this.controlEndpoints.filter(\n            el => el.id !== data.id\n          );\n          break;\n      }\n    },\n\n    // getEndpointsNode(node) {\n    //    return SpinalGraphService.findNodesByType(\n    //       node.id.get(),\n    //       RELATION_NAMES,\n    //       SpinalBmsEndpoint.nodeTypeName\n    //    )\n    //       .then((endpoints) => {\n    //          return endpoints.map((el) => {\n    //             SpinalGraphService._addNode(el);\n    //             return SpinalGraphService.getInfo(el.getId().get());\n    //          });\n    //       })\n    //       .catch((err) => {\n    //          console.log(err);\n    //          return [];\n    //       });\n    // },\n\n    setTitle(title) {\n      spinalPanelManagerService.panels.spinal_dashboard_panel.panel.setTitle(\n        `Dashboard : ${title}`\n      );\n    }\n  },\n  computed: {\n    V6() {\n      return parseInt(window.LMV_VIEWER_VERSION) === 6;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.dashboardPanelContent {\n  width: calc(100% - 10px);\n  height: calc(100% - 20px);\n  margin: auto;\n  background-color: #424242;\n}\n\n.dashboardPanelContent .header {\n  width: 100%;\n  height: 50px;\n}\n\n.dashboardPanelContent .content {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n\n.dashboardPanelContent.state {\n  width: calc(100% - 10px);\n  height: calc(100% - 20px);\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <!-- <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"_dialogTitle\">Unlink Control Point to group\n    </md-dialog-title> -->\n\n  <!-- <md-dialog-content class=\"_unLinkDialogContent\"> -->\n  <div class=\"_unLinkBmsPanelContent\">\n    <div class=\"content\"\n         v-if=\"state === PAGES.loaded\">\n      <div class=\"state\"\n           v-if=\"nodes.length === 0\">\n        No BmsNetwork node linked\n      </div>\n\n      <md-list class=\"list_content md-scrollbar\"\n               v-else>\n        <md-list-item v-for=\"item in nodes\"\n                      :key=\"item.id\">\n\n          <div class=\"md-list-item-text\">\n            <p>{{item.name}} <span class=\"item_type\">({{item.type}})</span></p>\n\n          </div>\n\n          <md-button class=\"md-icon-button md-list-action\"\n                     @click=\"unLinkNode(item.id, item.type)\">\n            <md-icon class=\"md-accent\">link_off</md-icon>\n          </md-button>\n        </md-list-item>\n      </md-list>\n\n    </div>\n\n    <div class=\"state\"\n         v-else>\n      <md-progress-spinner v-if=\"state === PAGES.loading\"\n                           md-mode=\"indeterminate\"></md-progress-spinner>\n\n      <md-icon class=\"md-size-5x\"\n               v-else>error</md-icon>\n    </div>\n  </div>\n  <!-- </md-dialog-content> -->\n\n  <!-- <md-dialog-actions>\n      <md-button class=\"md-accent\"\n                 @click=\"closeDialog(false)\">close</md-button>\n    </md-dialog-actions> \n  </md-dialog>-->\n</template>\n\n<script>\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport endpointUtilities from \"../../js/endpoint_utilities\";\n\nexport default {\n  name: \"unlinkBmsNetworkToNodePanel\",\n  props: [\"onFinised\"],\n  data() {\n    this.PAGES = {\n      loaded: 0,\n      loading: 1,\n      error: 2,\n    };\n    this.selectedNodeId;\n    return {\n      showDialog: true,\n      state: this.PAGES.loading,\n      nodes: [],\n    };\n  },\n  mounted() {},\n\n  methods: {\n    opened({ id, name }) {\n      this.state = this.PAGES.loading;\n      this.selectedNodeId = id;\n\n      this.getBmsNetworkNode(id)\n        .then((result) => {\n          this.setTitle(name);\n\n          this.nodes = result;\n          this.state = this.PAGES.loaded;\n        })\n        .catch((err) => {\n          console.error(err);\n          this.state = this.PAGES.error;\n        });\n    },\n\n    closed(option) {},\n\n    async getBmsNetworkNode(nodeId) {\n      const children = await endpointUtilities.getBmsNodeLinked(nodeId);\n      return children.map((child) => child.get());\n    },\n\n    unLinkNode(nodeId, nodeType) {\n      this.state = this.PAGES.loading;\n      return endpointUtilities\n        .unLinkBmsNetworkToNode(this.selectedNodeId, nodeId, nodeType)\n        .then(() => {\n          this.nodes = this.nodes.filter((el) => el.id !== nodeId);\n          this.state = this.PAGES.loaded;\n        })\n        .catch((err) => {\n          console.error(err);\n          this.state = this.PAGES.error;\n        });\n    },\n\n    setTitle(title) {\n      spinalPanelManagerService.panels.unlinkBmsNetworkToNode.panel.setTitle(\n        `Unlink bmsNetwork to Node : ${title}`\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n._unLinkBmsPanelContent {\n  width: 100%;\n  height: calc(100% - 30px);\n}\n\n._unLinkBmsPanelContent .content {\n  width: 100%;\n  height: 100%;\n}\n\n._unLinkBmsPanelContent .content .list_content {\n  max-height: calc(100% - 15px);\n  overflow: auto;\n}\n\n._unLinkBmsPanelContent .content .list_content .item_type {\n  color: grey;\n}\n\n._unLinkBmsPanelContent .state {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5em;\n}\n</style>\n\n<style>\n._unLinkBmsPanelContent .md-list-item-content {\n  width: calc(100% - 50px);\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-dashboard-panel.bfac85b8.css.map"}