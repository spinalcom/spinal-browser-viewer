{"mappings":"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","sources":["node_modules/spinal-model-bacnet/dist/index.js","node_modules/spinal-model-bacnet/src/index.ts","node_modules/spinal-model-bacnet/dist/models/SpinalDiscoverModel.js","node_modules/spinal-model-bacnet/src/models/SpinalDiscoverModel.ts","node_modules/spinal-model-bacnet/dist/data/StateEnum.js","node_modules/spinal-model-bacnet/src/data/StateEnum.ts","node_modules/spinal-model-bacnet/dist/models/SpinalListenerModel.js","node_modules/spinal-model-bacnet/src/models/SpinalListenerModel.ts","node_modules/spinal-model-bacnet/dist/models/SpinalBacnetValueModel.js","node_modules/spinal-model-bacnet/src/models/SpinalBacnetValueModel.ts","node_modules/spinal-model-bacnet/dist/models/SpinalMonitorInfoModel.js","node_modules/spinal-model-bacnet/src/models/SpinalMonitorInfoModel.ts","node_modules/spinal-model-bacnet/dist/models/SpinalPilotModel.js","node_modules/spinal-model-bacnet/src/models/SpinalPilotModel.ts","node_modules/spinal-model-bacnet/dist/models/SpinalOrganConfigModel.js","node_modules/spinal-model-bacnet/src/models/SpinalOrganConfigModel.ts","node_modules/spinal-model-bacnet/dist/data/constants.js","node_modules/spinal-model-bacnet/src/data/constants.ts","node_modules/spinal-model-bacnet/dist/data/IRequest.js","node_modules/spinal-model-bacnet/src/data/IRequest.ts"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Bacnet\n__exportStar(require(\"./models/SpinalDiscoverModel\"), exports);\n__exportStar(require(\"./models/SpinalListenerModel\"), exports);\n__exportStar(require(\"./models/SpinalBacnetValueModel\"), exports);\n__exportStar(require(\"./models/SpinalMonitorInfoModel\"), exports);\n__exportStar(require(\"./models/SpinalPilotModel\"), exports);\n// Organ\n__exportStar(require(\"./models/SpinalOrganConfigModel\"), exports);\n// Data\n__exportStar(require(\"./data/StateEnum\"), exports);\n__exportStar(require(\"./data/IRequest\"), exports);\n__exportStar(require(\"./data/constants\"), exports);\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpinalDisoverModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nconst StateEnum_1 = require(\"../data/StateEnum\");\nconst uuid_1 = require(\"uuid\");\nclass SpinalDisoverModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(graph, contextInfo, network, organ) {\n        super();\n        this.add_attr({\n            id: uuid_1.v4(),\n            state: StateEnum_1.STATES.reseted,\n            graph: graph ? new spinal_core_connectorjs_type_1.Pbr(graph) : undefined,\n            devices: new spinal_core_connectorjs_type_1.Lst(),\n            context: contextInfo || {},\n            network: network || {},\n            organ: organ,\n            creation: Date.now()\n        });\n    }\n    setDiscoveringMode() {\n        this.state.set(StateEnum_1.STATES.discovering);\n        // setTimeout(() => {\n        //    if (this.state.get() === STATES.discovering) this.setTimeoutMode();\n        // }, 40000)\n    }\n    setDiscoveredMode() {\n        this.state.set(StateEnum_1.STATES.discovered);\n    }\n    setResetedMode() {\n        this.state.set(StateEnum_1.STATES.reseted);\n    }\n    setTimeoutMode() {\n        this.state.set(StateEnum_1.STATES.timeout);\n    }\n    setCreatingMode() {\n        this.state.set(StateEnum_1.STATES.creating);\n    }\n    setCreatedMode() {\n        this.state.set(StateEnum_1.STATES.created);\n    }\n    setErrorMode() {\n        this.state.set(StateEnum_1.STATES.error);\n    }\n    addToGraph() {\n        if (!this.organ.discover) {\n            const x = new spinal_core_connectorjs_type_1.Lst();\n            x.push(this);\n            this.organ.add_attr({\n                discover: new spinal_core_connectorjs_type_1.Ptr(x),\n            });\n            Promise.resolve(true);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.organ.discover.load((list) => {\n                    list.push(this);\n                    resolve(true);\n                });\n            });\n        }\n    }\n    remove() {\n        return new Promise((resolve, reject) => {\n            this.organ.discover.load((list) => {\n                for (let i = 0; i < list.length; i++) {\n                    const element = list[i];\n                    if (element._server_id === this._server_id) {\n                        list.splice(i);\n                        return resolve(true);\n                    }\n                }\n            });\n        });\n    }\n}\nexports.SpinalDisoverModel = SpinalDisoverModel;\n//@ts-ignore\nspinal_core_connectorjs_type_1.spinalCore.register_models([SpinalDisoverModel]);\nexports.default = SpinalDisoverModel;\n//# sourceMappingURL=SpinalDiscoverModel.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.STATES = void 0;\nvar STATES;\n(function (STATES) {\n    STATES[STATES[\"error\"] = -1] = \"error\";\n    STATES[STATES[\"reseted\"] = 0] = \"reseted\";\n    STATES[STATES[\"discovering\"] = 1] = \"discovering\";\n    STATES[STATES[\"discovered\"] = 2] = \"discovered\";\n    STATES[STATES[\"timeout\"] = 3] = \"timeout\";\n    STATES[STATES[\"creating\"] = 4] = \"creating\";\n    STATES[STATES[\"created\"] = 5] = \"created\";\n})(STATES = exports.STATES || (exports.STATES = {}));\n//# sourceMappingURL=StateEnum.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpinalListenerModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nconst uuid_1 = require(\"uuid\");\nclass SpinalListenerModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(graph, context, network, bmsDevice, organ, monitor) {\n        super();\n        this.add_attr({\n            id: uuid_1.v4(),\n            graph: new spinal_core_connectorjs_type_1.Pbr(graph),\n            listen: true,\n            saveTimeSeries: false,\n            // timeInterval: timeInterval,\n            device: new spinal_core_connectorjs_type_1.Pbr(bmsDevice),\n            context: new spinal_core_connectorjs_type_1.Pbr(context),\n            network: new spinal_core_connectorjs_type_1.Pbr(network),\n            organ: new spinal_core_connectorjs_type_1.Pbr(organ),\n            monitor: monitor\n        });\n    }\n}\nexports.SpinalListenerModel = SpinalListenerModel;\n//@ts-ignore\nspinal_core_connectorjs_type_1.spinalCore.register_models([SpinalListenerModel]);\nexports.default = SpinalListenerModel;\n//# sourceMappingURL=SpinalListenerModel.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpinalBacnetValueModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nconst uuid_1 = require(\"uuid\");\nclass SpinalBacnetValueModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(graph, context, organ, network, node, sensor) {\n        super();\n        this.add_attr({\n            id: uuid_1.v4(),\n            context: new spinal_core_connectorjs_type_1.Pbr(context),\n            node: new spinal_core_connectorjs_type_1.Pbr(node),\n            graph: new spinal_core_connectorjs_type_1.Pbr(graph),\n            network: new spinal_core_connectorjs_type_1.Pbr(network),\n            organ: new spinal_core_connectorjs_type_1.Pbr(organ),\n            state: 'wait',\n            sensor: sensor,\n            progress: 0\n        });\n    }\n    addToNode() {\n        return this.loadItem('node').then((node) => {\n            node.info.add_attr({ bacnet: new spinal_core_connectorjs_type_1.Ptr(this) });\n        });\n    }\n    remToNode() {\n        return this.loadItem('node').then((node) => {\n            if (node.info.bacnet)\n                node.info.rem_attr(\"bacnet\");\n            node.info.rem_attr('bacnet');\n        });\n    }\n    getAllItem() {\n        const promises = [this.loadItem('context'), this.loadItem('node'), this.loadItem('graph'), this.loadItem('network'), this.loadItem('organ')];\n        return Promise.all(promises).then(([context, node, graph, network, organ]) => {\n            return {\n                context,\n                node,\n                graph,\n                network,\n                organ\n            };\n        });\n    }\n    loadItem(name) {\n        return new Promise((resolve, reject) => {\n            this[name].load((res) => {\n                resolve(res);\n            });\n        });\n    }\n    setWaitState() {\n        this.state.set(\"wait\");\n    }\n    setRecoverState() {\n        this.state.set(\"recover\");\n    }\n    setProgressState() {\n        this.state.set(\"progress\");\n    }\n    setNormalState() {\n        this.state.set(\"normal\");\n    }\n    setSuccessState() {\n        this.state.set(\"success\");\n    }\n    setErrorState() {\n        this.state.set(\"error\");\n    }\n}\nexports.SpinalBacnetValueModel = SpinalBacnetValueModel;\n//@ts-ignore\nspinal_core_connectorjs_type_1.spinalCore.register_models([SpinalBacnetValueModel]);\nexports.default = SpinalBacnetValueModel;\n//# sourceMappingURL=SpinalBacnetValueModel.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpinalMonitorInfoModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nconst uuid_1 = require(\"uuid\");\nclass SpinalMonitorInfoModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(profil, monit) {\n        super();\n        this.add_attr({\n            id: uuid_1.v4(),\n            profil: new spinal_core_connectorjs_type_1.Pbr(profil),\n            data: monit\n        });\n    }\n    getMonitoringData() {\n        return this.data.get();\n    }\n}\nexports.SpinalMonitorInfoModel = SpinalMonitorInfoModel;\n//@ts-ignore\nspinal_core_connectorjs_type_1.spinalCore.register_models([SpinalMonitorInfoModel]);\nexports.default = SpinalMonitorInfoModel;\n//# sourceMappingURL=SpinalMonitorInfoModel.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpinalPilotModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nconst uuid_1 = require(\"uuid\");\nclass SpinalPilotModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(organ, request) {\n        super();\n        this.add_attr({\n            id: uuid_1.v4(),\n            state: new spinal_core_connectorjs_type_1.Choice(0, [\"normal\", \"process\", \"success\", \"error\"]),\n            organ: organ,\n            requests: Array.isArray(request) ? request : [request]\n        });\n    }\n    setNormalMode() {\n        this.state.set(\"normal\");\n    }\n    setProcessMode() {\n        this.state.set(\"process\");\n    }\n    setSuccessMode() {\n        this.state.set(\"success\");\n    }\n    setErrorMode() {\n        this.state.set(\"error\");\n    }\n    isNormal() {\n        return this.state.get() === \"normal\";\n    }\n    addToNode(endpoint) {\n        return new Promise((resolve) => {\n            if (!endpoint.info.pilot) {\n                const model = new spinal_core_connectorjs_type_1.Lst();\n                model.push(this);\n                endpoint.info.add_attr({ pilot: new spinal_core_connectorjs_type_1.Ptr(model) });\n                resolve(model);\n            }\n            else {\n                endpoint.info.pilot.load(lst => {\n                    lst.push(this);\n                    resolve(lst);\n                });\n            }\n        }).then((res) => {\n            this.add_attr({ node: endpoint });\n            return res;\n        });\n    }\n    removeToNode() {\n        return new Promise((resolve, reject) => {\n            if (this.node) {\n                this.node.info.pilot.load(lst => {\n                    for (let i = 0; i < lst.length; i++) {\n                        const element = lst[i];\n                        if (element.id.get() === this.id.get()) {\n                            lst.splice(i);\n                            break;\n                        }\n                    }\n                    resolve(true);\n                });\n            }\n            else {\n                resolve(false);\n            }\n        });\n    }\n}\nexports.SpinalPilotModel = SpinalPilotModel;\n//@ts-ignore\nspinal_core_connectorjs_type_1.spinalCore.register_models([SpinalPilotModel]);\nexports.default = SpinalPilotModel;\n//# sourceMappingURL=SpinalPilotModel.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpinalOrganConfigModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nconst uuid_1 = require(\"uuid\");\nconst constants_1 = require(\"../data/constants\");\nclass SpinalOrganConfigModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(name, type = constants_1.BACNET_ORGAN_TYPE) {\n        super();\n        this.add_attr({\n            id: uuid_1.v4(),\n            name,\n            type,\n            references: {},\n            restart: false,\n        });\n    }\n    addReference(contextId, spinalNode) {\n        if (this.references[contextId]) {\n            return new Promise((resolve, reject) => {\n                this.references[contextId].load((e) => {\n                    if (typeof e !== \"undefined\")\n                        return reject(\"The organ is already linked to this context\");\n                    this.references.mod_attr(contextId, new spinal_core_connectorjs_type_1.Pbr(spinalNode));\n                    resolve(spinalNode);\n                });\n            });\n        }\n        this.references.add_attr({ [contextId]: new spinal_core_connectorjs_type_1.Pbr(spinalNode) });\n        return Promise.resolve(spinalNode);\n    }\n    isReferencedInContext(contextId) {\n        if (typeof this.references[contextId] === \"undefined\")\n            return Promise.resolve(false);\n        return new Promise((resolve, reject) => {\n            this.references[contextId].load((e) => {\n                if (typeof e === \"undefined\")\n                    return resolve(false);\n                resolve(true);\n            });\n        });\n    }\n    removeReference(contextId) {\n        if (this.references[contextId]) {\n            return new Promise((resolve, reject) => {\n                this.references[contextId].load(node => {\n                    this.references.rem_attr(contextId);\n                    resolve(node);\n                });\n            });\n        }\n    }\n}\nexports.SpinalOrganConfigModel = SpinalOrganConfigModel;\nSpinalOrganConfigModel.TYPE = constants_1.BACNET_ORGAN_TYPE;\nSpinalOrganConfigModel.CONTEXT_TO_ORGAN_RELATION = \"hasBmsNetworkOrgan\";\n//@ts-ignore\nspinal_core_connectorjs_type_1.spinalCore.register_models([SpinalOrganConfigModel]);\nexports.default = SpinalOrganConfigModel;\n//# sourceMappingURL=SpinalOrganConfigModel.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BACNET_ORGAN_TYPE = void 0;\nconst BACNET_ORGAN_TYPE = \"BACNET_ORGAN\";\nexports.BACNET_ORGAN_TYPE = BACNET_ORGAN_TYPE;\n//# sourceMappingURL=constants.js.map",null,"\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IRequest.js.map",null],"names":[],"version":3,"file":"spinal-env-viewer-plugin-network-tree.78fd661e.js.map"}