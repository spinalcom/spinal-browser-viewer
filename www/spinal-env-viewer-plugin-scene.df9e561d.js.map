{"mappings":"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aAAaU,KAAM;YACpC,OAAOlB,CAAAA,GAAAA,+CAAAA,EAAmBqC,YAAaE,QAAQ;gBAACnC,CAAAA,GAAAA,8BAAAA;aAAzC;QAER;IACF;IAED,OAAOoC,eAAgBD,MAAvB,EAA+BT,OAA/B,EAAyC;QACvC,OAAOvB,YAAYC,aAAaU,KAAM;YACpC,OAAOlB,CAAAA,GAAAA,+CAAAA,EAAmBiC,kBAAmBM,QAAQT,SAASvB,YAAYY,WAAWf,CAAAA,GAAAA,8BAAAA,GAAqBC,CAAAA,GAAAA,8BAAAA;QAC3G;IACF;AA1Ee;AAAZE,gBAAAA,a,eACiB;AADjBA,gBAAAA,aAAAA,WAAAA,KAAAA;AAAAA,gBAAAA,aAAAA,eAAAA,KAAAA;AAAAA,gBAAAA,aAAAA,QAAAA,KAAAA;AAAAA,gBAAAA,aAAAA,aAAAA,KAAAA;AA8ENA,YAAYE,cAAc;AAC1BF,YAAYQ,cAAc;AAC1BR,YAAYU,OAAO;;;;;yDC5FN;yDACA;gDACA;wDACA;wDACA;AANb;AAEO,MAAM,sBAAuB;AAC7B,MAAM,sBAAuB,CAAA,GAAA,yDAA2B;AACxD,MAAM,aAAc;AACpB,MAAM,qBAAsB;AAC5B,MAAM,qBAAsB,CAAA,GAAA,yDAA2B;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,S;Q,G,Y;Y,O;gB,O;gB,kB;Y;Q,G;Y,G,Y;gB,O;oB,a;gB;gB,O;oB,O,I;oB,U,S,G;wB,I,S;oB;oB,Y;gB;Y,G;gB,G,U;oB,O;wB,Q;oB;gB,G;oB,G,gB;wB,a;oB,G;wB,I,G;qB;oB,I,G;oB,G,e;wB,G,gB;4B,O;gC,e;4B;4B,I;gC,U,I;4B;wB;wB,I,G;wB,G,gB;4B,O;gC,e;4B;4B,I;gC,U,I;4B;wB;qB,E;oB,I,G;oB,G,kB;wB,G;wB,I,G;wB,G,S;4B,O;gC,S;gC,Q;4B;4B,I;gC,S,I;4B;wB,G;4B,I,G;yB;wB,I,G;wB,G,S;4B,O;gC,S;gC,Q;4B;4B,I;gC,S,I;4B;wB,G;4B,I,G;yB;qB,E;iB,E;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AHL9D,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;AI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,IAAI;IACzC;IAEA,QAAS,MAAM,EAAG;QAChB,IAAI,OAAO,aAAa,KAAK,UAAU,CAAA,GAAA,qBAAS,GAC9C,OAAO,QAAQ,QAAS;QAC1B,OAAO,QAAQ,QAAS;IAC1B;IAEA,UAAU,MAAM,EAAE;QAChB,OAAO,OAAO,kBAAkB,kBAAkB,OAAO,aAAa,GAAG;IAC3E;AACF;;;;;AC3BA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAoC;IAClD,OAAO,kBAAkB,QAAQ,oBAAoC;IACrE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAiC;IAC/D,QAAQ,oBAAkC,QAAQ;IAClD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A;A;;A;A,I,gB;I,M;I,Y;yB,C,G,kC;I;I,M;Q,O;Y,gB;Y,gB;Y,gB;Y,uB;Y,oB;Y,a;gB;oB,M;oB,O;gB;gB;oB,M;oB,O;gB;gB;oB,M;oB,O;gB;a;Y,wB;Y,a;Y,W;gB,I;Y;Y,Q,C;Y,c;Y,S,E;Y,e,C;Y,U;Y,gB,E;Y,kB,E;Y,M;Y,O;Y,U,E;Y,W;Y,Y;Y,iB,E;Y,gB,E;Y,uB;Y,iB;Y,mB;Y,c;Y,e;Y,c;Y,W;Y,a;Y,Y,C;Q;I;I,O;Q,e,S,K;Y,I,I,I,G,I,M,Q,I;gB,I,O,I,C,W,C,K,C,E,C,K,e,I,C,W,C,K,C,E,C,E;gB,I,I,I,G,I,I,C,S,Q,I,I,I,C,Q,C,E,C,K,U,K,C,E,E;oB,I,C,iB,I,C,Q,C,E;oB,I,C,Y,K;wB,I,C,W,C,K,C,E,C,G;oB;gB;Y;Q;I;I,U;Q,M;Y,I,I,C,U,M,O,I,C,M,K;Y,O;Q;Q,a;Y,I,I,C,U,M,O,I,C,M,Y;Y,O;Q;Q,S;Y,O,I,C,e;Q;Q,mB;Y,6C;Y,I,I,C,U,O,G,O,I,C,e,I,C,I,I,C,a;iB,O,I,C,e,I,C,I,I,C,a;Q;Q,wB;Y,I,I,C,U,M,G,O,C,E,I,C,U,G,gB,C;Y,O,C,E,I,C,U,G,iB,C;Q;I;I,S;Q,Y,S,M;Y,I,C,Y,I,C;Y,I,C,U,K;Y,I,C,iB,S,e;Y,I,C,iB,S,e;Y,I,C,iB,S,e;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Q;I;I,S;Q,e,C;Y,I,C,M,gB;gB,O;gB,W,I,C;Y;Q;I;I,O;Q,O,S,K;Y,I,C,M,sB;Y,Q,I;QAef;IACA;AAEA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,e;Q,O;Y,gB;Y,kB;Q;I,G;Q,G,Y;Y,O;gB,gB;gB,wB;gB,O;Y;Q,G;Y,G,U;gB,G,kB;oB,O;wB,W;wB,Q;wB,M;wB,U,I;wB,S,I;wB,S;wB,mB;wB,gB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,Q;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,U;gB,G,gB;oB,O;wB,Q;wB,S;wB,S;oB;oB,I;wB,U,I;oB;gB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AApCA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,S;Q,a;Q,O;Y,Q;Q;I,G;Q,G,a;Y,O;gB,Y;gB,Q;Y;Y,O;gB,O,I;gB,U,S,G;oB,I,O;gB;gB,Y;Y;Q,G;Y,G,kB;gB,O;oB,Y;oB,Y,I,O;oB,Q;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,qB;gB,O;oB,Q;oB,M;gB;Y,G;gB,G,Y;oB,O;wB,S,I;wB,S;wB,Y;wB,Q;wB,mB;wB,U,I;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,iB;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,kB;gB,O;oB,Y;oB,Y,I,O;oB,Q;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,qB;gB,O;oB,Q;oB,M;gB;Y,G;gB,G,Y;oB,O;wB,S,I;wB,a;wB,c;wB,S;wB,Q;wB,mB;wB,U,I;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,qB;wB;wB,Y;oB;gB;gB,I,G;gB,G,c;oB,O;wB,S;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,e;wB;wB,Y;oB;gB;gB,I,G;gB,C,I,e,G,O;oB,G,Y;wB,O;4B,gB;4B,wB;4B,O;wB;oB,G;wB,G,U;4B,G,S;gC,O;oC,Q;oC,Q;gC;gC,I;oC,S,I;gC;4B,G;gC,G,U;oC,I,G;iC;6B,E;yB,E;wB,I,G;wB,G,U;4B,G,S;gC,O;oC,Q;oC,Q;gC;gC,I;oC,S,I;gC;4B,G;gC,G,U;oC,I,G;iC;6B,E;yB,E;wB,I,G;wB,G,U;4B,G,S;gC,O;oC,Q;oC,Q;gC;gC,I;oC,S,I;gC;4B,G;gC,G,U;oC,I,G;iC;6B,E;yB,E;qB,E;oB,I,G;oB,I,yB,G,O;wB,I,G;wB,G,S;4B,O;gC,Q;gC,Q;4B;4B,I;gC,S,I;4B;wB,G;4B,G,U;gC,I,G;6B;yB,E;qB,E,K,I;oB,I,G,e,I,G,I,0B;iB,E,K,I;a,E;Y,I,G;Y,G,kB;gB,O;oB,Y;oB,Y,I,O;oB,Q;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,qB;gB,O;oB,Q;oB,M;gB;Y,G;gB,G,c;oB,O;wB,S;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,W;wB;wB,Y;oB;gB;gB,I,G;gB,G,gB;oB,O;wB,S;wB,e,I;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,Y;wB;wB,Y;oB;gB;gB,I,G;gB,G,gB;oB,O;wB,S;wB,e,I;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,a;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,kB;gB,O;oB,Y;oB,Q;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,qB;gB,O;oB,Q;oB,M;gB;Y,G;gB,I,G,a,I,G,I,W;gB,I,G,I,mB,S,K;oB,O,G,O;wB,I,G,e,I,G,M,Q,W,I,G,I,mB;wB,O,M,U,e,I,kB,I,G,S;4B,O;gC,Q;gC,Q;4B;4B,I;gC,S,I;4B;wB,G;4B,G,U;gC,I,G;6B;yB,E,K,I;qB,E;gB;gB,I,G;gB,G,S;oB,O;wB,Q;oB;oB,I;wB,S,I;oB;gB,G;oB,I,G;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AFJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AGCA,qDAAa;AANb;AACA;AAGA,MAAM,EAAE,yBAAyB,EAAE,GAAG,QAAS;AAExC,MAAM,wBAAwB,CAAA,GAAA,mDAAe;IAElD,aAAc;QACZ,KAAK,CAAE,cAAc,cAAc;YACjC,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;QAEA,IAAI,CAAC,SAAS,IAAI,CAAC,UAAU,KAAM,IAAI;IACzC;IAEA,QAAS,MAAM,EAAG;QAChB,8BAA8B;QAC9B,IAAI,OAAO,aAAa,KAAK,UAAU,WACrC,OAAO,QAAQ,QAAS;QAC1B,OAAO,QAAQ,QAAS;IAC1B;IAEA,UAAU,MAAM,EAAE;QAChB,OAAO,OAAO,kBAAkB,qBAAqB,OAAO;IAC9D;AACF","sources":["node_modules/spinal-env-viewer-plugin-scene/index.js","node_modules/spinal-env-viewer-plugin-scene/src/vue/DialogCreateScene.vue","node_modules/spinal-env-viewer-plugin-scene/src/build/SceneHelper.js","node_modules/spinal-env-viewer-plugin-scene/src/SceneHelper.js","node_modules/spinal-env-viewer-plugin-scene/src/constants.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-context-menu-service/index.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextMenuService.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextApp.js","node_modules/spinal-env-viewer-context-menu-service/constants.js","node_modules/spinal-env-viewer-plugin-scene/src/buttons/ButtonCreateScene.js","node_modules/spinal-env-viewer-plugin-scene/src/buttons/ButtonOpenSceneManager.js","node_modules/spinal-env-viewer-plugin-scene/src/buttons/ButtonLoadScene.js","node_modules/spinal-env-viewer-plugin-scene/src/vue/PanelSceneManager.vue","node_modules/spinal-env-viewer-plugin-scene/src/vue/ForgeWorkerFunctions.js","node_modules/spinal-env-viewer-plugin-scene/src/vue/SelectAttribute.vue","node_modules/spinal-env-viewer-plugin-scene/src/buttons/ButtonLoadModel.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuetify from 'vuetify'\nimport DialogCreateScene from \"./src/vue/DialogCreateScene.vue\";\nimport { SpinalForgeExtention } from \"spinal-env-viewer-panel-manager-service_spinalforgeextention\";\nimport 'spinal-env-viewer-plugin-forge'\n\nexport const TOP_BAR_HOOK_NAME = 'GraphManagerTopBar';\nexport const SIDE_BAR_HOOK_NAME = \"GraphManagerSideBar\";\nimport {\n  SpinalMountExtention\n} from \"spinal-env-viewer-panel-manager-service\"\nimport {\n  spinalContextMenuService,\n} from \"spinal-env-viewer-context-menu-service\";\n\nimport { ButtonCreateScene } from \"./src/buttons/ButtonCreateScene\";\nimport { ButtonOpenSceneManager } from \"./src/buttons/ButtonOpenSceneManager\";\nimport { ButtonLoadScene } from \"./src/buttons/ButtonLoadScene\";\nimport PanelSceneManager from \"./src/vue/PanelSceneManager.vue\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { ButtonLoadModel } from \"./src/buttons/ButtonLoadModel\";\n\n\n\nVue.use( Vuetify )\n\n\n\nif ( !window.spinal.SpinalForgeViewer.isInitialize())\n  window.spinal.SpinalForgeViewer.initialize( window.spinal.ForgeViewer.viewerManager );\n\n\nasync function waitForGraph() {\n  await SpinalGraphService.waitForInitialization();\n  const context = SpinalGraphService.getContext('Scenes');\n  let running = false;\n  const interval = setInterval(()=>{\n    if (!running && typeof context !== \"undefined\" && window.spinal.SpinalForgeViewer.isInitialize()) {\n      running = true;\n      return SpinalGraphService.getChildrenInContext(context.info.id.get(), context.info.id.get())\n        .then(children => {\n          for (let i = 0; i < children.length; i++) {\n            if (children[i].autoLoad.get()) {\n              window.spinal.SpinalForgeViewer.loadModelFromNode(children[i].id.get());\n            }\n          }\n          clearInterval(interval);\n        }).catch(e => {\n          console.error(e);\n          clearInterval(interval);\n        });\n    }\n  }, 200);\n}\n\nwaitForGraph();\n\n\nspinalContextMenuService.registerApp( TOP_BAR_HOOK_NAME, new ButtonCreateScene(), [7] );\nspinalContextMenuService.registerApp( SIDE_BAR_HOOK_NAME, new ButtonOpenSceneManager(), [7] );\nspinalContextMenuService.registerApp( SIDE_BAR_HOOK_NAME, new ButtonLoadModel(), [7] );\nspinalContextMenuService.registerApp( SIDE_BAR_HOOK_NAME, new ButtonLoadScene(), [7] );\n\nSpinalMountExtention.mount( {\n  // name registered.\n  name: \"DialogCreateScene\",\n  // Vue.extend to create a Compoment constructor\n  vueMountComponent: Vue.extend( DialogCreateScene ),\n  // where to  append the Compoment\n  parentContainer: document.body\n} );\n\n\nconst compareVersion = SpinalForgeExtention.createExtention( {\n  name: 'PanelSceneManager',\n  vueMountComponent: Vue.extend( PanelSceneManager ),\n  panel: {\n    title: \"Scene Manager\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"delete\"\n  },\n  style: {\n    left: \"805px\",\n    width: \"430px\",\n    height: \"80vh\",\n    display: \"flex\",\n    overflow: \"hidden\"\n  }\n} );\n\n\nSpinalForgeExtention.registerExtention( \"PanelSceneManager\", compareVersion );\n\n","<template>\n    <v-app>\n        <v-layout row justify-center>\n            <v-dialog v-model=\"dialog\" max-width=\"290\">\n                <v-card :dark=\"true\">\n                    <v-card-title class=\"headline\">Create a new scene\n                    </v-card-title>\n                    <v-card-text>\n                        <v-text-field\n                                placeholder=\"Name\"\n                                @change=\"onNameChange\"\n                        />\n\n                        <v-text-field\n                                placeholder=\"Description\"\n                                @change=\"onNameChange\"\n                        />\n\n                    </v-card-text>\n                    <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"red darken-1\"\n                               flat\n                               @click=\"onCancel\">Annuler\n                        </v-btn>\n\n                        <v-btn color=\"green darken-1\"\n                               flat\n                               @click=\"onSave\">Valider\n                        </v-btn>\n                    </v-card-actions>\n                </v-card>\n            </v-dialog>\n        </v-layout>\n    </v-app>\n</template>\n\n<script>\n  import { SceneHelper } from \"../build/SceneHelper\";\n\n  export default {\n    name: \"DialogCreateScene\",\n\n    data: function () {\n      return {\n        name: \"\",\n        description: \"\",\n        dialog: false,\n        bimFile: []\n      }\n    },\n    methods: {\n      initialize: function ( option ) {\n      },\n      onNameChange: function ( value ) {\n        this.name = value;\n      },\n      onDescriptionChange: function ( value ) {\n        this.description = value;\n      },\n      createScene: function () {\n        return new Promise( resolve => {\n          SceneHelper.createScene( this.name, this.description,\n            false ).then( resolve )\n        } )\n      },\n      onSave: function () {\n        this.createScene()\n          .then( () => {\n            this.dialog = false;\n          } );\n      },\n      onCancel: function () {\n        this.dialog = false;\n      },\n      opened: function ( option ) {\n        this.initialize( option );\n        this.dialog = true;\n      },\n      removed: function () {\n\n      },\n      closeDialog( closeResult ) {\n\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SpinalContext, SpinalGraphService, SpinalNode } from \"spinal-env-viewer-graph-service\";\nimport { PART_RELATION_NAME, PART_RELATION_TYPE, SCENE_RELATION_NAME, SCENE_RELATION_TYPE, SCENE_TYPE } from \"../constants\";\n\nclass SceneHelper {\n  static initialize() {\n    if (SceneHelper.initialized !== null) {\n      return SceneHelper.initialized;\n    }\n\n    SceneHelper.initialized = new Promise((resolve, reject) => {\n      SceneHelper.context = SpinalGraphService.getContext(SceneHelper.contextName);\n\n      if (typeof SceneHelper.context === \"undefined\") {\n        SpinalGraphService.addContext(SceneHelper.contextName, SceneHelper.type).then(context => {\n          SceneHelper.context = context;\n          SceneHelper.contextId = context.info.id.get();\n          console.log(SceneHelper);\n          console.log(SceneHelper.contextId);\n          resolve(true);\n        }).catch(reject);\n      } else {\n        SceneHelper.contextId = SceneHelper.context.info.id.get();\n        console.log(SceneHelper.contextId);\n        resolve(true);\n      }\n    });\n    return SceneHelper.initialized;\n  }\n\n  static createScene(name, description, autoLoad) {\n    return SceneHelper.initialize().then(() => {\n      const sceneId = SpinalGraphService.createNode({\n        name,\n        description,\n        autoLoad,\n        type: SCENE_TYPE\n      }, undefined);\n      return SpinalGraphService.addChildInContext(SceneHelper.contextId, sceneId, SceneHelper.contextId, SCENE_RELATION_NAME, SCENE_RELATION_TYPE);\n    });\n  }\n\n  static addModelToScene(sceneId, bimFileId) {\n    return SceneHelper.initialize().then(() => {\n      return SpinalGraphService.addChildInContext(sceneId, bimFileId, SceneHelper.contextId, PART_RELATION_NAME, PART_RELATION_TYPE);\n    });\n  }\n\n  static getBimFilesFromScene(sceneId) {\n    return SceneHelper.initialize().then(() => {\n      return SpinalGraphService.getChildren(sceneId, [PART_RELATION_NAME]);\n    });\n  }\n\n  static getSceneFromNode(nodeId) {\n    return SceneHelper.initialize().then(() => {\n      return SpinalGraphService.getChildren(nodeId, [SCENE_RELATION_NAME]);\n    });\n  }\n\n  static addSceneToNode(nodeId, sceneId) {\n    return SceneHelper.initialize().then(() => {\n      return SpinalGraphService.addChildInContext(nodeId, sceneId, SceneHelper.contextId, SCENE_RELATION_NAME, SCENE_RELATION_TYPE);\n    });\n  }\n\n}\n\n_defineProperty(SceneHelper, \"initialized\", null);\n\n_defineProperty(SceneHelper, \"context\", void 0);\n\n_defineProperty(SceneHelper, \"contextName\", void 0);\n\n_defineProperty(SceneHelper, \"type\", void 0);\n\n_defineProperty(SceneHelper, \"contextId\", void 0);\n\nSceneHelper.initialized = null;\nSceneHelper.contextName = \"Scenes\";\nSceneHelper.type = \"SpinalService\";\nexport { SceneHelper };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import {\n  SpinalContext,\n  SpinalGraphService,\n  SpinalNode\n} from \"spinal-env-viewer-graph-service\";\nimport {\n  PART_RELATION_NAME,\n  PART_RELATION_TYPE,\n  SCENE_RELATION_NAME,\n  SCENE_RELATION_TYPE,\n  SCENE_TYPE\n} from \"./constants\";\n\n\nclass SceneHelper {\n  static initialized = null;\n  static context;\n  static contextName;\n  static type ;\n  static contextId;\n  \n  \n  static initialize() {\n    if (SceneHelper.initialized !== null) {\n      return SceneHelper.initialized;\n    }\n    \n    SceneHelper.initialized = new Promise(( resolve, reject ) => {\n      \n      SceneHelper.context = SpinalGraphService.getContext( SceneHelper.contextName );\n      if (typeof SceneHelper.context === \"undefined\") {\n        SpinalGraphService.addContext(SceneHelper.contextName, SceneHelper.type).then(context => {\n          SceneHelper.context = context;\n    \n          SceneHelper.contextId = context.info.id.get();\n          console.log(SceneHelper);\n          console.log(SceneHelper.contextId);\n          resolve(true);\n        }).catch(reject);\n      }\n      else{\n        SceneHelper.contextId = SceneHelper.context.info.id.get();\n        console.log(SceneHelper.contextId);\n        resolve( true );\n      }\n    });\n    return SceneHelper.initialized;\n  }\n  \n  static createScene( name, description, autoLoad ) {\n    return SceneHelper.initialize().then( () => {\n      const sceneId = SpinalGraphService.createNode( {\n        name,\n        description,\n        autoLoad,\n        type: SCENE_TYPE\n      }, undefined );\n      return SpinalGraphService.addChildInContext( SceneHelper.contextId,\n        sceneId, SceneHelper.contextId, SCENE_RELATION_NAME, SCENE_RELATION_TYPE );\n    } );\n    \n  }\n  \n  static addModelToScene( sceneId, bimFileId ) {\n    return SceneHelper.initialize()\n      .then( () => {\n        return SpinalGraphService.addChildInContext( sceneId, bimFileId, SceneHelper.contextId,\n          PART_RELATION_NAME, PART_RELATION_TYPE );\n      } )\n  }\n  \n  static getBimFilesFromScene( sceneId ) {\n    return SceneHelper.initialize().then( () => {\n      return SpinalGraphService.getChildren( sceneId, [PART_RELATION_NAME] );\n    } )\n  }\n  \n  static getSceneFromNode( nodeId ) {\n    return SceneHelper.initialize().then( () => {\n      return SpinalGraphService.getChildren( nodeId, [SCENE_RELATION_NAME] )\n      \n    } )\n  }\n  \n  static addSceneToNode( nodeId, sceneId ) {\n    return SceneHelper.initialize().then( () => {\n      return SpinalGraphService.addChildInContext( nodeId, sceneId, SceneHelper.contextId, SCENE_RELATION_NAME, SCENE_RELATION_TYPE );\n    } )\n  }\n  \n}\n\nSceneHelper.initialized = null;\nSceneHelper.contextName = \"Scenes\";\nSceneHelper.type = \"SpinalService\";\n\nexport {SceneHelper};","import { SPINAL_RELATION_LST_PTR_TYPE } from \"spinal-env-viewer-graph-service\";\n\nexport const SCENE_RELATION_NAME  = 'hasScene';\nexport const SCENE_RELATION_TYPE  = SPINAL_RELATION_LST_PTR_TYPE;\nexport const SCENE_TYPE  = \"scene\";\nexport const PART_RELATION_NAME  = 'hasParts';\nexport const PART_RELATION_TYPE  = SPINAL_RELATION_LST_PTR_TYPE;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalContextMenuService = require(\"./SpinalContextMenuService\");\nconst SpinalContextApp = require(\"./SpinalContextApp\");\nconst Constant = require('./constants');\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalContextMenuService === \"undefined\")\n  G_root.spinal.spinalContextMenuService = new SpinalContextMenuService();\n\nmodule.exports = {\n  constants: Constant,\n  spinalContextMenuService: G_root.spinal.spinalContextMenuService,\n  SpinalContextApp,\n  install(Vue) {\n    Vue.prototype.$spinalContextMenuService =\n      G_root.spinal.spinalContextMenuService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport * as Q from 'q';\nvar debounce = require('lodash.debounce');\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} apps key = hookname, value array of apps\n * @class SpinalContextMenuService\n */\nclass SpinalContextMenuService {\n  /**\n   *Creates an instance of SpinalContextMenuService.\n   * @memberof SpinalContextMenuService\n   */\n  constructor() {\n    this.apps = {};\n    this.promiseByAppProfileId = {};\n    this.appRdy = Q.defer();\n    this.debouncedRdy = debounce(\n      () => {\n        this.appRdy.resolve();\n        this.debouncedRdy = () => {};\n      },\n      1000,\n      { leading: false, trailing: true }\n    );\n  }\n\n  // waitRdy() {\n  //   this.appRdy.promise;\n  // }\n\n  /**\n   * Return true if user has access to this appProfile\n   * @param appProfileId\n   * @return {PromiseLike<boolean > | Promise<boolean>}\n   */\n  async hasUserRight(appProfileId) {\n    this.debouncedRdy();\n    await window.spinal.spinalSystem.init();\n    const path =\n      '/etc/UserProfileDir/' + window.spinal.spinalSystem.getUser().username;\n    const userProfile = await window.spinal.spinalSystem.load(path);\n    let res = false;\n    if (userProfile) {\n      for (let i = 0; i < userProfile.appProfiles.length && !res; i++) {\n        res = ((1 << userProfile.appProfiles[i]) & appProfileId) !== 0;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * method to register the Application to a hook\n   *\n   * @param {string} hookname the place where is application button is located\n   * @param {SpinalContextApp} spinalContextApp the application\n   * @param {number} appProfileId id of the group that can use the application\n   * button\n   * @memberof SpinalContextMenuService\n   */\n  registerApp(hookname, spinalContextApp, appProfileId) {\n    this.debouncedRdy();\n    if (typeof appProfileId === 'undefined') {\n      console.warn(\n        'Deprecated: The usage of this function without the third' +\n          ' parameter appProfileId is deprecated your button is lock for admin' +\n          ' only until you set the third parameter'\n      );\n      appProfileId = 1;\n    }\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      appsInHooks = this.apps[hookname] = [];\n    }\n\n    if (!this.promiseByAppProfileId.hasOwnProperty(appProfileId)) {\n      this.promiseByAppProfileId[appProfileId] =\n        this.hasUserRight(appProfileId);\n    }\n\n    this.promiseByAppProfileId[appProfileId].then((hasAccess) => {\n      // push the app if not exist ans user has access to the button\n      if (hasAccess && appsInHooks.indexOf(spinalContextApp) === -1) {\n        appsInHooks.push(spinalContextApp);\n      }\n    });\n  }\n\n  /**\n   * method to get the applications registered to a hookname\n   *\n   * @param {String} hookname\n   * @param {object} option\n   * @memberof SpinalContextMenuService\n   * @returns {Promise} resolve : [spinalContextApp, ...]; reject: Error\n   */\n  async getApps(hookname, option) {\n    await this.appRdy.promise;\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      return Promise.resolve([]);\n    }\n    let promises = appsInHooks.map(async function (e, idx) {\n      try {\n        const res = await e.isShown(option);\n        return res === -1 ? -1 : e;\n      } catch (error) {\n        console.error(error);\n        return -1;\n      }\n    });\n    try {\n      const appRes = await Promise.all(promises);\n      return appRes.filter((itm) => itm !== -1);\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = SpinalContextMenuService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Interface like class to define a Contextual Application button\n * @see https://material.io/tools/icons/?style=baseline for material icons\n *\n * @class SpinalContextApp\n * @property {string} label=notset short name to be shown in the application\n * @property {string} description description of what the Application button do\n * @property {object} buttonCfg Object configuration of the Application button\n * @property {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n * @property {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n * @property {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n * @property {string} buttonCfg.fontColor=#FFFFFF font color of the button\n * @property {objet} [badgeCfg] Object configuration of the Application button badge\n * @property {string} badgeCfg.label string shown in a badge; if empty it's not shown\n * @property {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n * @property {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n */\nclass SpinalContextApp {\n  /**\n   * Creates an instance of SpinalContextApp.\n   * @param {string} label=notset short name to be shown in the application\n   * @param {string} description description of what the Application button do\n   * @param {object} buttonCfg Object configuration of the Application button\n   * @param {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n   * @param {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n   * @param {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n   * @param {string} buttonCfg.fontColor=#FFFFFF font color of the button\n   * @param {objet} [badgeCfg] Object configuration of the Application button badge\n   * @param {string} badgeCfg.label string shown in a badge; if empty it's not shown\n   * @param {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n   * @param {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n   * @memberof SpinalContextApp\n   */\n  constructor(label, description, buttonCfg, badgeCfg = {}) {\n    this.label = label || \"notset\";\n    this.description = description || \"\";\n    this.buttonCfg = {\n      icon: buttonCfg.icon || \"tab\",\n      icon_type: buttonCfg.icon_type || \"in\",\n      backgroundColor: colorHash(buttonCfg.backgroundColor || \"#0000FF\"),\n      fontColor: colorHash(buttonCfg.fontColor || \"#FFFFFF\")\n    };\n\n    this.badgeCfg = {\n      label: badgeCfg.label || \"\",\n      backgroundColor: colorHash(badgeCfg.backgroundColor || \"#FF0000\"),\n      fontColor: colorHash(badgeCfg.fontColor || \"#FFFFFF\")\n    };\n  }\n\n  /**\n   * Method called by `SpinalContextMenuService.getApps`\n   * to filter the Application button to show in the context hook\n   *\n   * @param {object} option\n   * @memberof SpinalContextApp\n   * @returns {Promise} Resolve: not shown if === -1;\n   */\n  isShown(option) {}\n\n  /**\n   * Method to call on click of the application button\n   *\n   * @param {object} option {}\n   * @memberof SpinalContextApp\n   */\n  action(option) {}\n}\n\nmodule.exports = SpinalContextApp;\n\nfunction colorHash(color) {\n  if (color[0] === \"#\") return color;\n  return \"#\" + color;\n}\n","\n\nmodule.exports = {\n  ADMINISTRATEUR: 'ADMINISTRATEUR',\n  MAINTENEUR: 'MAINTENEUR',\n  INTEGRATEUR: 'INTEGRATEUR',\n  ASSET_MANAGEUR: 'ASSET MANAGER',\n};","/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\nimport { SpinalContextApp } from 'spinal-env-viewer-context-menu-service';\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\n\nconst { spinalPanelManagerService } = require( \"spinal-env-viewer-panel-manager-service\" );\n\nexport class ButtonCreateScene extends SpinalContextApp {\n  \n  constructor() {\n    super( 'Create a new scene', 'Create a new scene', {\n      icon: 'business',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    } );\n    \n    this.action = this.openPanel.bind( this );\n  }\n  \n  isShown() {\n    return Promise.resolve( true );\n  }\n  \n  openPanel() {\n    spinalPanelManagerService.openPanel( \"DialogCreateScene\");\n  }\n}","/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalContextApp } from 'spinal-env-viewer-context-menu-service';\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { SCENE_TYPE } from \"../constants\";\n\n\nconst { spinalPanelManagerService } = require( \"spinal-env-viewer-panel-manager-service\" );\n\nexport class ButtonOpenSceneManager extends SpinalContextApp {\n  \n  constructor() {\n    super( 'Open Model Manager', 'Open Model Manager', {\n      icon: 'web',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    } );\n    \n    this.action = this.openPanel.bind( this );\n  }\n  \n  isShown( option ) {\n    if (option.selectedNode.type.get() === SCENE_TYPE)\n      return Promise.resolve( true );\n    return Promise.resolve(-1);\n  }\n  \n  \n  \n  openPanel( option ) {\n    const context = SpinalGraphService.getContext( 'BimFileContext' );\n    if (typeof context === \"undefined\") {\n      alert(\"aucun bimFile dans le Digital tween\");\n      return\n    }\n    \n    SpinalGraphService.getChildrenInContext( context.info.id.get(), context.info.id.get() )\n      .then( children => {\n        spinalPanelManagerService.openPanel( \"PanelSceneManager\", { scene: option.selectedNode,  bimFiles: children} );\n      } )\n  }\n}","import { SpinalContextApp } from 'spinal-env-viewer-context-menu-service';\nimport { SCENE_TYPE } from \"../constants\";\n\n\nconst { spinalPanelManagerService } = require( \"spinal-env-viewer-panel-manager-service\" );\n\nexport class ButtonLoadScene extends SpinalContextApp {\n  \n  constructor() {\n    super( 'Load Scene', 'Load all model of the scene', {\n      icon: 'get_app',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    } );\n    \n    this.action = this.openPanel.bind( this );\n  }\n  \n  isShown( option ) {\n    if (option.selectedNode.type.get() === SCENE_TYPE)\n      return Promise.resolve( true );\n    return Promise.resolve( -1 );\n  }\n  \n  openPanel(option) {\n    window.spinal.SpinalForgeViewer.loadModelFromNode(option.selectedNode.id.get())\n  }\n}","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app class=\"scene-manager\" dark>\n    <v-stepper vertical dark v-model=\"step\">\n      <v-stepper-step editable :complete=\"step > 1\" step=\"1\">\n        Select models\n      </v-stepper-step>\n      <v-stepper-content step=\"1\" id=\"step1\">\n        <v-select\n          v-model=\"selectedModels\"\n          :items=\"bimFilesComputed\"\n          label=\"Models\"\n          multiple\n          hint=\"Choose the model to add to the scene\"\n          persistent-hint\n          :attach=\"container\"\n        >\n        </v-select>\n      </v-stepper-content>\n      <v-stepper-step editable :complete=\"step > 2\" step=\"2\">\n        Choose referential\n      </v-stepper-step>\n      <v-stepper-content step=\"2\" id=\"step2\">\n        <v-select\n          v-model=\"loadOptionSelected\"\n          :items=\"loadOptions\"\n          item-text=\"name\"\n          item-value=\"value\"\n          label=\"Load scene option\"\n          hint=\"select the Load type for this scene\"\n          persistent-hint\n          :attach=\"container\"\n        >\n        </v-select>\n        <v-checkbox\n          v-model=\"useAllModels\"\n          label=\"Use whole digital twin\"\n        ></v-checkbox>\n\n        <!-- \n        <v-checkbox\n          v-model=\"autoPosition\"\n          label=\"Use models inner position\"\n        ></v-checkbox> -->\n        <div v-if=\"!useAllModels\">\n          <v-layout align-center justify-space-around row>\n            <v-flex>\n              <v-btn flat icon @click=\"getSelection\">\n                <v-icon>add</v-icon>\n              </v-btn>\n            </v-flex>\n            <v-flex>\n              <v-btn flat icon @click=\"clearSelection\">\n                <v-icon>close</v-icon>\n              </v-btn>\n            </v-flex>\n            <v-flex>\n              <v-btn flat icon @click=\"selectOBJ\">\n                <v-icon>visibility</v-icon>\n              </v-btn>\n            </v-flex>\n          </v-layout>\n          <div v-if=\"displayNeedToLoadModel\">\n            Models need to be loaded to see the selection\n            <v-btn flat icon @click=\"loadAllModel\">\n              <v-icon>get_app</v-icon>\n            </v-btn>\n          </div>\n          {{ objectSelectedSentence }}\n        </div>\n      </v-stepper-content>\n\n      <v-stepper-step editable :complete=\"step > 2\" step=\"3\">\n        Edit scene\n      </v-stepper-step>\n      <v-stepper-content step=\"3\" id=\"step3\">\n        <v-checkbox\n          v-model=\"autoLoad\"\n          label=\"load the scene automatically\"\n        ></v-checkbox>\n        <v-text-field\n          v-model=\"sceneName\"\n          label=\"Name\"\n          :placeholder=\"name\"\n        ></v-text-field>\n        <v-text-field\n          v-model=\"sceneDescr\"\n          label=\"Description\"\n          :placeholder=\"description\"\n        ></v-text-field>\n      </v-stepper-content>\n\n      <v-stepper-step editable step=\"4\"> Summary </v-stepper-step>\n      <v-stepper-content step=\"4\" id=\"step4\">\n        {{ nbModel }} model include in this scene\n        <div v-for=\"model in selectedModelInfo\">\n          {{ model.name }} with {{ getDbIdLength() }} object selected\n          <v-btn\n            v-if=\"typeof model.dbIds !== 'undefined' && getDbIdLength() > 0\"\n            flat\n            icon\n            @click=\"selectOBJ\"\n          >\n            <v-icon>visibility</v-icon>\n          </v-btn>\n        </div>\n        <v-btn flat @click=\"save\"> Save </v-btn>\n      </v-stepper-content>\n    </v-stepper>\n  </v-app>\n</template>\n\n<script>\nimport { SceneHelper } from \"../build/SceneHelper\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { filterDbid, getAttributeName } from \"./ForgeWorkerFunctions\";\nimport SelectAttribute from \"./SelectAttribute.vue\";\nimport { PART_RELATION_NAME, PART_RELATION_TYPE } from \"../constants\";\n\nexport default {\n  name: \"PanelSceneManager\",\n  components: { SelectAttribute },\n  data: function () {\n    return {\n      step1Container: null,\n      step2Container: null,\n      step3Container: null,\n      // autoPosition: false,\n\n      loadOptionSelected: 0,\n      loadOptions: [\n        { name: \"Center To Center\", value: 0 },\n        { name: \"Origin To Origin\", value: 1 },\n        { name: \"Share Coordinates\", value: 2 },\n      ],\n\n      displayNeedToLoadModel: false,\n      modelLoaded: false,\n      selection: { nb: 0 },\n      models: {},\n      useAllModels: true,\n\n      mModels: [],\n      modelPosition: {},\n      autoLoad: false,\n      selectedModels: [],\n      bimFilesComputed: [],\n      step: 1,\n      scene: null,\n      bimFiles: [],\n\n      sceneName: \"\",\n      sceneDescr: \"\",\n\n      associatedModel: [],\n      attributesName: [],\n      isBimFileSelectorOpen: false,\n      modifyModelItem: false,\n      modelNeedToBeLoad: false,\n      currentModel: null,\n\n      attributeName: \"\",\n      attributeVal: \"\",\n      container: null,\n      numberProps: 0,\n      modelProps: {},\n    };\n  },\n  watch: {\n    selectedModel: function (value) {\n      for (let i = 0; i < value.length; i++) {\n        if (\n          typeof this.modelLoaded[value[i]] !== \"undefined\" &&\n          this.modelLoaded[value[i]]\n        )\n          continue;\n        for (let j = 0; j < this.bimFiles.length; j++) {\n          if (this.bimFiles[j].name.get() === value[i]) {\n            this.currentBimFile = this.bimFiles[j];\n            this.loadModel().then(() => {\n              this.modelLoaded[value[i]] = true;\n            });\n          }\n        }\n      }\n    },\n    // autoPosition: {\n    //   handler: function (value) {\n    //     if (value && !this.modelLoaded)\n    //       this.loadAllModel().then(() => {\n    //         console.log(\n    //           \"ok\",\n    //           this.mModels,\n    //           typeof this.mModels,\n    //           this.mModels.length\n    //         );\n    //         for (let i = 0; i < this.mModels.length; i++) {\n    //           let meta = this.mModels[i];\n    //           console.log(\"adasdasd\", meta);\n    //           this.modelPosition[meta.model.id] = {\n    //             globalOffset: meta.model.getData().globalOffset,\n    //           };\n    //         }\n    //       });\n    //   },\n    //   immediate: true,\n    // },\n  },\n  computed: {\n    name: function () {\n      if (this.scene !== null) return this.scene.name.get();\n      return \"\";\n    },\n    description: function () {\n      if (this.scene !== null) return this.scene.description.get();\n\n      return \"\";\n    },\n    nbModel: function () {\n      return this.selectedModels.length;\n    },\n    selectedModelInfo: function () {\n      //if here to be trigger when selection change\n      if (this.selection.nb !== 0)\n        return this.selectedModels.map((m) => this.getModelInfo(m));\n      else return this.selectedModels.map((m) => this.getModelInfo(m));\n    },\n    objectSelectedSentence: function () {\n      if (this.selection.nb <= 1) return `${this.selection.nb} object selected`;\n      return `${this.selection.nb} objects selected`;\n    },\n  },\n  methods: {\n    initialize: function (option) {\n      this.container = this.$el;\n      this.selection.nb = 0;\n      this.step1Container = document.getElementById(\"step1\");\n      this.step2Container = document.getElementById(\"step2\");\n      this.step3Container = document.getElementById(\"step3\");\n      this.bimFiles = option.bimFiles;\n      this.scene = option.scene;\n\n      this.bimFilesComputed = this.bimFiles.map((bimfile) => {\n        return bimfile.name.get();\n      });\n\n      this.useAllModels =\n        typeof this.scene.useAllModels !== \"undefined\"\n          ? this.scene.useAllModels.get()\n          : false;\n      this.loadOptionSelected =\n        typeof this.scene.sceneAlignMethod !== \"undefined\"\n          ? this.scene.sceneAlignMethod.get()\n          : 0;\n      this.autoLoad = this.scene.autoLoad.get();\n      if (typeof this.scene.option !== \"undefined\") {\n        for (let i = 0; i < this.scene.options; i++) {\n          this.selection.nb += this.scene.options[i].dbIds.get().length;\n        }\n      }\n      SceneHelper.getBimFilesFromScene(this.scene.id.get()).then((bimFiles) => {\n        this.selectedModels = bimFiles.map((bimFile) => bimFile.name.get());\n      });\n    },\n    getDbIdLength: function (model) {\n      if (typeof model !== \"undefined\" && typeof model.dbIds !== \"undefined\")\n        return model.dbIds.length;\n      return 0;\n    },\n    openBimFileSelector: function () {},\n    opened: function (option) {\n      this.initialize(option);\n    },\n    removed: function () {},\n    closeDialog: function (closeResult) {},\n    addModelToScene: function (bimFile) {\n      SceneHelper.addModelToScene(this.scene.id.get(), bimFile.id.get()).then(\n        () => {\n          this.associatedModel.push(bimFile);\n        }\n      );\n    },\n    getModelInfo(m) {\n      const info = {\n        name: \"\",\n        dbIds: [],\n      };\n      info[\"name\"] = m;\n\n      const model = window.spinal.BimObjectService.getModelByName(m);\n      if (typeof model === \"undefined\") return info;\n\n      info[\"model\"] = model;\n      info[\"dbIds\"] = this.selection[model.id];\n      return info;\n    },\n    loadModel: function () {\n      return window.spinal.SpinalForgeViewer.loadBimFile(\n        this.currentBimFile\n      ).then((m) => {\n        this.currentModel = m.model;\n        this.modelNeedToBeLoad = false;\n        return true;\n      });\n    },\n\n    loadAllModel() {\n      const proms = [];\n      for (let i = 0; i < this.bimFiles.length; i++) {\n        proms.push(\n          window.spinal.SpinalForgeViewer.loadBimFile(this.bimFiles[i])\n        );\n      }\n      return Promise.all(proms).then((res) => {\n        this.mModels = res;\n        console.log(res);\n        this.displayNeedToLoadModel = false;\n        this.modelLoaded = true;\n      });\n    },\n    selectOBJ: function () {\n      if (Object.keys(this.selection).length === 1 && !this.modelLoaded)\n        this.displayNeedToLoadModel = true;\n      spinal.ForgeViewer.viewer.clearSelection();\n      for (let key in this.selection) {\n        if (this.selection.hasOwnProperty(key) && key !== \"nb\") {\n          console.log(key);\n          console.log(this.models[key]);\n\n          this.models[key].selector.setSelection(\n            this.selection[key],\n            Autodesk.Viewing.SelectionMode\n          );\n          // window.spinal.ForgeViewer.viewerManager.select(\n          // this.selection[key], this.models[key] )\n        }\n      }\n    },\n    getSelection: function () {\n      const selection =\n        window.spinal.ForgeViewer.viewer.getAggregateSelection();\n\n      for (let i = 0; i < selection.length; i++) {\n        if (selection[i].hasOwnProperty(\"model\")) {\n          let dbids = this.selection[selection[i].model.id];\n          if (typeof dbids === \"undefined\") dbids = [];\n\n          const newIds = selection[i].selection.filter((dbid) => {\n            return dbids.indexOf(dbid) === -1;\n          });\n\n          dbids.push(...newIds);\n          this.selection[selection[i].model.id] = dbids;\n          this.models[selection[i].model.id] = selection[i].model;\n        }\n      }\n      let res = 0;\n      for (let key in this.selection) {\n        if (this.selection.hasOwnProperty(key) && key !== \"nb\") {\n          res += this.selection[key].length;\n        }\n      }\n      this.selection[\"nb\"] = res;\n    },\n    clearSelection: function () {\n      this.selection = { nb: 0 };\n    },\n    save: function () {\n      const info = {};\n      info[\"autoLoad\"] = this.autoLoad;\n      if (this.sceneDescr !== \"\") info[\"description\"] = this.sceneDescr;\n      if (this.sceneName !== \"\") info[\"name\"] = this.sceneName;\n      info[\"useAllDT\"] = this.useAllModels;\n      info[\"sceneAlignMethod\"] = this.loadOptionSelected;\n      info[\"options\"] = []; // [{urn: \"\", dbIds: []}]\n      for (let i = 0; i < this.selectedModels.length; i++) {\n        const modelName = this.selectedModels[i];\n        let model = window.spinal.BimObjectService.getModelByName(modelName);\n        if (typeof model !== \"undefined\") {\n          info[\"options\"].push({\n            urn: model.myData.urn,\n            dbIds: this.selection[model.id],\n            loadOption: this.modelPosition[model.id],\n          });\n        }\n      }\n      SpinalGraphService.getChildren(this.scene.id.get(), [\n        PART_RELATION_NAME,\n      ]).then((children) => {\n        const nodeToRemove = [];\n        const nodeToAdd = [];\n\n        if (typeof children !== \"undefined\") {\n          for (let i = 0; i < children.length; i++) {\n            if (this.selectedModels.indexOf(children[i].name.get()) === -1)\n              nodeToRemove.push(\n                SpinalGraphService.removeChild(\n                  this.scene.id.get(),\n                  children[i].id.get(),\n                  PART_RELATION_NAME,\n                  PART_RELATION_TYPE\n                )\n              );\n          }\n\n          for (let i = 0; i < this.selectedModels.length; i++) {\n            const node = children.find((child) => {\n              return child.name.get() === this.selectedModels[i];\n            });\n\n            const bimFile = this.bimFiles.find((file) => {\n              return file.name.get() === this.selectedModels[i];\n            });\n\n            if (typeof node === \"undefined\" && typeof bimFile !== \"undefined\")\n              nodeToAdd.push(\n                SceneHelper.addModelToScene(\n                  this.scene.id.get(),\n                  bimFile.id.get()\n                )\n              );\n          }\n        } else {\n          for (let i = 0; i < this.selectedModels.length; i++) {\n            const bimFile = this.bimFiles.filter((file) => {\n              return file.name.get() === this.selectedModels[i];\n            });\n\n            nodeToAdd.push(\n              SceneHelper.addModelToScene(this.scene.id.get(), bimFile.id.get())\n            );\n          }\n        }\n        Promise.all(nodeToRemove).then(() => {\n          Promise.all(nodeToAdd).then(() => {\n            SpinalGraphService.modifyNode(this.scene.id.get(), info);\n          });\n        });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.scene-manager {\n  overflow: hidden;\n}\n\n.application--wrap * {\n}\n\n.scene-manager-vue {\n  height: calc(100% - 20px);\n  width: 100%;\n  overflow: hidden;\n}\n\n.scene-manager-vue * {\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n}\n\n.associated-model {\n  padding: 10px;\n  margin: 10px;\n  border: 1px solid rgba(128, 128, 128, 0.7);\n}\n\n.associated-model-item {\n  text-align: start;\n  border: 1px solid rgba(128, 128, 128, 0.64);\n  margin: 8px;\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  align-content: center;\n}\n\n.open-bim-file-selector-fab {\n  position: absolute;\n  bottom: 10px;\n  right: 0px;\n}\n\n.bim-file-selector {\n  border: 1px solid rgba(128, 128, 128, 0.64);\n  margin: 10px;\n  position: relative;\n}\n\n.bim-file-selector-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.bim-file-selector-item {\n  display: flex;\n  margin: 8px;\n  padding: 4px;\n  border: 1px solid rgba(128, 128, 128, 0.64);\n  align-content: center;\n  align-items: center;\n}\n\n.bim-file-selector-closer {\n}\n\n.bim-file-selector-body {\n  margin: 8px;\n}\n\nul {\n  list-style: none;\n  padding: unset;\n}\n\n.associated-model-item-name {\n  width: 80%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  margin: 0;\n}\n</style>","export function filterDbid (m, attributeName, attributeVal){\n  const fun = `function userFunction(pdb){\n  const res = [];\n  let attrNameId = -1;\n  \n  pdb.enumAttributes( (i, attrDef, attrRaw) => {\n    let name = attrDef.name;\n    \n    if (name.toLowerCase() === \\\"${attributeName.toLowerCase()}\\\") {\n      attrNameId = i;\n      return true;\n    }\n  });\n  \n  pdb.enumObjects( (dbId) => {\n    pdb.enumObjectProperties(dbId, (attrId, valId) => {\n      if (attrId === attrNameId)\n      {\n        let value = pdb.getAttrValue(attrId, valId);\n        \n        if (value === \\\"${attributeVal}\\\") {\n          res.push(dbId)\n        }\n        \n        return true;\n      }\n    })\n  });\n  \n  return {dbIds: res, attrId: attrNameId };\n}\n`;\n  return m.getPropertyDb().executeUserFunction(fun);\n}\n\n\n\nexport function getAttributeName(m){\n  const fun = `function userFunction(pdb){\n  const res = [];\n  let attrNameId = -1;\n  \n  pdb.enumAttributes( (i, attrDef, attrRaw) => {\n    let name = attrDef.name;\n    console.log(attrDef.name)\n    res.push(name)\n  });\n  \n  return res;\n}\n`;\n  \n  \n  return m.getPropertyDb().executeUserFunction(fun);\n}","<template>\n    <v-container grid-list-md text-xs-center>\n        <v-layout align-center justify-space-around row>\n            <v-flex>\n                <v-autocomplete\n                        :reverse=\"true\"\n                        :dark=\"true\"\n                        id=\"autocomplete\"\n                        :attach=\"container\"\n                        v-model=\"model\"\n                        :items=\"attributesName\"\n                        label=\"Attribute name\"\n                        persistent-hint\n                        prepend-icon=\"mdi-city\"\n                />\n            </v-flex>\n\n            <v-flex>\n                <v-text-field\n                        dark\n                        input=\"attributeName\"\n                        @change=\"onValueChange\"\n                        label=\"Value\"\n                />\n            </v-flex>\n        </v-layout>\n    </v-container>\n\n</template>\n\n<script>\n  export default {\n    name: \"SelectAttribute\",\n    props: {\n      attributesName: {\n        type: Array,\n        required: true\n      },\n      container: {\n        type: Element,\n        required: true\n      },\n\n    },\n    data: function () {\n      return {\n        attributeName: \"\",\n        model: null,\n      }\n    },\n\n    methods: {\n      onValueChange( e ) {\n        this.$emit( 'value-change', {value: e, attribute: this.model} );\n      }\n\n    },\n    watch: {\n      model: function ( value ) {\n        this.$emit( 'attribute-selected', value );\n        console.log( value )\n      }\n    },\n\n  }\n</script>\n\n<style scoped>\n\n</style>","import { SpinalContextApp } from 'spinal-env-viewer-context-menu-service';\nimport { SCENE_TYPE } from \"../constants\";\n\n\nconst { spinalPanelManagerService } = require( \"spinal-env-viewer-panel-manager-service\" );\n\nexport class ButtonLoadModel extends SpinalContextApp {\n  \n  constructor() {\n    super( 'Load model', 'Load model', {\n      icon: 'get_app',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    } );\n    \n    this.action = this.openPanel.bind( this );\n  }\n  \n  isShown( option ) {\n    //Todo create specific service\n    if (option.selectedNode.type.get() === 'BimFile')\n      return Promise.resolve( true );\n    return Promise.resolve( -1 );\n  }\n  \n  openPanel(option) {\n    window.spinal.SpinalForgeViewer.loadModelFromBimFile(option.selectedNode)\n  }\n}"],"names":["SpinalContext","SpinalGraphService","SpinalNode","PART_RELATION_NAME","PART_RELATION_TYPE","SCENE_RELATION_NAME","SCENE_RELATION_TYPE","SCENE_TYPE","SceneHelper","initialize","initialized","Promise","resolve","reject","context","getContext","contextName","addContext","type","then","contextId","info","id","get","console","log","catch","createScene","name","description","autoLoad","sceneId","createNode","undefined","addChildInContext","addModelToScene","bimFileId","getBimFilesFromScene","getChildren","getSceneFromNode","nodeId","addSceneToNode"],"version":3,"file":"spinal-env-viewer-plugin-scene.df9e561d.js.map"}