{"mappings":"A;;;;;AAwCA;;;;A;;;;A;;;;;;A;;;;A;;;;A;;;;;A;;;;;;;;A;;;;;A;;;;;;;;;A;;;;;;;A;;;;A;;;;;;A;;;;A;;;;;;;A;;;;;;;A;;;;;A;;;;A;;;;;;;A","sources":["node_modules/spinal-env-viewer-plugin-filter/vue/dialogs/components/infoComponent.vue","node_modules/spinal-env-viewer-plugin-filter/vue/dialogs/advancedParamsDialog.vue","node_modules/spinal-env-viewer-plugin-filter/vue/panels/components/filterForm.vue","node_modules/spinal-env-viewer-plugin-filter/vue/panels/components/tableComponent.vue","node_modules/spinal-env-viewer-plugin-filter/vue/panels/components/referentialSelection.vue","node_modules/spinal-env-viewer-plugin-filter/vue/panels/components/launchSearch.vue","node_modules/spinal-env-viewer-plugin-filter/vue/panels/filterPanel.vue"],"sourcesContent":["<template>\n  <md-menu-content style=\"z-index: 9999 !important\">\n\n    <md-menu-item class=\"information\"\n                  v-for=\"(info,index) in infos\"\n                  :key=\"index\">\n      <!-- <md-avatar class=\"md-avatar-icon\">{{info.id}}</md-avatar> -->\n\n      <div class=\"md-list-item-text\">\n        <span class=\"title\">{{info.title}}</span>\n        <span class=\"description\">{{info.description}}</span>\n      </div>\n    </md-menu-item>\n\n  </md-menu-content>\n</template>\n\n<script>\nimport Infos from \"../info\";\n\nexport default {\n  name: \"infoComponent\",\n  data() {\n    this.infos = Infos;\n    return {};\n  }\n};\n</script>\n\n<style scoped>\n/* ._info {\n  height: 100px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n} */\n\n.information .title {\n  font-style: oblique !important;\n  font-weight: bold !important;\n}\n\n.information .description {\n  color: gray !important;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"title\">\n      <div> ADVANCED FILTER </div>\n\n      <md-menu>\n        <md-button class=\"md-icon-button\" md-menu-trigger>\n          <md-icon>info</md-icon>\n        </md-button>\n\n        <info-component></info-component>\n      </md-menu>\n    </md-dialog-title>\n\n    <md-dialog-content\n      v-if=\"nameConfig && valueConfig\"\n      class=\"_dialogContent md-layout\"\n    >\n      <!--\n        ////////////////////////////////////////////////////////////////////////////\n        //                              Name                                      //\n        ////////////////////////////////////////////////////////////////////////////\n       -->\n      <md-list class=\"_leftSide md-layout-item md-size-50\">\n        <md-subheader style=\"justify-content: center\">Name</md-subheader>\n\n        <choose-option @change=\"onName\" :choosed=\"nameConfig\"> </choose-option>\n\n        <advanced-option\n          v-if=\"nameConfig === '3'\"\n          :regexValue=\"nameRegex\"\n          :flagsValue=\"nameFlag\"\n          :delimiterValue=\"nameDelimiter\"\n        ></advanced-option>\n        <!-- @regex=\"changeNameRegex\"\n          @flags=\"changeNameFlag\"\n          @delimiter=\"changeNameDelimiter\" -->\n      </md-list>\n\n      <!--\n        ////////////////////////////////////////////////////////////////////////////\n        //                              Value                                     //\n        ////////////////////////////////////////////////////////////////////////////\n       -->\n      <md-list class=\"md-layout-item md-size-50\">\n        <md-subheader style=\"justify-content: center\">Value</md-subheader>\n\n        <choose-option @change=\"onValue\" :choosed=\"valueConfig\">\n        </choose-option>\n\n        <advanced-option\n          v-if=\"valueConfig === '3'\"\n          :regexValue=\"valueRegex\"\n          :flagsValue=\"valueFlag\"\n          :delimiterValue=\"valueDelimiter\"\n          @regex=\"changeValueRegex\"\n          @flags=\"changeValueFlag\"\n          @delimiter=\"changeValueDelimiter\"\n        ></advanced-option>\n      </md-list>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n      <md-button class=\"md-primary\" @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport AdvancedOption from './components/filterAdvancedOption.vue';\nimport ChooseOption from './components/chooseOption.vue';\nimport InfoComponent from './components/infoComponent.vue';\n\nexport default {\n  name: 'AdvancedParamsDialog',\n  props: ['onFinised'],\n  components: {\n    'advanced-option': AdvancedOption,\n    'choose-option': ChooseOption,\n    'info-component': InfoComponent,\n  },\n  data() {\n    this.callback;\n    this.item;\n    return {\n      showDialog: true,\n\n      //Name\n      nameConfig: null,\n      nameDelimiter: '/',\n      nameRegex: null,\n      nameFlag: [],\n\n      //Value\n      valueConfig: null,\n      valueDelimiter: '/',\n      valueFlag: [],\n      valueRegex: null,\n    };\n  },\n  methods: {\n    opened(option) {\n      this.item = option.params;\n      //Name\n      this.nameConfig = option.params.config.name.option;\n      this.nameRegex = option.params.config.name.regex;\n      this.nameFlag = option.params.config.name.flag;\n      //Value\n      this.valueConfig = option.params.config.value.option;\n      this.valueRegex = option.params.config.value.regex;\n      this.valueFlag = option.params.config.value.flag;\n    },\n    removed(closed) {\n      if (closed) {\n        //Name\n        this.item.config.name.option = this.nameConfig;\n        this.item.config.name.regex = this.nameRegex;\n        this.item.config.name.flag = this.nameFlag\n          ? this.nameFlag.join('')\n          : undefined;\n        //Value\n        this.item.config.value.option = this.valueConfig;\n        this.item.config.value.regex = this.valueRegex;\n        this.item.config.value.flag = this.valueFlag\n          ? this.valueFlag.join('')\n          : undefined;\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised(closeResult);\n      }\n    },\n    onName(value) {\n      this.nameConfig = value;\n      if (this.nameConfig === '1' || this.nameConfig === '2') {\n        this.nameRegex = undefined;\n        this.nameFlag = undefined;\n      }\n    },\n    changeNameRegex(value) {\n      this.nameRegex = value;\n    },\n    changeNameFlag(value) {\n      this.nameFlag = value;\n    },\n    changeNameDelimiter(value) {\n      this.nameDelimiter = value;\n    },\n    onValue(value) {\n      this.valueConfig = value;\n      if (this.valueConfig === '1' || this.valueConfig === '2') {\n        this.valueRegex = undefined;\n        this.valueFlag = undefined;\n      }\n    },\n    changeValueRegex(value) {\n      this.valueRegex = value;\n    },\n    changeValueFlag(value) {\n      this.valueFlag = value;\n    },\n    changeValueDelimiter(value) {\n      this.valueDelimiter = value;\n    },\n  },\n};\n</script>\n\n<style scoped>\n._dialogContent {\n  width: 600px;\n}\n\n.title {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n._leftSide {\n  border-right: 1px solid;\n}\n\n.subTitle {\n  text-align: center;\n}\n</style>\n","\n<template>\n  <!-- <div style=\"width : 100%; height : 100%; overflow : hidden\"> -->\n  <div class=\"_container\">\n    <div class=\"header\">\n\n      <md-button class=\"_btn md-dense md-primary\"\n                 @click=\"addProperty\">\n        <md-icon>add</md-icon>\n        ADD PROPERTY\n      </md-button>\n\n      <md-button class=\"_btn md-dense md-primary\"\n                 @click=\"reset\">\n        <md-icon>restore</md-icon>\n        RESET\n      </md-button>\n\n      <!-- <md-button class=\"_btn md-dense md-primary\"\n                 @click=\"filter\">\n        <md-icon>check</md-icon>\n        SEARCH\n      </md-button> -->\n\n    </div>\n\n    <md-content class=\"_content md-scrollbar\">\n\n      <div class=\"_items\"\n           v-for=\"item in data\"\n           :key=\"item.id\">\n\n        <md-field class=\"_mdField\">\n          <label>Name</label>\n\n          <md-input v-model=\"item.name\"\n                    palceholder=\"Name\"\n                    :disabled=\"isDisabled(item,'name')\"></md-input>\n\n          <span class=\"md-helper-text\"\n                v-if=\"isDisabled(item,'name')\">Personalized</span>\n        </md-field>\n\n        <md-field class=\"_mdField\">\n          <label>Value</label>\n\n          <md-input v-model=\"item.value\"\n                    palceholder=\"Value\"\n                    :disabled=\"isDisabled(item,'value')\"></md-input>\n\n          <span class=\"md-helper-text\"\n                v-if=\"isDisabled(item,'value')\">Personalized</span>\n        </md-field>\n\n        <!-- <div class=\"md-layout-item md-size-10\"></div> -->\n\n        <div class=\"_mdField iconButton\">\n\n          <md-button class=\"md-icon-button\"\n                     title=\"config\"\n                     @click=\"advanced(item)\">\n            <md-icon class=\"_icon\">tune</md-icon>\n          </md-button>\n\n          <md-button class=\"md-icon-button\"\n                     title=\"remove\"\n                     v-if=\"item.id !== 1\"\n                     @click=\"deleteItem(item)\">\n            <md-icon class=\"_icon\">clear</md-icon>\n          </md-button>\n        </div>\n\n      </div>\n    </md-content>\n\n  </div>\n\n  <!-- <div class=\"_container\"\n         v-if=\"loaded\">\n      <md-content class=\"content2\"\n                  v-if=\"loaded\">\n        loading...\n      </md-content>\n    </div> -->\n  <!-- </div> -->\n</template>\n\n\n<script>\nexport default {\n  name: \"filterFormComponent\",\n  props: {\n    data: {\n      type: Array,\n      required: true\n    },\n    loaded: {\n      type: Boolean,\n      required: true\n    }\n  },\n  methods: {\n    addProperty() {\n      this.$emit(\"add\");\n    },\n    reset() {\n      this.$emit(\"reset\");\n    },\n    deleteItem(item) {\n      this.$emit(\"delete\", item);\n    },\n    filter() {\n      this.$emit(\"validate\");\n    },\n\n    advanced(item) {\n      this.$emit(\"config\", item);\n    },\n    isDisabled(item, name) {\n      let disabled = item.config[name].option == 3;\n\n      item[name] = disabled ? \"\" : item[name];\n\n      return disabled;\n    }\n  }\n};\n</script>\n\n<style scoped>\n._container {\n  width: 100%;\n  height: 100%;\n}\n\n._container .header {\n  width: 100%;\n  height: calc(10%);\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n._container .header ._btn {\n  padding-right: 10px;\n  border: 1px solid #448aff;\n}\n\n._container ._content {\n  width: calc(100%);\n  height: 150px; /* calc(90% - 15px); */\n  overflow: auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  background-color: transparent;\n  /* overflow-y: auto; */\n}\n\n._container ._content ._items {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n._mdField {\n  margin-right: 15px;\n}\n\n.iconButton {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  /* align-items: center; */\n}\n\n._icon {\n  margin-left: -15px;\n}\n</style>\n","<template>\n\n  <md-table class=\"_tableComponent md-scrollbar\">\n    <md-table-row>\n      <md-table-head md-numeric>dbId</md-table-head>\n      <md-table-head>Name</md-table-head>\n      <md-table-head></md-table-head>\n      <md-table-head></md-table-head>\n    </md-table-row>\n\n    <md-table-row v-for=\"(bim,index) in data\"\n                  :key=\"index\">\n      <md-table-cell md-numeric>{{bim.dbId}}</md-table-cell>\n      <md-table-cell>{{bim.name}}</md-table-cell>\n\n      <md-table-cell>\n        <md-button class=\"md-icon-button md-dense\"\n                   @click=\"seeItem(bim.dbId)\">\n          <md-icon>visibility</md-icon>\n        </md-button>\n      </md-table-cell>\n\n      <md-table-cell>\n        <md-button class=\"md-icon-button md-dense\"\n                   @click=\"deleteItem(bim.dbId)\">\n          <md-icon>clear</md-icon>\n        </md-button>\n      </md-table-cell>\n    </md-table-row>\n\n  </md-table>\n\n</template>\n\n<script>\nexport default {\n  name: \"tableComponent\",\n  props: [\"bimSelected\"],\n  data() {\n    return {\n      data: []\n    };\n  },\n\n  methods: {\n    getObjectsSelectedInfo() {\n      return this.bimSelected.map(el => {\n        const { model, selection } = el;\n        return new Promise(resolve => {\n          model.getBulkProperties(\n            selection,\n            {\n              propFilter: [\"name\"]\n            },\n            dbIds => {\n              return resolve(dbIds);\n            }\n          );\n        });\n      });\n    },\n    seeItem(dbId) {\n      let bimIds = this.bimSelected.filter(el => {\n        return el.selection.indexOf(dbId) !== -1;\n      });\n\n      bimIds.forEach(element => {\n        window.spinal.ForgeViewer.viewer.impl.selector.setSelection(\n          [dbId],\n          element.model\n        );\n      });\n    },\n    deleteItem(dbId) {\n      this.data = this.data.filter(el => el.dbId !== dbId);\n      for (let i = 0; i < this.bimSelected.length; i++) {\n        let index = this.bimSelected[i].selection.indexOf(dbId);\n        if (index !== -1) {\n          this.bimSelected[i].selection.splice(index, 1);\n          console.log(this.bimSelected);\n        }\n      }\n    }\n  },\n  watch: {\n    bimSelected() {\n      console.log(\"update\");\n      if (this.bimSelected) {\n        let values = this.getObjectsSelectedInfo();\n        Promise.all(values).then(dbIds => {\n          dbIds = dbIds.flat();\n          this.data = dbIds;\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n._tableComponent {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: transparent;\n}\n</style>","<template>\n  <div>\n    <md-checkbox v-model=\"config.useAllDbIds\"\n                 @change=\"changeMode\"\n                 class=\"md-primary\">\n      Use whole digital twin\n    </md-checkbox>\n\n    <div v-if=\"!config.useAllDbIds\">\n      <md-button @click=\"addSelection\">\n        <md-icon>add</md-icon>\n        <md-tooltip md-delay=\"300\">Add selection to referential</md-tooltip>\n      </md-button>\n\n      <!-- <md-button @click=\"addCategorySelected\">\n        <md-icon>add</md-icon>\n        Add Category selected\n        <md-tooltip md-delay=\"300\">Add Category selected to referential\n        </md-tooltip>\n      </md-button> -->\n\n      <md-button @click=\"clearReferential\">\n        <md-icon>clear</md-icon>\n        <md-tooltip md-delay=\"300\">Clear referential</md-tooltip>\n      </md-button>\n\n      <md-button @click=\"showReferential\">\n        <md-icon>visibility</md-icon>\n        <md-tooltip md-delay=\"300\">Show referential</md-tooltip>\n      </md-button>\n\n      <div class=\"historySelected\">\n        <table-component :bimSelected=\"config.referential\"></table-component>\n        <!--<p>{{getObjectsSelectedLength()}} objects selected</p>-->\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { bimObjectManagerService } from \"spinal-env-viewer-bim-manager-service\";\nimport TableComponent from \"./tableComponent.vue\";\n// import { getAllLeafDbIds, getLeafDbIds } from \"../js/utilitiesDbIds\";\nexport default {\n  name: \"referentialSelection\",\n  components: {\n    \"table-component\": TableComponent\n  },\n  props: {\n    // update: {\n    //   type: String,\n    //   required: true\n    // },\n    config: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.viewer = window.spinal.ForgeViewer.viewer;\n    this.allDbIds = (() => {\n      try {\n        return this.viewer.getVisibleModels().map(el => {\n          return bimObjectManagerService.getLeafDbIds(el);\n        });\n      } catch (error) {\n        return [bimObjectManagerService.getLeafDbIds(this.viewer.model)];\n      }\n    })();\n\n    return {};\n  },\n  //   watch: {\n  //     update: {\n  //       immediate: true,\n  //       handler() {\n  //         if (this.update != \"opened\") {\n  //           return;\n  //         }\n  //         if (this.config.useAllDbIds) {\n  //           this.config.referential = this.allDbIds.slice();\n  //         }\n  //       }\n  //     }\n  //   },\n  mounted() {\n    this.config.referential = this.allDbIds;\n  },\n  methods: {\n    /**\n     * Updates the referential when the mode changes.\n     */\n    changeMode(newValue) {\n      if (!newValue) {\n        this.clearReferential();\n      } else {\n        this.config.referential = this.allDbIds;\n      }\n      //   this.$emit(\"configChanged\");\n    },\n    /**\n     * Adds the current selection to the referential. Discards all non-leaf dbIds.\n     */\n    addSelection() {\n      if (this.config.useAllDbIds) this.config.referential = [];\n      const aggregateSelection = this.viewer.getAggregateSelection();\n      let referentialCopy = Object.assign([], this.config.referential);\n\n      for (let select of aggregateSelection) {\n        // let leafs = bimObjectManagerService.getLeafDbIds(\n        //   select.model,\n        //   select.selection\n        // );\n\n        let found = referentialCopy.find(el => el.model.id === select.model.id);\n\n        if (found) {\n          found.selection.push(...select.selection);\n        } else {\n          referentialCopy.push(select);\n        }\n      }\n\n      this.config.referential = referentialCopy;\n\n      //   this.config.referential = [...new Set(this.config.referential)];\n      //   this.$emit(\"configChanged\");\n    },\n\n    /**\n     * Empties the referential.\n     */\n    clearReferential() {\n      this.config.referential = [];\n      //   this.$emit(\"configChanged\");\n    },\n    /**\n     * Selects all the dbIds in the referential.\n     */\n    showReferential() {\n      this.config.referential.forEach(el => {\n        this.viewer.impl.selector.setSelection(el.selection, el.model);\n      });\n    },\n    getObjectsSelectedLength() {\n      let length = 0;\n\n      this.config.referential.forEach(el => {\n        length += el.selection.length;\n      });\n\n      return length;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.historySelected {\n  height: 150px;\n  margin-top: 20px;\n  /* margin-left: 30px; */\n  color: green;\n  font-size: 20px;\n}\n</style>","\n<template>\n  <div class=\"_container\">\n\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item md-size-50\">\n        <md-checkbox v-model=\"searchOnBim\"\n                     class=\"md-primary\">Search on Forge Attributes</md-checkbox>\n      </div>\n      <div class=\"md-layout-item md-size-50\">\n        <md-checkbox v-model=\"searchOnSpinalAttributes\"\n                     class=\"md-primary\">Search on spinal Attributes\n        </md-checkbox>\n      </div>\n\n    </div>\n\n    <div class=\"launchBtn md-layout\">\n      <md-button class=\"_btn md-layout-item md-size-100 md-dense md-primary\"\n                 @click=\"filter\">\n        <md-icon>check</md-icon>\n        SEARCH\n      </md-button>\n    </div>\n\n  </div>\n</template>\n\n<script>\n// import flags from \"../../dialogs/flags\";\nexport default {\n  name: \"launchSearchComponent\",\n  props: {\n    data: {\n      type: Array,\n      require: true\n    }\n  },\n  data() {\n    return {\n      searchOnBim: true,\n      searchOnSpinalAttributes: true\n    };\n  },\n  methods: {\n    filter() {\n      let regex = this.data.map(item => {\n        return {\n          nameRegex: this.getRegex(\n            item.name,\n            item.config.name.option,\n            item.config.name.flag,\n            item.config.name.regex\n          ),\n          valueRegex: this.getRegex(\n            item.value,\n            item.config.value.option,\n            item.config.value.flag,\n            item.config.value.regex\n          )\n        };\n      });\n\n      if (this.searchOnBim || this.searchOnSpinalAttributes) {\n        this.$emit(\"filter\", {\n          regex: regex,\n          bimAttributes: this.searchOnBim,\n          spinalAttributes: this.searchOnSpinalAttributes\n        });\n      } else {\n        alert(\"Sorry, you must select at least one element !!\");\n      }\n    },\n    getRegex(value, option, flag = undefined, argRegex = undefined) {\n      let regex;\n\n      if (option === \"3\" || (value && value.trim().length > 0)) {\n        switch (option) {\n          case \"1\":\n            // regex = `/^${value.trim()}$/i`;\n            regex = new RegExp(`^${RegExp.escape(value.trim())}$`, \"i\");\n            break;\n          case \"2\":\n            // regex = `/${value.trim()}/i`;\n            regex = new RegExp(`${RegExp.escape(value.trim())}`, \"i\");\n\n            break;\n          case \"3\":\n            // if (argRegex && flag) {\n            //   regex = new RegExp(argRegex, flag);\n            // } else if (argRegex && typeof flag === \"undefined\") {\n            //   regex = new RegExp(argRegex);\n            // }\n            regex = new RegExp(argRegex, flag);\n            break;\n        }\n      }\n\n      return regex;\n    }\n  }\n};\n</script>\n\n<style scoped>\n._container ._btn {\n  padding-right: 10px;\n  border: 1px solid #448aff;\n}\n\n._container .launchBtn {\n  margin-top: 30px;\n}\n</style>\n","<template>\n  <div style=\"height : 100%\">\n    <md-steppers id=\"steppers\"\n                 style=\"width : 100%; height : 100%; overflow : hidden\"\n                 md-vertical\n                 :md-active-step.sync=\"activeStep\"\n                 v-if=\"!loaded\">\n      <md-step id=\"ref\"\n               md-label=\"Choose referential\">\n        <referential-selection :config=\"config\"></referential-selection>\n      </md-step>\n\n      <md-step id=\"layout\"\n               md-label=\"add proprieties\">\n\n        <filter-form-component :data=\"data\"\n                               :loaded=\"loaded\"\n                               @add=\"addProperty\"\n                               @reset=\"reset\"\n                               @delete=\"deleteItem\"\n                               @config=\"advanced\"></filter-form-component>\n\n      </md-step>\n\n      <md-step id=\"launch\"\n               md-label=\"Launch the Search\">\n        <launch-search-component :data=\"data\"\n                                 @filter=\"filter\"></launch-search-component>\n      </md-step>\n\n    </md-steppers>\n\n    <div v-if=\"loaded\"\n         class=\"isLoaded\">\n      <md-progress-spinner class=\"spiner\"\n                           md-mode=\"indeterminate\"></md-progress-spinner>\n    </div>\n\n  </div>\n</template>\n\n\n\n<script>\nimport utilities from \"../../js/utilities\";\n\nimport { bimObjectManagerService } from \"spinal-env-viewer-bim-manager-service\";\n\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nimport filterFormComponent from \"./components/filterForm.vue\";\nimport referentialSelection from \"./components/referentialSelection.vue\";\nimport launchSearchComponent from \"./components/launchSearch.vue\";\n\nconst PROPERTY_MODEL = {\n  id: 1,\n  name: \"\",\n  value: \"\",\n  required: false,\n  config: {\n    name: {\n      option: \"1\",\n      regex: undefined,\n      flag: []\n    },\n    value: {\n      option: \"1\",\n      regex: undefined,\n      flag: []\n    }\n  }\n};\n\nexport default {\n  name: \"filterPanel\",\n  components: {\n    \"filter-form-component\": filterFormComponent,\n    \"referential-selection\": referentialSelection,\n    \"launch-search-component\": launchSearchComponent\n  },\n  data() {\n    return {\n      data: [Object.assign({}, PROPERTY_MODEL)],\n      loaded: false,\n      activeStep: \"\",\n      config: { useAllDbIds: true, referential: [] }\n    };\n  },\n  methods: {\n    opened() {\n      this.activeStep = \"ref\";\n    },\n\n    addProperty() {\n      let obj = {\n        id: 1,\n        name: \"\",\n        value: \"\",\n        required: false,\n        config: {\n          name: {\n            option: \"1\",\n            regex: undefined,\n            flag: []\n          },\n          value: {\n            option: \"1\",\n            regex: undefined,\n            flag: []\n          }\n        }\n      };\n\n      obj.id = this.data[this.data.length - 1].id + 1;\n\n      this.data.push(obj);\n    },\n    reset() {\n      this.data = [PROPERTY_MODEL];\n    },\n    deleteItem(item) {\n      this.data = this.data.filter(el => el.id !== item.id);\n    },\n\n    advanced(item) {\n      spinalPanelManagerService.openPanel(\"advancedParamsDialog\", {\n        params: item\n      });\n    },\n\n    getBimObjectNotValid(model, bimValidated) {\n      let found = this.config.referential.find(el => {\n        return el.model.id === model.id;\n      });\n\n      if (typeof found !== \"undefined\") {\n        return found.selection.filter(el => {\n          return bimValidated.indexOf(el) === -1;\n        });\n      }\n\n      return [];\n    },\n\n    checkOnSpinalAttributes(activated, regExp) {\n      let leaftBims = this.config.referential.map(select => {\n        return bimObjectManagerService.getLeafDbIds(\n          select.model,\n          select.selection\n        );\n      });\n\n      if (!activated) return Promise.resolve(leaftBims);\n\n      let promises = utilities.getValidatedBimOnSpinalAttribut(\n        leaftBims,\n        regExp\n      );\n\n      return Promise.all(promises).then(res => {\n        return res.map(el => {\n          el[\"selection\"] = this.getBimObjectNotValid(el.model, el.valid);\n          return el;\n        });\n      });\n    },\n\n    checkOnBimAttributes(activated, bimValidated, regExp) {\n      if (!activated) return Promise.resolve(bimValidated);\n\n      return bimObjectManagerService\n        .getBimObjectsValidated(this.config.referential, regExp)\n        .then(res => {\n          return res.map(el => {\n            let found = bimValidated.find(el2 => {\n              return el.model.id === el2.model.id;\n            });\n\n            return {\n              model: el.model,\n              ids:\n                typeof found !== \"undefined\"\n                  ? [...el.properties.map(el2 => el2.dbId), ...found.ids]\n                  : el.properties.map(el2 => el2.dbId)\n            };\n          });\n        });\n    },\n\n    filter(params) {\n      let regExp = params.regex.filter(el => {\n        return typeof el.nameRegex !== \"undefined\";\n      });\n\n      if (regExp.length > 0) {\n        this.loaded = true;\n        // // let bimValidated = this.config.referential.map(el => {\n        // //   return {\n        // //     model: el.model,\n        // //     ids: []\n        // //   };\n        // // });\n\n        this.checkOnSpinalAttributes(params.spinalAttributes, regExp)\n          .then(values => {\n            let bimValidated = values.map(el => {\n              return { model: el.model, ids: el.valid ? [...el.valid] : [] };\n            });\n\n            this.checkOnBimAttributes(\n              params.bimAttributes,\n              bimValidated,\n              regExp\n            )\n              .then(res => {\n                try {\n                  window.spinal.ForgeViewer.viewer.impl.selector.setAggregateSelection(\n                    res\n                  );\n                } catch (err) {\n                  let ids = [];\n                  res.forEach(el => {\n                    ids = [...el.ids];\n                  });\n\n                  window.spinal.ForgeViewer.viewer.select(ids);\n                }\n\n                this.loaded = false;\n              })\n              .catch(err => {\n                console.error(err);\n                this.loaded = false;\n              });\n          })\n          .catch(err => {\n            console.error(err);\n            this.loaded = false;\n          });\n\n        // this.loaded = true;\n        /*\n        bimObjectManagerService\n          .getBimObjectsValidated(this.config.referential, regExp)\n          .then(res => {\n            res = res.map(el => {\n              return {\n                model: el.model,\n                ids: el.properties.map(el2 => el2.dbId)\n              };\n            });\n\n            try {\n              window.spinal.ForgeViewer.viewer.impl.selector.setAggregateSelection(\n                res\n              );\n            } catch (err) {\n              let ids = [];\n              res.forEach(el => {\n                ids = [...el.ids];\n              });\n\n              window.spinal.ForgeViewer.viewer.select(ids);\n            }\n\n            this.loaded = false;\n          });\n\n\n\n      */\n      } else {\n        alert(\"Please add a valid filter\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.isLoaded {\n  display: flex;\n  margin: auto;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.spiner {\n  position: absolute;\n  top: calc(50% - 30px);\n  right: calc(50% - 30px);\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-filter.f9ae6fb4.css.map"}