{"mappingssources":["node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/discoverTable.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/broadcastTemplate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/inputData.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/unicastTemplate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/discoverNetworkPanel.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/monitoring/devicemonitor.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/manageDevicesPanel.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/monitorConnectorPanel.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/addOrganBtn.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/addOrgan.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/links/linkToGroupTemplate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/links/LinkComponent.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/linkToProfilDialog.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/unLinkToProfilDialog.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/linkToBimAutomate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/getBacnetValue.vue"],"sourcesContent":["<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"devices_table\"\n       v-if=\"show === STATES.discovered\">\n    <div class=\"header\">\n      <div>{{selected.length}} selected / {{devices.length}} found</div>\n      <!-- <div>{{devices.length}} controller(s) found</div> -->\n    </div>\n\n    <md-table class=\"tablecontent\"\n              v-model=\"devices\"\n              @md-selected=\"onSelect\">\n      <!-- md-fixed-header -->\n\n      <md-table-row slot=\"md-table-row\"\n                    slot-scope=\"{ item }\"\n                    md-selectable=\"multiple\"\n                    md-auto-select>\n        <md-table-cell md-label=\"Name\"\n                       md-sort-by=\"name\">{{ item.name }}</md-table-cell>\n\n        <md-table-cell md-label=\"deviceId\">{{ item.deviceId }}</md-table-cell>\n\n        <md-table-cell md-label=\"address\">{{ item.address }}</md-table-cell>\n\n        <!-- <md-table-cell\n            class=\"configureMonitoring\"\n            md-label=\"configure Monitoring\"\n         >\n            <md-button\n               class=\"md-icon-button md-primary\"\n               v-tooltip=\"'Configure Monitoring'\"\n            >\n               <md-icon>settings</md-icon>\n            </md-button>\n         </md-table-cell> -->\n\n      </md-table-row>\n    </md-table>\n  </div>\n\n  <div class=\"discover_container\"\n       v-else>\n\n    <div class=\"description\">{{label}}</div>\n    <div class=\"buttons\">\n      <md-button class=\"md-primary md-raised\"\n                 v-if=\"show === STATES.reseted\"\n                 @click=\"discover\"\n                 :disabled=\"disabledBtn()\">Discover</md-button>\n\n      <md-button class=\"md-primary md-raised\"\n                 v-else-if=\"show === STATES.timeout\"\n                 @click=\"discover\">Retry</md-button>\n\n      <div class=\"loading\"\n           v-else-if=\"show === STATES.discovering\">\n        <div>\n          <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n        </div>\n        <div>\n          <md-button class=\"md-accent md-raised\"\n                     @click=\"stop\">Stop</md-button>\n        </div>\n\n      </div>\n    </div>\n\n  </div>\n</template>\n<script>\nimport { STATES } from \"../../js/stateEnum\";\n\nexport default {\n  name: \"discoverTable\",\n  props: {\n    devices: {},\n    state: {},\n    selected: {},\n    network: {},\n  },\n  data() {\n    this.STATES = STATES;\n    return {\n      label: \"Discover network to find devices\",\n      show: STATES.reseted,\n    };\n  },\n  methods: {\n    disabledBtn() {\n      if (this.network.name.trim().length === 0) return true;\n      if (this.network.useBroadcast) {\n        if (this.network.address.length === 0) return true;\n        if (this.network.port.length === 0) return true;\n      } else {\n        if (this.network.ips.length === 0) return true;\n      }\n\n      return false;\n    },\n\n    onSelect(items) {\n      this.$emit(\"select\", items);\n    },\n\n    discover() {\n      this.$emit(\"discover\");\n    },\n\n    stop() {\n      this.$emit(\"stop\");\n    },\n  },\n  watch: {\n    state() {\n      this.show = this.state;\n      switch (this.state) {\n        case STATES.reseted:\n          this.label = \"Discover network to find devices\";\n          break;\n        case STATES.discovering:\n          this.label = \"Discovering\";\n          break;\n        case STATES.timeout:\n          this.label = \"Timeout, no device found !\";\n          break;\n        case STATES.error:\n          this.label = \"oups !\";\n          break;\n        default:\n          break;\n      }\n\n      // this.$forceUpdate();\n    },\n    // \"network.useBroadcast\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.address\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.port\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.name\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.ips\": function () {\n    //    this.disabledBtn();\n    // },\n  },\n};\n</script>\n\n<style scoped>\n.discover_container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.discover_container .loading {\n  text-align: center;\n  /* display: flex;\n   flex-direction: column; */\n}\n\n.discover_container .devices_table {\n  width: 98%;\n  height: 100%;\n  margin: auto;\n  overflow: hidden;\n}\n\n.discover_container .devices_table .header {\n  width: 99%;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.4em;\n  border: 1px dashed grey;\n}\n\n.discover_container .devices_table .tablecontent {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n</style>\n\n<style>\n/* .discover_container .devices_table .md-table.md-theme-default .md-table-content,\n.md-table.md-theme-default .md-table-alternate-header .md-table table {\n   width: 100%;\n   height: 100%;\n} */\n\n.configureMonitoring .md-button .md-ripple {\n  padding: 0;\n}\n</style>","<template>\n   <div class=\"broadcast_container\">\n      <div>\n         <md-field class=\"contextInput\">\n            <label>Network Name</label>\n            <md-input v-model=\"network.name\"></md-input>\n         </md-field>\n      </div>\n\n      <div>\n         <md-field class=\"contextInput\">\n            <label>broadcast network IP address</label>\n            <md-input v-model=\"network.address\"></md-input>\n            <span class=\"md-helper-text\">\n               To use the default(255.255.255.255) leave this field empty\n            </span>\n         </md-field>\n      </div>\n\n      <div>\n         <md-field class=\"contextInput\">\n            <label>broadcast network port</label>\n            <md-input v-model=\"network.port\"></md-input>\n            <span class=\"md-helper-text\">\n               To use the default port (47808) leave this field empty\n            </span>\n         </md-field>\n      </div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"broadcastTemplate\",\n   props: { network: {} },\n   data() {\n      return {};\n   },\n};\n</script>\n\n<style scoped>\n.broadcast_container {\n   width: 100%;\n   height: 100%;\n}\n\n.broadcast_container .contextInput {\n   min-height: unset;\n}\n</style>\n","<template>\n   <div class=\"input_container\">\n      <div class=\"input\">\n         <md-field class=\"contextInput\">\n            <label>Address</label>\n            <md-input v-model=\"item.address\"></md-input>\n         </md-field>\n      </div>\n\n      <div class=\"input\">\n         <md-field class=\"contextInput\">\n            <label>Device ID</label>\n            <md-input v-model=\"item.deviceId\"></md-input>\n         </md-field>\n      </div>\n\n      <div class=\"remove\">\n         <md-button\n            v-if=\"item.id\"\n            class=\"md-icon-button md-accent\"\n            v-tooltip=\"'remove'\"\n            @click=\"removeItem\"\n         >\n            <md-icon>remove_circle_outline</md-icon>\n         </md-button>\n      </div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"inputDataTemplate\",\n   props: { item: {} },\n   data() {\n      return {};\n   },\n   methods: {\n      removeItem() {\n         this.$emit(\"remove\", this.item.id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.input_container {\n   width: 100%;\n   /* height: 100%; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n}\n\n.input_container .input {\n   width: 40%;\n}\n\n.input_container .remove {\n   width: 10%;\n}\n\n.input_container .input .contextInput {\n   min-height: unset;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"unicast_container\"\n       v-if=\"!isLoading\">\n    <md-field class=\"contextInput\">\n      <label>Network Name</label>\n      <md-input v-model=\"network.name\"></md-input>\n    </md-field>\n\n    <div class=\"header\">\n      <div class=\"button_div addRow\"\n           @click=\"addRow\">add row</div>\n\n      <div class=\"button_div resetRow\"\n           @click=\"reset\">reset</div>\n\n      <div class=\"button_div upload_div\"\n           @click=\"uploadFile\">\n        click to upload file\n      </div>\n    </div>\n\n    <md-content class=\"content md-scrollbar\">\n      <input-data-template v-for=\"item in network.ips\"\n                           :key=\"item.id\"\n                           :item=\"item\"\n                           @remove=\"removeItem\"></input-data-template>\n    </md-content>\n  </div>\n\n  <div class=\"loading\"\n       v-else>\n    <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n  </div>\n</template>\n\n<script>\nimport InputDataTemplate from \"./inputData.vue\";\nimport spinalExcelManager from \"spinal-env-viewer-plugin-excel-manager-service\";\n\nexport default {\n  name: \"UnicastTemplate\",\n  props: { network: {} },\n  components: {\n    \"input-data-template\": InputDataTemplate,\n  },\n  data() {\n    return {\n      isLoading: false,\n    };\n  },\n  methods: {\n    addRow() {\n      const id = this.network.ips.length;\n      this.network.ips = [\n        ...this.network.ips,\n        { id: id, address: \"\", deviceId: \"\" },\n      ];\n    },\n\n    reset() {\n      this.network.ips = [{ id: 0, address: \"\", deviceId: \"\" }];\n    },\n\n    removeItem(id) {\n      this.network.ips = this.network.ips.filter((el) => el.id !== id);\n    },\n\n    uploadFile() {\n      let input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept =\n        \".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n      input.click();\n\n      input.addEventListener(\n        \"change\",\n        async (event) => {\n          this.isLoading = true;\n\n          try {\n            const file = event.target.files[0];\n            const dataJson = await spinalExcelManager.convertExcelToJson(file);\n            const ips = [];\n\n            for (const key in dataJson) {\n              if (Object.hasOwnProperty.call(dataJson, key)) {\n                const data = dataJson[key].map((element) => {\n                  return {\n                    address: this.getElementAddress(element),\n                    deviceId: this.getElementDeviceId(element),\n                  };\n                });\n                ips.push(...data);\n              }\n            }\n            this.network.ips = ips.map((el, index) => {\n              el.id = index;\n              return el;\n            });\n            this.isLoading = false;\n          } catch (error) {\n            this.isLoading = false;\n          }\n        },\n        false\n      );\n    },\n\n    getElementAddress(element) {\n      const address = \"address\";\n      const key = Object.keys(element).find((el) => {\n        return el.toLowerCase() === address;\n      });\n\n      if (key) return element[key];\n      // for (const key of list) {\n      //    if (element[key]) return element[key];\n      // }\n    },\n\n    getElementDeviceId(element) {\n      const deviceId = \"deviceid\";\n      const key = Object.keys(element).find((el) => {\n        return el.replace(\" \", \"\").toLowerCase() === deviceId;\n      });\n\n      if (key) return element[key];\n\n      // const list = [\n      //    \"Device ID\",\n      //    \"DeviceID\",\n      //    \"deviceID\",\n      //    \"device ID\",\n      //    \"deviceId\",\n      //    \"device Id\",\n      // ];\n      // for (const key of list) {\n      //    if (element[key]) return element[key];\n      // }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.unicast_container {\n  width: 100%;\n  height: 100%;\n  margin: auto;\n}\n\n.unicast_container .header {\n  width: 99%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.unicast_container .header .button_div {\n  /* width: 50%; */\n  flex: 0 1 32%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-transform: capitalize;\n  border: 1px solid grey;\n  border-radius: 10px;\n}\n\n.unicast_container .header .button_div.resetRow {\n  color: #ff5252;\n  border: 1px solid #ff5252;\n}\n\n.unicast_container .header .button_div.addRow {\n  color: #448aff;\n  border: 1px solid #448aff;\n}\n\n.unicast_container .header .button_div.upload_div {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px dashed grey;\n}\n\n.unicast_container .header .button_div:hover {\n  cursor: pointer;\n}\n\n.unicast_container .content {\n  width: 100%;\n  height: calc(100% - 100px);\n  overflow: hidden;\n  overflow-y: auto;\n}\n\n.unicast_container .contextInput {\n  min-height: unset;\n}\n</style>\n\n<style>\n.unicast_container .content .md-button .md-ripple {\n  padding: unset;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"discover_container\">\n    <!-- <md-field>\n         <label>Network Name</label>\n         <md-input v-model=\"network.name\"></md-input>\n      </md-field>\n\n      <md-button @click=\"discover\">Discover</md-button> -->\n    <md-steppers md-vertical>\n      <md-step id=\"first\"\n               md-label=\"Network name\"\n               md-description=\"Network name\">\n        <div class=\"stepContainer\">\n          <div class=\"header\">\n            <div class=\"radio\"\n                 :class=\"{ isActive: network.useBroadcast }\">\n              <md-radio class=\"md-primary\"\n                        v-model=\"network.useBroadcast\"\n                        :value=\"true\">Broadcast</md-radio>\n            </div>\n\n            <div class=\"radio\"\n                 :class=\"{ isActive: !network.useBroadcast }\">\n              <md-radio class=\"md-primary\"\n                        v-model=\"network.useBroadcast\"\n                        :value=\"false\">Unicast</md-radio>\n            </div>\n          </div>\n\n          <div class=\"content\">\n            <broadcast-template v-if=\"network.useBroadcast\"\n                                :network=\"network\"></broadcast-template>\n\n            <unicast-template v-else\n                              :network=\"network\"></unicast-template>\n          </div>\n        </div>\n      </md-step>\n\n      <md-step id=\"second\"\n               md-label=\"Discover network\"\n               md-description=\"Discover\">\n        <div class=\"stepContainer\">\n          <discover-table :devices=\"devices\"\n                          :state=\"state\"\n                          :selected=\"selected\"\n                          :network=\"network\"\n                          @discover=\"discover\"\n                          @select=\"selectDevice\"\n                          @stop=\"stopDiscovering\"></discover-table>\n        </div>\n\n        <!-- <md-button @click=\"discover\">Discover</md-button>\n             -->\n      </md-step>\n\n      <md-step id=\"third\"\n               md-label=\"Create network\"\n               md-description=\"Create\">\n        <div class=\"stepContainer\">\n          <div class=\"loading\">\n            <md-progress-spinner v-if=\"state === STATES.creating\"\n                                 md-mode=\"indeterminate\"></md-progress-spinner>\n\n            <md-icon v-else-if=\"state === STATES.created\"\n                     class=\"md-size-5x\">check</md-icon>\n\n            <md-button v-else\n                       :disabled=\"selected.length === 0\"\n                       @click=\"createNodes\">Create Network</md-button>\n          </div>\n        </div>\n      </md-step>\n    </md-steppers>\n  </div>\n</template>\n\n<script>\nimport { STATES, SpinalDisoverModel } from \"spinal-model-bacnet\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport { NETWORK_TYPE } from \"../../js/constants\";\nimport discoverTable from \"../components/discoverTable.vue\";\n// import { STATES } from \"../../js/stateEnum\";\n\n// import { SpinalDisoverModel } from \"../../model/SpinalDiscoverModel\";\n\nimport BroadcastTemplate from \"../components/broadcastTemplate.vue\";\nimport UnicastTemplate from \"../components/unicastTemplate.vue\";\n\nexport default {\n  name: \"discoverNetworkPanel\",\n  components: {\n    \"discover-table\": discoverTable,\n    \"broadcast-template\": BroadcastTemplate,\n    \"unicast-template\": UnicastTemplate,\n  },\n  data() {\n    this.STATES = STATES;\n\n    this.spinalDiscover;\n    this.context;\n    this.graph;\n    this.organ;\n    this.devicesBindProcess;\n    return {\n      state: STATES.reseted,\n      devices: [],\n      selected: [],\n      network: {\n        useBroadcast: true,\n        address: \"255.255.255.255\",\n        port: 47808,\n        name: \"\",\n        type: NETWORK_TYPE,\n        ips: [{ id: 0, address: \"\", deviceId: \"\" }],\n      },\n    };\n  },\n  methods: {\n    async opened(params) {\n      this.graph = params.graph;\n      this.context = params.context.get();\n      this.organ = await this.getOrganModel(params.selectedNode.id.get());\n\n      if (typeof this.spinalDiscover !== \"undefined\") {\n        this.spinalDiscover = undefined;\n        this.state = STATES.reseted;\n      }\n    },\n\n    closed() {},\n\n    async discover() {\n      if (typeof this.spinalDiscover === \"undefined\") {\n        this.spinalDiscover = new SpinalDisoverModel(\n          this.graph,\n          this.context,\n          this.network,\n          this.organ\n        );\n\n        // console.log(this.spinalDiscover);\n\n        await this.spinalDiscover.addToGraph();\n      }\n\n      this.spinalDiscover.setDiscoveringMode();\n      this.getDevicesFound();\n    },\n\n    createNodes() {\n      console.log(\"creating...\");\n      this.spinalDiscover.devices.set(this.selected);\n      // this.spinalDiscover.state.set(STATES.creating);\n      this.spinalDiscover.setCreatingMode();\n    },\n\n    getDevicesFound() {\n      this.devicesBindProcess = this.spinalDiscover.state.bind(() => {\n        console.log(this.spinalDiscover.state.get());\n        this.state = this.spinalDiscover.state.get();\n\n        if (this.state === STATES.discovered) {\n          this.devices = this.spinalDiscover.devices.get();\n        } else if (this.state === STATES.created) {\n          this.spinalDiscover = undefined;\n          // this.state = STATES.reseted;\n        }\n\n        // switch (this.spinalDiscover.state.get()) {\n        //    case STATES.discovered:\n        //       this.state = STATES.discovered;\n        //       this.devices = this.spinalDiscover.devices.get();\n        //       break;\n        //    case STATES.timeout:\n        //       this.state = STATES.timeout;\n        //       break;\n        //    case STATES.discovering:\n        //       this.state = STATES.discovering;\n        //       break;\n        //    case STATES.creating:\n        //       this.state = STATES.creating;\n        //       break;\n        //    case STATES.created:\n        //       this.state = STATES.created;\n        //       break;\n        //    case STATES.error:\n        //       this.state = STATES.error;\n        //    case STATES.reseted:\n        //       this.state = STATES.reseted;\n        //       break;\n\n        //    default:\n        //       break;\n        // }\n        // // this.devices = this.graph.info.discover.devices.get();\n      });\n    },\n\n    getOrganModel(nodeId) {\n      const realNode = SpinalGraphService.getRealNode(nodeId);\n      return realNode.getElement();\n    },\n\n    ModContextAttr(context) {\n      if (context.name) {\n        context.name.set(this.context.name);\n      } else {\n        context.add_attr({ name: this.context.name });\n      }\n\n      if (context.type) {\n        context.type.set(this.context.type);\n      } else {\n        context.add_attr({ type: this.context.type });\n      }\n    },\n\n    ModNetworkAttr(network) {\n      if (network.name) {\n        network.name.set(this.network.name);\n      } else {\n        network.add_attr({ name: this.network.name });\n      }\n\n      if (network.type) {\n        network.type.set(this.network.type);\n      } else {\n        network.add_attr({ type: this.network.type });\n      }\n    },\n\n    selectDevice(devices) {\n      this.selected = devices;\n    },\n\n    stopDiscovering() {\n      if (this.spinalDiscover) {\n        this.spinalDiscover.setResetedMode();\n        this.spinalDiscover.remove().then(() => {\n          this.spinalDiscover = undefined;\n          this.state = STATES.reseted;\n        });\n      } else {\n        this.state = STATES.reseted;\n      }\n    },\n  },\n  watch: {\n    \"network.useBroadcast\": function () {\n      this.stopDiscovering();\n    },\n    \"network.address\": function () {\n      this.stopDiscovering();\n    },\n    \"network.port\": function () {\n      this.stopDiscovering();\n    },\n\n    \"network.ips\": function () {\n      this.stopDiscovering();\n    },\n  },\n  beforeDestroy() {\n    this.spinalDiscover.remove(this.graph);\n  },\n};\n</script>\n\n<style scoped>\n.discover_container {\n  width: 100%;\n  height: calc(100% - 15px);\n}\n\n.discover_container .stepContainer {\n  width: 100%;\n  height: 350px;\n}\n\n.discover_container .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.discover_container .header {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.discover_container .header .radio {\n  width: 50%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.discover_container .header .radio.isActive {\n  color: #448aff;\n  border-bottom: 2px solid #448aff;\n}\n\n.discover_container .content {\n  width: 100%;\n  height: calc(100% - 50px);\n  margin-top: 10px;\n  /* min-height: 200px; */\n\n  /* overflow: hidden;\n   overflow-y: auto; */\n}\n</style>\n\n<style>\n.discover_container .md-steppers.md-theme-default,\n.discover_container .md-steppers.md-theme-default .md-steppers-wrapper,\n.discover_container\n  .md-steppers.md-theme-default\n  .md-steppers-wrapper\n  .md-steppers-container {\n  height: 100%;\n}\n\n.discover_container\n  .md-steppers.md-theme-default\n  .md-steppers-wrapper\n  .md-steppers-container\n  .md-stepper-content.md-active {\n  min-height: 250px;\n  max-height: 350px;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"device\">\n    <div class=\"name\"\n         v-tooltip=\"device.name\">\n      {{ device.name }}\n    </div>\n\n    <div class=\"state\"\n         :class=\"state\">\n      {{ state }}\n    </div>\n\n    <div class=\"actions\">\n      <md-button class=\"md-icon-button md-primary\"\n                 v-tooltip=\"'start'\"\n                 :disabled=\"disabledStart()\"\n                 @click=\"startMonitoring\">\n        <md-icon>play_arrow</md-icon>\n      </md-button>\n\n      <md-button class=\"md-icon-button md-primary\"\n                 v-tooltip=\"'restart'\"\n                 :disabled=\"disabledRestart()\"\n                 @click=\"restartMonitoring\">\n        <md-icon>replay</md-icon>\n      </md-button>\n\n      <md-button class=\"md-icon-button md-accent\"\n                 v-tooltip=\"'stop'\"\n                 :disabled=\"disabledStop()\"\n                 @click=\"stopMonitoring\">\n        <md-icon>stop</md-icon>\n      </md-button>\n\n      <div class=\"block\">\n        <div class=\"input\">\n          <md-checkbox class=\"md-primary\"\n                       v-model=\"saveTimeSeries\">Save TimeSeries</md-checkbox>\n        </div>\n      </div>\n\n      <!-- <md-button class=\"md-icon-button\">\n                  <md-icon class=\"md-primary\">star</md-icon>\n               </md-button> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport utilities from \"../../../js/utilities\";\nimport { monitorState } from \"../../../js/monitorState\";\n\nexport default {\n  name: \"deviceMonitoring\",\n  props: {\n    device: { required: true },\n    // context: { required: true },\n    // graph: { required: true },\n    profilId: { type: String, required: false },\n  },\n  data() {\n    return {\n      saveTimeSeries: false,\n      model: undefined,\n    };\n  },\n  async created() {\n    this.model = await utilities.getModel(this.device.id);\n    if (this.model && this.model.saveTimeSeries) {\n      this.saveTimeSeries = this.model.saveTimeSeries.get();\n    }\n  },\n\n  methods: {\n    async startMonitoring() {\n      this.model = await monitorState.startMonitoring(\n        this.device.id,\n        this.profilId,\n        this.model\n      );\n\n      return this.model;\n\n      // const deviceId = this.device.id;\n      // const contextId = this.context.id;\n      // await utilities.startMonitoring(this.graph, contextId, deviceId);\n      // if (!this.model || this.model === -1) {\n      //   const realNode = SpinalGraphService.getRealNode(this.device.id);\n      //   this.model = await utilities.getModel(realNode);\n      // }\n    },\n\n    stopMonitoring() {\n      return monitorState.stopMonitoring(\n        this.device.id,\n        this.profilId,\n        this.model\n      );\n\n      // if (this.model != -1 && this.model.listen) {\n      //    this.model.listen.set(false);\n      // }\n      // return utilities.stopMonitoring(this.device.id);\n    },\n\n    async restartMonitoring() {\n      await this.stopMonitoring();\n      return new Promise((resolve) => {\n        setTimeout(async () => {\n          this.model = await this.startMonitoring();\n          resolve(this.model);\n        }, 1500);\n      });\n\n      // if (!utilities.hasProfilLinked(this.device.id)) return -1;\n      // await utilities.stopMonitoring(this.device.id);\n      // return new Promise((resolve, reject) => {\n      //   setTimeout(async () => {\n      //     await this.startMonitoring();\n      //     resolve(true);\n      //   }, 1500);\n      // });\n    },\n\n    updateTimeSeries(value) {\n      this.saveTimeSeries = value;\n    },\n\n    ////////////////////////////////////////////\n    ////              DISABLED                //\n    ////////////////////////////////////////////\n\n    disabledRestart() {\n      const model = this.model;\n      return (\n        !this.profilId ||\n        !(model && model !== -1 && model.listen && model.listen.get())\n      );\n    },\n\n    disabledStart() {\n      if (!this.hasProfil) return true;\n      const model = this.model;\n      return model && model !== -1 && model.listen && model.listen.get();\n    },\n\n    disabledStop() {\n      const model = this.model;\n      return (\n        !this.hasProfil ||\n        !(model && model !== -1 && model.listen && model.listen.get())\n      );\n    },\n  },\n  computed: {\n    state() {\n      return this.model && this.model.listen && this.model.listen.get()\n        ? \"Running\"\n        : \"Stopped\";\n    },\n    hasProfil() {\n      return this.profilId;\n    },\n  },\n  watch: {\n    saveTimeSeries() {\n      if (this.model && this.model !== -1) {\n        if (this.model.saveTimeSeries) {\n          this.model.saveTimeSeries.set(this.saveTimeSeries);\n        } else {\n          this.model.add_attr({\n            saveTimeSeries: this.saveTimeSeries,\n          });\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.device {\n  width: 96%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: auto;\n  /* border-bottom: 1px solid gray; */\n}\n\n.device .name,\n.device .state {\n  width: 25%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.device .state {\n  text-align: center;\n}\n\n.device .state.Running {\n  color: chartreuse;\n}\n.device .state.Stopped {\n  color: #ff5252;\n}\n\n.device .actions {\n  width: 50%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"manage_panel_container\">\n    <div class=\"manage_container\"\n         v-if=\"pageSelected === PAGES.selection\">\n      <div class=\"header\">\n        <div>\n          <md-button class=\"md-icon-button\"\n                     v-tooltip=\"'start all devices'\"\n                     @click=\"startAllMonitoring\">\n            <md-icon class=\"md-primary\">play_arrow</md-icon>\n          </md-button>\n\n          <md-button class=\"md-icon-button\"\n                     v-tooltip=\"'restart all devices'\"\n                     @click=\"restartAllMonitoring\">\n            <md-icon class=\"md-primary\">replay</md-icon>\n          </md-button>\n\n          <md-button class=\"md-icon-button md-accent\"\n                     v-tooltip=\"'stop all devices'\"\n                     @click=\"stopAllMonitoring\">\n            <md-icon class=\"md-accent\">stop</md-icon>\n          </md-button>\n\n          <md-button class=\"md-primary\"\n                     @click=\"changeTimeSeries(true)\">Save all time series\n          </md-button>\n\n          <md-button class=\"md-accent\"\n                     @click=\"changeTimeSeries(false)\">Stop saving all time\n            series</md-button>\n        </div>\n      </div>\n\n      <div class=\"devices_list\">\n        <device-monitoring v-for=\"device in devices\"\n                           :key=\"device.id\"\n                           :ref=\"device.id\"\n                           :device=\"device\"\n                           :profilId=\"device.profilId\"\n                           :context=\"context\"\n                           :graph=\"graph\"></device-monitoring>\n      </div>\n    </div>\n    <div class=\"state\"\n         v-else-if=\"pageSelected === PAGES.loading\">\n      <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n    </div>\n\n    <div class=\"state\"\n         v-else-if=\"pageSelected === PAGES.error\">\n      <md-icon class=\"md-size-5x\">close</md-icon>\n    </div>\n  </div>\n</template>\n\n<script>\nimport DeviceMonitoring from \"../components/monitoring/devicemonitor.vue\";\nimport { spinalEventEmitter } from \"spinal-env-viewer-plugin-event-emitter\";\nimport utilities from \"../../js/utilities\";\nimport { monitorState } from \"../../js/monitorState\";\n\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nexport default {\n  name: \"manageDevicesPanel\",\n  components: {\n    \"device-monitoring\": DeviceMonitoring,\n  },\n  data() {\n    this.PAGES = {\n      selection: 0,\n      loading: 1,\n      creation: 2,\n      success: 3,\n      error: 4,\n    };\n\n    this.context;\n    this.graph;\n    this.selectedNode;\n    this.network;\n    this.organ;\n\n    return {\n      devices: [],\n      pageSelected: this.PAGES.creation,\n    };\n  },\n  created() {\n    spinalEventEmitter.on(\"deviceProfileContext-ChangeSupervision\", () => {});\n  },\n  methods: {\n    async opened({ context, graph, selectedNode }) {\n      this.pageSelected = this.PAGES.loading;\n      this.setPanelTitle(selectedNode.name);\n      monitorState.clear();\n\n      try {\n        const [nodeId, contextId] = [selectedNode.id, context.id];\n        this.context = context;\n        this.graph = graph;\n        this.selectedNode = selectedNode;\n\n        await monitorState.init(graph, contextId, nodeId);\n        const { devices, profilIds } = await this.getBmsDevices(\n          contextId,\n          nodeId\n        );\n\n        this.devices = devices;\n        await this.saveProfilIds(profilIds);\n\n        console.log(monitorState);\n\n        this.pageSelected = this.PAGES.selection;\n      } catch (error) {\n        console.error(error);\n        this.pageSelected = this.PAGES.error;\n      }\n    },\n\n    closed() {},\n\n    async getBmsDevices(contextId, id) {\n      return utilities.getBmsDevices(contextId, id).then((devices) => {\n        const profilIds = new Set([]);\n        const promises = devices.map(async (el) => {\n          const res = el.get();\n          const profile = await utilities.getProfilLinkedToDevice(res.id);\n          if (profile) {\n            const { id } = profile;\n            res.profilId = id;\n            profilIds.add(id);\n          }\n          return res;\n        });\n\n        return Promise.all(promises)\n          .then((devices) => {\n            return {\n              devices,\n              profilIds: Array.from(profilIds),\n            };\n          })\n          .catch((err) => {});\n      });\n    },\n\n    saveProfilIds(profilIds) {\n      const promises = profilIds.map((id) => monitorState.addProfile(id));\n      return Promise.resolve(promises);\n    },\n\n    ////////////////////////////////////////////\n    ////              CLIKS                   //\n    ////////////////////////////////////////////\n\n    async startAllMonitoring() {\n      // const length = this.devices.length;\n\n      // this.devices.forEach((device) => {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     ref.startMonitoring();\n      //   }\n      // });\n      const references = this.devices\n        .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n        .filter((el) => !!el)\n        .map((ref) => {\n          return async () => {\n            const model = await ref.startMonitoring();\n            await utilities.waitModelReady(model);\n          };\n        });\n\n      await utilities.consumeBatch(references, 30);\n\n      // while (references.length > 0) {\n\n      //   const model = await ref.startMonitoring();\n      //   await utilities.waitModelReady(model);\n\n      //   // await this.execFunction(refs, (ref) => ref.startMonitoring());\n      //   // delay(2000);\n      // }\n    },\n\n    async restartAllMonitoring() {\n      const references = this.devices\n        .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n        .filter((el) => !!el)\n        .map((ref) => {\n          return async () => {\n            const model = await ref.restartMonitoring();\n            await utilities.waitModelReady(model);\n          };\n        });\n\n      await utilities.consumeBatch(references, 30);\n\n      // const length = this.devices.length;\n\n      // this.devices.forEach((device) => {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     ref.restartMonitoring();\n      //   }\n      // });\n\n      // const references = this.devices\n      //   .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n      //   .filter((el) => !!el);\n\n      // while (references.length > 0) {\n      //   const refs = references.splice(0, 10);\n      //   await this.execFunction(refs, (ref) => ref.restartMonitoring());\n      //   // delay(2000);\n      // }\n\n      // for (const device of this.devices) {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     await ref.restartMonitoring();\n      //   }\n      // }\n    },\n\n    async stopAllMonitoring() {\n      // this.devices.forEach((device) => {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     ref.stopMonitoring();\n      //   }\n      // });\n\n      const references = this.devices\n        .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n        .filter((el) => !!el);\n\n      while (references.length > 0) {\n        const refs = references.splice(0, 10);\n        await this.execFunction(refs, (ref) => ref.stopMonitoring());\n      }\n\n      // for (const device of this.devices) {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     await ref.stopMonitoring();\n      //   }\n      // }\n    },\n\n    changeTimeSeries(value) {\n      this.devices.forEach((device) => {\n        const deviceId = device.id;\n        const [ref] = this.$refs[deviceId];\n        if (ref) {\n          ref.updateTimeSeries(value);\n        }\n      });\n\n      // const length = this.devices.length;\n      // let index = 0;\n      // while (index <= length - 1) {\n      //    const deviceId = this.devices[index].id;\n      //    const [ref] = this.$refs[deviceId];\n      //    if (ref) {\n      //       ref.updateTimeSeries(value);\n      //    }\n      //    index++;\n      // }\n    },\n\n    setPanelTitle(title) {\n      spinalPanelManagerService.panels.manageDevicesPanel.panel.setTitle(\n        `Manage devices monitoring : ${title}`\n      );\n    },\n\n    execFunction(array, callback) {\n      const promises = array.map((el) => callback(el));\n      return Promise.all(promises);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.manage_panel_container {\n  width: 100%;\n  height: calc(100% - 15px);\n  overflow: hidden;\n}\n\n.manage_panel_container .manage_container {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.manage_panel_container .manage_container .header {\n  width: 100%;\n  height: 50px;\n  border-bottom: 1px solid grey;\n}\n\n.manage_panel_container .manage_container .header > div {\n  width: 100%;\n  float: right;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.manage_panel_container .manage_container .devices_list {\n  width: 100%;\n  height: calc(100% - 60px);\n  overflow: auto;\n}\n\n.manage_panel_container .state {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n\n<style>\n.manage_panel_container .manage_container .md-button .md-ripple {\n  padding: unset;\n}\n</style>\n","<template>\n\t<div class=\"connector_monitor_container\">\n\t\t<div class=\"organ_section\" v-for=\"organ in organs\" :key=\"organ.id.get()\">\n\t\t\t<div class=\"name\">{{ organ.name.get() }}</div>\n\t\t\t<div class=\"actions\">\n\t\t\t\t<md-button class=\"md-dense md-primary\" @click=\"restartOrgan(organ)\"\n\t\t\t\t\t>Restart</md-button\n\t\t\t\t>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\n\texport default {\n\t\tname: \"monitorConnectorPanel\",\n\t\tcomponents: {},\n\t\tdata() {\n\t\t\tthis.contextId;\n\n\t\t\treturn {\n\t\t\t\tnodeId: null,\n\t\t\t\torgans: undefined,\n\t\t\t};\n\t\t},\n\t\tmethods: {\n\t\t\tasync opened({ contextId, nodeId }) {\n\t\t\t\tthis.contextId = contextId;\n\t\t\t\tthis.nodeId = nodeId;\n\t\t\t\tthis.organs = await this.getOrganModel(nodeId);\n\n\t\t\t\t// console.log(\"organModel\", this.organModel);\n\t\t\t},\n\n\t\t\tclosed() {},\n\n\t\t\tgetOrganModel(nodeIds) {\n\t\t\t\tif (!Array.isArray(nodeIds)) nodeIds = [nodeIds];\n\n\t\t\t\tconst promises = nodeIds.map((nodeId) => {\n\t\t\t\t\tconst realNode = SpinalGraphService.getRealNode(nodeId);\n\t\t\t\t\treturn realNode.getElement();\n\t\t\t\t});\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t},\n\n\t\t\trestartOrgan(organ) {\n\t\t\t\torgan.restart.set(true);\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.connector_monitor_container {\n\t\twidth: 100%;\n\t\theight: calc(100% - 15px);\n\t\toverflow: auto;\n\t}\n\n\t.connector_monitor_container .organ_section {\n\t\twidth: calc(100% - 10px);\n\t\theight: 50px;\n\t\tpadding: 5px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.connector_monitor_container .organ_section .name {\n\t\tflex: 0 0 70%;\n\t\tfont-size: 1.5em;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n\n\t.connector_monitor_container .organ_section .actions {\n\t\tflex: 0 0 30%;\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\t}\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"selectOrganDialog\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"title\">Add BMS organ</md-dialog-title>\n\n    <md-dialog-content>\n      <md-table v-model=\"organsDisplayed\"\n                md-sort=\"name\"\n                md-sort-order=\"asc\"\n                md-fixed-header>\n        <md-table-toolbar>\n          <h1 class=\"md-title\">Organs</h1>\n        </md-table-toolbar>\n\n        <md-table-empty-state md-label=\"No organ found\">\n        </md-table-empty-state>\n\n        <md-table-row slot=\"md-table-row\"\n                      slot-scope=\"{ item }\">\n          <md-table-cell md-label=\"Name\">{{ item.name }}</md-table-cell>\n          <md-table-cell md-label=\"Type\">{{ item.type }}</md-table-cell>\n          <md-table-cell md-label=\"Action\">\n            <organ-button :ref=\"item._server_id\"\n                          :server_id=\"item._server_id\"\n                          :contextId=\"contextId\"\n                          @add=\"createAndLinkNode\"\n                          @remove=\"removeAndUnlinkNode\"></organ-button>\n          </md-table-cell>\n\n        </md-table-row>\n      </md-table>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <!-- <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(true)\"\n         >Save</md-button> -->\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalBacnetPluginService } from \"../../../service\";\nimport OrganBtn from \"../components/addOrganBtn.vue\";\nexport default {\n  name: \"addOrganDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"organ-button\": OrganBtn,\n  },\n  data() {\n    // this.organs = new Lst();\n\n    return {\n      contextId: undefined,\n      organsDisplayed: [],\n      showDialog: true,\n    };\n  },\n  methods: {\n    opened(option) {\n      // this.organs.bind(() => {\n      //    this.organsDisplayed = this.organs.get();\n      // });\n      this.contextId = option.context.id.get();\n      this.getOrgans();\n    },\n\n    removed(option) {\n      if (option.closeResult) {\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult });\n      }\n    },\n\n    async getOrgans() {\n      // const organs = [];\n      const connection = spinal.spinalSystem.conn;\n      this.organsDisplayed = await SpinalBacnetPluginService.getOrgans(\n        connection\n      );\n      // // spinalCore.load(connection,);\n      // spinalCore.load_type(connection, \"SpinalOrganConfigModel\", (file) => {\n      //    // const obj = {\n      //    //    name: file.name.get(),\n      //    //    type: file.type.get(),\n      //    //    server_id: file._server_id,\n      //    // };\n      //    this.organsDisplayed.push(file);\n      // });\n    },\n\n    createAndLinkNode(server_id) {\n      SpinalBacnetPluginService.addToReference(server_id, this.contextId)\n        .then((result) => {\n          this.$refs[server_id].isLinked = true;\n        })\n        .catch(() => {\n          this.$refs[server_id].isLinked = false;\n        });\n    },\n\n    removeAndUnlinkNode(server_id) {\n      SpinalBacnetPluginService.removeToReference(server_id, this.contextId)\n        .then(() => {\n          this.$refs[server_id].isLinked = false;\n        })\n        .catch((err) => {\n          this.$refs[server_id].isLinked = false;\n        });\n    },\n\n    existeInReference(server_id) {\n      return SpinalBacnetPluginService.isReferencedInContext(\n        server_id,\n        this.contextId\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n.selectOrganDialog {\n  width: 700px;\n  height: 500px;\n}\n\n.selectOrganDialog .title {\n  text-align: center;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n   <div class=\"subContent\">\n      <div class=\"title\">\n         <div>{{title}}</div>\n         <!-- <div class=\"md-layout-item md-size-10 mdIcon\">\n        <md-button class=\"md-icon-button\"\n                   @click=\"createEvent\"\n                   :disabled=\"disableBtn\">\n          <md-icon>control_point</md-icon>\n        </md-button>\n      </div> -->\n      </div>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n\n.subContent .title {\n   width: 100%;\n   height: 10%;\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n\n.subContent .container {\n   width: 100%;\n   height: 90%;\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"selection_container\">\n      <div class=\"section\">\n         <link-template\n            :title=\"context_title\"\n            :data=\"data\"\n            :itemSelected=\"contextSelected\"\n            @select=\"selectContext\"\n         ></link-template>\n      </div>\n\n      <div class=\"section\">\n         <link-template\n            :title=\"category_title\"\n            :data=\"profils\"\n            :itemSelected=\"profilSelected\"\n            @select=\"selectProfil\"\n         ></link-template>\n\n      </div>\n\n      <div class=\"section\">\n         <link-template\n            :title=\"group_title\"\n            :data=\"devices\"\n            :itemSelected=\"deviceSelected\"\n            @select=\"selectDevice\"\n         ></link-template>\n      </div>\n   </div>\n</template>\n\n\n<script>\nimport LinkToGroupTemplate from \"./linkToGroupTemplate.vue\";\n\nexport default {\n   name: \"selectionComponent\",\n   props: {\n      context_title: {},\n      category_title: {},\n      group_title: {},\n      data: {},\n      profils: {},\n      devices: {},\n      contextSelected: {},\n      profilSelected: {},\n      deviceSelected: {},\n   },\n   components: { \"link-template\": LinkToGroupTemplate },\n   methods: {\n      selectContext(res) {\n         this.$emit(\"selectContext\", res);\n      },\n\n      selectProfil(res) {\n         this.$emit(\"selectProfil\", res);\n      },\n\n      selectDevice(res) {\n         this.$emit(\"selectDevice\", res);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.selection_container {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: space-between;\n   align-items: stretch;\n}\n\n.selection_container .section {\n   width: 33%;\n   border: 1px solid grey;\n   border-radius: 4% 4% 0 0;\n   padding: 15px;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Select Profil </md-dialog-title>\n    <md-dialog-content class=\"content\">\n      <link-component v-if=\"pageSelected === PAGES.selection\"\n                      :context_title=\"'Profils'\"\n                      :category_title=\"'Categories'\"\n                      :group_title=\"'Devices'\"\n                      :data=\"data\"\n                      :profils=\"profils\"\n                      :devices=\"devices\"\n                      :contextSelected=\"contextSelected\"\n                      :profilSelected=\"profilSelected\"\n                      :deviceSelected=\"deviceSelected\"\n                      @selectContext=\"selectContext\"\n                      @selectProfil=\"selectProfil\"\n                      @selectDevice=\"selectDevice\"></link-component>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.success\">\n        <md-icon class=\"md-size-5x\">done</md-icon>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.error\">\n        <md-icon class=\"md-size-5x\">error_outline</md-icon>\n      </div>\n\n      <div class=\"progress-bar\"\n           v-else-if=\"pageSelected === PAGES.creation\">\n        <div class=\"percent-number\">{{ percent }} %</div>\n        <md-progress-bar class=\"percent-bar\"\n                         md-mode=\"buffer\"\n                         :md-value=\"percent\"></md-progress-bar>\n      </div>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 :disabled=\"disabled()\"\n                 @click=\"createLinks\">Link</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport {\n  SpinalBmsDevice,\n  SpinalBmsNetwork,\n  SpinalBmsEndpoint,\n} from \"spinal-model-bmsnetwork\";\n\n// import { SpinalBacnetPluginService } from \"../../../service\";\n// import deviceProfilService from \"../../js/devices_profil_services\";\n\nimport {\n  DeviceProfileUtilities,\n  LinkBmsDeviceService,\n} from \"spinal-env-viewer-plugin-network-tree-service\";\n\nimport LinkComponent from \"../components/links/LinkComponent.vue\";\n\nexport default {\n  name: \"dialogComponent\",\n  components: {\n    \"link-component\": LinkComponent,\n  },\n  props: [\"onFinised\"],\n  data() {\n    this.bmsDevices;\n    this.bmsContextId;\n\n    this.PAGES = {\n      selection: 0,\n      result: 1,\n      loading: 2,\n      success: 3,\n      error: 4,\n      creation: 5,\n    };\n    // this.validMaps = new Map();\n    // this.invalidMaps = new Map();\n    return {\n      resultMaps: new Map(),\n      showDialog: true,\n      pageSelected: this.PAGES.selection,\n      percent: 0,\n\n      data: [],\n      profils: [],\n      devices: [],\n\n      contextSelected: undefined,\n      profilSelected: undefined,\n      deviceSelected: undefined,\n    };\n  },\n  mounted() {\n    // EventBus.$on(\"itemCreated\", (id) => {\n    //    this.pageSelected = this.PAGES.loading;\n    //    this.getAllData().then(() => {\n    //       this.pageSelected = this.PAGES.selection;\n    //    });\n    // });\n  },\n  methods: {\n    async opened(option) {\n      this.pageSelected = this.PAGES.loading;\n      this.bmsContextId = option.bmsContextId;\n\n      this.bmsDevices = await this.getAllDevices(\n        this.bmsContextId,\n        option.nodeId\n      );\n\n      this.getAllData().then(() => {\n        this.pageSelected = this.PAGES.selection;\n      });\n    },\n\n    removed(option) {\n      this.showDialog = false;\n    },\n\n    async createLinks() {\n      this.pageSelected = this.PAGES.creation;\n      // const promises = this.bmsDevices.map(({ id }) => {\n\n      //    // return SpinalBacnetPluginService.linkProfilToDevice(\n      //    //    this.bmsContextId,\n      //    //    id,\n      //    //    this.deviceSelected\n      //    // );\n      // });\n\n      const ids = this.bmsDevices.map((el) => el.id);\n      const listeLength = ids.length;\n      let isError = false;\n\n      while (!isError && ids.length > 0) {\n        const id = ids.shift();\n        try {\n          await LinkBmsDeviceService.linkProfilToBmsDevice(\n            this.bmsContextId,\n            id,\n            this.deviceSelected\n          );\n\n          this.percent = Math.floor(\n            (100 * (listeLength - ids.length)) / listeLength\n          );\n        } catch (error) {\n          console.error(error);\n          isError = true;\n        }\n      }\n\n      if (isError) {\n        this.pageSelected = this.PAGES.error;\n        return;\n      }\n\n      this.pageSelected = this.PAGES.success;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    getAllData() {\n      // return deviceProfilService\n      return DeviceProfileUtilities.getDeviceContextTreeStructure().then(\n        (result) => {\n          this.data = result;\n          this.updateProfils();\n          return;\n        }\n      );\n    },\n\n    disabled() {\n      return !this.deviceSelected || this.pageSelected === this.PAGES.success;\n    },\n\n    getItemsList(deviceId) {\n      const found = this.devices.find((el) => el.id === deviceId);\n      if (found) return found.itemList;\n    },\n\n    /* Selection */\n    selectContext(id) {\n      this.contextSelected = id;\n    },\n\n    selectProfil(id) {\n      this.profilSelected = id;\n    },\n\n    selectDevice(id) {\n      this.deviceSelected = id;\n    },\n\n    /* Update */\n    updateProfils() {\n      this.categories = [];\n      if (this.contextSelected) {\n        let val = this.data.find((el) => el.id === this.contextSelected);\n        if (val) this.profils = val.profils;\n      }\n    },\n\n    updateDevices() {\n      this.devices = [];\n      if (this.profilSelected) {\n        let val = this.profils.find((el) => el.id === this.profilSelected);\n        if (val) this.devices = val.devices;\n      }\n    },\n\n    getAllDevices(contextId, nodeId) {\n      return SpinalGraphService.findInContext(nodeId, contextId, (node) => {\n        if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n          SpinalGraphService._addNode(node);\n          return true;\n        }\n        return false;\n      }).then((result) => {\n        return result.map((el) => el.get());\n      });\n    },\n  },\n  watch: {\n    async contextSelected() {\n      await this.updateProfils();\n      this.profilSelected = undefined;\n    },\n    async profilSelected() {\n      this.updateDevices();\n      this.deviceSelected = undefined;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 60%;\n  height: 600px;\n}\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n.mdDialogContainer .content {\n  padding: 0 10px 24px 24px;\n}\n.mdDialogContainer .content .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.mdDialogContainer .content .results {\n  width: 100%;\n  height: 100%;\n  /* display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  overflow: auto; */\n}\n.mdDialogContainer .content .results .result-component {\n  width: 100%;\n  height: 70px;\n  border: 1px solid gray;\n  margin: 5px 0 5px 0;\n}\n\n.mdDialogContainer .content .progress-bar {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.mdDialogContainer .content .progress-bar .percent-number {\n  font-size: 1.8em;\n  margin-bottom: 10px;\n}\n\n.mdDialogContainer .content .progress-bar .percent-bar {\n  width: 90%;\n}\n\n/* .mdDialogContainer .content {\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.mdDialogContainer .content .section {\n  width: 33%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n} */\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n  max-width: 100%;\n  max-height: 100%;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Unlink device to Profil\n    </md-dialog-title>\n    <md-dialog-content class=\"content\">\n\n      <div class=\"loading\"\n           v-if=\"pageSelected === PAGES.selection\">\n        Do you want unlink devices to profil ?\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.success\">\n        <md-icon class=\"md-size-5x\">done</md-icon>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.error\">\n        <md-icon class=\"md-size-5x\">error_outline</md-icon>\n      </div>\n\n      <div class=\"progress-bar\"\n           v-else-if=\"pageSelected === PAGES.creation\">\n        <div class=\"percent-number\">{{percent}} %</div>\n        <md-progress-bar class=\"percent-bar\"\n                         md-mode=\"buffer\"\n                         :md-value=\"percent\"></md-progress-bar>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 :disabled=\"pageSelected !== PAGES.selection\"\n                 @click=\"unLink\">Yes</md-button>\n\n    </md-dialog-actions>\n  </md-dialog>\n\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport {\n  SpinalBmsDevice,\n  SpinalBmsNetwork,\n  SpinalBmsEndpoint,\n} from \"spinal-model-bmsnetwork\";\n\n// import { SpinalBacnetPluginService } from \"../../../service\";\n// import deviceProfilService from \"../../js/devices_profil_services\";\n\nimport {\n  DeviceProfileUtilities,\n  LinkBmsDeviceService,\n} from \"spinal-env-viewer-plugin-network-tree-service\";\n\nimport LinkComponent from \"../components/links/LinkComponent.vue\";\n\nexport default {\n  name: \"dialogComponent\",\n  components: {\n    \"link-component\": LinkComponent,\n  },\n  props: [\"onFinised\"],\n  data() {\n    this.bmsDevices;\n    this.bmsContextId;\n\n    this.PAGES = {\n      selection: 0,\n      result: 1,\n      loading: 2,\n      success: 3,\n      error: 4,\n      creation: 5,\n    };\n    // this.validMaps = new Map();\n    // this.invalidMaps = new Map();\n    return {\n      resultMaps: new Map(),\n      showDialog: true,\n      pageSelected: this.PAGES.selection,\n      percent: 0,\n    };\n  },\n  mounted() {\n    // EventBus.$on(\"itemCreated\", (id) => {\n    //    this.pageSelected = this.PAGES.loading;\n    //    this.getAllData().then(() => {\n    //       this.pageSelected = this.PAGES.selection;\n    //    });\n    // });\n  },\n  methods: {\n    async opened(option) {\n      this.pageSelected = this.PAGES.loading;\n      this.bmsContextId = option.bmsContextId;\n\n      this.bmsDevices = await this.getAllDevices(\n        this.bmsContextId,\n        option.nodeId\n      );\n\n      this.pageSelected = this.PAGES.selection;\n    },\n\n    removed(option) {\n      this.showDialog = false;\n    },\n\n    async unLink() {\n      this.pageSelected = this.PAGES.creation;\n\n      const ids = this.bmsDevices.map((el) => el.id);\n      const listeLength = ids.length;\n      let isError = false;\n\n      while (!isError && ids.length > 0) {\n        const id = ids.shift();\n        try {\n          await LinkBmsDeviceService.unLinkProfilToBmsDevice(\n            this.bmsContextId,\n            id\n          );\n\n          this.percent = Math.floor(\n            (100 * (listeLength - ids.length)) / listeLength\n          );\n        } catch (error) {\n          console.error(error);\n          isError = true;\n        }\n      }\n\n      if (isError) {\n        this.pageSelected = this.PAGES.error;\n        return;\n      }\n\n      this.pageSelected = this.PAGES.success;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    disabled() {\n      return !this.deviceSelected;\n    },\n\n    getItemsList(deviceId) {\n      const found = this.devices.find((el) => el.id === deviceId);\n      if (found) return found.itemList;\n    },\n\n    /* Selection */\n    selectContext(id) {\n      this.contextSelected = id;\n    },\n\n    selectProfil(id) {\n      this.profilSelected = id;\n    },\n\n    selectDevice(id) {\n      this.deviceSelected = id;\n    },\n\n    /* Update */\n    updateProfils() {\n      this.categories = [];\n      if (this.contextSelected) {\n        let val = this.data.find((el) => el.id === this.contextSelected);\n        if (val) this.profils = val.profils;\n      }\n    },\n\n    updateDevices() {\n      this.devices = [];\n      if (this.profilSelected) {\n        let val = this.profils.find((el) => el.id === this.profilSelected);\n        if (val) this.devices = val.devices;\n      }\n    },\n\n    getAllDevices(contextId, nodeId) {\n      return SpinalGraphService.findInContext(nodeId, contextId, (node) => {\n        if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n          SpinalGraphService._addNode(node);\n          return true;\n        }\n        return false;\n      }).then((result) => {\n        return result.map((el) => el.get());\n      });\n    },\n  },\n  watch: {\n    async contextSelected() {\n      await this.updateProfils();\n      this.profilSelected = undefined;\n    },\n    async profilSelected() {\n      this.updateDevices();\n      this.deviceSelected = undefined;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n}\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n.mdDialogContainer .content {\n  padding: 0 10px 24px 24px;\n}\n.mdDialogContainer .content .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.mdDialogContainer .content .results {\n  width: 100%;\n  height: 100%;\n  /* display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  overflow: auto; */\n}\n.mdDialogContainer .content .results .result-component {\n  width: 100%;\n  height: 70px;\n  border: 1px solid gray;\n  margin: 5px 0 5px 0;\n}\n\n.mdDialogContainer .content .progress-bar {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.mdDialogContainer .content .progress-bar .percent-number {\n  font-size: 1.8em;\n  margin-bottom: 10px;\n}\n\n.mdDialogContainer .content .progress-bar .percent-bar {\n  width: 90%;\n}\n\n/* .mdDialogContainer .content {\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.mdDialogContainer .content .section {\n  width: 33%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n} */\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n  max-width: 100%;\n  max-height: 100%;\n}\n</style>","<template>\n   <md-dialog\n      class=\"mdDialogContainer\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title class=\"dialogTitle\">Hello</md-dialog-title>\n\n      <md-dialog-content class=\"content\">\n         <h1>Hello world</h1>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n\n         <md-button\n            class=\"md-primary\"\n            @click=\"createLink\"\n         >Link</md-button>\n      </md-dialog-actions>\n   </md-dialog>\n</template>\n<script>\nexport default {\n   name: \"linkToBimAutomateDialog\",\n   props: [\"onFinised\"],\n   data() {\n      this.PAGES = {\n         selection: 0,\n         configuration: 1,\n         result: 2,\n         loading: 3,\n         success: 4,\n         error: 5,\n      };\n      return {\n         showDialog: true,\n      };\n   },\n   methods: {\n      opened(option) {},\n      removed(save) {\n         if (save) {\n         }\n         this.showDialog = false;\n      },\n\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised(closeResult);\n         }\n      },\n\n      createLink() {},\n   },\n};\n</script>\n\n\n<style>\n.mdDialogContainer .md-dialog-container {\n   max-width: 100%;\n   max-height: 100%;\n}\n</style>","<template>\n   <md-dialog\n      class=\"mdDialogContainer\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title class=\"dialogTitle\">Get Bacnet Value</md-dialog-title>\n      <md-dialog-content class=\"content\">\n\n         <div\n            class=\"itemList\"\n            v-if=\"pageSelected === PAGES.selection\"\n         >\n            <div\n               class=\"itemList-item\"\n               v-for=\"item in sensor_types\"\n               :key=\"item.id\"\n            >\n               <md-checkbox\n                  class=\"md-primary\"\n                  v-model=\"item.checked\"\n               />\n               <!-- :value=\"item.checked\" -->\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n            </div>\n         </div>\n\n         <div\n            class=\"devicesProgress\"\n            v-else-if=\"pageSelected === PAGES.creation\"\n         >\n\n            <div\n               class=\"device\"\n               v-for=\"device in nodes\"\n               :key=\"device.id\"\n            >\n               <div class=\"name\">{{device.info.name}}</div>\n               <div\n                  class=\"progress-bar\"\n                  v-if=\"device.progress != -1\"\n               >\n                  <div class=\"progress-value\">\n                     <md-progress-bar\n                        md-mode=\"buffer\"\n                        :md-value=\"device.progress\"\n                     ></md-progress-bar>\n                  </div>\n\n                  <div class=\"progress-number\">{{device.progress}} %</div>\n               </div>\n\n               <div\n                  class=\"progress-bar\"\n                  v-else\n               >\n                  <div\n                     class=\"message\"\n                     :class=\"device.message.id\"\n                  >{{device.message.text}}</div>\n               </div>\n            </div>\n\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.loading\"\n         >\n            <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.success\"\n         >\n            <md-icon class=\"md-size-5x\">done</md-icon>\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.error\"\n         >\n            <md-icon class=\"md-size-5x\">error_outline</md-icon>\n         </div>\n\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n\n         <md-button\n            class=\"md-primary\"\n            :disabled='disabled()'\n            @click=\"getBacnetValue\"\n         >GET Bacnet</md-button>\n      </md-dialog-actions>\n   </md-dialog>\n</template>\n\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { SENSOR_TYPES, MESSAGES } from \"../../js/constants\";\nimport {\n   SpinalBacnetValueModel,\n   SpinalOrganConfigModel,\n} from \"spinal-model-bacnet\";\nimport { SpinalBmsDevice, SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\nimport utilities from \"../../js/utilities\";\n\nexport default {\n   name: \"GetBacnetValueDialog\",\n   props: [\"onFinised\"],\n   data() {\n      this.PAGES = {\n         selection: 0,\n         loading: 1,\n         creation: 2,\n         success: 3,\n         error: 4,\n      };\n\n      this.MESSAGES = MESSAGES;\n\n      return {\n         sensor_types: Object.assign([], SENSOR_TYPES),\n         pageSelected: this.PAGES.creation,\n         showDialog: true,\n         nodes: undefined,\n         context: undefined,\n         graph: undefined,\n         network: undefined,\n      };\n   },\n   methods: {\n      async opened(option) {\n         this.pageSelected = this.PAGES.loading;\n         const { selectedNode, context, graph } = option;\n         this.context = SpinalGraphService.getRealNode(context.id);\n         this.graph = graph;\n\n         let devices = await this.getBmsDevices(context.id, selectedNode.id);\n\n         this.nodes = devices.map((el) => ({\n            info: el.get(),\n            progress: -1,\n            message: this.MESSAGES.wait,\n         }));\n\n         this.network = await this._getNetwork(context.id, selectedNode.id);\n         // if (option.networkId) {\n         //    this.network = SpinalGraphService.getRealNode(option.networkId);\n         // } else {\n         //    this.network = await this._getNetwork(\n         //       option.contextId,\n         //       option.nodeId\n         //    );\n         // }\n\n         this.pageSelected = this.PAGES.selection;\n      },\n\n      removed(save) {\n         if (save) {\n         }\n         this.showDialog = false;\n      },\n\n      disabled() {\n         if (this.pageSelected !== this.PAGES.selection) return true;\n\n         const found = this.sensor_types.find((el) => el.checked);\n         if (found) return false;\n\n         return true;\n      },\n\n      async getBacnetValue() {\n         this.pageSelected = this.PAGES.creation;\n         const sensors = this.sensor_types\n            .filter((el) => el.checked)\n            .map((el) => el.value);\n\n         const iterator = [...this.nodes];\n         const organ = await this._getOrgan(this.network);\n\n         this.createValue(iterator, sensors, organ);\n      },\n\n      createValue(iterator, sensors, organ) {\n         console.log(\"inside createValue...\");\n         const value = iterator.shift();\n\n         if (value && this.showDialog) {\n            // const value = next.value;\n            const realNode = SpinalGraphService.getRealNode(value.info.id);\n\n            const model = new SpinalBacnetValueModel(\n               this.graph,\n               this.context,\n               organ,\n               this.network,\n               realNode,\n               sensors\n            );\n\n            console.log(\"model\", model);\n            model.addToNode();\n            let progressProcess;\n\n            const modelProcess = model.state.bind(() => {\n               switch (model.state.get()) {\n                  case \"recover\":\n                     console.log(\"recovering...\");\n                     value.message = this.MESSAGES.recover;\n                     value.progress = -1;\n                     break;\n                  case \"progress\":\n                     console.log(\"progress...\");\n                     progressProcess = model.progress.bind(() => {\n                        value.progress = model.progress.get();\n                     });\n                     break;\n                  case \"success\":\n                  case \"error\":\n                     console.log(\"success or error\");\n                     model.state.unbind(modelProcess);\n                     model.progress.unbind(progressProcess);\n\n                     value.message = this.MESSAGES[model.state.get()];\n                     value.progress = -1;\n\n                     this.createValue(iterator, sensors, organ);\n                     break;\n\n                  default:\n                     break;\n               }\n\n               // if (model.state.get() === \"success\") {\n               //    model.state.unbind(modelProcess);\n               //    value.message = this.MESSAGES.success;\n               //    value.progress = -1;\n\n               //    this.createValue(iterator, iterator.next(), sensors);\n               // } else if (model.state.get() === \"error\") {\n               //    model.state.unbind(modelProcess);\n               //    value.message = this.MESSAGES.error;\n               //    value.progress = -1;\n\n               //    this.createValue(iterator, iterator.next(), sensors);\n               // }\n            });\n         } else {\n            // this.pageSelected = this.PAGES.success;\n         }\n      },\n\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised(closeResult);\n         }\n      },\n\n      async _getNetwork(contextId, nodeId) {\n         const info = SpinalGraphService.getInfo(nodeId);\n\n         if (info.type.get() === SpinalBmsNetwork.nodeTypeName) {\n            const parents = await SpinalGraphService.getParents(nodeId, [\n               SpinalBmsNetwork.relationName,\n            ]);\n            const organ = parents.find(\n               (el) => el.type.get() === SpinalOrganConfigModel.TYPE\n            );\n            // console.log(\"organ\", organ);\n            if (organ) return SpinalGraphService.getRealNode(organ.id.get());\n         } else {\n            const networks = await SpinalGraphService.getChildrenInContext(\n               contextId,\n               contextId\n            );\n            const parentId = await this._getParent(nodeId);\n\n            for (const network of networks) {\n               const id = network.id.get();\n               const childId = SpinalGraphService.getChildrenIds(id);\n               if (childId.indexOf(parentId) !== -1) {\n                  return SpinalGraphService.getRealNode(id);\n               }\n            }\n         }\n      },\n\n      _getOrgan(network) {\n         if (network) {\n            return network.getElement();\n         }\n      },\n\n      async getBmsDevices(contextId, id) {\n         const info = SpinalGraphService.getInfo(id);\n         if (info.type.get() === SpinalBmsDevice.nodeTypeName) {\n            return [info];\n         }\n         return SpinalGraphService.findInContext(id, contextId, (node) => {\n            if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n               SpinalGraphService._addNode(node);\n               return true;\n            }\n            return false;\n         });\n      },\n\n      async _getParent(nodeId) {\n         const realNode = SpinalGraphService.getRealNode(nodeId);\n         const parents = await realNode.getParents([\n            SpinalBmsDevice.relationName,\n         ]);\n         const found = parents.find(\n            (el) => el.getType().get() === SpinalBmsNetwork.nodeTypeName\n         );\n         if (found) {\n            SpinalGraphService._addNode(found);\n            return found.getId().get();\n         }\n      },\n\n      // async getNetworkId(nodeId) {\n\n      // },\n   },\n};\n</script>\n\n\n<style scoped>\n.mdDialogContainer {\n   width: 750px;\n   height: 500px;\n}\n\n.mdDialogContainer .dialogTitle {\n   text-align: center;\n}\n\n.mdDialogContainer .content {\n   padding: 0 10px 24px 24px;\n}\n\n.mdDialogContainer .content .devicesProgress {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   flex-direction: column;\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.mdDialogContainer .content .devicesProgress .device {\n   width: 95%;\n   min-height: 50px;\n   display: flex;\n   justify-content: space-between;\n   padding: 0 5px;\n   align-items: center;\n   border-top: 1px solid grey;\n}\n\n.mdDialogContainer .content .devicesProgress .device .name {\n   width: 70%;\n   font-size: 1.2em;\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n}\n.mdDialogContainer .content .devicesProgress .device .progress-bar {\n   width: 30%;\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n}\n\n.mdDialogContainer .content .devicesProgress .device .progress-bar .message {\n   text-align: center;\n}\n\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .message.waiting {\n   color: grey;\n}\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .message.success {\n   color: green;\n}\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .message.error {\n   color: #ff5252;\n}\n\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .progress-number {\n   width: 25%;\n   text-align: center;\n}\n\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .progress-value {\n   width: 75%;\n}\n\n.mdDialogContainer .content .itemList {\n   width: 100%;\n   /* height: 100%; */\n   display: flex;\n   justify-content: space-between;\n   /* align-items: flex-start; */\n   flex-wrap: wrap;\n   padding-top: 20px;\n}\n\n.mdDialogContainer .content .itemList .itemList-item {\n   /* width: 200px; */\n   width: 33%;\n   height: 50px;\n   margin-bottom: 10px;\n   display: flex;\n   align-items: center;\n}\n\n.mdDialogContainer .content .state {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.mdDialogContainer .content .results {\n   width: 100%;\n   height: 100%;\n}\n\n.mdDialogContainer .content .results .result-component {\n   width: 100%;\n   height: 70px;\n   border: 1px solid gray;\n   margin: 5px 0 5px 0;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-bacnet-manager.1aaead56.css.map"}