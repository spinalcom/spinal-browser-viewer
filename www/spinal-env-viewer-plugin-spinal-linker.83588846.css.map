{"mappings":"A;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-spinal-linker/src/node-item.vue","node_modules/spinal-env-viewer-plugin-spinal-linker/src/SpinalLinker.vue"],"sourcesContent":["<template>\n    <li>\n        <div class=\"plugin-linker-header\">\n            <drop-up-down-button\n                    :opened=\"open\"\n                    @click=\"toggle\"\n            />\n            {{name}}\n            <spinal-icon-button\n                    v-if=\"canLink\"\n                    class=\"plugin-linker-link-button\"\n                    icon=\"link\"\n                    tool-tip=\"link node\"\n                    @click=\"link\"\n            />\n            <spinal-icon-button\n                    v-else\n                    class=\"plugin-linker-link-button\"\n                    icon=\"link_off\"\n                    tool-tip=\"unlink node\"\n                    @click=\"unlink\"\n            />\n        </div>\n        <ul v-if=\"open\">\n            <node-item\n                    v-for=\"(nodeId, index) in node.childrenIds\"\n                    :nodeId=\"nodeId\"\n                    :key=\"index\"\n                    :invert-link=\"invertLink\"\n                    :link-id=\"linkId\"\n                    :link-relation-name=\"linkRelationName\"\n                    :link-relation-type=\"linkRelationType\"\n            />\n        </ul>\n    </li>\n</template>\n\n<script>\n  import {\n    SpinalIconButton,\n    DropUpDownButton\n  }\n    from \"spinal-env-viewer-vue-components-lib\";\n  import { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\n  export default {\n    name: \"nodeItem\",\n    components: { DropUpDownButton, SpinalIconButton },\n    data: function () {\n      return {\n        node: {},\n        open: false,\n        linked: false\n      }\n    },\n    props: {\n      nodeId: {\n        type: String,\n        required: true\n      },\n      invertLink: {\n        type: Boolean,\n        default: false\n      },\n      linkId: {\n        type: String,\n        required: true\n      },\n      linkRelationName: {\n        type: String,\n        default: 'HasBeenLink'\n      },\n      linkRelationType: {\n        type: String,\n        default: SpinalGraphService.SPINAL_RELATION_PTR_LST_TYPE\n      }\n    },\n    computed: {\n      name: function () {\n        if (this.node && this.node.hasOwnProperty( 'name' )) {\n          return this.node.name.get();\n        }\n        return 'Unknown name';\n      },\n      hasChildren: function () {\n        if (this.node && this.node.hasOwnProperty( 'childrenIds' ))\n          return false;\n        return false;\n      }\n    },\n    asyncComputed: {\n      canLink: {\n        get: async function () {\n          if (!this.linked && this.node && this.node.hasOwnProperty( 'id'\n          )) {\n            let res = await SpinalGraphService\n              .isChild( this.linkId, this.node.id.get(), [this.linkRelationName] );\n            if (this.invertLink)\n              res = await SpinalGraphService\n                .isChild( this.node.id.get(), this.linkId, [this.linkRelationName] );\n            return res === false;\n          }\n          return false;\n        },\n        default: false,\n        watch: ['linked']\n      },\n\n    },\n    methods: {\n      link: function () {\n\n        if (this.invertLink) {\n          SpinalGraphService.addChild( this.node.id.get(), this.linkId,\n            this.linkRelationName, this.linkRelationType );\n        } else {\n          SpinalGraphService.addChild( this.linkId, this.node.id.get(),\n            this.linkRelationName, this.linkRelationType );\n        }\n        this.linked = true;\n      },\n      unlink: function () {\n        if (this.invertLink) {\n          SpinalGraphService.removeChild( this.node.id.get(), this.linkId,\n            this.linkRelationName, this.linkRelationType ).then( () => {\n              console.log( 'unlink inverted' );\n            } )\n            .catch( e =>\n              console.error( e ) );\n        } else {\n          SpinalGraphService.removeChild( this.linkId, this.node.id.get(),\n            this.linkRelationName, this.linkRelationType )\n            .then( () => {\n              console.log( 'unlink' );\n            } )\n            .catch( e =>\n              console.error( e )\n            );\n        }\n        this.linked = false;\n      },\n      toggle: function () {\n        this.open = !this.open\n      }\n    },\n    mounted() {\n      this.node = SpinalGraphService.getNode( this.nodeId );\n    }\n  }\n</script>\n\n<style scoped>\n    li{\n        list-style-type: none;\n    }\n    .plugin-linker-header{\n        display: flex;\n    }\n</style>","<!--\n  - Copyright 2019 SpinalCom - www.spinalcom.com\n  -\n  -  This file is part of SpinalCore.\n  -\n  -  Please read all of the following terms and conditions\n  -  of the Free Software license Agreement (\"Agreement\")\n  -  carefully.\n  -\n  -  This Agreement is a legally binding contract between\n  -  the Licensee (as defined below) and SpinalCom that\n  -  sets forth the terms and conditions that govern your\n  -  use of the Program. By installing and/or using the\n  -  Program, you agree to abide by all the terms and\n  -  conditions stated or referenced herein.\n  -\n  -  If you do not agree to abide by these terms and\n  -  conditions, do not demonstrate your acceptance and do\n  -  not install or use the Program.\n  -  You should have received a copy of the license along\n  -  with this file. If not, see\n  -  <http://resources.spinalcom.com/licenses.pdf>.\n  -->\n\n<template>\n    <div class=\"plugin-spinal-linker\">\n        <h1>{{name}}</h1>\n        <node-item v-for=\"(contextId) in contextsId\"\n                   :node-id=\"contextId\"\n                   :invert-link=\"false\"\n                   :link-id=\"inspectedNode.id.get()\"\n                   :link-relation-name=\"relationName\"\n                   :link-relation-type=\"relationType\"\n        />\n    </div>\n</template>\n\n<script>\n  import { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n  import NodeItem from \"./node-item.vue\";\n\n\n  export default {\n    name: \"SpinalLinker\",\n    components: { NodeItem, },\n    data: function () {\n      return {\n        'contextsId': [],\n        'inspectedNode': '',\n        'relationName': '',\n        'relationType': '',\n      };\n    },\n    computed: {\n      name: function () {\n        if (this.inspectedNode && this.inspectedNode.hasOwnProperty( 'name' ))\n          return this.inspectedNode.name.get();\n        return ''\n      }\n    },\n    methods: {\n      opened: function ( option ) {\n\n        this.relationName = option.relationName;\n        this.relationType = option.relationType;\n        this.inspectedNode = option.selectedNode;\n        this.contextsId = [];\n        const graphId = SpinalGraphService.getGraph().info.id.get();\n        SpinalGraphService.getChildren( graphId, [] ).then( children => {\n          for (let i = 0; i < children.length; i++) {\n            if (children[i].hasOwnProperty( 'id' ))\n              this.contextsId.push( children[i].id.get() )\n          }\n        } );\n      },\n      closed: function () {\n\n      },\n      removed: function () {\n      }\n    }\n  }\n</script>\n\n<style>\n\n    .plugin-spinal-linker * {\n        box-sizing: border-box;\n    }\n\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-spinal-linker.83588846.css.map"}