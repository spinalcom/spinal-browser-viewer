{"mappings":"A;;;;;;;;;;;;A;;;;;;A;;;;;A;;;;;A","sources":["node_modules/spinal-env-viewer-plugin-circular-menu/circularMenu.vue"],"sourcesContent":["<template>\n  <div>\n    <div :style=\"getStyle()\">\n      <transition v-for=\"(button, index) in buttonList\"\n                  :key=\"index\"\n                  name=\"myCircularOpen\"\n                  appear\n                  before-appear=\"circle-spinal-circular-menucenter\"\n                  appear-class=\"circle-spinal-circular-menu\"\n                  appear-to-class=\"opencircle-spinal-circular-menu\"\n                  leave-to-class=\"closecircle-spinal-circular-menu\"\n                  :duration=\"{ enter: 500, leave: 800 }\">\n        <md-button :style=\"getButtonStyle(index)\"\n                   @click=\"button.action(options)\"\n                   style=\"margin: unset;pointer-events: auto; height: 40px\"\n                   class=\"md-icon-button\"\n                   v-tooltip=\"button.label\">\n          <md-icon :style=\"getIconColor(index)\">{{button.buttonCfg.icon}}</md-icon>\n        </md-button>\n      </transition>\n    </div>\n    <!-- <md-button @click=\"activateMode\"\n               :style=\"color\"\n               class=\"myButton md-icon-button\">\n    </md-button> -->\n\n  </div>\n</template>\n\n\n<script>\nexport default {\n  name: \"circularmenu\",\n  data() {\n    return {\n      buttonTab: [],\n      data: {},\n      color: {\n        background: \"#2D3D93\"\n      }\n      // activateModeBool: true\n    };\n  },\n  components: {},\n  props: [\"buttonList\", \"x\", \"y\", \"options\"],\n  methods: {\n    // activateMode: function() {\n    //   if (this.activateModeBool) {\n    //     this.activateModeBool = false;\n    //     this.color.background = \"#F68204\";\n    //     this.data = {};\n    //   } else {\n    //     this.activateModeBool = true;\n    //     this.color.background = \"#2D3D93\";\n    //   }\n    // },\n    getStyle: function() {\n      if (this.buttonList.length > 0) {\n        return {\n          position: \"absolute\",\n          left: this.x - 75 + \"px\",\n          top: this.y - 75 + \"px\",\n          height: \"150px\",\n          width: \"150px\",\n          \"pointer-events\": \"none\",\n          opacity: 1,\n          \"-webkit-transform\": \"scale(1)\",\n          \"-moz-transform\": \"scale(1)\",\n          transform: \"scale(1)\",\n\n          \"-webkit-transition\": \"all 0.4s ease-out\",\n          \"-moz-transition\": \"all 0.4s ease-out\",\n          transition: \"all 0.4s ease-out\"\n        };\n      } else {\n        return {\n          position: \"absolute\",\n          opacity: 0,\n\n          \"-webkit-transform\": \"scale(0)\",\n          \"-moz-transform\": \"scale(0)\",\n          transform: \"scale(0)\"\n        };\n      }\n    },\n    getButtonStyle: function(index) {\n      let myStyle = {\n        left: \"\",\n        top: \"\",\n        \"background-color\": this.buttonList[index].buttonCfg.backgroundColor,\n        position: \"absolute\",\n        \"-webkit-transition\": \"all 0.4s ease-out\",\n        \"-moz-transition\": \"all 0.4s ease-out\",\n        transition: \"all 0.4s ease-out\"\n      };\n\n      let nbrElement = this.buttonList.length;\n      let radius = 60;\n      let nbr = (2 * Math.PI) / nbrElement;\n      if (nbrElement >= 7) {\n        let result = nbrElement * 2 * 25;\n        radius = result / (2 * Math.PI);\n      }\n      let axeX = (radius * Math.cos(nbr * index)).toFixed(1);\n      let axeY = (radius * Math.sin(nbr * index)).toFixed(1);\n      myStyle.left = \"calc(50% + \" + (axeX - 20) + \"px)\";\n      myStyle.top = \"calc(50% + \" + (axeY - 20) + \"px)\";\n      return myStyle;\n    },\n    getIconColor(index) {\n      let color;\n      try {\n        color = this.buttonList[index].buttonCfg.fontColor;\n      } catch (e) {\n        color = \"white\";\n      }\n      return { color };\n    }\n  }\n};\n</script>\n\n<style>\n.myButton {\n  margin: unset;\n  pointer-events: auto;\n  background: red;\n  height: 20px;\n  right: 38px;\n  min-width: 20px;\n  width: 20px;\n  position: absolute;\n  top: 68px;\n}\n\n.circle-spinal-circular-menu {\n  opacity: 0;\n\n  -webkit-transform: scale(0);\n  -moz-transform: scale(0);\n  transform: scale(0);\n\n  -webkit-transition: all 0.4s ease-out;\n  -moz-transition: all 0.4s ease-out;\n  transition: all 0.4s ease-out;\n}\n\n.opencircle-spinal-circular-menu {\n  opacity: 1;\n\n  -webkit-transform: scale(1);\n  -moz-transform: scale(1);\n  transform: scale(1);\n}\n\n.closecircle-spinal-circular-menu {\n  opacity: 0;\n\n  -webkit-transform: scale(0);\n  -moz-transform: scale(0);\n  transform: scale(0);\n}\n.circle-spinal-circular-menucenter {\n  left: \"0\";\n  top: \"0\";\n  position: \"absolute\";\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-circular-menu.28e0b764.css.map"}