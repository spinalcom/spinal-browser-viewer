{"mappings":"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;Y,I,C,iB;Y,I,C,c,E;Y,I,C,Y;Y,I,C,a,E;Y,I,C,iB;Y,I,C,e,E;Y,I,C,iB,E;Y,I,C,qB,E;Y,I,C,uB,E;Y,I,C,a;Y,I,C,oB,C;Q;Q,Q,S,M;Y,I,C,K;Y,I,I,I,G,I,I,C,S,Q,I,I,C,M,K;gB,M,I,C,Q,C,E,C,K;gB,O;Y;Y,I,C,S,O,O,Y;Q;Q,mB,S,C;Y,I,C,gB;Q;Q,gB,S,O;Y,C,G,mB,E,Q,Q,K,K,C;gB,I,C,c,I;gB,I,C,Y,I,W;gB,I,I,I,G,I,I,W,Q,I,I,C,W,K,I;Y;Q;Q,0B,S,C;Y,I,C,iB;Q;Q,4B,S,C;Y,I,C,mB;Q;Q,gB;Y,M,c,I,C,O,I,C,W,C,I,C,iB,E,E,I,C;Y,M,gB,I,C,O,I,C,W,C,I,C,mB,E,E,I,C;Y,I,C,a,M,I,C,U;Y,I,C,c,M,I,C,U;Y,I,C,e,M,I,C,S,I,C;YAyFf,IAAA,CAAA,iBAAA,MAAA,IAAA,CAAA,SAAA,IAAA,CAAA;YAEA,IAAA,eAAA,IAAA,CAAA,aAAA,IAAA,CAAA;gBACA,OAAA,IAAA,CAAA,cAAA,MAAA,IAAA,CAAA;YACA;YACA,IAAA,gBAAA,IAAA,CAAA,eAAA,IAAA,CAAA;gBACA,OAAA,IAAA,CAAA,cAAA,MAAA,IAAA,CAAA;YACA;YAGA,IAAA,CAAA,qBAAA,MAAA,IAAA,CAAA,QAAA;YACA,IAAA,CAAA,uBAAA,MAAA,IAAA,CAAA,QAAA;YAEA,IAAA,CAAA,oBAAA,IAAA,CAAA,qBACA,OAAA,CAAA,KAAA,IAAA,CAAA,mBAAA,QAAA,QAAA;YACA,IAAA,CAAA,kBAAA,IAAA,CAAA,mBAAA,OAAA,CAAA,KACA,IAAA,CAAA,qBAAA,QAAA,QAAA;YACA,IAAA,CAAA,iBAAA,IAAA,CAAA,mBAAA,OAAA,CAAA,KACA,IAAA,CAAA,qBAAA,QAAA,QAAA;YAGA,IAAA,CAAA,gBACA,KAAA;gBACA,QAAA,IAAA;gBACA,IAAA,CAAA,SAAA,OAAA,OAAA,YAAA;gBACA,QAAA,IAAA,gBAAA,IAAA;gBACA;;eAEA,GACA,IAAA,CAAA,WAAA,IAAA,CAAA,QAAA,IAAA,CAAA,YAAA,IAAA,MAAA,QACA,G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,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,I,G,W,I,G,I,S,a,I,G,I,I,U;Q,G,S;Y,O;gB,Q;gB,Q;gB,S;Y;Y,I;gB,S,I;Y;Q,G;Y,G,U;gB,I,G;a;S,E;Q,I,G;Q,G,S;Y,O;gB,Q;gB,Q;gB,S;Y;Y,I;gB,S,I;Y;Q,G;Y,G,U;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AApBA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,e;Y,O;gB,gB;gB,kB;Y;Q,G;Y,G,Y;gB,O;oB,Q;oB,gB;gB;Y,G;gB,G,U;oB,O;wB,Q;wB,O;wB,U;oB;gB,G;oB,G,Y;wB,O;4B,S,I;4B,Q;4B,S;4B,U;wB;wB,I;4B,S,I;wB;oB;iB,E;gB,I,G;gB,I,iB,G,U;oB,O;wB,U;wB,Q;oB;gB,G;oB,G,U;wB,O;4B,U;4B,O;wB;oB,G;wB,G,Y;4B,O;gC,S,I;gC,Q;gC,S;gC,U;4B;4B,I;gC,S,I;4B;wB;qB,E;oB,I,G;oB,G,U;wB,O;4B,U;4B,O;wB;oB,G;wB,G,U;4B,a;4B,O;gC,S;4B;wB,G;4B,I,G;yB;qB,E;oB,I,G;oB,G,U;wB,O;4B,U;4B,O;wB;oB,G;wB,G,Y;4B,O;gC,S,I;gC,Q;gC,S;gC,U;4B;4B,I;gC,S,I;4B;wB;qB,E;iB,E,K,I;gB,I,G;gB,I,mB,K,I,qB,K,C,I,iB,G,U;oB,G,S;wB,O;4B,S;wB;wB,I;4B,S,I;wB;oB,G;wB,I,G;qB;iB,E,K,I;gB,I,G;gB,I,iB,G,U;oB,O;wB,U;wB,Q;oB;gB,G;oB,G,U;wB,O;4B,U;wB;oB,G;wB,I,G,+F,I,G,I,mB,U;qB;oB,I,G;oB,G,U;wB,O;4B,U;wB;oB,G;wB,G,O;4B,a;wB,G;4B,I,G;yB;qB;oB,I,G;oB,G,U;wB,O;4B,U;wB;oB,G;wB,I,G,8F,I,G,I,qB,U;qB;iB,E,K,I;gB,I,G;gB,I,iB,G,U;oB,a;oB,O;wB,Q;oB;gB,G;oB,I,G;oB,G,O;wB,G,mB;4B,O;gC,O,I;gC,S;gC,S,I;gC,W;4B;4B,I;gC,U,I;gC,W,I;4B;wB;wB,I,G;wB,G,mB;4B,O;gC,O,I;gC,S;gC,S,I;gC,W;4B;4B,I;gC,U,I;gC,W,I;4B;wB;qB,E;iB,I,I;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf","sources":["node_modules/spinal-env-viewer-plugin-version/index.js","node_modules/spinal-env-viewer-context-menu-service/index.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextMenuService.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextApp.js","node_modules/spinal-env-viewer-context-menu-service/constants.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-plugin-version/src/OpenVersionButton.js","node_modules/spinal-env-viewer-plugin-version/src/utils.js","node_modules/spinal-env-viewer-plugin-version/src/vue/CompareVersion.vue","node_modules/spinal-env-viewer-plugin-version/src/vue/DbIdsSelector.vue"],"sourcesContent":["import { spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalForgeExtention } from \"spinal-env-viewer-panel-manager-service_spinalforgeextention\";\n\nimport { OpenVersionButton } from \"./src/OpenVersionButton\";\nimport Vue from 'vue'\nimport Vuetify from 'vuetify'\nimport CompareVersion from \"./src/vue/CompareVersion.vue\";\nexport const TOP_BAR_HOOK_NAME = 'GraphManagerTopBar';\n\nVue.use(Vuetify);\n\nspinalContextMenuService.registerApp( TOP_BAR_HOOK_NAME, new OpenVersionButton(), [7] );\nconst compareVersion =  SpinalForgeExtention.createExtention( {\n  name: 'CompareVersion',\n  vueMountComponent: Vue.extend( CompareVersion ),\n  panel: {\n    title: \"Compare BIM Version\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {\n    left: \"805px\",\n    width: \"430px\",\n    height: \"80vh\",\n    display: \"flex\"\n    \n  }\n} );\n\n\nSpinalForgeExtention.registerExtention( \"CompareVersion\", compareVersion );","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalContextMenuService = require(\"./SpinalContextMenuService\");\nconst SpinalContextApp = require(\"./SpinalContextApp\");\nconst Constant = require('./constants');\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalContextMenuService === \"undefined\")\n  G_root.spinal.spinalContextMenuService = new SpinalContextMenuService();\n\nmodule.exports = {\n  constants: Constant,\n  spinalContextMenuService: G_root.spinal.spinalContextMenuService,\n  SpinalContextApp,\n  install(Vue) {\n    Vue.prototype.$spinalContextMenuService =\n      G_root.spinal.spinalContextMenuService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport * as Q from 'q';\nvar debounce = require('lodash.debounce');\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} apps key = hookname, value array of apps\n * @class SpinalContextMenuService\n */\nclass SpinalContextMenuService {\n  /**\n   *Creates an instance of SpinalContextMenuService.\n   * @memberof SpinalContextMenuService\n   */\n  constructor() {\n    this.apps = {};\n    this.promiseByAppProfileId = {};\n    this.appRdy = Q.defer();\n    this.debouncedRdy = debounce(\n      () => {\n        this.appRdy.resolve();\n        this.debouncedRdy = () => {};\n      },\n      1000,\n      { leading: false, trailing: true }\n    );\n  }\n\n  // waitRdy() {\n  //   this.appRdy.promise;\n  // }\n\n  /**\n   * Return true if user has access to this appProfile\n   * @param appProfileId\n   * @return {PromiseLike<boolean > | Promise<boolean>}\n   */\n  async hasUserRight(appProfileId) {\n    this.debouncedRdy();\n    await window.spinal.spinalSystem.init();\n    const path =\n      '/etc/UserProfileDir/' + window.spinal.spinalSystem.getUser().username;\n    const userProfile = await window.spinal.spinalSystem.load(path);\n    let res = false;\n    if (userProfile) {\n      for (let i = 0; i < userProfile.appProfiles.length && !res; i++) {\n        res = ((1 << userProfile.appProfiles[i]) & appProfileId) !== 0;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * method to register the Application to a hook\n   *\n   * @param {string} hookname the place where is application button is located\n   * @param {SpinalContextApp} spinalContextApp the application\n   * @param {number} appProfileId id of the group that can use the application\n   * button\n   * @memberof SpinalContextMenuService\n   */\n  registerApp(hookname, spinalContextApp, appProfileId) {\n    this.debouncedRdy();\n    if (typeof appProfileId === 'undefined') {\n      console.warn(\n        'Deprecated: The usage of this function without the third' +\n          ' parameter appProfileId is deprecated your button is lock for admin' +\n          ' only until you set the third parameter'\n      );\n      appProfileId = 1;\n    }\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      appsInHooks = this.apps[hookname] = [];\n    }\n\n    if (!this.promiseByAppProfileId.hasOwnProperty(appProfileId)) {\n      this.promiseByAppProfileId[appProfileId] =\n        this.hasUserRight(appProfileId);\n    }\n\n    this.promiseByAppProfileId[appProfileId].then((hasAccess) => {\n      // push the app if not exist ans user has access to the button\n      if (hasAccess && appsInHooks.indexOf(spinalContextApp) === -1) {\n        appsInHooks.push(spinalContextApp);\n      }\n    });\n  }\n\n  /**\n   * method to get the applications registered to a hookname\n   *\n   * @param {String} hookname\n   * @param {object} option\n   * @memberof SpinalContextMenuService\n   * @returns {Promise} resolve : [spinalContextApp, ...]; reject: Error\n   */\n  async getApps(hookname, option) {\n    await this.appRdy.promise;\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      return Promise.resolve([]);\n    }\n    let promises = appsInHooks.map(async function (e, idx) {\n      try {\n        const res = await e.isShown(option);\n        return res === -1 ? -1 : e;\n      } catch (error) {\n        console.error(error);\n        return -1;\n      }\n    });\n    try {\n      const appRes = await Promise.all(promises);\n      return appRes.filter((itm) => itm !== -1);\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = SpinalContextMenuService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Interface like class to define a Contextual Application button\n * @see https://material.io/tools/icons/?style=baseline for material icons\n *\n * @class SpinalContextApp\n * @property {string} label=notset short name to be shown in the application\n * @property {string} description description of what the Application button do\n * @property {object} buttonCfg Object configuration of the Application button\n * @property {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n * @property {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n * @property {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n * @property {string} buttonCfg.fontColor=#FFFFFF font color of the button\n * @property {objet} [badgeCfg] Object configuration of the Application button badge\n * @property {string} badgeCfg.label string shown in a badge; if empty it's not shown\n * @property {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n * @property {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n */\nclass SpinalContextApp {\n  /**\n   * Creates an instance of SpinalContextApp.\n   * @param {string} label=notset short name to be shown in the application\n   * @param {string} description description of what the Application button do\n   * @param {object} buttonCfg Object configuration of the Application button\n   * @param {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n   * @param {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n   * @param {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n   * @param {string} buttonCfg.fontColor=#FFFFFF font color of the button\n   * @param {objet} [badgeCfg] Object configuration of the Application button badge\n   * @param {string} badgeCfg.label string shown in a badge; if empty it's not shown\n   * @param {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n   * @param {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n   * @memberof SpinalContextApp\n   */\n  constructor(label, description, buttonCfg, badgeCfg = {}) {\n    this.label = label || \"notset\";\n    this.description = description || \"\";\n    this.buttonCfg = {\n      icon: buttonCfg.icon || \"tab\",\n      icon_type: buttonCfg.icon_type || \"in\",\n      backgroundColor: colorHash(buttonCfg.backgroundColor || \"#0000FF\"),\n      fontColor: colorHash(buttonCfg.fontColor || \"#FFFFFF\")\n    };\n\n    this.badgeCfg = {\n      label: badgeCfg.label || \"\",\n      backgroundColor: colorHash(badgeCfg.backgroundColor || \"#FF0000\"),\n      fontColor: colorHash(badgeCfg.fontColor || \"#FFFFFF\")\n    };\n  }\n\n  /**\n   * Method called by `SpinalContextMenuService.getApps`\n   * to filter the Application button to show in the context hook\n   *\n   * @param {object} option\n   * @memberof SpinalContextApp\n   * @returns {Promise} Resolve: not shown if === -1;\n   */\n  isShown(option) {}\n\n  /**\n   * Method to call on click of the application button\n   *\n   * @param {object} option {}\n   * @memberof SpinalContextApp\n   */\n  action(option) {}\n}\n\nmodule.exports = SpinalContextApp;\n\nfunction colorHash(color) {\n  if (color[0] === \"#\") return color;\n  return \"#\" + color;\n}\n","\n\nmodule.exports = {\n  ADMINISTRATEUR: 'ADMINISTRATEUR',\n  MAINTENEUR: 'MAINTENEUR',\n  INTEGRATEUR: 'INTEGRATEUR',\n  ASSET_MANAGEUR: 'ASSET MANAGER',\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalContextApp } from 'spinal-env-viewer-context-menu-service';\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { loadModelPtr } from \"./utils\";\n\nconst { spinalPanelManagerService } = require( \"spinal-env-viewer-panel-manager-service\" );\n\nexport class OpenVersionButton extends SpinalContextApp {\n  \n  constructor() {\n    super( 'Open Model Manager', 'Open Model Manager', {\n      icon: 'sort',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    } );\n    \n    this.action = this.openPanel.bind( this );\n  }\n  \n  isShown( option ) {\n    return Promise.resolve( true );\n  }\n  \n \n  \n  openPanel(  ) {\n    const context = SpinalGraphService.getContext( 'BimFileContext' );\n    const promises = [];\n    \n    SpinalGraphService.getChildrenInContext( context.info.id.get(), context.info.id.get() )\n      .then( children => {\n       \n        spinalPanelManagerService.openPanel( \"CompareVersion\", {bimFiles: children} );\n      \n  \n      } )\n  }\n}","import {\n  FileSystem,\n  File,\n  Ptr\n} from 'spinal-core-connectorjs_type';\n\nconst mapModelDictionary = new Map();\n\nexport function loadModelPtr( model ) {\n  if (model instanceof File) {\n    return loadModelPtr( model._ptr );\n  }\n  if (!(model instanceof Ptr)) {\n    throw new Error( 'loadModelPtr must take Ptr as parameter' );\n  }\n  if (!model.data.value && model.data.model) {\n    return Promise.resolve( model.data.model );\n  } else if (!model.data.value) {\n    throw new Error( 'Trying to load a Ptr to 0' );\n  }\n  \n  if (mapModelDictionary.has( model.data.value )) {\n    return mapModelDictionary.get( model.data.value );\n  }\n  if (typeof FileSystem._objects[model.data.value] !== 'undefined') {\n    const promise = Promise.resolve( FileSystem._objects[model.data.value] );\n    mapModelDictionary.set( model.data.value, promise );\n    return promise;\n  }\n  const promise = new Promise( ( resolve, reject ) => {\n    model.load( m => {\n      if (!m) {\n        mapModelDictionary.delete( model.data.value );\n        reject( new Error( 'Error in load Ptr' ) );\n      } else {\n        resolve( m );\n      }\n    } );\n    \n  } );\n  mapModelDictionary.set( model.data.value, promise );\n  return promise;\n}\n\n\n\n\nexport default loadModelPtr;","<template>\n    <div class=\"compare-bim-panel\">\n        <v-container grid-list-md text-xs-center>\n\n            <v-layout wrap align-center>\n                <v-flex xs12 sm6 d-flex>\n\n                    <v-select\n                            :items=\"items\"\n                            :dark=\"true\"\n                            label=\"Model\"\n                            @input=\"onBIMFileSelected\"\n                            :attach=\"true\"\n                    ></v-select>\n\n                </v-flex>\n\n\n                <v-flex d-flex xs12 v-if=\"displayVersion\">\n\n                    <v-flex d-flex xs4>\n                        <v-select\n                                :items=\"versionNum\"\n                                :dark=\"true\"\n                                label=\"Nouvelle version\"\n                                @input=\"onPrimaryVersionSelected\"\n                                :attach=\"true\"\n                        ></v-select>\n                    </v-flex>\n                    <v-flex d-flex xs4>\n                        <v-icon class=\"compare-icon\" large>\n                            compare_arrows\n                        </v-icon>\n                    </v-flex>\n                    <v-flex d-flex xs4>\n                        <v-select\n                                :items=\"versionNum\"\n                                :dark=\"true\"\n                                label=\"Anciene version\"\n                                @input=\"onSecondaryVersionSelected\"\n                                :attach=\"true\"\n                        ></v-select>\n                    </v-flex>\n\n                </v-flex>\n\n                <v-flex v-if=\"primaryVersion !== 0 && secondaryVersion !== 0\n                  && !comparisonDone \">\n                    <v-btn color=\"blue\" @click=\"compareVersion\"> Comparer\n                    </v-btn>\n                </v-flex>\n                <v-flex d-flex xs12 v-if=\"comparisonDone\">\n                    <v-flex d-flex>\n                        Nombre object de la premiere version :\n                        {{primaryExternalIds.length}}\n                    </v-flex>\n                    <v-flex d-flex>\n                        <div class=\"empty-space\">\n                            test version comment\n                        </div>\n                    </v-flex>\n                    <v-flex d-flex>\n                        Nombre object de la seconde version :\n                        {{secondaryExternalIds.length}}\n                    </v-flex>\n\n                </v-flex>\n                <v-flex xs12 class=\"comparison-summary\" v-if=\"comparisonDone\">\n                    Resumé de comparaison\n                    <div>\n\n                        <db-ids-selector :ids=\"removedExternalId\"\n                                         title=\"Nombre object supprimé\"\n                                         :model=\"secondModel\"\n                                         typeIds=\"removed\"\n                                         @select=\"select\"\n                                         @isolate=\"isolate\"\n                        />\n<!--\n                        <db-ids-selector :ids=\"sameExternalIds\"\n                                         title=\"Nombre object conservé \"\n                                         :model=\"firstModel\"\n                                         typeIds=\"same\"\n                                         @select=\"select\"\n                                         @isolate=\"isolate\"\n                        />\n-->\n                        <db-ids-selector :ids=\"newExternalIds\"\n                                         title=\"Nombre de nouveaux object\"\n                                         :model=\"firstModel\"\n                                         typeIds=\"new\"\n                                         @select=\"select\"\n                                         @isolate=\"isolate\"\n                        />\n                    </div>\n                </v-flex>\n            </v-layout>\n\n        </v-container>\n    </div>\n</template>\n<script>\n  import { loadModelPtr } from \"../utils\";\n  import DbIdsSelector from \"./DbIdsSelector.vue\";\n\n  export default {\n    name: \"CompareVersion\",\n    components: { DbIdsSelector },\n    data: function () {\n      return {\n        viewer: null,\n        dialog: false,\n        items: [],\n        bimFiles: [],\n        selectedModel: \"\",\n        displayVersion: false,\n        versionList: [],\n        nbVersion: 0,\n        versionNum: [],\n        versionExcludeNum: [],\n        primaryVersion: 0,\n        secondaryVersion: 0,\n        comparisonDone: false,\n        primaryDbids: [],\n        secondaryDbids: [],\n        primaryExternalIds: [],\n        secondaryExternalIds: [],\n        firstModel: null,\n        secondModel: null,\n        removedExternalId: [],\n        sameExternalIds: [],\n        newExternalIds: [],\n        removedId: [],\n        sameId: [],\n        newId: [],\n        externalIdMapping: {}\n      }\n    },\n    computed: {\n      availableVersionNum: function () {\n        this.versionNum.filter()\n      }\n    },\n    methods: {\n\n      init: function ( option ) {\n        this.dialog = true;\n        this.items = [];\n        this.bimFiles = option.bimFiles;\n        this.selectedModel = \"\";\n        this.displayVersion = false;\n        this.versionList = [];\n        this.nbVersion = 0;\n        this.versionNum = [];\n        this.comparisonDone = false;\n        this.primaryDbids = [];\n        this.secondaryDbids = [];\n        this.primaryExternalIds = [];\n        this.secondaryExternalIds = [];\n        this.firstModel = null;\n        this.externalIdMapping = {}\n      },\n      opened: function ( option ) {\n        this.init( option );\n\n        for (let i = 0; i < this.bimFiles.length; i++) {\n          this.items.push( { text: this.bimFiles[i].name.get(), value: i } );\n        }\n\n        this.viewer = window.spinal.ForgeViewer.viewer;\n      },\n      onBIMFileSelected: function ( e ) {\n        this.selectedModel = e;\n      },\n      getVersionList: function ( bimFile ) {\n        loadModelPtr( bimFile.element.ptr ).then( elt => {\n          this.versionList = elt.versionLst;\n          this.nbVersion = elt.versionLst.length;\n          for (let i = 0; i < elt.versionLst.length; i++) {\n            this.versionNum.push( i + 1 );\n          }\n        } )\n      },\n      onPrimaryVersionSelected: function ( e ) {\n        this.primaryVersion = e;\n      },\n      onSecondaryVersionSelected: function ( e ) {\n        this.secondaryVersion = e;\n      },\n      compareVersion: async function () {\n\n        const primaryPath = this.getSVF(\n          this.versionList[this.primaryVersion - 1],\n          this.primaryVersion\n        );\n\n        const secondaryPath = this.getSVF(\n          this.versionList[this.secondaryVersion - 1],\n          this.secondaryVersion\n        );\n\n        this.firstModel = await this.loadModel( primaryPath );\n        this.secondModel = await this.loadModel( secondaryPath );\n\n\n        this.primaryDbids = await this.getDBIDs( this.firstModel );\n        this.secondaryDbids = await this.getDBIDs( this.secondModel );\n\n        let primaryProms = this.primaryDbids.map( dbId => {\n          return this.getExternalId( dbId, this.firstModel );\n        } );\n        let secondaryProm = this.secondaryDbids.map( dbId => {\n          return this.getExternalId( dbId, this.secondModel );\n        } );\n\n\n        this.primaryExternalIds = await this.promAll( primaryProms );\n        this.secondaryExternalIds = await this.promAll( secondaryProm );\n\n        this.removedExternalId = this.secondaryExternalIds\n          .filter( id => this.primaryExternalIds.indexOf( id ) === -1 );\n        this.sameExternalIds = this.primaryExternalIds.filter( id =>\n          this.secondaryExternalIds.indexOf( id ) !== -1 );\n        this.newExternalIds = this.primaryExternalIds.filter( id =>\n          this.secondaryExternalIds.indexOf( id ) === -1 );\n\n\n        this.mapExternalId()\n          .then( () => {\n            console.log( \"mapping done\" );\n            this.viewer = window.spinal.ForgeViewer.viewer;\n            console.log('mapping ici ', this);\n              /*  this.viewer.hide( this.sameId, this.firstModel );\n               this.viewer.hide( this.sameId, this.secondModel );\n               */\n            this.colorModel( this.newIds, this.firstModel, new THREE.Vector4(\n              0, 255, 0, 0.7 ) );\n            this.colorModel( this.removedId, this.secondModel, new\n            THREE.Vector4( 255, 0, 0, 0.7 ) );\n            window.newId = this.newIds;\n            window.removedId = this.removedId;\n\n\n            this.viewer.impl.invalidate();\n            this.comparisonDone = true;\n          } )\n\n      },\n      colorModel( ids, model, color ) {\n\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n\n          if (id !== 1) {\n            this.viewer.setThemingColor(\n              id,\n              color,\n              model,\n              false\n            );\n          }\n\n        }\n      },\n      mapExternalId:  function () {\n        return new Promise ( async (resolve, reject) => {\n          try {\n            this.removedId = await this.getAllDbIdFromExternalId( this.removedExternalId,\n              this.secondModel );\n            this.newIds = await this.getAllDbIdFromExternalId( this.newExternalIds,\n              this.firstModel );\n            resolve();\n          } catch ( e ) {\n            reject(e);\n          }\n        })\n\n\n      },\n\n      async promAll( proms ) {\n        const res = [];\n        for (let i = 0; i < proms.length; i++) {\n          try {\n\n            res.push( await proms[i] );\n          } catch ( e ) {\n            console.error( e );\n          }\n        }\n\n        return res;\n      },\n\n      getExternalId: function ( dbId, model ) {\n        return new Promise( ( resolve, reject ) => {\n          model.getProperties( dbId, ( props ) => {\n            resolve( props.externalId );\n          }, reject )\n        } )\n      },\n\n      getAllDbIdFromExternalId: function ( externalIds, model ) {\n        const proms = [];\n        for (let i = 0; i < externalIds.length; i++) {\n          proms.push( this.getDbIdFromExternalId( externalIds[i], model ) )\n        }\n\n        return Promise.all( proms )\n      },\n      getDbIdFromExternalId: function ( externalId, model ) {\n        return new Promise( ( resolve, reject ) => {\n          if (typeof this.externalIdMapping[model.id] === \"undefined\") {\n            model.getExternalIdMapping( (function external( res ) {\n              this.externalIdMapping[model.id] = res;\n              resolve( res[externalId] );\n            }).bind( this ), reject );\n          } else\n            resolve( this.externalIdMapping[model.id][externalId] );\n        } )\n      },\n\n      getAllDbIdsRec( model, callback ) {\n        let cbCount = 0; // count pending callbacks\n        const components = []; // store the results\n        let tree; // the instance tree\n\n        function getLeafComponentsRec( parent ) {\n          cbCount++;\n          if (tree.getChildCount( parent ) !== 0) {\n            tree.enumNodeChildren( parent, function ( children ) {\n              getLeafComponentsRec( children );\n            }, false );\n          } else\n            components.push( parent );\n          if (--cbCount === 0) callback( components );\n        }\n\n        model.getObjectTree( function ( objectTree ) {\n          tree = objectTree;\n          var allLeafComponents = getLeafComponentsRec( tree.getRootId() );\n        } );\n      },\n\n      getDBIDs( model ) {\n        return new Promise( resolve => {\n          this.getAllDbIdsRec( model, resolve );\n        } )\n      },\n\n      loadModel( path ) {\n        return new Promise( ( resolve, reject ) => {\n          const eventListener = ( e ) => {\n            this.viewer.removeEventListener( eventListener );\n            resolve( e.model )\n          };\n\n          this.viewer.addEventListener( Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n            eventListener.bind( this ) );\n\n          this.viewer.loadModel( path, {}, () => {}, ( e ) => {\n            this.viewer.removeEventListener( eventListener );\n            reject( e );\n\n          } );\n        } )\n      },\n      getSVF: function ( version ) {\n        const items = version.items;\n\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i];\n          if (item.path.get().indexOf( 'svf' ) !== -1) {\n            //TODO change with env\n            return \"http://\" + window.location.host + item.path.get()\n          }\n        }\n      },\n\n      isolate: function ( event ) {\n        let ids;\n        switch ( event.typeIds ) {\n          case \"new\":\n            ids= this.newIds;\n            break;\n          case \"removed\":\n            ids = this.removedId;\n            break;\n          default:\n            ids = this.sameExternalIds;\n        }\n\n        if (event.model.id === 2){\n          this.hideModel(this.secondModel);\n        }\n        else {\n          this.hideModel(this.firstModel)\n        }\n\n        console.log( \"isolate\", event, this.removedId, this.newIds );\n        this.viewer.isolate( ids, event.model );\n\n      },\n      select: function ( event ) {\n        let ids;\n        switch ( event.typeIds ) {\n          case \"new\":\n            ids= this.newIds;\n            break;\n          case \"removed\":\n            ids = this.removedId;\n            break;\n          default:\n            ids = this.sameExternalIds;\n        }\n        if (event.model.id === 2){\n          this.hideModel(this.secondModel);\n        }\n        else {\n          this.hideModel(this.firstModel)\n        }\n        this.viewer.select( ids, event.model,\n          Autodesk.Viewing.SelectionMode.MIXED);\n      },\n      hideModel(model){\n        this.viewer.hideModel(model.id);\n        if (model.id === 2)\n          this.viewer.showModel(3);\n        else\n          this.viewer.showModel(2);\n      }\n    },\n    watch: {\n      selectedModel: {\n        handler: function ( value ) {\n          this.displayVersion = value !== \"\";\n          if (value !== \"\") {\n            const index = parseInt( value );\n            if (!isNaN( index ))\n              this.getVersionList( this.bimFiles[index] )\n          }\n\n        },\n        immediate: true\n      }\n    }\n  }\n</script>\n<style>\n    .compare-bim-panel {\n        height: calc(100% - 19px);\n        margin: 10px;\n    }\n\n    .compare-bim-panel * {\n        box-sizing: border-box;\n    }\n\n    .comparison-summary {\n        border: 1px solid white;\n        margin: 8px;\n        padding: 8px;\n\n    }\n\n    .empty-space {\n        visibility: hidden;\n    }\n\n    .compare-icon {\n        display: inline-flex;\n    }\n</style>\n\n","<template>\n    <div>\n        {{title}} :\n        {{ids.length}}\n        <v-btn flat icon color=\"white\" @click=\"select\">\n            <v-icon>select_all</v-icon>\n        </v-btn>\n        <v-btn flat icon color=\"white\" @click=\"isolate\">\n            <v-icon>settings_overscan</v-icon>\n        </v-btn>\n    </div>\n</template>\n\n<script>\n  export default {\n    name: \"DbIdsSelector\",\n    props: {\n      title: {type: String, required: true},\n      ids: {type: Array, required: true},\n      model: {type: Object, required: true},\n      typeIds : {type: String, required: true}\n    },\n    methods:{\n      isolate: function () {\n        this.$emit('isolate', {ids: this.ids, model: this.model, typeIds:\n          this.typeIds})\n      },\n      select: function (){\n        this.$emit('select', {ids: this.ids, model: this.model, typeIds: this.typeIds})\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-version.d44c28fc.js.map"}