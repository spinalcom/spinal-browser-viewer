{"mappings":"A;;;;A;;;;;;;A;;;;;;;;;A;;;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;;A;;;;;A;;;;;;A;;;;;A;;;;A;;;;;A;;;;;A;;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-dashboard-standard/vue/linkToDashBoardDialog.vue","node_modules/spinal-env-viewer-plugin-dashboard-standard/vue/linkAutoWithDashboardDialog.vue","node_modules/spinal-env-viewer-plugin-dashboard-standard/vue/CalculParams.vue","node_modules/spinal-env-viewer-plugin-dashboard-standard/vue/globalCalcul.vue"],"sourcesContent":["<template>\n  <div>\n    <md-dialog class=\"DashboardDialog\"\n               :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Select a dashboard To link</md-dialog-title>\n      <md-dialog-content>\n\n        <div v-if=\"hasDash\"\n             class=\"choicesEmpty\">\n\n          This element already has a dashboard, the old one will be removed !\n        </div>\n\n        <div class=\"md-layout-item\">\n          <md-field>\n            <md-select v-if=\"dashboards.length\"\n                       v-model=\"dashboardContextSelected\"\n                       placeholder=\"Select context\">\n              <md-option v-for=\"(d,index) in dashboards\"\n                         :key=\"index\"\n                         :value=\"d.id\">{{d.name}}</md-option>\n            </md-select>\n          </md-field>\n        </div>\n\n        <!-- <div class=\"contextDiv\">\n          <span class=\"md-caption\">Select a Context</span>\n          <md-radio class=\"md-layout-item md-size-30 md-primary\"\n                    v-for=\"(dashboard,index) in dashboards\"\n                    :key=\"index\"\n                    v-model=\"dashboardContextSelected\"\n                    :value=\"dashboard.id\">{{dashboard.name}}</md-radio>\n        </div> -->\n\n        <div class=\"dashboardDiv\">\n          <span class=\"md-caption\">Select a dashboard</span>\n\n          <md-radio class=\"md-layout-item md-size-30 md-primary\"\n                    v-for=\"(choice,index) in choices\"\n                    :key=\"index\"\n                    v-model=\"radio\"\n                    :value=\"choice.id.get()\">{{choice.name.get()}}</md-radio>\n\n          <div class=\"choicesEmpty\"\n               v-if=\"choices.length == 0 && dashboardContextSelected.length !== 0\">\n            There is no Dahboard created for this type\n          </div>\n        </div>\n\n      </md-dialog-content>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\"\n                   :disabled=\"!(radio.length > 0)\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport { dashboardService } from \"spinal-env-viewer-dashboard-standard-service\";\n\nexport default {\n  name: \"linkToDashBoardDialog\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      selectedNode: null,\n      context: null,\n      showDialog: true,\n      choices: [],\n      radio: \"\",\n      hasDash: false,\n      dashboards: [],\n      dashboardContextSelected: \"\"\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.selectedNode = option.selectedNode;\n      this.hasDash = await dashboardService.hasDashBoard(\n        option.selectedNode.id.get()\n      );\n\n      this.dashboards = this.lstToJson(\n        await dashboardService.getAllDashboardContext()\n      );\n    },\n    removed(option) {\n      if (option.closeResult) {\n        dashboardService.linkToDashboard(\n          this.dashboardContextSelected,\n          this.selectedNode.id.get(),\n          this.radio\n        );\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") this.onFinised({ closeResult });\n    },\n    lstToJson(lst) {\n      let json = [];\n\n      for (let loop = 0; loop < lst.length; loop++) {\n        json.push(lst[loop].get());\n      }\n\n      return json;\n    }\n  },\n  watch: {\n    dashboardContextSelected: async function(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.choices = await dashboardService.getDashboardByType(\n          newValue,\n          this.selectedNode.type.get()\n        );\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.DashboardDialog {\n  width: calc(45%);\n}\n.choicesEmpty {\n  color: red;\n  width: 100%;\n  margin-bottom: 10px;\n  display: block;\n}\n\n.contextDiv {\n  width: 100%;\n  min-height: 10px;\n  border-bottom: 1px solid gray;\n  display: block;\n  margin-bottom: 10px;\n  padding-bottom: 10px;\n}\n\n.dashboardDiv {\n  width: 100%;\n  display: block;\n  min-height: 10px;\n}\n\n.dashboardDiv span.md-caption,\n.contextDiv span.md-caption {\n  display: block;\n  font-size: 13px;\n}\n\n.md-menu-content {\n  z-index: 110 !important;\n}\n</style>\n","<template>\n  <div>\n    <md-dialog class=\"dialogContainer\"\n               :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Link Elements To Dashboard</md-dialog-title>\n      <md-dialog-content>\n\n        <!-- <div class=\"md-layout md-gutter\">\n          <div class=\"md-layout-item md-size-50\">\n            <div class=\"md-layout-item\">\n              <md-field>\n                <label for=\"font\">Font</label>\n                <md-select v-model=\"elementSelected\"\n                           name=\"font\"\n                           id=\"font\">\n                  <md-option v-for=\"(element,index) in children\"\n                             :key=\"index\"\n                             :value=\"element.type\">{{element.name}}</md-option>\n                </md-select>\n              </md-field>\n            </div>\n          </div>\n\n          <div class=\"md-layout-item md-size-50\">\n\n          </div>\n        </div> -->\n\n        <div class=\"md-layout md-gutter\"\n             v-for=\"(data,index) in allData\"\n             :key=\"index\">\n\n          <div class=\"md-layout-item md-size-30 title\">{{data.name}}</div>\n\n          <div class=\"md-layout-item md-size-30\">\n            <md-field>\n              <md-select v-model=\"data.contextSelected\"\n                         :name=\"data.type\"\n                         id=\"context\"\n                         @md-closed=\"getContextDashboard(data)\">\n                <md-option value=\"none\">None</md-option>\n                <md-option v-for=\"(element,index) in dashboards\"\n                           :key=\"index\"\n                           :value=\"element.id.get()\">{{element.name.get()}}</md-option>\n              </md-select>\n            </md-field>\n          </div>\n\n          <div class=\"md-layout-item md-size-30\">\n            <md-field v-if=\"data.contextSelected != 'none' && data.dashboards.length > 0\">\n              <md-select v-model=\"data.dasboardSelected\"\n                         :name=\"dash\"\n                         id=\"dash\">\n                <md-option value=\"none\">None</md-option>\n                <md-option v-for=\"(dash,index) in data.dashboards\"\n                           :key=\"index\"\n                           :value=\"dash.id.get()\">{{dash.name.get()}}</md-option>\n              </md-select>\n            </md-field>\n\n            <md-field v-if=\"data.contextSelected != 'none' && data.dashboards.length == 0\">\n              <span class=\"md-caption noDashboard\">No dashboard for this type</span>\n            </md-field>\n\n          </div>\n\n        </div>\n\n      </md-dialog-content>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\nimport {\n  dashboardVariables,\n  dashboardService\n} from \"spinal-env-viewer-dashboard-standard-service\";\n\nimport { find } from \"../js/find\";\n\nconst relations = [\"hasContext\"].concat(\n  ContextGeographicService.constants.GEOGRAPHIC_RELATIONS\n);\n\nexport default {\n  name: \"linkAutoWithDashboardDialog\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      selectedNode: null,\n      context: null,\n      showDialog: true,\n      allData: [],\n      dashboards: []\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.context = option.context;\n      this.selectedNode = option.selectedNode;\n      this.allData = this.getChildrenElement(this.selectedNode.type.get());\n      this.dashboards = await dashboardService.getAllDashboardContext();\n    },\n    removed(option) {\n      let items = this.getItemToLink();\n\n      if (option.closeResult) {\n        items.forEach(el => {\n          find(this.selectedNode.id.get(), relations, node => {\n            return node.info.type.get() === el.type;\n          }).then(nodes => {\n            for (let i = 0; i < nodes.length; i++) {\n              dashboardService.linkToDashboard(\n                el.contextSelected,\n                nodes[i].info.id.get(),\n                el.dasboardSelected\n              );\n            }\n          });\n        });\n      }\n\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") this.onFinised({ closeResult });\n    },\n    getChildrenElement(type) {\n      let geographicTypesOrder =\n        ContextGeographicService.constants.GEOGRAPHIC_TYPES_ORDER;\n\n      let children = dashboardVariables.GEOGRAPHIC_TYPES.slice(\n        geographicTypesOrder.indexOf(type)\n      ).filter(\n        el => el.type !== ContextGeographicService.constants.EQUIPMENT_TYPE\n      );\n\n      children.forEach(el => {\n        el[\"dasboardSelected\"] = \"none\";\n        el[\"contextSelected\"] = \"none\";\n        el[\"dashboards\"] = [];\n      });\n\n      return children;\n    },\n    async getContextDashboard(data) {\n      if (data.contextSelected !== \"none\") {\n        data.dashboards = await dashboardService.getDashboardByType(\n          data.contextSelected,\n          data.type\n        );\n      }\n    },\n    getItemToLink() {\n      return this.allData.filter(\n        el => el.contextSelected !== \"none\" && el.dasboardSelected !== \"none\"\n      );\n    }\n  }\n};\n</script>\n\n<style scoped>\n.dialogContainer {\n  width: calc(50%) !important;\n}\n\n.md-menu-content {\n  z-index: 110;\n}\n\n.md-caption.noDashboard {\n  color: red;\n}\n</style>\n","<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title style=\"text-align : center\">Parameter {{name}} calculation</md-dialog-title>\n    <md-dialog-content>\n\n      <!-- <div class=\"endpointTypeDiv md-layout-item md-layout md-gutter\"\n           v-for=\"(dash,index) in dashEndpoints\"\n           :key=\"index\">\n\n        <div class=\"md-layout-item md-size-100\">\n          <span class=\"dashName md-title\">{{dash.name}}</span>\n\n          <md-radio class=\"md-primary\"\n                    v-for=\"(rule, index) in rules\"\n                    :key=\"index\"\n                    v-model=\"dash.dash_cal_rule\"\n                    :value=\"index\">{{ rule }}</md-radio>\n        </div>\n\n      </div> -->\n\n      <div>\n        <md-field>\n          <label for=\"item\">Select an item</label>\n          <md-select v-model=\"endpointTypeSelected\"\n                     name=\"item\"\n                     id=\"item\">\n            <md-option v-for=\"(dash,index) in dashEndpoints\"\n                       :key=\"index\"\n                       :value=\"dash.id\">{{dash.name}}</md-option>\n          </md-select>\n\n        </md-field>\n      </div>\n\n      <div v-if=\"endpointTypeSelected\">\n        <span class=\"dashName md-title\">Choose :</span>\n\n        <md-radio class=\"md-primary\"\n                  v-for=\"(rule, index) in rules\"\n                  :key=\"index\"\n                  v-model=\"ruleSelected\"\n                  :value=\"index\">{{ rule }}</md-radio>\n      </div>\n\n      <div v-if=\"referenceSelect()\">\n        <md-field>\n          <label for=\"reference\">Select a reference</label>\n          <md-select v-model=\"reference\"\n                     name=\"reference\"\n                     id=\"reference\">\n            <md-option v-for=\"(ref,index) in children\"\n                       :key=\"index\"\n                       :value=\"ref.id.get()\">{{ref.name.get()}}</md-option>\n          </md-select>\n\n        </md-field>\n      </div>\n\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"formNotValid()\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport {\n  dashboardVariables,\n  dashboardService\n} from \"spinal-env-viewer-dashboard-standard-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\n\nexport default {\n  name: \"parameterDashboardCalculation\",\n  props: [\"onFinised\"],\n  data() {\n    this.id = null;\n    return {\n      children: [],\n      endpointTypeSelected: null,\n      ruleSelected: dashboardVariables.CALCULATION_RULES.average,\n      reference: \"\",\n      showDialog: true,\n      name: \"\",\n      dashEndpoints: [],\n      rules: Object.keys(dashboardVariables.CALCULATION_RULES)\n    };\n  },\n  methods: {\n    opened(option) {\n      this.name = option.name.get();\n      this.id = option.id.get();\n\n      SpinalGraphService.getChildren(option.id.get(), [\n        dashboardVariables.ENDPOINT_RELATION_NAME\n      ]).then(element => {\n        element.forEach(el => {\n          this.dashEndpoints.push({\n            id: el.id.get(),\n            name: el.type.get()\n            // ruleSelected: el.dash_cal_rule\n            //   ? el.dash_cal_rule.rule.get()\n            //   : dashboardVariables.CALCULATION_RULES.average,\n            // reference:\n            //   el.dash_cal_rule && el.dash_cal_rule.ref\n            //     ? el.dash_cal_rule.ref.get()\n            //     : null\n          });\n        });\n      });\n    },\n    removed(option) {\n      if (option) {\n        if (\n          this.ruleSelected !== dashboardVariables.CALCULATION_RULES.reference\n        ) {\n          this.reference = null;\n        }\n\n        dashboardService.addCalculationRule(\n          this.id,\n          this.endpointTypeSelected,\n          this.ruleSelected,\n          this.reference\n        );\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n    formNotValid() {\n      return (\n        this.endpointTypeSelected === null ||\n        (this.ruleSelected === dashboardVariables.CALCULATION_RULES.reference &&\n          this.reference === null)\n      );\n    },\n    getAllChildren() {\n      SpinalGraphService.getChildren(\n        this.id,\n        ContextGeographicService.constants.GEOGRAPHIC_RELATIONS_ORDER\n      ).then(children => {\n        this.children = children;\n      });\n    },\n    referenceSelect() {\n      return (\n        this.ruleSelected === dashboardVariables.CALCULATION_RULES.reference\n      );\n    }\n  },\n  watch: {\n    ruleSelected: function() {\n      if (this.ruleSelected === dashboardVariables.CALCULATION_RULES.reference)\n        this.getAllChildren();\n    },\n    endpointTypeSelected: function(newValue) {\n      let dashInfo = SpinalGraphService.getInfo(newValue);\n      if (dashInfo.dash_cal_rule) {\n        this.ruleSelected = dashInfo.dash_cal_rule.rule.get();\n        if (dashInfo.dash_cal_rule.ref) {\n          this.reference = dashInfo.dash_cal_rule.ref.get();\n          console.log(\"this.reference\", this.reference);\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.dashName {\n  display: block;\n  margin-bottom: 5px;\n  text-align: center;\n}\n\n.endpointTypeDiv {\n  padding-left: 30px !important;\n  margin-right: 15px;\n  /* border-right: 1px dashed gray;\n  border-bottom: 1px dashed gray; */\n}\n</style>\n","<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"globalCalculDialog\">\n    <md-dialog-title>Config Calulation rules</md-dialog-title>\n\n    <md-dialog-content class=\"dialogContainer\">\n\n      <md-content class=\"paramContainer md-layout\">\n        <md-content class=\"md-layout-item md-size-50 paramDiv\">\n          <md-subheader>Nodes</md-subheader>\n          <md-list class=\"nodeDiv md-scrollbar\">\n            <md-list-item v-for=\"(element,index) in elementsWithDashboard\"\n                          :key=\"index\">\n              <md-checkbox v-model=\"element.checked\"\n                           class=\"md-primary\" />\n              <span class=\"md-list-item-text\">{{element.node.info.name.get()}}</span>\n            </md-list-item>\n          </md-list>\n        </md-content>\n\n        <md-content class=\"md-layout-item md-size-50 paramDiv\">\n          <md-subheader>Rules</md-subheader>\n\n          <md-field>\n            <label for=\"item\">Select a type</label>\n            <md-select v-model=\"endpointTypeSelected\"\n                       name=\"item\"\n                       id=\"item\">\n              <md-option v-for=\"(endpointType,index) in endpointsTypes\"\n                         :key=\"index\"\n                         :value=\"endpointType.type\">{{endpointType.name}}</md-option>\n            </md-select>\n\n          </md-field>\n\n          <md-content class=\"ruleDiv md-scrollbar\">\n            <md-list>\n              <md-list-item v-for=\"(rule, index) in rules\"\n                            :key=\"index\">\n                <md-radio class=\"md-primary\"\n                          v-model=\"ruleSelected\"\n                          :value=\"index\">{{ rule }}</md-radio>\n              </md-list-item>\n            </md-list>\n\n          </md-content>\n          <md-button v-tooltip=\"'add to list'\"\n                     class=\"md-fab md-fixed md-mini md-primary\"\n                     style=\"top: calc(45%); right: 20px;\"\n                     @click=\"addElementSelected\">\n            <md-icon>add</md-icon>\n          </md-button>\n        </md-content>\n      </md-content>\n\n      <md-content class=\"tableContainer\">\n        <md-table v-model=\"elementsSelected\"\n                  md-fixed-header>\n          <md-table-toolbar>\n            <h1 class=\"md-title\">Elements</h1>\n          </md-table-toolbar>\n\n          <md-table-row slot=\"md-table-row\"\n                        slot-scope=\"{ item }\">\n            <md-table-cell md-label=\"Name\">{{ item.name }}</md-table-cell>\n            <md-table-cell md-label=\"Endpoint Name\">{{ item.endpoint }}</md-table-cell>\n            <md-table-cell md-label=\"Calculation\">{{ item.rule }}</md-table-cell>\n            <md-table-cell md-label=\"\">\n              <md-button class=\"md-icon-button md-dense md-primary\"\n                         @click=\"removeFromList(item.node)\">\n                <md-icon>delete</md-icon>\n              </md-button>\n\n            </md-table-cell>\n          </md-table-row>\n        </md-table>\n      </md-content>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"elementsSelected.length == 0\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n\n</template>\n\n<script>\nimport listChoices from \"../js/choice\";\nimport {\n  dashboardVariables,\n  dashboardService\n} from \"spinal-env-viewer-dashboard-standard-service\";\nimport { find } from \"../js/find\";\nimport geographicService from \"spinal-env-viewer-context-geographic-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nexport default {\n  name: \"globalCalculDialog\",\n  props: [\"onFinised\"],\n  data() {\n    this.rules = Object.keys(dashboardVariables.CALCULATION_RULES).filter(\n      el => el !== \"reference\"\n    );\n    this.endpointsTypes = Object.assign([], listChoices);\n    return {\n      node: null,\n      elementsWithDashboard: [],\n      showDialog: true,\n      endpointTypeSelected: null,\n      ruleSelected: null,\n      elementsSelected: []\n    };\n  },\n  methods: {\n    opened(option) {\n      this.node = option;\n      this.getAllElementsWithDashboard().then(el => {\n        this.elementsWithDashboard = [];\n        el.forEach(element => {\n          this.elementsWithDashboard.push({\n            node: element,\n            checked: false\n          });\n        });\n      });\n    },\n\n    removed(valid) {\n      if (valid) {\n        this.elementsSelected.forEach(el => {\n          dashboardService.addCalculationRule(\n            el.node.info.id.get(),\n            el.endpoint,\n            el.rule\n          );\n        });\n      }\n\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      this.onFinised(closeResult);\n    },\n    getAllElementsWithDashboard() {\n      return find(\n        this.node.id.get(),\n        geographicService.constants.GEOGRAPHIC_RELATIONS,\n        async node => {\n          let c = await SpinalGraphService.getChildren(node.info.id.get(), [\n            dashboardVariables.ENDPOINT_RELATION_NAME\n          ]);\n          return c.length > 0;\n        }\n      );\n    },\n    addElementSelected() {\n      this.elementsWithDashboard.forEach(el => {\n        if (\n          el.checked &&\n          this.endpointTypeSelected != null &&\n          this.ruleSelected != null &&\n          !this.elementExist(el)\n        ) {\n          this.elementsSelected.push({\n            name: el.node.info.name.get(),\n            node: el.node,\n            endpoint: this.endpointTypeSelected,\n            rule: this.ruleSelected\n          });\n          el.checked = false;\n        }\n      });\n    },\n    elementExist(el) {\n      let res = this.elementsSelected.find(item => {\n        return (\n          item.node.info.id.get() == el.node.info.id.get() &&\n          item.endpoint == this.endpointTypeSelected\n        );\n      });\n\n      return res !== undefined;\n    },\n    removeFromList(el) {\n      this.elementsSelected = this.elementsSelected.filter(element => {\n        return el.info.id.get() != element.node.info.id.get();\n      });\n    }\n  }\n};\n</script>\n\n<style>\n.dialogContainer {\n  width: calc(100%) !important;\n  height: calc(100%) !important;\n  overflow: hidden;\n}\n\n.globalCalculDialog {\n  width: calc(60%);\n  height: calc(100%);\n}\n.paramContainer {\n  height: calc(50%);\n}\n\n.nodeDiv {\n  overflow: auto;\n  height: 80%;\n}\n\n.paramDiv {\n  height: 100%;\n  padding: 5px;\n}\n\n.ruleDiv {\n  overflow: auto;\n  height: 50%;\n}\n\n.tableContainer {\n  height: calc(50%);\n}\n\n.globalCalculDialog .md-content.md-table-content.md-scrollbar.md-theme-default {\n  height: 200px !important;\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-dashboard-standard.d9da914e.css.map"}