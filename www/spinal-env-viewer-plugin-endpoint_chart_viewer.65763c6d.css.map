{"mappings":"A;;;;A;;;;A;;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;;;;;A;;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;;A;;;;A;;;;A;;;;;A","sources":["node_modules/spinal-env-viewer-plugin-endpoint_chart_viewer/src/chartOptionDialog.vue","node_modules/spinal-env-viewer-plugin-endpoint_chart_viewer/src/plotlyCompoment.vue","node_modules/spinal-env-viewer-plugin-endpoint_chart_viewer/src/customDateIntervalDialog.vue","node_modules/spinal-env-viewer-plugin-endpoint_chart_viewer/src/endpointChartViewerPanel.vue"],"sourcesContent":["<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"endpoint-chart-viewer-panel-dialog-chart-option\"\n             :md-active.sync=\"isOpenComputed\"\n             :md-close-on-esc=true\n             :md-click-outside-to-close=true\n             :md-closed=onClose>\n    <md-dialog-title>Chart Preferences</md-dialog-title>\n    <md-dialog-content class=\"md-scrollbar\">\n      <div>\n        <div class=\"endpoint-chart-viewer-panel-dialog-chart-option-container\">\n          <h5 class=\"endpoint-chart-viewer-panel-dialog-chart-option-postion-header\">\n            Line Mode</h5>\n          <md-radio v-model=\"lineModeComputed\"\n                    value=\"lines\">Lines</md-radio>\n          <md-radio v-model=\"lineModeComputed\"\n                    value=\"markers\">Markers</md-radio>\n          <md-radio v-model=\"lineModeComputed\"\n                    value=\"lines+markers\">Lines + Markers</md-radio>\n        </div>\n        <div class=\"endpoint-chart-viewer-panel-dialog-chart-option-container\">\n          <md-checkbox true-value=\"true\"\n                       false-value=\"false\"\n                       v-tooltip=\"'you may need to resize the panel.'\"\n                       v-model=\"rangeSlider\">Use range slider</md-checkbox>\n          <div v-if=\"rangeSlider\">\n            <em>If the pannel is too small the range slider may not showup.</em>\n          </div>\n        </div>\n        <div class=\"endpoint-chart-viewer-panel-dialog-chart-option-container\"\n             :class=\"{'endpoint-chart-viewer-panel-dialog-chart-option-container-border': showLegendComputed}\">\n          <md-checkbox true-value=\"true\"\n                       false-value=\"false\"\n                       v-model=\"showLegendComputed\">Show Legend</md-checkbox>\n          <div v-if=\"showLegendComputed\"\n               class=\"endpoint-chart-viewer-panel-dialog-chart-option-container-legend\">\n            <div>\n              <md-radio v-model=\"orientation\"\n                        value=\"h\">Horizontal</md-radio>\n              <md-radio v-model=\"orientation\"\n                        value=\"v\">Vertical</md-radio>\n            </div>\n            <div :class=\"{'endpoint-chart-viewer-panel-dialog-chart-option-container-legend-subcontainer': position}\">\n              <md-checkbox true-value=\"true\"\n                           false-value=\"false\"\n                           v-model=\"position\">Override default Position</md-checkbox>\n              <div v-if=\"position\">\n                <hr>\n                <div>\n                  <h5 class=\"endpoint-chart-viewer-panel-dialog-chart-option-postion-header\">Vertical\n                    Postion</h5>\n                  <md-radio v-model=\"positionX\"\n                            value=\"0\">left</md-radio>\n                  <md-radio v-model=\"positionX\"\n                            value=\"0.5\">center</md-radio>\n                  <md-radio v-model=\"positionX\"\n                            value=\"1\">right</md-radio>\n                </div>\n                <hr>\n                <div>\n                  <h5 class=\"endpoint-chart-viewer-panel-dialog-chart-option-postion-header\">Vertical\n                    Anchor Postion</h5>\n                  <md-radio v-model=\"positionAnchorX\"\n                            value=\"auto\">auto</md-radio>\n                  <md-radio v-model=\"positionAnchorX\"\n                            value=\"left\">left</md-radio>\n                  <md-radio v-model=\"positionAnchorX\"\n                            value=\"center\">center</md-radio>\n                  <md-radio v-model=\"positionAnchorX\"\n                            value=\"right\">right</md-radio>\n                </div>\n                <hr>\n                <div>\n                  <h5 class=\"endpoint-chart-viewer-panel-dialog-chart-option-postion-header\">Horizontal\n                    Postion</h5>\n                  <md-radio v-model=\"positionY\"\n                            value=\"1\">top</md-radio>\n                  <md-radio v-model=\"positionY\"\n                            value=\"0.5\">middle</md-radio>\n                  <md-radio v-model=\"positionY\"\n                            value=\"0\">bottom</md-radio>\n                </div>\n                <hr>\n                <div>\n                  <h5 class=\"endpoint-chart-viewer-panel-dialog-chart-option-postion-header\">Horizontal\n                    Anchor Postion</h5>\n                  <md-radio v-model=\"positionAnchorY\"\n                            value=\"auto\">auto</md-radio>\n                  <md-radio v-model=\"positionAnchorY\"\n                            value=\"top\">top</md-radio>\n                  <md-radio v-model=\"positionAnchorY\"\n                            value=\"middle\">middle</md-radio>\n                  <md-radio v-model=\"positionAnchorY\"\n                            value=\"bottom\">bottom</md-radio>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog\">Close</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nexport default {\n  name: \"chartOptionDialog\",\n  data() {\n    return {\n      something: true\n    };\n  },\n  props: [\"isOpen\", \"layoutOption\", \"lineMode\"],\n  computed: {\n    lineModeComputed: {\n      get() {\n        return this.lineMode;\n      },\n      set(value) {\n        this.$emit(\"updateLineMode\", value);\n      }\n    },\n    isOpenComputed: {\n      get() {\n        return this.isOpen;\n      },\n      set(value) {\n        if (value === false) {\n          this.onClose();\n        }\n      }\n    },\n    showLegendComputed: {\n      get() {\n        return this.layoutOption.showlegend;\n      },\n      set(value) {\n        this.$emit(\"updateOptions\", { showlegend: value });\n      }\n    },\n    orientation: {\n      get() {\n        return this.layoutOption.legend.orientation;\n      },\n      set(value) {\n        this.$emit(\"updateOptions\", { legend: { orientation: value } });\n      }\n    },\n    position: {\n      get() {\n        if (\n          this.layoutOption.legend.x === null ||\n          this.layoutOption.legend.y === null\n        ) {\n          return false;\n        }\n        return true;\n      },\n      set(value) {\n        if (value === true) {\n          this.$emit(\"updateOptions\", this.getOptionPosition(0, 1));\n        } else {\n          this.$emit(\"updateOptions\", {\n            legend: {\n              x: null,\n              y: null,\n              xanchor: \"auto\",\n              yanchor: \"auto\"\n            }\n          });\n        }\n      }\n    },\n    positionX: {\n      get() {\n        return this.layoutOption.legend.x.toString();\n      },\n      set(value) {\n        let x = value,\n          y = this.layoutOption.legend.y;\n        if (this.layoutOption.legend.y === null) y = 0;\n        this.$emit(\"updateOptions\", this.getOptionPosition(x, y));\n      }\n    },\n    positionY: {\n      get() {\n        return this.layoutOption.legend.y.toString();\n      },\n      set(value) {\n        let x = this.layoutOption.legend.x,\n          y = value;\n        if (this.layoutOption.legend.x === null) x = 0;\n        this.$emit(\"updateOptions\", this.getOptionPosition(x, y));\n      }\n    },\n    positionAnchorX: {\n      get() {\n        return this.layoutOption.legend.xanchor;\n      },\n      set(value) {\n        this.$emit(\"updateOptions\", {\n          legend: {\n            xanchor: value\n          }\n        });\n      }\n    },\n    positionAnchorY: {\n      get() {\n        return this.layoutOption.legend.yanchor;\n      },\n      set(value) {\n        this.$emit(\"updateOptions\", {\n          legend: {\n            yanchor: value\n          }\n        });\n      }\n    },\n    rangeSlider: {\n      get() {\n        if (this.layoutOption.xaxis.rangeslider === null) return false;\n        return true;\n      },\n      set(value) {\n        this.$emit(\"updateOptions\", {\n          xaxis: { rangeslider: value ? {} : null }\n        });\n      }\n    }\n  },\n  methods: {\n    getOptionPosition(x, y) {\n      return {\n        legend: {\n          x,\n          y\n        }\n      };\n    },\n    closeDialog() {\n      this.isOpenComputed = false;\n    },\n    onClose() {\n      this.$emit(\"closeDialog\");\n    }\n  }\n};\n</script>\n\n<style>\n.endpoint-chart-viewer-panel-dialog-chart-option > .md-dialog-container {\n  max-height: 80vh;\n}\n\n.endpoint-chart-viewer-panel-dialog-chart-option-container {\n  padding: 0 10px;\n}\n.endpoint-chart-viewer-panel-dialog-chart-option-container-legend\n  > .endpoint-chart-viewer-panel-dialog-chart-option-container-legend-subcontainer {\n  border: 1px solid #a6a6a7;\n  padding: 0 10px;\n  margin-bottom: 10px;\n}\n\n.endpoint-chart-viewer-panel-dialog-chart-option-container-border {\n  border: 1px solid #a6a6a7;\n}\n.endpoint-chart-viewer-panel-dialog-chart-option-postion-header {\n  margin: unset;\n}\n.endpoint-chart-viewer-panel-dialog-chart-option\n  .md-scrollbar::-webkit-scrollbar {\n  background-color: #121212;\n}\n.endpoint-chart-viewer-panel-dialog-chart-option\n  .md-scrollbar::-webkit-scrollbar-thumb {\n  background-color: #737374;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"chart-data-endpoint-graph-container\">\n    <md-content id=\"chart-data-endpoint-graph-container-plotgraph\"></md-content>\n    <md-empty-state\n      v-if=\"isReady && chartData.length <= 0\"\n      class=\"chart-data-endpoint-graph-container-empty\"\n      md-icon=\"show_chart\"\n      md-label=\"No Endpoint selected\"\n    >\n    </md-empty-state>\n    <md-empty-state\n      v-else-if=\"isReady && !haveData\"\n      class=\"chart-data-endpoint-graph-container-empty\"\n      md-icon=\"show_chart\"\n      md-label=\"No Data\"\n      md-description=\"No data to show in the Endpoint(s) Selected !\"\n      v-tooltip=\"selectedNames\"\n    >\n    </md-empty-state>\n    <md-button\n      class=\"md-icon-button md-primary md-raised chart-data-endpoint-graph-container-option-button\"\n      :class=\"{ autodeskv6: isviewerV6 }\"\n      @click=\"optionOpen = true\"\n    >\n      <md-icon>settings</md-icon>\n    </md-button>\n    <chartOptionDialog\n      :isOpen=\"optionOpen\"\n      :layoutOption=\"this.layout\"\n      :lineMode=\"lineMode\"\n      @updateLineMode=\"updateLineMode\"\n      @closeDialog=\"optionOpen = false\"\n      @updateOptions=\"updateOptions\"\n    ></chartOptionDialog>\n  </md-content>\n</template>\n\n<script>\nimport chartOptionDialog from './chartOptionDialog.vue';\nimport { clearInterval } from 'timers';\nimport { timeSeriesMap } from './map';\n\nconst globalType = typeof window === 'undefined' ? global : window;\nexport default {\n  name: 'plotlyComponent',\n  components: { chartOptionDialog },\n  data() {\n    return {\n      chartData: [],\n      selectedNames: '',\n      optionOpen: false,\n      isReady: false,\n      haveData: false,\n      lineMode: 'lines',\n      layout: {\n        margin: {\n          b: 90,\n          t: 8,\n          pad: 4,\n        },\n        font: {\n          size: 15,\n          color: '#FFFFFF',\n        },\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        xaxis: {\n          rangeslider: null,\n          showgrid: false,\n          showline: true,\n          type: 'date',\n          tickformat: '%d/%m/%Y %H:%M',\n        },\n        yaxis: {\n          showgrid: false,\n          showline: true,\n        },\n        showlegend: true,\n        legend: {\n          xanchor: 'auto',\n          yanchor: 'auto',\n          orientation: 'v',\n          x: null,\n          y: null,\n          traceorder: 'normal',\n          font: {\n            family: 'sans-serif',\n            size: 12,\n            color: '#FFF',\n          },\n          bgcolor: 'rgba(34,34,34,.9)',\n          bordercolor: '#424242',\n          borderwidth: 2,\n        },\n      },\n    };\n  },\n  props: ['data', 'reloadData'],\n  computed: {\n    isviewerV6() {\n      return parseInt(window.LMV_VIEWER_VERSION) === 6;\n    },\n  },\n  mounted() {\n    this.setChartData();\n    this.init();\n    this._graph_ = this.createGraph();\n\n    this.intervalResize = setInterval(() => {\n      this.resize(this._graph_.gd, this._graph_.gd3);\n    }, 1000);\n  },\n  watch: {\n    // chartData: {\n    // \tdeep: true,\n    // \thandler: function (val) {\n    // \t\tthis.updateGraph(val);\n    // \t},\n    // },\n    data: function () {\n      this.refreshData();\n    },\n    reloadData: function () {\n      this.refreshData();\n    },\n  },\n  beforeDestroy() {\n    clearInterval(this.intervalResize);\n  },\n  methods: {\n    init() {\n      this.promUpdate = null;\n      this.rect = {\n        w: '100px',\n        h: '100px',\n      };\n      this.my_chartData = [];\n      this._graph_ = null;\n    },\n    updateObj(obj, data) {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          if (\n            Array.isArray(data[key]) === false &&\n            typeof data[key] === 'object' &&\n            data[key] !== null\n          ) {\n            if (typeof obj[key] === 'undefined' || obj[key] === null) {\n              obj[key] = {};\n            }\n            this.updateObj(obj[key], data[key]);\n          } else {\n            obj[key] = data[key];\n          }\n        }\n      }\n    },\n    updateOptions(data) {\n      this.updateObj(this.layout, data);\n      globalType.Plotly.react(this._graph_.gd, this.my_chartData, this.layout, {\n        modeBarButtonsToRemove: ['sendDataToCloud'],\n        displaylogo: false,\n        responsive: true,\n      });\n    },\n    updateLineMode(lineMode) {\n      this.lineMode = lineMode;\n      for (let idx = 0; idx < this.my_chartData.length; idx++) {\n        const myElement = this.my_chartData[idx];\n        myElement.mode = lineMode;\n      }\n      globalType.Plotly.react(this._graph_.gd, this.my_chartData, this.layout, {\n        modeBarButtonsToRemove: ['sendDataToCloud'],\n        displaylogo: false,\n        responsive: true,\n      });\n    },\n    updateGraph: function (chartData) {\n      for (let index = 0; index < chartData.length; index++) {\n        const element = chartData[index];\n        let found = false;\n        for (let idx = 0; idx < this.my_chartData.length; idx++) {\n          const myElement = this.my_chartData[idx];\n          if (element.nodeId === myElement.nodeId) {\n            if (\n              element.x.length !== myElement.x.length ||\n              (element.x[0] && element.x[0] !== myElement.x[0])\n            ) {\n              (myElement.x = element.x), (myElement.y = element.y);\n            }\n            found = true;\n            break;\n          }\n        }\n        if (found === false) {\n          this.my_chartData.push({\n            nodeId: element.nodeId,\n            mode: this.lineMode,\n            type: 'scatter',\n            name: element.name,\n            x: element.x,\n            y: element.y,\n          });\n        }\n      }\n      const toDelete = [];\n      for (let idx = 0; idx < this.my_chartData.length; idx++) {\n        const myElement = this.my_chartData[idx];\n        let found = false;\n        for (let index = 0; index < chartData.length; index++) {\n          const element = chartData[index];\n          if (element.nodeId === myElement.nodeId) {\n            found = true;\n          }\n        }\n        if (found === false) {\n          toDelete.push(myElement);\n        }\n      }\n\n      for (let index = 0; index < toDelete.length; index++) {\n        const element = toDelete[index];\n        const idx = this.my_chartData.indexOf(element);\n        this.my_chartData.splice(idx, 1);\n      }\n      globalType.Plotly.react(this._graph_.gd, this.my_chartData, this.layout, {\n        modeBarButtonsToRemove: ['sendDataToCloud'],\n        displaylogo: false,\n        responsive: true,\n      });\n      for (let index = 0; index < this.my_chartData.length; index++) {\n        const element = this.my_chartData[index];\n        if (element.x.length > 0) {\n          this.haveData = true;\n          this.isReady = true;\n          return;\n        }\n      }\n      this.haveData = false;\n      this.isReady = true;\n      this.selectedNames = this.my_chartData.map((e) => e.name).join(', ');\n    },\n\n    createGraph: function () {\n      var d3 = globalType.Plotly.d3;\n      var graphWidth = 100,\n        graphHeight = 100;\n      var gd3 = d3\n        .select(\n          document.getElementById(\n            'chart-data-endpoint-graph-container-plotgraph'\n          )\n        )\n        .style({\n          width: graphWidth + '%',\n          height: graphHeight + '%',\n        });\n      var gd = gd3.node();\n      return { gd: gd, gd3: gd3 };\n    },\n    resize: function (gd, gd3) {\n      let w = gd3.style('width');\n      let h = gd3.style('height');\n      if (this.rect.w !== w || this.rect.h !== h) {\n        this.rect.w = w;\n        this.rect.h = h;\n        globalType.Plotly.Plots.resize(gd);\n      }\n    },\n\n    setChartData() {\n      this.chartData = Array.from(timeSeriesMap.values());\n    },\n\n    refreshData() {\n      console.log('refresh Data');\n      this.setChartData();\n      this.updateGraph(this.chartData);\n    },\n  },\n};\n</script>\n<style>\n.chart-data-endpoint-graph-container-plotgraph\n  .js-plotly-plot\n  .plotly\n  .modebar {\n  left: 0;\n}\n</style>\n\n<style scoped>\n.chart-data-endpoint-graph-container {\n  height: 100%;\n  width: 100%;\n}\n.chart-data-endpoint-graph-container-empty {\n  top: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  max-width: unset;\n}\n.chart-data-endpoint-graph-container-option-button {\n  bottom: 5px;\n  left: 0;\n  position: absolute;\n}\n\n.chart-data-endpoint-graph-container-option-button.autodeskv6 {\n  bottom: 24px;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <md-dialog\n    class=\"endpoint-chart-viewer-panel-dialog-custom-interval\"\n    :md-active.sync=\"isOpenComputed\"\n    :md-close-on-esc=\"true\"\n    :md-click-outside-to-close=\"true\"\n    :md-closed=\"onClose\"\n  >\n    <md-dialog-content class=\"md-scrollbar\">\n      <div class=\"md-layout\"> </div>\n      <div class=\"md-layout\">\n        <div\n          class=\"md-layout-item endpoint-chart-viewer-panel-dialog-custom-interval-calendar-container\"\n        >\n          <md-field>\n            <label for=\"start\">Start</label>\n            <md-select v-model=\"startCompu\" name=\"start\" id=\"start\">\n              <md-option value=\"Other\">Other</md-option>\n              <md-option\n                v-for=\"date in dateAvailableCompu\"\n                :key=\"date\"\n                :value=\"selectDateStart(date)\"\n                >{{ formatDate(date) }}</md-option\n              >\n            </md-select>\n          </md-field>\n          <VueCtkDateTimePicker\n            :max-date=\"endPickerCompu\"\n            :dark=\"true\"\n            :hint=\"hint\"\n            :format=\"format\"\n            :noButtonNow=\"false\"\n            v-model=\"startPickerCompu\"\n            :inline=\"true\"\n          >\n          </VueCtkDateTimePicker>\n        </div>\n        <div\n          class=\"md-layout-item endpoint-chart-viewer-panel-dialog-custom-interval-calendar-container\"\n        >\n          <md-field>\n            <label for=\"end\">End</label>\n            <md-select v-model=\"endCompu\" name=\"end\" id=\"end\">\n              <md-option value=\"Other\">Other</md-option>\n              <md-option\n                v-for=\"date in dateAvailableCompu\"\n                :key=\"date\"\n                :value=\"selectDateStart(date)\"\n                >{{ formatDate(date) }}</md-option\n              >\n            </md-select>\n          </md-field>\n          <VueCtkDateTimePicker\n            :max-date=\"today\"\n            :min-date=\"endStart\"\n            :dark=\"true\"\n            :hint=\"hint\"\n            :format=\"format\"\n            :noButtonNow=\"false\"\n            v-model=\"endPickerCompu\"\n            :inline=\"true\"\n          >\n          </VueCtkDateTimePicker>\n        </div>\n      </div>\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n      <md-button\n        class=\"md-primary\"\n        :disabled=\"start === null || end === null\"\n        @click=\"closeDialog(true)\"\n        >Valid</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport moment from 'moment';\n\nexport default {\n  name: 'customDateIntervalDialog',\n  props: ['isOpen', 'dateAvailable'],\n  data() {\n    const today = new Date();\n    today.setUTCHours(23, 59, 59);\n    return {\n      hint: 'Select the starting point to show',\n      format: 'YYYY-MM-DD HH:mm:ss',\n      today: today.toISOString(),\n      start: null,\n      end: null,\n      valid: false,\n    };\n  },\n  computed: {\n    startCompu: {\n      get() {\n        if (this.start === null) return 'Other';\n        const data = new Date(this.start.valueOf());\n        data.setUTCHours(0, 0, 0, 0);\n        for (let idx = 0; idx < this.dateAvailableCompu.length; idx++) {\n          const element = this.dateAvailableCompu[idx];\n          if (data.getTime() === element) {\n            return data.toISOString();\n          }\n        }\n        return 'Other';\n      },\n      set(value) {\n        if (value === 'Other') return;\n        this.start = moment.utc(value);\n      },\n    },\n    startPickerCompu: {\n      get() {\n        if (this.start === null) {\n          return null;\n        } else {\n          return new Date(this.start).toISOString();\n        }\n      },\n      set(value) {\n        this.start = moment.utc(value, 'YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    endCompu: {\n      get() {\n        if (this.end === null) return 'Other';\n        const data = new Date(this.end.valueOf());\n        data.setUTCHours(0.0, 0, 0);\n        for (let idx = 0; idx < this.dateAvailableCompu.length; idx++) {\n          const element = this.dateAvailableCompu[idx];\n          if (data.getTime() === element) {\n            return this.selectDateStart(data);\n          }\n        }\n        return 'Other';\n      },\n      set(value) {\n        if (value === 'Other') return;\n        this.end = moment.utc(value).hours(23).minutes(59).second(59);\n      },\n    },\n    endPickerCompu: {\n      get() {\n        if (this.end === null) {\n          return null;\n        } else {\n          return new Date(this.end).toISOString();\n        }\n      },\n      set(value) {\n        this.end = moment.utc(value, 'YYYY-MM-DD HH:mm:ss');\n      },\n    },\n    dateAvailableCompu() {\n      return this.dateAvailable || [];\n    },\n    isOpenComputed: {\n      get() {\n        return this.isOpen;\n      },\n      set(value) {\n        if (value === false) {\n          this.onClose();\n        }\n      },\n    },\n    endStart() {\n      if (this.start === null) return null;\n      const startDate = new Date(this.start);\n      startDate.setUTCHours(-1, 0, 0, 0);\n      return startDate.toISOString();\n    },\n  },\n  methods: {\n    selectDateStart(date) {\n      let m_date = new Date(date);\n      return new Date(m_date.setUTCHours(0, 0, 0, 0)).toISOString();\n    },\n    selectDateEnd(date) {\n      let m_date = new Date(date);\n      return new Date(m_date.setUTCHours(23, 59, 59, 999)).toISOString();\n    },\n    formatDate(date) {\n      return new Date(date).toDateString();\n    },\n    closeDialog(valid) {\n      this.valid = valid;\n      this.isOpenComputed = false;\n    },\n    onClose() {\n      let valid = this.valid;\n      if (this.end === null || this.start === null) {\n        valid = false;\n      }\n      this.valid = false;\n      this.$emit('closeDialog', {\n        start: this.start,\n        end: this.end,\n        valid: valid,\n      });\n    },\n  },\n};\n</script>\n\n<style>\n.endpoint-chart-viewer-panel-dialog-custom-interval {\n  width: 80vw;\n}\n.endpoint-chart-viewer-panel-dialog-custom-interval > .md-dialog-container {\n  max-height: 80vh;\n}\n.endpoint-chart-viewer-panel-dialog-custom-interval\n  > .md-dialog-container\n  > .md-dialog-content.md-scrollbar::-webkit-scrollbar {\n  background-color: #121212;\n}\n.endpoint-chart-viewer-panel-dialog-custom-interval\n  > .md-dialog-container\n  > .md-dialog-content.md-scrollbar::-webkit-scrollbar-thumb {\n  background-color: #737374;\n}\n\n.endpoint-chart-viewer-panel-dialog-custom-interval-calendar-container {\n  border: 5px double #cbcbcb;\n  margin: 20px;\n}\n.endpoint-chart-viewer-panel-dialog-custom-interval-calendar-container > h2 {\n  text-align: center;\n}\n.endpoint-chart-viewer-panel-dialog-custom-interval .md-field {\n  padding-left: 8px;\n}\n.endpoint-chart-viewer-panel-dialog-custom-interval .md-field label {\n  padding-left: 8px;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<div class=\"endpoint-chart-viewer-panel\">\n\t\t<div class=\"md-layout endpoint-chart-viewer-panel-topbtn-container\">\n\t\t\t<md-button\n\t\t\t\tv-for=\"value in buttons\"\n\t\t\t\t:key=\"value\"\n\t\t\t\tclass=\"md-layout-item topbtn\"\n\t\t\t\t:disabled=\"value === btnSelected\"\n\t\t\t\t:class=\"{ 'raise-disable': value === btnSelected }\"\n\t\t\t\t@click=\"onClick(value)\"\n\t\t\t\t>{{ value }}</md-button\n\t\t\t>\n\t\t\t<md-button\n\t\t\t\tclass=\"md-layout-item topbtn\"\n\t\t\t\t:disabled=\"value === btnSelected\"\n\t\t\t\t:class=\"{ 'raise-disable': 'CUSTOM' === btnSelected }\"\n\t\t\t\t@click=\"onClickCustom\"\n\t\t\t\t>CUSTOM</md-button\n\t\t\t>\n\t\t</div>\n\t\t<div\n\t\t\tclass=\"\n\t\t\t\tmd-layout md-alignment-center-center\n\t\t\t\tendpoint-chart-viewer-panel-chart-container\n\t\t\t\"\n\t\t\t:class=\"{ autodeskv6: isviewerV6 }\"\n\t\t>\n\t\t\t<plotlyCompoment\n\t\t\t\t:data=\"timeSeriesData\"\n\t\t\t\t:reloadData=\"reloadData\"\n\t\t\t></plotlyCompoment>\n\t\t</div>\n\t\t<customDateIntervalDialog\n\t\t\t@closeDialog=\"closeDialogCustom\"\n\t\t\t:dateAvailable=\"dateAvailable\"\n\t\t\t:isOpen=\"isDialogCustomOpen\"\n\t\t></customDateIntervalDialog>\n\t</div>\n</template>\n<script>\n\timport plotlyCompoment from \"./plotlyCompoment.vue\";\n\timport { ChartDataEndpoint } from \"./ChartDataEndpoint.js\";\n\timport customDateIntervalDialog from \"./customDateIntervalDialog.vue\";\n\timport union from \"lodash.union\";\n\timport { timeSeriesMap, resetTimeSeriesMap } from \"./map\";\n\n\texport default {\n\t\tname: \"my_compo\",\n\t\tcomponents: {\n\t\t\tplotlyCompoment,\n\t\t\tcustomDateIntervalDialog,\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\treloadData: 0,\n\t\t\t\tisDialogCustomOpen: false,\n\t\t\t\tbtnSelected: \"1h\",\n\t\t\t\tbuttons: [\"1h\", \"3h\", \"24h\", \"J-1\", \"3J\", \"7J\"],\n\t\t\t\ttimeSeriesData: [],\n\t\t\t\tdateAvailable: [],\n\t\t\t};\n\t\t},\n\t\tcomputed: {\n\t\t\tisviewerV6() {\n\t\t\t\treturn parseInt(window.LMV_VIEWER_VERSION) === 6;\n\t\t\t},\n\t\t},\n\t\tmethods: {\n\t\t\tasync toogleSelect(nodeId) {\n\t\t\t\tconst index = this.timeSeriesData.findIndex((elem) => {\n\t\t\t\t\treturn elem === nodeId;\n\t\t\t\t});\n\n\t\t\t\tif (index === -1) {\n\t\t\t\t\tlet data;\n\t\t\t\t\tif (this.btnSelected === \"CUSTOM\") {\n\t\t\t\t\t\tdata = new ChartDataEndpoint(\n\t\t\t\t\t\t\tnodeId,\n\t\t\t\t\t\t\tthis.btnSelected,\n\t\t\t\t\t\t\tthis.lastStart,\n\t\t\t\t\t\t\tthis.lastEnd\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata = new ChartDataEndpoint(nodeId, this.btnSelected);\n\t\t\t\t\t}\n\t\t\t\t\tawait data.init();\n\t\t\t\t\ttimeSeriesMap.set(nodeId, data);\n\t\t\t\t\tthis.timeSeriesData.push(nodeId);\n\t\t\t\t} else {\n\t\t\t\t\tconst idToRemove = this.timeSeriesData[index];\n\n\t\t\t\t\t// for (let index of endpointToRemove) {\n\t\t\t\t\t// \tconst t = timeSeriesMap.get(index);\n\t\t\t\t\t// \tt.uninit();\n\t\t\t\t\t// \ttimeSeriesMap.delete(index);\n\t\t\t\t\t// }\n\n\t\t\t\t\t// const promises = endpointToRemove.map((index) => {\n\t\t\t\t\tconst t = timeSeriesMap.get(idToRemove);\n\t\t\t\t\ttimeSeriesMap.delete(idToRemove);\n\t\t\t\t\tawait t.uninit();\n\t\t\t\t\t// });\n\n\t\t\t\t\t// await Promise.all(promises);\n\n\t\t\t\t\tthis.timeSeriesData.splice(index, 1);\n\t\t\t\t}\n\t\t\t\tlet tmp = this.timeSeriesData.map((nodeId) => {\n\t\t\t\t\tconst element = timeSeriesMap.get(nodeId);\n\t\t\t\t\treturn element.dateAvailable;\n\t\t\t\t});\n\t\t\t\ttmp = union(...tmp);\n\t\t\t\ttmp.sort((a, b) => a - b);\n\t\t\t\tthis.dateAvailable = tmp;\n\t\t\t},\n\t\t\tasync onClick(value) {\n\t\t\t\tthis.btnSelected = value;\n\t\t\t\tconst promises = this.timeSeriesData.map((index) => {\n\t\t\t\t\tconst t = timeSeriesMap.get(index);\n\t\t\t\t\treturn t.changeInterval(value);\n\t\t\t\t});\n\t\t\t\t// for (let index of this.timeSeriesData) {\n\t\t\t\t// \tconst t = timeSeriesMap.get(index);\n\t\t\t\t// \tawait t.changeInterval(value);\n\t\t\t\t// }\n\t\t\t\tawait Promise.all(promises);\n\t\t\t\tthis.reloadData++;\n\t\t\t},\n\t\t\tonClickCustom() {\n\t\t\t\tthis.isDialogCustomOpen = true;\n\t\t\t},\n\t\t\tasync closeDialogCustom(value) {\n\t\t\t\tconst { start, end, valid } = value;\n\t\t\t\tthis.isDialogCustomOpen = false;\n\t\t\t\tif (valid) {\n\t\t\t\t\tthis.lastStart = start;\n\t\t\t\t\tthis.lastEnd = end;\n\t\t\t\t\tthis.btnSelected = \"CUSTOM\";\n\t\t\t\t\t// for (let index of this.timeSeriesData) {\n\t\t\t\t\t// \tconst t = timeSeriesMap.get(index);\n\t\t\t\t\t// \tawait t.changeCustomInterval(start, end);\n\t\t\t\t\t// }\n\t\t\t\t\tconst promises = this.timeSeriesData.map((index) => {\n\t\t\t\t\t\tconst t = timeSeriesMap.get(index);\n\t\t\t\t\t\treturn t.changeCustomInterval(start, end);\n\t\t\t\t\t});\n\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\tthis.reloadData++;\n\t\t\t\t}\n\t\t\t},\n\t\t\topened(option) {\n\t\t\t\treturn this.toogleSelect(option.selectedNode.id.get());\n\t\t\t},\n\t\t\tremoved() {\n\t\t\t\tfor (let index of this.timeSeriesData) {\n\t\t\t\t\tconst t = timeSeriesMap.get(index);\n\t\t\t\t\tt.uninit();\n\t\t\t\t}\n\t\t\t\tthis.timeSeriesData = [];\n\t\t\t\tresetTimeSeriesMap();\n\t\t\t},\n\t\t\tclosed() {},\n\t\t},\n\t};\n</script>\n\n<style>\n\t.endpoint-chart-viewer-panel {\n\t\theight: 100%;\n\t}\n\t.endpoint-chart-viewer-panel,\n\t.endpoint-chart-viewer-panel * {\n\t\tbox-sizing: border-box;\n\t}\n\t.endpoint-chart-viewer-panel .endpoint-chart-viewer-panel-topbtn-container {\n\t\tborder-bottom: 1px solid #a6a6a7;\n\t\tmax-height: 36px;\n\t}\n\n\t.endpoint-chart-viewer-panel .topbtn {\n\t\tmargin: unset;\n\t\tmin-width: 3em;\n\t}\n\t.endpoint-chart-viewer-panel .endpoint-chart-viewer-panel-chart-container {\n\t\theight: calc(100% - 36px);\n\t}\n\t.endpoint-chart-viewer-panel\n\t\t.endpoint-chart-viewer-panel-chart-container.autodeskv6 {\n\t\theight: calc(100% - 56px);\n\t}\n\n\t.raise-disable {\n\t\tcolor: #3a3a3a !important;\n\t\tbackground-color: #a6a6a7;\n\t}\n\t.endpoint-chart-viewer-panel .md-content {\n\t\tbackground-color: rgba(66, 66, 66, 0.4);\n\t}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-endpoint_chart_viewer.65763c6d.css.map"}