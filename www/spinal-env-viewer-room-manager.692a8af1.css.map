{"mappings":"A;;;;A;;;;;A;;;;;A;;;;;;;;;;A;;;;A;;;;;A;;;;;;A;;;;;A;;;;A;;;;A;;;;;A;;;;;;;;;;A;;;;;;;;A;;;;A;;;;;;;;A;;;;A;;;;;A;;;;A;;;;;;A;;;;;;;A;;;;;A;;;;;A;;;;A;;;;;;A;;;;;;;;A;;;;A;;;;A;;;;;;;A;;;;;A;;;;;;;;A;;;;;;A;;;;;;;;A;;;;;A;;;;;;;;;;;A;;;;;;;;;;;A;;;;;A;;;;;;A;;;;;;A;;;;;;A;;;;A;;;;A;;;;;;A;;;;A;;;;;A;;;;;;;;;;;;;A;;;;A;;;;;;;;;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;;A;;;;;;;A;;;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;;;;;;;;;;;A;;;;;;;;;;;;A;;;;;A;;;;;A","sources":["node_modules/spinal-env-viewer-room-manager/vue/dialogs/create/createContext.vue","node_modules/spinal-env-viewer-room-manager/vue/dialogs/create/iconsComponents.vue","node_modules/spinal-env-viewer-room-manager/vue/dialogs/create/createGroup.vue","node_modules/spinal-env-viewer-room-manager/vue/dialogs/linkToGroup/linkToGroupTemplate.vue","node_modules/spinal-env-viewer-room-manager/vue/dialogs/linkToGroup/linkToGroup.vue","node_modules/spinal-env-viewer-room-manager/vue/dialogs/linkToGroup/linkBimObjectToGroup.vue","node_modules/spinal-env-viewer-room-manager/vue/panel/linkerDialog.vue","node_modules/spinal-env-viewer-room-manager/vue/panel/globalLinkerPanel.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n\t\t<md-dialog-title>{{ title | toUpperCase }}</md-dialog-title>\n\n\t\t<md-dialog-content class=\"dialogContainer\">\n\t\t\t<div>\n\t\t\t\t<md-field>\n\t\t\t\t\t<label>Name</label>\n\t\t\t\t\t<md-input v-model=\"inputValue\"></md-input>\n\t\t\t\t</md-field>\n\n\t\t\t\t<div v-if=\"!pre.selected\">\n\t\t\t\t\t<span class=\"md-title\">Choose :</span>\n\n\t\t\t\t\t<md-radio\n\t\t\t\t\t\tclass=\"md-primary\"\n\t\t\t\t\t\tv-for=\"(t, index) in GroupTypes\"\n\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\tv-model=\"typeSelected\"\n\t\t\t\t\t\t:value=\"t.type\"\n\t\t\t\t\t\t>{{ t.name }}</md-radio\n\t\t\t\t\t>\n\t\t\t\t</div>\n\n\t\t\t\t<div v-else>type selected : {{ pre.type }}</div>\n\t\t\t</div>\n\t\t</md-dialog-content>\n\n\t\t<md-dialog-actions>\n\t\t\t<md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n\t\t\t\t>Close</md-button\n\t\t\t>\n\t\t\t<md-button\n\t\t\t\tclass=\"md-primary\"\n\t\t\t\t@click=\"closeDialog(true)\"\n\t\t\t\t:disabled=\"isDisabled()\"\n\t\t\t\t>Save</md-button\n\t\t\t>\n\t\t</md-dialog-actions>\n\t</md-dialog>\n</template>\n\n<script>\n\timport EventBus from \"../../../js/event.js\";\n\timport CREATE_DATA_TYPES from \"../../../js/types.js\";\n\timport geographicService from \"spinal-env-viewer-context-geographic-service\";\n\n\timport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\n\texport default {\n\t\tname: \"createGroupContextDialog\",\n\t\tprops: [\"onFinised\"],\n\t\tdata() {\n\t\t\tthis.GroupTypes = CREATE_DATA_TYPES;\n\n\t\t\treturn {\n\t\t\t\tshowDialog: true,\n\t\t\t\ttitle: \"\",\n\t\t\t\tinputValue: \"\",\n\t\t\t\ttypeSelected: geographicService.constants.ROOM_TYPE,\n\t\t\t\tpre: {\n\t\t\t\t\tselected: false,\n\t\t\t\t\ttype: undefined,\n\t\t\t\t},\n\t\t\t\tcallback: () => {},\n\t\t\t};\n\t\t},\n\n\t\tmethods: {\n\t\t\topened(option) {\n\t\t\t\tthis.title = option.title;\n\n\t\t\t\tif (option.typePreselected) {\n\t\t\t\t\tthis.pre.selected = true;\n\t\t\t\t\tthis.pre.type = option.typePreselected;\n\t\t\t\t} else {\n\t\t\t\t\tthis.pre.selected = false;\n\t\t\t\t\tthis.pre.type = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (option.callback) this.callback = option.callback;\n\t\t\t},\n\n\t\t\tremoved(closed) {\n\t\t\t\tif (closed) {\n\t\t\t\t\tlet value = this.inputValue.trim();\n\n\t\t\t\t\tif (this.pre.selected) this.typeSelected = this.pre.type;\n\n\t\t\t\t\tgroupManagerService\n\t\t\t\t\t\t.createGroupContext(value, this.typeSelected)\n\t\t\t\t\t\t.then((_res) => {\n\t\t\t\t\t\t\tthis.sentEvent(_res.info.id.get());\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.showDialog = false;\n\t\t\t},\n\n\t\t\tcloseDialog(closeResult) {\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised(closeResult);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsentEvent(id) {\n\t\t\t\tif (this.callback && typeof this.callback === \"function\")\n\t\t\t\t\tthis.callback(id);\n\n\t\t\t\tEventBus.$emit(\"itemCreated\", id);\n\t\t\t},\n\n\t\t\tisDisabled() {\n\t\t\t\treturn this.inputValue.trim().length === 0;\n\t\t\t},\n\t\t},\n\t\tfilters: {\n\t\t\ttoUpperCase: function (data) {\n\t\t\t\treturn data.toUpperCase();\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.dialogContainer {\n\t\toverflow: hidden !important;\n\t}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\n  <div>\n    <md-autocomplete v-model=\"iconSelected\"\n                     :md-options=\"icons\"\n                     @md-changed=\"getIcons\"\n                     @md-opened=\"getIcons\">\n      <label>Icon</label>\n      <template slot=\"md-autocomplete-item\"\n                slot-scope=\"{ item }\">\n        <div>\n          <md-icon>{{ item }}</md-icon>\n          &nbsp; &nbsp;\n          {{ item }}\n        </div>\n      </template>\n    </md-autocomplete>\n  </div>\n\n  <!-- <div class=\"myiconDiv\">\n    <div class=\"header\">\n      <div class=\"md-subheading\">Select Icon</div>\n      <div class=\"select\">\n        <md-field>\n          <label for=\"category\">Category</label>\n\n          <md-select v-model=\"categorySelected\"\n                     name=\"category\"\n                     id=\"category\"\n                     md-dense>\n            <md-option value=\"none\">All</md-option>\n            <md-option v-for=\"(category, index) in categories\"\n                       :key=\"index\"\n                       :value=\"category\">{{ category }}</md-option>\n          </md-select>\n        </md-field>\n      </div>\n    </div>\n\n    <md-content class=\"_container md-scrollbar\">\n      <div v-for=\"(res, index) in iconsDisplayed\"\n           :key=\"index\"\n           class=\"iconsContainer\">\n        <div class=\"subHeader\">{{ res.name }}</div>\n        <div class=\"icons\">\n          <div class=\"icon\"\n               v-for=\"(icon, index2) in res.icons\"\n               :key=\"index2\"\n               @click=\"selectIcon(icon.id)\"\n               :class=\"{ selectedIcon: isSelected(icon.id) }\">\n            <md-icon>{{ icon.id }}</md-icon>\n          </div>\n        </div>\n      </div>\n    </md-content>\n  </div> -->\n</template>\n\n<script>\nimport allIcons from \"../../../js/icons.json\";\n\nexport default {\n  name: \"iconComponent\",\n  props: {\n    selected: {\n      type: String,\n    },\n  },\n  data() {\n    this.allIcons = Object.values(allIcons);\n    this.categories = this.getAllCategories();\n    return {\n      iconsDisplayed: Object.values(allIcons),\n      iconSelected: null,\n      categorySelected: \"none\",\n      icons: [],\n    };\n  },\n  mounted() {\n    if (typeof this.selected !== \"undefined\") {\n      this.iconSelected = this.selected;\n    }\n  },\n  methods: {\n    filterIcons() {\n      let category =\n        this.categorySelected !== \"none\" ? this.categorySelected : undefined;\n      this.iconsDisplayed = this.getIconsByCategory(category);\n    },\n    getAllCategories() {\n      return this.allIcons.map((el) => el.name);\n    },\n\n    getIconsByCategory(categoryName) {\n      if (typeof categoryName !== \"undefined\") {\n        let category = this.allIcons.find((el) => el.name === categoryName);\n        if (typeof category !== \"undefined\") {\n          return [category];\n        }\n      } else {\n        return this.allIcons;\n      }\n\n      return [];\n    },\n\n    selectIcon(icon) {\n      this.iconSelected = icon;\n      this.$emit(\"selectIcon\", icon);\n    },\n\n    isSelected(icon) {\n      return this.iconSelected === icon;\n    },\n\n    getIcons(searchTerm) {\n      this.icons = new Promise((resolve) => {\n        setTimeout(() => {\n          let icons = this.iconsNames();\n          if (!searchTerm) {\n            resolve(icons);\n          } else {\n            const term = searchTerm.toLowerCase();\n\n            resolve(icons.filter((el) => el.toLowerCase().includes(term)));\n          }\n        }, 500);\n      });\n    },\n\n    iconsNames() {\n      if (!this.allIcons) return [];\n      return this.allIcons.reduce((arr, item) => {\n        arr.push(...item.icons.map((el) => el.id));\n        return arr;\n      }, []);\n    },\n  },\n\n  watch: {\n    categorySelected: function () {\n      this.filterIcons();\n    },\n    selected() {\n      this.iconSelected = this.selected;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.myiconDiv {\n  width: 500px;\n  height: 100%;\n}\n\n.myiconDiv .header {\n  width: 100%;\n  height: 80px;\n}\n\n.myiconDiv ._container {\n  width: 99%;\n  height: calc(100% - 70px);\n  overflow: auto;\n  overflow-x: hidden;\n  display: flex;\n  margin-bottom: 10px;\n  flex-direction: column;\n}\n\n.iconsContainer {\n  /* display: flex; */\n  flex-direction: column;\n}\n\n.subHeader {\n  display: block;\n  margin-bottom: 10px;\n}\n\n.icons {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n}\n\n.icon {\n  padding: 3px;\n  margin: 5px;\n}\n\n.selectedIcon {\n  border: 1px solid blue;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title>{{ title | toUpperCase }}</md-dialog-title>\n\n    <md-dialog-content class=\"dialogContainer\">\n\n      <md-field>\n        <label>Group name</label>\n        <md-input v-model=\"inputValue\"></md-input>\n      </md-field>\n\n      <div class=\"iconComponent\">\n        <icon-component @selectIcon=\"selectIcon\"\n                        :selected=\"iconSelected\"></icon-component>\n      </div>\n\n      <div class=\"colorDiv\">\n        <chrome-picker v-model=\"color\" />\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"isDisabled()\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport iconComponent from \"./iconsComponents.vue\";\nimport { Chrome, Photoshop } from \"vue-color\";\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\nimport EventBus from \"../../../js/event.js\";\n\nexport default {\n  name: \"createGroupDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"chrome-picker\": Chrome,\n    \"icon-component\": iconComponent,\n    \"photoshop-picker\": Photoshop,\n  },\n  data() {\n    this.edit;\n    return {\n      showDialog: true,\n      title: \"\",\n      contextId: null,\n      color: \"#000000\",\n      inputValue: \"\",\n      selectedNode: undefined,\n      iconSelected: undefined,\n      callback: () => {},\n    };\n  },\n  methods: {\n    opened(option) {\n      this.edit = option.edit;\n      this.title = option.title;\n      this.contextId = option.contextId;\n      this.selectedNode = option.selectedNode.id.get();\n      this.iconSelected = \"3d_rotation\";\n      console.log(\"option\", option);\n      if (this.edit) {\n        this.inputValue = option.selectedNode.name.get();\n        this.color = option.color;\n        this.iconSelected =\n          (option.selectedNode.icon && option.selectedNode.icon.get()) ||\n          \"3d_rotation\";\n      }\n\n      if (option.callback) this.callback = option.callback;\n    },\n\n    removed(closed) {\n      if (closed) {\n        this.createElement().then((result) => {\n          const id = result.info ? result.info.id.get() : result.id.get();\n          this.sentEvent(id);\n        });\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    sentEvent(id) {\n      if (this.callback && typeof this.callback === \"function\")\n        this.callback(id);\n\n      EventBus.$emit(\"itemCreated\", id);\n    },\n\n    isDisabled() {\n      return this.inputValue.trim().length === 0;\n    },\n\n    selectIcon(icon) {\n      this.iconSelected = icon;\n    },\n\n    createElement() {\n      const color =\n        typeof this.color === \"string\" ? this.color : this.color.hex;\n\n      if (!this.edit) {\n        return groupManagerService.addGroup(\n          this.contextId,\n          this.selectedNode,\n          this.inputValue.trim(),\n          color,\n          this.iconSelected\n        );\n      } else {\n        return groupManagerService.updateGroup(this.selectedNode, {\n          name: this.inputValue.trim(),\n          color: color,\n          icon: this.iconSelected,\n        });\n      }\n    },\n  },\n  filters: {\n    toUpperCase: function (data) {\n      return data.toUpperCase();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dialogContainer {\n  /* width: 500px !important; */\n  /* height: 100% !important; */\n}\n.dialogContainer .iconComponent {\n  /* height: 50%; */\n  margin-bottom: 15px;\n}\n\n.dialogContainer .colorDiv {\n  /* height: 50%; */\n}\n\n/* .dialogContainer .colorDiv > * {\n  width: 100%;\n  height: 100%;\n} */\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n   <div class=\"subContent\">\n      <div class=\"title\">\n         <div>{{title}}</div>\n         <div class=\"md-layout-item md-size-10 mdIcon\">\n            <md-button\n               class=\"md-icon-button\"\n               @click=\"createEvent\"\n               :disabled=\"disableBtn\"\n            >\n               <md-icon>control_point</md-icon>\n            </md-button>\n         </div>\n      </div>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n\n.subContent .title {\n   width: 100%;\n   height: 10%;\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n\n.subContent .container {\n   width: 100%;\n   height: 90%;\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-dialog\n\t\tclass=\"mdDialogContainer\"\n\t\t:md-active.sync=\"showDialog\"\n\t\t@md-closed=\"closeDialog(false)\"\n\t>\n\t\t<md-dialog-title class=\"dialogTitle\"\n\t\t\t>Manage {{ type }} Group</md-dialog-title\n\t\t>\n\t\t<md-dialog-content class=\"content\">\n\t\t\t<div class=\"section\">\n\t\t\t\t<link-template\n\t\t\t\t\t:title=\"'Contexts'\"\n\t\t\t\t\t:data=\"data\"\n\t\t\t\t\t:itemSelected=\"contextSelected\"\n\t\t\t\t\t@create=\"createContext\"\n\t\t\t\t\t@select=\"selectContext\"\n\t\t\t\t></link-template>\n\t\t\t</div>\n\n\t\t\t<div class=\"section\">\n\t\t\t\t<link-template\n\t\t\t\t\t:title=\"'Categories'\"\n\t\t\t\t\t:data=\"categories\"\n\t\t\t\t\t:itemSelected=\"categorySelected\"\n\t\t\t\t\t@create=\"createCategory\"\n\t\t\t\t\t@select=\"selectCategory\"\n\t\t\t\t\t:disableBtn=\"!contextSelected\"\n\t\t\t\t></link-template>\n\t\t\t</div>\n\n\t\t\t<div class=\"section\">\n\t\t\t\t<link-template\n\t\t\t\t\t:title=\"'Groups'\"\n\t\t\t\t\t:data=\"groups\"\n\t\t\t\t\t:itemSelected=\"groupSelected\"\n\t\t\t\t\t@create=\"createGroup\"\n\t\t\t\t\t@select=\"selectGroup\"\n\t\t\t\t\t:disableBtn=\"!categorySelected\"\n\t\t\t\t></link-template>\n\t\t\t</div>\n\t\t</md-dialog-content>\n\t\t<md-dialog-actions>\n\t\t\t<md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n\t\t\t\t>Close</md-button\n\t\t\t>\n\t\t\t<md-button\n\t\t\t\tclass=\"md-primary\"\n\t\t\t\t:disabled=\"disabled()\"\n\t\t\t\t@click=\"closeDialog(true)\"\n\t\t\t\t>Save</md-button\n\t\t\t>\n\t\t</md-dialog-actions>\n\t</md-dialog>\n</template>\n\n<script>\n\timport attributeService from \"spinal-env-viewer-plugin-attribute-manager/src/services/index\";\n\n\timport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\timport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\timport LinkToGroupTemplate from \"./linkToGroupTemplate.vue\";\n\n\texport default {\n\t\tname: \"dialogComponent\",\n\t\tcomponents: {\n\t\t\t\"link-template\": LinkToGroupTemplate,\n\t\t},\n\t\tprops: [\"onFinised\"],\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tshowDialog: true,\n\t\t\t\tdata: [],\n\t\t\t\tgroups: [],\n\t\t\t\tcategories: [],\n\t\t\t\tcontextSelected: undefined,\n\t\t\t\tcategorySelected: undefined,\n\t\t\t\tgroupSelected: undefined,\n\t\t\t\titems: [],\n\t\t\t\ttype: undefined,\n\t\t\t\tcallback: undefined,\n\t\t\t};\n\t\t},\n\n\t\tmounted() {\n\t\t\t// EventBus.$on(\"itemCreated\", (id) => {\n\t\t\t//    console.log(\"hello world\", id);\n\t\t\t//    this.getAllData();\n\t\t\t// });\n\t\t},\n\n\t\tmethods: {\n\t\t\topened(option) {\n\t\t\t\tthis.items = option.itemSelected;\n\t\t\t\tthis.type = option.type;\n\t\t\t\tthis.callback = option.callback;\n\n\t\t\t\tthis.getAllData();\n\t\t\t},\n\n\t\t\tremoved(option) {\n\t\t\t\tif (option) {\n\t\t\t\t\tthis.items.forEach((el) => {\n\t\t\t\t\t\tattributeService.linkItem(\n\t\t\t\t\t\t\tthis.contextSelected,\n\t\t\t\t\t\t\tthis.groupSelected,\n\t\t\t\t\t\t\tel.id\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\n\t\t\t\t\tif (typeof this.callback !== \"undefined\") {\n\t\t\t\t\t\tconst context = this.data.find(\n\t\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst category = this.categories.find(\n\t\t\t\t\t\t\t(el) => el.id === this.categorySelected\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst group = this.groups.find(\n\t\t\t\t\t\t\t(el) => el.id === this.groupSelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.callback(context, category, group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.showDialog = false;\n\t\t\t},\n\n\t\t\tcloseDialog(closeResult) {\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised(closeResult);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAllData() {\n\t\t\t\tattributeService.getAllGroupContext(this.type).then((res) => {\n\t\t\t\t\tthis.data = res;\n\t\t\t\t\tthis.updateCategory();\n\t\t\t\t\tthis.updateGroups();\n\t\t\t\t});\n\t\t\t},\n\t\t\t// getCategories() {\n\t\t\t//   this.categorySelected = undefined;\n\n\t\t\t//   if (this.contextSelected) {\n\t\t\t//     let val = this.data.find(el => el.id === this.contextSelected);\n\t\t\t//     if (val) return val.category;\n\t\t\t//   }\n\t\t\t//   return [];\n\t\t\t// },\n\t\t\tgetGroups() {\n\t\t\t\tthis.groupSelected = undefined;\n\n\t\t\t\tif (this.contextSelected && this.categorySelected) {\n\t\t\t\t\tlet context = this.data.find(\n\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t);\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tlet category = context.category.find(\n\t\t\t\t\t\t\t(el) => el.id == this.categorySelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (category) return category.groups;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t},\n\n\t\t\tdisabled() {\n\t\t\t\treturn !(\n\t\t\t\t\tthis.contextSelected &&\n\t\t\t\t\tthis.categorySelected &&\n\t\t\t\t\tthis.groupSelected\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tcreateContext() {\n\t\t\t\tspinalPanelManagerService.openPanel(\"createGroupContextDialog\", {\n\t\t\t\t\ttitle: \"Create a Grouping Context\",\n\t\t\t\t\ttypePreselected: this.type,\n\t\t\t\t\tcallback: (id) => {\n\t\t\t\t\t\tconst infoModel = SpinalGraphService.getInfo(id);\n\t\t\t\t\t\tif (infoModel) {\n\t\t\t\t\t\t\tconst info = infoModel.get();\n\t\t\t\t\t\t\tinfo.category = [];\n\n\t\t\t\t\t\t\tthis.data = [...this.data, info];\n\t\t\t\t\t\t\tthis.contextSelected = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tcreateCategory() {\n\t\t\t\tspinalPanelManagerService.openPanel(\"createCategoryDialog\", {\n\t\t\t\t\ttitle: \"add Category\",\n\t\t\t\t\tcontextId: this.contextSelected,\n\t\t\t\t\tselectedNode: SpinalGraphService.getInfo(this.contextSelected),\n\t\t\t\t\tcallback: (id) => {\n\t\t\t\t\t\tconst infoModel = SpinalGraphService.getInfo(id);\n\t\t\t\t\t\tif (infoModel) {\n\t\t\t\t\t\t\tconst info = infoModel.get();\n\t\t\t\t\t\t\tinfo.groups = [];\n\t\t\t\t\t\t\tthis._addToCategory(info);\n\t\t\t\t\t\t\t// this.categories = [...this.categories, info];\n\t\t\t\t\t\t\tthis.categorySelected = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tcreateGroup() {\n\t\t\t\tspinalPanelManagerService.openPanel(\"createGroupDialog\", {\n\t\t\t\t\ttitle: \"add Group\",\n\t\t\t\t\tcontextId: this.contextSelected,\n\t\t\t\t\tselectedNode: SpinalGraphService.getInfo(this.categorySelected),\n\t\t\t\t\tcallback: (id) => {\n\t\t\t\t\t\tconst infoModel = SpinalGraphService.getInfo(id);\n\t\t\t\t\t\tif (infoModel) {\n\t\t\t\t\t\t\tconst info = infoModel.get();\n\t\t\t\t\t\t\tthis._addToGroups(info);\n\t\t\t\t\t\t\t// this.groups = [...this.groups, info];\n\t\t\t\t\t\t\tthis.groupSelected = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t//////////////////////////////////////////////////////////////////\n\t\t\t// Modify\n\t\t\t//////////////////////////////////////////////////////////////////\n\n\t\t\tupdateCategory() {\n\t\t\t\t// this.categorySelected = undefined;\n\t\t\t\tthis.categories = [];\n\t\t\t\tif (this.contextSelected) {\n\t\t\t\t\tlet val = this.data.find((el) => el.id === this.contextSelected);\n\t\t\t\t\tif (val) this.categories = val.category;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tupdateGroups() {\n\t\t\t\t// this.groupSelected = undefined;\n\t\t\t\tthis.groups = [];\n\t\t\t\tif (this.contextSelected && this.categorySelected) {\n\t\t\t\t\tlet context = this.data.find(\n\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t);\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tlet category = context.category.find(\n\t\t\t\t\t\t\t(el) => el.id == this.categorySelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (category) this.groups = category.groups;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tselectContext(id) {\n\t\t\t\tif (this.contextSelected === id) {\n\t\t\t\t\tthis.contextSelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.contextSelected = id;\n\t\t\t},\n\n\t\t\tselectCategory(id) {\n\t\t\t\tif (this.categorySelected === id) {\n\t\t\t\t\tthis.categorySelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.categorySelected = id;\n\t\t\t},\n\n\t\t\tselectGroup(id) {\n\t\t\t\tif (this.groupSelected === id) {\n\t\t\t\t\tthis.groupSelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.groupSelected = id;\n\t\t\t},\n\n\t\t\t_addToCategory(obj) {\n\t\t\t\tif (this.contextSelected) {\n\t\t\t\t\tlet val = this.data.find((el) => el.id === this.contextSelected);\n\t\t\t\t\tif (val) val.category.push(obj);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_addToGroups(obj) {\n\t\t\t\tif (this.contextSelected && this.categorySelected) {\n\t\t\t\t\tlet context = this.data.find(\n\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t);\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tlet category = context.category.find(\n\t\t\t\t\t\t\t(el) => el.id == this.categorySelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (category) category.groups.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\twatch: {\n\t\t\tcontextSelected() {\n\t\t\t\tthis.categorySelected = undefined;\n\t\t\t\tthis.groupSelected = undefined;\n\n\t\t\t\tthis.updateCategory();\n\t\t\t\tthis.updateGroups();\n\t\t\t},\n\n\t\t\tcategorySelected() {\n\t\t\t\tthis.groupSelected = undefined;\n\n\t\t\t\tthis.updateGroups();\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.mdDialogContainer {\n\t\twidth: 60%;\n\t\theight: 600px;\n\t}\n\n\t.mdDialogContainer .dialogTitle {\n\t\ttext-align: center;\n\t}\n\n\t.mdDialogContainer .content {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: stretch;\n\t}\n\n\t.mdDialogContainer .content .section {\n\t\twidth: 33%;\n\t\tborder: 1px solid grey;\n\t\tborder-radius: 4% 4% 0 0;\n\t\tpadding: 15px;\n\t}\n\n\t/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n\t.mdDialogContainer .md-dialog-container {\n\t\tmax-width: 100%;\n\t\tmax-height: 100%;\n\t}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Add bimObject(s) selected to\n      group</md-dialog-title>\n\n    <md-dialog-content class=\"content\">\n      <div v-show=\"state === states.normal\">\n        Do you really want to link {{ selections |  length}} bimObject(s) to the\n        group ?\n      </div>\n\n      <div v-show=\"state === states.loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div v-show=\"state === states.result\"\n           class=\"result\">\n        <div>linked with success: <span class=\"success\"> {{ linked }}</span>\n        </div>\n        <div>link failed : <span class=\"error\">{{ notLinked }}</span></div>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 :disabled=\"cancelDisabled()\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 :disabled=\"yesDisabled()\"\n                 @click=\"addBimObject\">Yes</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n\n<script>\nimport { bimObjectManagerService } from \"spinal-env-viewer-bim-manager-service\";\nimport utilities from \"../../../js/utilities\";\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\nexport default {\n  name: \"addBimObjectToGroupDialog\",\n  props: [\"onFinised\"],\n\n  data() {\n    this.states = {\n      normal: 0,\n      loading: 1,\n      result: 2,\n    };\n    return {\n      showDialog: false,\n      selections: [],\n      state: this.states.loading,\n      contextId: null,\n      nodeId: null,\n      linked: 0,\n      notLinked: 0,\n    };\n  },\n\n  mounted() {\n    // EventBus.$on(\"itemCreated\", (id) => {\n    //    console.log(\"hello world\", id);\n    //    this.getAllData();\n    // });\n  },\n  filters: {\n    length(items) {\n      return items.reduce((count, { selection }) => {\n        count += selection.length;\n        return count;\n      }, 0);\n    },\n  },\n\n  methods: {\n    async opened({ contextId, nodeId }) {\n      this.contextId = contextId;\n      this.nodeId = nodeId;\n\n      const selections = this.getObjectSelected();\n      if (!selections) return alert(\"No BimObject selected\");\n\n      this.state = this.states.loading;\n      this.showDialog = true;\n\n      this.selections = await this.getLeaftSelections(selections);\n      this.state = this.states.normal;\n    },\n\n    async removed(option) {\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    cancelDisabled() {\n      return this.state === this.states.loading;\n    },\n\n    yesDisabled() {\n      return this.state !== this.states.normal;\n    },\n\n    getObjectSelected() {\n      let selections = window.spinal.ForgeViewer.viewer.getAggregateSelection();\n      if (selections.length === 0) return;\n\n      return selections;\n    },\n\n    getLeaftSelections(selections) {\n      const promises = selections.map((el) => {\n        return bimObjectManagerService.getLeafDbIds(el.model, el.selection);\n      });\n\n      return Promise.all(promises);\n    },\n\n    async addBimObject() {\n      try {\n        this.state = this.states.loading;\n\n        const arr = this.convertSelectionsToFuncList(\n          this.contextId,\n          this.nodeId,\n          this.selections\n        );\n        const { successed, failed } = await utilities.consumeBatch(arr);\n\n        this.linked = successed.length;\n        this.notLinked = failed.length;\n\n        this.state = this.states.result;\n      } catch (error) {\n        console.error(error);\n        throw error;\n      }\n\n      //   Promise.all(selections).then((selected) => {\n      //     for (let idx = 0; idx < selected.length; idx++) {\n      //       const { model, selection } = selected[idx];\n\n      //       model.getBulkProperties(\n      //         selection,\n      //         {\n      //           propFilter: [\"name\"],\n      //         },\n      //         (el) => {\n      //           el.forEach((element) => {\n      //             window.spinal.BimObjectService.createBIMObject(\n      //               element.dbId,\n      //               element.name,\n      //               model\n      //             ).then(() => {\n      //               window.spinal.BimObjectService.getBIMObject(\n      //                 element.dbId,\n      //                 model\n      //               ).then((bimObject) => {\n      //                 if (bimObject) {\n      //                   const bimId = bimObject.id\n      //                     ? bimObject.id.get()\n      //                     : bimObject.info.id.get();\n\n      //                   groupManagerService.linkElementToGroup(\n      //                     contextId,\n      //                     groupId,\n      //                     bimId\n      //                   );\n      //                 }\n      //               });\n      //             });\n      //           });\n      //         }\n      //       );\n      //     }\n      //   });\n    },\n\n    async getBimObjectNode(model, dbId) {\n      try {\n        const name = await this.getObjectName(model, dbId);\n        return spinal.BimObjectService.createBIMObject(dbId, name, model);\n      } catch (error) {\n        console.error(\"error\", model.id, dbId);\n        throw error;\n      }\n    },\n\n    async addNodeToGroup(contextId, groupId, model, dbId) {\n      const node = await this.getBimObjectNode(model, dbId);\n\n      return groupManagerService.linkElementToGroup(\n        contextId,\n        groupId,\n        node.id.get()\n      );\n    },\n\n    getObjectName(model, dbId) {\n      return new Promise((resolve, reject) => {\n        model.getBulkProperties([dbId], { propFilter: [\"name\"] }, (el) => {\n          resolve(el[0].name);\n        });\n      });\n    },\n\n    convertSelectionsToFuncList(contextId, groupId, liste) {\n      return liste.reduce((arr, { model, selection }) => {\n        for (const id of selection) {\n          arr.push(() => this.addNodeToGroup(contextId, groupId, model, id));\n        }\n        return arr;\n      }, []);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n}\n\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.mdDialogContainer .content .result {\n  font-size: 1.4em !important;\n  height: 80px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.mdDialogContainer .content .result .success {\n  color: green;\n}\n\n.mdDialogContainer .content .result .error {\n  color: red;\n}\n\n.mdDialogContainer .content .section {\n  width: 33%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-content class=\"mdContent\">\n\t\t<div class=\"header\">\n\t\t\t<div class=\"buscar-caja\" :class=\"{ isOpened: isOpened }\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"\"\n\t\t\t\t\tclass=\"buscar-txt\"\n\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t:class=\"{ isOpened: isOpened }\"\n\t\t\t\t\tv-model=\"search\"\n\t\t\t\t/>\n\t\t\t\t<a class=\"md-icon-button buscar-btn\" @click=\"openSearchBar\">\n\t\t\t\t\t<md-icon>search</md-icon>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div\n\t\t\tv-if=\"tempList.length > 0 && appState === STATES.normal\"\n\t\t\tclass=\"_container\"\n\t\t>\n\t\t\t<!-- <md-content class=\"listItem md-scrollbar\">\n        <md-list class=\"listcontent\">\n          <md-list-item class=\"listContainer\"\n                        v-for=\"(item, index) in tempList\"\n                        :key=\"index\"\n                        @mouseover=\"eventMethod('mouseover',item)\"\n                        @mouseleave=\"eventMethod('mouseleave',item)\">\n            <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            <div v-if=\"elementExistInCategory(item)\"\n                 class=\"groupColor\"\n                 :style=\"{backgroundColor : item.groupColor}\"\n                 :title=\"'Linked to ' + item.groupName\"></div>\n\n            <md-button class=\"md-icon-button panel_link_button\"\n                       @click=\"linkUnlink(item)\">\n              <md-icon>{{getIcon(item)}}</md-icon>\n            </md-button>\n          </md-list-item>\n        </md-list>\n      </md-content> -->\n\n\t\t\t<md-content class=\"listItem md-scrollbar\">\n\t\t\t\t<RecycleScroller\n\t\t\t\t\t:items=\"tempList\"\n\t\t\t\t\t:item-size=\"60\"\n\t\t\t\t\tkey-field=\"id\"\n\t\t\t\t\tv-slot=\"{ item }\"\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"listContainer\"\n\t\t\t\t\t\t@mouseover=\"eventMethod('mouseover', item)\"\n\t\t\t\t\t\t@mouseleave=\"eventMethod('mouseleave', item)\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<span class=\"md-list-item-text\">{{ item.name }}</span>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tv-if=\"elementExistInCategory(item)\"\n\t\t\t\t\t\t\tclass=\"groupColor\"\n\t\t\t\t\t\t\t:style=\"{ backgroundColor: item.groupColor }\"\n\t\t\t\t\t\t\t:title=\"'Linked to ' + item.groupName\"\n\t\t\t\t\t\t></div>\n\n\t\t\t\t\t\t<md-button\n\t\t\t\t\t\t\tclass=\"md-icon-button panel_link_button\"\n\t\t\t\t\t\t\t@click=\"linkUnlink(item)\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<md-icon>{{ getIcon(item) }}</md-icon>\n\t\t\t\t\t\t</md-button>\n\t\t\t\t\t</div>\n\t\t\t\t</RecycleScroller>\n\t\t\t</md-content>\n\t\t</div>\n\n\t\t<div\n\t\t\tclass=\"_container empty\"\n\t\t\tv-if=\"tempList.length === 0 && appState === STATES.normal\"\n\t\t>\n\t\t\tNo Data found !\n\t\t</div>\n\n\t\t<div class=\"_container empty\" v-if=\"appState === STATES.loading\">\n\t\t\t<md-progress-spinner\n\t\t\t\tclass=\"spiner\"\n\t\t\t\tmd-mode=\"indeterminate\"\n\t\t\t></md-progress-spinner>\n\t\t</div>\n\n\t\t<div class=\"_container empty\" v-if=\"appState === STATES.error\">\n\t\t\tSorry, Something was wrong. Please retry !!\n\t\t</div>\n\t</md-content>\n</template>\n\n<script>\n\timport Vue from \"vue\";\n\timport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\timport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\n\tconst {\n\t\tspinalPanelManagerService,\n\t} = require(\"spinal-env-viewer-panel-manager-service\");\n\n\timport { RecycleScroller } from \"vue-virtual-scroller\";\n\n\tVue.component(\"RecycleScroller\", RecycleScroller);\n\n\timport EventBus from \"../../js/event\";\n\n\texport default {\n\t\tname: \"linkPanelContent\",\n\t\tcomponents: {\n\t\t\t// \"pagination-component\": paginationComponent,\n\t\t\t// \"filter-menu\": filterMenu,\n\t\t\t// \"virtual-scroller\": VueVirtualScroller,\n\t\t},\n\t\tdata() {\n\t\t\tthis.STATES = {\n\t\t\t\tnormal: 1,\n\t\t\t\tloading: 2,\n\t\t\t\terror: 3,\n\t\t\t};\n\t\t\tthis.data = [];\n\t\t\tthis.contextId;\n\t\t\tthis.groupId;\n\t\t\tthis.countPerPage = 10;\n\n\t\t\treturn {\n\t\t\t\tsearch: \"\",\n\t\t\t\tisOpened: false,\n\t\t\t\ttitle: \"Link Rooms\",\n\t\t\t\ttempList: [],\n\t\t\t\tdataLinked: [],\n\t\t\t\tcurrentPage: 1,\n\t\t\t\tappState: this.STATES.normal,\n\t\t\t\tcategorySumary: [],\n\t\t\t};\n\t\t},\n\t\tmethods: {\n\t\t\topened(option) {\n\t\t\t\tthis.appState = this.STATES.loading;\n\n\t\t\t\tthis.contextId = option.contextId;\n\t\t\t\tthis.groupId = option.nodeId;\n\n\t\t\t\t// this.title =\n\t\t\t\t//   \"Link \" +\n\t\t\t\t//   (option.type === groupService.constants.ROOMS_GROUP\n\t\t\t\t//     ? \"Rooms\"\n\t\t\t\t//     : \"BimObject\");\n\t\t\t\tthis.setTitle(this.title);\n\t\t\t\tlet refContext = SpinalGraphService.getContext(\n\t\t\t\t\toption.reference.context\n\t\t\t\t);\n\n\t\t\t\tif (typeof refContext === \"undefined\") {\n\t\t\t\t\tthis.tempList = [];\n\t\t\t\t\tthis.data = [];\n\t\t\t\t\tthis.dataLinked = [];\n\t\t\t\t\tthis.appState = this.STATES.normal;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet refContextId = refContext.info.id.get();\n\n\t\t\t\tPromise.all([\n\t\t\t\t\tthis.getData(refContextId, option.reference.relation),\n\t\t\t\t\tthis.getDataLinked(option.nodeId),\n\t\t\t\t\tthis.getOtherGroupData(option.nodeId),\n\t\t\t\t])\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tconsole.log(\"res\", res);\n\n\t\t\t\t\t\tthis.data = res[0];\n\t\t\t\t\t\tthis.tempList = res[0];\n\t\t\t\t\t\tthis.dataLinked = res[1];\n\t\t\t\t\t\tthis.categorySumary = res[2];\n\n\t\t\t\t\t\tthis.appState = this.STATES.normal;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tthis.appState = this.STATES.error;\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tgetData(parentId, relationName) {\n\t\t\t\treturn SpinalGraphService.getChildren(parentId, relationName).then(\n\t\t\t\t\t(res) => {\n\t\t\t\t\t\treturn res.map((el) => el.get());\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tgetDataLinked(id) {\n\t\t\t\t// return groupService.getElementsLinked(id).then(res => {\n\t\t\t\t//   return res.map(el => el.get());\n\t\t\t\t// });\n\n\t\t\t\treturn groupManagerService\n\t\t\t\t\t.getElementsLinkedToGroup(id)\n\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\treturn result.map((el) => el.get());\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tasync getOtherGroupData(nodeId) {\n\t\t\t\tlet category = await groupManagerService.getGroupCategory(nodeId);\n\n\t\t\t\tif (category) {\n\t\t\t\t\tlet groups = await groupManagerService.getGroups(\n\t\t\t\t\t\tcategory.id.get()\n\t\t\t\t\t);\n\t\t\t\t\tlet groupFiltered = groups.filter((child) => {\n\t\t\t\t\t\treturn child.id.get() !== nodeId;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn groupFiltered.map((el) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: el.id.get(),\n\t\t\t\t\t\t\tname: el.name.get(),\n\t\t\t\t\t\t\tcolor: el.color ? el.color.get() : \"#000000\",\n\t\t\t\t\t\t\tchildren: SpinalGraphService.getChildrenIds(el.id.get()),\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t},\n\n\t\t\tsetTitle(title) {\n\t\t\t\tspinalPanelManagerService.panels.linkRoomPanel.panel.setTitle(\n\t\t\t\t\ttitle\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tisLinked(item) {\n\t\t\t\treturn this.dataLinked.find((el) => {\n\t\t\t\t\treturn item.id === el.id;\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tgetIcon(item) {\n\t\t\t\treturn typeof this.isLinked(item) === \"undefined\"\n\t\t\t\t\t? \"link\"\n\t\t\t\t\t: \"link_off\";\n\t\t\t},\n\n\t\t\tdeleteItem(item) {\n\t\t\t\tfor (let i = 0; i < this.dataLinked.length; i++) {\n\t\t\t\t\tconst element = this.dataLinked[i];\n\t\t\t\t\tif (element.id === item.id) {\n\t\t\t\t\t\tthis.dataLinked.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync linkUnlink(item) {\n\t\t\t\tif (this.isLinked(item)) {\n\t\t\t\t\tawait groupManagerService.unLinkElementToGroup(\n\t\t\t\t\t\tthis.groupId,\n\t\t\t\t\t\titem.id\n\t\t\t\t\t);\n\t\t\t\t\tthis.deleteItem(item);\n\t\t\t\t} else {\n\t\t\t\t\tconst res = await groupManagerService.linkElementToGroup(\n\t\t\t\t\t\tthis.contextId,\n\t\t\t\t\t\tthis.groupId,\n\t\t\t\t\t\titem.id\n\t\t\t\t\t);\n\n\t\t\t\t\tif (typeof res.old_group !== \"undefined\") {\n\t\t\t\t\t\tlet group = this.categorySumary.find((el) => {\n\t\t\t\t\t\t\treturn el.id === res.old_group;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (typeof group !== \"undefined\") {\n\t\t\t\t\t\t\tgroup.children = group.children.filter((el) => {\n\t\t\t\t\t\t\t\treturn el !== item.id;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dataLinked.push(item);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\teventMethod(eventName, item) {\n\t\t\t\tEventBus.$emit(eventName, item);\n\t\t\t},\n\n\t\t\topenSearchBar() {\n\t\t\t\tthis.isOpened = !this.isOpened;\n\t\t\t},\n\n\t\t\telementExistInCategory(item) {\n\t\t\t\tlet id = item.id;\n\n\t\t\t\tlet parent = this.categorySumary.find((el) => {\n\t\t\t\t\treturn el.children.indexOf(id) !== -1;\n\t\t\t\t});\n\n\t\t\t\tif (typeof parent !== \"undefined\") {\n\t\t\t\t\titem[\"groupName\"] = parent.name;\n\t\t\t\t\titem[\"groupColor\"] = parent.color;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t},\n\t\twatch: {\n\t\t\tsearch: function (newValue) {\n\t\t\t\tnewValue = newValue.trim();\n\t\t\t\t// console.log(\"newValue\", newValue);\n\t\t\t\tif (newValue.length === 0) {\n\t\t\t\t\tthis.tempList = this.data;\n\t\t\t\t} else {\n\t\t\t\t\tthis.tempList = this.data.filter((el) => {\n\t\t\t\t\t\treturn el.name.toLowerCase().includes(newValue.toLowerCase());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t// computed: {\n\t\t//   isOpened: function() {\n\t\t//     return this.search.trim().length > 0;\n\t\t//   }\n\t\t// }\n\t};\n</script>\n\n<style scoped>\n\t.mdContent {\n\t\twidth: 100%;\n\t\theight: calc(100% - 15px);\n\t}\n\n\t.header {\n\t\t/* text-align: center;\n  font-size: 16px; */\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tdisplay: flex;\n\t\tflex-direction: row-reverse;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t/* .header .searchDiv {\n  width: 60%;\n  height: 100%;\n  padding-top: 10px;\n} */\n\n\t._container {\n\t\twidth: 100%;\n\t\theight: calc(100% - 50px);\n\t\toverflow: hidden;\n\t}\n\n\t._container .listItem {\n\t\twidth: 98%;\n\t\theight: calc(100% - 10px);\n\t\toverflow: hidden;\n\t\toverflow-y: auto;\n\t\tmargin: auto;\n\t}\n\n\t._container .listItem .listcontent {\n\t\twidth: 95%;\n\t\tmargin: auto;\n\t}\n\n\t.empty {\n\t\t/* width: 100%;\n  height: 200px; */\n\t\twidth: 40%;\n\t\ttext-align: center;\n\t\tfont-size: 20px;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\ttext-align: center;\n\t\tmargin: auto;\n\t}\n\n\t.listContainer {\n\t\twidth: 95%;\n\t\theight: 60px;\n\t\tfont-size: 1.2em;\n\t\tpadding: 0 5px 0 5px;\n\t\tborder-bottom: 1px solid white;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t}\n\n\t.listContainer:hover {\n\t\tcursor: pointer;\n\t\tbackground-color: gray;\n\t}\n\n\t.paginationContent {\n\t\twidth: 40%;\n\t\tmargin: auto;\n\t\theight: 40px;\n\t}\n\n\t.paginationContent {\n\t\twidth: 100%;\n\t\theight: 40px;\n\t}\n\n\t.groupColor {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t\tborder: 1px solid white;\n\t}\n\n\t.spiner {\n\t\tposition: absolute;\n\t\ttop: calc(50% - 30px);\n\t\tright: calc(50% - 30px);\n\t}\n</style>\n\n<style>\n\t.listContainer .md-list-item-content {\n\t\tpadding-left: 5px;\n\t\t/* padding-top: 4px;\n  padding-bottom: 4px; */\n\t}\n\n\t.listContainer .panel_link_button .md-ripple {\n\t\tpadding: unset !important;\n\t}\n\n\t/*\n//////////////////////////////////////////////////////////////////\n*/\n\n\t.buscar-caja {\n\t\t/* position: absolute; */\n\t\t/* top: 50%;\n  left: 50%; */\n\t\t/* right: 0; */\n\t\t/* transform: translate(-50%, -50%); */\n\t\t/* background: #2f3640; */\n\t\theight: 35px;\n\t\tborder-radius: 40px;\n\t\tmargin-top: 5px;\n\t\t/* padding: 10px; */\n\t}\n\n\t.buscar-caja.isOpened {\n\t\tbackground: #2f3640;\n\t}\n\n\t/* .buscar-caja:hover > .buscar-txt, */\n\t.buscar-caja > .buscar-txt.isOpened {\n\t\twidth: 240px;\n\t\tpadding: 0 6px;\n\t}\n\n\t/* .buscar-caja:hover > .buscar-btn {\n  background: white;\n  color: black;\n} */\n\n\t.buscar-btn {\n\t\tcolor: #e84118;\n\t\tfloat: right;\n\t\twidth: 40px;\n\t\theight: 35px;\n\t\tborder-radius: 50%;\n\t\t/* background: #2f3640; */\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\ttransition: 0.4s;\n\t\tcolor: white;\n\t\tcursor: pointer;\n\t}\n\n\t.buscar-btn > i {\n\t\tfont-size: 30px;\n\t}\n\n\t.buscar-txt {\n\t\tborder: none;\n\t\tbackground: none;\n\t\toutline: none;\n\t\tfloat: left;\n\t\tpadding: 0;\n\t\tcolor: white;\n\t\tfont-size: 16px;\n\t\ttransition: 0.4s;\n\t\tline-height: 40px;\n\t\twidth: 0px;\n\t\t/* font-weight: bold; */\n\t}\n\n\t/*\n//////////////////////////////////////////////////////////\n//                VUe scroll\n//////////////////////////////////////////////////////////\n*/\n\t.vue-recycle-scroller {\n\t\tposition: relative;\n\t}\n\t.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n\t\toverflow-y: auto;\n\t}\n\t.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n\t\toverflow-x: auto;\n\t}\n\t.vue-recycle-scroller.direction-horizontal {\n\t\tdisplay: -webkit-box;\n\t\tdisplay: -ms-flexbox;\n\t\tdisplay: flex;\n\t}\n\t.vue-recycle-scroller__slot {\n\t\t-webkit-box-flex: 1;\n\t\t-ms-flex: auto 0 0px;\n\t\tflex: auto 0 0;\n\t}\n\t.vue-recycle-scroller__item-wrapper {\n\t\t-webkit-box-flex: 1;\n\t\t-ms-flex: 1;\n\t\tflex: 1;\n\t\t-webkit-box-sizing: border-box;\n\t\tbox-sizing: border-box;\n\t\toverflow: hidden;\n\t\tposition: relative;\n\t}\n\t.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twill-change: transform;\n\t}\n\t.vue-recycle-scroller.direction-vertical\n\t\t.vue-recycle-scroller__item-wrapper {\n\t\twidth: 100%;\n\t}\n\t.vue-recycle-scroller.direction-horizontal\n\t\t.vue-recycle-scroller__item-wrapper {\n\t\theight: 100%;\n\t}\n\t.vue-recycle-scroller.ready.direction-vertical\n\t\t.vue-recycle-scroller__item-view {\n\t\twidth: 100%;\n\t}\n\t.vue-recycle-scroller.ready.direction-horizontal\n\t\t.vue-recycle-scroller__item-view {\n\t\theight: 100%;\n\t}\n\t.resize-observer[data-v-b329ee4c] {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tz-index: -1;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder: none;\n\t\tbackground-color: transparent;\n\t\tpointer-events: none;\n\t\tdisplay: block;\n\t\toverflow: hidden;\n\t\topacity: 0;\n\t}\n\t.resize-observer[data-v-b329ee4c] object {\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\toverflow: hidden;\n\t\tpointer-events: none;\n\t\tz-index: -1;\n\t}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <!-- <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"dialog\">\n    <md-dialog-title class=\"title\">Link</md-dialog-title> -->\n\n  <!-- <md-dialog-content class=\"dialogContainer\"> -->\n  <table-component @filter=\"searchOnTable\"\n                   :searched=\"searched\"\n                   :groups=\"groups\"\n                   :contextId=\"contextId\"></table-component>\n\n  <!-- </md-dialog-content> -->\n\n  <!-- <md-dialog-actions>\n    <md-button class=\"md-primary\"\n               @click=\"closeDialog(false)\">Close</md-button>\n  </md-dialog-actions>\n  </md-dialog> -->\n\n</template>\n\n<script>\nimport { groupService } from \"../../services/service\";\n\nimport tableComponent from \"../others/tableComponent.vue\";\nimport { Lst } from \"spinal-core-connectorjs_type\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport geographicService from \"spinal-env-viewer-context-geographic-service\";\nimport bimobjectservice from \"spinal-env-viewer-plugin-bimobjectservice\";\n\nexport default {\n  name: \"GlobalLinkerPanel\",\n  props: [\"onFinised\"],\n  components: {\n    \"table-component\": tableComponent\n  },\n  data() {\n    this.contextId = null;\n    return {\n      showDialog: true,\n      inputValue: \"\",\n      // search: null,\n      searched: [],\n      groups: [],\n      elements: [],\n      allData: []\n    };\n  },\n  methods: {\n    opened(option) {\n      this.getData(option.nodeId, option.contextId).then(res => {\n        if (res) {\n          // console.log(\"res\", res);\n\n          this.groups = res.groups;\n          this.elements = res.elements.slice(0, 10);\n          this.searched = res.elements.slice(0, 10);\n          // this.elements = res.elements;\n          // this.searched = res.elements;\n          this.contextId = res.contextId;\n          // console.log(\"start\");\n          // this.allData = await this.getList(this.groups, this.elements);\n          // console.log(\"end\", this.allData);\n        }\n      });\n    },\n\n    // removed() {\n    //   this.showDialog = false;\n    // },\n    // closeDialog(closeResult) {\n    //   if (typeof this.onFinised === \"function\") {\n    //     this.onFinised(closeResult);\n    //   }\n    // },\n    searchOnTable(params) {\n      this.filterByFloor(params.floorsSelected).then(res => {\n        if (params.search && params.search.trim().length > 0) {\n          this.searched = res.filter(el => {\n            return el.name.toLowerCase().includes(params.search.toLowerCase());\n          });\n        } else {\n          this.searched = res;\n        }\n      });\n    },\n\n    filterByFloor(floorsIds) {\n      if (floorsIds.length === 0) {\n        return Promise.resolve(this.elements);\n      } else {\n        let promises = [];\n        let contextType = SpinalGraphService.getInfo(this.contextId).type.get();\n\n        let type =\n          contextType === groupService.constants.ROOMS_GROUP_CONTEXT\n            ? geographicService.constants.ROOM_TYPE\n            : geographicService.constants.EQUIPMENT_TYPE;\n\n        for (let index = 0; index < floorsIds.length; index++) {\n          const id = floorsIds[index];\n          promises.push(\n            SpinalGraphService.findNodes(\n              id,\n              geographicService.constants.GEOGRAPHIC_RELATIONS,\n              node => {\n                return node.info.type.get() === type;\n              }\n            )\n          );\n        }\n\n        return Promise.all(promises).then(el => {\n          let res = [];\n          for (let found of el) {\n            let foundInfo = found.map(x => x.info);\n            res.push(...foundInfo);\n          }\n          return new Lst(res).get();\n        });\n      }\n    },\n\n    // getList(groups, elements) {\n    //   let res = elements.map(element => {\n    //     let obj = [Promise.resolve(element.name)];\n\n    //     const l = groups.map(group => {\n    //       return groupService.elementIsLinkedToGroup(group.id, element.id);\n    //     });\n\n    //     return Promise.all(obj.concat(l));\n    //   });\n    //   return Promise.all(res);\n    // },\n\n    getData(nodeId, contextId) {\n      const contextType = SpinalGraphService.getInfo(contextId).type.get();\n\n      let selectedContextRelation = [\n        groupService.constants.CATEGORY_TO_GROUP_RELATION,\n        groupService.constants\n      ];\n\n      let refContextName =\n        contextType === groupService.constants.ROOMS_GROUP_CONTEXT\n          ? geographicService.constants.ROOM_REFERENCE_CONTEXT\n          : bimobjectservice.constants.BIM_OBJECT_CONTEXT_TYPE;\n\n      let refContextRelation =\n        contextType === groupService.constants.ROOMS_GROUP_CONTEXT\n          ? geographicService.constants.ROOM_RELATION\n          : bimobjectservice.constants.BIM_OBJECT_RELATION_NAME;\n\n      let context = SpinalGraphService.getContext(refContextName);\n\n      return SpinalGraphService.findNodes(\n        nodeId,\n        selectedContextRelation,\n        node => {\n          let type = node.getType().get();\n          return (\n            type === groupService.constants.ROOMS_GROUP ||\n            type === groupService.constants.EQUIPMENTS_GROUP\n          );\n        }\n      ).then(async res => {\n        return {\n          contextId: contextId,\n          groups: res.map(el => el.info.get()),\n          elements: context\n            ? await SpinalGraphService.getChildren(context.info.id.get(), [\n                refContextRelation\n              ]).then(el => {\n                return el.map(x => x.get());\n              })\n            : []\n        };\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.dialog {\n  width: calc(80%);\n  height: 60%;\n}\n\n.dialog .title {\n  text-align: center;\n  font-size: 18px;\n}\n\n.dialog .table {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-room-manager.692a8af1.css.map"}