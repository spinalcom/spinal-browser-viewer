{"mappings":"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S,M;oB,I,U,G;gB;gB,a,S,M;oB,O,I,W,C;gB;Y;Q,G;Y,G,mB;gB,I,E,C,I,E,C,I,K;a;Y,I,E,C;Y,G,qB;gB,G,Y;oB,G,S;wB,I,E,C,I,E,C,I,K;qB;oB,I,E,C;oB,G,Y;wB,O;4B,O,I,U;4B,U,S,G;gC,I,U,G;4B;4B,Y;wB;oB;iB,E;a,E;Y,I,E,C;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,a;oB,a;oB,O;wB,Y,C,C,I,U,C,I,G,M,G,C;oB;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AA7DA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAiC,MAAM;IACrD,OAAO,eAAe,GAAG,QAAQ,oBAAiC,eAAe;IACjF,OAAO,QAAQ,GAAG;IAG5B,QAAQ,oBAA+B,OAAO,CAAC;IAC/C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,M,Y,C,G,uD,A,E,S;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,W;Y,gB;Y,kB;Y,e,E;Y,c;Y,Y;Q;I;I,S;Q,Q,M;Y,I,C,c,G,O,Y,C,E,C,G;Y,I,C,gB,G,O,Y,C,I,C,G;Y,I,C,S,G,O,O,C,E,C,G;Y,I,C,a,G,I,C,iB;Q;Q;Y,I,a,U,sB,C,O,C,I,C,gB;Y,I,O;mB,U,sB;a;Y,I,e,IAoBf,OAAA,KAAA,KAAA,CAAA,aAAA,GAAA,KAAA,MAAA,GAAA;YAGA,OAAA,KAAA,GAAA,CAAA,CAAA;gBACA,OAAA;oBACA,MAAA;oBACA,MAAA,IAAA,CAAA,UAAA,CAAA;gBACA;YACA;QACA;QAEA,SAAA,MAAA;YACA,IAAA,OAAA,WAAA,EACA,OAAA,IAAA,CAAA,YAAA;gBACA,KAAA,UAAA,SAAA;oBACA,CAAA,GAAA,uDAAA,AAAA,EAAA,OAAA,CACA,IAAA,CAAA,SAAA,EACA,IAAA,CAAA,cAAA,EACA,IAAA,CAAA,UAAA,CAAA,IAAA;oBAEA;gB,K,U,a;oBAEA,CAAA,GAAA,uDAAA,AAAA,EAAA,WAAA,CACA,IAAA,CAAA,SAAA,E,I,C,c,EAEA,IAAA,CAAA,UAAA,CAAA,IAAA;oBAEA;gBACA,KAAA,UAAA,UAAA;oB,C,G,uD,A,E,Q,CAEA,IAAA,CAAA,SAAA,E,I,C,c,EAEA,IAAA,CAAA,UAAA,CAAA,IAAA;oBAEA;gB,K,U,S;oBAEA,CAAA,GAAA,uDAAA,AAAA,EAAA,OAAA,CACA,IAAA,CAAA,SAAA,EACA,IAAA,CAAA,cAAA,EACA,IAAA,CAAA,UAAA,CAAA,IAAA;oBAEA;gBACA,KAAA,UAAA,SAAA;oB,C,G,uD,A,E,O,CAEA,IAAA,CAAA,SAAA,EACA,IAAA,CAAA,cAAA,EACA,IAAA,CAAA,UAAA,CAAA,IAAA;oBAEA;YACA;YAGA,IAAA,CAAA,UAAA,GAAA;QACA;QACA,aAAA,WAAA;YACA,IAAA,OAAA,IAAA,CAAA,SAAA,KAAA,YACA,IAAA,CAAA,SAAA,CAAA;gBAAA;gBAAA,YAAA,IAAA,CAAA,UAAA;YAAA;QAEA;QAEA;YACA,OAAA,IAAA,CAAA,UAAA,CAAA,IAAA,GAAA,MAAA,KAAA,KAAA,CAAA,IAAA,CAAA,YAAA;QACA;QAEA,YAAA,IAAA;YACA,OAAA,KAAA,OAAA,CAAA,cAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,G,Y;gB,G,S;oB,O;wB,O;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,a;oB,O;wB,Q;wB,M;oB;oB,O;wB,O,I,Y;wB,U,S,G;4B,I,Y,G;wB;wB,Y;oB;gB,G,I,E,C,I,a,E,S,G,E,K;oB,O,G,a;wB,K;wB,O;4B,S,I,I;wB;oB,G;wB,I,E,C,I,E,C,I,I;qB;gB,I;a,E;Y,I,E,C;Y,G,Y;gB,G,S;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,O;wB,O,I,U;wB,U,S,G;4B,I,U,G;wB;wB,Y;oB;gB;a,E;S,E;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,O;oB,Y,I,U;gB;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AA1GA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA+B,MAAM;IACnD,OAAO,eAAe,GAAG,QAAQ,oBAA+B,eAAe;IAC/E,OAAO,QAAQ,GAAG;IAG5B,QAAQ,oBAA6B,OAAO,CAAC;IAC7C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,K;Y,M;Q;I;I,S;Q,Q,M;Y,I,C,U,G;Y,I,C,G,G,O,G;Y,I,C,I,G,O,I;Q;Q,S,M;Y,I,C,U,G;Q;Q,a,W,G;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,e;Q,O;Y,e;Y,e,I,I;Y,a,I,U;Y,iB;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Q;I,G;Q,G,Q;Y,I,E,C,I,E,C,I,G;S;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;ACLA;;;;;;;;;;;;;;;;;;;;;;CAsBC;AAED,MAAM,SAAS,OAAO,UAAU,cAAc,SAAS;AACvD,MAAM,4BAA4B,QAAQ;AAC1C,MAAM,iBAAiB,QAAQ;AAE/B,IAAI,OAAO,OAAO,MAAM,KAAK,aAAa,OAAO,MAAM,GAAG,CAAC;AAC3D,IAAI,OAAO,OAAO,MAAM,CAAC,yBAAyB,KAAK,aACrD,OAAO,MAAM,CAAC,yBAAyB,GAAG,IAAI;AAChD,MAAM,uBAAuB,QAAQ,oBACnC,OAAO,MAAM,CAAC,yBAAyB,EACvC;AAGF,OAAO,OAAO,GAAG;IACf,2BAA2B,OAAO,MAAM,CAAC,yBAAyB;IAClE;IACA;IACA,SAAQ,GAAG;QACT,IAAI,SAAS,CAAC,0BAA0B,GACtC,OAAO,MAAM,CAAC,yBAAyB;IAC3C;AACF;;;AC5CA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;;;;;CAKC,GACD,MAAM;IACJ;;;GAGC,GACD,aAAc;QACZ,IAAI,CAAC,MAAM,GAAG,CAAC;IACjB;IAEA;;;;;;GAMC,GACD,cAAc,SAAS,EAAE,cAAc,EAAE;QACvC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG;IAC3B;IAEA;;;;;;;GAOC,GACD,UAAU,SAAS,EAAE,MAAM,EAAE;QAC3B,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,aACpC,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;QAC1C,OAAO;IACT;IACA;;;;;;;GAOC,GACD,WAAW,SAAS,EAAE,MAAM,EAAE;QAC5B,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,aACpC,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC;QAC3C,OAAO;IACT;IACA;;;;;;;GAOC,GACD,YAAY,SAAS,EAAE,MAAM,EAAE;QAC7B,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,aACpC,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;QAC5C,OAAO;IACT;AACF;AAEA,OAAO,OAAO,GAAG;;;AC3FjB;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;;;;CAIC,GACD,MAAM;IACJ,aAAc,CAAC;IAEf,UAAU,MAAM,EAAE,CAAC;IACnB,WAAW,MAAM,EAAE,CAAC;IACpB,YAAY,MAAM,EAAE,CAAC;AACvB;AAEA,OAAO,OAAO,GAAG;;;ACrCjB;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED,SAAS,WAAW,MAAM;IACxB,MAAM,MAAM,CAAC;IACb,IAAI,CAAC,OAAO,iBAAiB,EAC3B,MAAM,IAAI,MAAM;IAGlB,IAAI,IAAI,GAAG,OAAO,IAAI,IAAI;IAC1B,IAAI,iBAAiB,GAAG,OAAO,iBAAiB;IAChD,IAAI,eAAe,GAAG,OAAO,eAAe,IAAI,SAAS,IAAI;IAC7D,OAAO;AACT;AAEA,SAAS;IACP,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,IAAI,CAAC,MAAM,GAAG,SAAS,aAAa,CAAC;QACrC,MAAM,SAAS,SAAS,aAAa,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG;QACxB,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM;QAChD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;YAC9C,WAAW;gBACT,WAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI;YACrC;QACF,GAAG,MAAM,CAAC;IACZ;IACA,OAAO,IAAI,CAAC,MAAM;AACpB;AAEA;;;;;CAKC,GACD,OAAO,OAAO,GAAG,SAAS,yBAAyB,EAAE,cAAc;IACjE,OAAO;QACL;;;;;;;;;KASC,GACD,OAAM,MAAM;YACV,IAAI,MAAM,WAAW;YACrB,MAAM,cAAc,cAAc;gBAChC,aAAc;oBACZ,KAAK;oBACL,IAAI,CAAC,GAAG,GAAG;oBACX,IAAI,CAAC,MAAM,GAAG;oBACd,IAAI,CAAC,SAAS,GAAG;gBACnB;gBAEA,UAAU,GAAG,EAAE;oBACb,UAAU,IAAI,CAAC,IAAI;oBACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBACxB;gBACA,WAAW,GAAG,EAAE;oBACd,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM;wBACxB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;wBACvB,IAAI,CAAC,MAAM,CAAC,MAAM;wBAClB,IAAI,CAAC,MAAM,GAAG;wBACd,IAAI,CAAC,SAAS,GAAG;oBACnB;gBACF;gBAEA,YAAY,GAAG,EAAE;oBACf,IAAI,IAAI,CAAC,MAAM,KAAK,MAClB,IAAI,CAAC,UAAU,CAAC;yBAEhB,IAAI,CAAC,SAAS,CAAC;gBAEnB;gBAEA;;SAEC,GACD,UAAU,WAAW,EAAE;oBACrB,IAAI,CAAC,UAAU,CAAC;gBAClB;YACF;YACA,IAAI,sBAAsB,IAAI;YAC9B,0BAA0B,aAAa,CAAC,IAAI,IAAI,EAAE;QACpD;IACF;AACF;;;AChHA;;;;;;;;;;;;;;;;;;;;;;CAsBC;AAED,MAAM,SAAS,OAAO,UAAU,cAAc,SAAS;AACvD,MAAM,2BAA2B,QAAQ;AACzC,MAAM,mBAAmB,QAAQ;AACjC,MAAM,WAAW,QAAQ;AACzB,IAAI,OAAO,OAAO,MAAM,KAAK,aAAa,OAAO,MAAM,GAAG,CAAC;AAC3D,IAAI,OAAO,OAAO,MAAM,CAAC,wBAAwB,KAAK,aACpD,OAAO,MAAM,CAAC,wBAAwB,GAAG,IAAI;AAE/C,OAAO,OAAO,GAAG;IACf,WAAW;IACX,0BAA0B,OAAO,MAAM,CAAC,wBAAwB;IAChE;IACA,SAAQ,GAAG;QACT,IAAI,SAAS,CAAC,yBAAyB,GACrC,OAAO,MAAM,CAAC,wBAAwB;IAC1C;AACF;;;ACxCA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;AACA,IAAI,WAAW,QAAQ;AAEvB;;;;;CAKC,GACD,MAAM;IACJ;;;GAGC,GACD,aAAc;QACZ,IAAI,CAAC,IAAI,GAAG,CAAC;QACb,IAAI,CAAC,qBAAqB,GAAG,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,GAAE,KAAK;QACrB,IAAI,CAAC,YAAY,GAAG,SAClB;YACE,IAAI,CAAC,MAAM,CAAC,OAAO;YACnB,IAAI,CAAC,YAAY,GAAG,KAAO;QAC7B,GACA,MACA;YAAE,SAAS;YAAO,UAAU;QAAK;IAErC;IAEA,cAAc;IACd,yBAAyB;IACzB,IAAI;IAEJ;;;;GAIC,GACD,MAAM,aAAa,YAAY,EAAE;QAC/B,IAAI,CAAC,YAAY;QACjB,MAAM,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI;QACrC,MAAM,OACJ,yBAAyB,OAAO,MAAM,CAAC,YAAY,CAAC,OAAO,GAAG,QAAQ;QACxE,MAAM,cAAc,MAAM,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;QAC1D,IAAI,MAAM;QACV,IAAI,aACF,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,WAAW,CAAC,MAAM,IAAI,CAAC,KAAK,IAC1D,MAAM,AAAC,CAAA,AAAC,KAAK,YAAY,WAAW,CAAC,EAAE,GAAI,YAAW,MAAO;QAGjE,OAAO;IACT;IAEA;;;;;;;;GAQC,GACD,YAAY,QAAQ,EAAE,gBAAgB,EAAE,YAAY,EAAE;QACpD,IAAI,CAAC,YAAY;QACjB,IAAI,OAAO,iBAAiB,aAAa;YACvC,QAAQ,IAAI,CACV;YAIF,eAAe;QACjB;QACA,oCAAoC;QACpC,IAAI,cAAc,IAAI,CAAC,IAAI,CAAC,SAAS;QAErC,gCAAgC;QAChC,IAAI,CAAE,CAAA,uBAAuB,KAAI,GAC/B,cAAc,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE;QAGxC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,eAC7C,IAAI,CAAC,qBAAqB,CAAC,aAAa,GACtC,IAAI,CAAC,YAAY,CAAC;QAGtB,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC7C,8DAA8D;YAC9D,IAAI,aAAa,YAAY,OAAO,CAAC,sBAAsB,IACzD,YAAY,IAAI,CAAC;QAErB;IACF;IAEA;;;;;;;GAOC,GACD,MAAM,QAAQ,QAAQ,EAAE,MAAM,EAAE;QAC9B,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO;QACzB,oCAAoC;QACpC,IAAI,cAAc,IAAI,CAAC,IAAI,CAAC,SAAS;QAErC,gCAAgC;QAChC,IAAI,CAAE,CAAA,uBAAuB,KAAI,GAC/B,OAAO,QAAQ,OAAO,CAAC,EAAE;QAE3B,IAAI,WAAW,YAAY,GAAG,CAAC,eAAgB,CAAC,EAAE,GAAG;YACnD,IAAI;gBACF,MAAM,MAAM,MAAM,EAAE,OAAO,CAAC;gBAC5B,OAAO,QAAQ,KAAK,KAAK;YAC3B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC;gBACd,OAAO;YACT;QACF;QACA,IAAI;YACF,MAAM,SAAS,MAAM,QAAQ,GAAG,CAAC;YACjC,OAAO,OAAO,MAAM,CAAC,CAAC,MAAQ,QAAQ;QACxC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;YACd,OAAO,EAAE;QACX;IACF;AACF;AAEA,OAAO,OAAO,GAAG;;;ACxJjB;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;;;;;;;;;;;;;;;;CAgBC,GACD,MAAM;IACJ;;;;;;;;;;;;;;GAcC,GACD,YAAY,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,CAAE;QACxD,IAAI,CAAC,KAAK,GAAG,SAAS;QACtB,IAAI,CAAC,WAAW,GAAG,eAAe;QAClC,IAAI,CAAC,SAAS,GAAG;YACf,MAAM,UAAU,IAAI,IAAI;YACxB,WAAW,UAAU,SAAS,IAAI;YAClC,iBAAiB,UAAU,UAAU,eAAe,IAAI;YACxD,WAAW,UAAU,UAAU,SAAS,IAAI;QAC9C;QAEA,IAAI,CAAC,QAAQ,GAAG;YACd,OAAO,SAAS,KAAK,IAAI;YACzB,iBAAiB,UAAU,SAAS,eAAe,IAAI;YACvD,WAAW,UAAU,SAAS,SAAS,IAAI;QAC7C;IACF;IAEA;;;;;;;GAOC,GACD,QAAQ,MAAM,EAAE,CAAC;IAEjB;;;;;GAKC,GACD,OAAO,MAAM,EAAE,CAAC;AAClB;AAEA,OAAO,OAAO,GAAG;AAEjB,SAAS,UAAU,KAAK;IACtB,IAAI,KAAK,CAAC,EAAE,KAAK,KAAK,OAAO;IAC7B,OAAO,MAAM;AACf;;;AChGA,OAAO,OAAO,GAAG;IACf,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,gBAAgB;AAClB;;;ACPA,MAAM,EACJ,gBAAgB,EACjB,GAAG,QAAQ;AACZ,MAAM,EACJ,yBAAyB,EAC1B,GAAG,QAAQ;AAEZ,MAAM,yBAAyB;IAC7B,aAAc;QACZ,KAAK,CAAC,6BACJ,2CAA2C;YACzC,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACJ;IAEA,UAAU;QACR,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,SAAS;QAEP,uCAAuC;QAEvC,IAAI,eAAe;YACjB,YAAY;YACZ,OAAO;YACP,OAAO;QACT;QAEA,0BAA0B,SAAS,CAAC,uBAAuB;IAC7D;AACF;AAEA,OAAO,OAAO,GAAG;;;;;ACpCjB;AAGA;AAIA;;AAEA,MAAM,YAAY,CAAA,GAAA,uDAAwB,AAAD,EAAE,SAAS;AAIpD,MAAM,0BAA0B,CAAA,GAAA,mDAAgB,AAAD;IAC7C,aAAc;QACZ,KAAK,CACH,aACA,wEAAwE;YACtE,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IAEJ;IAEA,QAAQ,MAAM,EAAE;QAEd,IAAI,eAAe,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG;QAE/C,IAAI,UAAU,sBAAsB,CAAC,OAAO,CAAC,kBAAkB,IAC7D,OAAO,QAAQ,OAAO,CAAC;QAGzB,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,OAAO,MAAM,EAAE;QACb,CAAA,GAAA,6DAAyB,AAAD,EAAE,SAAS,CAAC,kBAAkB;IACxD;AAEF;kBAEe;;;;AC3Cf;;AACA,WAAW;AACX,uBAAuB;AACvB,4CAA4C;AAE5C,yEAAyE;AACzE,wDAAwD;AAExD,MAAM,EACJ,gBAAgB,EACjB,GAAG,QAAQ;AAEZ,WAAW;AACX,YAAY;AACZ,qBAAqB;AAErB,MAAM,YAAY,CAAA,GAAA,uDAAwB,AAAD,EAAE,SAAS;AAGpD,MAAM,wBAAwB;IAC5B,aAAc;QACZ,KAAK,CAAC,iBAAiB,0CAA0C;YAC/D,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACF;IAEA,QAAQ,MAAM,EAAE;QAEd,IAAI,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,UAAU,YAAY,IACvD,OAAO,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,OAAO,YAAY,CAAC,EAAE,CAAC,GAAG,MACtD,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,UAAU,cAAc,EAC1D,OAAO,QAAQ,OAAO,CAAC;QAGzB,OAAO,QAAQ,OAAO,CAAC;IAGzB;IAEA,OAAO,MAAM,EAAE;QACb,IAAI,kBAAkB,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CACnD,qBAAqB;QAExB,IAAI,gBAAgB,MAAM,IAAI,GAC5B,qCAAqC;QACrC;QAGF,IAAK,IAAI,MAAM,GAAG,MAAM,gBAAgB,MAAM,EAAE,MAAO;YACrD,MAAM,EACJ,KAAK,EACL,SAAS,EACV,GAAG,eAAe,CAAC,IAAI;YAExB,MAAM,iBAAiB,CACrB,WAAW;gBACT,YAAY;oBAAC;iBAAO;YACtB,GACA,CAAA;gBACE,GAAG,OAAO,CAAC,CAAA;oBACT,OAAO,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,CAC/C,OAAO,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,QAAQ,IAAI,EAAE,QAAQ,IAAI,EAAE;gBAC9D;YACF;QAEJ;IAEA,uCAAuC;IAEvC,mEAAmE;IACnE,aAAa;IAEb,iEAAiE;IACjE,0BAA0B;IAC1B,cAAc;IACd,4DAA4D;IAC5D,cAAc;IACd,MAAM;IACN,kDAAkD;IAClD,KAAK;IAKL,MAAM;IAIR;AAEF;AAEA,OAAO,OAAO,GAAG;;;;;AC/FjB;AAEA;;AAEA,MAAM,uBAAuB,CAAA,GAAA,mDAAgB,AAAD;IAC1C,aAAc;QACZ,KAAK,CAAC,oBAAoB,oBAAoB;YAC5C,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACF;IAEA,QAAQ,MAAM,EAAE;QACd,IAAI,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,MAC5D,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAA,GAAA,uDAAiB,AAAD,EAAE,SAAS,CAC3D,YAAY,EAEf,OAAO,QAAQ,OAAO,CAAC;QAEzB,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,OAAO,MAAM,EAAE;QACb,CAAA,GAAA,uDAAiB,AAAD,EAAE,qBAAqB,CAAC,OAAO,OAAO,CAAC,EAAE,CAAC,GAAG;IAC/D;AAEF;kBAEe;;;;;AC9Bf;AAGA;;AAEA,MAAM,YAAY,CAAA,GAAA,uDAAwB,AAAD,EAAE,SAAS;AAGpD,MAAM,sBAAsB,CAAA,GAAA,mDAAgB,AAAD;IACzC,aAAc;QACZ,KAAK,CACH,iBACA,0CAA0C;YACxC,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IAEJ;IAEA,QAAQ,MAAM,EAAE;QACd,IAAI,cAAc,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG;QACzC,IAAI,eAAe,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG;QAE/C,IAAI,gBAAgB,UAAU,YAAY,IAAI,iBAAiB,UAC5D,cAAc,EACf,OAAO,QAAQ,OAAO,CAAC;QAGzB,sEAAsE;QAEtE,OAAO,QAAQ,OAAO,CAAC;IAEzB;IAEA,OAAO,MAAM,EAAE;QACb,MAAM,SAAS,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM;QAC/C,IAAI,cAAc,OAAO,qBAAqB;QAE9C,IAAI,YAAY,MAAM,KAAK,GAAG;YAC5B,MAAM;YACN;QACF;QAGA,IAAK,IAAI,MAAM,GAAG,MAAM,YAAY,MAAM,EAAE,MAAO;YACjD,MAAM,EACJ,KAAK,EACL,SAAS,EACV,GAAG,WAAW,CAAC,IAAI;YAGpB,MAAM,iBAAiB,CAAC,WAAW;gBACjC,YAAY;oBAAC;iBAAO;YACtB,GAAG,CAAC;gBAEF,GAAG,OAAO,CAAC,CAAA;oBACT,CAAA,GAAA,uDAAwB,AAAD,EAAE,aAAa,CACpC,OAAO,OAAO,EACd,OAAO,YAAY,EACnB,SACA;gBAEJ;YACF;QACF;IAEF;AAEF;kBAGe;;;ACzEf;;;;;;;;;;;;;;;;;;;;;;CAsBC;;AAkED,0DAAa;AAgCb,wEAAa;AAhGb;AACA;AACA;AACA;AAYA,MAAM,QAAQ;AACd,MAAM,cAAc;AACpB,MAAM,YAAY;AAElB,eAAe,kBAAkB,UAAU;IACzC,MAAM,mBAAmB,IAAI;IAC7B,MAAM,UAAU,EAAE;IAClB,MAAM,WAAW,EAAE;IAEnB,SAAS,qBAAqB,KAAK;QACjC,IAAI,iBAAiB,GAAG,CAAC,QAAQ,OAAO,iBAAiB,GAAG,CAAC;QAC7D,MAAM,OAAO,IAAI,QAAQ,CAAC;YACxB,MAAM,oBAAoB,CAAC,CAAC;gBAC1B,QAAQ;YACV;QACF;QACA,iBAAiB,GAAG,CAAC,OAAO;QAC5B,OAAO;IACT;IAEA,QAAQ,GAAG,CAAC,yCAAyC,WAAW,MAAM;IACtE,KAAK,MAAM,UAAU,WAAY;QAC/B,MAAM,YAAY,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG;QAC3C,MAAM,QAAQ,OAAO,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC;QAC/D,4CAA4C;QAC5C,MAAM,oBAAoB,MAAM,qBAAqB;QACrD,MAAM,aAAa,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG;QAC7C,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE;YAClC,SAAS,IAAI,CAAC,OAAO,IAAI,CAAC,GAAG;YAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QACvB,OAAO,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO,iBAAiB,CAAC,WAAW,EAAE;YACnE,QAAQ,IAAI,CAAC,iBAAiB,CAAC,WAAW;YAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,WAAW;QACpD;IACF;IACA,QAAQ,GAAG,CAAC;IACZ,IAAI,MAAM;IACV,IAAI,QAAQ,MAAM,GAAG,GAAG;QACtB,QAAQ,GAAG,CAAC,WAAW;QACvB,MAAM,CAAC,EAAE,IAAI,oBAAoB,EAAE,QAAQ,MAAM,CAAC,CAAC;IACrD;IACA,IAAI,SAAS,MAAM,GAAG,GAAG;QACvB,QAAQ,GAAG,CAAC,YAAY;QACxB,MAAM,CAAC,EAAE,IAAI,wBAAwB,EAAE,SAAS,MAAM,CAAC,CAAC;IAC1D;IACA,CAAA,GAAA,6DAAyB,AAAD,EAAE,SAAS,CAAC,sBAClC;QAAE,KAAK;QAAK,MAAM;IAAK;AAC3B;AAEO,MAAM,6BAA6B,CAAA,GAAA,mDAAgB,AAAD;IACvD,aAAc;QACZ,KAAK,CAAC,OAAO,aAAa;YACxB,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACF;IACA,QAAQ,MAAM,EAAE;QACd,IAAI,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,WACrC,OAAO,QAAQ,OAAO,CAAC;QAEzB,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,MAAM,OAAO,MAAM,EAAE;QACnB,MAAM,SAAS,OAAO,YAAY,CAAC,EAAE,CAAC,GAAG;QACzC,MAAM,QAAQ,CAAA,GAAA,+CAAkB,AAAD,EAAE,WAAW,CAAC;QAC7C,MAAM,aAAa,EAAE;QACrB,MAAM,cAAc,MAAM,MAAM,WAAW,CAAC;QAC5C,KAAK,MAAM,cAAc,YAAa;YACpC,4CAA4C;YAC5C,MAAM,SAAS,MAAM,WAAW,WAAW,CAAC;YAC5C,WAAW,IAAI,IAAI;QACrB;QACA,OAAO,kBAAkB;IAC3B;AACF;AAIO,MAAM,2CAA2C,CAAA,GAAA,mDAAgB,AAAD;IACrE,aAAc;QACZ,KAAK,CAAC,OAAO,aAAa;YACxB,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACF;IACA,QAAQ,MAAM,EAAE;QACd,IAAI,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAA,GAAA,uBAAY,AAAD,GAChD,OAAO,QAAQ,OAAO,CAAC;QAEzB,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,MAAM,OAAO,MAAM,EAAE;QACnB,MAAM,SAAS,OAAO,YAAY,CAAC,EAAE,CAAC,GAAG;QACzC,MAAM,QAAQ,CAAA,GAAA,+CAAkB,AAAD,EAAE,WAAW,CAAC;QAC7C,MAAM,aAAa,IAAI;QAEvB,MAAM,eAAe;YACnB,CAAA,GAAA,wBAAa,AAAD;YACZ,CAAA,GAAA,4BAAiB,AAAD;YAChB,CAAA,GAAA,wBAAa,AAAD;YACZ,CAAA,GAAA,yBAAc,AAAD;YACb,CAAA,GAAA,wBAAa,AAAD;YACZ,CAAA,GAAA,6BAAkB,AAAD;YACjB,CAAA,GAAA,6BAAkB,AAAD;YACjB;SACD;QAED,MAAM,MAAM,IAAI,CAAC,cAAc,CAAC;YAC9B,IAAI,OAAO,KAAK,IAAI,CAAC,UAAU,KAAK,eAClC,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,aAC1B,WAAW,GAAG,CAAC;YAEjB,OAAO;QACT;QACA,OAAO,kBAAkB;IAC3B;AACF;;;A;AEjKA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,c,C,S,c;I,O;A;A,Q,uB,G,Q,sB,G,Q,sB,G,Q,uB,G,Q,0B,G,Q,sB,G,Q,kB,G,Q,c,G,Q,iB,G,Q,iB,G,Q,0B,G,Q,kB,G,Q,oB,G,Q,a,G,Q,a,G,Q,c,G,Q,iB,G,Q,a,G,Q,sB,G,Q,c,G,Q,gB,G,Q,S,G,Q,S,G,Q,U,G,Q,a,G,Q,S,G,Q,Y,G,K;AAEH,MAAM,eAAe;AAmFnB,QAAA,YAAA,GAAA;AAlFF,MAAM,YAAY;AAmFhB,QAAA,SAAA,GAAA;AAlFF,MAAM,gBAAgB;AAmFpB,QAAA,aAAA,GAAA;AAlFF,MAAM,aAAa;AAmFjB,QAAA,UAAA,GAAA;AAlFF,MAAM,YAAY;AAmFhB,QAAA,SAAA,GAAA;AAlFF,MAAM,YAAY;AAmFhB,QAAA,SAAA,GAAA;AAlFF,MAAM,iBAAiB;AAoFrB,QAAA,cAAA,GAAA;AAnFF,MAAM,iBAAiB;AA+FrB,QAAA,cAAA,GAAA;AA7FF,MAAM,gBAAgB;AAmFpB,QAAA,aAAA,GAAA;AAlFF,MAAM,oBAAoB;AAmFxB,QAAA,iBAAA,GAAA;AAlFF,MAAM,iBAAiB;AAmFrB,QAAA,cAAA,GAAA;AAlFF,MAAM,gBAAgB;AAmFpB,QAAA,aAAA,GAAA;AAlFF,MAAM,gBAAgB;AAmFpB,QAAA,aAAA,GAAA;AAlFF,MAAM,qBAAqB;AAoFzB,QAAA,kBAAA,GAAA;AAnFF,MAAM,qBAAqB;AAwFzB,QAAA,kBAAA,GAAA;AAvFF,MAAM,0BAA0B;AA6F9B,QAAA,uBAAA,GAAA;AA3FF,MAAM,yBAAyB;AAsF7B,QAAA,sBAAA,GAAA;AArFF,MAAM,6BAA6B;AAsFjC,QAAA,0BAAA,GAAA;AArFF,MAAM,0BAA0B;AAsF9B,QAAA,uBAAA,GAAA;AArFF,MAAM,yBAAyB;AAsF7B,QAAA,sBAAA,GAAA;AArFF,MAAM,yBAAyB;AAsF7B,QAAA,sBAAA,GAAA;AApFF,MAAM,mBAAmB,OAAO,MAAM,CAAC;IACrC;IACA;IACA;IACA;IACA;CACD;AA2DC,QAAA,gBAAA,GAAA;AAzDF,MAAM,yBAAyB,OAAO,MAAM,CAAC;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAmDC,QAAA,sBAAA,GAAA;AAjDF,MAAM,uBAAuB,OAAO,MAAM,CAAC;IACzC;IACA;IACA;IACA;IACA;IACA;CACD;AAgDC,QAAA,oBAAA,GAAA;AA9CF,MAAM,6BAA6B,OAAO,MAAM,CAAC;IAC/C;IACA;IACA;IACA;IACA;IACA;CACD;AAyCC,QAAA,0BAAA,GAAA;AAvCF,MAAM,oBAAoB,OAAO,MAAM,CACrC,IAAI,IAAI;IACN;QAAC;QAAW;KAAc;IAC1B;QAAC;QAAe;KAAkB;IAClC;QAAC;QAAY;KAAe;IAC5B;QAAC;QAAW;KAAc;IAC1B;QAAC;QAAW;KAAc;IAC1B;QAAC;QAAgB;KAAmB;CACrC;AAgCD,QAAA,iBAAA,GAAA;AA7BF,MAAM,oBAAoB,OAAO,MAAM,CACrC,IAAI,IAAI;IACN;QAAC;QAAe;KAAU;IAC1B;QAAC;QAAmB;KAAc;IAClC;QAAC;QAAgB;KAAW;IAC5B;QAAC;QAAe;KAAU;IAC1B;QAAC;QAAe;KAAU;IAC1B;QAAC;QAAoB;KAAe;CACrC;AAsBD,QAAA,iBAAA,GAAA","sources":["node_modules/spinal-env-viewer-context-geographic/index.js","node_modules/spinal-env-viewer-context-geographic/registerDialogs.js","node_modules/spinal-env-viewer-context-geographic/vue/dialog.vue","node_modules/spinal-env-viewer-context-geographic/vue/addChildDialog.vue","node_modules/spinal-env-viewer-context-geographic/vue/notification.vue","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-context-menu-service/index.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextMenuService.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextApp.js","node_modules/spinal-env-viewer-context-menu-service/constants.js","node_modules/spinal-env-viewer-context-geographic/classes/createContext.js","node_modules/spinal-env-viewer-context-geographic/classes/addAbstract.js","node_modules/spinal-env-viewer-context-geographic/classes/addReference.js","node_modules/spinal-env-viewer-context-geographic/classes/addToReferenceContext.js","node_modules/spinal-env-viewer-context-geographic/classes/addBimObject.js","node_modules/spinal-env-viewer-context-geographic/classes/updateDbId.js","node_modules/spinal-env-viewer-context-geographic-service/build/constants.js","node_modules/spinal-env-viewer-context-geographic-service/src/constants.ts"],"sourcesContent":["/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst HeaderBarName = \"GraphManagerTopBar\";\nconst sidebarName = \"GraphManagerSideBar\";\n\nimport \"./registerDialogs\";\nimport {spinalContextMenuService} from \"spinal-env-viewer-context-menu-service\";\n\nimport CreateContextBtn from './classes/createContext';\nimport AddAbstactElement from \"./classes/addAbstract\";\nimport AddReferenceBtn from \"./classes/addReference\";\nimport AddToReference from \"./classes/addToReferenceContext\";\nimport AddBimObjects from \"./classes/addBimObject\";\nimport {UpdateBimObjectIdBtn,SpatialContextUpdateBimObjectIdBtn } from './classes/updateDbId';\n\nspinalContextMenuService.registerApp(HeaderBarName, new CreateContextBtn(), [\n  3\n]);\n\nspinalContextMenuService.registerApp(sidebarName, new AddAbstactElement(), [3]);\nspinalContextMenuService.registerApp(sidebarName, new AddReferenceBtn(), [3]);\nspinalContextMenuService.registerApp(sidebarName, new AddToReference(), [3]);\nspinalContextMenuService.registerApp(sidebarName, new AddBimObjects(), [3]);\nspinalContextMenuService.registerApp(sidebarName, new UpdateBimObjectIdBtn(), [3]);\nspinalContextMenuService.registerApp(sidebarName, new SpatialContextUpdateBimObjectIdBtn(), [3]);\n","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport vue from \"vue\";\nimport dialogComponent from \"./vue/dialog.vue\";\nimport addChildDialogComponent from \"./vue/addChildDialog.vue\";\nimport notificationComponent from \"./vue/notification.vue\";\n\nconst {\n  SpinalMountExtention\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst dialogs = [{\n  name: \"createContextDialog\",\n  vueMountComponent: vue.extend(dialogComponent),\n  parentContainer: document.body\n}, {\n  name: \"addChildDialog\",\n  vueMountComponent: vue.extend(addChildDialogComponent),\n  parentContainer: document.body\n}, {\n  name: \"notificationDialog\",\n  vueMountComponent: vue.extend(notificationComponent),\n  parentContainer: document.body\n}];\n\nfor (let index = 0; index < dialogs.length; index++) {\n  SpinalMountExtention.mount(dialogs[index]);\n}\n","<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>{{title}}</md-dialog-title>\n      <md-dialog-content>\n        <md-field>\n          <label>{{label}}</label>\n          <md-input v-model=\"inputValue\"></md-input>\n        </md-field>\n\n      </md-dialog-content>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\"\n                   :disabled=\"!(inputValue.trim().length > 0)\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport utilities from \"spinal-env-viewer-context-geographic-service\";\n//import { toasted } from \"../toats\";\n\nexport default {\n  name: \"dialogComponent\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      inputValue: \"\",\n      title: \"\",\n      label: \"\",\n      type: \"\",\n      selectedNode: null,\n      context: null\n    };\n  },\n  methods: {\n    opened(option) {\n      this.title = option.title;\n      this.label = option.label;\n      this.type = option.type;\n      this.selectedNode = option.selectedNode;\n      this.context = option.context;\n    },\n\n    async removed(option) {\n      // eslint-disable-next-line no-unused-vars\n      var success;\n\n      if (option.closeResult && option.inputValue.trim().length > 0) {\n        if (typeof this.selectedNode === \"undefined\") {\n          success = await utilities.createContext(option.inputValue.trim());\n        }\n\n        // else {\n        // success = utilities.addAbstractElement(\n        // this.context,\n        // this.selectedNode,\n        // option.inputValue\n        // );\n        // }\n\n        // // if (success) {\n        // //   toasted.success(\"Creation successful\");\n        // // } else {\n        // //   toasted.error(\"An error occurred, try again later\");\n        // // }\n      }\n\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    }\n  }\n};\n</script>\n","<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title>Add Child</md-dialog-title>\n    <md-dialog-content>\n\n      <md-field>\n        <label for=\"childType\">Select Type</label>\n        <md-select v-model=\"typeSelected\"\n                   name=\"childType\"\n                   id=\"childType\">\n          <md-option v-for=\"(obj,index) in typeAvailable\"\n                     :key=\"index\"\n                     :value=\"obj.type\">{{obj.name}}</md-option>\n        </md-select>\n      </md-field>\n\n      <md-field>\n        <label>Name</label>\n        <md-input v-model=\"inputValue\"></md-input>\n      </md-field>\n\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 :disabled=\"disableBtn()\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\n\nconst constants = ContextGeographicService.constants;\n\nexport default {\n  name: \"addChildDialog\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      contextId: null,\n      nodeSelectedId: null,\n      nodeSelectedType: null,\n      typeAvailable: [],\n      typeSelected: null,\n      inputValue: \"\"\n    };\n  },\n  methods: {\n    opened(option) {\n      this.nodeSelectedId = option.selectedNode.id.get();\n      this.nodeSelectedType = option.selectedNode.type.get();\n      this.contextId = option.context.id.get();\n\n      this.typeAvailable = this.getTypesAvailable();\n    },\n\n    getTypesAvailable() {\n      let typesIndex = constants.GEOGRAPHIC_TYPES_ORDER.indexOf(\n        this.nodeSelectedType\n      );\n\n      let data = [...constants.GEOGRAPHIC_TYPES_ORDER];\n\n      if (typesIndex !== -1) {\n        data = data.slice(typesIndex + 1, data.length - 1);\n      }\n\n      return data.map(el => {\n        return {\n          type: el,\n          name: this.formatData(el)\n        };\n      });\n    },\n\n    removed(option) {\n      if (option.closeResult) {\n        switch (this.typeSelected) {\n          case constants.SITE_TYPE:\n            ContextGeographicService.addSite(\n              this.contextId,\n              this.nodeSelectedId,\n              this.inputValue.trim()\n            );\n            break;\n          case constants.BUILDING_TYPE:\n            ContextGeographicService.addBuilding(\n              this.contextId,\n              this.nodeSelectedId,\n              this.inputValue.trim()\n            );\n            break;\n          case constants.FLOOR_TYPE:\n            ContextGeographicService.addFloor(\n              this.contextId,\n              this.nodeSelectedId,\n              this.inputValue.trim()\n            );\n            break;\n          case constants.ZONE_TYPE:\n            ContextGeographicService.addZone(\n              this.contextId,\n              this.nodeSelectedId,\n              this.inputValue.trim()\n            );\n            break;\n          case constants.ROOM_TYPE:\n            ContextGeographicService.addRoom(\n              this.contextId,\n              this.nodeSelectedId,\n              this.inputValue.trim()\n            );\n            break;\n        }\n      }\n\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n    disableBtn() {\n      return this.inputValue.trim().length === 0 || !this.typeSelected;\n    },\n\n    formatData(data) {\n      return data.replace(\"geographic\", \"\");\n    }\n  }\n};\n</script>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-snackbar md-position=\"left\"\n               :md-duration=\"time\"\n               :md-active.sync=\"showDialog\"\n               md-persistent>\n    <span>{{ msg }}</span>\n  </md-snackbar>\n</template>\n\n<script>\nexport default {\n  name: \"NotificationComponent\",\n  props: [\"onFinised\"],\n  data () {\n    return {\n      showDialog: false,\n      msg: \"\",\n      time: 4000\n    };\n  },\n  methods: {\n    opened(option) {\n      this.showDialog = true;\n      this.msg = option.msg;\n      this.time = option.time;\n    },\n    removed(option) {\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n    }\n  }\n\n};\n</script>\n\n\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalContextMenuService = require(\"./SpinalContextMenuService\");\nconst SpinalContextApp = require(\"./SpinalContextApp\");\nconst Constant = require('./constants');\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalContextMenuService === \"undefined\")\n  G_root.spinal.spinalContextMenuService = new SpinalContextMenuService();\n\nmodule.exports = {\n  constants: Constant,\n  spinalContextMenuService: G_root.spinal.spinalContextMenuService,\n  SpinalContextApp,\n  install(Vue) {\n    Vue.prototype.$spinalContextMenuService =\n      G_root.spinal.spinalContextMenuService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport * as Q from 'q';\nvar debounce = require('lodash.debounce');\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} apps key = hookname, value array of apps\n * @class SpinalContextMenuService\n */\nclass SpinalContextMenuService {\n  /**\n   *Creates an instance of SpinalContextMenuService.\n   * @memberof SpinalContextMenuService\n   */\n  constructor() {\n    this.apps = {};\n    this.promiseByAppProfileId = {};\n    this.appRdy = Q.defer();\n    this.debouncedRdy = debounce(\n      () => {\n        this.appRdy.resolve();\n        this.debouncedRdy = () => {};\n      },\n      1000,\n      { leading: false, trailing: true }\n    );\n  }\n\n  // waitRdy() {\n  //   this.appRdy.promise;\n  // }\n\n  /**\n   * Return true if user has access to this appProfile\n   * @param appProfileId\n   * @return {PromiseLike<boolean > | Promise<boolean>}\n   */\n  async hasUserRight(appProfileId) {\n    this.debouncedRdy();\n    await window.spinal.spinalSystem.init();\n    const path =\n      '/etc/UserProfileDir/' + window.spinal.spinalSystem.getUser().username;\n    const userProfile = await window.spinal.spinalSystem.load(path);\n    let res = false;\n    if (userProfile) {\n      for (let i = 0; i < userProfile.appProfiles.length && !res; i++) {\n        res = ((1 << userProfile.appProfiles[i]) & appProfileId) !== 0;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * method to register the Application to a hook\n   *\n   * @param {string} hookname the place where is application button is located\n   * @param {SpinalContextApp} spinalContextApp the application\n   * @param {number} appProfileId id of the group that can use the application\n   * button\n   * @memberof SpinalContextMenuService\n   */\n  registerApp(hookname, spinalContextApp, appProfileId) {\n    this.debouncedRdy();\n    if (typeof appProfileId === 'undefined') {\n      console.warn(\n        'Deprecated: The usage of this function without the third' +\n          ' parameter appProfileId is deprecated your button is lock for admin' +\n          ' only until you set the third parameter'\n      );\n      appProfileId = 1;\n    }\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      appsInHooks = this.apps[hookname] = [];\n    }\n\n    if (!this.promiseByAppProfileId.hasOwnProperty(appProfileId)) {\n      this.promiseByAppProfileId[appProfileId] =\n        this.hasUserRight(appProfileId);\n    }\n\n    this.promiseByAppProfileId[appProfileId].then((hasAccess) => {\n      // push the app if not exist ans user has access to the button\n      if (hasAccess && appsInHooks.indexOf(spinalContextApp) === -1) {\n        appsInHooks.push(spinalContextApp);\n      }\n    });\n  }\n\n  /**\n   * method to get the applications registered to a hookname\n   *\n   * @param {String} hookname\n   * @param {object} option\n   * @memberof SpinalContextMenuService\n   * @returns {Promise} resolve : [spinalContextApp, ...]; reject: Error\n   */\n  async getApps(hookname, option) {\n    await this.appRdy.promise;\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      return Promise.resolve([]);\n    }\n    let promises = appsInHooks.map(async function (e, idx) {\n      try {\n        const res = await e.isShown(option);\n        return res === -1 ? -1 : e;\n      } catch (error) {\n        console.error(error);\n        return -1;\n      }\n    });\n    try {\n      const appRes = await Promise.all(promises);\n      return appRes.filter((itm) => itm !== -1);\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = SpinalContextMenuService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Interface like class to define a Contextual Application button\n * @see https://material.io/tools/icons/?style=baseline for material icons\n *\n * @class SpinalContextApp\n * @property {string} label=notset short name to be shown in the application\n * @property {string} description description of what the Application button do\n * @property {object} buttonCfg Object configuration of the Application button\n * @property {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n * @property {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n * @property {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n * @property {string} buttonCfg.fontColor=#FFFFFF font color of the button\n * @property {objet} [badgeCfg] Object configuration of the Application button badge\n * @property {string} badgeCfg.label string shown in a badge; if empty it's not shown\n * @property {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n * @property {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n */\nclass SpinalContextApp {\n  /**\n   * Creates an instance of SpinalContextApp.\n   * @param {string} label=notset short name to be shown in the application\n   * @param {string} description description of what the Application button do\n   * @param {object} buttonCfg Object configuration of the Application button\n   * @param {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n   * @param {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n   * @param {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n   * @param {string} buttonCfg.fontColor=#FFFFFF font color of the button\n   * @param {objet} [badgeCfg] Object configuration of the Application button badge\n   * @param {string} badgeCfg.label string shown in a badge; if empty it's not shown\n   * @param {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n   * @param {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n   * @memberof SpinalContextApp\n   */\n  constructor(label, description, buttonCfg, badgeCfg = {}) {\n    this.label = label || \"notset\";\n    this.description = description || \"\";\n    this.buttonCfg = {\n      icon: buttonCfg.icon || \"tab\",\n      icon_type: buttonCfg.icon_type || \"in\",\n      backgroundColor: colorHash(buttonCfg.backgroundColor || \"#0000FF\"),\n      fontColor: colorHash(buttonCfg.fontColor || \"#FFFFFF\")\n    };\n\n    this.badgeCfg = {\n      label: badgeCfg.label || \"\",\n      backgroundColor: colorHash(badgeCfg.backgroundColor || \"#FF0000\"),\n      fontColor: colorHash(badgeCfg.fontColor || \"#FFFFFF\")\n    };\n  }\n\n  /**\n   * Method called by `SpinalContextMenuService.getApps`\n   * to filter the Application button to show in the context hook\n   *\n   * @param {object} option\n   * @memberof SpinalContextApp\n   * @returns {Promise} Resolve: not shown if === -1;\n   */\n  isShown(option) {}\n\n  /**\n   * Method to call on click of the application button\n   *\n   * @param {object} option {}\n   * @memberof SpinalContextApp\n   */\n  action(option) {}\n}\n\nmodule.exports = SpinalContextApp;\n\nfunction colorHash(color) {\n  if (color[0] === \"#\") return color;\n  return \"#\" + color;\n}\n","\n\nmodule.exports = {\n  ADMINISTRATEUR: 'ADMINISTRATEUR',\n  MAINTENEUR: 'MAINTENEUR',\n  INTEGRATEUR: 'INTEGRATEUR',\n  ASSET_MANAGEUR: 'ASSET MANAGER',\n};","const {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\nconst {\n  spinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nclass CreateContextBtn extends SpinalContextApp {\n  constructor() {\n    super(\"Create Geographic Context\",\n      \"This button create a geographic context\", {\n        icon: \"location_city\",\n        icon_type: \"in\",\n        backgroundColor: \"#FF0000\",\n        fontColor: \"#FFFFFF\"\n      });\n  }\n\n  isShown() {\n    return Promise.resolve(true);\n  }\n\n  action() {\n\n    // option.paramSent = \"Create context\";\n\n    let dialogParams = {\n      inputValue: \"\",\n      title: \"Create context\",\n      label: \"Enter context name\"\n    };\n\n    spinalPanelManagerService.openPanel('createContextDialog', dialogParams);\n  }\n}\n\nmodule.exports = CreateContextBtn;","import {\n  SpinalContextApp\n} from \"spinal-env-viewer-context-menu-service\";\nimport {\n  spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\n\nimport ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\n\nconst constants = ContextGeographicService.constants;\n\n\n\nclass AddAbstactElement extends SpinalContextApp {\n  constructor() {\n    super(\n      \"add Child\",\n      \"This button adds an abstract element (building, zone, floor or room)\", {\n        icon: \"add_location\",\n        icon_type: \"in\",\n        backgroundColor: \"#FF0000\",\n        fontColor: \"#FFFFFF\"\n      }\n    );\n  }\n\n  isShown(option) {\n\n    let typeSelected = option.selectedNode.type.get();\n\n    if (constants.GEOGRAPHIC_TYPES_ORDER.indexOf(typeSelected) !== -1) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(-1);\n  }\n\n  action(option) {\n    spinalPanelManagerService.openPanel(\"addChildDialog\", option);\n  }\n\n}\n\nexport default AddAbstactElement;","import ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\n// import {\n//   SpinalGraphService\n// } from \"spinal-env-viewer-graph-service\";\n\n// import bimobjService from 'spinal-env-viewer-plugin-bimobjectservice';\n// const bimobjService = window.spinal.BimObjectService;\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\n\n// import {\n//   toasted\n// } from \"../toats\";\n\nconst constants = ContextGeographicService.constants;\n\n\nclass AddReferenceBtn extends SpinalContextApp {\n  constructor() {\n    super(\"Add reference\", \"add reference to a geaographic element\", {\n      icon: \"add_circle_outline\",\n      icon_type: \"in\",\n      backgroundColor: \"#FF0000\",\n      fontColor: \"#FFFFFF\"\n    });\n  }\n\n  isShown(option) {\n\n    if (option.context.type.get() === constants.CONTEXT_TYPE &&\n     option.context.id.get() !== option.selectedNode.id.get() &&\n     option.selectedNode.type.get() !== constants.EQUIPMENT_TYPE) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(-1);\n\n\n  }\n\n  action(option) {\n    let elementSelected = window.spinal.ForgeViewer.viewer\n      .getAggregateSelection();\n\n    if (elementSelected.length == 0) {\n      // toasted.error(\"no item selected\");\n      return;\n    }\n\n    for (let idx = 0; idx < elementSelected.length; idx++) {\n      const {\n        model,\n        selection\n      } = elementSelected[idx];\n\n      model.getBulkProperties(\n        selection, {\n          propFilter: [\"name\"]\n        },\n        el => {\n          el.forEach(element => {\n            window.spinal.BimObjectService.addReferenceObject(\n              option.selectedNode.id.get(), element.dbId, element.name, model);\n          });\n        }\n      );\n    }\n\n    // elementSelected.forEach(element => {\n\n    // let node = SpinalGraphService.getRealNode(option.selectedNode.id\n    //   .get());\n\n    // bimobjService.addReferenceObject(node, element, \"bimObject_\" +\n    //   element).then(el => {\n    //   if (el) {\n    //     // toasted.success(\"Reference added with success !\");\n    //     return;\n    //   }\n    //   // toasted.error(\"Reference is not added !\");\n    // })\n\n\n\n\n    // });\n\n\n\n  }\n\n}\n\nmodule.exports = AddReferenceBtn;\n","import {SpinalContextApp} from \"spinal-env-viewer-context-menu-service\";\n\nimport geographicService from \"spinal-env-viewer-context-geographic-service\";\n\nclass AddToReference extends SpinalContextApp {\n  constructor() {\n    super(\"Add to reference\", \"Add to reference\", {\n      icon: \"control_point_duplicate\",\n      icon_type: \"in\",\n      backgroundColor: \"#FF00000\",\n      fontColor: \"#FFFFFF\"\n    });\n  }\n\n  isShown(option) {\n    if (option.context.type.get() === option.selectedNode.type.get() &&\n      option.selectedNode.type.get() === geographicService.constants\n        .CONTEXT_TYPE\n    ) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(-1);\n  }\n\n  action(option) {\n    geographicService.addContextToReference(option.context.id.get());\n  }\n\n}\n\nexport default AddToReference;\n","import {\n  SpinalContextApp\n} from \"spinal-env-viewer-context-menu-service\";\nimport ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\n\nconst constants = ContextGeographicService.constants;\n\n\nclass AddBimObjects extends SpinalContextApp {\n  constructor() {\n    super(\n      \"add BimObject\",\n      \"This button adds all elements selected\", {\n        icon: \"post_add\",\n        icon_type: \"in\",\n        backgroundColor: \"#FF0000\",\n        fontColor: \"#FFFFFF\"\n      }\n    );\n  }\n\n  isShown(option) {\n    let contextType = option.context.type.get();\n    let typeSelected = option.selectedNode.type.get();\n\n    if (contextType === constants.CONTEXT_TYPE && typeSelected !== constants\n      .EQUIPMENT_TYPE) {\n      return Promise.resolve(true)\n    }\n\n    // let index = constants.GEOGRAPHIC_TYPES_ORDER.indexOf(typeSelected);\n\n    return Promise.resolve(-1);\n\n  }\n\n  action(option) {\n    const viewer = window.spinal.ForgeViewer.viewer;\n    var bimSelected = viewer.getAggregateSelection();\n\n    if (bimSelected.length === 0) {\n      alert(\"select an object\");\n      return;\n    }\n\n\n    for (let idx = 0; idx < bimSelected.length; idx++) {\n      const {\n        model,\n        selection\n      } = bimSelected[idx];\n\n\n      model.getBulkProperties(selection, {\n        propFilter: ['name']\n      }, (el) => {\n\n        el.forEach(element => {\n          ContextGeographicService.addBimElement(\n            option.context,\n            option.selectedNode,\n            element,\n            model\n          );\n        });\n      });\n    }\n\n  }\n\n}\n\n\nexport default AddBimObjects;","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalContextApp } from 'spinal-env-viewer-context-menu-service';\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport {\n  CONTEXT_TYPE,\n  EQUIPMENT_TYPE,\n  SITE_RELATION,\n  BUILDING_RELATION,\n  ZONE_RELATION,\n  FLOOR_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n  REFERENCE_RELATION\n} from 'spinal-env-viewer-context-geographic-service/build/constants';\n\nconst LABEL = 'Update Ids Model';\nconst DESCRIPTION = \"update model dbids by the externalID\";\nconst NODE_TYPE = 'BimFile';\n\nasync function updateBimObjectId(bimObjects) {\n  const mapModelExternId = new Map();\n  const updated = [];\n  const notFound = [];\n\n  function getExternalIdMapping(model) {\n    if (mapModelExternId.has(model)) return mapModelExternId.get(model);\n    const prom = new Promise((resolve) => {\n      model.getExternalIdMapping((map) => {\n        resolve(map);\n      });\n    });\n    mapModelExternId.set(model, prom);\n    return prom;\n  }\n\n  console.log(\"updateBimObjectId - number of items :\", bimObjects.length);\n  for (const bimObj of bimObjects) {\n    const bimFileId = bimObj.info.bimFileId.get();\n    const model = window.spinal.BimObjectService.getModelByBimfile(bimFileId);\n    // eslint-disable-next-line no-await-in-loop\n    const externalIdMapping = await getExternalIdMapping(model);\n    const externalId = bimObj.info.externalId.get();\n    if (!externalIdMapping[externalId]) {\n      notFound.push(bimObj.info.get());\n      bimObj.info.dbid.set(-1);\n    } else if (bimObj.info.dbid.get() !== externalIdMapping[externalId]) {\n      updated.push(externalIdMapping[externalId]);\n      bimObj.info.dbid.set(externalIdMapping[externalId]);\n    }\n  }\n  console.log(\"End\");\n  let msg = \"Update done\";\n  if (updated.length > 0) {\n    console.log('UPDATED', updated);\n    msg = `${msg}, objects updated : ${updated.length}`;\n  }\n  if (notFound.length > 0) {\n    console.log('notFound', notFound);\n    msg = `${msg}, objects not updated : ${notFound.length}`;\n  }\n  spinalPanelManagerService.openPanel(\"notificationDialog\",\n    { msg: msg, time: 3000 });\n}\n\nexport class UpdateBimObjectIdBtn extends SpinalContextApp {\n  constructor() {\n    super(LABEL, DESCRIPTION, {\n      icon: 'update',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    });\n  }\n  isShown(option) {\n    if (option.selectedNode.type.get() === NODE_TYPE) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(-1);\n  }\n\n  async action(option) {\n    const nodeId = option.selectedNode.id.get();\n    const rNode = SpinalGraphService.getRealNode(nodeId);\n    const bimObjects = [];\n    const bimContexts = await rNode.getChildren(\"hasBimContext\");\n    for (const bimContext of bimContexts) {\n      // eslint-disable-next-line no-await-in-loop\n      const bimObj = await bimContext.getChildren(\"hasBimObject\");\n      bimObjects.push(...bimObj);\n    }\n    return updateBimObjectId(bimObjects);\n  }\n}\n\n\n\nexport class SpatialContextUpdateBimObjectIdBtn extends SpinalContextApp {\n  constructor() {\n    super(LABEL, DESCRIPTION, {\n      icon: 'update',\n      icon_type: 'in',\n      backgroundColor: '#000000',\n      fontColor: '#ffffff'\n    });\n  }\n  isShown(option) {\n    if (option.selectedNode.type.get() === CONTEXT_TYPE) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(-1);\n  }\n\n  async action(option) {\n    const nodeId = option.selectedNode.id.get();\n    const rNode = SpinalGraphService.getRealNode(nodeId);\n    const bimObjects = new Set();\n\n    const geoRelations = [\n      SITE_RELATION,\n      BUILDING_RELATION,\n      ZONE_RELATION,\n      FLOOR_RELATION,\n      ROOM_RELATION,\n      EQUIPMENT_RELATION,\n      REFERENCE_RELATION,\n      \"hasReferenceObject.ROOM\"\n    ];\n\n    await rNode.find(geoRelations, (node) => {\n      if (typeof node.info.externalId !== \"undefined\" &&\n        typeof node.info.dbid !== \"undefined\") {\n        bimObjects.add(node);\n      }\n      return false;\n    });\n    return updateBimObjectId(bimObjects);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.REFERENCE_ROOM_RELATION = exports.ROOM_REFERENCE_CONTEXT = exports.ZONE_REFERENCE_CONTEXT = exports.FLOOR_REFERENCE_CONTEXT = exports.BUILDING_REFERENCE_CONTEXT = exports.SITE_REFERENCE_CONTEXT = exports.REFERENCE_RELATION = exports.REFERENCE_TYPE = exports.MAP_RELATION_TYPE = exports.MAP_TYPE_RELATION = exports.GEOGRAPHIC_RELATIONS_ORDER = exports.EQUIPMENT_RELATION = exports.GEOGRAPHIC_RELATIONS = exports.ROOM_RELATION = exports.ZONE_RELATION = exports.FLOOR_RELATION = exports.BUILDING_RELATION = exports.SITE_RELATION = exports.GEOGRAPHIC_TYPES_ORDER = exports.EQUIPMENT_TYPE = exports.GEOGRAPHIC_TYPES = exports.ROOM_TYPE = exports.ZONE_TYPE = exports.FLOOR_TYPE = exports.BUILDING_TYPE = exports.SITE_TYPE = exports.CONTEXT_TYPE = void 0;\nconst CONTEXT_TYPE = 'geographicContext';\nexports.CONTEXT_TYPE = CONTEXT_TYPE;\nconst SITE_TYPE = 'geographicSite';\nexports.SITE_TYPE = SITE_TYPE;\nconst BUILDING_TYPE = 'geographicBuilding';\nexports.BUILDING_TYPE = BUILDING_TYPE;\nconst FLOOR_TYPE = 'geographicFloor';\nexports.FLOOR_TYPE = FLOOR_TYPE;\nconst ZONE_TYPE = 'geographicZone';\nexports.ZONE_TYPE = ZONE_TYPE;\nconst ROOM_TYPE = 'geographicRoom';\nexports.ROOM_TYPE = ROOM_TYPE;\nconst EQUIPMENT_TYPE = 'BIMObject';\nexports.EQUIPMENT_TYPE = EQUIPMENT_TYPE;\nconst REFERENCE_TYPE = 'geographicReference';\nexports.REFERENCE_TYPE = REFERENCE_TYPE;\nconst SITE_RELATION = 'hasGeographicSite';\nexports.SITE_RELATION = SITE_RELATION;\nconst BUILDING_RELATION = 'hasGeographicBuilding';\nexports.BUILDING_RELATION = BUILDING_RELATION;\nconst FLOOR_RELATION = 'hasGeographicFloor';\nexports.FLOOR_RELATION = FLOOR_RELATION;\nconst ZONE_RELATION = 'hasGeographicZone';\nexports.ZONE_RELATION = ZONE_RELATION;\nconst ROOM_RELATION = 'hasGeographicRoom';\nexports.ROOM_RELATION = ROOM_RELATION;\nconst EQUIPMENT_RELATION = 'hasBimObject';\nexports.EQUIPMENT_RELATION = EQUIPMENT_RELATION;\nconst REFERENCE_RELATION = 'hasReferenceObject';\nexports.REFERENCE_RELATION = REFERENCE_RELATION;\nconst REFERENCE_ROOM_RELATION = 'hasReferenceObject.ROOM';\nexports.REFERENCE_ROOM_RELATION = REFERENCE_ROOM_RELATION;\nconst SITE_REFERENCE_CONTEXT = '.SiteContext';\nexports.SITE_REFERENCE_CONTEXT = SITE_REFERENCE_CONTEXT;\nconst BUILDING_REFERENCE_CONTEXT = '.BuildingContext';\nexports.BUILDING_REFERENCE_CONTEXT = BUILDING_REFERENCE_CONTEXT;\nconst FLOOR_REFERENCE_CONTEXT = '.FloorContext';\nexports.FLOOR_REFERENCE_CONTEXT = FLOOR_REFERENCE_CONTEXT;\nconst ZONE_REFERENCE_CONTEXT = '.ZoneContext';\nexports.ZONE_REFERENCE_CONTEXT = ZONE_REFERENCE_CONTEXT;\nconst ROOM_REFERENCE_CONTEXT = '.RoomContext';\nexports.ROOM_REFERENCE_CONTEXT = ROOM_REFERENCE_CONTEXT;\nconst GEOGRAPHIC_TYPES = Object.freeze([\n    SITE_TYPE,\n    BUILDING_TYPE,\n    FLOOR_TYPE,\n    ZONE_TYPE,\n    ROOM_TYPE,\n]);\nexports.GEOGRAPHIC_TYPES = GEOGRAPHIC_TYPES;\nconst GEOGRAPHIC_TYPES_ORDER = Object.freeze([\n    CONTEXT_TYPE,\n    SITE_TYPE,\n    BUILDING_TYPE,\n    FLOOR_TYPE,\n    ZONE_TYPE,\n    ROOM_TYPE,\n    EQUIPMENT_TYPE,\n]);\nexports.GEOGRAPHIC_TYPES_ORDER = GEOGRAPHIC_TYPES_ORDER;\nconst GEOGRAPHIC_RELATIONS = Object.freeze([\n    SITE_RELATION,\n    BUILDING_RELATION,\n    FLOOR_RELATION,\n    ZONE_RELATION,\n    ROOM_RELATION,\n    EQUIPMENT_RELATION,\n]);\nexports.GEOGRAPHIC_RELATIONS = GEOGRAPHIC_RELATIONS;\nconst GEOGRAPHIC_RELATIONS_ORDER = Object.freeze([\n    SITE_RELATION,\n    BUILDING_RELATION,\n    FLOOR_RELATION,\n    ZONE_RELATION,\n    ROOM_RELATION,\n    EQUIPMENT_RELATION,\n]);\nexports.GEOGRAPHIC_RELATIONS_ORDER = GEOGRAPHIC_RELATIONS_ORDER;\nconst MAP_TYPE_RELATION = Object.freeze(new Map([\n    [SITE_TYPE, SITE_RELATION],\n    [BUILDING_TYPE, BUILDING_RELATION],\n    [FLOOR_TYPE, FLOOR_RELATION],\n    [ZONE_TYPE, ZONE_RELATION],\n    [ROOM_TYPE, ROOM_RELATION],\n    [EQUIPMENT_TYPE, EQUIPMENT_RELATION],\n]));\nexports.MAP_TYPE_RELATION = MAP_TYPE_RELATION;\nconst MAP_RELATION_TYPE = Object.freeze(new Map([\n    [SITE_RELATION, SITE_TYPE],\n    [BUILDING_RELATION, BUILDING_TYPE],\n    [FLOOR_RELATION, FLOOR_TYPE],\n    [ZONE_RELATION, ZONE_TYPE],\n    [ROOM_RELATION, ROOM_TYPE],\n    [EQUIPMENT_RELATION, EQUIPMENT_TYPE],\n]));\nexports.MAP_RELATION_TYPE = MAP_RELATION_TYPE;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst CONTEXT_TYPE = 'geographicContext';\nconst SITE_TYPE = 'geographicSite';\nconst BUILDING_TYPE = 'geographicBuilding';\nconst FLOOR_TYPE = 'geographicFloor';\nconst ZONE_TYPE = 'geographicZone';\nconst ROOM_TYPE = 'geographicRoom';\nconst EQUIPMENT_TYPE = 'BIMObject';\nconst REFERENCE_TYPE = 'geographicReference';\n\nconst SITE_RELATION = 'hasGeographicSite';\nconst BUILDING_RELATION = 'hasGeographicBuilding';\nconst FLOOR_RELATION = 'hasGeographicFloor';\nconst ZONE_RELATION = 'hasGeographicZone';\nconst ROOM_RELATION = 'hasGeographicRoom';\nconst EQUIPMENT_RELATION = 'hasBimObject';\nconst REFERENCE_RELATION = 'hasReferenceObject';\nconst REFERENCE_ROOM_RELATION = 'hasReferenceObject.ROOM';\n\nconst SITE_REFERENCE_CONTEXT = '.SiteContext';\nconst BUILDING_REFERENCE_CONTEXT = '.BuildingContext';\nconst FLOOR_REFERENCE_CONTEXT = '.FloorContext';\nconst ZONE_REFERENCE_CONTEXT = '.ZoneContext';\nconst ROOM_REFERENCE_CONTEXT = '.RoomContext';\n\nconst GEOGRAPHIC_TYPES = Object.freeze([\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n]) as string[];\n\nconst GEOGRAPHIC_TYPES_ORDER = Object.freeze([\n  CONTEXT_TYPE,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n]) as string[];\n\nconst GEOGRAPHIC_RELATIONS = Object.freeze([\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n]) as string[];\n\nconst GEOGRAPHIC_RELATIONS_ORDER = Object.freeze([\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n]) as string[];\n\nconst MAP_TYPE_RELATION = Object.freeze(\n  new Map([\n    [SITE_TYPE, SITE_RELATION],\n    [BUILDING_TYPE, BUILDING_RELATION],\n    [FLOOR_TYPE, FLOOR_RELATION],\n    [ZONE_TYPE, ZONE_RELATION],\n    [ROOM_TYPE, ROOM_RELATION],\n    [EQUIPMENT_TYPE, EQUIPMENT_RELATION],\n  ])\n) as Map<string, string>;\n\nconst MAP_RELATION_TYPE = Object.freeze(\n  new Map([\n    [SITE_RELATION, SITE_TYPE],\n    [BUILDING_RELATION, BUILDING_TYPE],\n    [FLOOR_RELATION, FLOOR_TYPE],\n    [ZONE_RELATION, ZONE_TYPE],\n    [ROOM_RELATION, ROOM_TYPE],\n    [EQUIPMENT_RELATION, EQUIPMENT_TYPE],\n  ])\n) as Map<string, string>;\n\nexport {\n  CONTEXT_TYPE,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  GEOGRAPHIC_TYPES,\n  EQUIPMENT_TYPE,\n  GEOGRAPHIC_TYPES_ORDER,\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  GEOGRAPHIC_RELATIONS,\n  EQUIPMENT_RELATION,\n  GEOGRAPHIC_RELATIONS_ORDER,\n  MAP_TYPE_RELATION,\n  MAP_RELATION_TYPE,\n  REFERENCE_TYPE,\n  REFERENCE_RELATION,\n  SITE_REFERENCE_CONTEXT,\n  BUILDING_REFERENCE_CONTEXT,\n  FLOOR_REFERENCE_CONTEXT,\n  ZONE_REFERENCE_CONTEXT,\n  ROOM_REFERENCE_CONTEXT,\n  REFERENCE_ROOM_RELATION\n};\n"],"names":[],"version":3,"file":"spinal-env-viewer-context-geographic.84816a5a.js.map"}