{"mappings":";;A;;;;;A;;;;A;;;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-version/src/vue/DbIdsSelector.vue","node_modules/spinal-env-viewer-plugin-version/src/vue/CompareVersion.vue"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","<template>\n    <div class=\"compare-bim-panel\">\n        <v-container grid-list-md text-xs-center>\n\n            <v-layout wrap align-center>\n                <v-flex xs12 sm6 d-flex>\n\n                    <v-select\n                            :items=\"items\"\n                            :dark=\"true\"\n                            label=\"Model\"\n                            @input=\"onBIMFileSelected\"\n                            :attach=\"true\"\n                    ></v-select>\n\n                </v-flex>\n\n\n                <v-flex d-flex xs12 v-if=\"displayVersion\">\n\n                    <v-flex d-flex xs4>\n                        <v-select\n                                :items=\"versionNum\"\n                                :dark=\"true\"\n                                label=\"Nouvelle version\"\n                                @input=\"onPrimaryVersionSelected\"\n                                :attach=\"true\"\n                        ></v-select>\n                    </v-flex>\n                    <v-flex d-flex xs4>\n                        <v-icon class=\"compare-icon\" large>\n                            compare_arrows\n                        </v-icon>\n                    </v-flex>\n                    <v-flex d-flex xs4>\n                        <v-select\n                                :items=\"versionNum\"\n                                :dark=\"true\"\n                                label=\"Anciene version\"\n                                @input=\"onSecondaryVersionSelected\"\n                                :attach=\"true\"\n                        ></v-select>\n                    </v-flex>\n\n                </v-flex>\n\n                <v-flex v-if=\"primaryVersion !== 0 && secondaryVersion !== 0\n                  && !comparisonDone \">\n                    <v-btn color=\"blue\" @click=\"compareVersion\"> Comparer\n                    </v-btn>\n                </v-flex>\n                <v-flex d-flex xs12 v-if=\"comparisonDone\">\n                    <v-flex d-flex>\n                        Nombre object de la premiere version :\n                        {{primaryExternalIds.length}}\n                    </v-flex>\n                    <v-flex d-flex>\n                        <div class=\"empty-space\">\n                            test version comment\n                        </div>\n                    </v-flex>\n                    <v-flex d-flex>\n                        Nombre object de la seconde version :\n                        {{secondaryExternalIds.length}}\n                    </v-flex>\n\n                </v-flex>\n                <v-flex xs12 class=\"comparison-summary\" v-if=\"comparisonDone\">\n                    Resumé de comparaison\n                    <div>\n\n                        <db-ids-selector :ids=\"removedExternalId\"\n                                         title=\"Nombre object supprimé\"\n                                         :model=\"secondModel\"\n                                         typeIds=\"removed\"\n                                         @select=\"select\"\n                                         @isolate=\"isolate\"\n                        />\n<!--\n                        <db-ids-selector :ids=\"sameExternalIds\"\n                                         title=\"Nombre object conservé \"\n                                         :model=\"firstModel\"\n                                         typeIds=\"same\"\n                                         @select=\"select\"\n                                         @isolate=\"isolate\"\n                        />\n-->\n                        <db-ids-selector :ids=\"newExternalIds\"\n                                         title=\"Nombre de nouveaux object\"\n                                         :model=\"firstModel\"\n                                         typeIds=\"new\"\n                                         @select=\"select\"\n                                         @isolate=\"isolate\"\n                        />\n                    </div>\n                </v-flex>\n            </v-layout>\n\n        </v-container>\n    </div>\n</template>\n<script>\n  import { loadModelPtr } from \"../utils\";\n  import DbIdsSelector from \"./DbIdsSelector.vue\";\n\n  export default {\n    name: \"CompareVersion\",\n    components: { DbIdsSelector },\n    data: function () {\n      return {\n        viewer: null,\n        dialog: false,\n        items: [],\n        bimFiles: [],\n        selectedModel: \"\",\n        displayVersion: false,\n        versionList: [],\n        nbVersion: 0,\n        versionNum: [],\n        versionExcludeNum: [],\n        primaryVersion: 0,\n        secondaryVersion: 0,\n        comparisonDone: false,\n        primaryDbids: [],\n        secondaryDbids: [],\n        primaryExternalIds: [],\n        secondaryExternalIds: [],\n        firstModel: null,\n        secondModel: null,\n        removedExternalId: [],\n        sameExternalIds: [],\n        newExternalIds: [],\n        removedId: [],\n        sameId: [],\n        newId: [],\n        externalIdMapping: {}\n      }\n    },\n    computed: {\n      availableVersionNum: function () {\n        this.versionNum.filter()\n      }\n    },\n    methods: {\n\n      init: function ( option ) {\n        this.dialog = true;\n        this.items = [];\n        this.bimFiles = option.bimFiles;\n        this.selectedModel = \"\";\n        this.displayVersion = false;\n        this.versionList = [];\n        this.nbVersion = 0;\n        this.versionNum = [];\n        this.comparisonDone = false;\n        this.primaryDbids = [];\n        this.secondaryDbids = [];\n        this.primaryExternalIds = [];\n        this.secondaryExternalIds = [];\n        this.firstModel = null;\n        this.externalIdMapping = {}\n      },\n      opened: function ( option ) {\n        this.init( option );\n\n        for (let i = 0; i < this.bimFiles.length; i++) {\n          this.items.push( { text: this.bimFiles[i].name.get(), value: i } );\n        }\n\n        this.viewer = window.spinal.ForgeViewer.viewer;\n      },\n      onBIMFileSelected: function ( e ) {\n        this.selectedModel = e;\n      },\n      getVersionList: function ( bimFile ) {\n        loadModelPtr( bimFile.element.ptr ).then( elt => {\n          this.versionList = elt.versionLst;\n          this.nbVersion = elt.versionLst.length;\n          for (let i = 0; i < elt.versionLst.length; i++) {\n            this.versionNum.push( i + 1 );\n          }\n        } )\n      },\n      onPrimaryVersionSelected: function ( e ) {\n        this.primaryVersion = e;\n      },\n      onSecondaryVersionSelected: function ( e ) {\n        this.secondaryVersion = e;\n      },\n      compareVersion: async function () {\n\n        const primaryPath = this.getSVF(\n          this.versionList[this.primaryVersion - 1],\n          this.primaryVersion\n        );\n\n        const secondaryPath = this.getSVF(\n          this.versionList[this.secondaryVersion - 1],\n          this.secondaryVersion\n        );\n\n        this.firstModel = await this.loadModel( primaryPath );\n        this.secondModel = await this.loadModel( secondaryPath );\n\n\n        this.primaryDbids = await this.getDBIDs( this.firstModel );\n        this.secondaryDbids = await this.getDBIDs( this.secondModel );\n\n        let primaryProms = this.primaryDbids.map( dbId => {\n          return this.getExternalId( dbId, this.firstModel );\n        } );\n        let secondaryProm = this.secondaryDbids.map( dbId => {\n          return this.getExternalId( dbId, this.secondModel );\n        } );\n\n\n        this.primaryExternalIds = await this.promAll( primaryProms );\n        this.secondaryExternalIds = await this.promAll( secondaryProm );\n\n        this.removedExternalId = this.secondaryExternalIds\n          .filter( id => this.primaryExternalIds.indexOf( id ) === -1 );\n        this.sameExternalIds = this.primaryExternalIds.filter( id =>\n          this.secondaryExternalIds.indexOf( id ) !== -1 );\n        this.newExternalIds = this.primaryExternalIds.filter( id =>\n          this.secondaryExternalIds.indexOf( id ) === -1 );\n\n\n        this.mapExternalId()\n          .then( () => {\n            console.log( \"mapping done\" );\n            this.viewer = window.spinal.ForgeViewer.viewer;\n            console.log('mapping ici ', this);\n              /*  this.viewer.hide( this.sameId, this.firstModel );\n               this.viewer.hide( this.sameId, this.secondModel );\n               */\n            this.colorModel( this.newIds, this.firstModel, new THREE.Vector4(\n              0, 255, 0, 0.7 ) );\n            this.colorModel( this.removedId, this.secondModel, new\n            THREE.Vector4( 255, 0, 0, 0.7 ) );\n            window.newId = this.newIds;\n            window.removedId = this.removedId;\n\n\n            this.viewer.impl.invalidate();\n            this.comparisonDone = true;\n          } )\n\n      },\n      colorModel( ids, model, color ) {\n\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n\n          if (id !== 1) {\n            this.viewer.setThemingColor(\n              id,\n              color,\n              model,\n              false\n            );\n          }\n\n        }\n      },\n      mapExternalId:  function () {\n        return new Promise ( async (resolve, reject) => {\n          try {\n            this.removedId = await this.getAllDbIdFromExternalId( this.removedExternalId,\n              this.secondModel );\n            this.newIds = await this.getAllDbIdFromExternalId( this.newExternalIds,\n              this.firstModel );\n            resolve();\n          } catch ( e ) {\n            reject(e);\n          }\n        })\n\n\n      },\n\n      async promAll( proms ) {\n        const res = [];\n        for (let i = 0; i < proms.length; i++) {\n          try {\n\n            res.push( await proms[i] );\n          } catch ( e ) {\n            console.error( e );\n          }\n        }\n\n        return res;\n      },\n\n      getExternalId: function ( dbId, model ) {\n        return new Promise( ( resolve, reject ) => {\n          model.getProperties( dbId, ( props ) => {\n            resolve( props.externalId );\n          }, reject )\n        } )\n      },\n\n      getAllDbIdFromExternalId: function ( externalIds, model ) {\n        const proms = [];\n        for (let i = 0; i < externalIds.length; i++) {\n          proms.push( this.getDbIdFromExternalId( externalIds[i], model ) )\n        }\n\n        return Promise.all( proms )\n      },\n      getDbIdFromExternalId: function ( externalId, model ) {\n        return new Promise( ( resolve, reject ) => {\n          if (typeof this.externalIdMapping[model.id] === \"undefined\") {\n            model.getExternalIdMapping( (function external( res ) {\n              this.externalIdMapping[model.id] = res;\n              resolve( res[externalId] );\n            }).bind( this ), reject );\n          } else\n            resolve( this.externalIdMapping[model.id][externalId] );\n        } )\n      },\n\n      getAllDbIdsRec( model, callback ) {\n        let cbCount = 0; // count pending callbacks\n        const components = []; // store the results\n        let tree; // the instance tree\n\n        function getLeafComponentsRec( parent ) {\n          cbCount++;\n          if (tree.getChildCount( parent ) !== 0) {\n            tree.enumNodeChildren( parent, function ( children ) {\n              getLeafComponentsRec( children );\n            }, false );\n          } else\n            components.push( parent );\n          if (--cbCount === 0) callback( components );\n        }\n\n        model.getObjectTree( function ( objectTree ) {\n          tree = objectTree;\n          var allLeafComponents = getLeafComponentsRec( tree.getRootId() );\n        } );\n      },\n\n      getDBIDs( model ) {\n        return new Promise( resolve => {\n          this.getAllDbIdsRec( model, resolve );\n        } )\n      },\n\n      loadModel( path ) {\n        return new Promise( ( resolve, reject ) => {\n          const eventListener = ( e ) => {\n            this.viewer.removeEventListener( eventListener );\n            resolve( e.model )\n          };\n\n          this.viewer.addEventListener( Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n            eventListener.bind( this ) );\n\n          this.viewer.loadModel( path, {}, () => {}, ( e ) => {\n            this.viewer.removeEventListener( eventListener );\n            reject( e );\n\n          } );\n        } )\n      },\n      getSVF: function ( version ) {\n        const items = version.items;\n\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i];\n          if (item.path.get().indexOf( 'svf' ) !== -1) {\n            //TODO change with env\n            return \"http://\" + window.location.host + item.path.get()\n          }\n        }\n      },\n\n      isolate: function ( event ) {\n        let ids;\n        switch ( event.typeIds ) {\n          case \"new\":\n            ids= this.newIds;\n            break;\n          case \"removed\":\n            ids = this.removedId;\n            break;\n          default:\n            ids = this.sameExternalIds;\n        }\n\n        if (event.model.id === 2){\n          this.hideModel(this.secondModel);\n        }\n        else {\n          this.hideModel(this.firstModel)\n        }\n\n        console.log( \"isolate\", event, this.removedId, this.newIds );\n        this.viewer.isolate( ids, event.model );\n\n      },\n      select: function ( event ) {\n        let ids;\n        switch ( event.typeIds ) {\n          case \"new\":\n            ids= this.newIds;\n            break;\n          case \"removed\":\n            ids = this.removedId;\n            break;\n          default:\n            ids = this.sameExternalIds;\n        }\n        if (event.model.id === 2){\n          this.hideModel(this.secondModel);\n        }\n        else {\n          this.hideModel(this.firstModel)\n        }\n        this.viewer.select( ids, event.model,\n          Autodesk.Viewing.SelectionMode.MIXED);\n      },\n      hideModel(model){\n        this.viewer.hideModel(model.id);\n        if (model.id === 2)\n          this.viewer.showModel(3);\n        else\n          this.viewer.showModel(2);\n      }\n    },\n    watch: {\n      selectedModel: {\n        handler: function ( value ) {\n          this.displayVersion = value !== \"\";\n          if (value !== \"\") {\n            const index = parseInt( value );\n            if (!isNaN( index ))\n              this.getVersionList( this.bimFiles[index] )\n          }\n\n        },\n        immediate: true\n      }\n    }\n  }\n</script>\n<style>\n    .compare-bim-panel {\n        height: calc(100% - 19px);\n        margin: 10px;\n    }\n\n    .compare-bim-panel * {\n        box-sizing: border-box;\n    }\n\n    .comparison-summary {\n        border: 1px solid white;\n        margin: 8px;\n        padding: 8px;\n\n    }\n\n    .empty-space {\n        visibility: hidden;\n    }\n\n    .compare-icon {\n        display: inline-flex;\n    }\n</style>\n\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-version.7bff8cbc.css.map"}