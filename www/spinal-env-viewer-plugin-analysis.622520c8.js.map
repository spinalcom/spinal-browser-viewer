{"mappings":"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;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,iB,Q,iB,Q,8B,Q,yB,Q,iC,Q,iB,Q,gB,Q,gB,Q,e,Q,Y,Q,mB,Q,8B,Q,wB,Q,kC,Q,yB,K;AAEH,MAAA,oCAAA,QAAA;AAOA,MAAA,mDAAA,QAAA;AACA,MAAA,0BAAA,QAAA;AAOA,MAAA,4BAAA,QAAA;AAKA,MAAA,sBAAA,QAAA;AACA,MAAA,YAAA,QAAA;AACA,MAAA,gCAAA,QAAA;AACA,MAAA,wBAAA,QAAA;AAEA,MAAM,oBAAoB,sBAAA,2BAA2B;AAIrD;;;;;;CAMG,GACH,SAAsB,uBACpB,MAAqB;I,O,U,I,E,K,G,K,G;QAErB,MAAM,aAAa,kCAAA,mBAAmB,YAAY,OAAO,GAAG;QAC5D,MAAM,MAAM,CAAA;QACZ,MAAM,sBAAsB,MAAM,iDAAA,iBAAiB,wBACjD,YACA,UAAU;QAEZ,KAAK,MAAM,SAAS,oBAAqB;YACvC,MAAM,MAAM,MAAM;YAClB,GAAG,CAAC,IAAI,MAAM,GAAG,IAAI;QACtB;QACD,OAAO;IACT;AAAC;AAdD,QAAA,yBAAA;AAgBA;;;;;;;CAOG,GACH,SAAsB,gCACpB,MAAqB;I,O,U,I,E,K,G,K,G;QAErB,MAAM,aAAa,kCAAA,mBAAmB,YAAY,OAAO,GAAG;QAC5D,MAAM,MAAM,CAAA;QACZ,MAAM,yBAAyB,MAAM,iDAAA,iBAAiB,wBACpD,YACA,UAAU;QAEZ,KAAK,MAAM,SAAS,uBAAwB;YAC1C,MAAM,MAAM,MAAM;YAClB,GAAG,CAAC,IAAI,MAAM,GAAG,IAAI;QACtB;QACD,OAAO;IACT;AAAC;AAdD,QAAA,kCAAA;AAgBA,SAAsB,sBAAsB,MAAe,EAAC,KAAc;I,O,U,I,E,K,G,K,G;QACxE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mB;QACjD,iBAAiB,SAAS;IAC5B;IACA;QACE,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,uCAAmB;QACjD,iBAAiB,SAAS;IAC5B;CAEH;AAED,IAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,QAC3C,qBAAqB,MAAM,OAAO,CAAC,MAAM;;;;;AChC1C,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAsC;IACpD,OAAO,kBAAkB,QAAQ,oBAAsC;IACvE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAmC;IACjE,QAAQ,oBAAoC,QAAQ;IACpD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A,I,gB;I,M;I,O;Q;K;I,Y;Q,iB,C,G,+B;I;I;Q,I,C,gB;Y,S;Y,U;Q;Q,O;Y,Y;Y,Y;Y,U,E;Y,S;gB,Q,I,C,c;gB,O;gB,Q;Y;Q;I;I,S;Q,Q,M;Y,I,C;Q;Q,M,S,G;Y,I,I,a;gB,M,U,M,C,G,0C,E,c,I,W;gB,K,M,U,I,S;oB,Q,I,Y;oB,M,Y;wB,M,O;wB,e,O;wB,Y,O;wB,a;oB;oB,M,a,M,C,G,0C,E,U,W,Q,G;gB;Y;Y,I,C,a;Q;Q,a,W;Y,I,O,I,C,c,Y;gB,M,W,I,C;gB,I,C,U;oB;oB,Y,I,C;oB;gB;Y;Q;Q;Y,I,I,C,M,oB;gB,M,W,I,C,M,mB;gB,O,S,I,C,I;oB,G,Q;oB,O;gB;Y;Q;Q;Y,M,mB,I,C,W,O,W;Y,M,iB,I,C,S,W;Y,O,oB;Q;Q;Y,W;gB,I,C,K,C,gB,C,I;Y,G;Q;Q,Y,M;Y,I,W,I,C,c,S;gB,I,C,Q,S;gB,I,C,Q,Q;Y;Q;Q;YA0Ef,IAAA,CAAA,QAAA,QAAA;Y,I,C,Q,S,I,C,c;QAEA;QAEA,WAAA,GAAA;YACA,IAAA,CAAA,WAAA;mBAAA,IAAA,CAAA;gBAAA;aAAA;QACA;QAEA,YAAA,KAAA;YACA,IAAA,CAAA,WAAA,IAAA,CAAA,SAAA,OAAA,CAAA,KAAA,GAAA,UAAA;QACA;QAEA;YACA,IAAA,CAAA,WAAA,EAAA;YACA,IAAA,CAAA,WAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;gBACA;oBAAA,MAAA;oBAAA,eAAA;oBAAA,YAAA,CAAA,GAAA,iCAAA,EAAA;oBAAA,aAAA;oBAAA,OAAA;gBAAA;aACA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kB,S,wC;;;;;ACpHA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA6B;IAC3D,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;;A,I,gB;I,M;I,Y;yB,C,G,kC;mB,C,G,4B;I;I,O;Q,O;Y,S,E;Q;I;I;Q,O;Y,a,E;Q;I;I;Q,I,C,c,I,C;I;I,S;Q,W,G;Y,G,C,Q,G,I,C,M;Y,I,C,M,a;Q;Q,Y,K;Y,I,C,M,U;Q;Q;Y,I,C,M;Q;I;I,O;Q;Y,I,C,c,I,C;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAkC;IAChD,OAAO,kBAAkB,QAAQ,oBAAkC;IACnE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA+B;IAC7D,QAAQ,oBAAgC,QAAQ;IAChD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,Y,C;I;Q,O;Y,c,C,G,iC;Y,M;Y,e;Y,Y;Y,M;Q;I;I,S;Q;Y,I,C,O,C,I,C;Q;Q;Y,I,C,M,a;gB,M,I,C;gB,e,I,C;gB,Y,C,G,iC,C,C,I,C,W;Y;Y,I,C,O;Y,I,C,gB;Y,I,C,a;Q;Q;Y,O,I,C,K,O,W;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,O;Y,U;Y,a;Y,Q,I;Q;I,G;Q,G,a;Y,a;Q,G;Y,G,W;gB,I,G;a;S,E;Q,I,G;Q,G,Y;Y,M;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,Y;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,O,I;gC,U,S,G;oC,I,O;gC;gC,Y;4B;wB;qB,E;oB,I,G;oB,G,Y;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,O,I;gC,U,S,G;oC,I,gB;gC;gC,Y;4B;wB;qB,E;oB,I,G;oB,G,Y;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,a;4B,O;gC,O,I;gC,U,S,G;oC,I,a;gC;gC,Y;4B;wB,G,I,G,O,K,I,e,S,I;4B,O,G,a;gC,K;gC,O;oC,S;gC;4B,G;gC,I,G,qB,I,G,Q;6B;wB,I;qB,E;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,a;wB,Y;4B;gC,M;gC,S;4B;yB;wB,a;oB,G;wB,I,G;qB;oB,I,G;oB,G,a;wB,Y;4B;gC,M;gC,S;4B;yB;wB,a;wB,O;4B,Y,I;wB;wB,I;4B,S,I;wB;oB,G;wB,I,G;qB;iB,E;a;S;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,c;Q,a;I,G;Q,G,a;Y,a;Y,I;gB,S,S,M;oB,O,I;gB;Y;Q,G;Y,I,G;S;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,mB;gB,I;oB,a,I;gB;Y;S,E;Q,I,G;Q,I,Y,S,I,G,a;Y,O;gB,S;Y;Y,I;gB,S,S,M;oB,I,O;gB;gB,O,S,M;oB,I,O;gB;Y;Y,O;gB,O,I;gB,U,S,G;oB,I,c;gB;gB,Y;Y;Q,G,I,G,I,a,S,O;Y,O,G,O;gB,K,Q;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,O;wB,a;oB,G;wB,I,G,iB,I,G,Q,Q;qB;iB;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,a;wB,a;wB,I;4B,S,S,M;gC,O,I,W,Q;4B;wB;oB,G;wB,G,W;4B,I,G;yB;qB,E;iB,E;a;Q,I,K,G,O;Y,a;Q,G;Y,I,G;S;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,e;gB,a;gB,O;oB,kB,I,Q;oB,a;gB;gB,I;oB,uB,S,M;wB,O,I,K,I,S,U;oB;oB,yB,S,M;wB,O,I,K,I,S,U;oB;oB,c,I;gB;Y,G;gB,G,W;oB,a;oB,O;wB,M,I,c;wB,Y;wB,W,I,Q;oB;oB,I;wB,iB,S,M;4B,O,I,K,I,S,S;wB;wB,kB,S,M;4B,O,I,K,I,S,S;wB;oB;gB,G;oB,G,c;wB,a;oB,G;wB,G,Y;4B,G,S;gC,I,G;6B;4B,I,G;4B,G,Y;gC,K;gC,O;oC,O,I;oC,U,S,G;wC,I,a;oC;oC,Y;gC;4B;yB,E;qB,E;iB,E;gB,I,G;gB,G,W;oB,a;oB,O;wB,M,I,c;wB,Y;wB,W,I,Q;oB;oB,I;wB,iB,S,M;4B,O,I,K,I,S,U;wB;wB,kB,S,M;4B,O,I,K,I,S,U;wB;oB;gB,G;oB,G,iB;wB,K;wB,O;4B,S,I;wB;wB,I;4B,a,I;4B,U,I;4B,0B,I;wB;oB;iB,E;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,I,Q,W,I,C,c,U,G,a;gB,a;gB,O;oB,Y,C,C,I,W,O,S,C;gB;gB,I;oB,S,I;gB;Y,G;gB,I,G;a,I,I;Y,I,G;Y,I,Q,W,I,C,c,W,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a,I,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AGJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAqC;IACnD,OAAO,kBAAkB,QAAQ,oBAAqC;IACtE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAkC;IAChE,QAAQ,oBAAmC,QAAQ;IACnD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,Q,C,G,iC;Q,I,C;Q,I,C;Q,O;Y,Y;Y,Q;gB,M;gB,e;gB,Y;gB,a;Y;Q;I;I,S;Q,Q,M;Y,Q,I;Y,I,C,Y,O,a,G;Y,Q,I,I,C;Q;Q,M,S,M;Y,I,Q;gB,M,Y;oB,M,I,C,O;oB,e,I,C,O;oB,Y,I,C,K,C,I,C,O,W;oB,a;gB;gB,M,a,M,C,G,0C,E,U,W,I,C;Y;Y,I,C,a;Q;Q,a,W;Y,I,O,I,C,c,Y,I,C,U;Q;Q;Y,O,I,C,O,K,W,K,I,C,O,e;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,Y;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,O;wB,U,S,G;4B,I,K,I,Q,Q;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,Y;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,O;wB,U,S,G;4B,I,K,I,Q,iB;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,Y;gB,G,S;oB,O;wB,O;oB;gB,G;oB,I,G;iB;gB,I,G;gB,G,a;oB,O;wB,Q;wB,M;oB;oB,O;wB,O,I,O;wB,U,S,G;4B,I,K,I,Q,c;wB;wB,Y;oB;gB,G,I,G,O,K,I,Q,S,I;oB,O,G,a;wB,K;wB,O;4B,S;wB;oB,G;wB,I,G,I,G;qB;gB,I;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAuC;IACrD,OAAO,kBAAkB,QAAQ,oBAAuC;IACxE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAoC;IAClE,QAAQ,oBAAqC,QAAQ;IACrD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A;;A;;A;;A;;A;;A;;A;;A;;A,I,gB;I,M;I,O;Q;K;I,Y;Q,iB,C,G,+B;Q,mB,C,G,iC;Q,uB,C,G,qC;Q,yB,C,G,uC;Q,2B,C,G,yC;Q,wB,C,G,sC;Q,mB,C,G,iC;Q,iB,C,G,gC;Q,oB,C,G,0B;I;I;Q,I,C,gB;Y,U;Y,gB;Y,oB;Y,sB;Y,wB;Y,qB;Y,gB;Y,S;Q;Q,O;Y,Y;Y,mB;Y,2B;Y,c;Y,qB;Y,8B;Y,gB;Y,8C;Y,gB;Y,+C;Y,Q,C;Y,mC;Y,U,C;Y,sC;Y,Y,C;Y,4C;Y,gB;gB,G;Y;Y,kC;Y,Y;Y,Y;Y,iB;Y,iB;Y,a;Y,c;Y,e;Y,c;Y,gB;Y,c;Y,Y;Y,S;gB,Q,I,C,c;gB,O;gB,Q;gB,O;gB,Q;gB,O;gB,O;gB,S;gBAgHf,QAAA;YACA;QACA;IACA;IAEA;QACA,IAAA,CA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I;IAwBf,OAAA;QACA;YACA,IAAA,CAAA,oBAAA,IAAA,CAAA;QACA;QACA;YACA,IAAA,CAAA,2BAAA,IAAA,CAAA;QACA;QACA;YACA,IAAA,CAAA,oCAAA,IAAA,CAAA;QACA;QACA;YACA,IAAA,CAAA,sBAAA,IAAA,CAAA;QAEA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,S;Y;Y,kB,S,M;gB,O,I,K,I,S,S;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,Y,C,I;oB;oB,I;wB,U,S,M;4B,O,I,O,gB,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,oB;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,I;wB,U,S,M;4B,O,I,O,uB,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,2B;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,a;gB,I;oB,U,S,M;wB,O,I,O,gC,I;oB;gB;gB,O;oB,O,I;oB,U,S,G;wB,I,oC;oB;oB,Y;gB;Y,G;gB,I,G;gB,G,K;oB,I,G,I,G,I,oC,Q,Q;iB;a;Y,I,G;Y,G,a;gB,I;oB,U,S,M;wB,O,I,O,kB,I;oB;gB;gB,O;oB,O,I;oB,U,S,G;wB,I,sB;oB;oB,Y;gB;Y,G;gB,I,G;gB,G,K;oB,I,G,M,I,G,I,sB,W,c;iB;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAzDA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAiC;IAC/C,OAAO,kBAAkB,QAAQ,oBAAiC;IAClE,OAAO,WAAW;IAG5B,QAAQ,oBAA+B,QAAQ;IAC/C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;;A;;A;A,I,gB;I,O;Q;Q;Q;Q;K;I,Y;Q,kB,C,G,+B;Q,0B,C,G,sC;Q,mB,C,G,gC;I;I;Q,O;Y,qB,I,C;Y,+B;Y,6B;Y,+B;Q;I;I,S;Q,gC,c;Y,Q,I,qB;Y,I,C,M,yB;Y,I,C,gC;Q;Q,8B,a;Y,Q,I,qB;Y,I,C,M,yB;Y,I,C,8B;Q;Q,gC,c;Y,Q,I,qB;Y,I,C,M,yB;Y,I,C,gC;Q;I;I,U;Q;Y,I,C,I,C,Y,O;Y,O,C,I,C,W,S,Y,I,C,e;Q;Q;Y,I,C,I,C,gB,O;Y,M,O,C,G,+C,E,Q,I,C;Y,Q,I;Y,O,C,E,K,K,M,U,E,K,K,M,a,E,K,G,M,C;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA+B;IAC7C,OAAO,kBAAkB,QAAQ,oBAA+B;IAChE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA4B;IAC1D,QAAQ,oBAA6B,QAAQ;IAC7C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;A;A;;A,I,gB;I,M;I,Y;Q,iB,C,G,iC;I;I,O;Q;Q;K;I;Q,O;Y,Y;Y,M,E;Y,Q,E;Y,Y,E;Y,iB;Y,kB;Y,e;Y,O,E;Y,M;Y,U;Q;I;I;Q,I,C,O,I,C,a;Q,I,C;I;I,S;Q,a,W;Y,I,C,a,I,C,M,kB;iB,I,C,M,kB,I,C;Q;Q;Y,C,G,qB,E,mB,I,C,M,K,C;gB,I,C,O;gB,I,C;gB,I,C;Y;Q;Q;Y,I,C,gB;YA2Cf,IAAA,IAAA,CAAA,mBAAA,IAAA,CAAA,kBAAA;gB,I,U,I,C,K,KAEA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA;gBAEA,IAAA,SAAA;oBACA,IAAA,WAAA,QAAA,SAAA,KACA,CAAA,KAAA,GAAA,MAAA,IAAA,CAAA;oBAGA,IAAA,UAAA,OAAA,SAAA;gBACA;YACA;YACA,OAAA,EAAA;QACA;QAEA;YACA,OAAA,CACA,CAAA,IAAA,CAAA,mBACA,IAAA,CAAA,oBACA,IAAA,CAAA,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,G,I,M,S,I,E,K;gB,O,G,gB;oB,Y;wB;4B,M;4B,S;4B,O,K;4B,Y;wB;qB;oB,K;oB,a;oB,O;wB,Y,K,O,I;oB;oB,I;wB,S,S,M;4B,O,I,W,K;wB;oB;gB,G;oB,G,Q;wB,a;oB,G;wB,I,G,I,G,K;qB;iB;Y,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,U;Y;Y,oB,S,M;gB,I,U;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;oB;oB,I;wB,U,I;oB;gB;a,E;Y,I,G;Y,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;wB,c,C,I;oB;oB,I;wB,U,I;oB;gB;a,E;Y,I,G;Y,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;wB,c,C,I;oB;oB,I;wB,U,I;oB;gB;a,E;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ATJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AUJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAsC;IACpD,OAAO,kBAAkB,QAAQ,oBAAsC;IACvE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAmC;IACjE,QAAQ,oBAAoC,QAAQ;IACpD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;A;A;;A,I,gB;I,M;I,Y;Q,iB,C,G,iC;I;I,O;Q;Q;K;I;Q,O;Y,Y;Y,M,E;Y,O,E;Y,Q,E;Y,kB;Y,e;Y,c;Y,O,E;Y,kB;Q;I;I;Q,I,C;Q,I,C,mB,C,G,+C,E,W,W,K,G;I;I,S;Q,a,W;Y,I,C,a,I,C,M,kB;iB;gB,I,I,C,c;oB,I,C,M,kB,I,C;oB;gB;gB,I,I,C,e;oB,I,C,M,kB,I,C;oB;gB;gB,I,I,C,kB;oB,I,C,M,kB,I,C;oB;gB;Y;Q;Q;Y,C,G,qB,E,yB,K,C;gB,I,C,O;Y,wB;Y,sB;Y;Q;Q;Y,kC;Y,I,C,S,E;Y,I,I,C,kB,C,G,+C,E,oB,I,C,kB,I,C,kB,mB,K,C;gB,I,C,S;Y;Q;QAgEf;Y,iC;YAEA,IAAA,CAAA,QAAA,EAAA;Y,I,I,C,eAEA,CAAA,GAAA,+CAAA,EAAA,oBACA,IAAA,CAAA,eACA,IAAA,CAAA,kBACA,kBACA,KAAA,CAAA;gBACA,IAAA,CAAA,QAAA;YACA;QAEA;QAEA,gBAAA,EAAA;YACA,QAAA,IAAA,oBAAA;YACA,IAAA,CAAA,mBAAA;YACA,IAAA,CAAA,gBAAA;YACA,IAAA,CAAA,eAAA;Q;QAGA,aAAA,EAAA;YACA,QAAA,IAAA,iBAAA;YACA,IAAA,CAAA,gBAAA;Y,I,C,e;QAEA;QAEA,YAAA,EAAA;YACA,QAAA,IAAA,gBAAA;YACA,IAAA,CAAA,eAAA;Q;IAEA;I,O;QAEA;YACA,IAAA,CAAA,gBAAA;YACA,IAAA,CAAA,eAAA;YAEA,IAAA,CAAA;YACA,IAAA,CAAA;QACA;QAEA;YACA,IAAA,CAAA,eAAA;YAEA,IAAA,CAAA;QACA;IACA;AACA;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,U;Y;Y,oB,S,M;gB,I,U;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G,a,I,G,I,C;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;oB;oB,I;wB,U,I;oB;gB;a,E;Y,I,G;Y,I,C,c,uB,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;wB,c,C,I;oB;oB,I;wB,U,I;oB;gB;a,E,K,I;Y,I,G;Y,I,C,c,mB,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;wB,c,C,I;oB;oB,I;wB,U,I;oB;gB;a,E,K,I;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,C,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AA9HA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA6B;IAC3D,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;;A,I,gB;I,M;I,Y;Q,iB,C,G,iC;I;I,O;Q;Q;K;I;Q,O;Y,Y;Y,M,E;Y,iB;Y,O,E;Q;I;I;Q,I,C;I;I,S;Q,a,W;Y,I,C,a,I,C,M,kB;iB,I,C,M,kB,I,C;Q;Q;Y,C,G,qB,E,iB,K,C;gB,I,C,O;Y;Q;Q,6E;Q,gE;Q,e,E;Y,Q,I,mB;Y,I,C,kB;Q;I;I,O;IAyCf;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,U;Y;Y,oB,S,M;gB,I,U;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,iB;oB,O;wB,S;wB,Q,I;wB,gB,I;oB;oB,I;wB,U,I;oB;gB;a,E;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,C,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AA5DA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,U;Y;Y,kB,S,M;gB,O,I,K,I,S,U;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,O;gB,G,K;oB,I,G;iB;gB,I,G;gB,G,K;oB,I,G;iB;gB,I,G;gB,G,K;oB,I,G;iB;gB,I,G;gB,G,K;oB,G,U;wB,I,G;qB;oB,I,G,gB,I,G,C,I,iB,S,I,sB;iB;gB,I,G;gB,G,a;oB,I;wB,S,S,M;4B,I,8B;wB;oB;gB,G;oB,I,G;iB;gB,I,G;gB,I,sB,G,a;oB,I;wB,S,S,M;4B,I,gC;wB;oB;gB,G;oB,I,G;iB,I,I;gB,I,G;gB,G,a;oB,I;wB,S,S,M;4B,I,gC;wB;oB;gB,G;oB,I,G;iB;a,E;Y,I,G;Y,I,a,G,mB;gB,O;oB,W,I;oB,c,I;gB;gB,I;oB,kB,I;gB;Y,K,I;Y,I,G;Y,I,c,I,c,2B,G,kB;gB,O;oB,W,I;oB,c,I,W,S,W,I,a,I,a;gB;gB,I;oB,kB,I;gB;Y,K,I;Y,I,G;Y,I,c,I,c,2B,G,0B;gB,O;oB,W,I;oB,c,I;gB;gB,I;oB,kB,I;gB;Y,K,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AZJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AaJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAqC;IACnD,OAAO,kBAAkB,QAAQ,oBAAqC;IACtE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAkC;IAChE,QAAQ,oBAAmC,QAAQ;IACnD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A;;A,I,gB;I,O;Q;Q;Q;Q;Q;K;I,Y;Q,kB,C,G,gC;I;I;Q,O;Y,a,I,C;Y,mB;Y,a;Y,kB;Q;I;I;Q,I,C,e,C,G,iC;I;I,S;Q;Y,Q,I;Y,I,C,M;Q;Q,a,K;Y,I,C,M,e;Q;Q,M,mB,Q,E,M;Y,Q,I,uC;Y,M,gB,M,C,G,0C,E,8B,Q,S,gB,S,a,S,a,S,a,S,gB,M,C,G,8C;Y,I,C,e,O;Y,Q,I,mB;Y,I,S,mB,I,C,a,uB;gB,I,M,Q,gB,O;gB,O,c,M;Y;Y,I,M,Q,gB,O,c,I,C,K,G,K;Y,O,c,K;Q;Q,M,e,Q;Y,I,C,oB;Y,I,C,c;Y,Q,I;Y,M,qB,C,G,+C,E,Q,I,C;Y,M,c,C;Y,M,W,M,C,G,0C,E,oC,oB,I,C;Y,K,M,a,S;gB,I,gB,U,K;gB,gB,c,Q,kB;gB,M,Y,M,C,G,gD,E,U,G,O,S;gB,W,C,c,G;Y;Y,I,C,c;Q;Q,M,yB,Q;Y,I,C,oB;Y,I,C,c;Y,Q,I;Y,M,qB,C,G,+C,E,Q,I,C;Y,M,W,M,C,G,0C,E,oC,oB,I,C;Y,M,c,C;Y,K,M,a,S;gB,I,gB,U,K;gB,gB,c,Q,kB;gB,M,gB,M,C,G,qC,E,S,gB,U,G,O,S,a,S,a,S,a,S,gB,M,C,G,8C;gB,W,C,c,G;Y;Y,I,C,c;Q;Q,M,gB,Q;Y,I,C,oB;Y,I,C,c;Y,Q,I;Y,M,qB,C,G,+C,E,Q,I,C;Y,M,W,M,C,G,0C,E,oC,oB,I,C;Y,M,c,C;Y,K,M,a,S;gB,I,gB,U,K;gB,gB,c,Q,kB;gB,M,iB,M,I,C,kB,U;gB,W,C,c,G;Y;Y,0D;Y,I,C,c;Q;Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkJf,GAGA;YACA,IAAA,CAAA,oBAAA;QACA;QAEA,mBAAA,QAAA;YACA,OACA,CAAA,IAAA,CAAA,kBACA,SAAA,mBAAA,MACA,SAAA,gBAAA;QAEA;QACA,6BAAA,QAAA;YACA,OACA,CAAA,IAAA,CAAA,kB,S,mB;QAGA;QACA,qBAAA,QAAA;YACA,OAAA,SAAA,mBAAA,IAAA,CAAA,aAAA,wB,S,mB,I,C,a;QAEA;IAEA;IACA,UAAA;QACA;YACA,OACA;QACA;QAGA;YACA,IAAA,CAAA,IAAA,CAAA,gBAAA,OAAA;Y,M,O,C,G,+C,E,Q,I,C;YAEA,QAAA,IAAA;Y,O,C,E,K,K,M,U,E,K,K,M,a,E,K,G,M,C;QAEA;QACA;YACA,OAAA,KAAA,UAAA,IAAA,CAAA,aAAA,MAAA;QACA;IACA;IAEA,OAAA;QACA;YACA,QAAA,IAAA;YACA,IAAA,CAAA,cAAA,IAAA,CAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;;;ACtNA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA6B;IAC3D,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q,S;Y,M;Y,U;Q;Q,M;Y,M;Y,U;Q;I;I,M,I,C,C,C;I,S;Q;Y,I,C,M;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,G,a;Y,a;Y,O;gB,6B;gB,mB;gB,a,I;Y;Y,I;gB,mB,S,M;oB,I,U;gB;gB,oB,S,M;oB,I,U;gB;Y;Q,G;Y,G,mB;gB,I,G;a;Y,I,G;Y,G,c;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,O;wB,I,G,I,G,I;qB;iB;a;Y,I,G;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,I;oB;gB,G;oB,I,G;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,S;Y;Y,kB,S,M;gB,O,I,K,I,S,S;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,K;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;gB,G,K;oB,I,G;iB;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;gB,G,K;oB,I,G;iB;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;gB,G,K;oB,I,G;iB;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;a;Y,I,G;Y,I,G,O,Q,I,c,S,G;gB,I,Y,G,C,E;gB,I,Q,G,C,E;gB,O,G,O;oB,K;oB,a;gB,G;oB,G,K;wB,I,G,W,I,G;qB;oB,I,G;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,a;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,kB;gC;gC,Y;4B;wB,G,I,G,I,c,S,I;4B,O,G,a;gC,K;gC,O;oC,S;gC;4B,G;gC,I,G,I,G;6B;wB,I;qB,E;oB,I,G;oB,M,kB,K,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,Q;gC,O;4B;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,e;gC;gC,Y;4B;wB;qB,E,K,I;oB,I,G;oB,G,a;wB,a;wB,O;4B,Y,I,4B;wB;wB,I;4B,S,S,M;gC,O,I,c;4B;wB;oB,G;wB,I,G;qB;oB,I,G;oB,G,a;wB,a;wB,O;4B,Y,I,4B;wB;wB,I;4B,S,S,M;gC,O,I,wB;4B;wB;oB,G;wB,I,G;qB;oB,I,G;oB,M,kB,M,M,c,I,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,mB;gC;gC,Y;4B;wB;qB,E,K,I;oB,I,G;oB,M,kB,K,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,e;gC;gC,Y;4B;wB;qB,E,K,I;oB,I,G;oB,M,kB,M,M,c,I,G,a;wB,O;4B,O,M;4B,U,S,G;gC,I,K,O,e;4B;4B,Y;wB;oB,G;wB,I,G,yC,I,G,M,e;wB,G,K;4B,I,G,M,I,G,M,c,Q,Q;yB;qB,I,I;oB,I,G;oB,I,oB,S,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,Q;gC,O;4B;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,0B;gC;gC,Y;4B;wB;qB,E,K,I;oB,I,G;oB,G,a;wB,a;wB,O;4B,Y,I,kB;wB;wB,I;4B,S,S,M;gC,O,I,e;4B;wB;oB,G;wB,I,G;qB;oB,I,G;oB,G,a;wB,a;wB,I;4B,S,S,M;gC,O,I,Y;4B;wB;oB,G;wB,I,G;qB;iB,E;Y;Y,I,G;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;Q,I,G;Q,G,kB;Y,O;gB,W,I;gB,Q,I;Y;Y,I;gB,e,I;Y;Q;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAuC;IACrD,OAAO,kBAAkB,QAAQ,oBAAuC;IACxE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAoC;IAClE,QAAQ,oBAAqC,QAAQ;IACrD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A,I,gB;I,O;Q;Q;Q;Q;K;I,Y;Q,oB,C,G,iC;I;I;Q,O;Y,e,I,C;Y,mB;Y,mB;Y,a;Q;I;I;Q,I,C,e,C,G,iC;I;I,S;Q;Y,Q,I;Y,I,C,M;Q;Q,e,W;Y,I,C,M,iB;Q;Q,oB,W;Y,O;gB,C,G,iC,E;gB,C,G,iC,E;a,C,S;Q;Q;Y,I,C,oB;Y,Q,I,qB,I,C;Q;Q,W,W;Y,Q,I;Y,Y,yB;Y,Y,e;Q;I;I,U,C;I,O;Q;Y,Q,I;Y,I,C,gB,I,C;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,mBAAiC;IAC/C,OAAO,kBAAkB,QAAQ,mBAAiC;IAClE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,mBAA8B;IAC5D,QAAQ,oBAA+B,QAAQ;IAC/C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,O;Q;K;I;Q,O,C;I;I,S;Q;Y,I,C,M;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,6B;Y,mB;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,oB;Y;Y,oB,S,M;gB,I,oB;Y;Q;I,G;Q,G,mB;Y,I,G;S;Q,I,G;Q,G,qB;Y,G,K;gB,I,G;a;Y,I,G;Y,G,M;gB,G,M;oB,G,U;wB,I,G;qB;oB,I,G;iB;gB,I,G;gB,G,M;oB,G,U;wB,I,G;qB;oB,I,G;iB;gB,I,G;gB,G,M;oB,G,U;wB,I,G;qB;oB,I,G;iB;gB,I,G;gB,G,M;oB,G,U;wB,I,G;qB;oB,I,G;iB;gB,I,G;gB,G,M;oB,G,U;wB,I,G;qB;oB,I,G;iB;a;Y,I,G;Y,G,K;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;a;Y,I,G;Y,G,K;gB,I,G;a;Y,I,G;Y,G,M;gB,G,M;oB,G,Q;wB,I,G;qB;oB,I,G;iB;gB,I,G;gB,G,M;oB,G,Q;wB,I,G;qB;oB,I,G;iB;gB,I,G;gB,G,M;oB,G,Q;wB,I,G;qB;oB,I,G;iB;a;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,U;Y;Y,kB,S,M;gB,O,I,K,I,S,U;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,K;gB,I,G;a;Y,I,G;Y,I,G,O,Q,I,gB,S,G;gB,I,c,G,C,E;gB,I,Q,G,C,E;gB,O,G,O;oB,K;oB,a;gB,G;oB,G,K;wB,I,G,a,I,G;qB;oB,I,G;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,a;4B,I;gC,e,S,M;oC,O,I,U;gC;4B;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,e;gC;gC,Y;4B;wB,G,I,G,I,c,S,I;4B,O,G,a;gC,K;gC,O;oC,S;gC;4B,G;gC,I,G,I,G;6B;wB,I;qB,E;oB,I,G;oB,M,e,I,a,gB,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,Q;gC,O;4B;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,gB;gC;gC,Y;4B;wB;qB,E,K,I;oB,I,G;oB,I,mB,M,e,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,a;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,gB;gC;gC,Y;4B;wB,G,I,G,O,K,I,S,S,I;4B,O,G,a;gC,K;gC,O;oC,S;gC;4B,G;gC,I,G,I,G;6B;wB,I;qB,E,K,I;oB,I,G;oB,M,e,I,a,iC,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,Q;gC,O;4B;4B,O;gC,O,M;gC,U,S,G;oC,I,K,O,0B;gC;gC,Y;4B;wB;qB,E,K,I;oB,I,G;oB,M,e,I,a,O,G,O;wB,G,a;4B,a;4B,I;gC,S,I;4B;wB,G;4B,I,G;4B,G,W;gC,a;gC,I;oC,S,I;gC;4B,G;gC,I,G;6B;yB,E;wB,I,G;wB,G,Y;4B,a;wB,G;4B,G,S;gC,I,G;6B;4B,I,G;4B,G,Y;gC,O;oC,e;gC;gC,O;oC,O,M;oC,U,S,G;wC,I,K,O,gB;oC;oC,Y;gC;4B;yB,E;qB,E,K,I;oB,I,G;oB,G,a;wB,a;wB,I;4B,S,S,M;gC,O,I,c;4B;wB;oB,G;wB,I,G;qB;iB,E;Y;Y,I,G;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,oB;gB,O;oB,qB,I;gB;gB,I;oB,uB,S,M;wB,I,oB;oB;gB;Y;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAyC;IACvD,OAAO,kBAAkB,QAAQ,oBAAyC;IAC1E,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAsC;IACpE,QAAQ,oBAAuC,QAAQ;IACvD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,O;Q;Q;Q;Q;Q;Q;Q;K;I,Y,C;I;Q,O;Y,iB,I,C;Q;I;I;Q,I,C,Q,C,G,0B;I;I,S;Q;Y,Q,I;Y,I,C,M;Q;Q,iB,a;Y,I,C,M,mB;Q;Q,a,a;Y,I,C,U,C,c,C,S,E;Q;I;I,U;Q;Y,O,O,O,C,G,0B;Q;I;I,O;Q;Y,Q,I;Y,I,C,kB,I,C;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,S;Y;Y,kB,S,M;gB,O,I,K,I,S,S;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,K;gB,I,G;a;Y,I,G;Y,I,G,O,K,I,kB,S,kB,E,K;gB,O,G,O;oB,K;oB,a;gB,G;oB,G,K;wB,I,G,e,I,G;qB;oB,I,G;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,G;yB;wB,I,G;wB,G,a;4B,I;gC,e,S,M;oC,O,I,Y;gC;4B;4B,O;gC,O,I,U,C,mB,C;gC,U,S,G;oC,I,K,I,U,C,mB,E,Q;gC;gC,Y;4B;wB,G,I,G,I,Y,S,I;4B,O,G,a;gC,K,K;gC,O;oC,S,K;gC;4B,G;gC,I,G,I,G,K;6B;wB,I;qB,E;oB,I,G;oB,I,U,C,mB,C,Q,K,G,O;wB,G,K;4B,G,U;gC,I,G;6B;4B,I,G,e,I,G,I,K,C,I,U,C,mB,C,K,C;yB;qB,I,I;oB,I,G;oB,I,U,C,mB,C,Q,K,G,O,I,G,I,K,C,I,U,C,mB,C,K,C,gB,S,I,E,K;wB,O,G,Y;4B,K;4B,a;wB,G;4B,G,S;gC,I,G,I,G,K,Q,O,I,G,K;6B;4B,I,G;4B,G,Y;gC,O;oC,Q,K;gC;gC,O;oC,O,I,U,C,mB,C,M,C,M;oC,U,S,G;wC,I,K,I,U,C,mB,C,Q,O;oC;oC,Y;gC;4B;yB,E;oB,I,K,I;oB,I,G;oB,G,a;wB,a;wB,I;4B,S,S,M;gC,O,I,gB;4B;wB;oB,G;wB,I,G;qB;iB,E;Y;Y,I,G;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAsC;IACpD,OAAO,kBAAkB,QAAQ,oBAAsC;IACvE,OAAO,WAAW;IAG5B,QAAQ,oBAAoC,QAAQ;IACpD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A,I,gB;I,O;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;K;I,Y,C;I;Q,O;Y,iB,I,C;Y,iB,I,C;Y,mB,I,C;Y,sB,I,C;Y,sB,I,C;Y,oB,I,C;Y,kB,I,C;Y,mB,I,C;Y,mB,I,C;Y,qB,I,C;Y,iB,E;Q;I;I;Q,I,C,6B,C,G,yC;Q,I,C,gB,C,G,wC,E;I;I,S;Q,Q,G,E,K;Y,Q,I,W,K;Y,I,C,M,C,O,E,I,C,E;Q;Q,M;Y,M,Y,M,C,G,wC,E,c,I,C;Y,K,M,W,U,I,C,gB,K;gB,M,Q,K;gB,I,Q,G;Y;Q;I;I,U;Q;Y,O;gB,I,C,2B;gB,I,C,2B;a,C,S,I,C;Q;Q;Y,O,I,C,mB,I,C,2B;Q;Q;Y,O,I,C,mB,I,C,2B;Q;Q;Y,O;gB,I,C,2B;gB,I,C,2B;a,C,S,I,C;Q;I;I,O;Q;Y,I,C,kB,I,C;Q;Q;Y,I,C,kB,I,C;Q;Q;Y,I,C,uB,I,C;Y,I,C;Q;Q;Y,I,C,uB,I,C;Q;Q;Y,I,C,oB,I,C;Q;Q;Y,I,C,sB,I,C;Q;Q;Y,I,C,mB,I,C;Q;Q;Y,I,C,oB,I,C;Q;QA+Ff;YACA,IAAA,CAAA,qBAAA,IAAA,CAAA;QACA;IAEA;A;AAGA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,S;Y;Y,kB,S,M;gB,O,I,K,I,S,S;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,K;gB,I,G;a;Y,I,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,I;wB,U,S,M;4B,O,I,O,c,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,kB;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,a;oB,I;wB,e,S,M;4B,O,I,O,c,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,kB;wB;wB,Y;oB;gB,G,I,G,I,4B,S,I;oB,O,G,a;wB,K;wB,O;4B,S;wB;oB,G;wB,I,G,I,G;qB;gB,I;a,E;Y,I,G;Y,G,K;gB,I,G;a;Y,I,G;Y,I,4B,G,O;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,a;wB,I;4B,e,S,M;gC,O,I,O,mB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,uB;4B;4B,Y;wB;oB,G,I,G,I,e,S,I;wB,O,G,a;4B,K,K;4B,O;gC,S,K;4B;wB,G;4B,I,G,I,G,K;yB;oB,I;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,a;wB,I;4B,e,S,M;gC,O,I,O,mB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,uB;4B;4B,Y;wB;oB,G,I,G,I,iB,S,I;wB,O,G,a;4B,K,K;4B,O;gC,S,K;4B;wB,G;4B,I,G,I,G,K;yB;oB,I;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,Q;wB;wB,I;4B,U,S,M;gC,O,I,O,iB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,qB;4B;4B,Y;wB;oB;iB,E;a,E,K,I;Y,I,G;Y,I,0B,G,O;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,I;4B,U,S,M;gC,O,I,O,e,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,mB;4B;4B,Y;wB;oB;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,Q;wB;wB,I;4B,U,S,M;gC,O,I,O,gB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,oB;4B;4B,Y;wB;oB;iB,E;a,E,K,I;Y,I,G;Y,I,0B,G,O;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,I;4B,U,S,M;gC,O,I,O,kB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,sB;4B;4B,Y;wB;oB;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,Q;wB;wB,I;4B,U,S,M;gC,O,I,O,gB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,oB;4B;4B,Y;wB;oB;iB,E;a,E,K,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAtHA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAiC;IAC/C,OAAO,kBAAkB,QAAQ,oBAAiC;IAClE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA8B;IAC5D,QAAQ,oBAA+B,QAAQ;IAC/C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;;A;A,I,gB;I,O;Q;Q;Q;Q;Q;K;I,Y;mB,C,G,4B;Q,yB,C,G,sC;I;I;Q,O;Y,qB;Y,mB;Q;I;I,Y;I,S;Q,yB,kB;Y,Q,I,sB;Y,Q,I,I,C,c,C,mB;Q;Q,e,S;Y,I,C,oB;Y,I,C,sB;Q;Q;Y,I,C,sB;Q;Q,oB,Y;Y,M,Q,C;Y,M,U,C;Y,M,Q,E;Y,M,Y,E,E,sB;Y,mC;Y,K,I,Q,O,K,c;gB,K,C,K,G,K,C,K,I,E;gB,K,I,O,Y,C,K,C;oB,K,C,I,G,K,C,I,I,E;oB,K,C,I,C,K;gB;Y;Y,M,Q,C;gB,I,U,S,O,O,O,iB;gB,I,C,O,C,K,E;oB,O,C,K,G;oB,U,K;oB,I,K,C,K,E,K,I,Y,K,C,K,C;wBA4Cf,IAAA,CAAA,MAAA,WAAA,OAAA,OAAA,4BAAA;oBACA;oB,U;oB,M,K;gB;gBAKA,OAAA;YACA;YAEA,KAAA,IAAA,QAAA,OAAA,KAAA,OACA,IAAA,CAAA,OAAA,CAAA,KAAA,EAAA;gBACA,IAAA,CAAA,MAAA,OAAA,OAAA,MAAA,iBAAA;YACA;YAGA,OAAA,MAAA,OAAA,CAAA,IAAA,EAAA,WAAA;QACA;QAGA,0BAAA,aAAA;YACA,QAAA,IAAA,mCAAA;YACA,QAAA,IAAA,QAAA,IAAA,CAAA;YAEA,IAAA,aAAA,cAAA,IAAA,CAAA,OAAA,KAAA;Y,I,C,c,C,I,C,kB,G;YAGA,QAAA,IAAA,qBAAA,IAAA,CAAA;YACA,MAAA,iBAAA,IAAA,CAAA,mBAAA,IAAA,CAAA;Y,Q,I,qB;QAEA;IAGA;I,U,C;IAGA,OAAA,CAAA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;;;AClGA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAsC;IACpD,OAAO,kBAAkB,QAAQ,oBAAsC;IACvE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAmC;IACjE,QAAQ,oBAAoC,QAAQ;IACpD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,O;Q;Q;Q;Q;K;I,Y,C;I;Q,O;Y,gB,E;Y,oB,E;Q;I;I,Y;I,S;Q;Y,Q,I;Y,I,C,iB,E;Q;Q;Y,I,C,qB,E;Q;Q;Y,I,C,qB,E;Y,I,C,iB,E;Y,I,C,M;Q;Q;Y,I,C,M,sB,I,C,e,O,I,C;Y,I,C,M;Y,I,C,qB,E;Y,I,C,iB,E;Y,Q,I,uB,I,C;Q;Q,e,K;Y,Q,I,wB;Y,I,C,iB;Q;Q,mB,K;Y,Q,I,4B;Y,I,C,qB;Q;Q,mB,K;Y,I,S;Y,I,Q,G,S;Y,O,C,E,M,K,E,O,S,C;Q;Q,e,G;Y,M,Y,E;Y,I,I,O,I,I,I,e,M;gB,M,W;oB,W;oB,G,G,C,I;gB;gB,U,K;Y;YAiDf,OAAA;QACA;QAEA,+BAAA,SAAA;YACA,OAAA,aAAA,IAAA,CAAA;QACA;IAIA;IACA,UAAA;Q,mB;YAEA;gBACA,OAAA,IAAA,CAAA,cAAA,IAAA,CAAA;YACA;YACA,KAAA,QAAA,GAEA;QACA;QACA,uBAAA;YACA;gB,O,I,C,c,I,C;YAEA;YACA,KAAA,QAAA,GAEA;QACA;QAEA;YACA,OAAA,IAAA,CAAA,qBAAA;QACA;IAEA;IAEA,OAAA,CAAA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,6B;Y,mB;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,sB;Y;Y,oB,S,M;gB,I,sB;Y;Q;I,G;Q,G,Y;Y,a;Y,O;gB,W;gB,qB,I;Y;Y,I;gB,e,I;gB,0B,S,M;oB,I,iB;gB;gB,4B,S,M;oB,I,iB;gB;Y;Y,a,I,G;gB;oB,K;oB,I,S,G;wB,I,Q,I;wB,O,G,oB,C,G;4B,G,O;gC,a;4B,G;gC,I,G,I,G,I,kB;6B;4B,I,G;4B,G,O;gC,a;4B,G;gC,G,a;oC,a;oC,I;wC,S,I;oC;gC,G;oC,G,W;wC,I,G;qC;iC,E;6B,E;yB;oB;gB;gB;oB,K;oB,I,S,G;wB,I,O,I;wB,O,G,gB;4B,O;gC,gB,I;4B;4B,O;gC,iB;gC,kB;gC,e,I;4B;wB,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,a;6B;4B,I,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,kB;6B;4B,I,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,e;6B;4B,I,G;4B,G,iB;gC,O;oC,c;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,0B;6B;yB,E;oB;gB;a;Y,O;gB,O,I;gB,U,S,G;oB,I,oB;gB;gB,Y;Y;Q,G;Y,G,oB;gB,G,M;oB,a;gB,G;oB,I,G;iB;a;S,E;Q,I,G;Q,G,Y;Y,a;Y,O;gB,W;gB,qB,I;Y;Y,I;gB,e,I;gB,0B,S,M;oB,I,qB;gB;gB,4B,S,M;oB,I,qB;gB;Y;Y,a,I,G;gB;oB,K;oB,I,S,G;wB,I,Q,I;wB,O,G,oB,C,G;4B,G,O;gC,a;4B,G;gC,I,G,I,G,I,kB;6B;4B,I,G;4B,G,O;gC,a;4B,G;gC,G,a;oC,a;oC,I;wC,S,I;oC;gC,G;oC,G,W;wC,I,G;qC;iC,E;6B,E;yB;oB;gB;gB;oB,K;oB,I,S,G;wB,I,O,I;wB,O,G,gB;4B,O;gC,gB,I,8B,K;4B;4B,O;gC,iB,I,oB,W;gC,kB;gC,e,I,8B,K;4B;wB,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,a;6B;4B,I,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,Q;6B;4B,I,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,M,I,G,K,U;6B;yB,E;oB;gB;a;Y,O;gB,O,I;gB,U,S,G;oB,I,wB;gB;gB,Y;Y;Q,G;Y,G,oB;gB,G,M;oB,a;gB,G;oB,I,G;iB;a;S,E;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AArGA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,W;Y;Y,kB,S,M;gB,O,I,K,I,S,W;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,O,K,I,Y,U,I,G,O;gB,G,K;oB,G,K;wB,I,G;qB;oB,I,G;iB;a,I,G,O;gB,G,K;oB,I,G;iB;gB,I,G;gB,G,W;oB,G,gB;wB,a;oB,G;wB,I,G;wB,G,O;4B,a;wB,G;4B,I,G,oC,I,G,I,c,C,I,C,E,I;yB;wB,I,G;wB,G,a;4B,I;gC,S,S,M;oC,O,I,c;gC;4B;wB,G;4B,I,G;yB;qB,E;oB,I,G;oB,I,G,O,K,I,a,S,kB,E,K;wB,O,G,gB;4B,K;4B,a;wB,G;4B,I,G,iB,I,G,sB;4B,G,a;gC,I;oC,O,S,M;wC,O,I,wB;oC;gC;gC,O;oC,O,I,c,C,mB;oC,U,S,G;wC,I,K,I,gB,oB;oC;oC,Y;gC;4B,G,I,G,I,c,C,mB,E,S,G,E,Q;gC,O,G,O;oC,K;oC,a;gC,G;oC,I,G,uB,I,G,W,K,Q,I,G,O;iC;4B,I;4B,I,G;4B,G,a;gC,I;oC,S,S,M;wC,O,I,c;oC;gC;4B,G;gC,I,G;6B;yB,E;oB;iB,E;a,E;Y,I,G;Y,G,yB;gB,O;oB,c,I;oB,U,I;oB,kB,I;oB,uB,I;oB,qB,I;gB;gB,I;oB,wB,I;oB,sB,I;gB;Y;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAG5B,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,O;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;K;I,Y,C;I;Q,O;Y,gB,I,C;Y,0B,I,C;Y,iB,I,C;Y,iB,I,C;Y,mB,I,C;Y,sB,I,C;Y,sB,I,C;Y,oB,I,C;Y,kB,I,C;Y,mB,I,C;Y,qB,I,C;Q;I;I;Q,I,C,6B,C,G,yC;I;I,S;Q,Q,G,E,K;Y,Q,I,W,K;Y,I,O,e,I,C,a,O,I,C,O,uB,E;Y,I,C,M,C,O,E,I,C,E;Q;I;I,U;Q;Y,O,O,O,C,G,0B;Q;Q;Y,O,G;Q;Q;Y,O;gB,I,C,2B;gB,I,C,2B;a,C,S,I,C;Q;Q;Y,O,I,C,mB,I,C,2B;Q;Q;Y,O,I,C,mB,I,C,2B;Q;I;I,O;Q;Y,I,C,iB,I,C;Q;Q;Y,I,C,2B,I,C;Q;Q;Y,I,C,kB,I,C;Q;Q;Y,I,C,kB,I,C;Q;Q;Y,I,C,oB,I,C;Q;Q;Y,I,C,uB,I,C;Q;Q;Y,I,C,uB,I,C;Q;Q;Y,I,C,qB,I,C;Q;Q;Y,I,C,sB,I,C;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,U;Y;Y,kB,S,M;gB,O,I,K,I,S,U;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,a;oB,I;wB,e,S,M;4B,O,I,O,a,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,iB;wB;wB,Y;oB;gB,G,I,G,I,Y,S,I;oB,O,G,a;wB,K,K;wB,O;4B,S,K;wB;oB,G;wB,I,G,I,G,K;qB;gB,I;a,E;Y,I,G;Y,I,a,K,G,O;gB,G,K;oB,G,U;wB,I,G;qB;oB,I,G,e,I,G,I,K,C,I,U,C;iB;a,I,I;Y,I,G;Y,I,a,K,G,O;gB,I,K,C,I,U,C,kB,Y,G,O,I,G,I,Q,S,I,E,K;oB,O,G,O;wB,K;wB,a;oB,G;wB,G,S;4B,I,G,M,I,G,S;yB;wB,I,G;wB,G,Y;4B,O;gC,S;4B;wB,G;4B,I,G;yB;wB,I,G;wB,G,Y;4B,O;gC,S;4B;wB,G;4B,I,G;yB;qB,E;gB,I,K,A,I,K,C,I,U,C,kB,W,G,O,I,G,I,Q,S,I,E,K;oB,O,G,Y;wB,K;wB,a;oB,G;wB,G,S;4B,I,G,M,I,G,S;yB;wB,I,G;wB,G,Y;4B,O;gC,Q;4B;4B,I;gC,U,S,M;oC,O,I,O,uB,I;gC;4B;4B,O;gC,O,I,wB,C,M;gC,U,S,G;oC,I,K,I,0B,O;gC;gC,Y;4B;wB;qB,E;gB,I,K,A,I,K,C,I,U,C,kB,W,G,O,I,G,I,Q,S,I,E,K;oB,O,G,Y;wB,K;wB,a;oB,G;wB,G,S;4B,I,G,M,I,G,S;yB;wB,I,G;wB,G,Y;4B,I;gC,U,S,M;oC,O,I,O,uB,I;gC;4B;4B,O;gC,O,I,wB,C,M;gC,U,S,G;oC,I,K,I,0B,O;gC;gC,Y;4B;wB;qB,E;gB,I,K,G,O,I,G,I,K,C,I,U,C,gB,S,I,E,K;oB,O,G,Y;wB,K;wB,a;oB,G;wB,G,S;4B,I,G,I,G,K,Q,O,I,G,K;yB;wB,I,G;wB,G,Y;4B,O;gC,Q,K;4B;4B,I;gC,U,S,M;oC,O,I,O,uB,I;gC;4B;4B,O;gC,O,I,wB,C,M;gC,U,S,G;oC,I,K,I,0B,O;gC;gC,Y;4B;wB;qB,E;gB,I;a,I,I;Y,I,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,I;wB,U,S,M;4B,O,I,O,c,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,kB;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,a;oB,I;wB,e,S,M;4B,O,I,O,c,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,kB;wB;wB,Y;oB;gB,G,I,G,I,4B,S,I;oB,O,G,a;wB,K;wB,O;4B,S;wB;oB,G;wB,I,G,I,G;qB;gB,I;a,E;Y,I,G;Y,I,4B,G,O;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,I;4B,U,S,M;gC,O,I,O,mB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,uB;4B;4B,Y;wB;oB;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,I;4B,U,S,M;gC,O,I,O,mB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,uB;4B;4B,Y;wB;oB;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,Q;wB;wB,I;4B,U,S,M;gC,O,I,O,iB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,qB;4B;4B,Y;wB;oB;iB,E;a,E,K,I;Y,I,G;Y,I,0B,G,O;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,I;4B,U,S,M;gC,O,I,O,e,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,mB;4B;4B,Y;wB;oB;iB,E;gB,I,G;gB,G,Y;oB,a;gB,G;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,Q;wB;wB,I;4B,U,S,M;gC,O,I,O,gB,I;4B;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,oB;4B;4B,Y;wB;oB;iB,E;a,E,K,I;Y,I,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,Q;oB;oB,I;wB,U,S,M;4B,O,I,O,gB,I;wB;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,oB;wB;wB,Y;oB;gB;a,E;Y,I,G;Y,G,a;gB,I;oB,U,S,M;wB,O,I,O,kB,I;oB;gB;gB,O;oB,O,I;oB,U,S,G;wB,I,sB;oB;oB,Y;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA0B;IACxC,OAAO,kBAAkB,QAAQ,oBAA0B;IAC3D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAuB;IACrD,QAAQ,oBAAwB,QAAQ;IACxC,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,O;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;K;I;Q,O,C;I;I,S,C;I,U;Q;Y,O;gB;oB,O;oB,O,I,C;gB;gBAUf;oBAAA,OAAA;oBAAA,OAAA,KAAA,UAAA,IAAA,CAAA;gBAAA;gBACA;oBAAA,OAAA;oBAAA,OAAA,IAAA,CAAA;gBAAA;gBACA;oBAAA,OAAA;oBAAA,OAAA,IAAA,CAAA;gBAAA;gBACA;oBACA,OAAA;oBACA,OAAA,KAAA,UAAA,IAAA,CAAA;gBACA;gBACA;oBAAA,OAAA;oBAAA,OAAA,IAAA,CAAA;gBAAA;gBACA;oBAAA,OAAA;oBAAA,OAAA,IAAA,CAAA;gBAAA;gBACA;oBAAA,OAAA;oBAAA,OAAA,IAAA,CAAA;gBAAA;aACA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,W;Q,a;Q,O;Y,M,I,c;Y,Y;Y,W,I,Q;Q;Q,I;Y,iB,S,M;gB,O,I,K,I,S,U;Y;Y,kB,S,M;gB,O,I,K,I,S,U;Y;Q;I,G;Q,G,c;Y,a;Q,G;Y,G,K;gB,I,G;a;Y,I,G;Y,I,G,I,a,S,K,E,K;gB,O,G,O;oB,K;oB,a;gB,G;oB,G,U;wB,I,G,I,G,M,S;qB;oB,I,G,a,I,G,M,U,K,c,M,S;iB;Y;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAxCA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Y,6B;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,e;gB,O;oB,kB,I,Q;oB,a;gB;gB,I;oB,uB,S,M;wB,O,I,K,I,S,U;oB;oB,yB,S,M;wB,O,I,K,I,S,U;oB;oB,c,I;gB;Y,G;gB,G,iB;oB,O;wB,iB,I;wB,W,I;wB,gB,I;wB,uB,I;wB,gC,I;wB,kB,I;wB,Y;oB;oB,I;wB,uB,S,M;4B,I,e;wB;wB,wB,S,M;4B,I,e;wB;wB,8B,S,M;4B,I,sB;wB;wB,+B,S,M;4B,I,sB;wB;wB,uC,S,M;4B,I,+B;wB;wB,2C,S,M;4B,I,+B;wB;wB,yB,S,M;4B,I,iB;wB;wB,0B,S,M;4B,I,iB;wB;oB;gB;gB,I,G;gB,G,mB;oB,O;wB,iB,I;wB,W,I;wB,c,I;wB,kB,I;oB;oB,I;wB,yB,S,M;4B,I,iB;wB;wB,0B,S,M;4B,I,iB;wB;oB;gB;gB,I,G;gB,G,uB;oB,O;wB,iB,I;wB,W,I;wB,c,I;wB,kB,I;wB,U,I;oB;oB,I;wB,Y,I;wB,e,I;wB,iB,S,M;4B,I,S;wB;oB;gB;gB,I,G;gB,G,yB;oB,O;wB,iB,I;wB,W,I;wB,U,I;wB,Y,I;oB;oB,I;wB,c,I;wB,iB,I;wB,mB,S,M;4B,I,W;wB;oB;gB;gB,I,G;gB,G,2B;oB,O;wB,iB,I;wB,W,I;wB,c,I;oB;oB,I;wB,gB,I;wB,mB,I;wB,qB,S,M;4B,I,a;wB;oB;gB;gB,I,G;gB,G,wB;oB,O;wB,iB,I;wB,W,I;wB,U,I;wB,c,I;wB,c,I;wB,gB,I;wB,mB,I;wB,mB,I;wB,e,I;wB,gB,I;wB,gB,I;wB,kB,I;wB,iB,I;oB;oB,I;wB,qB,S,M;4B,I,a;wB;wB,sB,S,M;4B,I,a;wB;wB,qB,S,M;4B,I,a;wB;wB,sB,S,M;4B,I,a;wB;wB,uB,S,M;4B,I,e;wB;wB,wB,S,M;4B,I,e;wB;wB,0B,S,M;4B,I,kB;wB;wB,4B,S,M;4B,I,kB;wB;wB,0B,S,M;4B,I,kB;wB;wB,4B,S,M;4B,I,kB;wB;wB,sB,S,M;4B,I,c;wB;wB,uB,S,M;4B,I,c;wB;wB,uB,S,M;4B,I,e;wB;wB,wB,S,M;4B,I,e;wB;wB,uB,S,M;4B,I,e;wB;wB,yB,S,M;4B,I,e;wB;wB,yB,S,M;4B,I,iB;wB;wB,4B,S,M;4B,I,iB;wB;wB,wB,S,M;4B,I,gB;wB;wB,yB,S,M;4B,I,gB;wB;oB;gB;gB,I,G;gB,G,mB;oB,O;wB,iB,I;wB,W,I;wB,U,I;wB,c,I;wB,kB,I;oB;oB,I;wB,yB,S,M;4B,I,iB;wB;wB,0B,S,M;4B,I,iB;wB;oB;gB;gB,I,G;gB,G,oB;oB,O;wB,iB,I;wB,W,I;wB,gB,I;wB,mB,I;wB,kB,I;wB,a,I;wB,uB,I;wB,c,I;wB,c,I;wB,gB,I;oB;gB;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,I,Q,W,I,C,c,U,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a,I,I;Y,I,G;Y,I,Q,W,I,C,c,U,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a,I,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AxBJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AyBJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,mBAAuC;IACrD,OAAO,kBAAkB,QAAQ,mBAAuC;IACxE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAoC;IAClE,QAAQ,oBAAqC,QAAQ;IACrD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A;;A;;A;;A;;A;;A;;A;;A;;A;A;;A,I,gB;I,M;I,O;Q;K;I,Y;Q,iB,C,G,+B;Q,mB,C,G,iC;Q,uB,C,G,qC;Q,yB,C,G,uC;Q,2B,C,G,yC;Q,wB,C,G,sC;Q,mB,C,G,iC;Q,iB,C,G,gC;Q,oB,C,G,0B;I;I;Q,I,C,gB;Y,U;Y,gB;Y,oB;Y,sB;Y,wB;Y,qB;Y,gB;Y,S;Q;Q,O;Y,Y;Y,mB;Y,2B;Y,c;Y,qB;Y,8B;Y,gB;Y,8C;Y,gB;Y,+C;Y,Q,C;Y,mC;Y,U,C;Y,sC;Y,Y,C;Y,4C;Y,gB;gB,G;Y;Y,kC;Y,Y;Y,Y;Y,iB;Y,iB;Y,a;Y,c;Y,e;Y,c;Y,gB;Y,c;Y,Y;Y,S;gB,Q,I,C,c;gB,O;gB,Q;gB,O;gB,Q;gB,O;gB,O;gB,S;gBAgHf,QAAA;YACA;QACA;IACA;IACA,SAAA;QACA,MAAA,QAAA,MAAA;YACA,IAAA,CAAA,eAAA,OAAA;YACA,oCAAA;YACA,MAAA,iBAAA,IAAA,CAAA,aAAA,GAAA;YACA,MAAA,SAAA,MAAA,CAAA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A;YACA;YACA,OAAA;QACA;QAEA;YACA,MAAA,oBAAA,EAAA;YACA,KAAA,MAAA,gBAAA,OAAA,KAAA,IAAA,CAAA,UAAA;gBACA,IAAA,MAAA,CAAA,EAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA,YAAA,EAAA,CAAA,GAAA,8CAAA,EAAA,EAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA,aAAA,CAAA;gBACA,IAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA,2BAAA,MACA,OAAA,CAAA,EAAA,GAAA,+CAAA,EAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA,uBAAA,CAAA;gBAEA,kBAAA,KAAA;oBACA,MAAA,CAAA,EAAA,aAAA,CAAA;oBACA,MAAA;oBACA,OAAA;gBACA;YACA;YACA,OAAA;Q;IAGA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Y,6B;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,e;gB,O;oB,kB,I,Q;oB,a;gB;gB,I;oB,uB,S,M;wB,O,I,K,I,S,U;oB;oB,yB,S,M;wB,O,I,K,I,S,U;oB;oB,c,I;gB;Y,G;gB,G,iB;oB,O;wB,iB,I;wB,W,I;wB,gB,I;wB,uB,I;wB,gC,I;wB,kB,I;wB,Y;oB;oB,I;wB,uB,S,M;4B,I,e;wB;wB,wB,S,M;4B,I,e;wB;wB,8B,S,M;4B,I,sB;wB;wB,+B,S,M;4B,I,sB;wB;wB,uC,S,M;4B,I,+B;wB;wB,2C,S,M;4B,I,+B;wB;wB,yB,S,M;4B,I,iB;wB;wB,0B,S,M;4B,I,iB;wB;oB;gB;gB,I,G;gB,G,mB;oB,O;wB,iB,I;wB,W,I;wB,c,I;wB,kB,I;oB;oB,I;wB,yB,S,M;4B,I,iB;wB;wB,0B,S,M;4B,I,iB;wB;oB;gB;gB,I,G;gB,G,uB;oB,O;wB,iB,I;wB,W,I;wB,c,I;wB,kB,I;wB,U,I;oB;oB,I;wB,Y,I;wB,e,I;wB,iB,S,M;4B,I,S;wB;oB;gB;gB,I,G;gB,G,yB;oB,O;wB,iB,I;wB,W,I;wB,U,I;wB,Y,I;oB;oB,I;wB,c,I;wB,iB,I;wB,mB,S,M;4B,I,W;wB;oB;gB;gB,I,G;gB,G,2B;oB,O;wB,iB,I;wB,W,I;wB,c,I;oB;oB,I;wB,gB,I;wB,mB,I;wB,qB,S,M;4B,I,a;wB;oB;gB;gB,I,G;gB,G,wB;oB,O;wB,iB,I;wB,W,I;wB,U,I;wB,c,I;wB,c,I;wB,gB,I;wB,mB,I;wB,mB,I;wB,e,I;wB,gB,I;wB,gB,I;wB,kB,I;wB,iB,I;oB;oB,I;wB,qB,S,M;4B,I,a;wB;wB,sB,S,M;4B,I,a;wB;wB,qB,S,M;4B,I,a;wB;wB,sB,S,M;4B,I,a;wB;wB,uB,S,M;4B,I,e;wB;wB,wB,S,M;4B,I,e;wB;wB,0B,S,M;4B,I,kB;wB;wB,4B,S,M;4B,I,kB;wB;wB,0B,S,M;4B,I,kB;wB;wB,4B,S,M;4B,I,kB;wB;wB,sB,S,M;4B,I,c;wB;wB,uB,S,M;4B,I,c;wB;wB,uB,S,M;4B,I,e;wB;wB,wB,S,M;4B,I,e;wB;wB,uB,S,M;4B,I,e;wB;wB,yB,S,M;4B,I,e;wB;wB,yB,S,M;4B,I,iB;wB;wB,4B,S,M;4B,I,iB;wB;wB,wB,S,M;4B,I,gB;wB;wB,yB,S,M;4B,I,gB;wB;oB;gB;gB,I,G;gB,G,mB;oB,O;wB,iB,I;wB,W,I;wB,U,I;wB,c,I;wB,kB,I;oB;oB,I;wB,yB,S,M;4B,I,iB;wB;wB,0B,S,M;4B,I,iB;wB;oB;gB;gB,I,G;gB,G,oB;oB,O;wB,iB,I;wB,W,I;wB,gB,I;wB,mB,I;wB,kB,I;wB,a,I;wB,uB,I;wB,c,I;wB,c,I;wB,gB,I;oB;gB;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,I,Q,W,I,C,c,U,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a,I,I;Y,I,G;Y,I,Q,W,I,C,c,U,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;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AAO,OAAO,sBAAsB,aAAa;QACnD;IACF;AACF;;;;;AC3SA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAuC;IACrD,OAAO,kBAAkB,QAAQ,oBAAuC;IACxE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAoC;IAClE,QAAQ,mBAAqC,QAAQ;IACrD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;A;A;A,C,G,mB,E,U,mB,C,G,mC;A,I,gB;I,M;I,Y;I;I;Q,I,C,S;Y,Q;Y,S;Y,O;Q;Q,I,C;Q,I,C;Q,I,C;Q,I,C,O,E;Q,I,C,e;Q,O;Y,Q;Y,U;Y,U,E;Y,Y,E;Y,a;Y,U,I,C,O;Q;I;I,S;Q,M,Q,M;Y,I,C,W,I,C,O;Y,I,C,Y,O;Y,I,C,a,O;Y,I,C,e,O;Y,Q,I;gB,I,C,gB,I,C;gB,I,C,a,I,C;a,E,K,C,C,Q,O;gB,I,C,O;gB,I,C,W;gB,I,C,a;gB,I,C,W,I,C,O;Y,G,M,C;gB,I,C,W,I,C,O;Y;Q;Q,U,I;Y,O,I,C,W,K,C;gB,O,K,O,G;Y;Q;Q,S,I;Y,O,O,I,C,S,U,c,S;Q;Q,iC;Q,oC;Q,K;Q;Y,I,C,W,C,I,C;Q;Q,M,Y,I;Y,I,C,I,C,S,O;gB,M,C,G,4D,E,oB,I,C,W,I,C,Y,K;gBA0Ef,IAAA,CAAA,WAAA,KAAA;YACA,OAAA;gB,M,UAEA,MAAA,CAAA,GAAA,4DAAA,EAAA,sB,I,C,YAEA,KAAA;gBAGA,IAAA,SACA,IAAA,CAAA,aAAA,IAAA,CAAA,WAAA,OACA,CAAA,KAAA,GAAA,OAAA,KAAA;YAGA;QACA;QAEA,MAAA,iBAAA,UAAA;YACA,MAAA,SAAA,MAAA,CAAA,GAAA,4DAAA,EAAA,gBACA;YAEA,OAAA,OAAA,IAAA,CAAA,QAAA,MAAA;QACA;Q,M,c,I;YAGA,MAAA,WAAA,MAAA,CAAA,GAAA,6DAAA,EAAA,iBAAA;Y,M,W,S,I,C;gBAEA,OAAA,CAAA,GAAA,6DAAA,EAAA,UAAA,GAAA;Y;YAGA,OAAA,QAAA,IAAA,UAAA,KAAA,CAAA;gBACA,MAAA,UAAA,OAAA;gBACA,OAAA,QAAA,IAAA,CAAA,KAAA,GAAA;YACA;QACA;IACA;IACA,OAAA;QACA,QAAA,SAAA,QAAA;YACA,WAAA,SAAA;YACA,qCAAA;YACA,IAAA,SAAA,WAAA,GACA,IAAA,CAAA,WAAA;mBAAA,IAAA,CAAA;aAAA;iBAEA,IAAA,CAAA,WAAA,IAAA,CAAA,KAAA,OAAA,CAAA;gB,O,G,K,c,S,S;YAEA;QAEA;IACA;AAMA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,c;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;gB,O;oB,U,I;gB;Y,G;gB,G,S;oB,Y;wB;4B,M;4B,S;4B,O,I;4B,Y;wB;qB;oB,a;oB,O;wB,U,I;oB;oB,O;wB,Q;wB,Q;wB,e;oB;oB,U;wB,S,I;oB;oB,I;wB,S,S,M;4B,I,O,O,W;4B,I,S,O,O;wB;oB;gB;gB,I,G;gB,G,K;oB,a;oB,I;wB,S,I;oB;gB,G;oB,G,W;wB,I,G;qB;iB,E;a;S;Q,I,G;Q,I,S,S,K,I,a,I,O,S,G,O;Y,a;Q,G;Y,G,c;gB,a;Y,G;gB,G,mB;oB,O;wB,S,I;wB,a;wB,a;oB;oB,a,I,G;wB;4B,K;4B,I,S,G;gC,I,O,I;gC,O;oC,G,O;wC,a;oC,G;wC,G,Q;4C,a;wC,G;4C,I,G,I,G,K;yC;wC,I,G;wC,G,a;4C,a;4C,I;gD,S,S,M;oD,O,I,W;gD;4C;wC,G;4C,G,W;gD,I,G,I,G,I,Q;6C;yC,E;qC,E;iC;4B;wB;qB,E,M,O;gB;a,E;S,E,K,I;Q,I,G;Q,I,S,W,K,I,a,I,O,S,G,O;Y,a;Q,G;Y,I,G;S,I,I;Q,I,G;Q,I,a,I,O,U,G,O;Y,a;Q,G;Y,G,uB;gB,a;gB,O;oB,W;gB;Y;S,E,K,I;Q,I,G;Q,I,a,I,O,Q,G,O;Y,a;Q,G;Y,I,G;S,I,I;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAjJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;A,Q,2B,Q,wC,Q,wC,Q,+B,Q,sC,Q,2B,Q,+B,Q,8B,Q,kC,Q,8B,Q,kC,Q,qB,Q,oB,Q,W,Q,oB,Q,oB,Q,0B,Q,gB,Q,yB,Q,yB,Q,iC,Q,wB,Q,iC,Q,iB,Q,iB,Q,gB,Q,gB,Q,Y,Q,qB,Q,qB,Q,gB,Q,wB,Q,wB,Q,sB,Q,kC,Q,a,Q,uB,Q,uB,Q,8B,Q,sB,Q,Y,K;AELA;;;;;;;;;;;;;;;;;;;;;;CAsBG,GACH,MAAA,gBAAA,QAAA;AACA,aAAA,QAAA,qBAAA;AACA,MAAA,uBAAA,QAAA;AACA,IAAA,iDAAA,QAAA;AAAS,OAAA,eAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAsB;AAAA;AAGlB,QAAA,sBAA8B,cAAc;AAC5C,QAAA,8BAA6C;IAAC;IAAU;CAAQ;AAC7E,yCAAyC;AACzC,0CAA0C;AAC7B,QAAA,uBACX,cAAc,4CAA4C,+BAA+B;AAC9E,QAAA,uBACX,cAAc,4CAA4C,+BAA+B;AAC9E,QAAA,aACX,cAAc;AACH,QAAA,kCAAkC;AAClC,QAAA,sBAAsB;AACnC,yCAAyC;AACzC,yCAAyC;AAC5B,QAAA,wBACX,cAAc,6CAA6C,mCAAmC;AACnF,QAAA,wBACX,cAAc,6CAA6C,kCAAkC;AAClF,QAAA,gBAAwB,cAAc;AACnD,sCAAsC;AACtC,sCAAsC;AACzB,QAAA,qBACX,cAAc,0CAA0C,gCAAgC;AAC7E,QAAA,qBACX,cAAc,0CAA0C,gCAAgC;AAC7E,QAAA,YAAoB,cAAc;AAElC,QAAA,gBAAgB,cAAc;AAC9B,QAAA,gBAAgB,cAAc;AAC9B,QAAA,iBAAiB,cAAc;AAC/B,QAAA,iBAAiB,cAAc;AAE5C,yCAAyC;AACzC,yCAAyC;AAC5B,QAAA,iCACX,cAAc;AACH,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","sources":["node_modules/spinal-env-viewer-plugin-analysis/index.js","node_modules/spinal-env-viewer-plugin-analysis/src/buttons/index.js","node_modules/spinal-env-viewer-plugin-analysis/src/buttons/createEntity.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-model-analysis/dist/index.js","node_modules/spinal-model-analysis/src/index.ts","node_modules/spinal-model-analysis/dist/models/AnalyticModel.js","node_modules/spinal-model-analysis/src/models/AnalyticModel.ts","node_modules/spinal-model-analysis/dist/models/TrackingMethodModel.js","node_modules/spinal-model-analysis/src/models/TrackingMethodModel.ts","node_modules/spinal-model-analysis/dist/interfaces/IAnalyticResult.js","node_modules/spinal-model-analysis/src/interfaces/IAnalyticResult.ts","node_modules/spinal-model-analysis/dist/constants.js","node_modules/spinal-model-analysis/src/constants.ts","node_modules/spinal-model-analysis/dist/algorithms/algorithms.js","node_modules/spinal-model-analysis/src/algorithms/algorithms.ts","node_modules/spinal-model-analysis/dist/services/AnalyticService.js","node_modules/spinal-model-analysis/src/services/AnalyticService.ts","node_modules/spinal-model-analysis/dist/models/ConfigModel.js","node_modules/spinal-model-analysis/src/models/ConfigModel.ts","node_modules/spinal-model-analysis/dist/models/EntityModel.js","node_modules/spinal-model-analysis/src/models/EntityModel.ts","node_modules/spinal-model-analysis/dist/models/InputsModel.js","node_modules/spinal-model-analysis/src/models/InputsModel.ts","node_modules/spinal-model-analysis/dist/models/OutputsModel.js","node_modules/spinal-model-analysis/src/models/OutputsModel.ts","node_modules/spinal-model-analysis/dist/services/utils.js","node_modules/spinal-model-analysis/src/services/utils.ts","node_modules/spinal-model-analysis/dist/models/InputData/InputDataModel/InputDataEndpoint.js","node_modules/spinal-model-analysis/src/models/InputData/InputDataModel/InputDataEndpoint.ts","node_modules/spinal-model-analysis/dist/models/InputData/genUID.js","node_modules/spinal-model-analysis/src/models/InputData/genUID.ts","node_modules/spinal-model-analysis/dist/services/SingletonTimeSeries.js","node_modules/spinal-model-analysis/src/services/SingletonTimeSeries.ts","node_modules/qs/lib/index.js","node_modules/qs/lib/stringify.js","node_modules/side-channel/index.js","node_modules/get-intrinsic/index.js","node_modules/has-symbols/index.js","node_modules/has-symbols/shams.js","node_modules/has-proto/index.js","node_modules/function-bind/index.js","node_modules/function-bind/implementation.js","node_modules/has/src/index.js","node_modules/call-bind/callBound.js","node_modules/call-bind/index.js","node_modules/object-inspect/index.js","node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/qs/lib/utils.js","node_modules/qs/lib/formats.js","node_modules/qs/lib/parse.js","node_modules/spinal-env-viewer-plugin-analysis/src/buttons/createAnalytic.js","node_modules/spinal-env-viewer-plugin-analysis/src/buttons/modifyAnalytic.js","node_modules/spinal-env-viewer-plugin-analysis/src/buttons/createContext.js","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/index.js","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/createContextDialog.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/sortable-list.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/addItemsPopover.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/createEntityDialog.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/createAnalyticDialog.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/analyticName.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/followedEntity.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/linkToEntity.vue","node_modules/spinal-env-viewer-plugin-analysis/src/services/index.js","node_modules/spinal-env-viewer-plugin-analysis/src/services/classes/spinalAttributeService.js","node_modules/spinal-env-viewer-plugin-forge/dist/Constants.js","node_modules/spinal-env-viewer-bim-manager-service/dist/index.js","node_modules/spinal-env-viewer-bim-manager-service/src/index.ts","node_modules/spinal-env-viewer-bim-manager-service/dist/bimObjects/bimService.js","node_modules/spinal-env-viewer-bim-manager-service/src/bimObjects/bimService.ts","node_modules/spinal-env-viewer-plugin-analysis/src/services/classes/spinalConfigurationService.js","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/linkerTemplate.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/linkToSpatialEntity.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/linkToContext.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/inputConfiguration.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/previewDialog.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/triggerConfiguration.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/cronHelpDialog.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/algorithmConfiguration.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/resultConfiguration.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/IODependencies.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/inputSelectionTable.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/configuration.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/components/analyticSteps/summary.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/modifyAnalyticDialog.vue","node_modules/spinal-env-viewer-plugin-analysis/src/vues/panels/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-plugin-analysis/src/vues/panels/linkGroupToAnalytics.vue","node_modules/spinal-service-ticket/dist/Constants.js","node_modules/spinal-service-ticket/src/Constants.ts","node_modules/spinal-service-ticket/dist/old_constants.js","node_modules/spinal-service-ticket/src/old_constants.ts"],"sourcesContent":["import \"./src/buttons\";\nimport \"./src/vues/dialogs\";\nimport \"./src/vues/panels\";","import createEntity from \"./createEntity\";\nimport createAnalytic from \"./createAnalytic\";\nimport modifyAnalytic from \"./modifyAnalytic\";\n\nimport {\n   CreateContextButton\n } from \"./createContext\";\n\n import {\n   spinalContextMenuService\n } from \"spinal-env-viewer-context-menu-service\";\n \n /* Constants */\nconst HEADER_HOOK_NAME = \"GraphManagerTopBar\";\nconst SIDEBAR_HOOK_NAME = \"GraphManagerSideBar\";\nconst CIRCULAR_MENU_HOOK = \"circularMenu\";\n\n/* Headerbar Buttons*/\nspinalContextMenuService.registerApp(\n   HEADER_HOOK_NAME,\n   new CreateContextButton(),\n   [3]\n );\n\nexport {\n  createEntity,\n  createAnalytic,\n  modifyAnalytic\n}","import { SpinalContextApp } from \"spinal-env-viewer-context-menu-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\n\nimport { CONTEXT_TYPE } from \"spinal-model-analysis\";\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\nclass CreateEntity extends SpinalContextApp {\n   constructor() {\n      super(\"Create Entity\",\n        \"Create Entity\", {\n          icon: 'dashboard_customize',\n          icon_type: 'in',\n          backgroundColor: '#356BAB',\n          fontColor: '#FFFFFF'\n        })\n    }\n  \n    isShown(option) {  \n      const id = option.selectedNode.id.get();\n      const isAnalyticContext = option.selectedNode.type.get() === CONTEXT_TYPE;\n      return Promise.resolve(isAnalyticContext ? true : -1);\n    }\n  \n    action(option) {\n      spinalPanelManagerService.openPanel(\"createEntityDialog\", option);\n    }\n}\n\nconst createEntity = new CreateEntity();\nspinalContextMenuService.registerApp(SIDEBAR, createEntity, [3]);\nexport default createEntity;","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ANALYTIC_STATUS = exports.algos = exports.isGChatOrganCardResult = exports.isGChatMessageResult = exports.isResultSuccess = exports.getAvailableData = exports.getChoiceRelationsWithDepth = exports.getValueModelFromEntry = exports.ATTRIBUTE_VALUE_SEPARATOR = exports.ATTRIBUTE_ALARM_PRIORITY = exports.ATTRIBUTE_TICKET_PROCESS_ID = exports.ATTRIBUTE_TICKET_CONTEXT_ID = exports.ATTRIBUTE_TRIGGER_AT_START = exports.ATTRIBUTE_ANALYTIC_DESCRIPTION = exports.ATTRIBUTE_ANALYTIC_STATUS = exports.ATTRIBUTE_RESULT_TYPE = exports.ATTRIBUTE_RESULT_NAME = exports.ATTRIBUTE_SEPARATOR = exports.ATTRIBUTE_SEARCH_RELATIONS = exports.ATTRIBUTE_STRICT_DEPTH = exports.ATTRIBUTE_SEARCH_DEPTH = exports.ATTRIBUTE_TIMESERIES = exports.ATTRIBUTE_FILTER_VALUE = exports.ATTRIBUTE_TRACKING_METHOD = exports.ATTRIBUTE_PHONE_MESSAGE = exports.ATTRIBUTE_PHONE_NUMBER = exports.ATTRIBUTE_GCHAT_SPACE = exports.ATTRIBUTE_GCHAT_MESSAGE = exports.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS = exports.CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING = exports.CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS = exports.CATEGORY_ATTRIBUTE_IO_DEPENDENCIES = exports.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS = exports.CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS = exports.CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS = exports.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS = exports.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS = exports.CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS = exports.ENTITY_TYPE = exports.CONTEXT_TYPE = exports.TRIGGER_TYPE = exports.TRACK_METHOD = exports.ANALYTIC_TYPE = exports.ANALYTIC_RESULT_TYPE = exports.ENTITY_TYPES = exports.TrackingMethodModel = exports.AnalyticModel = exports.spinalAnalyticService = exports.AnalyticService = void 0;\nconst AnalyticModel_1 = require(\"./models/AnalyticModel\");\nObject.defineProperty(exports, \"AnalyticModel\", { enumerable: true, get: function () { return AnalyticModel_1.AnalyticModel; } });\nconst TrackingMethodModel_1 = require(\"./models/TrackingMethodModel\");\nObject.defineProperty(exports, \"TrackingMethodModel\", { enumerable: true, get: function () { return TrackingMethodModel_1.TrackingMethodModel; } });\nconst IAnalyticResult_1 = require(\"./interfaces/IAnalyticResult\");\nObject.defineProperty(exports, \"isResultSuccess\", { enumerable: true, get: function () { return IAnalyticResult_1.isResultSuccess; } });\nObject.defineProperty(exports, \"isGChatMessageResult\", { enumerable: true, get: function () { return IAnalyticResult_1.isGChatMessageResult; } });\nObject.defineProperty(exports, \"isGChatOrganCardResult\", { enumerable: true, get: function () { return IAnalyticResult_1.isGChatOrganCardResult; } });\nconst constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"ANALYTIC_RESULT_TYPE\", { enumerable: true, get: function () { return constants_1.ANALYTIC_RESULT_TYPE; } });\nObject.defineProperty(exports, \"ANALYTIC_TYPE\", { enumerable: true, get: function () { return constants_1.ANALYTIC_TYPE; } });\nObject.defineProperty(exports, \"TRACK_METHOD\", { enumerable: true, get: function () { return constants_1.TRACK_METHOD; } });\nObject.defineProperty(exports, \"ENTITY_TYPES\", { enumerable: true, get: function () { return constants_1.ENTITY_TYPES; } });\nObject.defineProperty(exports, \"CONTEXT_TYPE\", { enumerable: true, get: function () { return constants_1.CONTEXT_TYPE; } });\nObject.defineProperty(exports, \"ENTITY_TYPE\", { enumerable: true, get: function () { return constants_1.ENTITY_TYPE; } });\nObject.defineProperty(exports, \"TRIGGER_TYPE\", { enumerable: true, get: function () { return constants_1.TRIGGER_TYPE; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_RESULT_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_IO_DEPENDENCIES\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_IO_DEPENDENCIES; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING; } });\nObject.defineProperty(exports, \"CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS\", { enumerable: true, get: function () { return constants_1.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS; } });\nObject.defineProperty(exports, \"ATTRIBUTE_GCHAT_SPACE\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_GCHAT_SPACE; } });\nObject.defineProperty(exports, \"ATTRIBUTE_GCHAT_MESSAGE\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_GCHAT_MESSAGE; } });\nObject.defineProperty(exports, \"ATTRIBUTE_PHONE_NUMBER\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_PHONE_NUMBER; } });\nObject.defineProperty(exports, \"ATTRIBUTE_PHONE_MESSAGE\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_PHONE_MESSAGE; } });\nObject.defineProperty(exports, \"ATTRIBUTE_TRACKING_METHOD\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_TRACKING_METHOD; } });\nObject.defineProperty(exports, \"ATTRIBUTE_FILTER_VALUE\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_FILTER_VALUE; } });\nObject.defineProperty(exports, \"ATTRIBUTE_TIMESERIES\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_TIMESERIES; } });\nObject.defineProperty(exports, \"ATTRIBUTE_SEARCH_DEPTH\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_SEARCH_DEPTH; } });\nObject.defineProperty(exports, \"ATTRIBUTE_STRICT_DEPTH\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_STRICT_DEPTH; } });\nObject.defineProperty(exports, \"ATTRIBUTE_SEARCH_RELATIONS\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_SEARCH_RELATIONS; } });\nObject.defineProperty(exports, \"ATTRIBUTE_SEPARATOR\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_SEPARATOR; } });\nObject.defineProperty(exports, \"ATTRIBUTE_VALUE_SEPARATOR\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_VALUE_SEPARATOR; } });\nObject.defineProperty(exports, \"ATTRIBUTE_RESULT_NAME\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_RESULT_NAME; } });\nObject.defineProperty(exports, \"ATTRIBUTE_RESULT_TYPE\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_RESULT_TYPE; } });\nObject.defineProperty(exports, \"ATTRIBUTE_ANALYTIC_STATUS\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_ANALYTIC_STATUS; } });\nObject.defineProperty(exports, \"ATTRIBUTE_ANALYTIC_DESCRIPTION\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_ANALYTIC_DESCRIPTION; } });\nObject.defineProperty(exports, \"ATTRIBUTE_TRIGGER_AT_START\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_TRIGGER_AT_START; } });\nObject.defineProperty(exports, \"ATTRIBUTE_TICKET_CONTEXT_ID\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_TICKET_CONTEXT_ID; } });\nObject.defineProperty(exports, \"ATTRIBUTE_TICKET_PROCESS_ID\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_TICKET_PROCESS_ID; } });\nObject.defineProperty(exports, \"ATTRIBUTE_ALARM_PRIORITY\", { enumerable: true, get: function () { return constants_1.ATTRIBUTE_ALARM_PRIORITY; } });\nObject.defineProperty(exports, \"ANALYTIC_STATUS\", { enumerable: true, get: function () { return constants_1.ANALYTIC_STATUS; } });\nconst algos = require(\"./algorithms/algorithms\");\nexports.algos = algos;\nconst AnalyticService_1 = require(\"./services/AnalyticService\");\nObject.defineProperty(exports, \"AnalyticService\", { enumerable: true, get: function () { return AnalyticService_1.AnalyticService; } });\nconst utils_1 = require(\"./services/utils\");\nObject.defineProperty(exports, \"getValueModelFromEntry\", { enumerable: true, get: function () { return utils_1.getValueModelFromEntry; } });\nObject.defineProperty(exports, \"getChoiceRelationsWithDepth\", { enumerable: true, get: function () { return utils_1.getChoiceRelationsWithDepth; } });\nObject.defineProperty(exports, \"getAvailableData\", { enumerable: true, get: function () { return utils_1.getAvailableData; } });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst globalRoot = typeof window === 'undefined' ? global : window;\nconst spinalAnalyticService = new AnalyticService_1.AnalyticService();\nexports.spinalAnalyticService = spinalAnalyticService;\nif (typeof globalRoot.spinal === 'undefined')\n    globalRoot.spinal = {};\nif (typeof globalRoot.spinal.spinalAnalyticService === 'undefined') {\n    globalRoot.spinal.spinalAnalyticService = spinalAnalyticService;\n}\nif (typeof globalRoot.spinal.spinalAnalyticService === 'undefined') {\n    globalRoot.spinal.spinalAnalyticService = spinalAnalyticService;\n}\nexports.default = spinalAnalyticService;\n//# sourceMappingURL=index.js.map","import { IAnalytic } from './interfaces/IAnalytic';\nimport { IEntity } from './interfaces/IEntity';\nimport { ITrackingMethod } from './interfaces/ITrackingMethod';\nimport { IConfig } from './interfaces/IConfig';\nimport { AnalyticModel } from './models/AnalyticModel';\nimport { TrackingMethodModel } from './models/TrackingMethodModel';\nimport { isResultSuccess,isGChatMessageResult,isGChatOrganCardResult } from './interfaces/IAnalyticResult';\nimport {\n  ANALYTIC_RESULT_TYPE,\n  ANALYTIC_TYPE,\n  TRACK_METHOD,\n  ENTITY_TYPES,\n  CONTEXT_TYPE,\n  ENTITY_TYPE,\n  TRIGGER_TYPE,\n  CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS,\n  CATEGORY_ATTRIBUTE_RESULT_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS,\n  CATEGORY_ATTRIBUTE_IO_DEPENDENCIES,\n  CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING,\n  CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS,\n  ATTRIBUTE_GCHAT_SPACE,\n  ATTRIBUTE_GCHAT_MESSAGE,\n  ATTRIBUTE_PHONE_NUMBER,\n  ATTRIBUTE_PHONE_MESSAGE,\n  ATTRIBUTE_TRACKING_METHOD,\n  ATTRIBUTE_FILTER_VALUE,\n  ATTRIBUTE_TIMESERIES,\n  ATTRIBUTE_SEARCH_DEPTH,\n  ATTRIBUTE_STRICT_DEPTH,\n  ATTRIBUTE_SEARCH_RELATIONS,\n  ATTRIBUTE_SEPARATOR,\n  ATTRIBUTE_VALUE_SEPARATOR,\n  ATTRIBUTE_RESULT_NAME,\n  ATTRIBUTE_RESULT_TYPE,\n  ATTRIBUTE_ANALYTIC_STATUS,\n  ATTRIBUTE_ANALYTIC_DESCRIPTION,\n  ATTRIBUTE_TRIGGER_AT_START,\n  ATTRIBUTE_TICKET_CONTEXT_ID,\n  ATTRIBUTE_TICKET_PROCESS_ID,\n  ATTRIBUTE_ALARM_PRIORITY,\n  ANALYTIC_STATUS,\n  \n} from './constants';\n\nimport * as algos from './algorithms/algorithms';\nimport { AnalyticService } from './services/AnalyticService';\nimport { getValueModelFromEntry , getChoiceRelationsWithDepth, getAvailableData } from './services/utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst globalRoot: any = typeof window === 'undefined' ? global : window;\n\nconst spinalAnalyticService = new AnalyticService();\n\nif (typeof globalRoot.spinal === 'undefined') globalRoot.spinal = {};\n\nif (typeof globalRoot.spinal.spinalAnalyticService === 'undefined') {\n  globalRoot.spinal.spinalAnalyticService = spinalAnalyticService;\n}\n\nif (typeof globalRoot.spinal.spinalAnalyticService === 'undefined') {\n  globalRoot.spinal.spinalAnalyticService = spinalAnalyticService;\n}\n\nexport {\n  AnalyticService,\n  spinalAnalyticService,\n  IAnalytic,\n  ITrackingMethod,\n  IEntity,\n  IConfig,\n  AnalyticModel,\n  TrackingMethodModel,\n  ENTITY_TYPES,\n  ANALYTIC_RESULT_TYPE,\n  ANALYTIC_TYPE,\n  TRACK_METHOD,\n  TRIGGER_TYPE,\n  CONTEXT_TYPE,\n  ENTITY_TYPE,\n  CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS,\n  CATEGORY_ATTRIBUTE_RESULT_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS,\n  CATEGORY_ATTRIBUTE_IO_DEPENDENCIES,\n  CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING,\n  CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS,\n  ATTRIBUTE_GCHAT_MESSAGE,\n  ATTRIBUTE_GCHAT_SPACE,\n  ATTRIBUTE_PHONE_NUMBER,\n  ATTRIBUTE_PHONE_MESSAGE,\n  ATTRIBUTE_TRACKING_METHOD,\n  ATTRIBUTE_FILTER_VALUE,\n  ATTRIBUTE_TIMESERIES,\n  ATTRIBUTE_SEARCH_DEPTH,\n  ATTRIBUTE_STRICT_DEPTH,\n  ATTRIBUTE_SEARCH_RELATIONS,\n  ATTRIBUTE_SEPARATOR,\n  ATTRIBUTE_RESULT_NAME,\n  ATTRIBUTE_RESULT_TYPE,\n  ATTRIBUTE_ANALYTIC_STATUS,\n  ATTRIBUTE_ANALYTIC_DESCRIPTION,\n  ATTRIBUTE_TRIGGER_AT_START,\n  ATTRIBUTE_TICKET_CONTEXT_ID,\n  ATTRIBUTE_TICKET_PROCESS_ID,\n  ATTRIBUTE_ALARM_PRIORITY,\n  ATTRIBUTE_VALUE_SEPARATOR,\n  getValueModelFromEntry,\n  getChoiceRelationsWithDepth,\n  getAvailableData,\n  isResultSuccess,\n  isGChatMessageResult,\n  isGChatOrganCardResult,\n  algos,\n  ANALYTIC_STATUS\n};\n\nexport default spinalAnalyticService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnalyticModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nclass AnalyticModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(analytic) {\n        super();\n        this.add_attr(analytic);\n    }\n}\nexports.AnalyticModel = AnalyticModel;\nspinal_core_connectorjs_type_1.spinalCore.register_models(AnalyticModel);\nexports.default = AnalyticModel;\n//# sourceMappingURL=AnalyticModel.js.map","import { spinalCore, Model } from \"spinal-core-connectorjs_type\";\nimport { IAnalytic } from \"../interfaces/IAnalytic\";\n\nclass AnalyticModel extends Model {\n   constructor(analytic: IAnalytic) {\n      super();\n      this.add_attr(analytic);\n\n   }\n}\n\n\n\nspinalCore.register_models(AnalyticModel);\nexport default AnalyticModel;\nexport {\n   AnalyticModel\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrackingMethodModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nclass TrackingMethodModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(trackingMethod) {\n        super();\n        this.add_attr(trackingMethod);\n    }\n}\nexports.TrackingMethodModel = TrackingMethodModel;\nspinal_core_connectorjs_type_1.spinalCore.register_models(TrackingMethodModel);\nexports.default = TrackingMethodModel;\n//# sourceMappingURL=TrackingMethodModel.js.map","import { spinalCore, Model } from \"spinal-core-connectorjs_type\";\nimport { ITrackingMethod } from \"../interfaces/ITrackingMethod\";\n\n\n\nclass TrackingMethodModel extends Model {\n   constructor(trackingMethod: any) {\n      super();\n      this.add_attr(trackingMethod);\n   }\n}\n\n\n\nspinalCore.register_models(TrackingMethodModel);\nexport default TrackingMethodModel;\nexport {\n   TrackingMethodModel\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isGChatOrganCardResult = exports.isGChatMessageResult = exports.isResultSuccess = void 0;\nconst constants_1 = require(\"../constants\");\nfunction isResultSuccess(result) {\n    return result.success = true;\n}\nexports.isResultSuccess = isResultSuccess;\nfunction isGChatMessageResult(result) {\n    return result.resultType === constants_1.ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE;\n}\nexports.isGChatMessageResult = isGChatMessageResult;\nfunction isGChatOrganCardResult(result) {\n    return result.resultType === constants_1.ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD;\n}\nexports.isGChatOrganCardResult = isGChatOrganCardResult;\n//# sourceMappingURL=IAnalyticResult.js.map","import { ANALYTIC_RESULT_TYPE } from \"../constants\";\n\nexport function isResultSuccess(result: IResult) : result is IResultSuccess {\n    return result.success=true;\n}\n\nexport function isGChatMessageResult(result: IResultSuccess) :  result is IGChatMessageResult {\n    return result.resultType === ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE;\n}\n\nexport function isGChatOrganCardResult(result: IResultSuccess) :  result is IGChatOrganCardResult {\n    return result.resultType === ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD\n}\n\n\n\n\nexport interface IResultResponse{\n    success : boolean;\n    error : string;\n}\n\nexport interface IResultSuccess extends IResultResponse{\n    success : true;\n    resultType: ANALYTIC_RESULT_TYPE;\n}\n\nexport interface IGChatMessageResult extends IResultSuccess {\n    resultType: ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE;\n    spaceName:string;\n    message : string;\n}\n\nexport interface IGChatCardResult extends IResultSuccess {\n    spaceName: string;\n    card: IGChatCard\n}\n\n\nexport interface IGChatOrganCardResult extends IGChatCardResult {\n    resultType: ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD;\n}\n\nexport type IResult = IResultResponse| IResultSuccess | IGChatMessageResult | IGChatCardResult;\n\n\nexport interface IGChatCard {\n    header: IGChatCardHeader;\n    sections: IGChatCardSection[];\n}\n\ninterface IGChatCardHeader {\n    title: string;\n    subtitle: string;\n}\n\ninterface IGChatCardSection {\n    header: string;\n    widgets: IGChatCardWidget[];\n}\n\ninterface IGChatCardWidget {\n    keyValue: IGChatCardKeyValue;\n}\n\ninterface IGChatCardKeyValue {\n    topLabel: string;\n    content: string;\n}","\"use strict\";\n/*\n * Copyright 2022 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ANALYTIC_RESULT_TYPE = exports.ENDPOINT_NODE_TYPE = exports.CONTROL_ENDPOINT_RELATIONS = exports.ENDPOINT_RELATIONS = exports.ATTRIBUTE_TRIGGER_AT_START = exports.ATTRIBUTE_ANALYTIC_DESCRIPTION = exports.ATTRIBUTE_ANALYTIC_STATUS = exports.ATTRIBUTE_ALARM_PRIORITY = exports.ATTRIBUTE_TICKET_PROCESS_ID = exports.ATTRIBUTE_TICKET_CONTEXT_ID = exports.ATTRIBUTE_GCHAT_MESSAGE = exports.ATTRIBUTE_GCHAT_SPACE = exports.ATTRIBUTE_PHONE_MESSAGE = exports.ATTRIBUTE_PHONE_NUMBER = exports.ATTRIBUTE_RESULT_NAME = exports.ATTRIBUTE_RESULT_TYPE = exports.ATTRIBUTE_SEARCH_RELATIONS = exports.ATTRIBUTE_STRICT_DEPTH = exports.ATTRIBUTE_SEARCH_DEPTH = exports.ATTRIBUTE_TIMESERIES = exports.ATTRIBUTE_FILTER_VALUE = exports.ATTRIBUTE_TRACKING_METHOD = exports.ATTRIBUTE_VALUE_SEPARATOR = exports.ATTRIBUTE_SEPARATOR = exports.CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING = exports.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS = exports.CATEGORY_ATTRIBUTE_IO_DEPENDENCIES = exports.CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS = exports.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS = exports.CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS = exports.CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS = exports.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS = exports.CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS = exports.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS = exports.TARGET_NODE_TYPES = exports.GROUP_RELATION_PREFIX = exports.ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION = exports.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION = exports.ANALYTIC_TO_CONFIG_RELATION = exports.ANALYTIC_TO_OUTPUTS_RELATION = exports.ANALYTIC_TO_INPUTS_RELATION = exports.ENTITY_TO_ANALYTIC_RELATION = exports.CONTEXT_TO_ENTITY_RELATION = exports.CONFIG_TYPE = exports.OUTPUTS_TYPE = exports.INPUTS_TYPE = exports.TRACKING_METHOD_TYPE = exports.ANALYTIC_TYPE = exports.ENTITY_TYPE = exports.CONTEXT_TYPE = void 0;\nexports.ENTITY_TYPES = exports.ANALYTIC_STATUS = exports.TRIGGER_TYPE = exports.TRACK_METHOD = void 0;\nexports.CONTEXT_TYPE = \"analysisContext\";\nexports.ENTITY_TYPE = \"entity\";\nexports.ANALYTIC_TYPE = \"analytic\";\nexports.TRACKING_METHOD_TYPE = \"trackingMethod\";\nexports.INPUTS_TYPE = \"analyticInputs\";\nexports.OUTPUTS_TYPE = \"analyticOutputs\";\nexports.CONFIG_TYPE = \"analyticConfig\";\nexports.CONTEXT_TO_ENTITY_RELATION = \"hasEntity\";\nexports.ENTITY_TO_ANALYTIC_RELATION = \"hasAnalytics\";\nexports.ANALYTIC_TO_INPUTS_RELATION = \"hasInputs\";\nexports.ANALYTIC_TO_OUTPUTS_RELATION = \"hasOutputs\";\nexports.ANALYTIC_TO_CONFIG_RELATION = \"hasConfig\";\nexports.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION = \"hasEntity\";\nexports.ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION = \"hasTrackingMethod\";\nexports.GROUP_RELATION_PREFIX = \"groupHas\";\nexports.TARGET_NODE_TYPES = Object.freeze({\n    \"Building\": \"geographicBuilding\",\n    \"Floor\": \"geographicFloor\",\n    \"Room\": \"geographicRoom\",\n    \"Equipment\": \"BIMObject\",\n    \"Floor Group\": \"geographicFloorGroup\",\n    \"Room Group\": \"geographicRoomGroup\",\n    \"Equipment Group\": \"BIMObjectGroup\",\n    \"Other\": undefined\n});\n// *** Categories ***\nexports.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS = \"Algorithm parameters\";\nexports.CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS = \"Ticket localization parameters\";\nexports.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS = \"Result parameters\";\nexports.CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS = \"Tracking parameters\";\nexports.CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS = \"Twilio parameters\";\nexports.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS = \"Google chat parameters\";\nexports.CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS = \"Trigger parameters\";\nexports.CATEGORY_ATTRIBUTE_IO_DEPENDENCIES = \"IO dependencies\";\nexports.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS = \"Analytic parameters\";\nexports.CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING = \"Algorithm index mapping\";\nexports.ATTRIBUTE_SEPARATOR = \"_\";\nexports.ATTRIBUTE_VALUE_SEPARATOR = \",\";\nexports.ATTRIBUTE_TRACKING_METHOD = \"Tracking method\";\nexports.ATTRIBUTE_FILTER_VALUE = \"Filter value\";\nexports.ATTRIBUTE_TIMESERIES = \"Timeseries intervalTime\";\nexports.ATTRIBUTE_SEARCH_DEPTH = \"Search depth\";\nexports.ATTRIBUTE_STRICT_DEPTH = \"Strict depth\";\nexports.ATTRIBUTE_SEARCH_RELATIONS = \"Search relations\";\nexports.ATTRIBUTE_RESULT_TYPE = \"Result type\";\nexports.ATTRIBUTE_RESULT_NAME = \"Result name\";\nexports.ATTRIBUTE_PHONE_NUMBER = \"Phone number\";\nexports.ATTRIBUTE_PHONE_MESSAGE = \"Phone message\";\nexports.ATTRIBUTE_GCHAT_SPACE = \"Google chat space name/id\";\nexports.ATTRIBUTE_GCHAT_MESSAGE = \"Google chat message\";\nexports.ATTRIBUTE_TICKET_CONTEXT_ID = \"Ticket context id\";\nexports.ATTRIBUTE_TICKET_PROCESS_ID = \"Ticket category id\";\nexports.ATTRIBUTE_ALARM_PRIORITY = \"Alarm priority\";\nexports.ATTRIBUTE_ANALYTIC_STATUS = \"Status\";\nexports.ATTRIBUTE_ANALYTIC_DESCRIPTION = \"Description\";\nexports.ATTRIBUTE_TRIGGER_AT_START = \"Trigger at start\";\nexports.ENDPOINT_RELATIONS = ['hasBmsEndpoint', 'hasBmsDevice', 'hasBmsEndpointGroup', 'hasEndPoint'];\nexports.CONTROL_ENDPOINT_RELATIONS = ['hasControlPoints', 'hasBmsEndpoint'];\nexports.ENDPOINT_NODE_TYPE = 'BmsEndpoint';\n/**\n * The different types of results that an analytic can lead to.\n *\n * If you add a new type, you must also add it to the ANALYTIC_RESULT_TYPE enum in the spinal-model-analysis/src/constants.ts file\n *\n * A ticket result type will lead to a ticket being created (with the resultName as the title of the ticket or occurence  of already existing ticket incremented by 1)\n * This type of result works well with Change Of Value triggers since we usually want event based tickets\n *\n * A controlEndpoint result type will lead to a controlEndpoint being updated\n * (with the resultName as the name of the controlEndpoint and it has to be linked to the followed entity)\n *\n *\n */\nvar ANALYTIC_RESULT_TYPE;\n(function (ANALYTIC_RESULT_TYPE) {\n    ANALYTIC_RESULT_TYPE[\"TICKET\"] = \"ticket\";\n    ANALYTIC_RESULT_TYPE[\"CONTROL_ENDPOINT\"] = \"controlEndpoint\";\n    ANALYTIC_RESULT_TYPE[\"ENDPOINT\"] = \"endpoint\";\n    ANALYTIC_RESULT_TYPE[\"ALARM\"] = \"alarm\";\n    ANALYTIC_RESULT_TYPE[\"SMS\"] = \"sms\";\n    ANALYTIC_RESULT_TYPE[\"LOG\"] = \"log\";\n    ANALYTIC_RESULT_TYPE[\"GCHAT_MESSAGE\"] = \"gChatMessage\";\n    ANALYTIC_RESULT_TYPE[\"GCHAT_ORGAN_CARD\"] = \"gChatOrganCard\";\n    ANALYTIC_RESULT_TYPE[\"GCHAT_PLATFORM_CARD\"] = \"gChatPlatformCard\";\n})(ANALYTIC_RESULT_TYPE = exports.ANALYTIC_RESULT_TYPE || (exports.ANALYTIC_RESULT_TYPE = {}));\nvar TRACK_METHOD;\n(function (TRACK_METHOD) {\n    TRACK_METHOD[\"ENDPOINT_NAME_FILTER\"] = \"endpointFilter\";\n    TRACK_METHOD[\"CONTROL_ENDPOINT_NAME_FILTER\"] = \"controlEndpointFilter\";\n    TRACK_METHOD[\"ATTRIBUTE_NAME_FILTER\"] = \"attributeFilter\";\n})(TRACK_METHOD = exports.TRACK_METHOD || (exports.TRACK_METHOD = {}));\nvar TRIGGER_TYPE;\n(function (TRIGGER_TYPE) {\n    TRIGGER_TYPE[\"CHANGE_OF_VALUE\"] = \"changeOfValue\";\n    TRIGGER_TYPE[\"CHANGE_OF_VALUE_WITH_THRESHOLD\"] = \"changeOfValueWithThreshold\";\n    TRIGGER_TYPE[\"INTERVAL_TIME\"] = \"intervalTime\";\n    TRIGGER_TYPE[\"CRON\"] = \"cron\";\n})(TRIGGER_TYPE = exports.TRIGGER_TYPE || (exports.TRIGGER_TYPE = {}));\nvar ANALYTIC_STATUS;\n(function (ANALYTIC_STATUS) {\n    ANALYTIC_STATUS[\"ACTIVE\"] = \"Active\";\n    ANALYTIC_STATUS[\"INACTIVE\"] = \"Inactive\";\n})(ANALYTIC_STATUS = exports.ANALYTIC_STATUS || (exports.ANALYTIC_STATUS = {}));\nvar ENTITY_TYPES;\n(function (ENTITY_TYPES) {\n    ENTITY_TYPES[\"BUILDING\"] = \"geographicBuilding\";\n    ENTITY_TYPES[\"FLOOR\"] = \"geographicFloor\";\n    ENTITY_TYPES[\"ROOM\"] = \"geographicRoom\";\n    ENTITY_TYPES[\"EQUIPMENT\"] = \"BIMObject\";\n    ENTITY_TYPES[\"FLOOR_GROUP\"] = \"geographicFloorGroup\";\n    ENTITY_TYPES[\"ROOM_GROUP\"] = \"geographicRoomGroup\";\n    ENTITY_TYPES[\"EQUIPMENT_GROUP\"] = \"BIMObjectGroup\";\n    ENTITY_TYPES[\"ORGAN\"] = \"MonitoringServiceOrgan\";\n    ENTITY_TYPES[\"OTHER\"] = \"other\";\n})(ENTITY_TYPES = exports.ENTITY_TYPES || (exports.ENTITY_TYPES = {}));\n//# sourceMappingURL=constants.js.map","/*\n * Copyright 2022 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport const CONTEXT_TYPE = \"analysisContext\";\nexport const ENTITY_TYPE = \"entity\";\nexport const ANALYTIC_TYPE = \"analytic\";\nexport const TRACKING_METHOD_TYPE = \"trackingMethod\";\nexport const INPUTS_TYPE = \"analyticInputs\";\nexport const OUTPUTS_TYPE = \"analyticOutputs\";\nexport const CONFIG_TYPE = \"analyticConfig\";\n\n\nexport const CONTEXT_TO_ENTITY_RELATION = \"hasEntity\";\nexport const ENTITY_TO_ANALYTIC_RELATION = \"hasAnalytics\";\n\nexport const ANALYTIC_TO_INPUTS_RELATION = \"hasInputs\";\nexport const ANALYTIC_TO_OUTPUTS_RELATION = \"hasOutputs\";\nexport const ANALYTIC_TO_CONFIG_RELATION = \"hasConfig\";\n\n\nexport const ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION = \"hasEntity\";\nexport const ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION= \"hasTrackingMethod\";\n\n\n\nexport const GROUP_RELATION_PREFIX = \"groupHas\";\n\nexport const TARGET_NODE_TYPES = Object.freeze({\n    \"Building\": \"geographicBuilding\",\n    \"Floor\": \"geographicFloor\",\n    \"Room\": \"geographicRoom\",\n    \"Equipment\": \"BIMObject\",\n    \"Floor Group\": \"geographicFloorGroup\",\n    \"Room Group\": \"geographicRoomGroup\",\n    \"Equipment Group\": \"BIMObjectGroup\",\n    \"Other\": undefined\n});\n\n\n// *** Categories ***\nexport const CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS = \"Algorithm parameters\";\nexport const CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS = \"Ticket localization parameters\";\nexport const CATEGORY_ATTRIBUTE_RESULT_PARAMETERS = \"Result parameters\";\nexport const CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS = \"Tracking parameters\";\nexport const CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS = \"Twilio parameters\";\nexport const CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS = \"Google chat parameters\"\nexport const CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS = \"Trigger parameters\";  \nexport const CATEGORY_ATTRIBUTE_IO_DEPENDENCIES = \"IO dependencies\";\nexport const CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS = \"Analytic parameters\";\nexport const CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING = \"Algorithm index mapping\";\n\n\nexport const ATTRIBUTE_SEPARATOR=\"_\"\nexport const ATTRIBUTE_VALUE_SEPARATOR=\",\"\n\nexport const ATTRIBUTE_TRACKING_METHOD= \"Tracking method\"\nexport const ATTRIBUTE_FILTER_VALUE = \"Filter value\";\nexport const ATTRIBUTE_TIMESERIES= \"Timeseries intervalTime\"\nexport const ATTRIBUTE_SEARCH_DEPTH = \"Search depth\";\nexport const ATTRIBUTE_STRICT_DEPTH = \"Strict depth\";\nexport const ATTRIBUTE_SEARCH_RELATIONS = \"Search relations\";\n\n\n\nexport const ATTRIBUTE_RESULT_TYPE = \"Result type\";\nexport const ATTRIBUTE_RESULT_NAME = \"Result name\";\nexport const ATTRIBUTE_PHONE_NUMBER = \"Phone number\";\nexport const ATTRIBUTE_PHONE_MESSAGE = \"Phone message\";\nexport const ATTRIBUTE_GCHAT_SPACE = \"Google chat space name/id\";\nexport const ATTRIBUTE_GCHAT_MESSAGE = \"Google chat message\";\nexport const ATTRIBUTE_TICKET_CONTEXT_ID = \"Ticket context id\";\nexport const ATTRIBUTE_TICKET_PROCESS_ID = \"Ticket category id\";\nexport const ATTRIBUTE_ALARM_PRIORITY = \"Alarm priority\";\n\nexport const ATTRIBUTE_ANALYTIC_STATUS = \"Status\";\nexport const ATTRIBUTE_ANALYTIC_DESCRIPTION = \"Description\";\nexport const ATTRIBUTE_TRIGGER_AT_START = \"Trigger at start\";\n\n\nexport const ENDPOINT_RELATIONS = ['hasBmsEndpoint','hasBmsDevice','hasBmsEndpointGroup','hasEndPoint']\nexport const CONTROL_ENDPOINT_RELATIONS = ['hasControlPoints','hasBmsEndpoint']\nexport const ENDPOINT_NODE_TYPE = 'BmsEndpoint'\n\n\n\n/**\n * The different types of results that an analytic can lead to.\n * \n * If you add a new type, you must also add it to the ANALYTIC_RESULT_TYPE enum in the spinal-model-analysis/src/constants.ts file\n * \n * A ticket result type will lead to a ticket being created (with the resultName as the title of the ticket or occurence  of already existing ticket incremented by 1)\n * This type of result works well with Change Of Value triggers since we usually want event based tickets \n * \n * A controlEndpoint result type will lead to a controlEndpoint being updated \n * (with the resultName as the name of the controlEndpoint and it has to be linked to the followed entity)\n * \n * \n */\nexport enum ANALYTIC_RESULT_TYPE {\n    TICKET = \"ticket\",\n    CONTROL_ENDPOINT = \"controlEndpoint\",\n    ENDPOINT=\"endpoint\",\n    ALARM = \"alarm\",\n    SMS = \"sms\",\n    LOG = \"log\",\n    GCHAT_MESSAGE=\"gChatMessage\",\n    GCHAT_ORGAN_CARD=\"gChatOrganCard\",\n    GCHAT_PLATFORM_CARD=\"gChatPlatformCard\",\n\n\n}\n\nexport enum TRACK_METHOD {\n    ENDPOINT_NAME_FILTER = \"endpointFilter\",\n    CONTROL_ENDPOINT_NAME_FILTER = \"controlEndpointFilter\",\n    ATTRIBUTE_NAME_FILTER = \"attributeFilter\",\n}\n\nexport enum TRIGGER_TYPE {\n    CHANGE_OF_VALUE = \"changeOfValue\",\n    CHANGE_OF_VALUE_WITH_THRESHOLD = \"changeOfValueWithThreshold\",\n    INTERVAL_TIME = \"intervalTime\",\n    CRON = \"cron\"\n}\n\nexport enum ANALYTIC_STATUS {\n    ACTIVE = \"Active\",\n    INACTIVE = \"Inactive\"\n}\n\nexport enum ENTITY_TYPES {\n    BUILDING = \"geographicBuilding\",\n    FLOOR = \"geographicFloor\",\n    ROOM = \"geographicRoom\",\n    EQUIPMENT = \"BIMObject\",\n    FLOOR_GROUP = \"geographicFloorGroup\",\n    ROOM_GROUP = \"geographicRoomGroup\",\n    EQUIPMENT_GROUP = \"BIMObjectGroup\",\n    ORGAN= \"MonitoringServiceOrgan\",\n    OTHER = \"other\"\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SUBTRACT_BY = exports.SUBTRACT = exports.CURRENT_EPOCH_TIME = exports.CONV_NUMBER_TO_BOOLEAN = exports.CONV_BOOLEAN_TO_NUMBER = exports.IS_EMPTY = exports.EQUAL_TO = exports.STANDARD_DEVIATION = exports.INTEGRAL_BOOLEAN = exports.DIFFERENCE_THRESHOLD = exports.NOT = exports.OR = exports.AND = exports.AVERAGE = exports.THRESHOLD_BETWEEN_OUT = exports.THRESHOLD_BETWEEN_IN = exports.THRESHOLD_BELOW = exports.THRESHOLD_ABOVE = exports.DIVIDE_BY = exports.DIVIDE = exports.COPY = exports.PUTVALUE = void 0;\nclass Algorithm {\n    constructor(name, description, inputTypes, outputType, requiredParams, run) {\n        this.name = name;\n        this.inputTypes = inputTypes;\n        this.outputType = outputType;\n        this.description = description;\n        this.requiredParams = requiredParams;\n        this.run = run;\n    }\n}\nexports.PUTVALUE = new Algorithm('PUTVALUE', 'This algorithm returns the value set by the user (p1) regardless of the input', ['number'], 'number', [{ name: 'p1', type: 'number', description: 'the value to inject' }], (input, params) => {\n    return params['p1'];\n});\nexports.COPY = new Algorithm('COPY', 'This algorithm returns the value of first input', ['number'], 'number', [], (input, params) => {\n    return input[0];\n});\nexports.DIVIDE = new Algorithm('DIVIDE', 'This algorithm returns the result of the division of the first input by the second input', ['number'], 'number', [], (input, params) => {\n    return input[0] / input[1];\n});\nexports.DIVIDE_BY = new Algorithm('DIVIDE_BY', 'This algorithm returns the result of the division of the first input by the value set by the user (p1)', ['number'], 'number', [{ name: 'p1', type: 'number', description: 'the value to divide by' }], (input, params) => {\n    return input[0] / params['p1'];\n});\nexports.THRESHOLD_ABOVE = new Algorithm('THRESHOLD_ABOVE', 'This algorithm returns true if the input is above the threshold set by the user', ['number'], 'boolean', [{ name: 'p1', type: 'number', description: 'the threshold value' }], (input, params) => {\n    const treshold = params['p1'];\n    for (const n of input) {\n        if (n > treshold)\n            return true;\n    }\n    return false;\n});\nexports.THRESHOLD_BELOW = new Algorithm('THRESHOLD_BELOW', 'This algorithm returns true if the input is below the threshold set by the user', ['number'], 'boolean', [{ name: 'p1', type: 'number', description: 'the threshold value' }], (input, params) => {\n    const treshold = params['p1'];\n    for (const n of input) {\n        if (n < treshold)\n            return true;\n    }\n    return false;\n});\nexports.THRESHOLD_BETWEEN_IN = new Algorithm('THRESHOLD_BETWEEN_IN', 'This algorithm returns true if the input is between the two thresholds set by the user', ['number'], 'boolean', [\n    { name: 'p1', type: 'number', description: 'the first threshold value' },\n    { name: 'p2', type: 'number', description: 'the second threshold value' },\n], (input, params) => {\n    const p1 = params['p1'];\n    const p2 = params['p2'];\n    const min = Math.min(p1, p2);\n    const max = Math.max(p1, p2);\n    for (const n of input) {\n        if (n >= min && n <= max)\n            return true;\n    }\n    return false;\n});\nexports.THRESHOLD_BETWEEN_OUT = new Algorithm('THRESHOLD_BETWEEN_OUT', 'This algorithm returns true if the input is outside the two thresholds set by the user', ['number'], 'boolean', [\n    { name: 'p1', type: 'number', description: 'the first threshold value' },\n    { name: 'p2', type: 'number', description: 'the second threshold value' },\n], (input, params) => {\n    const p1 = params['p1'];\n    const p2 = params['p2'];\n    const min = Math.min(p1, p2);\n    const max = Math.max(p1, p2);\n    for (const n of input) {\n        if (n <= min || n >= max)\n            return true;\n    }\n    return false;\n});\nexports.AVERAGE = new Algorithm('AVERAGE', 'This algorithm returns the average of the inputs', ['number'], 'number', [], (input, params) => {\n    const flattenedArray = input.reduce((acc, curr) => acc.concat(...curr), []);\n    return (flattenedArray.reduce((acc, current) => acc + current, 0) / input.length);\n});\nexports.AND = new Algorithm('AND', 'This algorithm returns true if all the inputs are true', ['boolean'], 'boolean', [], (input, params) => {\n    return !input.includes(false);\n});\nexports.OR = new Algorithm('OR', 'This algorithm returns true if at least one of the inputs is true', ['boolean'], 'boolean', [], (input, params) => {\n    return input.includes(true);\n});\nexports.NOT = new Algorithm('NOT', 'This algorithm returns true if all the inputs are false', ['boolean'], 'boolean', [], (input, params) => {\n    return !input.includes(true);\n});\nexports.DIFFERENCE_THRESHOLD = new Algorithm('DIFFERENCE_THRESHOLD', 'This algorithm returns true if the difference between the first and any other input is above the threshold set by the user', ['number'], 'boolean', [{ name: 'p1', type: 'number', description: 'the threshold value' }], (input, params) => {\n    const treshold = params['p1'];\n    const first = input[0];\n    for (const n of input) {\n        if (Math.abs(n - first) > treshold)\n            return true;\n    }\n    return false;\n});\nexports.INTEGRAL_BOOLEAN = new Algorithm('INTEGRAL_BOOLEAN', 'This algorithm calculates the integral of timeseries.', ['object'], 'number', [\n    {\n        name: 'p1',\n        type: 'number',\n        description: 'intervalTime, please copy paste the timeseries interval time',\n    },\n    {\n        name: 'p2',\n        type: 'string',\n        description: 'Ratio || Percentage   (write one of the two, Ratio will be used by default)',\n    },\n], (input, params) => {\n    const percentageResult = params['p2'] === 'Percentage';\n    const dataInput = input.reduce((acc, curr) => acc.concat(...curr), []);\n    const invertBool = (bool) => (bool ? 0 : 1);\n    dataInput.unshift({\n        date: dataInput[dataInput.length - 1].date - params['p1'],\n        value: invertBool(dataInput[0].value),\n    });\n    // Ensure input is sorted by time\n    dataInput.sort((a, b) => a.date - b.date);\n    let integral = 0;\n    for (let i = 1; i < dataInput.length; i++) {\n        // Calculate the difference in time\n        const deltaTime = dataInput[i].date - dataInput[i - 1].date;\n        // Calculate the average value between two points\n        const avgValue = (dataInput[i].value + dataInput[i - 1].value) / 2;\n        // Add the area of the trapezoid to the total integral\n        integral += avgValue * deltaTime;\n    }\n    if (!percentageResult)\n        return (integral / (dataInput[dataInput.length - 1].date - dataInput[0].date));\n    else\n        return ((integral /\n            (dataInput[dataInput.length - 1].date - dataInput[0].date)) *\n            100);\n});\nexports.STANDARD_DEVIATION = new Algorithm('STANDARD_DEVIATION', 'This algorithm returns the standard deviation of the inputs', ['number'], 'number', [], (input, params) => {\n    const n = input.length;\n    const mean = input.reduce((a, b) => a + b) / n;\n    return Math.sqrt(input.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n);\n});\nexports.EQUAL_TO = new Algorithm('EQUAL_TO', 'This algorithm returns true if the first input is equal to the parameter', ['number', 'string'], 'boolean', [{ name: 'p1', type: 'number', description: 'the value to compare to' }], (input, params) => {\n    return input[0] === params['p1'];\n});\nexports.IS_EMPTY = new Algorithm('IS_EMPTY', 'This algorithm returns true if the input is an empty list', ['number', 'string'], 'boolean', [], (input, params) => {\n    const flattenedArray = input.reduce((acc, curr) => acc.concat(...curr), []);\n    return flattenedArray.length === 0;\n});\nexports.CONV_BOOLEAN_TO_NUMBER = new Algorithm('CONV_BOOLEAN_TO_NUMBER', 'This algorithm converts a boolean to a number', ['boolean'], 'number', [], (input, params) => {\n    return input[0] ? 1 : 0;\n});\nexports.CONV_NUMBER_TO_BOOLEAN = new Algorithm('CONV_NUMBER_TO_BOOLEAN', 'This algorithm converts a number to a boolean (0 is false, everything else is true)', ['number'], 'boolean', [], (input, params) => {\n    const flattenedArray = input.reduce((acc, curr) => acc.concat(...curr), []);\n    return flattenedArray[0] !== 0;\n});\nexports.CURRENT_EPOCH_TIME = new Algorithm('CURRENT_EPOCH_TIME', 'This algorithm returns the current epoch time', [], 'number', [], (input, params) => {\n    return Date.now();\n});\nexports.SUBTRACT = new Algorithm('SUBTRACT', 'This algorithm returns the result of the subtraction of the first input by the second input', ['number'], 'number', [], (input, params) => {\n    return input[0] - input[1];\n});\nexports.SUBTRACT_BY = new Algorithm('SUBTRACT_BY', 'This algorithm returns the result of the subtraction of the first input by the value set by the user (p1)', ['number'], 'number', [{ name: 'p1', type: 'number', description: 'the value to subtract by' }], (input, params) => {\n    return input[0] - params['p1'];\n});\n//# sourceMappingURL=algorithms.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IAlgorithm } from '../interfaces/IAlgorithm';\nimport { IRequiredParameter } from '../interfaces/IRequiredParameter';\n\nclass Algorithm implements IAlgorithm {\n  name: string;\n  inputTypes: string[];\n  outputType: string;\n  description: string;\n  requiredParams: IRequiredParameter[] | 'boolean' | 'number' | 'string';\n  run: (input: any | any[], params?: any) => any;\n\n  constructor(\n    name: string,\n    description: string,\n    inputTypes: string[],\n    outputType: string,\n    requiredParams: IRequiredParameter[] | 'boolean' | 'number' | 'string',\n    run: (input: any | any[], params?: any) => any\n  ) {\n    this.name = name;\n    this.inputTypes = inputTypes;\n    this.outputType = outputType;\n    this.description = description;\n    this.requiredParams = requiredParams;\n    this.run = run;\n  }\n}\n\nexport const PUTVALUE = new Algorithm(\n  'PUTVALUE',\n  'This algorithm returns the value set by the user (p1) regardless of the input',\n  ['number'],\n  'number',\n  [{ name: 'p1', type: 'number', description: 'the value to inject' }],\n  (input: number, params: any): number => {\n    return params['p1'];\n  }\n);\n\nexport const COPY = new Algorithm(\n  'COPY',\n  'This algorithm returns the value of first input',\n  ['number'],\n  'number',\n  [],\n  (input: number[], params: any): number => {\n    return input[0];\n  }\n\n);\n\nexport const DIVIDE = new Algorithm(\n  'DIVIDE',\n  'This algorithm returns the result of the division of the first input by the second input',\n  ['number'],\n  'number',\n  [],\n  (input: number[], params: any): number => {\n    return input[0] / input[1];\n  }\n);\n\nexport const DIVIDE_BY = new Algorithm(\n  'DIVIDE_BY',\n  'This algorithm returns the result of the division of the first input by the value set by the user (p1)',\n  ['number'],\n  'number',\n  [{ name: 'p1', type: 'number', description: 'the value to divide by' }],\n  (input: number[], params: any): number => {\n    return input[0] / params['p1'];\n  }\n);\n\nexport const THRESHOLD_ABOVE = new Algorithm(\n  'THRESHOLD_ABOVE',\n  'This algorithm returns true if the input is above the threshold set by the user',\n  ['number'],\n  'boolean',\n  [{ name: 'p1', type: 'number', description: 'the threshold value' }],\n  (input: number[], params: any): boolean => {\n    const treshold = params['p1'];\n    for (const n of input) {\n      if (n > treshold) return true;\n    }\n    return false;\n  }\n);\n\nexport const THRESHOLD_BELOW = new Algorithm(\n  'THRESHOLD_BELOW',\n  'This algorithm returns true if the input is below the threshold set by the user',\n  ['number'],\n  'boolean',\n  [{ name: 'p1', type: 'number', description: 'the threshold value' }],\n  (input: number[], params: any): boolean => {\n    const treshold = params['p1'];\n    for (const n of input) {\n      if (n < treshold) return true;\n    }\n    return false;\n  }\n);\n\nexport const THRESHOLD_BETWEEN_IN = new Algorithm(\n  'THRESHOLD_BETWEEN_IN',\n  'This algorithm returns true if the input is between the two thresholds set by the user',\n  ['number'],\n  'boolean',\n  [\n    { name: 'p1', type: 'number', description: 'the first threshold value' },\n    { name: 'p2', type: 'number', description: 'the second threshold value' },\n  ],\n  (input: number[], params: any): boolean => {\n    const p1 = params['p1'];\n    const p2 = params['p2'];\n    const min = Math.min(p1, p2);\n    const max = Math.max(p1, p2);\n    for (const n of input) {\n      if (n >= min && n <= max) return true;\n    }\n    return false;\n  }\n);\n\nexport const THRESHOLD_BETWEEN_OUT = new Algorithm(\n  'THRESHOLD_BETWEEN_OUT',\n  'This algorithm returns true if the input is outside the two thresholds set by the user',\n  ['number'],\n  'boolean',\n  [\n    { name: 'p1', type: 'number', description: 'the first threshold value' },\n    { name: 'p2', type: 'number', description: 'the second threshold value' },\n  ],\n  (input: number[], params: any): boolean => {\n    const p1 = params['p1'];\n    const p2 = params['p2'];\n    const min = Math.min(p1, p2);\n    const max = Math.max(p1, p2);\n    for (const n of input) {\n      if (n <= min || n >= max) return true;\n    }\n    return false;\n  }\n);\n\nexport const AVERAGE = new Algorithm(\n  'AVERAGE',\n  'This algorithm returns the average of the inputs',\n  ['number'],\n  'number',\n  [],\n  (input: [number[]], params: any): number => {\n    const flattenedArray = input.reduce((acc, curr) => acc.concat(...curr), []);\n\n    return (\n      flattenedArray.reduce((acc, current) => acc + current, 0) / input.length\n    );\n  }\n);\n\nexport const AND = new Algorithm(\n  'AND',\n  'This algorithm returns true if all the inputs are true',\n  ['boolean'],\n  'boolean',\n  [],\n  (input: boolean[], params: any): boolean => {\n    return !input.includes(false);\n  }\n);\n\nexport const OR = new Algorithm(\n  'OR',\n  'This algorithm returns true if at least one of the inputs is true',\n  ['boolean'],\n  'boolean',\n  [],\n  (input: boolean[], params: any): boolean => {\n    return input.includes(true);\n  }\n);\n\nexport const NOT = new Algorithm(\n  'NOT',\n  'This algorithm returns true if all the inputs are false',\n  ['boolean'],\n  'boolean',\n  [],\n  (input: boolean[], params: any): boolean => {\n    return !input.includes(true);\n  }\n);\n\nexport const DIFFERENCE_THRESHOLD = new Algorithm(\n  'DIFFERENCE_THRESHOLD',\n  'This algorithm returns true if the difference between the first and any other input is above the threshold set by the user',\n  ['number'],\n  'boolean',\n  [{ name: 'p1', type: 'number', description: 'the threshold value' }],\n  (input: number[], params: any): boolean => {\n    const treshold = params['p1'];\n    const first = input[0];\n    for (const n of input) {\n      if (Math.abs(n - first) > treshold) return true;\n    }\n    return false;\n  }\n);\n\n\nexport const INTEGRAL_BOOLEAN = new Algorithm(\n  'INTEGRAL_BOOLEAN',\n  'This algorithm calculates the integral of timeseries.',\n  ['object'],\n  'number',\n  [\n    {\n      name: 'p1',\n      type: 'number',\n      description:\n        'intervalTime, please copy paste the timeseries interval time',\n    },\n    {\n      name: 'p2',\n      type: 'string',\n      description:\n        'Ratio || Percentage   (write one of the two, Ratio will be used by default)',\n    },\n  ],\n  (input: { date: number; value: number }[][], params: any): number => {\n    const percentageResult = params['p2'] === 'Percentage';\n    const dataInput = input.reduce((acc, curr) => acc.concat(...curr), []);\n    const invertBool = (bool) => (bool ? 0 : 1);\n    dataInput.unshift({\n      date: dataInput[dataInput.length - 1].date - params['p1'],\n      value: invertBool(dataInput[0].value),\n    });\n    // Ensure input is sorted by time\n    dataInput.sort((a, b) => a.date - b.date);\n\n    let integral = 0;\n\n    for (let i = 1; i < dataInput.length; i++) {\n      // Calculate the difference in time\n      const deltaTime = dataInput[i].date - dataInput[i - 1].date;\n\n      // Calculate the average value between two points\n      const avgValue = (dataInput[i].value + dataInput[i - 1].value) / 2;\n\n      // Add the area of the trapezoid to the total integral\n      integral += avgValue * deltaTime;\n    }\n\n    if (!percentageResult)\n      return (\n        integral / (dataInput[dataInput.length - 1].date - dataInput[0].date)\n      );\n    else\n      return (\n        (integral /\n          (dataInput[dataInput.length - 1].date - dataInput[0].date)) *\n        100\n      );\n  }\n);\n\nexport const STANDARD_DEVIATION = new Algorithm(\n  'STANDARD_DEVIATION',\n  'This algorithm returns the standard deviation of the inputs',\n  ['number'],\n  'number',\n  [],\n  (input: number[], params: any): number => {\n    const n = input.length;\n    const mean = input.reduce((a, b) => a + b) / n;\n    return Math.sqrt(input.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n);\n  }\n);\n\nexport const EQUAL_TO = new Algorithm(\n  'EQUAL_TO',\n  'This algorithm returns true if the first input is equal to the parameter',\n  ['number','string'],\n  'boolean',\n  [{ name: 'p1', type: 'number', description: 'the value to compare to' }],\n  (input: any[], params: any): boolean => {\n    return input[0] === params['p1'];\n  }\n);\n\nexport const IS_EMPTY = new Algorithm(\n  'IS_EMPTY',\n  'This algorithm returns true if the input is an empty list',\n  ['number','string'],\n  'boolean',\n  [],\n  (input: any[], params: any): boolean => {\n    const flattenedArray = input.reduce((acc, curr) => acc.concat(...curr), []);\n    return flattenedArray.length === 0;\n  }\n);\n\nexport const CONV_BOOLEAN_TO_NUMBER = new Algorithm(\n  'CONV_BOOLEAN_TO_NUMBER',\n  'This algorithm converts a boolean to a number',\n  ['boolean'],\n  'number',\n  [],\n  (input: boolean[], params: any): number => {\n    return input[0] ? 1 : 0;\n  }\n);\n\nexport const CONV_NUMBER_TO_BOOLEAN = new Algorithm(\n  'CONV_NUMBER_TO_BOOLEAN',\n  'This algorithm converts a number to a boolean (0 is false, everything else is true)',\n  ['number'],\n  'boolean',\n  [],\n  (input: [number[]], params: any): boolean => {\n    const flattenedArray = input.reduce((acc, curr) => acc.concat(...curr), []);\n    return flattenedArray[0] !== 0;\n  }\n);\n\n\nexport const CURRENT_EPOCH_TIME = new Algorithm(\n  'CURRENT_EPOCH_TIME',\n  'This algorithm returns the current epoch time',\n  [],\n  'number',\n  [],\n  (input: any[], params: any): number => {\n    return Date.now();\n  }\n);\n\nexport const SUBTRACT = new Algorithm(\n  'SUBTRACT',\n  'This algorithm returns the result of the subtraction of the first input by the second input',\n  ['number'],\n  'number',\n  [],\n  (input: number[], params: any): number => {\n    return input[0] - input[1];\n  }\n);\n\nexport const SUBTRACT_BY = new Algorithm(\n  'SUBTRACT_BY',\n  'This algorithm returns the result of the subtraction of the first input by the value set by the user (p1)',\n  ['number'],\n  'number',\n  [{ name: 'p1', type: 'number', description: 'the value to subtract by' }],\n  (input: number[], params: any): number => {\n    return input[0] - params['p1'];\n  }\n);\n\n\n\n\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnalyticService = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst CONSTANTS = require(\"../constants\");\nconst ConfigModel_1 = require(\"../models/ConfigModel\");\nconst AnalyticModel_1 = require(\"../models/AnalyticModel\");\nconst EntityModel_1 = require(\"../models/EntityModel\");\nconst TrackingMethodModel_1 = require(\"../models/TrackingMethodModel\");\nconst InputsModel_1 = require(\"../models/InputsModel\");\nconst OutputsModel_1 = require(\"../models/OutputsModel\");\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst utils_1 = require(\"./utils\");\nconst SingletonTimeSeries_1 = require(\"./SingletonTimeSeries\");\nconst algo = require(\"../algorithms/algorithms\");\nconst axios_1 = require(\"axios\");\nconst qs_1 = require(\"qs\");\n/**\n * This class handles most of the logic for analytics. It provides methods for creating and retrieving analytics, entities, and contexts.\n * It also provides methods for applying tracking methods to followed entities and applying algorithms to inputs.\n *\n * @export\n * @class AnalyticService\n */\nclass AnalyticService {\n    //private googleChatService: GoogleChatService;\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    constructor() {\n        /**\n         * The singleton instance of the Timeseries service.\n         *\n         * @private\n         * @type {SpinalServiceTimeseries}\n         * @memberof AnalyticService\n         */\n        this.spinalServiceTimeseries = SingletonTimeSeries_1.SingletonServiceTimeseries.getInstance();\n    }\n    /**\n     * Initialize private attributes with necessary information to use the the messaging service.\n     *\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {string} fromNumber\n     * @return {*}  {void}\n     * @memberof AnalyticService\n     */\n    initTwilioCredentials(accountSid, authToken, fromNumber) {\n        if (!accountSid || !authToken || !fromNumber) {\n            console.error('Twilio credentials not set, Messaging services will not work');\n            return;\n        }\n        console.log('Init connection to messaging services...');\n        this.twilioFromNumber = fromNumber;\n        this.twilioAccountSid = accountSid;\n        this.twilioAuthToken = authToken;\n        console.log('Done.');\n    }\n    /**\n     * This method creates a new context and returns the info of the newly created context.\n     * If the context already exists (same name), it just returns the info of that context instead of creating a new one.\n     * @param {string} contextName\n     * @return {*}  {Promise<SpinalNodeRef>}\n     * @memberof AnalyticService\n     */\n    createContext(contextName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const alreadyExists = this.getContext(contextName);\n            if (alreadyExists) {\n                console.error(`Context ${contextName} already exists`);\n                return alreadyExists;\n            }\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addContext(contextName, CONSTANTS.CONTEXT_TYPE, undefined).then((context) => {\n                const contextId = context.getId().get();\n                return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(contextId);\n            });\n        });\n    }\n    /**\n     * Retrieves and returns all contexts\n     * handled by this service (type analysisContext)\n     * @return {*}  {(SpinalNodeRef[] | undefined)}\n     * @memberof AnalyticService\n     */\n    getContexts() {\n        const contexts = spinal_env_viewer_graph_service_1.SpinalGraphService.getContextWithType(CONSTANTS.CONTEXT_TYPE);\n        const argContexts = contexts.map((el) => spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(el.info.id.get()));\n        return argContexts;\n    }\n    /**\n     * This method use the context name to find and return the info of that context. If the context does not exist, it returns undefined.\n     * If multiple contexts have the same name, it returns the first one.\n     * @param {string} contextName\n     * @return {*}  {(SpinalNodeRef | undefined)}\n     * @memberof AnalyticService\n     */\n    getContext(contextName) {\n        const contexts = this.getContexts();\n        if (!contexts)\n            return undefined;\n        return contexts.find((context) => context.name.get() === contextName);\n    }\n    getContextIdOfAnalytic(analyticId) {\n        const contexts = this.getContexts();\n        if (!contexts)\n            return undefined;\n        const analyticNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(analyticId);\n        const contextId = analyticNode.getContextIds()[0];\n        return contextId;\n    }\n    ////////////////////////////////////////////////////\n    /////////////////// ENTITY /////////////////////////\n    ////////////////////////////////////////////////////\n    /**\n     * This method creates a new entity and returns the info of the newly created entity.\n     *\n     * @param {IEntity} entityInfo\n     * @param {string} contextId\n     * @return {*}  {Promise<SpinalNodeRef>}\n     * @memberof AnalyticService\n     */\n    addEntity(entityInfo, contextId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            entityInfo.type = CONSTANTS.ENTITY_TYPE;\n            const entityModel = new EntityModel_1.EntityModel(entityInfo);\n            const entityNodeId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode(entityInfo, entityModel);\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(contextId, entityNodeId, contextId, CONSTANTS.CONTEXT_TO_ENTITY_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(entityNodeId);\n        });\n    }\n    /**\n     * Returns all the entities withing a context that have the specified type.\n     *\n     * @param {SpinalContext<any>} context\n     * @param {string} targetType\n     * @return {*}  {(Promise<SpinalNode<any> | undefined>)}\n     * @memberof AnalyticService\n     */\n    findEntityByTargetType(context, targetType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield context.getChildren(CONSTANTS.CONTEXT_TO_ENTITY_RELATION);\n            const result = entities.find((e) => e.info.entityType.get() == targetType);\n            spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(result);\n            return result;\n        });\n    }\n    /**\n     * Retrieves a SpinalNodeRef for the specified entity within the specified context.\n     * @async\n     * @param {string} contextName - The name of the context to search within.\n     * @param {string} entityName - The name of the entity to retrieve.\n     * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the SpinalNodeRef for the entity, or undefined if the context or entity cannot be found.\n     * @memberof AnalyticService\n     */\n    getEntity(contextName, entityName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const context = this.getContext(contextName);\n            if (!context)\n                return undefined;\n            const contextNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(context.id.get());\n            const entities = yield contextNode.getChildren(CONSTANTS.CONTEXT_TO_ENTITY_RELATION);\n            const entitiesModels = entities.map((el) => spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(el.info.id.get()));\n            return entitiesModels.find((entity) => entity.name.get() === entityName);\n        });\n    }\n    /**\n     * Retrieves the parent entity of the specified analytic.\n     * @async\n     * @param {string} analyticId - The ID of the analytic for which to retrieve the parent entity.\n     * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the parent entity, or undefined if the parent entity cannot be found.\n     * @memberof AnalyticService\n     */\n    getEntityFromAnalytic(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getParents(analyticId, [\n                CONSTANTS.ENTITY_TO_ANALYTIC_RELATION,\n            ]);\n            if (nodes.length != 0) {\n                return nodes[0];\n            }\n            return undefined;\n        });\n    }\n    ////////////////////////////////////////////////////\n    //////////////// Analytic //////////////////////////\n    ////////////////////////////////////////////////////\n    /**\n     * Adds a new analytic to the specified entity within the specified context.\n     * @async\n     * @param {IAnalytic} analyticInfo - The information for the new analytic to add.\n     * @param {string} contextId - The ID of the context in which to add the analytic.\n     * @param {string} entityId - The ID of the entity to which to add the analytic.\n     * @returns {Promise<SpinalNodeRef>} A Promise that resolves to the newly created analytic info.\n     * @memberof AnalyticService\n     */\n    addAnalytic(analyticInfo, contextId, entityId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            analyticInfo.type = CONSTANTS.ANALYTIC_TYPE;\n            const analyticModel = new AnalyticModel_1.AnalyticModel(analyticInfo);\n            const analyticNodeId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode(analyticInfo, analyticModel);\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(entityId, analyticNodeId, contextId, CONSTANTS.ENTITY_TO_ANALYTIC_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            yield this.addInputsNode(analyticNodeId, contextId);\n            yield this.addOutputsNode(analyticNodeId, contextId);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(analyticNodeId);\n        });\n    }\n    /**\n     * Retrieves all analytics within the specified context.\n     * @async\n     * @param {string} contextId - The ID of the context in which to retrieve analytics.\n     * @returns {Promise<SpinalNodeRef[]>} A Promise that resolves to an array of SpinalNodeRefs for all analytics in the context.\n     * @memberof AnalyticService\n     */\n    getAllAnalytics(contextId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const analytics = yield spinal_env_viewer_graph_service_1.SpinalGraphService.findInContext(contextId, contextId, (node) => {\n                if (node.getType().get() === CONSTANTS.ANALYTIC_TYPE) {\n                    spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(node);\n                    return true;\n                }\n                return false;\n            });\n            return analytics;\n        });\n    }\n    /**\n     * Retrieves the SpinalNodeRef for the specified analytic within the specified context.\n     * @async\n     * @param {string} contextId - The ID of the context in which to search for the analytic.\n     * @param {string} analyticName - The name of the analytic to retrieve.\n     * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the SpinalNodeRef for the analytic, or undefined if the analytic cannot be found.\n     * @memberof AnalyticService\n     */\n    getAnalytic(contextId, analyticName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const analytics = yield spinal_env_viewer_graph_service_1.SpinalGraphService.findInContext(contextId, contextId, (node) => {\n                if (node.getType().get() === CONSTANTS.ANALYTIC_TYPE) {\n                    spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(node);\n                    return true;\n                }\n                return false;\n            });\n            const analytic = analytics.find((el) => el.info.name.get() == analyticName);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(analytic.id.get());\n        });\n    }\n    /**\n     * Adds an Inputs node to the specified analytic within the specified context.\n     * @async\n     * @param {string} analyticId - The ID of the analytic to which to add the Inputs node.\n     * @param {string} contextId - The ID of the context in which to add the Inputs node.\n     * @returns {Promise<SpinalNodeRef>} A Promise that resolves to the newly created Inputs node.\n     * @memberof AnalyticService\n     */\n    addInputsNode(analyticId, contextId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputsInfo = {\n                name: 'Inputs',\n                description: '',\n                type: CONSTANTS.INPUTS_TYPE,\n            };\n            const inputsModel = new InputsModel_1.InputsModel(inputsInfo);\n            const inputsId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode(inputsInfo, inputsModel);\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(analyticId, inputsId, contextId, CONSTANTS.ANALYTIC_TO_INPUTS_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(inputsId);\n        });\n    }\n    /**\n     * Adds an Outputs node to the specified analytic within the specified context.\n     * @async\n     * @param {string} analyticId - The ID of the analytic to which to add the Outputs node.\n     * @param {string} contextId - The ID of the context in which to add the Outputs node.\n     * @returns {Promise<SpinalNodeRef>} A Promise that resolves to the newly created Outputs node.\n     * @memberof AnalyticService\n     */\n    addOutputsNode(analyticId, contextId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const outputsInfo = {\n                name: 'Outputs',\n                description: '',\n                type: CONSTANTS.OUTPUTS_TYPE,\n            };\n            const outputsModel = new OutputsModel_1.OutputsModel(outputsInfo);\n            const outputsId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode(outputsInfo, outputsModel);\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(analyticId, outputsId, contextId, CONSTANTS.ANALYTIC_TO_OUTPUTS_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(outputsId);\n        });\n    }\n    /**\n     * Adds a new Config node to the specified analytic within the specified context, with the specified attributes.\n     *\n     * @param {INodeDocumentation} configAttributes - The attributes to add to the Config node.\n     * @param {string} analyticId - The ID of the analytic to which to add the Config node.\n     * @param {string} contextId - The ID of the context in which to add the Config node.\n     * @return {*}  {Promise<SpinalNodeRef>}\n     * @memberof AnalyticService\n     */\n    addConfig(configAttributes, analyticId, contextId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const configNodeInfo = { name: 'Config', type: CONSTANTS.CONFIG_TYPE };\n            const configModel = new ConfigModel_1.ConfigModel(configNodeInfo);\n            const configId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode(configNodeInfo, configModel);\n            const configNode = yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(analyticId, configId, contextId, CONSTANTS.ANALYTIC_TO_CONFIG_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            this.addAttributesToNode(configNode, configAttributes);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(configId);\n        });\n    }\n    /**\n     * Retrieves the Config node for the specified analytic\n     *\n     * @async\n     * @param {string} analyticId - The ID of the analytic for which to retrieve the Config node.\n     * @return {*}  {(Promise<SpinalNodeRef | undefined>)} A Promise that resolves to the Config node, or undefined if the Config node cannot be found.\n     * @memberof AnalyticService\n     */\n    getConfig(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(analyticId, [\n                CONSTANTS.ANALYTIC_TO_CONFIG_RELATION,\n            ]);\n            if (nodes.length === 0)\n                return undefined;\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(nodes[0].id.get());\n        });\n    }\n    /**\n     * Retrieves the Inputs node for the specified analytic.\n     * @async\n     * @param {string} analyticId - The ID of the analytic for which to retrieve the Inputs node.\n     * @return {*}  {(Promise<SpinalNodeRef | undefined>)} - A Promise that resolves to the Inputs node, or undefined if the Inputs node cannot be found.\n     * @memberof AnalyticService\n     */\n    getInputsNode(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(analyticId, [\n                CONSTANTS.ANALYTIC_TO_INPUTS_RELATION,\n            ]);\n            if (nodes.length === 0)\n                return undefined;\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(nodes[0].id.get());\n        });\n    }\n    /**\n     * Retrieves the Outputs node for the specified analytic.\n     * @async\n     * @param {string} analyticId - The ID of the analytic for which to retrieve the Outputs node.\n     * @returns {*} {(Promise<SpinalNodeRef | undefined>)} - A Promise that resolves to the Outputs node, or undefined if the Outputs node cannot be found.\n     * @memberof AnalyticService\n     */\n    getOutputsNode(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(analyticId, [\n                CONSTANTS.ANALYTIC_TO_OUTPUTS_RELATION,\n            ]);\n            if (nodes.length === 0)\n                return undefined;\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(nodes[0].id.get());\n        });\n    }\n    deleteInputsNode(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputsNode = yield this.getInputsNode(analyticId);\n            if (inputsNode)\n                yield (0, utils_1.safeDeleteNode)(inputsNode.id.get(), false);\n        });\n    }\n    deleteOutputsNode(analyticId, shouldDeleteChildren = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const outputsNode = yield this.getOutputsNode(analyticId);\n            if (outputsNode)\n                yield (0, utils_1.safeDeleteNode)(outputsNode.id.get(), shouldDeleteChildren);\n        });\n    }\n    deleteAnalytic(analyticId, shouldDeleteChildren = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputsNode = yield this.getInputsNode(analyticId);\n            const outputsNode = yield this.getOutputsNode(analyticId);\n            if (inputsNode)\n                yield (0, utils_1.safeDeleteNode)(inputsNode.id.get());\n            if (outputsNode)\n                yield (0, utils_1.safeDeleteNode)(outputsNode.id.get(), shouldDeleteChildren);\n            yield (0, utils_1.safeDeleteNode)(analyticId);\n        });\n    }\n    ////////////////////////////////////////////////////\n    //////////////// TRACKED VARIABLE //////////////////\n    ////////////////////////////////////////////////////\n    /**\n     * Adds a new Tracking Method node to the specified Input node within the specified context.\n     * @async\n     * @param {INodeDocumentation} trackingMethodAttributes\n     * @param {string} contextId - The ID of the context in which to add the Tracking Method node.\n     * @param {string} inputId - The ID of the Input node to which to add the Tracking Method node.\n     * @return {*}  {Promise<SpinalNodeRef>} - A Promise that resolves to the newly created Tracking Method node.\n     * @memberof AnalyticService\n     */\n    addTrackingMethod(trackingMethodAttributes, contextId, inputId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const trackingMethodNodeInfo = {\n                name: 'TrackingMethod',\n                type: CONSTANTS.TRACKING_METHOD_TYPE,\n            };\n            const trackingMethodModel = new TrackingMethodModel_1.TrackingMethodModel(trackingMethodNodeInfo);\n            const trackingMethodNodeId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode(trackingMethodNodeInfo, trackingMethodModel);\n            const createdNode = yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(inputId, trackingMethodNodeId, contextId, CONSTANTS.ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            this.addAttributesToNode(createdNode, trackingMethodAttributes);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(trackingMethodNodeId);\n        });\n    }\n    /**\n     * Adds a new Tracking Method node to the Inputs node of the specified analytic within the specified context.\n     *\n     * @async\n     * @param {INodeDocumentation} trackingMethodAttributes - The attributes to add to the Tracking Method node.\n     * @param {string} contextId - The ID of the context in which to add the Tracking Method node.\n     * @param {string} analyticId - The ID of the analytic for which to add the Tracking Method node.\n     * @return {*}  {Promise<SpinalNodeRef>} - A Promise that resolves to the newly created Tracking Method node.\n     * @memberof AnalyticService\n     */\n    addInputTrackingMethod(trackingMethodAttributes, contextId, analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputs = yield this.getInputsNode(analyticId);\n            if (inputs === undefined)\n                throw Error('Inputs node not found');\n            return this.addTrackingMethod(trackingMethodAttributes, contextId, inputs.id.get());\n        });\n    }\n    /**\n     * Retrieves all Tracking Method nodes associated with the Inputs node of the specified analytic.\n     * @async\n     * @param {string} analyticId - The ID of the analytic for which to retrieve the Tracking Method nodes.\n     * @returns {Promise<SpinalNodeRef[]|undefined>} A Promise that resolves to an array of Tracking Method nodes, or undefined if the Inputs node or Tracking Method nodes cannot be found.\n     * @memberof AnalyticService\n     */\n    getTrackingMethods(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputs = yield this.getInputsNode(analyticId);\n            if (inputs === undefined)\n                return undefined;\n            const nodes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(inputs.id.get(), [\n                CONSTANTS.ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION,\n            ]);\n            return nodes;\n        });\n    }\n    /**\n     * Retrieves the first Tracking Method node associated with the Inputs node of the specified analytic.\n     * @async\n     * @param {string} analyticId - The ID of the analytic for which to retrieve the Tracking Method node.\n     * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the first Tracking Method node, or undefined if the Inputs node or Tracking Method nodes cannot be found.\n     * @memberof AnalyticService\n     */\n    getTrackingMethod(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const trackingMethods = yield this.getTrackingMethods(analyticId);\n            if (trackingMethods === undefined)\n                return undefined;\n            return trackingMethods[0];\n        });\n    }\n    /**\n     * Removes the specified Tracking Method node from the specified Inputs node and deletes it from the graph.\n     * @async\n     * @param {string} inputId - The ID of the Inputs node from which to remove the Tracking Method node.\n     * @param {string} trackingMethodId - The ID of the Tracking Method node to remove and delete.\n     * @returns {Promise<void>} A Promise that resolves when the Tracking Method node has been removed and deleted.\n     * @memberof AnalyticService\n     */\n    removeTrackingMethod(inputId, trackingMethodId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.removeChild(inputId, trackingMethodId, CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.removeFromGraph(trackingMethodId);\n        });\n    }\n    /**\n     * Removes the specified Tracking Method node from the Inputs node of the specified analytic and deletes it from the graph.\n     * @async\n     * @param {string} analyticId - The ID of the analytic from which to remove the Tracking Method node.\n     * @param {string} trackingMethodId - The ID of the Tracking Method node to remove and delete.\n     * @throws {Error} Throws an error if the Inputs node cannot be found.\n     * @returns {Promise<void>} A Promise that resolves when the Tracking Method node has been removed and deleted.\n     * @memberof AnalyticService\n     */\n    removeInputTrackingMethod(analyticId, trackingMethodId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputs = yield this.getInputsNode(analyticId);\n            if (inputs === undefined)\n                throw Error('Inputs node not found');\n            yield this.removeTrackingMethod(inputs.id.get(), trackingMethodId);\n        });\n    }\n    /**\n     *\n     * @async\n     * @param {string} trackMethod - The type of filter.\n     * @param {string} filterValue - The filter value to use.\n     * @param {SpinalNodeRef} followedEntity - The SpinalNodeRef object representing the Followed Entity to which the Tracking Method should be applied.\n     * @returns {*} {Promise<SpinalNodeRef[] | SpinalNodeRef | undefined>} - A Promise that resolves with the results of the applied Tracking Method.\n     * @memberof AnalyticService\n     */\n    applyTrackingMethodWithParams(followedEntity, trackMethod, filterValue, depth, strictDepth, authorizedRelations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (followedEntity) {\n                switch (trackMethod) {\n                    case CONSTANTS.TRACK_METHOD.ENDPOINT_NAME_FILTER: {\n                        const endpoint = yield (0, utils_1.findEndpoint)(followedEntity.id.get(), filterValue, depth, strictDepth, authorizedRelations, CONSTANTS.ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n                        return endpoint;\n                    }\n                    case CONSTANTS.TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER: {\n                        const controlEndpoint = yield (0, utils_1.findEndpoint)(followedEntity.id.get(), filterValue, depth, strictDepth, authorizedRelations, CONSTANTS.CONTROL_ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n                        return controlEndpoint;\n                    }\n                    case CONSTANTS.TRACK_METHOD.ATTRIBUTE_NAME_FILTER: {\n                        const [first, second] = filterValue.split(':');\n                        const foundAttribute = yield (0, utils_1.findAttribute)(followedEntity.id.get(), first, second, depth, strictDepth, authorizedRelations);\n                        if (foundAttribute == -1)\n                            return undefined;\n                        return foundAttribute;\n                        //}\n                    }\n                    default:\n                        console.log('Track method not recognized');\n                }\n            }\n        });\n    }\n    ////////////////////////////////////////////////////\n    //////////////// FOLLOWED ENTITY ///////////////////\n    ////////////////////////////////////////////////////\n    /**\n     * Adds a link between an input and a followed entity.\n     * @param {string} contextId - The id of the context where the link will be created.\n     * @param {string} inputId - The id of the input node.\n     * @param {string} followedEntityId - The id of the followed entity node.\n     * @returns {Promise<SpinalNodeRef>} The linked node.\n     * @memberof AnalyticService\n     */\n    addLinkToFollowedEntity(contextId, inputId, followedEntityId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const link = yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(inputId, followedEntityId, contextId, CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            const id = link.info.id.get();\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(id);\n        });\n    }\n    /**\n     * Adds a link between the input node of the specified analytic and a followed entity.\n     * @param {string} contextId - The id of the context where the link will be created.\n     * @param {string} analyticId - The id of the analytic node.\n     * @param {string} followedEntityId - The id of the followed entity node.\n     * @returns {Promise<SpinalNodeRef>} The linked node.\n     * @memberof AnalyticService\n     */\n    addInputLinkToFollowedEntity(contextId, analyticId, followedEntityId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputs = yield this.getInputsNode(analyticId);\n            if (inputs === undefined)\n                throw Error('Inputs node not found');\n            return this.addLinkToFollowedEntity(contextId, inputs.id.get(), followedEntityId);\n        });\n    }\n    /**\n     * Removes the link between an input node and a followed entity node.\n     *\n     * @async\n     * @param {string} analyticId - The ID of the analytic node.\n     * @param {string} followedEntityId - The ID of the followed entity node.\n     * @returns {Promise<void>}\n     * @memberof AnalyticService\n     */\n    removeLinkToFollowedEntity(analyticId, followedEntityId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputNodeRef = yield this.getInputsNode(analyticId);\n            if (inputNodeRef === undefined)\n                throw Error('Inputs node not found');\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.removeChild(inputNodeRef.id.get(), followedEntityId, CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n        });\n    }\n    /**\n     * Get the followed entity node of an analytic.\n     * @async\n     * @param {string} analyticId - The id of the analytic.\n     * @returns {Promise<SpinalNodeRef|undefined>} The followed entity node or undefined if it does not exist.\n     * @memberof AnalyticService\n     */\n    getFollowedEntity(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputsNode = yield this.getInputsNode(analyticId);\n            if (inputsNode === undefined)\n                return undefined;\n            const nodes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(inputsNode.id.get(), [\n                CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION,\n            ]);\n            if (nodes === undefined)\n                return undefined;\n            return nodes[0];\n        });\n    }\n    ///////////////////////////////////////////////////\n    ///////////////////// GLOBAL //////////////////////\n    ///////////////////////////////////////////////////\n    /**\n     * Adds the specified attributes to the node with the specified ID.\n     * @async\n     * @param {SpinalNode<any>} node - The node to which to add the attributes.\n     * @param {INodeDocumentation} attributes - An array of objects representing the attributes to add to the node.\n     * @returns {Promise<void>} A Promise that resolves when the attributes have been added.\n     * @memberof AnalyticService\n     */\n    addAttributesToNode(node, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const categoryName of Object.keys(attributes)) {\n                for (const attribute of attributes[categoryName]) {\n                    yield spinal_env_viewer_plugin_documentation_service_1.default.addAttributeByCategoryName(node, categoryName, attribute.name, attribute.value, attribute.type, '');\n                }\n            }\n        });\n    }\n    /**\n     * Gets the attributes from a node.\n     *\n     * @param {string} nodeId - The ID of the node from which to retrieve the attributes.\n     * @param {string} category - The category of the attributes to retrieve.\n     * @return {*}  {Promise<any>} An object containing the attributes.\n     * @memberof AnalyticService\n     */\n    getAttributesFromNode(nodeId, category) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n            const res = {};\n            const parameters = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, category);\n            for (const param of parameters) {\n                const obj = param.get();\n                res[obj.label] = obj.value;\n            }\n            return res;\n        });\n    }\n    /**\n     * Gets the attribute from a node.\n     *\n     * @param {string} nodeId - The ID of the node from which to retrieve the attribute.\n     * @param {string} category - The category of the attribute to retrieve.\n     * @param {string} label - The label of the attribute to retrieve.\n     * @return {*}  {Promise<any>}  An object containing the attribute { label: value}.\n     * @memberof AnalyticService\n     */\n    getAttributeFromNode(nodeId, category, label) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n            const parameters = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, category);\n            for (const param of parameters) {\n                const obj = param.get();\n                if (obj.label === label)\n                    return { [obj.label]: obj.value };\n            }\n            return undefined;\n        });\n    }\n    getAllCategoriesAndAttributesFromNode(nodeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n            const res = {};\n            const categories = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategory(node);\n            for (const cat of categories) {\n                const categoryName = cat.nameCat;\n                res[categoryName] = {};\n                const attributes = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, categoryName);\n                for (const attribute of attributes) {\n                    const obj = attribute.get();\n                    res[categoryName][obj.label] = obj.value;\n                }\n            }\n            return res;\n        });\n    }\n    /**\n     * Gets the targeted entities for an analytic.\n     *\n     * @param {string} analyticId The ID of the analytic.\n     * @return {*}  {(Promise<SpinalNodeRef[]|undefined>)} An array of SpinalNodeRefs for the entities\n     * @memberof AnalyticService\n     */\n    getWorkingFollowedEntities(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const followedEntity = yield this.getFollowedEntity(analyticId);\n            const trackingMethod = yield this.getTrackingMethod(analyticId);\n            const config = yield this.getConfig(analyticId);\n            const entityInfo = yield this.getEntityFromAnalytic(analyticId);\n            if (!entityInfo)\n                return;\n            const entityType = entityInfo.entityType.get();\n            if (followedEntity && trackingMethod && config) {\n                if (entityType == followedEntity.type.get()) {\n                    // we can continue as planned\n                    return [followedEntity];\n                }\n                if (followedEntity.type.get().includes('group') ||\n                    followedEntity.type.get().includes('Group')) {\n                    console.log('Anchor entity is a group, trying to find the correct entities with the relation name: ', CONSTANTS.GROUP_RELATION_PREFIX + entityType);\n                    return yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(followedEntity.id.get(), [\n                        CONSTANTS.GROUP_RELATION_PREFIX + entityType,\n                    ]);\n                }\n                if (followedEntity.type.get().includes('context') ||\n                    followedEntity.type.get().includes('Context')) {\n                    console.log('Anchor entity is a context, trying to find the correct entities');\n                    return yield spinal_env_viewer_graph_service_1.SpinalGraphService.findInContextByType(followedEntity.id.get(), followedEntity.id.get(), entityType);\n                }\n                console.log('Failed to deduct the correct entities from the anchor entity');\n                return [];\n            }\n        });\n    }\n    getWorkingFollowedEntitiesWithParam(followedEntity, entityType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (entityType == followedEntity.type.get()) {\n                // we can continue as planned\n                return [followedEntity];\n            }\n            if (followedEntity.type.get().includes('group') ||\n                followedEntity.type.get().includes('Group')) {\n                console.log('Anchor entity is a group, trying to find the correct entities with the relation name: ', CONSTANTS.GROUP_RELATION_PREFIX + entityType);\n                return yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(followedEntity.id.get(), [\n                    CONSTANTS.GROUP_RELATION_PREFIX + entityType,\n                ]);\n            }\n            if (followedEntity.type.get().includes('context') ||\n                followedEntity.type.get().includes('Context')) {\n                console.log('Anchor entity is a context, trying to find the correct entities');\n                return yield spinal_env_viewer_graph_service_1.SpinalGraphService.findInContextByType(followedEntity.id.get(), followedEntity.id.get(), entityType);\n            }\n            console.log('Failed to deduct the correct entities from the anchor entity');\n            return [];\n        });\n    }\n    getEntryDataModelByInputIndex(analyticId, followedEntity, inputIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const trackingMethod = yield this.getTrackingMethod(analyticId);\n            if (!trackingMethod)\n                return undefined;\n            const inputParams = yield this.getAttributesFromNode(trackingMethod.id.get(), inputIndex);\n            return yield this.applyTrackingMethodWithParams(followedEntity, inputParams[CONSTANTS.ATTRIBUTE_TRACKING_METHOD], inputParams[CONSTANTS.ATTRIBUTE_FILTER_VALUE], inputParams[CONSTANTS.ATTRIBUTE_SEARCH_DEPTH], inputParams[CONSTANTS.ATTRIBUTE_STRICT_DEPTH], inputParams[CONSTANTS.ATTRIBUTE_SEARCH_RELATIONS].split(CONSTANTS.ATTRIBUTE_VALUE_SEPARATOR));\n        });\n    }\n    getFormattedInputDataByIndex(analyticId, followedEntity, inputIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const input = [];\n            const entryDataModel = yield this.getEntryDataModelByInputIndex(analyticId, followedEntity, inputIndex);\n            if (!entryDataModel)\n                return input;\n            const trackingMethod = yield this.getTrackingMethod(analyticId);\n            if (!trackingMethod)\n                return input;\n            const trackingParams = yield this.getAttributesFromNode(trackingMethod.id.get(), inputIndex);\n            if (!trackingParams[CONSTANTS.ATTRIBUTE_TIMESERIES] ||\n                trackingParams[CONSTANTS.ATTRIBUTE_TIMESERIES] == 0) {\n                const currentValue = yield (0, utils_1.getValueModelFromEntry)(entryDataModel);\n                input.push(currentValue.get());\n            }\n            else {\n                const spinalTs = yield this.spinalServiceTimeseries.getOrCreateTimeSeries(entryDataModel.id.get());\n                const end = Date.now();\n                const start = end - trackingParams[CONSTANTS.ATTRIBUTE_TIMESERIES];\n                const data = yield spinalTs.getFromIntervalTime(start, end);\n                //add fictive data copying last value to currentTime.\n                if (data.length != 0) {\n                    data.push({ date: end, value: data[data.length - 1].value });\n                }\n                //const dataValues = data.map((el) => el.value);\n                input.push(data);\n            }\n            return input;\n        });\n    }\n    findExecutionOrder(dependencies) {\n        const graph = {};\n        const visited = {};\n        const stack = [];\n        // Create graph from dependency map\n        for (const algo of Object.keys(dependencies)) {\n            graph[algo] = graph[algo] || [];\n            const dependency = dependencies[algo];\n            graph[dependency] = graph[dependency] || [];\n            graph[dependency].push(algo);\n        }\n        const visit = (node) => {\n            if (!visited[node]) {\n                visited[node] = true;\n                if (graph[node]) {\n                    for (const neighbor of graph[node]) {\n                        visit(neighbor);\n                    }\n                }\n                stack.push(node);\n            }\n        };\n        for (const node of Object.keys(graph)) {\n            if (!visited[node]) {\n                visit(node);\n            }\n        }\n        // Check for circular dependencies (not handled in this simple implementation)\n        for (const node of Object.keys(graph)) {\n            if (stack.indexOf(node) > stack.indexOf(dependencies[node])) {\n                return null; // Circular dependency detected\n            }\n        }\n        return stack.filter((x) => x.startsWith('A'));\n    }\n    filterAlgorithmParametersAttributesByIndex(algoParams, indexName) {\n        const result = {};\n        for (const key in algoParams) {\n            if (key.startsWith(indexName)) {\n                const newKey = key.replace(indexName + CONSTANTS.ATTRIBUTE_SEPARATOR, '');\n                result[newKey] = algoParams[key];\n            }\n        }\n        return result;\n    }\n    recExecuteAlgorithm(analyticId, entity, algoIndexName, ioDependencies, algoIndexMapping, algoParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const inputs = [];\n            const myDependencies = ioDependencies[algoIndexName].split(CONSTANTS.ATTRIBUTE_VALUE_SEPARATOR);\n            for (const dependency of myDependencies) {\n                // if dependency is an algorithm then rec call with that algorithm\n                if (dependency.startsWith('A')) {\n                    // save the result of the algorithm in the inputs array\n                    const res = yield this.recExecuteAlgorithm(analyticId, entity, dependency, ioDependencies, algoIndexMapping, algoParams);\n                    if (res == undefined)\n                        return undefined;\n                    inputs.push(res);\n                }\n                else {\n                    // if dependency is an input then get the value of the input\n                    const inputData = yield this.getFormattedInputDataByIndex(analyticId, entity, dependency);\n                    if (inputData.length == 0)\n                        return undefined;\n                    inputs.push(inputData);\n                }\n            }\n            // after the inputs are ready we can execute the algorithm\n            const algorithm_name = algoIndexMapping[algoIndexName];\n            const algorithmParameters = this.filterAlgorithmParametersAttributesByIndex(algoParams, algoIndexName);\n            const result = algo[algorithm_name].run(inputs, algorithmParameters);\n            //console.log('result :', result);\n            return result;\n        });\n    }\n    /**\n     * Performs an analysis on an entity for an analytic.\n     * @param {string} analyticId The ID of the analytic.\n     * @param {SpinalNodeRef} entity The SpinalNodeRef for the entity to analyze.\n     * @returns {*} {Promise<void>}\n     * @memberof AnalyticService\n     */\n    doAnalysisOnEntity(analyticId, entity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //Get the io dependencies of the analytic\n            const configNode = yield this.getConfig(analyticId);\n            if (!configNode)\n                return { success: false, error: 'No config node found' };\n            const ioDependencies = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_IO_DEPENDENCIES);\n            const algoIndexMapping = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING);\n            const algoParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS);\n            const R = ioDependencies['R'];\n            const result = yield this.recExecuteAlgorithm(analyticId, entity, R, ioDependencies, algoIndexMapping, algoParams);\n            return this.applyResult(result, analyticId, configNode, entity);\n        });\n    }\n    /**\n     * Performs an analysis on all entities for an analytic.\n     * @param {string} analyticId The ID of the analytic.\n     * @return {*}  {Promise<void>}\n     * @memberof AnalyticService\n     */\n    doAnalysis(analyticId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.getWorkingFollowedEntities(analyticId);\n            if (!entities)\n                return [{ success: false, error: 'No entities found' }];\n            const results = [];\n            for (const entity of entities) {\n                const result = yield this.doAnalysisOnEntity(analyticId, entity);\n                results.push(result);\n            }\n            return results;\n        });\n    }\n    ///////////////////////////////////////////////////\n    ///////////////// RESULT HANDLING /////////////////\n    ///////////////////////////////////////////////////\n    /**\n     * Applies the result of an algorithm.\n     *\n     * @param {*} result The result of the algorithm used.\n     * @param {string} analyticId The ID of the analytic.\n     * @param {SpinalNodeRef} configNode The SpinalNodeRef of the configuration of the analytic.\n     * @param {SpinalNodeRef} followedEntityNode The SpinalNodeRef of the entity.\n     * @return {*}\n     * @memberof AnalyticService\n     */\n    applyResult(result, analyticId, configNode, followedEntityNode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (result === undefined)\n                return { success: false, error: 'Result is undefined' };\n            const params = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS);\n            switch (params[CONSTANTS.ATTRIBUTE_RESULT_TYPE]) {\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.TICKET:\n                    yield this.handleTicketResult(result, analyticId, configNode, followedEntityNode, params, 'Ticket');\n                    return {\n                        success: true,\n                        error: '',\n                        resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.TICKET,\n                    };\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.CONTROL_ENDPOINT:\n                    yield this.handleControlEndpointResult(result, followedEntityNode, params);\n                    return {\n                        success: true,\n                        error: '',\n                        resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.CONTROL_ENDPOINT,\n                    };\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.ENDPOINT:\n                    yield this.handleEndpointResult(result, followedEntityNode, params);\n                    return {\n                        success: true,\n                        error: '',\n                        resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.ENDPOINT,\n                    };\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.ALARM:\n                    yield this.handleTicketResult(result, analyticId, configNode, followedEntityNode, params, 'Alarm');\n                    return {\n                        success: true,\n                        error: '',\n                        resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.ALARM,\n                    };\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.SMS:\n                    yield this.handleSMSResult(result, configNode, followedEntityNode);\n                    return {\n                        success: true,\n                        error: '',\n                        resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.SMS,\n                    };\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.LOG:\n                    console.log(`LOG : ${params[CONSTANTS.ATTRIBUTE_RESULT_NAME]} \\t|\\t Result : ${result}`);\n                    return {\n                        success: true,\n                        error: '',\n                        resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.LOG,\n                    };\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE:\n                    if (!result)\n                        return { success: false, error: 'False result' };\n                    return this.handleGChatMessageResult(configNode, followedEntityNode);\n                case CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD:\n                    if (!result)\n                        return { success: false, error: 'False result' };\n                    return this.handleGChatOrganCardResult(configNode, followedEntityNode);\n                default:\n                    return { success: false, error: 'Result type not recognized' };\n            }\n        });\n    }\n    /**\n     * Handles the result of an algorithm that creates a ticket or an alarm.\n     *\n     * @private\n     * @param {*} result\n     * @param {string} analyticId\n     * @param {SpinalNodeRef} configNode\n     * @param {SpinalNodeRef} followedEntityNode\n     * @param {*} params\n     * @param {string} ticketType\n     * @return {*}  {Promise<void>}\n     * @memberof AnalyticService\n     */\n    handleTicketResult(result, analyticId, configNode, followedEntityNode, params, ticketType // Alarm or Ticket\n    ) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!result)\n                return;\n            const outputNode = yield this.getOutputsNode(analyticId);\n            if (!outputNode)\n                return;\n            const analyticContextId = this.getContextIdOfAnalytic(analyticId);\n            if (!analyticContextId)\n                return;\n            const ticketInfo = {\n                name: `${params[CONSTANTS.ATTRIBUTE_RESULT_NAME]} : ${followedEntityNode.name.get()}`,\n            };\n            (0, utils_1.addTicketAlarm)(ticketInfo, configNode, analyticContextId, outputNode.id.get(), followedEntityNode.id.get(), ticketType);\n        });\n    }\n    /**\n     * Handles the result of an algorithm that modifies a control point.\n     *\n     * @private\n     * @param {*} result\n     * @param {SpinalNodeRef} followedEntityNode\n     * @param {*} params\n     * @return {*}  {Promise<void>}\n     * @memberof AnalyticService\n     */\n    handleControlEndpointResult(result, followedEntityNode, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlEndpointNode = yield (0, utils_1.findEndpoint)(followedEntityNode.id.get(), params[CONSTANTS.ATTRIBUTE_RESULT_NAME], 0, true, [], CONSTANTS.CONTROL_ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n            if (!controlEndpointNode)\n                return;\n            const controlEndpoint = yield controlEndpointNode.element.load();\n            controlEndpoint.currentValue.set(result);\n            this.spinalServiceTimeseries.pushFromEndpoint(controlEndpointNode.id.get(), result);\n        });\n    }\n    /**\n     * Handles the result of an algorithm that modifies an Endpoint.\n     *\n     * @private\n     * @param {*} result\n     * @param {SpinalNodeRef} followedEntityNode\n     * @param {*} params\n     * @return {*}  {Promise<void>}\n     * @memberof AnalyticService\n     */\n    handleEndpointResult(result, followedEntityNode, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlEndpointNode = yield (0, utils_1.findEndpoint)(followedEntityNode.id.get(), params[CONSTANTS.ATTRIBUTE_RESULT_NAME], 0, true, [], CONSTANTS.ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n            if (!controlEndpointNode)\n                return;\n            const controlEndpoint = yield controlEndpointNode.element.load();\n            controlEndpoint.currentValue.set(result);\n            this.spinalServiceTimeseries.pushFromEndpoint(controlEndpointNode.id.get(), result);\n        });\n    }\n    /**\n     * Handles the result of an algorithm that sends an SMS.\n     *\n     * @private\n     * @param {*} result\n     * @param {SpinalNodeRef} configNode\n     * @param {SpinalNodeRef} followedEntityNode\n     * @return {*}  {Promise<void>}\n     * @memberof AnalyticService\n     */\n    handleSMSResult(result, configNode, followedEntityNode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('SMS result');\n            if (!this.twilioAccountSid ||\n                !this.twilioAuthToken ||\n                !this.twilioFromNumber ||\n                !result)\n                return;\n            const twilioParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS);\n            const toNumber = twilioParams[CONSTANTS.ATTRIBUTE_PHONE_NUMBER];\n            const message = twilioParams[CONSTANTS.ATTRIBUTE_PHONE_MESSAGE];\n            const url = `https://api.twilio.com/2010-04-01/Accounts/${this.twilioAccountSid}/Messages.json`;\n            const entityName = followedEntityNode.name\n                .get()\n                .replace(/[0-9]/g, '*');\n            const data = {\n                Body: `Analytic on ${entityName} triggered with the following message : ${message}`,\n                From: this.twilioFromNumber,\n                To: toNumber,\n            };\n            const config = {\n                method: 'POST',\n                headers: { 'content-type': 'application/x-www-form-urlencoded' },\n                auth: {\n                    username: this.twilioAccountSid,\n                    password: this.twilioAuthToken,\n                },\n                data: (0, qs_1.stringify)(data),\n                url,\n            };\n            const axiosResult = yield (0, axios_1.default)(config);\n            console.log({ status: axiosResult.status, data: axiosResult.data });\n        });\n    }\n    handleGChatMessageResult(configNode, followedEntityNode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Handling Google chat message result');\n            const analyticParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS);\n            const gChatParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS);\n            const spaceName = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_SPACE];\n            const message = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_MESSAGE];\n            const analyticDescription = analyticParams[CONSTANTS.ATTRIBUTE_ANALYTIC_DESCRIPTION];\n            const resultInfo = {\n                success: true,\n                error: '',\n                spaceName: spaceName,\n                message: 'The following message has been triggered by an analytic.\\n ' +\n                    '\\nAnalysis on item : ' + followedEntityNode.name.get() +\n                    '\\nDescription : ' + analyticDescription +\n                    '\\nMessage : ' + message,\n                resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE,\n            };\n            return resultInfo;\n        });\n    }\n    handleGChatOrganCardResult(configNode, followedEntityNode) {\n        var _a, _b, _c, _d, _e;\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Handling Google chat organ card result');\n            const analyticParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS);\n            const resultParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS);\n            const gChatParams = yield this.getAttributesFromNode(configNode.id.get(), CONSTANTS.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS);\n            const title = resultParams[CONSTANTS.ATTRIBUTE_RESULT_NAME];\n            const spaceName = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_SPACE];\n            const message = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_MESSAGE];\n            const analyticDescription = analyticParams[CONSTANTS.ATTRIBUTE_ANALYTIC_DESCRIPTION];\n            const lastPing = yield (0, utils_1.findEndpoint)(followedEntityNode.id.get(), 'last_ping', 0, true, [], CONSTANTS.ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n            if (!lastPing)\n                return { success: false, error: 'endpoint lastPing not found on organ node' };\n            const lastPingValue = yield (0, utils_1.getValueModelFromEntry)(lastPing);\n            const lastPingDate = (new Date(lastPingValue.get())).toString();\n            const parents = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getParents(followedEntityNode.id.get(), 'HasOrgan');\n            let platformName = \"Couldn't find the platform name\";\n            let ipAddress = \"Couldn't find the ip adress\";\n            for (const parent of parents) {\n                if (parent.id.get() == ((_a = followedEntityNode.platformId) === null || _a === void 0 ? void 0 : _a.get())) {\n                    platformName = (_b = parent.name) === null || _b === void 0 ? void 0 : _b.get();\n                    ipAddress = (_c = parent.ipAdress) === null || _c === void 0 ? void 0 : _c.get();\n                }\n            }\n            const card = {\n                header: {\n                    title: title,\n                    subtitle: new Date().toLocaleDateString(),\n                },\n                sections: [\n                    {\n                        header: 'Analytic details',\n                        widgets: [\n                            {\n                                keyValue: {\n                                    topLabel: \"Analytic description\",\n                                    content: analyticDescription,\n                                },\n                            },\n                            {\n                                keyValue: {\n                                    topLabel: \"Message\",\n                                    content: message,\n                                },\n                            },\n                        ],\n                    },\n                    {\n                        header: 'Organ details',\n                        widgets: [\n                            {\n                                keyValue: {\n                                    topLabel: 'Organ name',\n                                    content: followedEntityNode.name.get(),\n                                },\n                            },\n                            {\n                                keyValue: {\n                                    topLabel: 'Organ type',\n                                    content: (_d = followedEntityNode.organType) === null || _d === void 0 ? void 0 : _d.get(),\n                                },\n                            },\n                            {\n                                keyValue: {\n                                    topLabel: 'Last ping',\n                                    content: lastPingDate,\n                                }\n                            }\n                        ],\n                    },\n                    {\n                        header: 'Platform details',\n                        widgets: [\n                            {\n                                keyValue: {\n                                    topLabel: 'Platform name',\n                                    content: platformName,\n                                },\n                            },\n                            {\n                                keyValue: {\n                                    topLabel: 'Platform id',\n                                    content: (_e = followedEntityNode.platformId) === null || _e === void 0 ? void 0 : _e.get(),\n                                },\n                            },\n                            {\n                                keyValue: {\n                                    topLabel: 'Ip Address',\n                                    content: ipAddress,\n                                }\n                            },\n                        ],\n                    }\n                ],\n            };\n            const resultInfo = {\n                success: true,\n                error: '',\n                spaceName: spaceName,\n                resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD,\n                card: card,\n            };\n            return resultInfo;\n        });\n    }\n}\nexports.default = AnalyticService;\nexports.AnalyticService = AnalyticService;\n//# sourceMappingURL=AnalyticService.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  SpinalGraphService,\n  SpinalNodeRef,\n  SpinalNode,\n  SpinalContext,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from 'spinal-env-viewer-graph-service';\nimport * as CONSTANTS from '../constants';\nimport { ConfigModel } from '../models/ConfigModel';\nimport { AnalyticModel } from '../models/AnalyticModel';\nimport { IAnalytic } from '../interfaces/IAnalytic';\nimport { EntityModel } from '../models/EntityModel';\nimport { IEntity } from '../interfaces/IEntity';\nimport { TrackingMethodModel } from '../models/TrackingMethodModel';\nimport {\n  IGChatMessageResult,\n  IResult,\n  IGChatOrganCardResult,\n  IGChatCard,\n  IResultResponse,\n} from '../interfaces/IAnalyticResult';\nimport { IInputs } from '../interfaces/IInputs';\nimport { InputsModel } from '../models/InputsModel';\nimport { IOutputs } from '../interfaces/IOutputs';\nimport { OutputsModel } from '../models/OutputsModel';\nimport { INodeDocumentation } from '../interfaces/IAttribute';\nimport AttributeService, {\n  attributeService,\n} from 'spinal-env-viewer-plugin-documentation-service';\nimport { SpinalServiceTimeseries } from 'spinal-model-timeseries';\n\nimport {\n  findEndpoint,\n  findAttribute,\n  addTicketAlarm,\n  getValueModelFromEntry,\n  safeDeleteNode,\n} from './utils';\nimport { SingletonServiceTimeseries } from './SingletonTimeSeries';\nimport { SpinalAttribute } from 'spinal-models-documentation';\nimport * as algo from '../algorithms/algorithms';\nimport axios from 'axios';\nimport { stringify } from 'qs';\n\n/**\n * This class handles most of the logic for analytics. It provides methods for creating and retrieving analytics, entities, and contexts.\n * It also provides methods for applying tracking methods to followed entities and applying algorithms to inputs.\n *\n * @export\n * @class AnalyticService\n */\nexport default class AnalyticService {\n  /**\n   * The singleton instance of the Timeseries service.\n   *\n   * @private\n   * @type {SpinalServiceTimeseries}\n   * @memberof AnalyticService\n   */\n  private spinalServiceTimeseries: SpinalServiceTimeseries =\n    SingletonServiceTimeseries.getInstance();\n  /**\n   * The Twilio phone number to use for sending SMS messages.\n   *\n   * @private\n   * @type {(string | undefined)}\n   * @memberof AnalyticService\n   */\n  private twilioFromNumber: string | undefined;\n  /**\n   * The Twilio account SID to use for sending SMS messages.\n   *\n   * @private\n   * @type {(string | undefined)}\n   * @memberof AnalyticService\n   */\n  private twilioAccountSid: string | undefined;\n  /**\n   * The Twilio auth token to use for sending SMS messages.\n   *\n   * @private\n   * @type {(string | undefined)}\n   * @memberof AnalyticService\n   */\n  private twilioAuthToken: string | undefined;\n\n  //private googleChatService: GoogleChatService;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor() {}\n\n  /**\n   * Initialize private attributes with necessary information to use the the messaging service.\n   *\n   * @param {string} accountSid\n   * @param {string} authToken\n   * @param {string} fromNumber\n   * @return {*}  {void}\n   * @memberof AnalyticService\n   */\n  public initTwilioCredentials(\n    accountSid: string,\n    authToken: string,\n    fromNumber: string\n  ): void {\n    if (!accountSid || !authToken || !fromNumber) {\n      console.error(\n        'Twilio credentials not set, Messaging services will not work'\n      );\n      return;\n    }\n    console.log('Init connection to messaging services...');\n    this.twilioFromNumber = fromNumber;\n    this.twilioAccountSid = accountSid;\n    this.twilioAuthToken = authToken;\n    console.log('Done.');\n  }\n\n  /**\n   * This method creates a new context and returns the info of the newly created context.\n   * If the context already exists (same name), it just returns the info of that context instead of creating a new one.\n   * @param {string} contextName\n   * @return {*}  {Promise<SpinalNodeRef>}\n   * @memberof AnalyticService\n   */\n  public async createContext(contextName: string): Promise<SpinalNodeRef> {\n    const alreadyExists = this.getContext(contextName);\n    if (alreadyExists) {\n      console.error(`Context ${contextName} already exists`);\n      return alreadyExists;\n    }\n    return SpinalGraphService.addContext(\n      contextName,\n      CONSTANTS.CONTEXT_TYPE,\n      undefined\n    ).then((context) => {\n      const contextId = context.getId().get();\n      return SpinalGraphService.getInfo(contextId);\n    });\n  }\n\n  /**\n   * Retrieves and returns all contexts\n   * handled by this service (type analysisContext)\n   * @return {*}  {(SpinalNodeRef[] | undefined)}\n   * @memberof AnalyticService\n   */\n  public getContexts(): SpinalNodeRef[] | undefined {\n    const contexts = SpinalGraphService.getContextWithType(\n      CONSTANTS.CONTEXT_TYPE\n    );\n    const argContexts = contexts.map((el) =>\n      SpinalGraphService.getInfo(el.info.id.get())\n    );\n    return argContexts;\n  }\n\n  /**\n   * This method use the context name to find and return the info of that context. If the context does not exist, it returns undefined.\n   * If multiple contexts have the same name, it returns the first one.\n   * @param {string} contextName\n   * @return {*}  {(SpinalNodeRef | undefined)}\n   * @memberof AnalyticService\n   */\n  public getContext(contextName: string): SpinalNodeRef | undefined {\n    const contexts = this.getContexts();\n    if (!contexts) return undefined;\n    return contexts.find((context) => context.name.get() === contextName);\n  }\n\n  public getContextIdOfAnalytic(analyticId: string): string | undefined {\n    const contexts = this.getContexts();\n    if (!contexts) return undefined;\n    const analyticNode = SpinalGraphService.getRealNode(analyticId);\n\n    const contextId = analyticNode.getContextIds()[0];\n    return contextId;\n  }\n\n  ////////////////////////////////////////////////////\n  /////////////////// ENTITY /////////////////////////\n  ////////////////////////////////////////////////////\n\n  /**\n   * This method creates a new entity and returns the info of the newly created entity.\n   *\n   * @param {IEntity} entityInfo\n   * @param {string} contextId\n   * @return {*}  {Promise<SpinalNodeRef>}\n   * @memberof AnalyticService\n   */\n  public async addEntity(\n    entityInfo: IEntity,\n    contextId: string\n  ): Promise<SpinalNodeRef> {\n    entityInfo.type = CONSTANTS.ENTITY_TYPE;\n    const entityModel = new EntityModel(entityInfo);\n    const entityNodeId = SpinalGraphService.createNode(entityInfo, entityModel);\n    await SpinalGraphService.addChildInContext(\n      contextId,\n      entityNodeId,\n      contextId,\n      CONSTANTS.CONTEXT_TO_ENTITY_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    return SpinalGraphService.getInfo(entityNodeId);\n  }\n\n  /**\n   * Returns all the entities withing a context that have the specified type.\n   *\n   * @param {SpinalContext<any>} context\n   * @param {string} targetType\n   * @return {*}  {(Promise<SpinalNode<any> | undefined>)}\n   * @memberof AnalyticService\n   */\n  public async findEntityByTargetType(\n    context: SpinalContext<any>,\n    targetType: string\n  ): Promise<SpinalNode<any> | undefined> {\n    const entities = await context.getChildren(\n      CONSTANTS.CONTEXT_TO_ENTITY_RELATION\n    );\n    const result = entities.find((e) => e.info.entityType.get() == targetType);\n    (<any>SpinalGraphService)._addNode(result);\n    return result;\n  }\n\n  /**\n   * Retrieves a SpinalNodeRef for the specified entity within the specified context.\n   * @async\n   * @param {string} contextName - The name of the context to search within.\n   * @param {string} entityName - The name of the entity to retrieve.\n   * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the SpinalNodeRef for the entity, or undefined if the context or entity cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getEntity(\n    contextName: string,\n    entityName: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const context = this.getContext(contextName);\n    if (!context) return undefined;\n    const contextNode = SpinalGraphService.getRealNode(context.id.get());\n    const entities = await contextNode.getChildren(\n      CONSTANTS.CONTEXT_TO_ENTITY_RELATION\n    );\n    const entitiesModels = entities.map((el) =>\n      SpinalGraphService.getInfo(el.info.id.get())\n    );\n    return entitiesModels.find((entity) => entity.name.get() === entityName);\n  }\n\n  /**\n   * Retrieves the parent entity of the specified analytic.\n   * @async\n   * @param {string} analyticId - The ID of the analytic for which to retrieve the parent entity.\n   * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the parent entity, or undefined if the parent entity cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getEntityFromAnalytic(\n    analyticId: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const nodes = await SpinalGraphService.getParents(analyticId, [\n      CONSTANTS.ENTITY_TO_ANALYTIC_RELATION,\n    ]);\n    if (nodes.length != 0) {\n      return nodes[0];\n    }\n    return undefined;\n  }\n\n  ////////////////////////////////////////////////////\n  //////////////// Analytic //////////////////////////\n  ////////////////////////////////////////////////////\n\n  /**\n   * Adds a new analytic to the specified entity within the specified context.\n   * @async\n   * @param {IAnalytic} analyticInfo - The information for the new analytic to add.\n   * @param {string} contextId - The ID of the context in which to add the analytic.\n   * @param {string} entityId - The ID of the entity to which to add the analytic.\n   * @returns {Promise<SpinalNodeRef>} A Promise that resolves to the newly created analytic info.\n   * @memberof AnalyticService\n   */\n  public async addAnalytic(\n    analyticInfo: IAnalytic,\n    contextId: string,\n    entityId: string\n  ): Promise<SpinalNodeRef> {\n    analyticInfo.type = CONSTANTS.ANALYTIC_TYPE;\n    const analyticModel = new AnalyticModel(analyticInfo);\n    const analyticNodeId = SpinalGraphService.createNode(\n      analyticInfo,\n      analyticModel\n    );\n    await SpinalGraphService.addChildInContext(\n      entityId,\n      analyticNodeId,\n      contextId,\n      CONSTANTS.ENTITY_TO_ANALYTIC_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n\n    await this.addInputsNode(analyticNodeId, contextId);\n    await this.addOutputsNode(analyticNodeId, contextId);\n\n    return SpinalGraphService.getInfo(analyticNodeId);\n  }\n\n  /**\n   * Retrieves all analytics within the specified context.\n   * @async\n   * @param {string} contextId - The ID of the context in which to retrieve analytics.\n   * @returns {Promise<SpinalNodeRef[]>} A Promise that resolves to an array of SpinalNodeRefs for all analytics in the context.\n   * @memberof AnalyticService\n   */\n  public async getAllAnalytics(contextId: string): Promise<SpinalNodeRef[]> {\n    const analytics = await SpinalGraphService.findInContext(\n      contextId,\n      contextId,\n      (node: SpinalNode<any>) => {\n        if (node.getType().get() === CONSTANTS.ANALYTIC_TYPE) {\n          (<any>SpinalGraphService)._addNode(node);\n          return true;\n        }\n        return false;\n      }\n    );\n    return analytics;\n  }\n\n  /**\n   * Retrieves the SpinalNodeRef for the specified analytic within the specified context.\n   * @async\n   * @param {string} contextId - The ID of the context in which to search for the analytic.\n   * @param {string} analyticName - The name of the analytic to retrieve.\n   * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the SpinalNodeRef for the analytic, or undefined if the analytic cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getAnalytic(\n    contextId: string,\n    analyticName: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const analytics = await SpinalGraphService.findInContext(\n      contextId,\n      contextId,\n      (node: SpinalNode<any>) => {\n        if (node.getType().get() === CONSTANTS.ANALYTIC_TYPE) {\n          (<any>SpinalGraphService)._addNode(node);\n          return true;\n        }\n        return false;\n      }\n    );\n    const analytic = analytics.find(\n      (el: SpinalNode<any>) => el.info.name.get() == analyticName\n    );\n    return SpinalGraphService.getInfo(analytic.id.get());\n  }\n\n  /**\n   * Adds an Inputs node to the specified analytic within the specified context.\n   * @async\n   * @param {string} analyticId - The ID of the analytic to which to add the Inputs node.\n   * @param {string} contextId - The ID of the context in which to add the Inputs node.\n   * @returns {Promise<SpinalNodeRef>} A Promise that resolves to the newly created Inputs node.\n   * @memberof AnalyticService\n   */\n  private async addInputsNode(\n    analyticId: string,\n    contextId: string\n  ): Promise<SpinalNodeRef> {\n    const inputsInfo: IInputs = {\n      name: 'Inputs',\n      description: '',\n      type: CONSTANTS.INPUTS_TYPE,\n    };\n    const inputsModel = new InputsModel(inputsInfo);\n    const inputsId = SpinalGraphService.createNode(inputsInfo, inputsModel);\n    await SpinalGraphService.addChildInContext(\n      analyticId,\n      inputsId,\n      contextId,\n      CONSTANTS.ANALYTIC_TO_INPUTS_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    return SpinalGraphService.getInfo(inputsId);\n  }\n\n  /**\n   * Adds an Outputs node to the specified analytic within the specified context.\n   * @async\n   * @param {string} analyticId - The ID of the analytic to which to add the Outputs node.\n   * @param {string} contextId - The ID of the context in which to add the Outputs node.\n   * @returns {Promise<SpinalNodeRef>} A Promise that resolves to the newly created Outputs node.\n   * @memberof AnalyticService\n   */\n  private async addOutputsNode(\n    analyticId: string,\n    contextId: string\n  ): Promise<SpinalNodeRef> {\n    const outputsInfo: IOutputs = {\n      name: 'Outputs',\n      description: '',\n      type: CONSTANTS.OUTPUTS_TYPE,\n    };\n    const outputsModel = new OutputsModel(outputsInfo);\n    const outputsId = SpinalGraphService.createNode(outputsInfo, outputsModel);\n    await SpinalGraphService.addChildInContext(\n      analyticId,\n      outputsId,\n      contextId,\n      CONSTANTS.ANALYTIC_TO_OUTPUTS_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    return SpinalGraphService.getInfo(outputsId);\n  }\n\n  /**\n   * Adds a new Config node to the specified analytic within the specified context, with the specified attributes.\n   *\n   * @param {INodeDocumentation} configAttributes - The attributes to add to the Config node.\n   * @param {string} analyticId - The ID of the analytic to which to add the Config node.\n   * @param {string} contextId - The ID of the context in which to add the Config node.\n   * @return {*}  {Promise<SpinalNodeRef>}\n   * @memberof AnalyticService\n   */\n  public async addConfig(\n    configAttributes: INodeDocumentation,\n    analyticId: string,\n    contextId: string\n  ): Promise<SpinalNodeRef> {\n    const configNodeInfo = { name: 'Config', type: CONSTANTS.CONFIG_TYPE };\n    const configModel = new ConfigModel(configNodeInfo);\n    const configId = SpinalGraphService.createNode(configNodeInfo, configModel);\n    const configNode = await SpinalGraphService.addChildInContext(\n      analyticId,\n      configId,\n      contextId,\n      CONSTANTS.ANALYTIC_TO_CONFIG_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n\n    this.addAttributesToNode(configNode, configAttributes);\n    return SpinalGraphService.getInfo(configId);\n  }\n\n  /**\n   * Retrieves the Config node for the specified analytic\n   *\n   * @async\n   * @param {string} analyticId - The ID of the analytic for which to retrieve the Config node.\n   * @return {*}  {(Promise<SpinalNodeRef | undefined>)} A Promise that resolves to the Config node, or undefined if the Config node cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getConfig(\n    analyticId: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const nodes = await SpinalGraphService.getChildren(analyticId, [\n      CONSTANTS.ANALYTIC_TO_CONFIG_RELATION,\n    ]);\n    if (nodes.length === 0) return undefined;\n    return SpinalGraphService.getInfo(nodes[0].id.get());\n  }\n\n  /**\n   * Retrieves the Inputs node for the specified analytic.\n   * @async\n   * @param {string} analyticId - The ID of the analytic for which to retrieve the Inputs node.\n   * @return {*}  {(Promise<SpinalNodeRef | undefined>)} - A Promise that resolves to the Inputs node, or undefined if the Inputs node cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getInputsNode(\n    analyticId: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const nodes = await SpinalGraphService.getChildren(analyticId, [\n      CONSTANTS.ANALYTIC_TO_INPUTS_RELATION,\n    ]);\n    if (nodes.length === 0) return undefined;\n    return SpinalGraphService.getInfo(nodes[0].id.get());\n  }\n\n  /**\n   * Retrieves the Outputs node for the specified analytic.\n   * @async\n   * @param {string} analyticId - The ID of the analytic for which to retrieve the Outputs node.\n   * @returns {*} {(Promise<SpinalNodeRef | undefined>)} - A Promise that resolves to the Outputs node, or undefined if the Outputs node cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getOutputsNode(\n    analyticId: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const nodes = await SpinalGraphService.getChildren(analyticId, [\n      CONSTANTS.ANALYTIC_TO_OUTPUTS_RELATION,\n    ]);\n    if (nodes.length === 0) return undefined;\n    return SpinalGraphService.getInfo(nodes[0].id.get());\n  }\n\n  public async deleteInputsNode(analyticId: string): Promise<void> {\n    const inputsNode = await this.getInputsNode(analyticId);\n    if (inputsNode) await safeDeleteNode(inputsNode.id.get(), false);\n  }\n\n  public async deleteOutputsNode(\n    analyticId: string,\n    shouldDeleteChildren = false\n  ): Promise<void> {\n    const outputsNode = await this.getOutputsNode(analyticId);\n    if (outputsNode)\n      await safeDeleteNode(outputsNode.id.get(), shouldDeleteChildren);\n  }\n\n  public async deleteAnalytic(\n    analyticId: string,\n    shouldDeleteChildren = false\n  ): Promise<void> {\n    const inputsNode = await this.getInputsNode(analyticId);\n    const outputsNode = await this.getOutputsNode(analyticId);\n    if (inputsNode) await safeDeleteNode(inputsNode.id.get());\n    if (outputsNode)\n      await safeDeleteNode(outputsNode.id.get(), shouldDeleteChildren);\n    await safeDeleteNode(analyticId);\n  }\n\n  ////////////////////////////////////////////////////\n  //////////////// TRACKED VARIABLE //////////////////\n  ////////////////////////////////////////////////////\n\n  /**\n   * Adds a new Tracking Method node to the specified Input node within the specified context.\n   * @async\n   * @param {INodeDocumentation} trackingMethodAttributes\n   * @param {string} contextId - The ID of the context in which to add the Tracking Method node.\n   * @param {string} inputId - The ID of the Input node to which to add the Tracking Method node.\n   * @return {*}  {Promise<SpinalNodeRef>} - A Promise that resolves to the newly created Tracking Method node.\n   * @memberof AnalyticService\n   */\n  public async addTrackingMethod(\n    trackingMethodAttributes: INodeDocumentation,\n    contextId: string,\n    inputId: string\n  ): Promise<SpinalNodeRef> {\n    const trackingMethodNodeInfo = {\n      name: 'TrackingMethod',\n      type: CONSTANTS.TRACKING_METHOD_TYPE,\n    };\n    const trackingMethodModel = new TrackingMethodModel(trackingMethodNodeInfo);\n    const trackingMethodNodeId = SpinalGraphService.createNode(\n      trackingMethodNodeInfo,\n      trackingMethodModel\n    );\n    const createdNode = await SpinalGraphService.addChildInContext(\n      inputId,\n      trackingMethodNodeId,\n      contextId,\n      CONSTANTS.ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n\n    this.addAttributesToNode(createdNode, trackingMethodAttributes);\n    return SpinalGraphService.getInfo(trackingMethodNodeId);\n  }\n\n  /**\n   * Adds a new Tracking Method node to the Inputs node of the specified analytic within the specified context.\n   *\n   * @async\n   * @param {INodeDocumentation} trackingMethodAttributes - The attributes to add to the Tracking Method node.\n   * @param {string} contextId - The ID of the context in which to add the Tracking Method node.\n   * @param {string} analyticId - The ID of the analytic for which to add the Tracking Method node.\n   * @return {*}  {Promise<SpinalNodeRef>} - A Promise that resolves to the newly created Tracking Method node.\n   * @memberof AnalyticService\n   */\n  public async addInputTrackingMethod(\n    trackingMethodAttributes: INodeDocumentation,\n    contextId: string,\n    analyticId: string\n  ): Promise<SpinalNodeRef> {\n    const inputs = await this.getInputsNode(analyticId);\n    if (inputs === undefined) throw Error('Inputs node not found');\n    return this.addTrackingMethod(\n      trackingMethodAttributes,\n      contextId,\n      inputs.id.get()\n    );\n  }\n\n  /**\n   * Retrieves all Tracking Method nodes associated with the Inputs node of the specified analytic.\n   * @async\n   * @param {string} analyticId - The ID of the analytic for which to retrieve the Tracking Method nodes.\n   * @returns {Promise<SpinalNodeRef[]|undefined>} A Promise that resolves to an array of Tracking Method nodes, or undefined if the Inputs node or Tracking Method nodes cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getTrackingMethods(\n    analyticId: string\n  ): Promise<SpinalNodeRef[] | undefined> {\n    const inputs = await this.getInputsNode(analyticId);\n    if (inputs === undefined) return undefined;\n    const nodes = await SpinalGraphService.getChildren(inputs.id.get(), [\n      CONSTANTS.ANALYTIC_INPUTS_TO_TRACKING_METHOD_RELATION,\n    ]);\n    return nodes;\n  }\n\n  /**\n   * Retrieves the first Tracking Method node associated with the Inputs node of the specified analytic.\n   * @async\n   * @param {string} analyticId - The ID of the analytic for which to retrieve the Tracking Method node.\n   * @returns {Promise<SpinalNodeRef|undefined>} A Promise that resolves to the first Tracking Method node, or undefined if the Inputs node or Tracking Method nodes cannot be found.\n   * @memberof AnalyticService\n   */\n  public async getTrackingMethod(\n    analyticId: string\n  ): Promise<SpinalNodeRef | undefined> {\n    const trackingMethods = await this.getTrackingMethods(analyticId);\n    if (trackingMethods === undefined) return undefined;\n    return trackingMethods[0];\n  }\n\n  /**\n   * Removes the specified Tracking Method node from the specified Inputs node and deletes it from the graph.\n   * @async\n   * @param {string} inputId - The ID of the Inputs node from which to remove the Tracking Method node.\n   * @param {string} trackingMethodId - The ID of the Tracking Method node to remove and delete.\n   * @returns {Promise<void>} A Promise that resolves when the Tracking Method node has been removed and deleted.\n   * @memberof AnalyticService\n   */\n  public async removeTrackingMethod(\n    inputId: string,\n    trackingMethodId: string\n  ): Promise<void> {\n    await SpinalGraphService.removeChild(\n      inputId,\n      trackingMethodId,\n      CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    await SpinalGraphService.removeFromGraph(trackingMethodId);\n  }\n\n  /**\n   * Removes the specified Tracking Method node from the Inputs node of the specified analytic and deletes it from the graph.\n   * @async\n   * @param {string} analyticId - The ID of the analytic from which to remove the Tracking Method node.\n   * @param {string} trackingMethodId - The ID of the Tracking Method node to remove and delete.\n   * @throws {Error} Throws an error if the Inputs node cannot be found.\n   * @returns {Promise<void>} A Promise that resolves when the Tracking Method node has been removed and deleted.\n   * @memberof AnalyticService\n   */\n  public async removeInputTrackingMethod(\n    analyticId: string,\n    trackingMethodId: string\n  ): Promise<void> {\n    const inputs = await this.getInputsNode(analyticId);\n    if (inputs === undefined) throw Error('Inputs node not found');\n    await this.removeTrackingMethod(inputs.id.get(), trackingMethodId);\n  }\n\n  /**\n   *\n   * @async\n   * @param {string} trackMethod - The type of filter.\n   * @param {string} filterValue - The filter value to use.\n   * @param {SpinalNodeRef} followedEntity - The SpinalNodeRef object representing the Followed Entity to which the Tracking Method should be applied.\n   * @returns {*} {Promise<SpinalNodeRef[] | SpinalNodeRef | undefined>} - A Promise that resolves with the results of the applied Tracking Method.\n   * @memberof AnalyticService\n   */\n  public async applyTrackingMethodWithParams(\n    followedEntity: SpinalNodeRef,\n    trackMethod: string,\n    filterValue: string,\n    depth: number,\n    strictDepth: boolean,\n    authorizedRelations: string[]\n  ): Promise<SpinalNodeRef | SpinalAttribute | undefined> {\n    if (followedEntity) {\n      switch (trackMethod) {\n        case CONSTANTS.TRACK_METHOD.ENDPOINT_NAME_FILTER: {\n          const endpoint = await findEndpoint(\n            followedEntity.id.get(),\n            filterValue,\n            depth,\n            strictDepth,\n            authorizedRelations,\n            CONSTANTS.ENDPOINT_RELATIONS,\n            CONSTANTS.ENDPOINT_NODE_TYPE\n          );\n          return endpoint;\n        }\n        case CONSTANTS.TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER: {\n          const controlEndpoint = await findEndpoint(\n            followedEntity.id.get(),\n            filterValue,\n            depth,\n            strictDepth,\n            authorizedRelations,\n            CONSTANTS.CONTROL_ENDPOINT_RELATIONS,\n            CONSTANTS.ENDPOINT_NODE_TYPE\n          );\n          return controlEndpoint;\n        }\n        case CONSTANTS.TRACK_METHOD.ATTRIBUTE_NAME_FILTER: {\n          const [first, second] = filterValue.split(':');\n          const foundAttribute = await findAttribute(\n            followedEntity.id.get(),\n            first,\n            second,\n            depth,\n            strictDepth,\n            authorizedRelations\n          );\n          if (foundAttribute == -1) return undefined;\n          return foundAttribute;\n\n          //}\n        }\n        default:\n          console.log('Track method not recognized');\n      }\n    }\n  }\n\n  ////////////////////////////////////////////////////\n  //////////////// FOLLOWED ENTITY ///////////////////\n  ////////////////////////////////////////////////////\n\n  /**\n   * Adds a link between an input and a followed entity.\n   * @param {string} contextId - The id of the context where the link will be created.\n   * @param {string} inputId - The id of the input node.\n   * @param {string} followedEntityId - The id of the followed entity node.\n   * @returns {Promise<SpinalNodeRef>} The linked node.\n   * @memberof AnalyticService\n   */\n  public async addLinkToFollowedEntity(\n    contextId: string,\n    inputId: string,\n    followedEntityId: string\n  ): Promise<SpinalNodeRef> {\n    const link = await SpinalGraphService.addChildInContext(\n      inputId,\n      followedEntityId,\n      contextId,\n      CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    const id = link.info.id.get();\n    return SpinalGraphService.getInfo(id);\n  }\n\n  /**\n   * Adds a link between the input node of the specified analytic and a followed entity.\n   * @param {string} contextId - The id of the context where the link will be created.\n   * @param {string} analyticId - The id of the analytic node.\n   * @param {string} followedEntityId - The id of the followed entity node.\n   * @returns {Promise<SpinalNodeRef>} The linked node.\n   * @memberof AnalyticService\n   */\n  public async addInputLinkToFollowedEntity(\n    contextId: string,\n    analyticId: string,\n    followedEntityId: string\n  ): Promise<SpinalNodeRef> {\n    const inputs = await this.getInputsNode(analyticId);\n    if (inputs === undefined) throw Error('Inputs node not found');\n    return this.addLinkToFollowedEntity(\n      contextId,\n      inputs.id.get(),\n      followedEntityId\n    );\n  }\n\n  /**\n   * Removes the link between an input node and a followed entity node.\n   *\n   * @async\n   * @param {string} analyticId - The ID of the analytic node.\n   * @param {string} followedEntityId - The ID of the followed entity node.\n   * @returns {Promise<void>}\n   * @memberof AnalyticService\n   */\n  public async removeLinkToFollowedEntity(\n    analyticId: string,\n    followedEntityId: string\n  ): Promise<void> {\n    const inputNodeRef = await this.getInputsNode(analyticId);\n    if (inputNodeRef === undefined) throw Error('Inputs node not found');\n    await SpinalGraphService.removeChild(\n      inputNodeRef.id.get(),\n      followedEntityId,\n      CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n  }\n\n  /**\n   * Get the followed entity node of an analytic.\n   * @async\n   * @param {string} analyticId - The id of the analytic.\n   * @returns {Promise<SpinalNodeRef|undefined>} The followed entity node or undefined if it does not exist.\n   * @memberof AnalyticService\n   */\n  public async getFollowedEntity(analyticId: string) {\n    const inputsNode = await this.getInputsNode(analyticId);\n    if (inputsNode === undefined) return undefined;\n    const nodes = await SpinalGraphService.getChildren(inputsNode.id.get(), [\n      CONSTANTS.ANALYTIC_INPUTS_TO_FOLLOWED_ENTITY_RELATION,\n    ]);\n    if (nodes === undefined) return undefined;\n    return nodes[0];\n  }\n\n  ///////////////////////////////////////////////////\n  ///////////////////// GLOBAL //////////////////////\n  ///////////////////////////////////////////////////\n\n  /**\n   * Adds the specified attributes to the node with the specified ID.\n   * @async\n   * @param {SpinalNode<any>} node - The node to which to add the attributes.\n   * @param {INodeDocumentation} attributes - An array of objects representing the attributes to add to the node.\n   * @returns {Promise<void>} A Promise that resolves when the attributes have been added.\n   * @memberof AnalyticService\n   */\n  public async addAttributesToNode(\n    node: SpinalNode<any>,\n    attributes: INodeDocumentation\n  ): Promise<void> {\n    for (const categoryName of Object.keys(attributes)) {\n      for (const attribute of attributes[categoryName]) {\n        await AttributeService.addAttributeByCategoryName(\n          node,\n          categoryName,\n          attribute.name,\n          attribute.value,\n          attribute.type,\n          ''\n        );\n      }\n    }\n  }\n\n  /**\n   * Gets the attributes from a node.\n   *\n   * @param {string} nodeId - The ID of the node from which to retrieve the attributes.\n   * @param {string} category - The category of the attributes to retrieve.\n   * @return {*}  {Promise<any>} An object containing the attributes.\n   * @memberof AnalyticService\n   */\n  public async getAttributesFromNode(\n    nodeId: string,\n    category: string\n  ): Promise<any> {\n    const node = SpinalGraphService.getRealNode(nodeId);\n    const res = {};\n    const parameters = await attributeService.getAttributesByCategory(\n      node,\n      category\n    );\n    for (const param of parameters) {\n      const obj = param.get();\n      res[obj.label] = obj.value;\n    }\n    return res;\n  }\n\n  /**\n   * Gets the attribute from a node.\n   *\n   * @param {string} nodeId - The ID of the node from which to retrieve the attribute.\n   * @param {string} category - The category of the attribute to retrieve.\n   * @param {string} label - The label of the attribute to retrieve.\n   * @return {*}  {Promise<any>}  An object containing the attribute { label: value}.\n   * @memberof AnalyticService\n   */\n  public async getAttributeFromNode(\n    nodeId: string,\n    category: string,\n    label: string\n  ): Promise<any> {\n    const node = SpinalGraphService.getRealNode(nodeId);\n    const parameters = await attributeService.getAttributesByCategory(\n      node,\n      category\n    );\n    for (const param of parameters) {\n      const obj = param.get();\n      if (obj.label === label) return { [obj.label]: obj.value };\n    }\n    return undefined;\n  }\n\n  public async getAllCategoriesAndAttributesFromNode(nodeId: string) {\n    const node = SpinalGraphService.getRealNode(nodeId);\n    const res = {};\n    const categories = await attributeService.getCategory(node);\n    for (const cat of categories) {\n      const categoryName = cat.nameCat;\n      res[categoryName] = {};\n      const attributes = await attributeService.getAttributesByCategory(\n        node,\n        categoryName\n      );\n      for (const attribute of attributes) {\n        const obj = attribute.get();\n        res[categoryName][obj.label] = obj.value;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Gets the targeted entities for an analytic.\n   *\n   * @param {string} analyticId The ID of the analytic.\n   * @return {*}  {(Promise<SpinalNodeRef[]|undefined>)} An array of SpinalNodeRefs for the entities\n   * @memberof AnalyticService\n   */\n  public async getWorkingFollowedEntities(\n    analyticId: string\n  ): Promise<SpinalNodeRef[] | undefined> {\n    const followedEntity = await this.getFollowedEntity(analyticId);\n    const trackingMethod = await this.getTrackingMethod(analyticId);\n    const config = await this.getConfig(analyticId);\n    const entityInfo = await this.getEntityFromAnalytic(analyticId);\n    if (!entityInfo) return;\n    const entityType: string = entityInfo.entityType.get();\n    if (followedEntity && trackingMethod && config) {\n      if (entityType == followedEntity.type.get()) {\n        // we can continue as planned\n        return [followedEntity];\n      }\n      if (\n        followedEntity.type.get().includes('group') ||\n        followedEntity.type.get().includes('Group')\n      ) {\n        console.log(\n          'Anchor entity is a group, trying to find the correct entities with the relation name: ',\n          CONSTANTS.GROUP_RELATION_PREFIX + entityType\n        );\n        return await SpinalGraphService.getChildren(followedEntity.id.get(), [\n          CONSTANTS.GROUP_RELATION_PREFIX + entityType,\n        ]);\n      }\n      if (\n        followedEntity.type.get().includes('context') ||\n        followedEntity.type.get().includes('Context')\n      ) {\n        console.log(\n          'Anchor entity is a context, trying to find the correct entities'\n        );\n        return await SpinalGraphService.findInContextByType(\n          followedEntity.id.get(),\n          followedEntity.id.get(),\n          entityType\n        );\n      }\n      console.log(\n        'Failed to deduct the correct entities from the anchor entity'\n      );\n      return [];\n    }\n  }\n\n  public async getWorkingFollowedEntitiesWithParam(\n    followedEntity: SpinalNodeRef,\n    entityType: string\n  ): Promise<SpinalNodeRef[]> {\n    if (entityType == followedEntity.type.get()) {\n      // we can continue as planned\n      return [followedEntity];\n    }\n    if (\n      followedEntity.type.get().includes('group') ||\n      followedEntity.type.get().includes('Group')\n    ) {\n      console.log(\n        'Anchor entity is a group, trying to find the correct entities with the relation name: ',\n        CONSTANTS.GROUP_RELATION_PREFIX + entityType\n      );\n      return await SpinalGraphService.getChildren(followedEntity.id.get(), [\n        CONSTANTS.GROUP_RELATION_PREFIX + entityType,\n      ]);\n    }\n    if (\n      followedEntity.type.get().includes('context') ||\n      followedEntity.type.get().includes('Context')\n    ) {\n      console.log(\n        'Anchor entity is a context, trying to find the correct entities'\n      );\n      return await SpinalGraphService.findInContextByType(\n        followedEntity.id.get(),\n        followedEntity.id.get(),\n        entityType\n      );\n    }\n    console.log('Failed to deduct the correct entities from the anchor entity');\n    return [];\n  }\n\n  public async getEntryDataModelByInputIndex(\n    analyticId: string,\n    followedEntity: SpinalNodeRef,\n    inputIndex: string\n  ): Promise<SpinalNodeRef | SpinalAttribute | undefined> {\n    const trackingMethod = await this.getTrackingMethod(analyticId);\n    if (!trackingMethod) return undefined;\n\n    const inputParams = await this.getAttributesFromNode(\n      trackingMethod.id.get(),\n      inputIndex\n    );\n\n    return await this.applyTrackingMethodWithParams(\n      followedEntity,\n      inputParams[CONSTANTS.ATTRIBUTE_TRACKING_METHOD],\n      inputParams[CONSTANTS.ATTRIBUTE_FILTER_VALUE],\n      inputParams[CONSTANTS.ATTRIBUTE_SEARCH_DEPTH],\n      inputParams[CONSTANTS.ATTRIBUTE_STRICT_DEPTH],\n      inputParams[CONSTANTS.ATTRIBUTE_SEARCH_RELATIONS].split(\n        CONSTANTS.ATTRIBUTE_VALUE_SEPARATOR\n      )\n    );\n  }\n\n  public async getFormattedInputDataByIndex(\n    analyticId: string,\n    followedEntity: SpinalNodeRef,\n    inputIndex: string\n  ): Promise<any[]> {\n    const input: any[] = [];\n    const entryDataModel = await this.getEntryDataModelByInputIndex(\n      analyticId,\n      followedEntity,\n      inputIndex\n    );\n    if (!entryDataModel) return input;\n    const trackingMethod = await this.getTrackingMethod(analyticId);\n    if (!trackingMethod) return input;\n    const trackingParams = await this.getAttributesFromNode(\n      trackingMethod.id.get(),\n      inputIndex\n    );\n    if (\n      !trackingParams[CONSTANTS.ATTRIBUTE_TIMESERIES] ||\n      trackingParams[CONSTANTS.ATTRIBUTE_TIMESERIES] == 0\n    ) {\n      const currentValue = await getValueModelFromEntry(entryDataModel);\n      input.push(currentValue.get());\n    } else {\n      const spinalTs = await this.spinalServiceTimeseries.getOrCreateTimeSeries(\n        entryDataModel.id.get()\n      );\n      const end = Date.now();\n      const start = end - trackingParams[CONSTANTS.ATTRIBUTE_TIMESERIES];\n      const data = await spinalTs.getFromIntervalTime(start, end);\n\n      //add fictive data copying last value to currentTime.\n      if (data.length != 0) {\n        data.push({ date: end, value: data[data.length - 1].value });\n      }\n      //const dataValues = data.map((el) => el.value);\n      input.push(data);\n    }\n    return input;\n  }\n\n  public findExecutionOrder(dependencies): string[] | null {\n    const graph: { [key: string]: string[] } = {};\n    const visited: { [key: string]: boolean } = {};\n    const stack: string[] = [];\n\n    // Create graph from dependency map\n    for (const algo of Object.keys(dependencies)) {\n      graph[algo] = graph[algo] || [];\n      const dependency = dependencies[algo];\n      graph[dependency] = graph[dependency] || [];\n      graph[dependency].push(algo);\n    }\n    const visit = (node: string) => {\n      if (!visited[node]) {\n        visited[node] = true;\n        if (graph[node]) {\n          for (const neighbor of graph[node]) {\n            visit(neighbor);\n          }\n        }\n        stack.push(node);\n      }\n    };\n\n    for (const node of Object.keys(graph)) {\n      if (!visited[node]) {\n        visit(node);\n      }\n    }\n\n    // Check for circular dependencies (not handled in this simple implementation)\n    for (const node of Object.keys(graph)) {\n      if (stack.indexOf(node) > stack.indexOf(dependencies[node])) {\n        return null; // Circular dependency detected\n      }\n    }\n\n    return stack.filter((x) => x.startsWith('A'));\n  }\n\n  private filterAlgorithmParametersAttributesByIndex(\n    algoParams: any,\n    indexName: string\n  ) {\n    const result = {};\n    for (const key in algoParams) {\n      if (key.startsWith(indexName)) {\n        const newKey = key.replace(\n          indexName + CONSTANTS.ATTRIBUTE_SEPARATOR,\n          ''\n        );\n        result[newKey] = algoParams[key];\n      }\n    }\n\n    return result;\n  }\n\n  private async recExecuteAlgorithm(\n    analyticId: string,\n    entity: SpinalNodeRef,\n    algoIndexName: string,\n    ioDependencies: any,\n    algoIndexMapping: any,\n    algoParams: any\n  ): Promise<any> {\n    const inputs: any[] = [];\n    const myDependencies = ioDependencies[algoIndexName].split(\n      CONSTANTS.ATTRIBUTE_VALUE_SEPARATOR\n    );\n    for (const dependency of myDependencies) {\n      // if dependency is an algorithm then rec call with that algorithm\n      if (dependency.startsWith('A')) {\n        // save the result of the algorithm in the inputs array\n        const res = await this.recExecuteAlgorithm(\n          analyticId,\n          entity,\n          dependency,\n          ioDependencies,\n          algoIndexMapping,\n          algoParams\n        );\n        if (res == undefined) return undefined;\n        inputs.push(res);\n      } else {\n        // if dependency is an input then get the value of the input\n        const inputData = await this.getFormattedInputDataByIndex(\n          analyticId,\n          entity,\n          dependency\n        );\n        if (inputData.length == 0) return undefined;\n        inputs.push(inputData);\n      }\n    }\n    // after the inputs are ready we can execute the algorithm\n    const algorithm_name = algoIndexMapping[algoIndexName];\n    const algorithmParameters = this.filterAlgorithmParametersAttributesByIndex(\n      algoParams,\n      algoIndexName\n    );\n    const result = algo[algorithm_name].run(inputs, algorithmParameters);\n    //console.log('result :', result);\n    return result;\n  }\n\n  /**\n   * Performs an analysis on an entity for an analytic.\n   * @param {string} analyticId The ID of the analytic.\n   * @param {SpinalNodeRef} entity The SpinalNodeRef for the entity to analyze.\n   * @returns {*} {Promise<void>}\n   * @memberof AnalyticService\n   */\n  public async doAnalysisOnEntity(\n    analyticId: string,\n    entity: SpinalNodeRef\n  ): Promise<IResult> {\n    //Get the io dependencies of the analytic\n    const configNode = await this.getConfig(analyticId);\n    if (!configNode) return { success: false, error: 'No config node found' };\n\n    const ioDependencies = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_IO_DEPENDENCIES\n    );\n    const algoIndexMapping = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING\n    );\n    const algoParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS\n    );\n\n    const R = ioDependencies['R'];\n    const result = await this.recExecuteAlgorithm(\n      analyticId,\n      entity,\n      R,\n      ioDependencies,\n      algoIndexMapping,\n      algoParams\n    );\n    return this.applyResult(result, analyticId, configNode, entity);\n  }\n\n  /**\n   * Performs an analysis on all entities for an analytic.\n   * @param {string} analyticId The ID of the analytic.\n   * @return {*}  {Promise<void>}\n   * @memberof AnalyticService\n   */\n  public async doAnalysis(analyticId: string): Promise<IResult[]> {\n    const entities = await this.getWorkingFollowedEntities(analyticId);\n    if (!entities) return [{ success: false, error: 'No entities found' }];\n    const results: IResult[] = [];\n    for (const entity of entities) {\n      const result = await this.doAnalysisOnEntity(analyticId, entity);\n      results.push(result);\n    }\n    return results;\n  }\n\n  ///////////////////////////////////////////////////\n  ///////////////// RESULT HANDLING /////////////////\n  ///////////////////////////////////////////////////\n  /**\n   * Applies the result of an algorithm.\n   *\n   * @param {*} result The result of the algorithm used.\n   * @param {string} analyticId The ID of the analytic.\n   * @param {SpinalNodeRef} configNode The SpinalNodeRef of the configuration of the analytic.\n   * @param {SpinalNodeRef} followedEntityNode The SpinalNodeRef of the entity.\n   * @return {*}\n   * @memberof AnalyticService\n   */\n  public async applyResult(\n    result: any,\n    analyticId: string,\n    configNode: SpinalNodeRef,\n    followedEntityNode: SpinalNodeRef\n  ): Promise<IResult> {\n    if (result === undefined)\n      return { success: false, error: 'Result is undefined' };\n    const params = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS\n    );\n\n    switch (params[CONSTANTS.ATTRIBUTE_RESULT_TYPE]) {\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.TICKET:\n        await this.handleTicketResult(\n          result,\n          analyticId,\n          configNode,\n          followedEntityNode,\n          params,\n          'Ticket'\n        );\n        return {\n          success: true,\n          error: '',\n          resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.TICKET,\n        };\n\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.CONTROL_ENDPOINT:\n        await this.handleControlEndpointResult(\n          result,\n          followedEntityNode,\n          params\n        );\n        return {\n          success: true,\n          error: '',\n          resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.CONTROL_ENDPOINT,\n        };\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.ENDPOINT:\n        await this.handleEndpointResult(result, followedEntityNode, params);\n        return {\n          success: true,\n          error: '',\n          resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.ENDPOINT,\n        };\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.ALARM:\n        await this.handleTicketResult(\n          result,\n          analyticId,\n          configNode,\n          followedEntityNode,\n          params,\n          'Alarm'\n        );\n        return {\n          success: true,\n          error: '',\n          resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.ALARM,\n        };\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.SMS:\n        await this.handleSMSResult(result, configNode, followedEntityNode);\n        return {\n          success: true,\n          error: '',\n          resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.SMS,\n        };\n\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.LOG:\n        console.log(\n          `LOG : ${\n            params[CONSTANTS.ATTRIBUTE_RESULT_NAME]\n          } \\t|\\t Result : ${result}`\n        );\n        return {\n          success: true,\n          error: '',\n          resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.LOG,\n        };\n\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE:\n        if (!result) return { success: false, error: 'False result' };\n        return this.handleGChatMessageResult(configNode, followedEntityNode);\n\n      case CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD:\n        if (!result) return { success: false, error: 'False result' };\n        return this.handleGChatOrganCardResult(configNode, followedEntityNode);\n\n      default:\n        return { success: false, error: 'Result type not recognized' };\n    }\n  }\n\n  /**\n   * Handles the result of an algorithm that creates a ticket or an alarm.\n   *\n   * @private\n   * @param {*} result\n   * @param {string} analyticId\n   * @param {SpinalNodeRef} configNode\n   * @param {SpinalNodeRef} followedEntityNode\n   * @param {*} params\n   * @param {string} ticketType\n   * @return {*}  {Promise<void>}\n   * @memberof AnalyticService\n   */\n  private async handleTicketResult(\n    result: any,\n    analyticId: string,\n    configNode: SpinalNodeRef,\n    followedEntityNode: SpinalNodeRef,\n    params: any,\n    ticketType: string // Alarm or Ticket\n  ): Promise<void> {\n    if (!result) return;\n\n    const outputNode = await this.getOutputsNode(analyticId);\n    if (!outputNode) return;\n\n    const analyticContextId = this.getContextIdOfAnalytic(analyticId);\n    if (!analyticContextId) return;\n\n    const ticketInfo = {\n      name: `${\n        params[CONSTANTS.ATTRIBUTE_RESULT_NAME]\n      } : ${followedEntityNode.name.get()}`,\n    };\n\n    addTicketAlarm(\n      ticketInfo,\n      configNode,\n      analyticContextId,\n      outputNode.id.get(),\n      followedEntityNode.id.get(),\n      ticketType\n    );\n  }\n\n  /**\n   * Handles the result of an algorithm that modifies a control point.\n   *\n   * @private\n   * @param {*} result\n   * @param {SpinalNodeRef} followedEntityNode\n   * @param {*} params\n   * @return {*}  {Promise<void>}\n   * @memberof AnalyticService\n   */\n  private async handleControlEndpointResult(\n    result: any,\n    followedEntityNode: SpinalNodeRef,\n    params: any\n  ): Promise<void> {\n    const controlEndpointNode = await findEndpoint(\n      followedEntityNode.id.get(),\n      params[CONSTANTS.ATTRIBUTE_RESULT_NAME],\n      0,\n      true,\n      [],\n      CONSTANTS.CONTROL_ENDPOINT_RELATIONS,\n      CONSTANTS.ENDPOINT_NODE_TYPE\n    );\n    if (!controlEndpointNode) return;\n    const controlEndpoint = await controlEndpointNode.element.load();\n    controlEndpoint.currentValue.set(result);\n    this.spinalServiceTimeseries.pushFromEndpoint(\n      controlEndpointNode.id.get(),\n      result\n    );\n  }\n\n  /**\n   * Handles the result of an algorithm that modifies an Endpoint.\n   *\n   * @private\n   * @param {*} result\n   * @param {SpinalNodeRef} followedEntityNode\n   * @param {*} params\n   * @return {*}  {Promise<void>}\n   * @memberof AnalyticService\n   */\n  private async handleEndpointResult(\n    result: any,\n    followedEntityNode: SpinalNodeRef,\n    params: any\n  ): Promise<void> {\n    const controlEndpointNode = await findEndpoint(\n      followedEntityNode.id.get(),\n      params[CONSTANTS.ATTRIBUTE_RESULT_NAME],\n      0,\n      true,\n      [],\n      CONSTANTS.ENDPOINT_RELATIONS,\n      CONSTANTS.ENDPOINT_NODE_TYPE\n    );\n    if (!controlEndpointNode) return;\n    const controlEndpoint = await controlEndpointNode.element.load();\n    controlEndpoint.currentValue.set(result);\n    this.spinalServiceTimeseries.pushFromEndpoint(\n      controlEndpointNode.id.get(),\n      result\n    );\n  }\n\n  /**\n   * Handles the result of an algorithm that sends an SMS.\n   *\n   * @private\n   * @param {*} result\n   * @param {SpinalNodeRef} configNode\n   * @param {SpinalNodeRef} followedEntityNode\n   * @return {*}  {Promise<void>}\n   * @memberof AnalyticService\n   */\n  private async handleSMSResult(\n    result: any,\n    configNode: SpinalNodeRef,\n    followedEntityNode: SpinalNodeRef\n  ): Promise<void> {\n    console.log('SMS result');\n    if (\n      !this.twilioAccountSid ||\n      !this.twilioAuthToken ||\n      !this.twilioFromNumber ||\n      !result\n    )\n      return;\n    const twilioParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS\n    );\n    const toNumber: string = twilioParams[CONSTANTS.ATTRIBUTE_PHONE_NUMBER];\n    const message = twilioParams[CONSTANTS.ATTRIBUTE_PHONE_MESSAGE];\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${this.twilioAccountSid}/Messages.json`;\n    const entityName: string = followedEntityNode.name\n      .get()\n      .replace(/[0-9]/g, '*');\n    const data = {\n      Body: `Analytic on ${entityName} triggered with the following message : ${message}`,\n      From: this.twilioFromNumber,\n      To: toNumber,\n    };\n    const config = {\n      method: 'POST',\n      headers: { 'content-type': 'application/x-www-form-urlencoded' },\n      auth: {\n        username: this.twilioAccountSid,\n        password: this.twilioAuthToken,\n      },\n      data: stringify(data),\n      url,\n    };\n\n    const axiosResult = await axios(config);\n    console.log({ status: axiosResult.status, data: axiosResult.data });\n  }\n\n  private async handleGChatMessageResult(\n    configNode: SpinalNodeRef,\n    followedEntityNode: SpinalNodeRef\n  ): Promise<IGChatMessageResult> {\n    console.log('Handling Google chat message result');\n    const analyticParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS\n    );\n    const gChatParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS\n    );\n\n    const spaceName = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_SPACE];\n    const message = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_MESSAGE];\n    const analyticDescription =\n      analyticParams[CONSTANTS.ATTRIBUTE_ANALYTIC_DESCRIPTION];\n\n    const resultInfo: IGChatMessageResult = {\n      success: true,\n      error: '',\n      spaceName: spaceName,\n      message: 'The following message has been triggered by an analytic.\\n '+\n      '\\nAnalysis on item : '+ followedEntityNode.name.get()+\n      '\\nDescription : '+ analyticDescription +\n      '\\nMessage : '+ message,\n      resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE,\n    };\n    return resultInfo;\n  }\n\n  private async handleGChatOrganCardResult(\n    configNode: SpinalNodeRef,\n    followedEntityNode: SpinalNodeRef\n  ): Promise<IGChatOrganCardResult|IResultResponse> {\n    console.log('Handling Google chat organ card result');\n    const analyticParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS\n    );\n    const resultParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_RESULT_PARAMETERS\n    );\n    const gChatParams = await this.getAttributesFromNode(\n      configNode.id.get(),\n      CONSTANTS.CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS\n    );\n\n    const title = resultParams[CONSTANTS.ATTRIBUTE_RESULT_NAME];\n    const spaceName: string = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_SPACE];\n    const message: string = gChatParams[CONSTANTS.ATTRIBUTE_GCHAT_MESSAGE];\n    const analyticDescription: string =\n      analyticParams[CONSTANTS.ATTRIBUTE_ANALYTIC_DESCRIPTION];\n\n    const lastPing = await findEndpoint(followedEntityNode.id.get(),'last_ping', 0, true, [], CONSTANTS.ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n    if (!lastPing) return { success: false, error: 'endpoint lastPing not found on organ node' };\n    const lastPingValue = await getValueModelFromEntry(lastPing);\n    const lastPingDate = (new Date(lastPingValue.get())).toString();\n    const parents = await SpinalGraphService.getParents(followedEntityNode.id.get(), 'HasOrgan');\n    let platformName = \"Couldn't find the platform name\";\n    let ipAddress = \"Couldn't find the ip adress\";\n    for (const parent of parents) {\n      if(parent.id.get() == followedEntityNode.platformId?.get()) {\n        platformName = parent.name?.get();\n        ipAddress = parent.ipAdress?.get();\n      }\n    }\n\n\n\n\n    const card: IGChatCard = {\n      header: {\n        title: title,\n        subtitle: new Date().toLocaleDateString(),\n      },\n      sections: [\n        {\n          header: 'Analytic details',\n          widgets: [\n            {\n              keyValue: {\n                topLabel: \"Analytic description\",\n                content: analyticDescription,\n              },\n            },\n            {\n              keyValue: {\n                topLabel: \"Message\",\n                content: message,\n              },\n            },\n          ],\n        },\n        {\n          header: 'Organ details',\n          widgets: [\n            {\n              keyValue: {\n                topLabel: 'Organ name',\n                content: followedEntityNode.name.get(),\n              },\n            },\n            {\n              keyValue: {\n                topLabel: 'Organ type',\n                content: followedEntityNode.organType?.get(),\n              },\n            },\n            {\n              keyValue: {\n                topLabel: 'Last ping',\n                content: lastPingDate,\n              }\n            }\n          ],\n        },\n        {\n          header: 'Platform details',\n          widgets: [\n            {\n              keyValue: {\n                topLabel: 'Platform name',\n                content: platformName,\n              },\n            },\n            {\n              keyValue: {\n                topLabel: 'Platform id',\n                content: followedEntityNode.platformId?.get(),\n              },\n            },\n            {\n              keyValue: {\n                topLabel: 'Ip Address',\n                content: ipAddress,\n              }\n            },\n      \n          ],\n        }\n      ],\n    };\n    const resultInfo: IGChatOrganCardResult = {\n      success: true,\n      error: '',\n      spaceName: spaceName,\n      resultType: CONSTANTS.ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD,\n      card: card,\n    };\n    return resultInfo;\n  }\n}\n\nexport { AnalyticService };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nclass ConfigModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(nodeInfo) {\n        super();\n        this.add_attr(nodeInfo);\n    }\n}\nexports.ConfigModel = ConfigModel;\nspinal_core_connectorjs_type_1.spinalCore.register_models(ConfigModel);\nexports.default = ConfigModel;\n//# sourceMappingURL=ConfigModel.js.map","import { spinalCore, Model } from \"spinal-core-connectorjs_type\";\nimport { IConfig } from \"../interfaces/IConfig\";\n\n\nclass ConfigModel extends Model {\n   constructor(nodeInfo: any) {\n      super();\n      this.add_attr(nodeInfo);\n   }\n}\n\n\n\nspinalCore.register_models(ConfigModel);\nexport default ConfigModel;\nexport {\n   ConfigModel\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntityModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nclass EntityModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(entity) {\n        super();\n        this.add_attr(entity);\n    }\n}\nexports.EntityModel = EntityModel;\nspinal_core_connectorjs_type_1.spinalCore.register_models(EntityModel);\nexports.default = EntityModel;\n//# sourceMappingURL=EntityModel.js.map","import { spinalCore, Model } from \"spinal-core-connectorjs_type\";\nimport { IEntity } from \"../interfaces/IEntity\";\n\n\nclass EntityModel extends Model {\n   constructor(entity: IEntity) {\n      super();\n      this.add_attr(entity);\n   }\n}\n\n\n\nspinalCore.register_models(EntityModel);\nexport default EntityModel;\nexport {\n   EntityModel\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputsModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nclass InputsModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(inputInfo) {\n        super();\n        this.add_attr(inputInfo);\n    }\n}\nexports.InputsModel = InputsModel;\nspinal_core_connectorjs_type_1.spinalCore.register_models(InputsModel);\nexports.default = InputsModel;\n//# sourceMappingURL=InputsModel.js.map","import { spinalCore, Model } from \"spinal-core-connectorjs_type\";\nimport { IInputs } from \"../interfaces/IInputs\";\n\nclass InputsModel extends Model {\n   constructor(inputInfo: IInputs) {\n      super();\n      this.add_attr(inputInfo);\n\n   }\n}\n\n\n\nspinalCore.register_models(InputsModel);\nexport default InputsModel;\nexport {\n    InputsModel\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OutputsModel = void 0;\nconst spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nclass OutputsModel extends spinal_core_connectorjs_type_1.Model {\n    constructor(outputInfo) {\n        super();\n        this.add_attr(outputInfo);\n    }\n}\nexports.OutputsModel = OutputsModel;\nspinal_core_connectorjs_type_1.spinalCore.register_models(OutputsModel);\nexports.default = OutputsModel;\n//# sourceMappingURL=OutputsModel.js.map","import { spinalCore, Model } from \"spinal-core-connectorjs_type\";\nimport { IOutputs } from \"../interfaces/IOutputs\";\n\n\nclass OutputsModel extends Model {\n   constructor(outputInfo: IOutputs) {\n      super();\n      this.add_attr(outputInfo);\n\n   }\n}\n\n\n\nspinalCore.register_models(OutputsModel);\nexport default OutputsModel;\nexport {\n    OutputsModel\n}","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Copyright 2022 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.safeDeleteNode = exports.addTicketAlarm = exports.formatTrackingMethodsToList = exports.getValueModelFromEntry = exports.findAllCategoriesAndAttributes = exports.findAttributes = exports.findAttribute = exports.findEndpoints = exports.findEndpoint = exports.findNodes = exports.getAvailableData = exports.getChoiceRelationsWithDepth = exports.getRelationsWithDepth = exports.getTicketLocalizationParameters = exports.getAlgorithmParameters = void 0;\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst spinal_service_ticket_1 = require(\"spinal-service-ticket\");\nconst spinal_model_bmsnetwork_1 = require(\"spinal-model-bmsnetwork\");\nconst InputDataEndpoint_1 = require(\"../models/InputData/InputDataModel/InputDataEndpoint\");\nconst CONSTANTS = require(\"../constants\");\nconst spinal_models_documentation_1 = require(\"spinal-models-documentation\");\nconst SingletonTimeSeries_1 = require(\"./SingletonTimeSeries\");\nconst serviceTimeseries = SingletonTimeSeries_1.SingletonServiceTimeseries.getInstance();\n/**\n * Uses the documentation service to get the attributes related to the algorithm parameters\n *\n * @export\n * @param {SpinalNodeRef} config\n * @return {*}\n */\nfunction getAlgorithmParameters(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const configNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(config.id.get());\n        const res = {};\n        const algorithmParameters = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(configNode, CONSTANTS.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS);\n        for (const param of algorithmParameters) {\n            const obj = param.get();\n            res[obj.label] = obj.value;\n        }\n        return res;\n    });\n}\nexports.getAlgorithmParameters = getAlgorithmParameters;\n/**\n * Uses the documentation service to get the attributes related to the ticket localization\n * (context and process) parameters\n *\n * @export\n * @param {SpinalNodeRef} config\n * @return {*}\n */\nfunction getTicketLocalizationParameters(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const configNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(config.id.get());\n        const res = {};\n        const localizationParameters = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(configNode, CONSTANTS.CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS);\n        for (const param of localizationParameters) {\n            const obj = param.get();\n            res[obj.label] = obj.value;\n        }\n        return res;\n    });\n}\nexports.getTicketLocalizationParameters = getTicketLocalizationParameters;\nfunction getRelationsWithDepth(nodeId, depth) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const relations = spinal_env_viewer_graph_service_1.SpinalGraphService.getRelationNames(nodeId);\n        if (depth <= 0)\n            return relations;\n        const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId);\n        for (const child of children) {\n            const childRelations = yield getRelationsWithDepth(child.id.get(), depth - 1);\n            for (const childRelation of childRelations) {\n                if (!relations.includes(childRelation))\n                    relations.push(childRelation);\n            }\n        }\n        return relations;\n    });\n}\nexports.getRelationsWithDepth = getRelationsWithDepth;\nfunction getChoiceRelationsWithDepth(nodeId, depth) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const relations = yield getRelationsWithDepth(nodeId, depth);\n        const usefullRelations = relations.filter(relation => {\n            return !CONSTANTS.ENDPOINT_RELATIONS.includes(relation) &&\n                !CONSTANTS.CONTROL_ENDPOINT_RELATIONS.includes(relation);\n        });\n        return usefullRelations;\n    });\n}\nexports.getChoiceRelationsWithDepth = getChoiceRelationsWithDepth;\nfunction getAvailableData(trackMethod, nodeId, filterValue, depth, stricDepth, authorizedRelations) {\n    return __awaiter(this, void 0, void 0, function* () {\n        switch (trackMethod) {\n            case CONSTANTS.TRACK_METHOD.ENDPOINT_NAME_FILTER: {\n                const data = yield findEndpoints(nodeId, filterValue, depth, stricDepth, authorizedRelations, CONSTANTS.ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n                return data.map(endpoint => endpoint.name.get());\n            }\n            case CONSTANTS.TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER: {\n                const data = yield findEndpoints(nodeId, filterValue, depth, stricDepth, authorizedRelations, CONSTANTS.CONTROL_ENDPOINT_RELATIONS, CONSTANTS.ENDPOINT_NODE_TYPE);\n                return data.map(endpoint => endpoint.name.get());\n            }\n            case CONSTANTS.TRACK_METHOD.ATTRIBUTE_NAME_FILTER: {\n                const [category, attribute] = filterValue.split(':');\n                const data = yield findAttributes(nodeId, category, attribute, depth, stricDepth, authorizedRelations);\n                return data;\n            }\n            default: {\n                console.log(\"Get available data not implemented yet for this tracking method\");\n                return [];\n            }\n        }\n    });\n}\nexports.getAvailableData = getAvailableData;\nfunction findNodes(nodeId, authorizedRelations, nodeType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let res = [];\n        const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId, authorizedRelations);\n        for (const child of children) {\n            if (child.type.get() === nodeType) {\n                res.push(child);\n            }\n            else {\n                res = res.concat(yield findNodes(child.id.get(), authorizedRelations, nodeType));\n            }\n        }\n        return res;\n    });\n}\nexports.findNodes = findNodes;\nfunction findSpecificNode(nodeId, filterNameValue, trackedRelations, nodeType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const endpoints = yield findNodes(nodeId, trackedRelations, nodeType);\n        return endpoints.find(endpoint => endpoint.name.get() === filterNameValue);\n    });\n}\nfunction findMatchingNodes(nodeId, filterNameValue, trackedRelations, nodeType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const endpoints = yield findNodes(nodeId, trackedRelations, nodeType);\n        return endpoints.filter(endpoint => endpoint.name.get().includes(filterNameValue));\n    });\n}\nfunction findEndpoint(nodeId, filterNameValue, depth, strictDepth, authorizedRelations, trackedRelations, nodeType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (depth < 0)\n            return undefined;\n        // we dont look further\n        if (depth == 0) {\n            return yield findSpecificNode(nodeId, filterNameValue, trackedRelations, nodeType);\n        }\n        // depth > 0\n        if (!strictDepth) {\n            const foundEndpoint = yield findSpecificNode(nodeId, filterNameValue, trackedRelations, nodeType);\n            if (foundEndpoint)\n                return foundEndpoint;\n        }\n        const allRelations = spinal_env_viewer_graph_service_1.SpinalGraphService.getRelationNames(nodeId);\n        const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n        if (checkedRelations.length === 0)\n            return undefined;\n        const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId, checkedRelations);\n        for (const child of children) {\n            const endpoint = yield findEndpoint(child.id.get(), filterNameValue, depth - 1, strictDepth, authorizedRelations, trackedRelations, nodeType);\n            if (endpoint)\n                return endpoint;\n        }\n        return undefined;\n    });\n}\nexports.findEndpoint = findEndpoint;\nfunction findEndpoints(nodeId, filterNameValue, depth, strictDepth, authorizedRelations, trackedRelations, nodeType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (depth == 0) {\n            return yield findMatchingNodes(nodeId, filterNameValue, trackedRelations, nodeType);\n        }\n        let results = [];\n        if (!strictDepth) {\n            results = results.concat(yield findMatchingNodes(nodeId, filterNameValue, trackedRelations, nodeType));\n        }\n        if (depth <= 0)\n            return results;\n        const allRelations = spinal_env_viewer_graph_service_1.SpinalGraphService.getRelationNames(nodeId);\n        const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n        if (checkedRelations.length === 0)\n            return results;\n        const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId, checkedRelations);\n        for (const child of children) {\n            results = results.concat(yield findEndpoints(child.id.get(), filterNameValue, depth - 1, strictDepth, authorizedRelations, trackedRelations, nodeType));\n        }\n        return results;\n    });\n}\nexports.findEndpoints = findEndpoints;\nfunction findAttribute(nodeId, categoryName, attributeName, depth, strictDepth, authorizedRelations) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (depth < 0)\n            return -1;\n        const node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n        // we dont look further\n        if (depth == 0) {\n            return yield spinal_env_viewer_plugin_documentation_service_1.attributeService.findOneAttributeInCategory(node, categoryName, attributeName);\n        }\n        // depth > 0\n        if (!strictDepth) {\n            const foundAttribute = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.findOneAttributeInCategory(node, categoryName, attributeName);\n            if (foundAttribute != -1)\n                return foundAttribute;\n        }\n        const allRelations = spinal_env_viewer_graph_service_1.SpinalGraphService.getRelationNames(nodeId);\n        const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n        if (checkedRelations.length === 0)\n            return -1;\n        const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId, checkedRelations);\n        for (const child of children) {\n            const attribute = yield findAttribute(child.id.get(), categoryName, attributeName, depth - 1, strictDepth, authorizedRelations);\n            if (attribute != -1)\n                return attribute;\n        }\n        return -1;\n    });\n}\nexports.findAttribute = findAttribute;\nfunction findAttributes(nodeId, categoryName, attributeName, depth, strictDepth, authorizedRelations) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (depth == 0) {\n            return yield findAllCategoriesAndAttributes(nodeId);\n        }\n        let results = [];\n        if (!strictDepth) {\n            results = results.concat(yield findAllCategoriesAndAttributes(nodeId));\n        }\n        if (depth <= 0)\n            return results;\n        const allRelations = spinal_env_viewer_graph_service_1.SpinalGraphService.getRelationNames(nodeId);\n        const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n        if (checkedRelations.length === 0)\n            return results;\n        const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId, checkedRelations);\n        for (const child of children) {\n            results = results.concat(yield findAttributes(child.id.get(), categoryName, attributeName, depth - 1, strictDepth, authorizedRelations));\n        }\n        return results;\n    });\n}\nexports.findAttributes = findAttributes;\nfunction findAllCategoriesAndAttributes(followedEntityId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(followedEntityId);\n        const res = [];\n        const categories = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategory(node);\n        for (const category of categories) {\n            const attributes = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, category);\n            for (const attribute of attributes) {\n                const obj = attribute.get();\n                res.push(`${category.nameCat}:${obj.label}`);\n            }\n        }\n        return res;\n    });\n}\nexports.findAllCategoriesAndAttributes = findAllCategoriesAndAttributes;\nfunction getValueModelFromEntry(entryDataModel) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!(entryDataModel instanceof spinal_models_documentation_1.SpinalAttribute)) {\n            const element = yield entryDataModel.element.load();\n            return element.currentValue;\n        }\n        return entryDataModel.value;\n    });\n}\nexports.getValueModelFromEntry = getValueModelFromEntry;\nfunction formatTrackingMethodsToList(obj) {\n    const result = [];\n    const keys = Object.keys(obj);\n    const length = (keys.length - 1) / 4;\n    for (let i = 0; i < length; i++) {\n        const item = {\n            trackingMethod: obj[`trackingMethod${i}`],\n            filterValue: obj[`filterValue${i}`],\n            removeFromAnalysis: obj[`removeFromAnalysis${i}`],\n            removeFromBinding: obj[`removeFromBinding${i}`],\n        };\n        result.push(item);\n    }\n    return result;\n}\nexports.formatTrackingMethodsToList = formatTrackingMethodsToList;\n// ticket creation\n/**\n * Gets the ticket context that has the corresponding contextId\n *\n * @param {string} contextId\n * @return {*}\n */\nfunction getTicketContext(contextId) {\n    const contexts = spinal_env_viewer_graph_service_1.SpinalGraphService.getContextWithType('SpinalSystemServiceTicket');\n    const context = contexts.find((ctx) => {\n        return ctx.info.id.get() == contextId;\n    });\n    return context;\n}\n/**\n * Gets the ticket process that has the corresponding processId in the context that has the corresponding contextId\n *\n * @param {string} contextId\n * @param {string} processId\n * @return {*}\n */\nfunction getTicketProcess(contextId, processId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const processes = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildrenInContext(contextId, contextId);\n        const process = processes.find((process) => {\n            return process.id.get() == processId;\n        });\n        return process;\n    });\n}\n/**\n * Checks if an alarm is already declared in the context and process.\n *\n * @param {string} nodeId\n * @param {string} contextId\n * @param {string} processId\n * @param {string} ticketName\n * @return {*}\n */\nfunction alarmAlreadyDeclared(nodeId, contextId, processId, ticketName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        //SpinalNode\n        const tickets = yield spinal_service_ticket_1.spinalServiceTicket.getAlarmsFromNode(nodeId);\n        const found = tickets.find((ticket) => {\n            return (contextId == ticket.contextId &&\n                processId == ticket.processId &&\n                ticket.name == ticketName);\n        });\n        return found;\n    });\n}\n/**\n * Adds a ticket alarm to the context and process and link it with the node\n *\n * @export\n * @param {*} ticketInfos\n * @param {SpinalNodeRef} configInfo\n * @param {string} nodeId\n */\nfunction addTicketAlarm(ticketInfos, configInfo, analyticContextId, outputNodeId, entityNodeId, ticketType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const localizationInfo = yield getTicketLocalizationParameters(configInfo);\n        const contextId = localizationInfo[CONSTANTS.ATTRIBUTE_TICKET_CONTEXT_ID];\n        const processId = localizationInfo[CONSTANTS.ATTRIBUTE_TICKET_PROCESS_ID];\n        const context = getTicketContext(contextId);\n        const process = yield getTicketProcess(context.info.id.get(), processId);\n        const alreadyDeclared = yield alarmAlreadyDeclared(entityNodeId, contextId, processId, ticketInfos.name);\n        if (alreadyDeclared) {\n            //just update the ticket\n            const firstStep = yield spinal_service_ticket_1.serviceTicketPersonalized.getFirstStep(processId, contextId);\n            console.log('update ticket ' + ticketInfos.name);\n            const declaredTicketNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(alreadyDeclared.id);\n            if (declaredTicketNode.info.stepId.get() == firstStep) {\n                const attr = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.findOneAttributeInCategory(declaredTicketNode, 'default', 'Occurrence number');\n                if (attr != -1) {\n                    // found the attribute\n                    const value = attr.value.get();\n                    const str = value.toString();\n                    const newValueInt = parseInt(str) + 1;\n                    yield spinal_env_viewer_plugin_documentation_service_1.attributeService.updateAttribute(declaredTicketNode, 'default', 'Occurrence number', { value: newValueInt.toString() });\n                    yield updateEndpointOccurenceNumber(declaredTicketNode, newValueInt);\n                }\n            }\n            else {\n                // move the ticket to the first step and reset the occurrence number\n                yield spinal_service_ticket_1.serviceTicketPersonalized.moveTicket(declaredTicketNode.info.id.get(), declaredTicketNode.info.stepId.get(), firstStep, contextId);\n                yield spinal_env_viewer_plugin_documentation_service_1.attributeService.updateAttribute(declaredTicketNode, 'default', 'Occurrence number', { value: '1' });\n                yield updateEndpointOccurenceNumber(declaredTicketNode, 1);\n                console.log(`${ticketInfos.name} has been re-triggered and moved back to the first step`);\n            }\n        }\n        else {\n            console.log('create ticket ' + ticketInfos.name);\n            if (process) {\n                try {\n                    const ticketId = yield spinal_service_ticket_1.spinalServiceTicket.addTicket(ticketInfos, process.id.get(), context.info.id.get(), entityNodeId, ticketType);\n                    if (ticketId instanceof Error)\n                        return;\n                    if (ticketType == 'Alarm') {\n                        spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(outputNodeId, ticketId, analyticContextId, spinal_service_ticket_1.ALARM_RELATION_NAME, spinal_service_ticket_1.TICKET_RELATION_TYPE);\n                    }\n                    else {\n                        spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(outputNodeId, ticketId, analyticContextId, spinal_service_ticket_1.TICKET_RELATION_NAME, spinal_service_ticket_1.TICKET_RELATION_TYPE);\n                    }\n                    if (typeof ticketId === 'string') {\n                        const declaredTicketNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(ticketId);\n                        yield spinal_env_viewer_plugin_documentation_service_1.attributeService.updateAttribute(declaredTicketNode, 'default', 'Occurrence number', { value: '1' });\n                        const endpoint = new InputDataEndpoint_1.InputDataEndpoint('Occurence number', 1, '', spinal_model_bmsnetwork_1.InputDataEndpointDataType.Integer, spinal_model_bmsnetwork_1.InputDataEndpointType.Alarm);\n                        const res = new spinal_model_bmsnetwork_1.SpinalBmsEndpoint(endpoint.name, endpoint.path, endpoint.currentValue, endpoint.unit, spinal_model_bmsnetwork_1.InputDataEndpointDataType[endpoint.dataType], spinal_model_bmsnetwork_1.InputDataEndpointType[endpoint.type], endpoint.id);\n                        const childId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({ type: spinal_model_bmsnetwork_1.SpinalBmsEndpoint.nodeTypeName, name: endpoint.name }, res);\n                        spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(ticketId, childId, spinal_model_bmsnetwork_1.SpinalBmsEndpoint.relationName, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n                        yield serviceTimeseries.getOrCreateTimeSeries(childId);\n                        serviceTimeseries.pushFromEndpoint(childId, 1);\n                    }\n                }\n                catch (error) {\n                    console.log('Ticket creation failed');\n                }\n            }\n        }\n    });\n}\nexports.addTicketAlarm = addTicketAlarm;\nfunction updateEndpointOccurenceNumber(ticketNode, newValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const endpoints = yield ticketNode.getChildren('hasBmsEndpoint');\n        endpoints.map((endpoint) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(endpoint);\n            if (endpoint.info.name.get() == 'Occurence number') {\n                serviceTimeseries.pushFromEndpoint(endpoint.info.id.get(), newValue);\n                const element = yield ((_a = endpoint.element) === null || _a === void 0 ? void 0 : _a.load());\n                element.currentValue.set(newValue);\n            }\n        }));\n    });\n}\nfunction removeChild(parentNode, childNode, relation) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield parentNode.removeChild(childNode, relation, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n        }\n        catch (e) {\n            try {\n                yield parentNode.removeChild(childNode, relation, spinal_env_viewer_graph_service_1.SPINAL_RELATION_LST_PTR_TYPE);\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n    });\n}\nfunction safeDeleteNode(nodeId, shouldDeleteChildren = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const realNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n        const relations = realNode.getRelationNames();\n        for (const relation of relations) {\n            const children = yield realNode.getChildren(relation);\n            for (const child of children) {\n                yield removeChild(realNode, child, relation);\n                if (shouldDeleteChildren)\n                    yield child.removeFromGraph();\n            }\n        }\n        yield realNode.removeFromGraph();\n    });\n}\nexports.safeDeleteNode = safeDeleteNode;\n//# sourceMappingURL=utils.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Copyright 2022 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService,\n  SpinalNodeRef,\n  SPINAL_RELATION_PTR_LST_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SpinalNode,\n} from 'spinal-env-viewer-graph-service';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport {\n  serviceTicketPersonalized,\n  spinalServiceTicket,\n  ALARM_RELATION_NAME,\n  TICKET_RELATION_TYPE,\n  TICKET_RELATION_NAME,\n} from 'spinal-service-ticket';\nimport {\n  InputDataEndpointDataType,\n  InputDataEndpointType,\n  SpinalBmsEndpoint,\n} from 'spinal-model-bmsnetwork';\nimport { InputDataEndpoint } from '../models/InputData/InputDataModel/InputDataEndpoint';\nimport * as CONSTANTS from '../constants';\nimport { SpinalAttribute } from 'spinal-models-documentation';\nimport { SingletonServiceTimeseries } from './SingletonTimeSeries';\n\nconst serviceTimeseries = SingletonServiceTimeseries.getInstance();\n\n\n\n/**\n * Uses the documentation service to get the attributes related to the algorithm parameters\n *\n * @export\n * @param {SpinalNodeRef} config\n * @return {*}\n */\nexport async function getAlgorithmParameters(\n  config: SpinalNodeRef\n): Promise<any> {\n  const configNode = SpinalGraphService.getRealNode(config.id.get());\n  const res = {};\n  const algorithmParameters = await attributeService.getAttributesByCategory(\n    configNode,\n    CONSTANTS.CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS\n  );\n  for (const param of algorithmParameters) {\n    const obj = param.get();\n    res[obj.label] = obj.value;\n  }\n  return res;\n}\n\n/**\n * Uses the documentation service to get the attributes related to the ticket localization\n * (context and process) parameters\n *\n * @export\n * @param {SpinalNodeRef} config\n * @return {*}\n */\nexport async function getTicketLocalizationParameters(\n  config: SpinalNodeRef\n): Promise<any> {\n  const configNode = SpinalGraphService.getRealNode(config.id.get());\n  const res = {};\n  const localizationParameters = await attributeService.getAttributesByCategory(\n    configNode,\n    CONSTANTS.CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS\n  );\n  for (const param of localizationParameters) {\n    const obj = param.get();\n    res[obj.label] = obj.value;\n  }\n  return res;\n}\n\nexport async function getRelationsWithDepth(nodeId : string,depth : number): Promise<string[]> {\n  const relations = SpinalGraphService.getRelationNames(nodeId);\n  if (depth <= 0) return relations;\n  const children = await SpinalGraphService.getChildren(nodeId);\n  for (const child of children) {\n    const childRelations = await getRelationsWithDepth(child.id.get(),depth-1);\n    for (const childRelation of childRelations) {\n        if (!relations.includes(childRelation)) relations.push(childRelation);\n    }\n  }\n  return relations;\n}\n\nexport async function getChoiceRelationsWithDepth(nodeId : string,depth : number): Promise<string[]> {\n    const relations = await getRelationsWithDepth(nodeId,depth);\n    const usefullRelations = relations.filter(relation => {\n        return !CONSTANTS.ENDPOINT_RELATIONS.includes(relation) &&\n         !CONSTANTS.CONTROL_ENDPOINT_RELATIONS.includes(relation);\n    });\n    return usefullRelations;\n}\n\nexport async function getAvailableData(trackMethod : CONSTANTS.TRACK_METHOD, nodeId : string, filterValue:string, depth : number, stricDepth :boolean, authorizedRelations: string[]): Promise<string[]> {\n  switch (trackMethod) {\n    case CONSTANTS.TRACK_METHOD.ENDPOINT_NAME_FILTER: {\n      const data = await findEndpoints(nodeId,filterValue,depth,stricDepth,authorizedRelations,CONSTANTS.ENDPOINT_RELATIONS,CONSTANTS.ENDPOINT_NODE_TYPE);\n      return data.map(endpoint => endpoint.name.get());\n    }\n    case CONSTANTS.TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER: {\n      const data = await findEndpoints(nodeId,filterValue,depth,stricDepth,authorizedRelations,CONSTANTS.CONTROL_ENDPOINT_RELATIONS,CONSTANTS.ENDPOINT_NODE_TYPE);\n      return data.map(endpoint => endpoint.name.get());\n    }\n    case CONSTANTS.TRACK_METHOD.ATTRIBUTE_NAME_FILTER: {\n      const [category,attribute] = filterValue.split(':');\n      const data = await findAttributes(nodeId,category,attribute,depth,stricDepth,authorizedRelations);\n      return data;\n    }\n    default: {\n      console.log(\"Get available data not implemented yet for this tracking method\");\n      return [];\n    }\n\n\n  }\n}\n\nexport async function findNodes(nodeId: string, authorizedRelations: string[], nodeType: string): Promise<SpinalNodeRef[]> {\n    let res: SpinalNodeRef[] = [];\n    const children = await SpinalGraphService.getChildren(nodeId, authorizedRelations);\n    for (const child of children) {\n      if (child.type.get() === nodeType) {\n        res.push(child);\n      } else {\n        res = res.concat(await findNodes(child.id.get(), authorizedRelations, nodeType));\n      }\n    }\n    return res;\n}\n\nasync function findSpecificNode(nodeId:string,filterNameValue:string, trackedRelations:string[],nodeType:string): Promise<SpinalNodeRef | undefined> {\n  const endpoints = await findNodes(nodeId, trackedRelations, nodeType);\n  return endpoints.find(endpoint => endpoint.name.get() === filterNameValue);\n}\n\nasync function findMatchingNodes(nodeId:string,filterNameValue:string, trackedRelations:string[],nodeType:string): Promise<SpinalNodeRef[]> {\n  const endpoints = await findNodes(nodeId, trackedRelations, nodeType);\n  return endpoints.filter(endpoint => endpoint.name.get().includes(filterNameValue));\n}\n\nexport async function findEndpoint(\n  nodeId: string,\n  filterNameValue: string,\n  depth: number,\n  strictDepth: boolean,\n  authorizedRelations: string[],\n  trackedRelations: string[],\n  nodeType: string\n): Promise<SpinalNodeRef | undefined> {\n  if (depth < 0) return undefined;\n\n  // we dont look further\n  if (depth == 0) {\n    return await findSpecificNode(nodeId,filterNameValue,trackedRelations,nodeType);\n  }\n\n  // depth > 0\n\n  if (!strictDepth) {\n    const foundEndpoint = await findSpecificNode(nodeId,filterNameValue,trackedRelations,nodeType);\n    if (foundEndpoint) return foundEndpoint;\n  }\n\n  const allRelations = SpinalGraphService.getRelationNames(nodeId);\n  const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n\n  if (checkedRelations.length === 0) return undefined;\n\n  const children = await SpinalGraphService.getChildren(nodeId, checkedRelations);\n  for (const child of children) {\n    const endpoint = await findEndpoint(\n      child.id.get(),\n      filterNameValue,\n      depth - 1,\n      strictDepth,\n      authorizedRelations,\n      trackedRelations,\n      nodeType,\n    );\n    if (endpoint) return endpoint;\n  }\n  return undefined;\n}\n\nexport async function findEndpoints(\n  nodeId: string,\n  filterNameValue: string,\n  depth: number,\n  strictDepth: boolean,\n  authorizedRelations: string[],\n  trackedRelations: string[],\n  nodeType: string\n): Promise<SpinalNodeRef[]> {\n\n  if (depth == 0) {\n    return await findMatchingNodes(nodeId,filterNameValue,trackedRelations,nodeType);\n  }\n\n  let results: SpinalNodeRef[] = [];\n\n  if (!strictDepth) {\n    results = results.concat(await findMatchingNodes(nodeId,filterNameValue,trackedRelations,nodeType));\n  }\n\n  if (depth <= 0) return results;\n\n  const allRelations = SpinalGraphService.getRelationNames(nodeId);\n  const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n\n  if (checkedRelations.length === 0) return results;\n\n  const children = await SpinalGraphService.getChildren(nodeId, checkedRelations);\n  for (const child of children) {\n    results = results.concat(await findEndpoints(\n      child.id.get(),\n      filterNameValue,\n      depth - 1,\n      strictDepth,\n      authorizedRelations,\n      trackedRelations,\n      nodeType,\n      \n    ));\n  }\n\n  return results;\n}\n\nexport async function findAttribute(\n  nodeId :string,\n  categoryName:string,\n  attributeName:string,\n  depth:number,\n  strictDepth:boolean,\n  authorizedRelations: string[]) : Promise<SpinalAttribute | -1> {\n  if (depth < 0) return -1;\n\n  const node = SpinalGraphService.getRealNode(nodeId);\n  // we dont look further\n  if (depth == 0) {\n    return await attributeService.findOneAttributeInCategory(node,categoryName,attributeName);\n  }\n\n  // depth > 0\n  if (!strictDepth) {\n    const foundAttribute = await attributeService.findOneAttributeInCategory(node,categoryName,attributeName);\n    if (foundAttribute != -1) return foundAttribute;\n  }\n\n  const allRelations = SpinalGraphService.getRelationNames(nodeId);\n  const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n\n  if (checkedRelations.length === 0) return -1;\n\n  const children = await SpinalGraphService.getChildren(nodeId, checkedRelations);\n  for (const child of children) {\n    const attribute = await findAttribute(\n      child.id.get(),\n      categoryName,\n      attributeName,\n      depth - 1,\n      strictDepth,\n      authorizedRelations,\n    );\n    if (attribute != -1) return attribute;\n  }\n  return -1;\n}\n\nexport async function findAttributes(\n  nodeId :string,\n  categoryName:string,\n  attributeName:string,\n  depth:number,\n  strictDepth:boolean,\n  authorizedRelations: string[]) : Promise<string[]>\n  {\n  if (depth == 0) {\n    return await findAllCategoriesAndAttributes(nodeId);\n  }\n\n  let results: string[] = [];\n\n  if (!strictDepth) {\n    results = results.concat(await findAllCategoriesAndAttributes(nodeId));\n  }\n\n  if (depth <= 0) return results;\n  \n  const allRelations = SpinalGraphService.getRelationNames(nodeId);\n  const checkedRelations = allRelations.filter(relation => authorizedRelations.includes(relation));\n\n  if (checkedRelations.length === 0) return results;\n\n  const children = await SpinalGraphService.getChildren(nodeId, checkedRelations);\n  for (const child of children) {\n    results = results.concat(await findAttributes(\n      child.id.get(),\n      categoryName,\n      attributeName,\n      depth - 1,\n      strictDepth,\n      authorizedRelations,\n    ));\n  }\n\n  return results;\n}\n\n\n\nexport async function findAllCategoriesAndAttributes(\n  followedEntityId: string\n): Promise<string[]> {\n  const node = SpinalGraphService.getRealNode(followedEntityId);\n  const res: string[] = [];\n  const categories = await attributeService.getCategory(node);\n  for (const category of categories) {\n    const attributes = await attributeService.getAttributesByCategory(\n      node,\n      category\n    );\n    for (const attribute of attributes) {\n      const obj = attribute.get();\n      res.push(`${category.nameCat}:${obj.label}`);\n    }\n  }\n  return res;\n}\n\nexport async function getValueModelFromEntry(\n  entryDataModel: SpinalNodeRef | SpinalAttribute\n): Promise<any> {\n  if (!(entryDataModel instanceof SpinalAttribute)) {\n    const element = await entryDataModel.element.load();\n    return element.currentValue;\n  }\n  return entryDataModel.value;\n}\n\nexport function formatTrackingMethodsToList(obj): any[] {\n  const result: any = [];\n  const keys = Object.keys(obj);\n  const length = (keys.length - 1) / 4;\n\n  for (let i = 0; i < length; i++) {\n    const item = {\n      trackingMethod: obj[`trackingMethod${i}`],\n      filterValue: obj[`filterValue${i}`],\n      removeFromAnalysis: obj[`removeFromAnalysis${i}`],\n      removeFromBinding: obj[`removeFromBinding${i}`],\n    };\n    result.push(item);\n  }\n  return result;\n}\n// ticket creation\n\n/**\n * Gets the ticket context that has the corresponding contextId\n *\n * @param {string} contextId\n * @return {*}\n */\nfunction getTicketContext(contextId: string) {\n  const contexts = SpinalGraphService.getContextWithType(\n    'SpinalSystemServiceTicket'\n  );\n  const context = contexts.find((ctx) => {\n    return ctx.info.id.get() == contextId;\n  });\n  return context;\n}\n\n/**\n * Gets the ticket process that has the corresponding processId in the context that has the corresponding contextId\n *\n * @param {string} contextId\n * @param {string} processId\n * @return {*}\n */\nasync function getTicketProcess(contextId: string, processId: string) {\n  const processes = await SpinalGraphService.getChildrenInContext(\n    contextId,\n    contextId\n  );\n  const process = processes.find((process) => {\n    return process.id.get() == processId;\n  });\n  return process;\n}\n\n/**\n * Checks if an alarm is already declared in the context and process.\n *\n * @param {string} nodeId\n * @param {string} contextId\n * @param {string} processId\n * @param {string} ticketName\n * @return {*}\n */\nasync function alarmAlreadyDeclared(\n  nodeId: string,\n  contextId: string,\n  processId: string,\n  ticketName: string\n) {\n  //SpinalNode\n  const tickets = await spinalServiceTicket.getAlarmsFromNode(nodeId);\n  const found = tickets.find((ticket) => {\n    return (\n      contextId == ticket.contextId &&\n      processId == ticket.processId &&\n      ticket.name == ticketName\n    );\n  });\n\n  return found;\n}\n\n/**\n * Adds a ticket alarm to the context and process and link it with the node\n *\n * @export\n * @param {*} ticketInfos\n * @param {SpinalNodeRef} configInfo\n * @param {string} nodeId\n */\nexport async function addTicketAlarm(\n  ticketInfos: any,\n  configInfo: SpinalNodeRef,\n  analyticContextId: string,\n  outputNodeId: string,\n  entityNodeId: string,\n  ticketType: string\n) {\n  const localizationInfo = await getTicketLocalizationParameters(configInfo);\n  const contextId: string =\n    localizationInfo[CONSTANTS.ATTRIBUTE_TICKET_CONTEXT_ID];\n  const processId: string =\n    localizationInfo[CONSTANTS.ATTRIBUTE_TICKET_PROCESS_ID];\n  const context = getTicketContext(contextId);\n  const process = await getTicketProcess(context.info.id.get(), processId);\n\n  const alreadyDeclared = await alarmAlreadyDeclared(\n    entityNodeId,\n    contextId,\n    processId,\n    ticketInfos.name\n  );\n\n  if (alreadyDeclared) {\n    //just update the ticket\n    const firstStep = await serviceTicketPersonalized.getFirstStep(\n      processId,\n      contextId\n    );\n    console.log('update ticket ' + ticketInfos.name);\n    const declaredTicketNode = SpinalGraphService.getRealNode(\n      alreadyDeclared.id\n    );\n    if (declaredTicketNode.info.stepId.get() == firstStep) {\n      const attr = await attributeService.findOneAttributeInCategory(\n        declaredTicketNode,\n        'default',\n        'Occurrence number'\n      );\n      if (attr != -1) {\n        // found the attribute\n        const value = attr.value.get();\n        const str = value.toString();\n        const newValueInt = parseInt(str) + 1;\n        await attributeService.updateAttribute(\n          declaredTicketNode,\n          'default',\n          'Occurrence number',\n          { value: newValueInt.toString() }\n        );\n        await updateEndpointOccurenceNumber(declaredTicketNode, newValueInt);\n      }\n    } else {\n      // move the ticket to the first step and reset the occurrence number\n      await serviceTicketPersonalized.moveTicket(\n        declaredTicketNode.info.id.get(),\n        declaredTicketNode.info.stepId.get(),\n        firstStep,\n        contextId\n      );\n      await attributeService.updateAttribute(\n        declaredTicketNode,\n        'default',\n        'Occurrence number',\n        { value: '1' }\n      );\n      await updateEndpointOccurenceNumber(declaredTicketNode, 1);\n      console.log(\n        `${ticketInfos.name} has been re-triggered and moved back to the first step`\n      );\n    }\n  } else {\n    console.log('create ticket ' + ticketInfos.name);\n    if (process) {\n      try {\n        const ticketId = await spinalServiceTicket.addTicket(\n          ticketInfos,\n          process.id.get(),\n          context.info.id.get(),\n          entityNodeId,\n          ticketType\n        );\n        if (ticketId instanceof Error) return;\n        if (ticketType == 'Alarm') {\n          SpinalGraphService.addChildInContext(\n            outputNodeId,\n            ticketId,\n            analyticContextId,\n            ALARM_RELATION_NAME,\n            TICKET_RELATION_TYPE\n          );\n        } else {\n          SpinalGraphService.addChildInContext(\n            outputNodeId,\n            ticketId,\n            analyticContextId,\n            TICKET_RELATION_NAME,\n            TICKET_RELATION_TYPE\n          );\n        }\n\n        if (typeof ticketId === 'string') {\n          const declaredTicketNode = SpinalGraphService.getRealNode(ticketId);\n          await attributeService.updateAttribute(\n            declaredTicketNode,\n            'default',\n            'Occurrence number',\n            { value: '1' }\n          );\n          const endpoint = new InputDataEndpoint(\n            'Occurence number',\n            1,\n            '',\n            InputDataEndpointDataType.Integer,\n            InputDataEndpointType.Alarm\n          );\n\n          const res = new SpinalBmsEndpoint(\n            endpoint.name,\n            endpoint.path,\n            endpoint.currentValue,\n            endpoint.unit,\n            InputDataEndpointDataType[endpoint.dataType],\n            InputDataEndpointType[endpoint.type],\n            endpoint.id\n          );\n\n          const childId = SpinalGraphService.createNode(\n            { type: SpinalBmsEndpoint.nodeTypeName, name: endpoint.name },\n            res\n          );\n          SpinalGraphService.addChild(\n            ticketId,\n            childId,\n            SpinalBmsEndpoint.relationName,\n            SPINAL_RELATION_PTR_LST_TYPE\n          );\n          await serviceTimeseries.getOrCreateTimeSeries(childId);\n          serviceTimeseries.pushFromEndpoint(childId, 1);\n        }\n      } catch (error) {\n        console.log('Ticket creation failed');\n      }\n    }\n  }\n}\n\nasync function updateEndpointOccurenceNumber(\n  ticketNode: SpinalNode<any>,\n  newValue: number\n) {\n  const endpoints = await ticketNode.getChildren('hasBmsEndpoint');\n  endpoints.map(async (endpoint) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    SpinalGraphService._addNode(endpoint);\n    if (endpoint.info.name.get() == 'Occurence number') {\n      serviceTimeseries.pushFromEndpoint(endpoint.info.id.get(), newValue);\n\n      const element = await endpoint.element?.load();\n      element.currentValue.set(newValue);\n    }\n  });\n}\n\n\n\n\nasync function removeChild(parentNode: SpinalNode<any>, childNode: SpinalNode<any>, relation : string) : Promise<void>{\n  try {\n    await parentNode.removeChild(childNode, relation, SPINAL_RELATION_PTR_LST_TYPE);\n  } catch (e) {\n    try {\n      await parentNode.removeChild(childNode, relation, SPINAL_RELATION_LST_PTR_TYPE);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\n\nexport async function safeDeleteNode(nodeId: string,shouldDeleteChildren = false) : Promise<void>{\n  const realNode = SpinalGraphService.getRealNode(nodeId);\n  const relations = realNode.getRelationNames();\n  for(const relation of relations) {\n    const children = await realNode.getChildren(relation);\n    for(const child of children) {\n      await removeChild(realNode,child,relation);\n      if(shouldDeleteChildren) await child.removeFromGraph();\n    }\n  }\n  await realNode.removeFromGraph();\n}\n","\"use strict\";\n/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputDataEndpoint = void 0;\nconst spinal_model_bmsnetwork_1 = require(\"spinal-model-bmsnetwork\");\nconst genUID_1 = require(\"../genUID\");\n/**\n * @property {string} id\n * @property {string} name\n * @property {string} path\n * @property {number | string} currentValue\n * @property {string} unit\n * @property {InputDataEndpointDataType} dataType\n * @property {InputDataEndpointType} type\n * @property {string} nodeTypeName equal SpinalBmsEndpoint.nodeTypeName\n * @property {any[]} timeseries\n * @export\n * @class InputDataEndpoint\n * @implements {idEndpoint}\n */\nclass InputDataEndpoint {\n    /**\n     *Creates an instance of InputDataEndpoint.\n     * @param {string} [name='default endpoint name']\n     * @param {(number | string)} [currentValue=0]\n     * @param {string} [unit='unit']\n     * @param {InputDataEndpointDataType} [dataType=InputDataEndpointDataType.Integer]\n     * @param {InputDataEndpointType} [type=InputDataEndpointType.Other]\n     * @param {string} [id=genUID('InputDataEndpoint')]\n     * @param {string} [path='default endpoint path']\n     * @memberof InputDataEndpoint\n     */\n    constructor(name = \"default endpoint name\", currentValue = 0, unit = \"unit\", dataType = spinal_model_bmsnetwork_1.InputDataEndpointDataType.Integer, type = spinal_model_bmsnetwork_1.InputDataEndpointType.Other, id = (0, genUID_1.genUID)(\"InputDataEndpoint\"), path = \"default endpoint path\") {\n        this.nodeTypeName = spinal_model_bmsnetwork_1.SpinalBmsEndpoint.nodeTypeName;\n        this.id = id;\n        this.name = name;\n        this.type = type;\n        this.path = path;\n        this.currentValue = currentValue;\n        this.unit = unit;\n        this.dataType = dataType;\n        this.timeseries = [];\n        this.idx = Math.floor(Math.random() * 100);\n    }\n}\nexports.InputDataEndpoint = InputDataEndpoint;\n//# sourceMappingURL=InputDataEndpoint.js.map","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  InputDataEndpoint as idEndpoint,\n  InputDataEndpointDataType,\n  InputDataEndpointType,\n  SpinalBmsEndpoint\n} from \"spinal-model-bmsnetwork\";\n\nimport { genUID } from \"../genUID\";\n/**\n * @property {string} id\n * @property {string} name\n * @property {string} path\n * @property {number | string} currentValue\n * @property {string} unit\n * @property {InputDataEndpointDataType} dataType\n * @property {InputDataEndpointType} type\n * @property {string} nodeTypeName equal SpinalBmsEndpoint.nodeTypeName\n * @property {any[]} timeseries\n * @export\n * @class InputDataEndpoint\n * @implements {idEndpoint}\n */\nexport class InputDataEndpoint implements idEndpoint {\n  public id: string;\n  public name: string;\n  public path: string;\n  public currentValue: number | string | boolean;\n  public unit: string;\n  public dataType: InputDataEndpointDataType;\n  public type: InputDataEndpointType;\n  public nodeTypeName: string;\n  public timeseries: any[];\n  public idx: number;\n\n  /**\n   *Creates an instance of InputDataEndpoint.\n   * @param {string} [name='default endpoint name']\n   * @param {(number | string)} [currentValue=0]\n   * @param {string} [unit='unit']\n   * @param {InputDataEndpointDataType} [dataType=InputDataEndpointDataType.Integer]\n   * @param {InputDataEndpointType} [type=InputDataEndpointType.Other]\n   * @param {string} [id=genUID('InputDataEndpoint')]\n   * @param {string} [path='default endpoint path']\n   * @memberof InputDataEndpoint\n   */\n  constructor(\n    name = \"default endpoint name\",\n    currentValue: number | string | boolean = 0,\n    unit = \"unit\",\n    dataType: InputDataEndpointDataType = InputDataEndpointDataType.Integer,\n    type: InputDataEndpointType = InputDataEndpointType.Other,\n    id: string = genUID(\"InputDataEndpoint\"),\n    path = \"default endpoint path\"\n  ) {\n    this.nodeTypeName = SpinalBmsEndpoint.nodeTypeName;\n    this.id = id;\n    this.name = name;\n    this.type = type;\n    this.path = path;\n    this.currentValue = currentValue;\n    this.unit = unit;\n    this.dataType = dataType;\n    this.timeseries = [];\n    this.idx = Math.floor(Math.random() * 100);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.genUID = void 0;\nfunction s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\nfunction genUID(constructor) {\n    const res = `${constructor}-${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4() + s4() + s4()}-${Date.now().toString(16)}`;\n    return res;\n}\nexports.genUID = genUID;\n//# sourceMappingURL=genUID.js.map","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction s4(): string {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nfunction genUID(constructor: string): string {\n  const res = `${constructor}-${s4() + s4()}-${s4()}-${s4()}-${s4()}-${\n      s4() + s4() + s4()}-${Date.now().toString(16)}`;\n\n  return res;\n}\n\nexport { genUID };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingletonServiceTimeseries = void 0;\nconst spinal_model_timeseries_1 = require(\"spinal-model-timeseries\");\nclass SingletonServiceTimeseries {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    constructor() { }\n    static getInstance() {\n        if (!SingletonServiceTimeseries.instance) {\n            SingletonServiceTimeseries.instance = new spinal_model_timeseries_1.SpinalServiceTimeseries();\n        }\n        return SingletonServiceTimeseries.instance;\n    }\n}\nexports.SingletonServiceTimeseries = SingletonServiceTimeseries;\nSingletonServiceTimeseries.instance = new spinal_model_timeseries_1.SpinalServiceTimeseries();\n//# sourceMappingURL=SingletonTimeSeries.js.map","import { SpinalServiceTimeseries } from \"spinal-model-timeseries\"\n\nexport class SingletonServiceTimeseries {\n    private static instance: SpinalServiceTimeseries = new SpinalServiceTimeseries();\n  \n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private constructor() {}\n  \n    public static getInstance(): SpinalServiceTimeseries {\n      if (!SingletonServiceTimeseries.instance) {\n        SingletonServiceTimeseries.instance = new SpinalServiceTimeseries();\n      }\n  \n      return SingletonServiceTimeseries.instance;\n    }\n  }","'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n","'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            strictNullHandling,\n            skipNulls,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && 'indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\tfor (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\tcurr.next = list.next;\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = { // eslint-disable-line no-param-reassign\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t};\n\t}\n};\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\nmodule.exports = function getSideChannel() {\n\tvar $wm;\n\tvar $m;\n\tvar $o;\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t */\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n","'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\nvar hasProto = require('has-proto')();\n\nvar getProto = Object.getPrototypeOf || (\n\thasProto\n\t\t? function (x) { return x.__proto__; } // eslint-disable-line no-proto\n\t\t: null\n);\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar test = {\n\tfoo: {}\n};\n\nvar $Object = Object;\n\nmodule.exports = function hasProto() {\n\treturn { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar call = Function.prototype.call;\n\nmodule.exports = call.bind ? call.bind(hasOwnProperty) : function (O, P) {\n  return call.call(hasOwnProperty, O, P);\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other\n    /* eslint-env browser */\n    if (typeof window !== 'undefined' && obj === window) {\n        return '{ [object Window] }';\n    }\n    if (obj === global) {\n        return '{ [object globalThis] }';\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, /(['\\\\])/g, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n","\"use strict\";","'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        /* eslint operator-linebreak: [2, \"before\"] */\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n","'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n","'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== '__proto__') {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    return {\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n","import { SpinalContextApp } from \"spinal-env-viewer-context-menu-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\n\nimport { ENTITY_TYPE } from \"spinal-model-analysis\";\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\nclass CreateAnalytic extends SpinalContextApp {\n   constructor() {\n      super(\"Create Analytic\",\n        \"Create Analytic\", {\n          icon: 'dashboard_customize',\n          icon_type: 'in',\n          backgroundColor: '#356BAB',\n          fontColor: '#FFFFFF'\n        })\n    }\n  \n    isShown(option) {  \n      const id = option.selectedNode.id.get();\n      const isAnalyticEntity = option.selectedNode.type.get() === ENTITY_TYPE;\n      return Promise.resolve(isAnalyticEntity ? true : -1);\n    }\n  \n    action(option) {\n      spinalPanelManagerService.openPanel(\"createAnalyticDialog\", option);\n    }\n}\n\nconst createAnalytic = new CreateAnalytic();\nspinalContextMenuService.registerApp(SIDEBAR, createAnalytic, [3]);\nexport default createAnalytic;","import { SpinalContextApp } from \"spinal-env-viewer-context-menu-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\n\nimport { ANALYTIC_TYPE } from \"spinal-model-analysis\";\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\nclass ModifyAnalytic extends SpinalContextApp {\n   constructor() {\n      super(\"Modify Analytic\",\n        \"Modify Analytic\", {\n          icon: 'settings',\n          icon_type: 'in',\n          backgroundColor: '#356BAB',\n          fontColor: '#FFFFFF'\n        })\n    }\n  \n    isShown(option) {  \n      const id = option.selectedNode.id.get();\n      const isAnalytic = option.selectedNode.type.get() === ANALYTIC_TYPE;\n      return Promise.resolve(isAnalytic ? true : -1);\n    }\n  \n    action(option) {\n      spinalPanelManagerService.openPanel(\"modifyAnalyticDialog\", option);\n    }\n}\n\nconst modifyAnalytic = new ModifyAnalytic();\nspinalContextMenuService.registerApp(SIDEBAR, modifyAnalytic, [3]);\nexport default modifyAnalytic;","import {\n  SpinalContextApp, spinalContextMenuService\n} from 'spinal-env-viewer-context-menu-service'\n\nimport {\n  spinalPanelManagerService\n} from 'spinal-env-viewer-panel-manager-service';\n\n\nexport class CreateContextButton extends SpinalContextApp {\n\n  constructor() {\n    super('Create Analytic context',\n      'This button allows you to create an analytic context', {\n        icon: \"category\",\n        icon_type: 'in',\n        backgroundColor: \"#356BAB\",\n        fontColor: '#ffffff'\n      })\n  }\n\n\n  isShown(option) {\n    return Promise.resolve(true);\n  }\n\n  action(option) {\n    spinalPanelManagerService.openPanel(\"createAnalyticContextDialog\")\n  }\n\n}\n","import vue from \"vue\";\nconst { SpinalMountExtention  } = require(\"spinal-env-viewer-panel-manager-service\");\nimport CreateAnalyticContextDialog from \"./createContextDialog.vue\";\nimport createEntityDialog from \"./createEntityDialog.vue\";\nimport createAnalyticDialog from \"./createAnalyticDialog.vue\"\nimport modifyAnalyticDialog from \"./modifyAnalyticDialog.vue\"\n\n\nconst dialogs = [\n   {\n      name: \"createEntityDialog\",\n      vueMountComponent: vue.extend(createEntityDialog),\n      parentContainer: document.body\n   },\n   {\n      name: \"createAnalyticContextDialog\",\n      vueMountComponent: vue.extend(CreateAnalyticContextDialog),\n      parentContainer: document.body\n    },\n    {\n      name: \"createAnalyticDialog\",\n      vueMountComponent: vue.extend(createAnalyticDialog),\n      parentContainer: document.body\n    },\n    {\n      name: \"modifyAnalyticDialog\",\n      vueMountComponent: vue.extend(modifyAnalyticDialog),\n      parentContainer: document.body\n    }\n\n];\n\nfor (let index = 0; index < dialogs.length; index++) {\n SpinalMountExtention.mount(dialogs[index]);\n}","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"mdDialog\">\n    <md-dialog-title class=\"mdDialogTitle\">Create Analytic context\n    </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n\n      <md-steppers :md-active-step.sync=\"stepper.active\"\n                   @md-changed=\"changeStep\"\n                   md-linear\n                   class=\"mySteppers\">\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.context\"\n                 md-label=\"Context\"\n                 :md-done.sync=\"stepper.first\">\n          <md-content class=\"contents\">\n            <md-field>\n              <label>Context name</label>\n              <md-input v-model=\"inputValue\"\n                        ref=\"nameTextField\"></md-input>\n            </md-field>\n          </md-content>\n\n        </md-step>\n\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.entities\"\n                 md-label=\"Entities\"\n                 :md-done.sync=\"stepper.second\">\n\n          <sortable-list :items=\"entities\"\n                         ref=\"draggableComponent\"\n                         @addEntity=\"addEntity\"\n                         @delete=\"deleteItem\"\n                         @addAllStandardEntities=\"addAllStandardEntities\"></sortable-list>\n\n        </md-step>\n\n      </md-steppers>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 v-if=\"stepper.active === this.STEPPERS_DATA.context\"\n                 :disabled=\"!(inputValue.trim().length > 0)\"\n                 @click=\"PassToSecondStep\">Next</md-button>\n\n      <md-button v-if=\"stepper.active === this.STEPPERS_DATA.entities\"\n                 :disabled=\"disabledButton()\"\n                 class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n\n  </md-dialog>\n</template>\n\n<script>\n\nimport { spinalAnalyticService , ENTITY_TYPES } from \"spinal-model-analysis\";\n\nimport SortableList from \"./components/sortable-list.vue\";\n\nexport default {\n  name: \"createAnalyticContextDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"sortable-list\": SortableList,\n  },\n  data() {  \n    this.STEPPERS_DATA = {\n      context: \"first\",\n      entities: \"second\",\n    };\n    return {\n      showDialog: true,\n      inputValue: \"\",\n      entities: [], \n      stepper: {\n        active: this.STEPPERS_DATA.context,\n        first: false,\n        second: false,\n      },\n    };\n  },\n  methods: {\n    opened(option) {\n      this.autoFocusNameInput();\n    },\n\n    async removed(res) {\n      if (res.closeResult){\n        const context = await spinalAnalyticService.createContext(res.inputValue.trim());\n        for (const entity of res.entities){\n          console.log(\"entity :\",entity);\n          const newEntity = {\n            name : entity.name,\n            standard_name: entity.standard_name,\n            entityType: entity.entityType,\n            description:\"\"\n          }\n          const entityInfo = await spinalAnalyticService.addEntity(newEntity,context.id.get());\n        }\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        const entities = this.getEntities();\n        this.onFinised({\n          closeResult,\n          inputValue: this.inputValue,\n          entities,\n        });\n      }\n    },\n\n    getEntities() {\n      if (this.$refs.draggableComponent) {\n        const entities = this.$refs.draggableComponent.itemsSorted;\n        return entities.map((el, index) => {\n          el.order = index;\n          return el;\n        });\n      }\n    },\n\n    disabledButton() {\n      const contextCondition = this.inputValue.trim().length === 0;\n      const stepsCondition = this.entities.length === 0;\n      return contextCondition || stepsCondition;\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n\n    changeStep(stepId) {\n      if (stepId === this.STEPPERS_DATA.context) {\n        this.stepper.active = stepId;\n        this.stepper.first = false;\n      }\n    },\n\n    PassToSecondStep() {\n      this.stepper.first = true;\n      this.stepper.active = this.STEPPERS_DATA.entities;\n    },\n\n    addEntity(res) {\n      this.entities = [...this.entities, res];\n    },\n\n    deleteItem(order) {\n      this.entities = this.entities.filter((el) => el.order !== order);\n    },\n\n    addAllStandardEntities(){\n      this.entities = [];\n      this.entities = [\n        {name: \"Building\", standard_name: \"Building\", entityType: ENTITY_TYPES.BUILDING, description: \"\",order:0},\n        {name: \"Floor\", standard_name: \"Floor\", entityType: ENTITY_TYPES.FLOOR, description: \"\",order:1},\n        {name: \"Room\", standard_name: \"Room\", entityType: ENTITY_TYPES.ROOM, description: \"\",order:2},\n        {name: \"Equipment\", standard_name: \"Equipment\", entityType: ENTITY_TYPES.EQUIPMENT, description: \"\",order:3},\n        {name: \"Floor Group\", standard_name: \"Floor Group\", entityType: ENTITY_TYPES.FLOOR_GROUP, description: \"\",order:4},\n        {name: \"Room Group\", standard_name: \"Room Group\", entityType: ENTITY_TYPES.ROOM_GROUP, description: \"\",order:5},\n        {name: \"Equipment Group\", standard_name: \"Equipment Group\", entityType: ENTITY_TYPES.EQUIPMENT_GROUP, description: \"\",order:6},\n      ]\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* .dialogForm { \n   display: flex; \n  flex-direction: column; \n } */\n\n.mdDialog {\n  width: 500px;\n  height: 550px;\n}\n\n.mdDialog .mdDialogTitle {\n  text-align: center;\n}\n\n.mdDialog .mdDialogContainer {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.mdDialog .mdDialogContainer .mdStep {\n  height: 350px;\n  overflow: hidden;\n  padding: 10px 0px;\n}\n\n.mdDialog .mdDialogContainer .mdStep .contents {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  overflow: auto;\n}\n\n/* .mdDialog .mdDialogContainer .contents.contextName {\n  display: flex;\n  align-items: center;\n}\n\n.mdDialog .mdDialogContainer .actions {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: flex-end;\n} */\n</style>\n\n<style>\n.mdDialog .mdDialogContainer .mdStep .md-stepper-content.md-active {\n  width: 100%;\n  height: 100%;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"myContainer md-scrollbar\">\n    <md-button  class=\"md-dense md-primary\"\n                @click=\"addAllStandardEntities()\">\n                Add all standard entities\n    </md-button>\n    <div class=\"myFabs\">\n      <addItemsPopover @addEntity=\"addEntity\"></addItemsPopover>\n    </div>\n\n\n    <draggable v-if=\"itemsSorted.length > 0\"\n               group=\"entities\"\n               @start=\"drag=true\"\n               @end=\"drag=false\"\n               v-model=\"itemsSorted\">\n      <div class=\"listeItemDraggable\"\n           v-for=\"element in itemsSorted\"\n           :key=\"element.order\">\n        <div class=\"left\">\n          <div class=\"name\">\n            {{element.name}}\n          </div>\n        </div>\n\n        <div class=\"right\">\n          <md-button class=\"md-icon-button md-dense md-accent\"\n                     @click=\"deleteItem(element.order)\">\n            <md-icon>delete_forever</md-icon>\n          </md-button>\n        </div>\n\n      </div>\n    </draggable>\n\n    <div v-else\n         class=\"empty\">\n      No entities created\n    </div>\n\n    \n\n  </md-content>\n</template>\n\n<script>\nimport draggable from \"vuedraggable\";\nimport addItemsPopover from \"./addItemsPopover.vue\";\nexport default {\n  name: \"Sortable-List\",\n  components: { addItemsPopover, draggable },\n  props: {\n    items: { default: [] },\n  },\n  data() {\n    return {\n      itemsSorted: [],\n    };\n  },\n  mounted() {\n    this.itemsSorted = this.items;\n  },\n  methods: {\n    addEntity(res) {\n      res[\"order\"] = this.items.length;\n      this.$emit(\"addEntity\", res);\n    },\n    deleteItem(order) {\n      this.$emit(\"delete\", order);\n    },\n    addAllStandardEntities(){\n      this.$emit(\"addAllStandardEntities\");\n    }\n  },\n  watch: {\n    items() {\n      this.itemsSorted = this.items;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.myContainer {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  position: relative;\n}\n\n.myContainer .myFabs {\n  width: 50px;\n  position: absolute;\n  top: 0px;\n  right: 10px;\n}\n\n.myContainer .empty {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.listeItemDraggable {\n  width: 100%;\n  height: 50px;\n  /* background: grey; */\n  border: 1px dashed grey;\n  color: #ffffff;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  display: flex;\n}\n\n.listeItemDraggable .left {\n  flex: 1 1 80%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  font-size: 1.5em;\n}\n\n.listeItemDraggable .right {\n  flex: 1 1 20%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.listeItemDraggable .left .name {\n  margin-left: 10px;\n}\n\n.listeItemDraggable .left .color {\n  height: 100%;\n  width: 10px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover offset=\"16\"\n             :auto-hide=\"false\"\n             :open=\"show\">\n\n    <md-button class=\"tooltip-target md-fab md-mini md-primary\">\n      <md-icon>add</md-icon>\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n          <md-field>\n            <label>Entity name</label>\n            <md-input v-model=\"name\"></md-input>\n          </md-field>\n\n          <md-field>\n            <label>Entity standard name e.g : Room , Floor etc ...</label>\n            <md-input v-model=\"standard_name\"></md-input>\n          </md-field>\n\n\n          <md-field>\n            <label>Entity type</label>\n            <md-select v-model=\"entityType\">\n              <md-option v-for=\"type in Object.keys(ENTITY_TYPES)\"\n                         :key=\"type\"\n                         :value=\"type\">\n                {{type}}\n              </md-option>\n            </md-select>\n          </md-field>\n\n          \n        </div>\n\n        <div class=\"_popoverBtn\">\n          <md-button class=\"btn md-dense md-primary\"\n                     v-close-popover>Close</md-button>\n\n          <md-button class=\"btn md-dense md-primary\"\n                     :disabled=\"disabled()\"\n                     @click=\"addEntity\"\n                     v-close-popover>ADD</md-button>\n\n        </div>\n      </div>\n\n    </template>\n  </v-popover>\n</template>\n\n<script>\n\nimport { ENTITY_TYPES } from \"spinal-model-analysis\";\n\n\nexport default {\n  name: \"addItemsPopover\",\n  components: {\n\n  },\n  data() {\n    return {\n      ENTITY_TYPES : ENTITY_TYPES,\n      name: \"\",\n      standard_name :\"\",\n      entityType: \"\",\n      show: false,\n    };\n  },\n  methods: {\n    OpenAttribute() {\n      this.show = !this.show;\n    },\n    addEntity() {\n      this.$emit(\"addEntity\", { name: this.name, standard_name: this.standard_name, entityType:ENTITY_TYPES[this.entityType]});\n      this.name = \"\";\n      this.standard_name = \"\";\n      this.entityType = \"\";\n    },\n    disabled() {\n      return this.name.trim().length === 0;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.popoverContainer {\n  width: 350px;\n  height: 300px;\n}\n\n.popoverContainer ._popoverContent {\n  height: 250px;\n}\n\n.popoverContainer ._popoverContent .colorPicker {\n  width: 100%;\n  height: 100px;\n}\n\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-dialog\n\t\tclass=\"mdDialogContainer\"\n\t\t:md-active.sync=\"showDialog\"\n\t\t@md-closed=\"closeDialog(false)\"\n\t>\n\t\t<md-dialog-title class=\"dialogTitle\">Create Entity </md-dialog-title>\n\t\t<md-dialog-content class=\"content\">\n\t\t\t<md-field>\n\t\t\t\t<label>Name</label>\n\t\t\t\t<md-input v-model=\"entity.name\"></md-input>\n\t\t\t</md-field>\n\n\t\t\t<md-field>\n\t\t\t\t<label>Standard name</label>\n\t\t\t\t<md-input v-model=\"entity.standard_name\"></md-input>\n\t\t\t</md-field>\n\n\t\t\t<md-field>\n\t\t\t\t<label for=\"entityType\">Entity type</label>\n\t\t\t\t<md-select\n\t\t\t\t\tv-model=\"entity.entityType\"\n\t\t\t\t\tname=\"entityType\"\n\t\t\t\t\tid=\"entityType\"\n\t\t\t\t>\n\t\t\t\t\t<md-option\n\t\t\t\t\t\tv-for=\"data of Object.keys(types)\"\n\t\t\t\t\t\t:key=\"data\"\n\t\t\t\t\t\t:value=\"data\"\n\t\t\t\t\t\t>{{ data }}</md-option\n\t\t\t\t\t>\n\t\t\t\t</md-select>\n\t\t\t</md-field>\n\t\t</md-dialog-content>\n\t\t<md-dialog-actions>\n\t\t\t<md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n\t\t\t\t>Close</md-button\n\t\t\t>\n\t\t\t<md-button\n\t\t\t\tclass=\"md-primary\"\n\t\t\t\t:disabled=\"disabled()\"\n\t\t\t\t@click=\"closeDialog(true)\"\n\t\t\t\t>Save</md-button\n\t\t\t>\n\t\t</md-dialog-actions>\n\t</md-dialog>\n</template>\n\n<script>\n\timport {spinalAnalyticService, ENTITY_TYPES } from \"spinal-model-analysis\"\n\n\texport default {\n\t\tname: \"createEntityDialog\",\n\t\tprops: [\"onFinised\"],\n\t\tdata() {\n\t\t\tthis.types = ENTITY_TYPES;\n\t\t\tthis.contextId;\n\t\t\tthis.groupId;\n\n\t\t\treturn {\n\t\t\t\tshowDialog: true,\n\t\t\t\tentity: {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tstandard_name:\"\",\n\t\t\t\t\tentityType: \"\",\n\t\t\t\t\tdescription: \"\"\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\n\t\tmethods: {\n\t\t\topened(option) {\n\t\t\t\tconsole.log(option);\n\t\t\t\tthis.contextId = option.selectedNode.id.get();\n\t\t\t\tconsole.log(this.contextId);\n\t\t\t},\n\n\t\t\tasync removed(option) {\n\t\t\t\tif (option) {\n\t\t\t\t\tconst newEntity = {\n\t\t\t\t\t\tname: this.entity.name,\n\t\t\t\t\t\tstandard_name: this.entity.standard_name,\n\t\t\t\t\t\tentityType: this.types[this.entity.entityType],\n\t\t\t\t\t\tdescription: \"\"\n\t\t\t\t\t};\n\t\t\t\t\tconst entityInfo = await spinalAnalyticService.addEntity(newEntity,this.contextId);\n\t\t\t\t}\n\t\t\t\tthis.showDialog = false;\n\t\t\t},\n\n\t\t\tcloseDialog(closeResult) {\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised(closeResult);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdisabled() {\n\t\t\t\treturn (\n\t\t\t\t\tthis.entity.name.length === 0 ||\n\t\t\t\t\tthis.entity.entityType === \"\"\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.mdDialogContainer {\n\t\twidth: 300px;\n\t\theight: 450px;\n\t}\n\n\t.mdDialogContainer .dialogTitle {\n\t\ttext-align: center;\n\t}\n\n\t/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n","<template>\n  <md-dialog\n    :md-active.sync=\"showDialog\"\n    :md-click-outside-to-close=\"false\"\n    @md-closed=\"closeDialog(false)\"\n    class=\"mdDialog\"\n  >\n    <md-dialog-title class=\"mdDialogTitle\"> Create Analytic </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n      <md-steppers\n        :md-active-step.sync=\"stepper.active\"\n        @md-changed=\"changeStep\"\n        md-linear\n      >\n        <analytic-name\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          v-bind:analyticName.sync=\"analyticName\"\n          v-bind:analyticDescription.sync=\"analyticDescription\"\n          v-bind:analyticShouldTriggerAtStart.sync=\"analyticShouldTriggerAtStart\"\n          v-bind:analyticStatus.sync=\"analyticStatus\"\n          :editable=\"true\"\n        ></analytic-name>\n\n         <followed-entity\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :entityType=\"entityType\"\n          v-bind:followedEntity.sync=\"followedEntity\"\n        ></followed-entity>\n\n        <input-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :entityType=\"entityType\"\n          :followedEntity=\"followedEntity\"\n          @addInput=\"addInput\"\n          @removeInput=\"removeInput\"\n          v-bind:inputs.sync=\"inputs\"\n        >\n        </input-configuration>\n\n        <trigger-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :inputs=\"inputs\"\n          @addTrigger=\"addTrigger\"\n          @removeTrigger=\"removeTrigger\"\n          v-bind:triggers.sync=\"triggers\"\n        >\n        </trigger-configuration>\n\n        <algorithm-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          @addAlgorithm=\"addAlgorithm\"\n          @removeAlgorithm=\"removeAlgorithm\"\n          v-bind:algorithms.sync=\"algorithms\"\n          >\n        </algorithm-configuration>\n\n\n        <result-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :inputs=\"inputs\"\n          v-bind:resultName.sync=\"resultName\"\n          v-bind:resultType.sync=\"resultType\"\n          v-bind:intervalTime.sync=\"intervalTime\"\n          v-bind:ticketContextId.sync=\"ticketContextId\"\n          v-bind:ticketProcessId.sync=\"ticketProcessId\"\n          v-bind:phoneNumber.sync=\"phoneNumber\"\n          v-bind:phoneMessage.sync=\"phoneMessage\"\n          v-bind:gChatMessage.sync=\"gChatMessage\"\n          v-bind:gChatSpaceName.sync=\"gChatSpaceName\"\n          v-bind:alarmPriority.sync=\"alarmPriority\">\n        </result-configuration>\n\n\n        <io-dependencies\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :inputs=\"inputs\"\n          :algorithms=\"algorithms\"\n          v-bind:ioDependencies.sync=\"ioDependencies\"\n          >\n        </io-dependencies>\n\n        <summary-analytic\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :analyticName=\"analyticName\"\n          :trackingMethods=\"trackingMethods\"\n          :followedEntity=\"followedEntity\"\n          :algorithm=\"algorithm\"\n          :algorithmParameters=\"algorithmParameters\"\n          :resultName=\"resultName\"\n          :resultType=\"resultType\"\n          :intervalTime=\"intervalTime\"\n        >\n        </summary-analytic> \n      </md-steppers>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n\n      <md-button\n        class=\"md-primary\"\n        v-if=\"stepper.active !== this.STEPPERS_DATA.summary\"\n        @click=\"PassToNextStep\"\n        >Next\n      </md-button>\n      <md-button\n        v-if=\"stepper.active === this.STEPPERS_DATA.summary\"\n        :disabled=\"isSaveButtonDisabled()\"\n        class=\"md-primary\"\n        @click=\"closeDialog(true)\"\n        >Save</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport {\n  spinalAnalyticService,\n  CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS,\n  CATEGORY_ATTRIBUTE_RESULT_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS,\n  CATEGORY_ATTRIBUTE_IO_DEPENDENCIES,\n  CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING,\n  CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS,\n  ATTRIBUTE_GCHAT_MESSAGE,\n  ATTRIBUTE_GCHAT_SPACE,\n  ATTRIBUTE_PHONE_NUMBER,\n  ATTRIBUTE_PHONE_MESSAGE,\n  ATTRIBUTE_SEPARATOR,\n  ATTRIBUTE_TRACKING_METHOD,\n  ATTRIBUTE_FILTER_VALUE,\n  ATTRIBUTE_TIMESERIES,\n  ATTRIBUTE_RESULT_NAME,\n  ATTRIBUTE_RESULT_TYPE,\n  ATTRIBUTE_ANALYTIC_STATUS,\n  ATTRIBUTE_ANALYTIC_DESCRIPTION,\n  ATTRIBUTE_SEARCH_DEPTH,\n  ATTRIBUTE_STRICT_DEPTH,\n  ATTRIBUTE_SEARCH_RELATIONS,\n  ATTRIBUTE_TRIGGER_AT_START,\n  ATTRIBUTE_TICKET_CONTEXT_ID,\n  ATTRIBUTE_TICKET_PROCESS_ID,\n  ATTRIBUTE_ALARM_PRIORITY,\n  ATTRIBUTE_VALUE_SEPARATOR,\n  ANALYTIC_RESULT_TYPE,\n  TRACK_METHOD,\n  algos,\n  ANALYTIC_STATUS,\n  TRIGGER_TYPE\n} from 'spinal-model-analysis';\n\nimport analyticNameVue from './components/analyticSteps/analyticName.vue';\nimport followedEntityVue from './components/analyticSteps/followedEntity.vue';\nimport inputConfiguration from './components/analyticSteps/inputConfiguration.vue';\nimport triggerConfiguration from './components/analyticSteps/triggerConfiguration.vue';\nimport algorithmConfiguration from './components/analyticSteps/algorithmConfiguration.vue';\nimport resultConfiguration from './components/analyticSteps/resultConfiguration.vue';\nimport IODependenciesVue from './components/analyticSteps/IODependencies.vue';\nimport configurationVue from './components/analyticSteps/configuration.vue';\nimport summaryVue from './components/analyticSteps/summary.vue';\n\n\nexport default {\n  name: 'createAnalyticDialog',\n  props: ['onFinised'],\n  components: {\n    'analytic-name': analyticNameVue,\n    'followed-entity': followedEntityVue,\n    'input-configuration': inputConfiguration,\n    'trigger-configuration': triggerConfiguration,\n    'algorithm-configuration': algorithmConfiguration,\n    'result-configuration': resultConfiguration,\n    'io-dependencies': IODependenciesVue,\n    'configuration': configurationVue,\n    'summary-analytic': summaryVue,\n  },\n  data() {\n\n    this.STEPPERS_DATA = {\n      analytic: 'first',\n      followedEntity: 'second',\n      inputConfiguration: 'third',\n      triggerConfiguration: 'fourth',\n      algorithmConfiguration: 'fifth',\n      resultConfiguration: 'sixth',\n      IODependencies : 'seventh',\n      summary : 'eighth',\n    };\n\n    return {\n      showDialog: true,\n      showPreviewDialog: false,\n\n      // Analytic attributes data\n      analyticName: '',\n      analyticDescription:'',\n      analyticShouldTriggerAtStart : false,\n      analyticStatus : false,\n\n\n      // Inputs -> Followed Entity -> attribute data\n      followedEntity: undefined, \n\n      // Inputs  -> Tracking Method -> attribute data\n      inputs: { },\n\n\n      // Config -> trigger attribute data\n      triggers: { },\n\n      // Config -> Algorithms attribute data\n      algorithms: {},\n\n      // Config -> I/O Dependencies attribute data\n      ioDependencies : { R : \"\"},\n\n      // Config -> Result attribute data\n      resultType : '',\n      resultName : '', \n      ticketContextId: '',\n      ticketProcessId: '',\n      phoneNumber:'',\n      phoneMessage:'',\n      alarmPriority: null,\n      gChatMessage : '',\n      gChatSpaceName : '',\n      \n      selectedNode: undefined,\n      entityType: undefined,\n\n      stepper: {\n        active: this.STEPPERS_DATA.analytic,\n        first: false,\n        second: false,\n        third: false,\n        fourth: false,\n        fifth: false,\n        sixth: false,\n        seventh: false,\n        eighth: false,\n      },\n    };\n  },\n\n  created() {\n    this.ANALYTIC_STATUS = ANALYTIC_STATUS;\n  },\n\n  methods: {\n    opened(option) {\n      this.selectedNode = option.selectedNode;\n      this.entityType = this.selectedNode.entityType.get();\n    },\n\n    async removed(res) {\n      if (res.closeResult) {\n\n        // there must be a better way to get the context id...\n        const contextId = Object.keys(this.selectedNode.contextIds.get())[0];\n\n        //create analytic Node\n        const IAnalytic = {\n          name: this.analyticName,\n          description: '',\n        };\n\n        const analyticInfo = await spinalAnalyticService.addAnalytic(\n          IAnalytic,\n          contextId,\n          this.selectedNode.id.get()\n        );\n\n        //create trackingMethod Node\n        const trackingMethodAttributes = this.getTrackingMethodAttributes();\n        console.log('trackingMethodAttributes :', trackingMethodAttributes);\n        \n        const trackingMethodInfo =\n          await spinalAnalyticService.addInputTrackingMethod(\n            trackingMethodAttributes,\n            contextId,\n            analyticInfo.id.get()\n          );\n\n\n\n        //create followedEntity Node\n\n        const followedEntityInfo =\n          await spinalAnalyticService.addInputLinkToFollowedEntity(\n            contextId,\n            analyticInfo.id.get(),\n            this.followedEntity\n        );\n\n\n        //create config Node\n        const configAttributes = {};\n\n\n        //Add all analytic parameters ( description, status, triggerAtStart)\n        const analyticAttributes = this.getAnalyticAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS\n        ] = analyticAttributes;\n\n\n        const triggerAttributes = this.getTriggerAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS\n        ] = triggerAttributes;\n\n\n        const resultAttributes = this.getResultAttributes();\n        configAttributes[CATEGORY_ATTRIBUTE_RESULT_PARAMETERS] = resultAttributes;\n        \n\n\n        const algorithmParametersAttributes = this.getAlgorithmParametersAttributes();\n        configAttributes[CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS] =\n          algorithmParametersAttributes;\n        \n        const algorithmMappingAttributes = this.getAlgorithmMappingAttributes();\n        configAttributes[CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING] = algorithmMappingAttributes;\n\n        const ioAttributes = this.getIOAttributes();\n        configAttributes[CATEGORY_ATTRIBUTE_IO_DEPENDENCIES] = ioAttributes;\n        \n        if (this.ticketContextId && this.ticketProcessId) {\n          const ticketAttributes = this.getTicketAttributes();\n          configAttributes[\n            CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS\n          ] = ticketAttributes;\n        }\n\n        if(this.resultType == ANALYTIC_RESULT_TYPE.SMS){\n          const smsAttributes = this.getSMSAttributes();\n          configAttributes[\n            CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS\n          ] = smsAttributes;\n        };\n\n        if([ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE,ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD].includes(this.resultType)){\n          const gChatAttributes = this.getGChatAttributes();\n          configAttributes[\n            CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS\n          ] = gChatAttributes;\n        };\n        \n        console.log('configAttributes :', configAttributes);\n\n        const configInfo = await spinalAnalyticService.addConfig(\n          configAttributes,\n          analyticInfo.id.get(),\n          contextId\n        );\n      }\n\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised({\n          closeResult,\n          analyticName: this.analyticName,\n        });\n      }\n    },\n\n    addInput() {\n      let length = Object.keys(this.inputs).length;\n      console.log('adding input');\n      this.inputs = { ...this.inputs, [`I${length}`]: { trackingMethod: '', filterValue: '', searchDepth:0, strictDepth:false, searchRelations:'', timeseriesIntervalTime : 0 }};\n    },\n\n    removeInput(inputName) {\n      delete this.inputs[inputName];\n      let index = Number(inputName.match(/(\\d+)/)[0]);\n      // shift back all the inputs after the deleted one.\n      let i = index;\n      while (this.inputs[`I${i + 1}`] !== undefined) {\n        this.inputs[`I${i}`] = this.inputs[`I${i + 1}`];\n        i++;\n      }\n      // Remove the last item.\n      delete this.inputs[`I${i}`];\n\n      this.inputs = { ...this.inputs };\n      console.log(\"deleted input : \", inputName);\n    },\n\n    addTrigger() {\n      let length = Object.keys(this.triggers).length;\n      console.log('adding input');\n      this.triggers = { ...this.triggers, [`T${length}`]: { triggerType: '', triggerValue: '', changeOfValueThreshold : 0 }};\n      \n    },\n\n    removeTrigger(triggerName) {\n      delete this.triggers[triggerName];\n      let index = Number(triggerName.match(/(\\d+)/)[0]);\n      // shift back all the elements after the deleted one.\n      let i = index;\n      while (this.triggers[`T${i + 1}`] !== undefined) {\n        this.triggers[`T${i}`] = this.triggers[`T${i + 1}`];\n        i++;\n      }\n      // Remove the last item.\n      delete this.triggers[`T${i}`];\n\n      this.triggers = { ...this.triggers };\n      console.log(\"deleted trigger : \", triggerName);\n    },\n\n    addAlgorithm(){\n      let length = Object.keys(this.algorithms).length;\n      console.log('adding algorithm');\n      this.algorithms = { ...this.algorithms, [`A${length}`]: { name :'', params: []}};\n    },\n\n    removeAlgorithm(algorithmIndexName){\n      delete this.algorithms[algorithmIndexName];\n      let index = Number(algorithmIndexName.match(/(\\d+)/)[0]);\n      // shift back all the elements after the deleted one.\n      let i = index;\n      while (this.algorithms[`A${i + 1}`] !== undefined) {\n        this.algorithms[`A${i}`] = this.algorithms[`A${i + 1}`];\n        i++;\n      }\n      // Remove the last item.\n      delete this.algorithms[`A${i}`];\n\n      this.algorithms = { ...this.algorithms };\n      console.log(\"deleted algorithm : \", algorithmIndexName);\n    },\n\n    changeStep(stepId) {\n      this.stepper.active = stepId;\n    },\n\n    PassToNextStep() {\n      switch (this.stepper.active) {\n        case this.STEPPERS_DATA.analytic:\n          this.stepper.first = true;\n          this.stepper.active = this.STEPPERS_DATA.followedEntity;\n          break;\n        case this.STEPPERS_DATA.followedEntity:\n          this.stepper.second = true;\n          this.stepper.active = this.STEPPERS_DATA.inputConfiguration;\n          break;\n        case this.STEPPERS_DATA.inputConfiguration:\n          this.stepper.third = true;\n          this.stepper.active = this.STEPPERS_DATA.triggerConfiguration;\n          break;\n        case this.STEPPERS_DATA.triggerConfiguration:\n          this.stepper.fourth = true;\n          this.stepper.active = this.STEPPERS_DATA.algorithmConfiguration;\n          break;\n        case this.STEPPERS_DATA.algorithmConfiguration:\n          this.stepper.fifth = true;\n          this.stepper.active = this.STEPPERS_DATA.resultConfiguration;\n          break;\n        case this.STEPPERS_DATA.resultConfiguration:\n          this.stepper.sixth = true;\n          this.stepper.active = this.STEPPERS_DATA.IODependencies;\n          break;\n        case this.STEPPERS_DATA.IODependencies:\n          this.stepper.seventh = true;\n          this.stepper.active = this.STEPPERS_DATA.summary;\n          break;\n        case this.STEPPERS_DATA.summary:\n          this.stepper.eighth = true;\n          this.stepper.active = this.STEPPERS_DATA.summary;\n          break;\n      }\n    },\n\n    isSaveButtonDisabled() {\n      return (\n        this.analyticName === '' ||\n        this.algorithm === '' ||\n        this.resultType === '' ||\n        this.resultName === '' ||\n        this.intervalTime === null ||\n        !this.followedEntity\n      );\n    },\n\n    getTrackingMethodAttributes(){\n      const trackingMethodAttributes = {};\n      for ( const inputKey of Object.keys(this.inputs))\n      {\n        trackingMethodAttributes[inputKey] = []\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_TRACKING_METHOD}`,\n                  type: 'string',\n                  value: this.inputs[inputKey].trackingMethod });\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_FILTER_VALUE}`,\n                  type: 'string',\n                  value: this.inputs[inputKey].filterValue });\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_SEARCH_DEPTH}`,\n                  type: 'number',\n                  value: this.inputs[inputKey].searchDepth });\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_STRICT_DEPTH}`,\n                  type: 'boolean',\n                  value: this.inputs[inputKey].strictDepth });\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_SEARCH_RELATIONS}`,\n                  type: 'string',\n                  value: this.inputs[inputKey].searchRelations });\n        \n        if([TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER,TRACK_METHOD.ENDPOINT_NAME_FILTER].includes(this.inputs[inputKey].trackingMethod) ){\n          trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_TIMESERIES}`,\n                  type: 'number',\n                  value: this.inputs[inputKey].timeseriesIntervalTime });\n        }\n        \n      }\n      return trackingMethodAttributes;\n    },\n\n    getAnalyticAttributes(){\n      const analyticAttributes = [];\n      analyticAttributes.push({\n        name: `${ATTRIBUTE_ANALYTIC_DESCRIPTION}`,\n        type: 'string',\n        value: this.analyticDescription,\n      });\n      analyticAttributes.push({\n        name: `${ATTRIBUTE_ANALYTIC_STATUS}`,\n        type: 'string',\n        value: this.analyticStatus? ANALYTIC_STATUS.ACTIVE : ANALYTIC_STATUS.INACTIVE,\n      });\n      analyticAttributes.push({\n        name: `${ATTRIBUTE_TRIGGER_AT_START}`,\n        type: 'boolean',\n        value: this.analyticShouldTriggerAtStart,\n      });\n      return analyticAttributes;\n    },\n\n    getResultAttributes(){\n      const resultAttributes = [];\n      resultAttributes.push({\n        name: `${ATTRIBUTE_RESULT_TYPE}`,\n        type: 'string',\n        value: this.resultType,\n      });\n      resultAttributes.push({\n        name: `${ATTRIBUTE_RESULT_NAME}`,\n        type: 'string',\n        value: this.resultName,\n      });\n      return resultAttributes;\n    },\n\n    getAlgorithmParametersAttributes(){\n      const algorithmParametersAttributes = [];\n      for (const algorithmIndexName of Object.keys(this.algorithms)) {\n        let algoName = this.algorithms[algorithmIndexName].name;\n        const doc = algos[algoName].requiredParams;\n        for(let i = 0 ; i<this.algorithms[algorithmIndexName].params.length; i++){\n          algorithmParametersAttributes.push({\n            name: `${algorithmIndexName}${ATTRIBUTE_SEPARATOR}${doc[i].name}`,\n            value: doc[i].type === 'number' ? + this.algorithms[algorithmIndexName].params[i] : this.algorithms[algorithmIndexName].params[i],\n            type: doc[i].type,\n          });\n        }\n      }\n      return algorithmParametersAttributes;\n    },\n\n    getAlgorithmMappingAttributes(){\n      const algorithmMappingAttributes = [];\n      for (const algorithmIndexName of Object.keys(this.algorithms)) {\n        algorithmMappingAttributes.push({\n          name: `${algorithmIndexName}`,\n          type: 'string',\n          value: this.algorithms[algorithmIndexName].name,\n        });\n      }\n      return algorithmMappingAttributes;\n    },\n\n    getTicketAttributes(){\n      const ticketAttributes = [];\n      ticketAttributes.push({\n        name: `${ATTRIBUTE_TICKET_CONTEXT_ID}`,\n        type: 'string',\n        value: this.ticketContextId,\n      });\n      ticketAttributes.push({\n        name: `${ATTRIBUTE_TICKET_PROCESS_ID}`,\n        type: 'string',\n        value: this.ticketProcessId,\n      });\n      if(this.alarmPriority){\n          ticketAttributes.push({\n            name: `${ATTRIBUTE_ALARM_PRIORITY}`,\n            value: this.alarmPriority,\n            type: 'number',\n          });\n        }\n      return ticketAttributes;\n    },\n\n    getSMSAttributes(){\n      const smsAttributes = [];\n      smsAttributes.push({\n        name: `${ATTRIBUTE_PHONE_NUMBER}`,\n        type: 'string',\n        value: this.phoneNumber,\n      });\n      smsAttributes.push({\n        name: `${ATTRIBUTE_PHONE_MESSAGE}`,\n        type: 'string',\n        value: this.phoneMessage,\n      });\n      return smsAttributes;\n    },\n\n    getGChatAttributes(){\n      const gChatAttributes = [];\n      gChatAttributes.push({\n        name: `${ATTRIBUTE_GCHAT_MESSAGE}`,\n        type: 'string',\n        value: this.gChatMessage,\n      });\n      gChatAttributes.push({\n        name: `${ATTRIBUTE_GCHAT_SPACE}`,\n        type: 'string',\n        value: this.gChatSpaceName,\n      });\n      return gChatAttributes;\n    },\n    \n\n    getIOAttributes(){\n      const ioAttributes = [];\n      for (const ioDependencyName of Object.keys(this.ioDependencies)) {\n        let str = \"\";\n        for (const ioDependency of this.ioDependencies[ioDependencyName]) {\n          str += `${ioDependency}${ATTRIBUTE_VALUE_SEPARATOR}`;\n        }\n        str = str.slice(0, -1);\n        ioAttributes.push({\n          name: `${ioDependencyName}`,\n          type: 'string',\n          value: str,\n        });\n      }\n      return ioAttributes;\n    },\n\n    getTriggerAttributes(){\n      const triggerAttributes = [];\n      for (const triggerIndex of Object.keys(this.triggers)) {\n        let str = `${this.triggers[triggerIndex].triggerType}${ATTRIBUTE_VALUE_SEPARATOR}${this.triggers[triggerIndex].triggerValue}`;\n        if (this.triggers[triggerIndex].changeOfValueThreshold !== null) {\n          str += `${ATTRIBUTE_VALUE_SEPARATOR}${this.triggers[triggerIndex].changeOfValueThreshold}`;\n        }\n        triggerAttributes.push({\n          name: `${triggerIndex}`,\n          type: 'string',\n          value: str,\n        });\n      }\n      return triggerAttributes;\n    },\n    \n  },\n};\n</script>\n\n<style scoped>\n.mdDialog {\n  width: 1200px;\n  max-width: 1500px;\n  height: 600px;\n}\n\n.mdDialog .mdDialogTitle {\n  text-align: center;\n}\n\n.mdDialog .mdDialogContainer {\n  width: 1200px;\n  max-width: 1500px;\n  height: 100%;\n  overflow: auto;\n}\n\n.fixed-size-field {\n  width: 85%;\n  max-width: 85%;\n}\n\n.md-dialog-actions {\n  padding: 8px 16px; /* Add this line */\n  margin: 0; /* Add this line */\n}\n\n.md-button {\n  margin: 0 8px; /* Add this line */\n}\n\n.mdDialog .mdDialogContainer .mdStep {\n  height: 350px;\n  padding: 10px 0px;\n  overflow: auto;\n}\n</style>\n\n<style>\n.mdDialog .mdDialogContainer .mdStep .md-stepper-content.md-active {\n  width: 100%;\n  height: 100%;\n}\n.fixed-size-field {\n  width: 85%;\n  max-width: 85%;\n}\n\n.mdDialog .mdDialogContainer .mdStep .contents {\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  overflow: auto;\n}\n</style>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.analytic\"\n    md-label=\"Analytic\"\n    :md-done.sync=\"stepper.first\"\n  >\n    <md-content class=\"contents\">\n      <md-field class=\"fixed-size-field\">\n        <label>Analytic name</label>\n        <md-input\n          :disabled=\"!editable\"\n          @change=\"update('analyticName',localAnalyticName)\"\n          v-model=\"localAnalyticName\"\n        ></md-input>\n      </md-field>\n\n      <md-field class=\"fixed-size-field\">\n        <label>Analytic Description</label>\n        <md-input\n          @change=\"update('analyticDescription',localAnalyticDescription)\"\n          v-model=\"localAnalyticDescription\"\n        ></md-input>\n      </md-field>\n\n        <md-switch\n          @change=\"update('analyticShouldTriggerAtStart',localAnalyticShouldTriggerAtStart)\"\n          v-model=\"localAnalyticShouldTriggerAtStart\"\n        >Should force trigger at start : <b>{{ localAnalyticShouldTriggerAtStart ? 'Yes': 'No'}} </b> </md-switch>\n\n        <md-switch\n          @change=\"update('analyticStatus',localAnalyticStatus)\"\n          v-model=\"localAnalyticStatus\"\n        >Analytic Status : <b> {{localAnalyticStatus ? 'Active' : 'Inactive'}} </b> </md-switch>\n      \n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport { ANALYTIC_STATUS } from \"spinal-model-analysis\"\nexport default {\n  props: [\n    'STEPPERS_DATA',\n    'stepper',\n    'analyticName',\n    'analyticDescription',\n    'analyticShouldTriggerAtStart',\n    'analyticStatus',\n    'editable',\n  ],\n  data() {\n    return {\n      localAnalyticName: this.analyticName,\n      localAnalyticDescription: this.analyticDescription,\n      localAnalyticShouldTriggerAtStart: this.analyticShouldTriggerAtStart,\n      localAnalyticStatus: this.analyticStatus,\n      statuSwitchValue : this.computedStatuSwitchValue,\n    };\n  },\n  created() {\n    this.ANALYTIC_STATUS = ANALYTIC_STATUS;\n  },\n\n  computed : {\n    computedAnalyticStatus () {\n      return this.statuSwitchValue ? ANALYTIC_STATUS.ACTIVE : ANALYTIC_STATUS.INACTIVE;\n    },\n\n    computedStatuSwitchValue () {\n      return this.localAnalyticStatus === ANALYTIC_STATUS.ACTIVE;\n    }\n  },\n  methods: {\n    update(key, value) {\n      console.log('update ', key, value);\n      this.$emit(`update:${key}`, value);\n    },\n  },\n  watch: {\n    analyticName() {\n      this.localAnalyticName = this.analyticName;\n    },\n    analyticDescription() {\n      this.localAnalyticDescription = this.analyticDescription;\n    },\n    analyticShouldTriggerAtStart() {\n      this.localAnalyticShouldTriggerAtStart = this.analyticShouldTriggerAtStart;\n    },\n    analyticStatus() {\n      this.localAnalyticStatus = this.analyticStatus;\n\n    },\n  },\n};\n</script>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.followedEntity\"\n    md-label=\"Anchor\"\n    :md-done.sync=\"stepper.second\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <div>\n        <p> The followed entity (Anchor) is the source that is providing the inputs.</p>\n        <p>\n          For exemple, if the target entity type is Room and the followed entity\n          is a room, the analytic will be applied to that specific room.</p\n        >\n        <p>\n          If the target entity type is Room and the followed entity is a group\n          of rooms, the analytic will be applied to all the rooms of the\n          group.</p\n        >\n        <p>\n          <strong> Currently selected node </strong>:\n          {{ !followedEntity ? 'None' : followedEntityName }}\n        </p>\n        <md-button @click=\"showSelectGroupEntityDialog = true\">\n          Follow group entity\n        </md-button>\n\n        <md-button\n          v-if=\"showSpatialSelector\"\n          @click=\"showSelectSpatialEntityDialog = true\"\n        >\n          Follow spatial entity\n        </md-button>\n\n        <md-button\n        @click=\"showSelectContextEntityDialog = true\"\n        > Follow Context </md-button>\n\n\n      </div>\n\n\n      <link-to-context\n        v-if=\"entityType\"\n        :visible=\"showSelectContextEntityDialog\"\n        :entityType=\"entityType\"\n        @closeSelection=\"closeSelectContextEntityDialog\"\n      />\n\n      <link-to-entity\n        v-if=\"entityType && entityType != 'MonitoringServiceOrgan'\"\n        :visible=\"showSelectGroupEntityDialog\"\n        :entityType=\"\n          entityType.includes('Group') ? entityType : entityType + 'Group'\n        \"\n        @closeSelection=\"closeSelectGroupEntityDialog\"\n      />\n\n      <link-to-spatial-entity\n        v-if=\"entityType && entityType != 'MonitoringServiceOrgan'\"\n        :visible=\"showSelectSpatialEntityDialog\"\n        :entityType=\"entityType\"\n        @closeSelection=\"closeSelectSpatialEntityDialog\"\n      />\n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport linkToEntityVue from '../linkToEntity.vue';\nimport linkToSpatialEntityVue from '../linkToSpatialEntity.vue';\nimport linkToContextVue from '../linkToContext.vue';\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\n\nexport default {\n  props: ['STEPPERS_DATA', 'stepper', 'entityType', 'followedEntity'],\n  components: {\n    'link-to-entity': linkToEntityVue,\n    'link-to-spatial-entity': linkToSpatialEntityVue,\n    'link-to-context': linkToContextVue,\n  },\n  data() {\n    return {\n      localFollowedEntity: this.followedEntity,\n      showSelectSpatialEntityDialog: false,\n      showSelectGroupEntityDialog: false,\n      showSelectContextEntityDialog: false,\n    };\n  },\n  methods: {\n    closeSelectSpatialEntityDialog(selectedEntity) {\n      console.log('selected Entity :', selectedEntity);\n      this.$emit('update:followedEntity', selectedEntity);\n      this.showSelectSpatialEntityDialog = false;\n    },\n\n    closeSelectGroupEntityDialog(selectedGroup) {\n      console.log('selected Entity :', selectedGroup);\n      this.$emit('update:followedEntity', selectedGroup);\n      this.showSelectGroupEntityDialog = false;\n    },\n    closeSelectContextEntityDialog(selectedEntity) {\n      console.log('selected Entity :', selectedEntity);\n      this.$emit('update:followedEntity', selectedEntity);\n      this.showSelectContextEntityDialog = false;\n    },\n  },\n  computed: {\n\n    showSpatialSelector(){\n      if (!this.entityType) return false;\n      return !this.entityType.includes('Group') && this.entityType !== 'BIMObject';\n    },\n\n    followedEntityName() {\n      if (!this.followedEntity) return '';\n      const info = SpinalGraphService.getInfo(this.followedEntity);\n      console.log(info);\n      return `${info.name.get()} | Type : ${info.type.get()} | Node id : ${info.id.get()}`;\n    },\n  },\n};\n</script>\n","<template>\n   <md-dialog\n      class=\"mdDialogContainer\"\n      :md-active.sync=\"visible\"\n    >\n      <md-dialog-title class=\"dialogTitle\">Link to Group</md-dialog-title>\n      <md-dialog-content class=\"content\">\n   \n\n         <div class=\"section\">\n            <link-template\n               :title=\"'Contexts'\"\n               :data=\"data\"\n               :itemSelected=\"contextSelected\"\n               @select=\"selectContext\"\n            ></link-template>\n         </div>\n\n         <div class=\"section\">\n            <link-template\n               :title=\"'Categories'\"\n               :data=\"categories\"\n               :itemSelected=\"categorySelected\"\n               @select=\"selectCategory\"\n               :disableBtn=\"!contextSelected\"\n            ></link-template>\n\n         </div>\n\n         <div class=\"section\">\n            <link-template\n               :title=\"'Groups'\"\n               :data=\"groups\"\n               :itemSelected=\"groupSelected\"\n               @select=\"selectGroup\"\n               :disableBtn=\"!categorySelected\"\n            ></link-template>\n         </div>\n      </md-dialog-content>\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n         <md-button\n            class=\"md-primary\"\n            :disabled=\"disabled()\"\n            @click=\"closeDialog(true)\"\n         >Save</md-button>\n      </md-dialog-actions>\n   </md-dialog>\n\n</template>\n\n<script>\nimport attributeService from \"../../../services/index\";\n\n\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport linkToGroupTemplate from \"./linkerTemplate.vue\";\n\nexport default {\n   name: \"dialogComponent\",\n   components: {\n      \"link-template\": linkToGroupTemplate,\n   },\n   props: [\"visible\",\"entityType\"],\n   data() {\n      return {\n         showDialog: true,\n         data: [],\n         groups: [],\n         categories: [],\n         contextSelected: undefined,\n         categorySelected: undefined,\n         groupSelected: undefined,\n         items: [],\n         type: undefined,\n         callback: undefined,\n      };\n   },\n\n   mounted() {\n      this.type = this.entityType + \"Context\";\n      this.getAllData();\n   \n   },\n\n   methods: {\n\n      closeDialog(closeResult) {\n         if(!closeResult) {\n            this.$emit(\"closeSelection\", undefined);\n         }\n         else {\n            this.$emit(\"closeSelection\",this.groupSelected)\n         }\n         \n      },\n   \n      getAllData() {\n         attributeService.getAllGroupContext(this.type).then((res) => {\n            this.data = res;\n            this.updateCategory();\n            this.updateGroups();\n         });\n      },\n      \n      getGroups() {\n         this.groupSelected = undefined;\n\n         if (this.contextSelected && this.categorySelected) {\n            let context = this.data.find(\n               (el) => el.id === this.contextSelected\n            );\n            if (context) {\n               let category = context.category.find(\n                  (el) => el.id == this.categorySelected\n               );\n\n               if (category) return category.groups;\n            }\n         }\n         return [];\n      },\n\n      disabled() {\n         return !(\n            this.contextSelected &&\n            this.categorySelected &&\n            this.groupSelected\n         );\n      },\n\n      //////////////////////////////////////////////////////////////////\n      // Modify\n      //////////////////////////////////////////////////////////////////\n\n      updateCategory() {\n         // this.categorySelected = undefined;\n         this.categories = [];\n         if (this.contextSelected) {\n            let val = this.data.find((el) => el.id === this.contextSelected);\n            if (val) this.categories = val.category;\n         }\n      },\n\n      updateGroups() {\n         // this.groupSelected = undefined;\n         this.groups = [];\n         if (this.contextSelected && this.categorySelected) {\n            let context = this.data.find(\n               (el) => el.id === this.contextSelected\n            );\n            if (context) {\n               let category = context.category.find(\n                  (el) => el.id == this.categorySelected\n               );\n\n               if (category) this.groups = category.groups;\n            }\n         }\n      },\n\n      selectContext(id) {\n         this.contextSelected = id;\n      },\n\n      selectCategory(id) {\n         this.categorySelected = id;\n      },\n\n      selectGroup(id) {\n         this.groupSelected = id;\n      },\n   },\n   watch: {\n      contextSelected() {\n         this.categorySelected = undefined;\n         this.groupSelected = undefined;\n\n         this.updateCategory();\n         this.updateGroups();\n      },\n\n      categorySelected() {\n         this.groupSelected = undefined;\n\n         this.updateGroups();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n   transform: translate(-50%,-50%) scale(1) !important;\n   z-index: 1000 !important;\n   width: 100%;\n   height: 600px;\n}\n\n.mdDialogContainer .dialogTitle {\n   text-align: center;\n}\n\n.mdDialogContainer .content {\n   display: flex;\n   justify-content: space-between;\n   align-items: stretch;\n}\n\n.mdDialogContainer .content .section {\n   width: 30%;\n   border: 1px solid grey;\n   border-radius: 4% 4% 0 0;\n   padding: 15px;\n}\n\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n   max-width: 100%;\n   max-height: 100%;\n}\n</style>","import SpinalAttributeService from './classes/spinalAttributeService';\nimport SpinalConfigurationService from './classes/spinalConfigurationService';\n\nconst spinalAttributeService = new SpinalAttributeService();\nconst spinalConfigurationService = new SpinalConfigurationService()\n\nexport default spinalAttributeService;\n\nexport {\n  spinalAttributeService,\n  spinalConfigurationService\n}","import {\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\n\nimport {\n  serviceDocumentation\n} from 'spinal-env-viewer-plugin-documentation-service';\n\nimport {\n  BIM_OBJECT_TYPE\n} from \"spinal-env-viewer-plugin-forge/dist/Constants\";\n\nimport {\n  bimObjectManagerService\n} from \"spinal-env-viewer-bim-manager-service\";\n\nimport {\n  groupManagerService\n} from \"spinal-env-viewer-plugin-group-manager-service\";\n\n// import {\n//   groupService\n// } from \"spinal-env-viewer-room-manager/services/service.js\";\n\n\nexport default class SpinalAttributeService {\n\n  constructor() { }\n\n  async testGetAllAttributes(nodeId) {\n    const node = SpinalGraphService.getRealNode(nodeId);\n    return serviceDocumentation.getAllAttributes(nodeId)\n  }\n\n  getAllAttributes(nodeId, liste) {\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n\n    if (realNode) {\n      // return serviceDocumentation.getAllAttributes(realNode).then(\n      //   argAttributes => {\n      //     return argAttributes.map(el => {\n      //       let info = el.get();\n      //       if (liste && liste.indexOf(info.label) === -1) liste.push(info\n      //         .label);\n      //       return info;\n      //     })\n      //   });\n\n      return serviceDocumentation.getCategory(realNode).then(res => {\n        return res.map(el => {\n          let attrs = el.element.get();\n          return attrs.map(attr => {\n            if (liste && liste.indexOf(attr.label) === -1) liste\n              .push(attr.label);\n            attr[\"category\"] = el.nameCat;\n            return attr;\n          })\n        }).flat();\n      });\n\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n  async getAllData(contextId, nodeId) {\n    let context = SpinalGraphService.getRealNode(contextId);\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n    let res = {\n      types: [],\n      attributes: [],\n      data: {}\n    };\n\n    if (context && realNode) {\n      await realNode.findInContext(context, async (node) => {\n        SpinalGraphService._addNode(node);\n        let type = node.getType().get();\n        let info = node.info.get();\n\n        if (res.types.indexOf(type) === -1) {\n          res.types.push(type);\n        }\n\n        if (typeof res.data[type] === \"undefined\") res.data[\n          type] = [];\n\n        info[\"attributes\"] = await this.getAllAttributes(info.id, res\n          .attributes);\n\n        res.data[type].push(info);\n\n      })\n    }\n\n    return res;\n  }\n\n  getBimObjectAttribute(bimObjectInfo, attributeName) {\n\n    let model = window.spinal.BimObjectService.getModelByBimfile(bimObjectInfo\n      .bimFileId);\n\n    let value = attributeName.toLowerCase();\n\n\n    if (model) {\n      return bimObjectManagerService.getBimObjectProperties({\n        model: model,\n        selection: [bimObjectInfo.dbid]\n      }).then(res => {\n        let properties = res[0].properties[0].properties;\n\n        let found = properties.find(el => {\n          let attrName = el.attributeName.toLowerCase();\n          let displayName = el.displayName.toLowerCase();\n\n          return attrName === value || displayName === value;\n        })\n\n        if (found) {\n          return found.displayValue;\n        } else {\n          return \"-\";\n        }\n\n      }).catch(err => {\n        console.error(err);\n      })\n    } else {\n      return \"-\";\n    }\n\n  }\n\n  async createAttribute(nodeId, categoryName, attributeName) {\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n\n    let category;\n\n    category = await serviceDocumentation.getCategoryByName(realNode,\n      categoryName);\n\n    if (typeof category === \"undefined\") {\n      category = await serviceDocumentation.addCategoryAttribute(realNode,\n        categoryName);\n    }\n\n\n    let attr = {\n      label: attributeName,\n      value: \"-\"\n    }\n    if (realNode.getType().get() === BIM_OBJECT_TYPE) {\n      attr.value = await this.getBimObjectAttribute(realNode.info.get(),\n        attributeName);\n    }\n\n    await serviceDocumentation.addAttributeByCategory(realNode, category,\n      attr\n        .label, attr.value);\n\n  }\n\n  async updateAttributeValue(nodeId, categoryName, attributeName,\n    attributeValue) {\n\n\n    let attr = await this.getOrCreateAttribute(nodeId, categoryName,\n      attributeName);\n\n    if (attr && attr.value) {\n      attr.value.set(attributeValue);\n    }\n  }\n\n  getBimObjects(nodeId) {\n    // console.log(SpinalGraphService.getInfo(nodeId));\n    // return SpinalGraphService.findNodes(nodeId,)\n  }\n\n  async getOrCreateAttribute(nodeId, categoryName, attributeName) {\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n    if (realNode) {\n      let category = await serviceDocumentation.getCategoryByName(realNode,\n        categoryName);\n\n      if (typeof category === \"undefined\") {\n        category = await serviceDocumentation.addCategoryAttribute(realNode,\n          categoryName);\n      }\n\n      let attributes = await serviceDocumentation.getAttributesByCategory(\n        realNode,\n        categoryName);\n\n      let attr = attributes.find(el => {\n        return el.label.get() === attributeName;\n      })\n\n      if (attr) return attr;\n\n\n      await serviceDocumentation.addAttributeByCategory(realNode, category,\n        attributeName, \"-\");\n\n      attributes = await serviceDocumentation.getAttributesByCategory(\n        realNode,\n        categoryName);\n\n      return attributes.find(el => {\n        return el.label.get() === attributeName;\n      })\n\n    }\n  }\n\n\n  getAllGroupContext(type) {\n    return groupManagerService.getGroupContexts(type).then((contexts) => {\n      const promises = contexts.map(async context => {\n        context[\"category\"] = await this.getCategory(context.id);\n        return context;\n      })\n\n      return Promise.all(promises);\n    })\n\n  }\n  async getAllContexts(){\n    const contexts = await SpinalGraphService.getGraph().getChildren(\"hasContext\");\n    return contexts.map(el => SpinalGraphService.getInfo(el.info.id.get()));\n  }\n\n  async getCategory(contextId) {\n    const categories = await groupManagerService.getCategories(contextId)\n\n    const promises = categories.map(async category => {\n      let info = category.get();\n      info[\"groups\"] = await this.getGroup(category.id);\n      return info;\n    })\n\n    return Promise.all(promises);\n\n  }\n\n  async getGroup(categoryId) {\n\n    const groups = await groupManagerService.getGroups(categoryId);\n\n    return groups.map(el => el.get());\n\n  }\n\n  async getAllSpatialBuildings(){\n    const spatialContext = SpinalGraphService.getContext(\"spatial\");\n    const buildings = await SpinalGraphService.findInContextByType(spatialContext.info.id.get(),spatialContext.info.id.get(),\"geographicBuilding\");\n    //return buildings.map(el => SpinalGraphService.getInfo(el.info.id.get()));\n    return buildings;\n  }\n  linkItem(contextId, parentId, itemId) {\n    // groupService.linkElementToGroup(parentId, itemId, contextId)\n    return groupManagerService.linkElementToGroup(contextId, parentId,\n      itemId);\n  }\n\n}","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexports.__esModule = true;\nexports.REFERENCE_OBJECT_RELATION_TYPE = exports.BIM_OBJECT_RELATION_TYPE = exports.BIM_NODE_RELATION_TYPE = exports.BIM_OBJECT_VERSION_RELATION_TYPE = exports.REFERENCE_OBJECT_RELATION_NAME = exports.BIM_OBJECT_VERSION_RELATION_NAME = exports.BIM_OBJECT_RELATION_NAME = exports.BIM_NODE_RELATION_NAME = exports.BIM_CONTEXT_RELATION_TYPE = exports.BIM_CONTEXT_RELATION_NAME = exports.BIM_OBJECT_TYPE = exports.PART_RELATION_TYPE = exports.SCENE_RELATION_TYPE = exports.PART_RELATION_NAME = exports.SCENE_TYPE = exports.SCENE_RELATION_NAME = void 0;\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar constants_js_1 = require(\"spinal-env-viewer-context-geographic-service/build/constants.js\");\nexports.SCENE_RELATION_NAME = 'hasScene';\nexports.SCENE_TYPE = \"scene\";\nexports.PART_RELATION_NAME = 'hasParts';\nexports.SCENE_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.PART_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_OBJECT_TYPE = constants_js_1.EQUIPMENT_TYPE;\nexports.BIM_CONTEXT_RELATION_NAME = \"hasBimContext\";\nexports.BIM_CONTEXT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_NODE_RELATION_NAME = \"hasBimNode\";\nexports.BIM_OBJECT_RELATION_NAME = constants_js_1.EQUIPMENT_RELATION;\nexports.BIM_OBJECT_VERSION_RELATION_NAME = \"hasBimVersion\";\nexports.REFERENCE_OBJECT_RELATION_NAME = constants_js_1.REFERENCE_RELATION;\nexports.BIM_OBJECT_VERSION_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_NODE_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_OBJECT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.REFERENCE_OBJECT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bimService_1 = require(\"./bimObjects/bimService\");\nexports.bimObjectManagerService = bimService_1.default;\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BimObjectManagerService {\n    constructor() { }\n    getAllBimObjectsProperties(model) {\n        return this.getBimObjectProperties([\n            {\n                model: model,\n                selection: this.getLeafDbIds(model).selection\n            }\n        ]);\n    }\n    getBimObjectProperties(argBimObjects) {\n        // let properties = [];\n        let bimOjects = Array.isArray(argBimObjects)\n            ? argBimObjects\n            : [argBimObjects];\n        let promises = bimOjects.map(el => {\n            return this._getProperties(el.model, el.selection);\n        });\n        return Promise.all(promises).then(res => {\n            return res;\n        });\n    }\n    getLeafDbIds(model, rootId) {\n        const tree = model.getInstanceTree();\n        const dbIds = [];\n        if (typeof rootId === \"undefined\") {\n            rootId = [tree.nodeAccess.rootId];\n        }\n        else {\n            rootId = Array.isArray(rootId) ? rootId : [rootId];\n        }\n        rootId.forEach(el => {\n            const queue = [el];\n            let hasChildren;\n            while (queue.length) {\n                let id = queue.pop();\n                hasChildren = false;\n                tree.enumNodeChildren(id, childId => {\n                    hasChildren = true;\n                    queue.push(childId);\n                });\n                if (!hasChildren) {\n                    dbIds.push(id);\n                }\n            }\n        });\n        return { model: model, selection: dbIds };\n    }\n    getBimObjectsByPropertiesName(model, properties) {\n        return this.getAllBimObjectsProperties(model).then(res => {\n            let result = [];\n            for (let i = 0; i < res.length; i++) {\n                const element = res[i];\n                for (let j = 0; j < element.properties.length; j++) {\n                    const property = element.properties[j];\n                    if (typeof this._getLabel(property, properties) !== \"undefined\") {\n                        result.push(property);\n                    }\n                    // }\n                }\n                return result;\n            }\n        });\n    }\n    getBimObjectsValidated(referential, regEx) {\n        return this.getBimObjectProperties(referential).then(res => {\n            return res.map(element => {\n                return {\n                    model: element.model,\n                    properties: element.properties.filter(el => {\n                        return this._isValid(el, regEx);\n                    })\n                };\n            });\n        });\n    }\n    getBimObjectsByName(model, bimObjectName, labelName) {\n        return new Promise(resolve => {\n            model.search(bimObjectName.trim(), (res) => __awaiter(this, void 0, void 0, function* () {\n                let properties = yield this.getBimObjectProperties([\n                    { model: model, selection: res }\n                ]);\n                resolve(properties);\n            }), () => {\n                resolve([]);\n            }, labelName);\n        });\n    }\n    ////////////////////////////////////////////////////////////////////////\n    //                             PRIVATES                               //\n    ////////////////////////////////////////////////////////////////////////\n    _getProperties(model, selection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let properties = selection.map(el => {\n                return new Promise(resolve => {\n                    model.getProperties(el, res => {\n                        // properties.push(res);\n                        resolve(res);\n                    }, err => {\n                        resolve(undefined);\n                    });\n                });\n            });\n            return {\n                model: model,\n                properties: yield Promise.all(properties)\n            };\n        });\n    }\n    _getAllDbIds(model) {\n        var instanceTree = model.getData().instanceTree;\n        var allDbIdsStr = Object.keys(instanceTree.nodeAccess.dbIdToIndex);\n        return allDbIdsStr.map(function (id) {\n            return parseInt(id);\n        });\n    }\n    _getLabel(bim, properties) {\n        for (let i = 0; i < properties.length; i++) {\n            const propertieValue = properties[i].value;\n            const propertyName = properties[i].name;\n            const found = bim.properties.find(el => {\n                return typeof propertieValue === \"undefined\" ||\n                    propertieValue.length === 0\n                    ? el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase()\n                    : el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase() &&\n                        propertieValue == el.displayValue;\n            });\n            if (typeof found === \"undefined\") {\n                return undefined;\n            }\n        }\n        return true;\n    }\n    _isValid(el, regEx) {\n        for (let i = 0; i < regEx.length; i++) {\n            let nameRegex = regEx[i].nameRegex;\n            let valueRegex = regEx[i].valueRegex;\n            let found = el.properties.find(res => {\n                if (typeof valueRegex === \"undefined\") {\n                    return nameRegex.test(res.displayName);\n                }\n                return (nameRegex.test(res.displayName) && valueRegex.test(res.displayValue));\n            });\n            if (typeof found === \"undefined\") {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.default = new BimObjectManagerService();\n//# sourceMappingURL=bimService.js.map",null,"import {\n  groupManagerService\n} from \"spinal-env-viewer-plugin-group-manager-service\";\n\n\nimport {\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\n\nexport default class SpinalConfigurationService {\n  constructor() {\n    this.CONTEXT_NAME = \"NomenclatureConfiguration\";\n    this.CONFIGURATION_PROFIL_TYPE = \"AttributeConfiguration\";\n    this.ATTRIBUTE_TYPE = \"configurationAttribute\";\n  }\n\n  async createOrGetContext() {\n    const context = await groupManagerService.createGroupContext(\n      this.CONTEXT_NAME,\n      this.CONFIGURATION_PROFIL_TYPE\n    );\n\n    return context;\n  }\n\n  async createCategory(categoryName, iconName) {\n    const context = await this.createOrGetContext();\n    const contextId = context ? context.info.id.get() : undefined;\n\n    return groupManagerService.addCategory(contextId, categoryName, iconName);\n  }\n\n  async createGroup(categoryId, groupName, groupColor) {\n    const context = await this.createOrGetContext();\n    const contextId = context ? context.info.id.get() : undefined;\n\n    return groupManagerService.addGroup(\n      contextId,\n      categoryId,\n      groupName,\n      groupColor\n    );\n  }\n\n  async createConfiguration(\n    groupId,\n    configurationName,\n    configurationCategories = []\n  ) {\n    const context = await this.createOrGetContext();\n    const contextId = context ? context.info.id.get() : undefined;\n\n    const configurationNodeId = SpinalGraphService.createNode({\n        name: configurationName,\n        type: this.CONFIGURATION_PROFIL_TYPE,\n      },\n      new Model({\n        name: configurationName,\n        categories: configurationCategories,\n      })\n    );\n\n    await groupManagerService.linkElementToGroup(\n      contextId,\n      groupId,\n      configurationNodeId\n    );\n\n    return SpinalGraphService.getRealNode(configurationNodeId);\n  }\n\n  setAsCurrentConfiguration(nodeId) {\n    this.createOrGetContext().then((context) => {\n      let realNode = SpinalGraphService.getRealNode(nodeId);\n\n      if (realNode) {\n        if (context.info.currentConfiguration) {\n          context.info.rem_attr(\"currentConfiguration\");\n        }\n\n        context.info.add_attr({\n          currentConfiguration: new Ptr(realNode),\n        });\n      }\n    });\n  }\n\n  async deleteCurrentConf() {\n    const context = await this.createOrGetContext();\n    if (context && context.info.currentConfiguration)\n      context.info.rem_attr(\"currentConfiguration\");\n  }\n\n  getCurrentConfiguration() {\n    return this.createOrGetContext().then((context) => {\n      let confPtr = context.info.currentConfiguration;\n\n      if (typeof confPtr !== \"undefined\") {\n        return new Promise((resolve) => {\n          confPtr.load((realNode) => {\n            SpinalGraphService._addNode(realNode);\n            return realNode.getElement().then((el) => {\n              let element = el.get();\n              element[\"id\"] = realNode.info.id.get();\n              resolve(element);\n            });\n          });\n        });\n      }\n\n      return {\n        name: \"\",\n        categories: [],\n      };\n    });\n  }\n\n  editConfiguration(configurationId, configurationElement) {\n    let realNode = SpinalGraphService.getRealNode(configurationId);\n\n    if (realNode) {\n      realNode.getElement().then((element) => {\n        element.set(configurationElement);\n      });\n    }\n  }\n\n  async getConfigurationById(configId) {\n    const realNode = SpinalGraphService.getRealNode(configId);\n\n    if (realNode) {\n      const elementModel = await realNode.getElement();\n\n      if (elementModel) {\n        let element = elementModel.get();\n        element[\"id\"] = configId;\n        return element;\n      }\n    }\n\n  }\n\n  async getCategories() {\n    const context = await this.createOrGetContext();\n    return groupManagerService.getCategories(context.info.id.get());\n  }\n\n  getGroups(nodeId) {\n    // const context = await this.createOrGetContext();\n    return groupManagerService.getGroups(nodeId);\n  }\n\n  getConfigurations(groupId) {\n    return groupManagerService.getElementsLinkedToGroup(groupId);\n  }\n\n\n  isGroup(type) {\n    return groupManagerService.isGroup(type);\n  }\n\n  isCategory(type) {\n    return groupManagerService.isCategory(type);\n  }\n\n  async getElementGroup(id) {\n    const parents = await SpinalGraphService.getParents(id, []);\n\n    return parents[0];\n  }\n\n  async getTree(info) {\n    const obj = {\n      categoryId: undefined,\n      groupId: undefined,\n      configId: undefined\n    }\n\n    if (this.isCategory(info.type)) {\n\n      obj.categoryId = info.id;\n\n    } else if (this.isGroup(info.type)) {\n\n      const category = await groupManagerService.getGroupCategory(info.id);\n      if (category) obj.categoryId = category.id.get();\n\n      obj.groupId = info.id;\n\n    } else if (info.type === this.CONFIGURATION_PROFIL_TYPE) {\n\n      obj.configId = info.id;\n      const group = await this.getElementGroup(info.id);\n\n      if (group) {\n        obj.groupId = group.id.get();\n        const category = await groupManagerService.getGroupCategory(group.id\n          .get());\n\n        if (category) obj.categoryId = category.id.get();\n\n      }\n\n    }\n\n    return obj;\n\n  }\n\n}","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\nThis file is part of SpinalCore.\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n   <div class=\"subContent\">\n      <md-list class=\"title\">\n\n         <!--<md-list-item> \n          <div class=\"md-list-item-text\">\n          <span>{{title}}</span>\n          <span class=\"md-caption\"\n                v-if=\"subTitle\">{{subTitle}}</span>\n        </div>\n\n        <div class=\"md-layout-item md-size-10 mdIcon\">\n          <md-button class=\"md-icon-button\"\n                     @click=\"createEvent\"\n                     v-if=\"showBtn\">\n            <md-icon>control_point</md-icon>\n          </md-button>\n        </div> \n        </md-list-item>-->\n         <md-list-item>\n            <span class=\"md-list-item-text\">{{title}}</span>\n            <md-button\n               class=\"md-icon-button\"\n               @click=\"createEvent\"\n               v-if=\"showBtn\"\n            >\n               <md-icon>control_point</md-icon>\n            </md-button>\n         </md-list-item>\n\n      </md-list>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"showBtn\", \"subTitle\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n.subContent .title {\n   width: 100%;\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n.subContent .container {\n   width: 100%;\n   height: calc(100% - 50px);\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog\n    class=\"mdDialogContainer\"\n    :md-active.sync=\"visible\"\n  >\n    <md-dialog-title class=\"dialogTitle\"\n      >Link to {{ this.entityType }}</md-dialog-title\n    >\n    <md-dialog-content class=\"content\">\n      <div class=\"section\">\n        <link-template\n          :title=\"'Buildings'\"\n          :data=\"data\"\n          :itemSelected=\"buildingSelected\"\n          @select=\"selectBuilding\"\n        ></link-template>\n      </div>\n\n      <div class=\"section\" v-if=\"this.entityType != 'geographicBuilding'\">\n        <link-template\n          :title=\"'Floors'\"\n          :data=\"floors\"\n          :itemSelected=\"floorSelected\"\n          @select=\"selectFloor\"\n          :disableBtn=\"!buildingSelected\"\n        ></link-template>\n      </div>\n\n      <div class=\"section\" v-if=\"this.entityType == 'geographicRoom'\">\n        <link-template\n          :title=\"'Rooms'\"\n          :data=\"rooms\"\n          :itemSelected=\"roomSelected\"\n          @select=\"selectRoom\"\n          :disableBtn=\"!floorSelected\"\n        ></link-template>\n      </div>\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n      <md-button\n        class=\"md-primary\"\n        :disabled=\"!buildingSelected\"\n        @click=\"closeDialog(true)\"\n        >Save</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport attributeService from '../../../services/index';\n\nimport { spinalPanelManagerService } from 'spinal-env-viewer-panel-manager-service';\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\n\nimport linkToGroupTemplate from './linkerTemplate.vue';\n\nexport default {\n  name: 'spatialSelectComponent',\n  components: {\n    'link-template': linkToGroupTemplate,\n  },\n  props: ['visible', 'entityType'],\n  data() {\n    return {\n      showDialog: true,\n      data: [],\n      rooms: [],\n      floors: [],\n      buildingSelected: undefined,\n      floorSelected: undefined,\n      roomSelected: undefined,\n\n      items: [],\n      spatialContextId: undefined,\n    };\n  },\n\n  mounted() {\n    this.getAllData();\n    this.spatialContextId =\n      SpinalGraphService.getContext('spatial').info.id.get();\n  },\n\n  methods: {\n\n    closeDialog(closeResult) {\n      if (!closeResult) {\n        this.$emit('closeSelection', undefined);\n      } else {\n          if(this.roomSelected){\n            this.$emit('closeSelection', this.roomSelected); \n            return;   \n          }\n          if(this.floorSelected){\n            this.$emit('closeSelection', this.floorSelected);\n            return;\n          }\n          if(this.buildingSelected){\n            this.$emit('closeSelection', this.buildingSelected);\n            return;\n          }\n            \n        \n      }\n    },\n\n    getAllData() {\n      attributeService.getAllSpatialBuildings().then((res) => {\n        this.data = res;\n        //this.updateCategory();\n        //this.updateGroups();\n      });\n    },\n\n    updateCategory() {\n      // this.floorSelected = undefined;\n      this.floors = [];\n      if (this.buildingSelected) {\n        SpinalGraphService.findInContextByType(\n          this.buildingSelected,\n          this.spatialContextId,\n          'geographicFloor'\n        ).then((res) => {\n          this.floors = res;\n        });\n      }\n    },\n\n    updateGroups() {\n      // this.roomSelected = undefined;\n      this.rooms = [];\n      if (this.floorSelected) {\n        SpinalGraphService.findInContextByType(\n          this.floorSelected,\n          this.spatialContextId,\n          'geographicRoom'\n        ).then((res) => {\n          this.rooms = res;\n        });\n      }\n    },\n\n    selectBuilding(id) {\n      console.log('select building ', id);\n      this.buildingSelected = id;\n      this.floorSelected = undefined;\n      this.roomSelected = undefined;\n    },\n\n    selectFloor(id) {\n      console.log('select floor ', id);\n      this.floorSelected = id;\n      this.roomSelected = undefined;\n    },\n\n    selectRoom(id) {\n      console.log('select room ', id);\n      this.roomSelected = id;\n    },\n  },\n  watch: {\n    buildingSelected() {\n      this.floorSelected = undefined;\n      this.roomSelected = undefined;\n\n      this.updateCategory();\n      this.updateGroups();\n    },\n\n    floorSelected() {\n      this.roomSelected = undefined;\n\n      this.updateGroups();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  transform: translate(-50%, -50%) scale(1) !important;\n  z-index: 1000 !important;\n  width: 100%;\n  height: 600px;\n}\n\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .content {\n  display: flex;\n  justify-content: flex-start;\n  align-items: stretch;\n}\n\n.mdDialogContainer .content .section {\n  flex: 1;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n  max-width: 100%;\n  max-height: 100%;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\" :md-active.sync=\"visible\">\n    <md-dialog-title class=\"dialogTitle\">Link to context</md-dialog-title>\n    <md-dialog-content class=\"content\">\n      <div class=\"section\">\n        <link-template\n          :title=\"'Contexts'\"\n          :data=\"data\"\n          :itemSelected=\"contextSelected\"\n          @select=\"selectContext\"\n        ></link-template>\n      </div>\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n      <md-button\n        class=\"md-primary\"\n        :disabled=\"!contextSelected\"\n        @click=\"closeDialog(true)\"\n        >Save</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport attributeService from '../../../services/index';\n\nimport linkToGroupTemplate from './linkerTemplate.vue';\n\nexport default {\n  name: 'spatialSelectComponent',\n  components: {\n    'link-template': linkToGroupTemplate,\n  },\n  props: ['visible', 'entityType'],\n  data() {\n    return {\n      showDialog: true,\n      data: [],\n      contextSelected: undefined,\n      items: [],\n    };\n  },\n\n  mounted() {\n    this.getAllData();\n  },\n\n  methods: {\n    closeDialog(closeResult) {\n      if (!closeResult) {\n        this.$emit('closeSelection', undefined);\n      } else {\n        this.$emit('closeSelection', this.contextSelected);\n      }\n    },\n\n    getAllData() {\n      attributeService.getAllContexts().then((res) => {\n        this.data = res;\n      });\n    },\n\n    //////////////////////////////////////////////////////////////////\n    // Modify\n    //////////////////////////////////////////////////////////////////\n\n    selectContext(id) {\n      console.log('select context ', id);\n      this.contextSelected = id;\n    },\n  },\n  watch: {\n    // buildingSelected() {\n    //   this.floorSelected = undefined;\n    //   this.roomSelected = undefined;\n    //   this.updateCategory();\n    //   this.updateGroups();\n    // },\n    // floorSelected() {\n    //   this.roomSelected = undefined;\n    //   this.updateGroups();\n    // },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  transform: translate(-50%, -50%) scale(1) !important;\n  z-index: 1000 !important;\n  width: 100%;\n  height: 600px;\n}\n\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .content {\n  display: flex;\n  justify-content: flex-start;\n  align-items: stretch;\n}\n\n.mdDialogContainer .content .section {\n  flex: 1;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n  max-width: 100%;\n  max-height: 100%;\n}\n</style>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.inputConfiguration\"\n    md-label=\"Inputs\"\n    :md-done.sync=\"stepper.third\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <p>Each tracking method is an input for an algorithm</p>\n      <p>\n        The <b>search depth</b> is how deep the program should search for the tracked item. If 0, only the infered followed entities of\n        the anchor will be considered.\n      </p>\n      <p>\n        If the <b>strict depth</b> is true, the program will only consider the items found at exactly the given depth.\n      </p>\n      <p>\n        The <b>search relations</b> are the relations that the program is allowed to use to find the tracked item.\n      </p>\n      <p>\n        Timeseries interval time is how far in the past should the analytic gather data. Must be positive or null. If\n        null (equal 0), only the currentValue will be picked, otherwise, the\n        data will be picked from the current time at which the analytic will be\n        run to (currentTime - intervalTime). Beware, if the interval time > 0,\n        make sure the control-endpoint/ endpoint has timeseries.\n      </p>\n      <div v-for=\"([inputName, value]) in Object.entries(localInputs)\" :key=\"inputName\" class=\"trackingMethodBlock\">\n\n        <b>Input {{inputName}}</b>\n        <md-field class=\"fixed-size-field\">\n          <label>Tracking Method</label>\n          <md-select v-model=\"value.trackingMethod\">\n            <md-option\n              v-for=\"data of TRACK_METHOD\"\n              :key=\"data\"\n              :value=\"data\"\n            >{{ data }}</md-option\n            >\n          </md-select>\n        </md-field>\n        <md-field class=\"fixed-size-field\"  v-if=\"value.trackingMethod != ''\">\n          <label> Search Depth </label>\n          <md-input type=\"number\" min=\"0\" v-model=\"value.searchDepth\"></md-input>\n        </md-field>\n        <md-button\n          class=\"md-primary\"\n          :disabled=\"isShowAvailableDataDisabled(value)\"\n          @click=\"scanRelations(value)\"\n        >\n          Scan relations\n        </md-button>\n  \n        <md-button\n          class=\"md-primary\"\n          :disabled=\"isShowAvailableDataDisabled(value)\"\n          @click=\"getPreviewAvailableData(value)\"\n        >\n          Show available data\n        </md-button>\n\n        <md-field class=\"fixed-size-field\"  v-if=\"value.trackingMethod != '' && value.searchDepth>0\" >\n          <label> \n            Search Relations separated by comma (example: hasBimObject,relation2,... )\n          </label>\n          <md-input v-model=\"value.searchRelations\"></md-input>\n        </md-field>\n        \n\n        <md-field class=\"fixed-size-field\"  v-if=\"value.trackingMethod != ''\">\n          <label> Filter Value ( Case sensitive )</label>\n          <md-input v-model=\"value.filterValue\"></md-input>\n        </md-field>\n\n        <md-switch v-if=\"value.trackingMethod != '' && value.searchDepth >0\"\n          v-model=\"value.strictDepth\"\n        >Data must be found at exactly depth {{value.searchDepth}} : <b> {{value.strictDepth ? 'Yes' : 'No'}} </b> \n        </md-switch>\n\n        \n\n        <md-field class=\"fixed-size-field\"  v-if=\"showTimeSeriesField(value)\">\n          <label> Timeseries interval time ( 0 to only take current value )</label>\n          <md-input type=\"number\" min=\"0\" v-model=\"value.timeseriesIntervalTime\"></md-input>\n        </md-field>\n        \n        <md-button\n          class=\"md-primary\"\n          :disabled=\"isPreviewDisabled(value)\"\n          @click=\"getPreviewData(value)\"\n        >\n          Preview input\n        </md-button>\n        <md-button\n          class=\"md-accent\"\n          @click=\"removeInput(inputName)\">\n          Remove\n        </md-button>\n        \n      </div>\n\n      <md-button\n        class=\"md-primary\"\n        @click=\"addInput\"\n      >\n        Add Input\n      </md-button>\n\n      <!--     \n      <md-button\n        class=\"md-primary\"\n        :disabled=\"isGlobalPreviewDisabled\"\n        @click=\"getGlobalPreviewData()\"\n      >\n      Preview All inputs\n      </md-button> -->\n    </md-content>\n    <preview-dialog\n      :visible=\"showPreviewDialog\"\n      :data=\"prettyData\"\n      @closeDialog=\"closePreviewDialog\"\n    >\n    </preview-dialog>\n  </md-step>\n</template>\n\n<script>\nimport { TRACK_METHOD, spinalAnalyticService, ATTRIBUTE_VALUE_SEPARATOR,\n getChoiceRelationsWithDepth, getAvailableData } from 'spinal-model-analysis';\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nimport previewDialogVue from '../previewDialog.vue';\n\nexport default {\n  props: ['STEPPERS_DATA', 'stepper','entityType','followedEntity'\n  ,'inputs' ],\n  components: {\n    'preview-dialog': previewDialogVue,\n  },\n  data() {\n    return {\n        localInputs : this.inputs,\n        showPreviewDialog:false,\n        previewData: '',\n        scannedRelations:'',\n      \n    };\n  },\n  created() {\n    this.TRACK_METHOD = TRACK_METHOD;\n  },\n  methods: {\n    \n    addInput() {\n      console.log('clicked on button add input');\n      this.$emit('addInput');\n    },\n    removeInput(index){\n      this.$emit('removeInput',index);\n    },\n\n    async getCapturedInputs(tracking,entity){\n      console.log('Calling getCapturedInputs tracking:' ,tracking)\n      const capturedInput =\n          await spinalAnalyticService.applyTrackingMethodWithParams(\n            entity,\n            tracking.trackingMethod,\n            tracking.filterValue,\n            tracking.searchDepth,\n            tracking.strictDepth,\n            tracking.searchRelations.split(ATTRIBUTE_VALUE_SEPARATOR)\n          );\n        if (!capturedInput) return \"!! Not found !!\";\n        console.log('capturedInput :', capturedInput);\n        if(tracking.trackingMethod === this.TRACK_METHOD.ATTRIBUTE_NAME_FILTER){\n          if (Array.isArray(capturedInput)) return capturedInput;\n          return capturedInput.label.get();\n        }\n        if(Array.isArray(capturedInput)) return capturedInput.map(el => el.name.get());\n        return capturedInput.name.get();\n    },\n\n    async scanRelations(tracking){\n      this.showPreviewDialog = true;\n      this.previewData = '';\n      console.log('Calling scanRelations');\n      \n      const followedEntityInfo = SpinalGraphService.getInfo(\n        this.followedEntity\n      );\n      const previewData = {};\n      const entities  = await spinalAnalyticService.getWorkingFollowedEntitiesWithParam(followedEntityInfo,this.entityType);\n      for (const subEntity of entities) {\n        let subEntityName = subEntity.name.get();\n        subEntityName = subEntityName.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        const relations = await getChoiceRelationsWithDepth(subEntity.id.get(),tracking.searchDepth);\n        previewData[subEntityName] = relations;\n      }\n      this.previewData = previewData;\n\n    },\n\n    async getPreviewAvailableData(tracking){\n      this.showPreviewDialog = true;\n      this.previewData = '';\n      console.log('Calling getPreviewAvailableData');\n      const followedEntityInfo = SpinalGraphService.getInfo(\n        this.followedEntity\n      );\n      const entities  = await spinalAnalyticService.getWorkingFollowedEntitiesWithParam(followedEntityInfo,this.entityType);\n      const previewData = {};\n      for (const subEntity of entities) {\n        let subEntityName = subEntity.name.get();\n        subEntityName = subEntityName.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        const availableData = await getAvailableData(\n          tracking.trackingMethod,\n          subEntity.id.get(),\n          tracking.filterValue,\n          tracking.searchDepth,\n          tracking.strictDepth,\n          tracking.searchRelations.split(ATTRIBUTE_VALUE_SEPARATOR));\n        previewData[subEntityName] = availableData;\n      }\n      this.previewData = previewData;\n    },\n\n    async getPreviewData(tracking){\n      this.showPreviewDialog = true;\n      this.previewData = '';\n      console.log('Calling getPreviewData');\n      const followedEntityInfo = SpinalGraphService.getInfo(\n        this.followedEntity\n      );\n      const entities  = await spinalAnalyticService.getWorkingFollowedEntitiesWithParam(followedEntityInfo,this.entityType);\n      const previewData = {};\n      for (const subEntity of entities) {\n        let subEntityName = subEntity.name.get();\n        subEntityName = subEntityName.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        const capturedInputs = await this.getCapturedInputs(tracking,subEntity);\n        previewData[subEntityName] = capturedInputs;\n      }\n      \n      //this.previewData = JSON.stringify(previewData, null, 2);\n      this.previewData = previewData;\n\n    },\n    \n    /*async getPreviewData2(tracking) {\n      this.showPreviewDialog = true;\n      this.previewData = '';\n      console.log('Calling getPreviewData');\n\n      const followedEntityInfo = SpinalGraphService.getInfo(\n        this.followedEntity\n      );\n\n      let followedEntityName = followedEntityInfo.name.get();\n      followedEntityName = followedEntityName.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n\n      const previewData = { [followedEntityName]: {} };\n\n      if (this.entityType === followedEntityInfo.type.get()) {\n        const capturedInputs = await this.getCapturedInputs(tracking,followedEntityInfo);\n        previewData[followedEntityName] = capturedInputs;\n      } else {\n        const isGroup = followedEntityInfo.type.get().includes('Group');\n        let subEntities;\n        if (isGroup) {\n          const relationNameToSubEntities = 'groupHas' + this.entityType;\n          subEntities = await SpinalGraphService.getChildren(\n            followedEntityInfo.id.get(),\n            [relationNameToSubEntities]\n          );\n        } else {\n          console.log('Getting sub entities through spatial context');\n          const spatialContextId = SpinalGraphService.getContext('spatial').info.id.get();\n          subEntities = await SpinalGraphService.findInContextByType(\n          this.followedEntity,\n          spatialContextId,\n          this.entityType\n          );\n        }\n\n        await this.updatePreviewData(tracking,subEntities, followedEntityName, previewData);\n      }\n\n      console.log('previewData :', previewData);\n      //this.previewData = JSON.stringify(previewData, null, 2);\n      this.previewData = previewData;\n    },*/\n\n\n    closePreviewDialog(){\n      this.showPreviewDialog = false;\n    },\n\n    isPreviewDisabled(tracking) {\n      return (\n        !this.followedEntity ||\n        tracking.trackingMethod === ''\n        || tracking.filterValue === ''\n      );\n    },\n    isShowAvailableDataDisabled(tracking) {\n      return (\n        !this.followedEntity ||\n        tracking.trackingMethod === ''\n      );\n    },\n    showTimeSeriesField(tracking) {\n      return  (tracking.trackingMethod === this.TRACK_METHOD.ENDPOINT_NAME_FILTER ||\n       tracking.trackingMethod === this.TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER);\n    },\n\n  },\n  computed: {\n    isGlobalPreviewDisabled() {\n      return (\n        true);\n    },\n    \n\n    followedEntityName() {\n      if (!this.followedEntity) return '';\n      const info = SpinalGraphService.getInfo(this.followedEntity);\n      console.log(info);\n      return `${info.name.get()} | Type : ${info.type.get()} | Node id : ${info.id.get()}`;\n    },\n    prettyData() {\n      return JSON.stringify(this.previewData, null, 2);\n    },\n  },\n\n  watch:{\n    inputs(){\n      console.log('parent inputs changed')\n      this.localInputs = this.inputs;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.trackingMethodBlock {\n  border: 2px dashed #ffffff;\n  padding: 10px;\n  margin-bottom: 10px;\n  width: 90%;\n}\n\n\n</style>\n\n","<template>\n  <div>\n    <md-dialog\n      :md-click-outside-to-close=\"false\"\n      :md-close-on-esc=\"false\"\n      class=\"mdDialog\"\n      :md-active.sync=\"visible\"\n    >\n      <md-dialog-title>Preview captured data</md-dialog-title>\n      \n      <md-content class=\"content md-scrollbar\">\n        <div class=\"json-preview\">\n          <pre>{{ data }}</pre>\n        </div>\n      </md-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\" @click=\"close\">Close</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'previewDialog',\n  props: {\n    visible: {\n      type: Boolean,\n      required: true,\n    },\n    data: {\n      type: String,\n      required: true,\n    },\n  },\n  data: () => ({}),\n  methods: {\n    close() {\n      this.$emit('closeDialog');\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialog {\n  transform: translate(-50%, -50%) scale(1) !important;\n  z-index: 1000 !important;\n}\n.content {\n  max-height: 400px;\n  width: 700px;\n  overflow-y: auto;\n}\n.json-preview {\n  margin: 20px;\n  background-color: #1e1e1e;\n  border: 2px solid #3a3a3a;\n  border-radius: 8px;\n  padding: 20px;\n  color: #ffffff;\n  font-family: monospace;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.json-preview pre {\n  margin: 10px;\n}\n</style>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.triggerConfiguration\"\n    md-label=\"Triggers\"\n    :md-done.sync=\"stepper.fourth\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <p>\n        A trigger is a condition that must be met for the analytic to be\n        executed. For exemple you can bind on one of the inputs to execute the\n        analytic when the value of the input is changed. Or you can add a time\n        based trigger that will make the analytic execute every 20000 ms ( 20s\n        ).\n      </p>\n\n      <div\n        v-for=\"[triggerName, value] in Object.entries(localTriggers)\"\n        :key=\"triggerName\"\n        class=\"block\"\n      >\n        <b>Trigger {{ triggerName }}</b>\n        <md-field class=\"fixed-size-field\">\n          <label>Trigger type</label>\n          <md-select\n            v-model=\"value.triggerType\"\n            @md-selected=\"resetInfo(value)\"\n          >\n            <md-option v-for=\"data of TRIGGER_TYPE\" :key=\"data\" :value=\"data\">{{\n              data\n            }}</md-option>\n          </md-select>\n        </md-field>\n\n        <md-field\n          class=\"fixed-size-field\"\n          v-if=\"value.triggerType == TRIGGER_TYPE.INTERVAL_TIME\"\n        >\n          <label> Interval time value (ms) </label>\n          <md-input\n            type=\"number\"\n            min=\"0\"\n            v-model=\"value.triggerValue\"\n          ></md-input>\n        </md-field>\n        <md-field\n          class=\"fixed-size-field\"\n          v-if=\"showInputSelection(value.triggerType)\"\n        >\n          <label\n            >Input selection (which input do you want to use for change of value\n            tracking)</label\n          >\n          <md-select v-model=\"value.triggerValue\">\n            <md-option\n              v-for=\"data of Object.keys(inputs)\"\n              :key=\"data\"\n              :value=\"data\"\n              >{{ data }}</md-option\n            >\n          </md-select>\n        </md-field>\n        <md-field\n          class=\"fixed-size-field\"\n          v-if=\"\n            value.triggerType == TRIGGER_TYPE.CHANGE_OF_VALUE_WITH_THRESHOLD\n          \"\n        >\n          <label>\n            Threshold value (any change greater than treshold value will trigger\n            analytic)\n          </label>\n          <md-input\n            type=\"number\"\n            min=\"0\"\n            v-model=\"value.changeOfValueThreshold\"\n          ></md-input>\n        </md-field>\n\n        <div v-if=\"value.triggerType == TRIGGER_TYPE.CRON\" >\n          \n          <md-button class=\"md-primary\" @click=\"showCronHelper\"> Need help ?\n            <md-icon class=\"help-icon\" @click=\"showCronHelper\"\n              >help</md-icon\n            >\n          </md-button>\n          <md-field\n            class=\"fixed-size-field\"\n            \n          >\n            <label> Cron pattern </label>\n            <md-input\n              v-model=\"value.triggerValue\"\n              placeholder=\"* * * * *\"\n            ></md-input>\n            \n          </md-field>\n        </div>\n        \n\n        <md-button class=\"md-accent\" @click=\"removeTrigger(triggerName)\">\n          Remove\n        </md-button>\n      </div>\n\n      <md-button class=\"md-primary\" @click=\"addTrigger\">\n        Add Trigger\n      </md-button>\n      <cron-help-dialog\n          :showCronHelpModal=\"showCronHelpModal\"\n          @closeCronHelpDialog=\"showCronHelpModal = false\"\n        ></cron-help-dialog>\n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport { TRIGGER_TYPE } from 'spinal-model-analysis';\nimport cronHelpDialog from '../cronHelpDialog.vue';\n\nexport default {\n  props: ['STEPPERS_DATA', 'stepper', 'inputs', 'triggers'],\n  components: {\n    'cron-help-dialog':cronHelpDialog,\n  },\n  data() {\n    return {\n      localTriggers: this.triggers,\n      showPreviewDialog: false,\n      showCronHelpModal: false,\n      previewData: '',\n    };\n  },\n  created() {\n    this.TRIGGER_TYPE = TRIGGER_TYPE;\n  },\n  methods: {\n    addTrigger() {\n      console.log('clicked on button add Trigger');\n      this.$emit('addTrigger');\n    },\n    removeTrigger(triggerName) {\n      this.$emit('removeTrigger', triggerName);\n    },\n    showInputSelection(triggerType) {\n      return [\n        TRIGGER_TYPE.CHANGE_OF_VALUE_WITH_THRESHOLD,\n        TRIGGER_TYPE.CHANGE_OF_VALUE,\n      ].includes(triggerType);\n    },\n\n    showCronHelper() {\n      this.showCronHelpModal = true;\n      console.log('showCronHelper : ', this.showCronHelpModal);\n    },\n\n    resetInfo(triggerInfo) {\n      console.log('reset info');\n      triggerInfo.changeOfValueThreshold = null;\n      triggerInfo.triggerValue = '';\n    },\n  },\n  computed: {},\n\n  watch: {\n    triggers() {\n      console.log('parent triggers changed');\n      this.localTriggers = this.triggers;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.block {\n  border: 2px dashed #ffffff;\n  padding: 10px;\n  margin-bottom: 10px;\n  width: 90%;\n}\n.help-icon {\n  cursor: pointer;\n  margin-left: 10px;\n}\n</style>\n","<template>\n  <md-dialog\n    :md-click-outside-to-close=\"false\"\n    :md-close-on-esc=\"false\"\n    class=\"mdDialog\"\n    :md-active.sync=\"showCronHelpModal\"\n  >\n    <md-dialog-title>Cron Pattern Guide</md-dialog-title>\n    <md-dialog-content>\n      <p\n        >This guide will help you understand how to create cron patterns for\n        scheduling tasks. A cron pattern is composed of five fields separated by a blank space: (minute) (hour) (day of the month) (month) (day of the week)</p\n      >\n      <ul>\n        <li><strong>Minute</strong> (0 - 59)</li>\n        <li><strong>Hour</strong> (0 - 23)</li>\n        <li><strong>Day of the Month</strong> (1 - 31)</li>\n        <li><strong>Month</strong> (1 - 12 or JAN - DEC)</li>\n        <li\n          ><strong>Day of the Week</strong> (0 - 7, where 0 or 7 is Sunday, or\n          SUN - SAT)</li\n        >\n      </ul>\n      <p>A field may be an asterisk (*), which always stands for first-last</p>\n\n      <p\n        >Ranges of numbers are allowed. Ranges are two numbers separated with a\n        hyphen. The specified range is inclusive. For example, 8-11 for an\n        ''hour'' entry specifies execution at hours 8, 9, 10 and 11.</p\n      >\n\n      <p\n        >Lists are allowed.  A list is a set of numbers (or ranges)\n             separated by commas.  Examples: ``1,2,5,9'', ``0-4,8-12''.</p\n      >\n\n      <p>Here are some common examples:</p>\n      <ul>\n        <li><code>0 * * * *</code> - Every hour at the start of the hour.</li>\n        <li><code>30 9 * * 1</code> - Every Monday at 9:30 AM.</li>\n        <li\n          ><code>0 0 1 * *</code> - The first day of every month at\n          midnight.</li\n        >\n      </ul>\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog()\">Close</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nexport default {\n  props: ['showCronHelpModal'],\n  data() {\n    return {};\n  },\n  methods: {\n    closeDialog() {\n      this.$emit('closeCronHelpDialog');\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialog {\n  z-index: 1000 !important;\n  width: 100%;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n.md-dialog-content ul {\n  padding-left: 20px;\n  list-style-type: disc;\n}\n.md-dialog-content code {\n  background-color: #e5e5e5;\n  margin-bottom: 5px;\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-family: monospace;\n}\n</style>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.algorithmConfiguration\"\n    md-label=\"Algorithms\"\n    :md-done.sync=\"stepper.fifth\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n        <p>\n        An algorithm is a function that the analytic uses to get the work done.\n        </p>\n\n      <div v-for=\"(algorithmIndexName, index) of Object.keys(localAlgorithms)\" :key=\"index\" class=\"block\">\n        <b>Algorithm {{algorithmIndexName}}</b>\n        <md-field class=\"fixed-size-field\">\n          <label>Algorithm</label>\n          <md-select @md-selected=\"resetParams(algorithmIndexName)\" v-model=\"algorithms[algorithmIndexName].name\">\n            <md-option\n              v-for=\"data of algo_names\"\n              :key=\"data.name\"\n              :value=\"data.name\"\n            >{{ data.name }}</md-option\n            >\n          </md-select>\n        </md-field>\n\n        <div v-if=\"algorithms[algorithmIndexName].name != ''\">\n        <p>\n          <strong> Description : </strong>\n          {{ algos[algorithms[algorithmIndexName].name].description }}</p\n        >\n        </div>\n\n      <!-- \n      <div v-if=\"algorithm != ''\">\n        <div v-if=\"algos[algorithm].requiredParams == 'boolean'\">\n          <div\n          class=\"fixed-size-field\"\n          v-for=\"(item, index) of inputs\"\n          :key=\"index\"\n        >\n          <label> {{ index }} </label>\n          <md-radio value=\"false\">\n            False\n          </md-radio>\n          <md-radio value=\"true\">\n            True\n          </md-radio>\n        </div>\n        </div>\n        <div v-else-if=\"algos[algorithm].requiredParams == 'number'\">\n          <md-field\n            class=\"fixed-size-field\"\n            v-for=\"(item, index) of inputs\"\n            :key=\"index\"\n          >\n            <label> {{ index }} </label>\n            <md-input\n              @change=\"update('algorithmParameters',localAlgorithmParameters)\"\n              type=\"number\"\n              v-model=\"localAlgorithmParameters[index]\"\n            ></md-input>\n          </md-field>\n        </div>\n        <div v-else-if=\"algos[algorithm].requiredParams == 'string'\">\n          <md-field\n            class=\"fixed-size-field\"\n            v-for=\"(item, index) of inputs\"\n            :key=\"index\"\n          >\n            <label> {{ index }} </label>\n            <md-input\n              @change=\"update('algorithmParameters',localAlgorithmParameters)\"\n              v-model=\"localAlgorithmParameters[index]\"\n            ></md-input>\n          </md-field>\n        </div>\n        -->\n\n        <div v-if=\"algorithms[algorithmIndexName].name != ''\">\n          <md-field\n            class=\"fixed-size-field\"\n            v-for=\"(item, index) in algos[algorithms[algorithmIndexName].name].requiredParams\"\n            :key=\"index\"\n          >\n            <label>{{ item.name }}, {{ item.description }}</label>\n            <md-input\n              :type=\"item.type\"\n              v-model=\"algorithms[algorithmIndexName].params[index]\"\n            ></md-input>\n          </md-field>\n        </div>\n\n        <md-button\n          class=\"md-accent\"\n          @click=\"removeAlgorithm(algorithmIndexName)\">\n          Remove\n        </md-button>\n        \n      </div>\n\n      <md-button\n        class=\"md-primary\"\n        @click=\"addAlgorithm\"\n      >\n        Add Algorithm\n      </md-button> \n\n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport { algos} from 'spinal-model-analysis';\n\nexport default {\n  props: ['STEPPERS_DATA', 'stepper','entityType','followedEntity'\n  ,'inputs', 'algorithms','algorithms_parameters' ],\n  components: {\n  },\n  data() {\n    return {\n        localAlgorithms: this.algorithms,      \n    };\n  },\n  created() {\n    this.algos = algos;\n  },\n  methods: {\n    addAlgorithm() {\n      console.log('clicked on button add Algorithm');\n      this.$emit('addAlgorithm');\n    },\n    removeAlgorithm(algoIndexName){\n      this.$emit('removeAlgorithm',algoIndexName);\n    },\n    resetParams(algoIndexName){\n      this.algorithms[algoIndexName].params = [];\n    }\n    \n  },\n  computed: {\n    algo_names() {\n      return Object.values(algos);\n    },\n  },\n\n  watch:{\n    algorithms(){\n      console.log('parent algorithms changed')\n      this.localAlgorithms = this.algorithms;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.block {\n  border: 2px dashed #ffffff;\n  padding: 10px;\n  margin-bottom: 10px;\n  width: 90%;\n}\n\n\n</style>\n\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.resultConfiguration\"\n    md-label=\"Result\"\n    :md-done.sync=\"stepper.sixth\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <p>\n        The result is the output of the analytic. It can be something that will be  created,\n         like a ticket, an alarm, or something\n         that must be modified, like a control endpoint.\n      </p>\n      <md-field class=\"fixed-size-field\">\n        <label>Result name</label>\n        <md-input\n          @change=\"update('resultName',localResultName)\"\n          v-model=\"localResultName\"\n        ></md-input>\n      </md-field>\n\n      <md-field class=\"fixed-size-field\">\n        <label>Result type</label>\n        <md-select @md-selected=\"update('resultType',localResultType)\" v-model=\"localResultType\">\n          <md-option\n            v-for=\"data of CONST_ANALYTIC_RESULT_TYPE\"\n            :key=\"data\"\n            :value=\"data\"\n            >{{ data }}</md-option\n          >\n        </md-select>\n      </md-field>\n      <p>\n        For ticket/alarm, result name will be used as part of the ticket/alarm name.\n        For control endpoints, result name will be used to find the control endpoint to update.\n        In some cases result name is not used at all.\n      </p> \n\n      <div v-if=\"requireTicketLocalization\">\n      <md-field class=\"fixed-size-field\">\n        <label> Ticket/Alarm context </label>\n        <md-select @md-selected=\"update('ticketContextId',localTicketContextId)\" v-model=\"localTicketContextId\">\n          <md-option\n            v-for=\"data of alarmContexts\"\n            :key=\"data.id\"\n            :value=\"data.id\"\n            >{{ data.name }}</md-option\n          >\n        </md-select>\n      </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label>Ticket/Alarm process id </label>\n           <md-select @md-selected=\"update('ticketProcessId',localTicketProcessId)\" v-model=\"localTicketProcessId\">\n            <md-option\n              v-for=\"data of ticketProcesses\"\n              :key=\"data.id\"\n              :value=\"data.id\"\n              >{{ data.name }}</md-option\n            >\n        </md-select>\n        </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label> Alarm priority </label>\n          <md-input\n            type=\"number\"\n            @change=\"update('alarmPriority',localAlarmPriority)\"\n            v-model=\"localAlarmPriority\"\n          ></md-input>\n        </md-field>\n      </div>\n\n      <div v-if=\"requirePhoneInformation\">\n        <md-field class=\"fixed-size-field\">\n          <label>Phone number</label>\n          <md-input\n           @change=\"update('phoneNumber',localPhoneNumber)\"\n            v-model=\"localPhoneNumber\"\n          ></md-input>\n        </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label>Message</label>\n          <md-input\n           @change=\"update('phoneMessage',localPhoneMessage)\"\n           type=\"text\"\n            v-model=\"localPhoneMessage\"\n          ></md-input>\n        </md-field>\n      </div>\n\n      <div v-if=\"requireGChatInformation\">\n        <md-field class=\"fixed-size-field\">\n          <label>Google chat space name</label>\n          <md-input\n           @change=\"update('gChatSpaceName',localGChatSpaceName)\"\n            v-model=\"localGChatSpaceName\"\n          ></md-input>\n        </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label>Google chat message</label>\n          <md-input\n           @change=\"update('gChatMessage',localGChatMessage)\"\n           type=\"text\"\n            v-model=\"localGChatMessage\"\n          ></md-input>\n        </md-field>\n      </div>\n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport {\n  ANALYTIC_RESULT_TYPE\n} from 'spinal-model-analysis';\n\nimport{ spinalServiceTicket } from \"spinal-service-ticket\";\n\nexport default {\n  props: [\n    'STEPPERS_DATA',\n    'stepper',\n    'resultName',\n    'resultType',\n    'ticketContextId',\n    'ticketProcessId',\n    'alarmPriority',\n    'phoneNumber',\n    'phoneMessage',\n    'gChatMessage',\n    'gChatSpaceName'\n  ],\n  components: {},\n  data() {\n    return {\n      localResultName: this.resultName,\n      localResultType: this.resultType,\n      localIntervalTime: this.intervalTime,\n      localTicketContextId: this.ticketContextId,\n      localTicketProcessId: this.ticketProcessId,\n      localAlarmPriority: this.alarmPriority,\n      localPhoneNumber: this.phoneNumber,\n      localPhoneMessage: this.phoneMessage,\n      localGChatMessage: this.gChatMessage,\n      localGChatSpaceName: this.gChatSpaceName,\n      ticketProcesses: [],\n      \n    };\n  },\n  created(){\n    this.CONST_ANALYTIC_RESULT_TYPE = ANALYTIC_RESULT_TYPE;\n    this.alarmContexts = spinalServiceTicket.getContexts();\n\n\n  },\n  methods: {\n    update(key, value) {\n      console.log(\"update \", key, value)\n      this.$emit(`update:${key}`, value);\n    },\n\n    async refreshContextProcesses(){\n      const processes = await spinalServiceTicket.getAllProcess(this.localTicketContextId);\n      for(const process of processes){\n        this.ticketProcesses.push({name: process.name.get(), id: process.id.get()});\n      }\n    },\n    \n\n\n\n\n    \n  },\n  computed: {\n    requireTicketLocalization() {\n      return (\n        [this.CONST_ANALYTIC_RESULT_TYPE.TICKET, this.CONST_ANALYTIC_RESULT_TYPE.ALARM].includes(this.localResultType)\n      );\n    },\n\n    requireAlarmPriority(){\n      return this.localResultType == this.CONST_ANALYTIC_RESULT_TYPE.ALARM\n    },\n\n    requirePhoneInformation(){\n      return this.localResultType == this.CONST_ANALYTIC_RESULT_TYPE.SMS\n    },\n\n    requireGChatInformation(){\n      return [this.CONST_ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE, this.CONST_ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD].includes(this.localResultType)\n    }\n\n    \n  },\n\n  watch: {\n    resultName() {\n      this.localResultName = this.resultName;\n    },\n    resultType() {\n      this.localResultType = this.resultType;\n    },\n    ticketContextId() {\n      this.localTicketContextId = this.ticketContextId;\n      this.refreshContextProcesses();\n    },\n    ticketProcessId() {\n      this.localTicketProcessId = this.ticketProcessId;\n    },\n    gChatMessage(){\n      this.localGChatMessage = this.gChatMessage;\n    },\n    gChatSpaceName(){\n      this.localGChatSpaceName = this.gChatSpaceName;\n    },\n    phoneNumber(){\n      this.localPhoneNumber = this.phoneNumber;\n    },\n    phoneMessage(){\n      this.localPhoneMessage = this.phoneMessage;\n    },\n    alarmPriority() {\n      this.localAlarmPriority = this.alarmPriority;\n    },\n\n  },\n};\n</script>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.IODependencies\"\n    md-label=\"IO\"\n    :md-done.sync=\"stepper.seventh\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <div v-if=\"Object.keys(algorithms).length==0\">\n        <p>\n          <b>Warning</b>\n          An analytic must have a minimum of 1 algorithm. Please add an\n          algorithm first\n        </p>\n      </div>\n      <div v-else>\n        <p>\n          Dependencies :\n        </p>\n\n        <md-list>\n          <md-list-item class=\"pretty-list-item\">\n            R (Result) : \n              <div class=\"draggable-item\">\n                Final Result : {{ ioDependencies['R'][0] }}\n              </div>\n          \n            <md-button @click=\"showSelection('R')\">Select dependencies</md-button>\n\n          </md-list-item>\n          <md-list-item\n            v-for=\"(algorithmIndexName, index) of Object.keys(algorithms)\"\n            :key=\"index\" class=\"pretty-list-item\">\n            {{algorithmIndexName}} : \n          \n        <draggable v-model=\"ioDependencies[algorithmIndexName]\" @end=\"updateDependenciesOrder(algorithmIndexName)\">\n          <div v-for=\"(dep,indexDep) in ioDependencies[algorithmIndexName]\" :key=\"dep\" class=\"draggable-item\">\n            Input {{ indexDep+1 }} : {{ dep }}\n          </div>\n        </draggable>\n            <md-button @click=\"showSelection(algorithmIndexName)\">Select dependencies</md-button>\n\n          </md-list-item>\n        </md-list>\n      </div>\n      <input-selection-table\n        :algorithms=\"algorithms\"\n        :inputs=\"inputs\"\n        :ioDependencies=\"ioDependencies\"\n        :showSelectionDialog=\"showSelectionDialog\"\n        :selectedAlgorithm=\"selectedAlgorithm\"\n        @closeSelectionDialog=\"closeSelectionDialog\"\n        @sendSelectedInputs=\"saveSelectedDependencies\"\n        >\n      </input-selection-table>\n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport inputSelectionTableVue from './inputSelectionTable.vue';\nimport draggable from \"vuedraggable\";\nimport { spinalAnalyticService } from 'spinal-model-analysis'\n\n\n\nexport default {\n  props: ['STEPPERS_DATA', 'stepper', 'algorithms', 'inputs','ioDependencies'],\n  components: {\n    draggable,\n    'input-selection-table': inputSelectionTableVue,\n  },\n  data() {\n    return {\n      showSelectionDialog: false,\n      selectedAlgorithm : '',\n    };\n  },\n  created() {},\n  methods: {\n    updateDependenciesOrder(algorithmIndexName) {\n      console.log(\"Updated order for:\", algorithmIndexName);\n      console.log(this.ioDependencies[algorithmIndexName]);\n    },\n\n    showSelection(indexName) {\n      this.selectedAlgorithm = indexName;\n      this.showSelectionDialog = true;\n      \n    },\n    closeSelectionDialog(){\n        this.showSelectionDialog = false;\n    },\n\n\n    findExecutionOrder(dependencies ) {\n    const graph = {};\n    const visited = {};\n    const stack = [];\n    const tempStack = []; // for cycle detection\n\n    // Create graph from dependency map\n    for (let algo of Object.keys(dependencies)) {\n        graph[algo] = graph[algo] || [];\n        for (let dep of dependencies[algo]) {\n            graph[dep] = graph[dep] || [];\n            graph[dep].push(algo);\n        }\n    }\n\n    const visit = (node) => {\n        if (tempStack.includes(node)) {\n            return false; // cycle detected\n        }\n        if (!visited[node]) {\n            visited[node] = true;\n            tempStack.push(node);\n            if (graph[node]) {\n                for (let neighbor of graph[node]) {\n                    if (!visit(neighbor)) return false; // propagate cycle detection\n                }\n            }\n            tempStack.pop();\n            stack.push(node);\n        }\n        return true;\n    };\n\n    for (let node of Object.keys(graph)) {\n        if (!visited[node]) {\n            if (!visit(node)) return null; // cycle detected\n        }\n    }\n\n    return stack.filter(x => x.startsWith('A'));\n    },\n\n\n    saveSelectedDependencies(selectedItems) {\n      console.log(\"saving selected dependencies : \", selectedItems)\n      console.log(\" to \", this.selectedAlgorithm)\n\n      let indexNames = selectedItems.map(item => item.indexName);\n      this.ioDependencies[this.selectedAlgorithm]=indexNames;\n\n      console.log(\"ioDependencies : \", this.ioDependencies)\n      const executionOrder = this.findExecutionOrder(this.ioDependencies)\n      console.log(\"executionOrder : \", executionOrder)\n    },\n\n    \n  },\n  computed: {},\n\n  watch: {},\n};\n</script>\n\n<style scoped>\n.draggable-item {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #484848;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.3s ease;\n}\n\n.draggable-item:hover {\n  background-color: #232323;\n  cursor: grab;\n}\n\n.draggable-item:active {\n  background-color: #572727;\n  cursor: grabbing;\n}\n\n\n.pretty-list-item {\n    display: flex !important;\n    align-items: center !important;\n    justify-content: space-between !important;\n    border-bottom: 1px solid #ccc !important;\n    padding-bottom: 10px !important;\n    margin-bottom: 10px !important; \n}\n\nmd-button {\n  margin-left: 20px;\n}\n</style>\n","<template>\n    <md-dialog :md-click-outside-to-close=\"false\" :md-close-on-esc=\"false\" class=\"mdDialog\" :md-active.sync=\"showSelectionDialog\">\n      \n      <!-- Inputs Table -->\n      <md-table v-model=\"inputListComputed\" md-card @md-selected=\"onSelectInput\" :md-selected-value.sync=\"selectedInputs\" class=\"table\">\n        <md-table-toolbar>\n          <h1 class=\"md-title table-title\">Inputs</h1>\n        </md-table-toolbar>\n        <md-table-toolbar slot=\"md-table-alternate-header\" slot-scope=\"{ count }\">\n          <div class=\"md-toolbar-section-start\">{{ getAlternateLabel(count) }}</div>\n          <div class=\"md-toolbar-section-end\">\n            <md-button @click=\"deleteAllInputSelection\" class=\"md-icon-button delete-button\">\n              <md-icon >delete</md-icon>\n            </md-button>\n          </div>\n        </md-table-toolbar>\n      \n      \n      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"multiple\" md-auto-select\n      :md-disabled=\"isResultSelection\"\n      :class=\"{ 'disabled-row': isResultSelection}\"\n      >\n        <md-table-cell md-label=\"Index Name\"> {{item.indexName}} </md-table-cell>\n        <md-table-cell md-label=\"Tracking Method\"> {{item.trackingMethod}} </md-table-cell>\n        <md-table-cell md-label=\"Filter value\"> {{item.filterValue}} </md-table-cell>\n        <md-table-cell md-numeric md-label=\"Timeseries\"> {{item.timeseriesIntervalTime}} </md-table-cell>\n      </md-table-row>\n\n\n    </md-table>\n\n    \n    <md-table v-model=\"algorithmListComputed\" md-card @md-selected=\"onSelectAlgorithm\" class=\"table\"\n    :md-selected-value.sync=\"selectedAlgorithms\">\n        <md-table-toolbar>\n          <h1 class=\"md-title table-title\">Algorithms</h1>\n        </md-table-toolbar>\n      <md-table-toolbar slot=\"md-table-alternate-header\" slot-scope=\"{ count }\">\n        <div class=\"md-toolbar-section-start\">{{ getAlternateLabel(count) }}</div>\n\n        <div class=\"md-toolbar-section-end\">\n          <md-button @click=\"deleteAllAlgoSelection\" class=\"md-icon-button\">\n            <md-icon>delete</md-icon>\n          </md-button>\n        </div>\n      </md-table-toolbar>\n\n      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" :md-selectable=\"isResultSelection? 'single': 'multiple'\" md-auto-select \n      :md-disabled=\"disableSameAlgorithmSelection(item.indexName)\"\n      :class=\"{ 'disabled-row': disableSameAlgorithmSelection(item.indexName) }\">\n        <md-table-cell md-label=\"Index Name\"> {{item.indexName}} </md-table-cell>\n        <md-table-cell md-label=\"Algorithm name\"> {{item.name}} </md-table-cell>\n        <md-table-cell md-label=\"Parameters\"> {{item.params}} </md-table-cell>\n      </md-table-row>\n    </md-table>\n    <md-dialog-actions class=\"dialog-actions\">\n        <md-button class=\"md-accent action-button\" @click=\"closeDialog\">Close</md-button>\n        <md-button class=\"md-primary action-button\" @click=\"sendSelected\">Save</md-button>\n      </md-dialog-actions>\n\n\n  </md-dialog>\n</template>\n\n<script>\nexport default {\n  props: ['selectedAlgorithm','algorithms', 'inputs','showSelectionDialog'],\n  components: {},\n  data() {\n    return {\n      selectedInputs: [],\n      selectedAlgorithms : [],\n\n    };\n  },\n  created() {\n  \n  },\n  methods: {\n    deleteAllInputSelection(){\n        console.log(\"deleteAllInputSelection\")\n        this.selectedInputs = [];\n    },\n    deleteAllAlgoSelection(){\n        this.selectedAlgorithms = [];\n    },\n\n    closeDialog(){\n        this.selectedAlgorithms = [];\n        this.selectedInputs = [];\n        this.$emit(\"closeSelectionDialog\");\n    },\n    sendSelected() \n    {\n      this.$emit('sendSelectedInputs', this.selectedInputs.concat(this.selectedAlgorithms));\n      this.$emit(\"closeSelectionDialog\");\n      this.selectedAlgorithms = [];\n      this.selectedInputs = [];\n      console.log(\"sendSelectedEvent :\" , this.selectedAlgorithms)\n    },\n    onSelectInput (items) {\n        console.log(\"onSelectInputEvent :\" , items)\n        this.selectedInputs = items\n\n    },\n    onSelectAlgorithm ( items ) {\n        console.log(\"onSelectAlgorithmEvent :\" , items)\n        this.selectedAlgorithms = items\n    },\n    getAlternateLabel (count) {\n        let plural = ''\n\n        if (count > 1) {\n          plural = 's'\n        }\n        return `${count} Item${plural} selected`\n    },\n\n    flattenObject(obj) {\n    const flattened = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const flatItem = {\n                indexName: key,\n                ...obj[key]\n            };\n            flattened.push(flatItem);\n        }\n    }\n    return flattened;\n    },\n\n    disableSameAlgorithmSelection(indexName){\n        return indexName == this.selectedAlgorithm;\n    },\n\n    \n    \n  },\n  computed: {\n    inputListComputed: {\n        get() {\n            return this.flattenObject(this.inputs);\n        },\n        set(newValue) {\n            \n        }\n    },\n    algorithmListComputed: {\n        get() {\n            return this.flattenObject(this.algorithms);\n        },\n        set(newValue) {\n            \n        }\n    },\n\n    isResultSelection(){\n        return  this.selectedAlgorithm == 'R';\n    }\n\n  },\n\n  watch: {},\n};\n</script>\n\n<style  scoped>\n.mdDialog {\n    z-index: 1000 !important;\n    width: 100%;\n    height: 100%;\n    padding: 20px;\n}\n\n.table {\n    margin-bottom: 20px;\n    border: 1px dashed #ccc;\n}\n\n.table md-table-row {\n    border-bottom: 1px dashed #ccc;\n}\n\n.table-title {\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 10px;\n}\n\n.delete-button {\n    color: #f44336; /* Red color for delete */\n}\n\n.selected-label {\n    font-weight: 600;\n    margin-top: 10px;\n}\n\n.selected-content {\n    background-color: #f5f5f5;\n    padding: 10px;\n    border-radius: 5px;\n    margin-top: 5px;\n}\n\n.dialog-actions {\n    display: flex;\n    justify-content: right;\n    margin-top: 20px;\n}\n\n.action-button {\n    padding: 10px 20px;\n    border-radius: 5px;\n    transition: background-color 0.3s;\n}\n\n.action-button:hover {\n    background-color: #f5f5f5;\n}\n\n.disabled-row {\n    background-color: #f0f0f026; /* Light grey background */\n    color: #aaa; /* Grey text */\n    pointer-events: none; /* Makes the row non-interactive */\n}\n</style>","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.config\"\n    md-label=\"Configuration\"\n    :md-done.sync=\"stepper.fourth\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <md-field class=\"fixed-size-field\">\n        <label>Algorithm</label>\n        <md-select @md-selected=\"update('algorithm',localAlgorithm)\" v-model=\"localAlgorithm\">\n          <md-option\n            v-for=\"data of algo_names\"\n            :key=\"data.name\"\n            :value=\"data.name\"\n            >{{ data.name }}</md-option\n          >\n        </md-select>\n      </md-field>\n\n      <!-- Algorithm Description -->\n      <div v-if=\"algorithm != ''\">\n        <p>\n          <strong> Description : </strong>\n          {{ algos[algorithm].description }}</p\n        >\n      </div>\n\n      <!-- Algorithm Parameters -->\n      <div v-if=\"algorithm != ''\">\n        <div v-if=\"algos[algorithm].requiredParams == 'boolean'\">\n          <div\n          class=\"fixed-size-field\"\n          v-for=\"(item, index) of inputs\"\n          :key=\"index\"\n        >\n          <label> {{ index }} </label>\n          <md-radio value=\"false\">\n            False\n          </md-radio>\n          <md-radio value=\"true\">\n            True\n          </md-radio>\n        </div>\n        </div>\n        <div v-else-if=\"algos[algorithm].requiredParams == 'number'\">\n          <md-field\n            class=\"fixed-size-field\"\n            v-for=\"(item, index) of inputs\"\n            :key=\"index\"\n          >\n            <label> {{ index }} </label>\n            <md-input\n              @change=\"update('algorithmParameters',localAlgorithmParameters)\"\n              type=\"number\"\n              v-model=\"localAlgorithmParameters[index]\"\n            ></md-input>\n          </md-field>\n        </div>\n        <div v-else-if=\"algos[algorithm].requiredParams == 'string'\">\n          <md-field\n            class=\"fixed-size-field\"\n            v-for=\"(item, index) of inputs\"\n            :key=\"index\"\n          >\n            <label> {{ index }} </label>\n            <md-input\n              @change=\"update('algorithmParameters',localAlgorithmParameters)\"\n              v-model=\"localAlgorithmParameters[index]\"\n            ></md-input>\n          </md-field>\n        </div>\n\n        <div v-else>\n          <md-field\n            class=\"fixed-size-field\"\n            v-for=\"(item, index) in algos[algorithm].requiredParams\"\n            :key=\"index\"\n          >\n            <label>{{ item.name }}, {{ item.description }}</label>\n            <md-input\n              @change=\"update('algorithmParameters',localAlgorithmParameters)\"\n              :type=\"item.type\"\n              v-model=\"localAlgorithmParameters[index]\"\n            ></md-input>\n          </md-field>\n        </div>\n      </div>\n\n      <md-field class=\"fixed-size-field\">\n        <label>Result name</label>\n        <md-input\n          @change=\"update('resultName',localResultName)\"\n          v-model=\"localResultName\"\n        ></md-input>\n      </md-field>\n      <md-field class=\"fixed-size-field\">\n        <label>Result type</label>\n        <md-select @md-selected=\"update('resultType',localResultType)\" v-model=\"localResultType\">\n          <md-option\n            v-for=\"data of CONST_ANALYTIC_RESULT_TYPE\"\n            :key=\"data\"\n            :value=\"data\"\n            >{{ data }}</md-option\n          >\n        </md-select>\n      </md-field>\n\n      <div v-if=\"requireTicketLocalization\">\n        <md-field class=\"fixed-size-field\">\n          <label>Ticket/Alarm context id</label>\n          <md-input\n           @change=\"update('ticketContextId',localTicketContextId)\"\n            v-model=\"localTicketContextId\"\n          ></md-input>\n        </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label>Ticket/Alarm process id </label>\n          <md-input\n            @change=\"update('ticketProcessId',localTicketProcessId)\"\n            v-model=\"localTicketProcessId\"\n          ></md-input>\n        </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label> Alarm priority </label>\n          <md-input\n            type=\"number\"\n            @change=\"update('alarmPriority',localAlarmPriority)\"\n            v-model=\"localAlarmPriority\"\n          ></md-input>\n        </md-field>\n      </div>\n\n      <div v-if=\"requirePhoneInformation\">\n        <md-field class=\"fixed-size-field\">\n          <label>Phone number</label>\n          <md-input\n           @change=\"update('phoneNumber',localPhoneNumber)\"\n            v-model=\"localPhoneNumber\"\n          ></md-input>\n        </md-field>\n        <md-field class=\"fixed-size-field\">\n          <label>Message</label>\n          <md-input\n           @change=\"update('phoneMessage',localPhoneMessage)\"\n           type=\"text\"\n            v-model=\"localPhoneMessage\"\n          ></md-input>\n        </md-field>\n      </div>\n\n      <md-field class=\"fixed-size-field\">\n        <label\n          >Interval time (ms), 0 will make the analytic behave in COV\n          mode</label\n        >\n        <md-input\n          @change=\"update('intervalTime',localIntervalTime)\"\n          type=\"number\"\n          v-model=\"localIntervalTime\"\n        ></md-input>\n      </md-field>\n\n      <md-switch @change=\"update('triggerAtStart',localTriggerAtStart)\" v-model=\"localTriggerAtStart\"> Trigger instantly when organs starts </md-switch>\n\n    </md-content>\n  </md-step>\n</template>\n\n<script>\nimport {\n  ANALYTIC_RESULT_TYPE,\n  algos\n} from 'spinal-model-analysis';\n\nexport default {\n  props: [\n    'STEPPERS_DATA',\n    'stepper',\n    'inputs',\n    'algorithm',\n    'algorithmParameters',\n    'resultName',\n    'resultType',\n    'intervalTime',\n    'ticketContextId',\n    'ticketProcessId',\n    'alarmPriority',\n    'triggerAtStart',\n    'phoneNumber',\n    'phoneMessage'\n  ],\n  components: {},\n  data() {\n    return {\n      localAlgorithm: this.algorithm,\n      localAlgorithmParameters: this.algorithmParameters,\n      localResultName: this.resultName,\n      localResultType: this.resultType,\n      localIntervalTime: this.intervalTime,\n      localTicketContextId: this.ticketContextId,\n      localTicketProcessId: this.ticketProcessId,\n      localAlarmPriority: this.alarmPriority,\n      localPhoneNumber: this.phoneNumber,\n      localPhoneMessage: this.phoneMessage,\n      localTriggerAtStart: this.triggerAtStart,\n    };\n  },\n  created(){\n    this.CONST_ANALYTIC_RESULT_TYPE = ANALYTIC_RESULT_TYPE;\n  },\n  methods: {\n    update(key, value) {\n      console.log(\"update \", key, value)\n      if (key == 'algorithm' && this.algorithm != value){\n        this.update('algorithmParameters', [])\n      }\n      this.$emit(`update:${key}`, value);\n    },\n  },\n  computed: {\n    algo_names() {\n      return Object.values(algos);\n    },\n    algos() {\n      return algos;\n    },\n\n    requireTicketLocalization() {\n      return (\n        [this.CONST_ANALYTIC_RESULT_TYPE.TICKET, this.CONST_ANALYTIC_RESULT_TYPE.ALARM].includes(this.localResultType)\n      );\n    },\n\n    requireAlarmPriority(){\n      return this.localResultType == this.CONST_ANALYTIC_RESULT_TYPE.ALARM\n    },\n\n    requirePhoneInformation(){\n      return this.localResultType == this.CONST_ANALYTIC_RESULT_TYPE.SMS\n    }\n  },\n\n  watch: {\n    algorithm() {\n      this.localAlgorithm = this.algorithm;\n    },\n    algorithmParameters() {\n      this.localAlgorithmParameters = this.algorithmParameters;\n    },\n    resultName() {\n      this.localResultName = this.resultName;\n    },\n    resultType() {\n      this.localResultType = this.resultType;\n    },\n    intervalTime() {\n      this.localIntervalTime = this.intervalTime;\n    },\n    ticketContextId() {\n      this.localTicketContextId = this.ticketContextId;\n    },\n    ticketProcessId() {\n      this.localTicketProcessId = this.ticketProcessId;\n    },\n    alarmPriority() {\n      this.localAlarmPriority = this.alarmPriority;\n    },\n    triggerAtStart() {\n      this.localTriggerAtStart = this.triggerAtStart;\n    },\n\n  },\n};\n</script>\n","<template>\n  <md-step\n    class=\"mdStep\"\n    :id=\"STEPPERS_DATA.summary\"\n    md-label=\"Summary\"\n    :md-done.sync=\"stepper.eighth\"\n  >\n    <md-content class=\"contents md-scrollbar\">\n      <p>\n        Please check that all the information are correct before saving the\n        analytic.\n      </p>\n      <div\n        v-for=\"(field, index) in summaryList\"\n        :key=\"index\"\n        class=\"summary-item\"\n      >\n        <strong>{{ field.label }}:</strong>\n        {{ field.value === '' ? 'Missing !' : field.value }}\n      </div>\n    </md-content>\n  </md-step>\n</template>\n\n<script>\n\nexport default {\n  props: [\n    'STEPPERS_DATA',\n    'stepper',\n    'analyticName',\n    'trackingMethods',\n    'followedEntity',\n    'algorithm',\n    'algorithmParameters',\n    'resultName',\n    'resultType',\n    'intervalTime',\n  ],\n  data() {\n\n    return {\n\n    };\n  },\n  methods: {},\n  computed: {\n    summaryList() {\n      return [\n        { label: 'Analytic Name', value: this.analyticName },\n        { label: 'Tracking Methods', value: JSON.stringify(this.trackingMethods) },\n        { label: 'Followed Entity', value: this.followedEntity },\n        { label: 'Algorithm', value: this.algorithm },\n        {\n          label: 'Algorithm Parameters',\n          value: JSON.stringify(this.algorithmParameters),\n        },\n        { label: 'Result Name', value: this.resultName },\n        { label: 'Result Type', value: this.resultType },\n        { label: 'Interval Time (ms)', value: this.intervalTime },\n      ];\n    },\n  },\n};\n</script>\n\n<style scoped>\n.summary-item {\n  padding: 8px 0;\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.summary-item strong {\n  margin-right: 8px;\n}\n</style>\n","<template>\n  <md-dialog\n    :md-active.sync=\"showDialog\"\n    :md-click-outside-to-close=\"false\"\n    @md-closed=\"closeDialog(false)\"\n    class=\"mdDialog\"\n  >\n    <md-dialog-title class=\"mdDialogTitle\"> Modify Analytic </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n      <md-steppers\n        :md-active-step.sync=\"stepper.active\"\n        @md-changed=\"changeStep\"\n        md-linear\n      >\n        <analytic-name\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          v-bind:analyticName.sync=\"analyticName\"\n          v-bind:analyticDescription.sync=\"analyticDescription\"\n          v-bind:analyticShouldTriggerAtStart.sync=\"analyticShouldTriggerAtStart\"\n          v-bind:analyticStatus.sync=\"analyticStatus\"\n          :editable=\"false\"\n        ></analytic-name>\n\n         <followed-entity\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :entityType=\"entityType\"\n          v-bind:followedEntity.sync=\"followedEntity\"\n        ></followed-entity>\n\n        <input-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :entityType=\"entityType\"\n          :followedEntity=\"followedEntity\"\n          @addInput=\"addInput\"\n          @removeInput=\"removeInput\"\n          v-bind:inputs.sync=\"inputs\"\n        >\n        </input-configuration>\n\n        <trigger-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :inputs=\"inputs\"\n          @addTrigger=\"addTrigger\"\n          @removeTrigger=\"removeTrigger\"\n          v-bind:triggers.sync=\"triggers\"\n        >\n        </trigger-configuration>\n\n        <algorithm-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          @addAlgorithm=\"addAlgorithm\"\n          @removeAlgorithm=\"removeAlgorithm\"\n          v-bind:algorithms.sync=\"algorithms\"\n          >\n        </algorithm-configuration>\n\n\n        <result-configuration\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :inputs=\"inputs\"\n          v-bind:resultName.sync=\"resultName\"\n          v-bind:resultType.sync=\"resultType\"\n          v-bind:intervalTime.sync=\"intervalTime\"\n          v-bind:ticketContextId.sync=\"ticketContextId\"\n          v-bind:ticketProcessId.sync=\"ticketProcessId\"\n          v-bind:phoneNumber.sync=\"phoneNumber\"\n          v-bind:phoneMessage.sync=\"phoneMessage\"\n          v-bind:gChatMessage.sync=\"gChatMessage\"\n          v-bind:gChatSpaceName.sync=\"gChatSpaceName\"\n          v-bind:alarmPriority.sync=\"alarmPriority\">\n        </result-configuration>\n\n\n        <io-dependencies\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :inputs=\"inputs\"\n          :algorithms=\"algorithms\"\n          v-bind:ioDependencies.sync=\"ioDependencies\"\n          >\n        </io-dependencies>\n\n        <summary-analytic\n          :STEPPERS_DATA=\"STEPPERS_DATA\"\n          :stepper=\"stepper\"\n          :analyticName=\"analyticName\"\n          :trackingMethods=\"trackingMethods\"\n          :followedEntity=\"followedEntity\"\n          :algorithm=\"algorithm\"\n          :algorithmParameters=\"algorithmParameters\"\n          :resultName=\"resultName\"\n          :resultType=\"resultType\"\n          :intervalTime=\"intervalTime\"\n        >\n        </summary-analytic> \n      </md-steppers>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n\n      <md-button\n        class=\"md-primary\"\n        v-if=\"stepper.active !== this.STEPPERS_DATA.summary\"\n        @click=\"PassToNextStep\"\n        >Next\n      </md-button>\n      <md-button\n        v-if=\"stepper.active === this.STEPPERS_DATA.summary\"\n        :disabled=\"isSaveButtonDisabled()\"\n        class=\"md-primary\"\n        @click=\"closeDialog(true)\"\n        >Save</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport {\n  spinalAnalyticService,\n  CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS,\n  CATEGORY_ATTRIBUTE_RESULT_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TRACKING_METHOD_PARAMETERS,\n  CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS,\n  CATEGORY_ATTRIBUTE_IO_DEPENDENCIES,\n  CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS,\n  CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING,\n  CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS,\n  ATTRIBUTE_GCHAT_MESSAGE,\n  ATTRIBUTE_GCHAT_SPACE,\n  ATTRIBUTE_PHONE_NUMBER,\n  ATTRIBUTE_PHONE_MESSAGE,\n  ATTRIBUTE_SEPARATOR,\n  ATTRIBUTE_TRACKING_METHOD,\n  ATTRIBUTE_SEARCH_DEPTH,\n  ATTRIBUTE_STRICT_DEPTH,\n  ATTRIBUTE_SEARCH_RELATIONS,\n  ATTRIBUTE_FILTER_VALUE,\n  ATTRIBUTE_TIMESERIES,\n  ATTRIBUTE_RESULT_NAME,\n  ATTRIBUTE_RESULT_TYPE,\n  ATTRIBUTE_ANALYTIC_STATUS,\n  ATTRIBUTE_ANALYTIC_DESCRIPTION,\n  ATTRIBUTE_TRIGGER_AT_START,\n  ATTRIBUTE_TICKET_CONTEXT_ID,\n  ATTRIBUTE_TICKET_PROCESS_ID,\n  ATTRIBUTE_ALARM_PRIORITY,\n  ATTRIBUTE_VALUE_SEPARATOR,\n  ANALYTIC_RESULT_TYPE,\n  ANALYTIC_STATUS,\n  TRACK_METHOD,\n  algos,\n} from 'spinal-model-analysis';\n\nimport analyticNameVue from './components/analyticSteps/analyticName.vue';\nimport followedEntityVue from './components/analyticSteps/followedEntity.vue';\nimport inputConfiguration from './components/analyticSteps/inputConfiguration.vue';\nimport triggerConfiguration from './components/analyticSteps/triggerConfiguration.vue';\nimport algorithmConfiguration from './components/analyticSteps/algorithmConfiguration.vue';\nimport resultConfiguration from './components/analyticSteps/resultConfiguration.vue';\nimport IODependenciesVue from './components/analyticSteps/IODependencies.vue';\nimport configurationVue from './components/analyticSteps/configuration.vue';\nimport summaryVue from './components/analyticSteps/summary.vue';\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nimport AttributeService, { attributeService} from 'spinal-env-viewer-plugin-documentation-service';\n\nexport default {\n  name: 'modifyAnalyticDialog',\n  props: ['onFinised'],\n  components: {\n    'analytic-name': analyticNameVue,\n    'followed-entity': followedEntityVue,\n    'input-configuration': inputConfiguration,\n    'trigger-configuration': triggerConfiguration,\n    'algorithm-configuration': algorithmConfiguration,\n    'result-configuration': resultConfiguration,\n    'io-dependencies': IODependenciesVue,\n    'configuration': configurationVue,\n    'summary-analytic': summaryVue,\n  },\n  data() {\n\n    this.STEPPERS_DATA = {\n      analytic: 'first',\n      followedEntity: 'second',\n      inputConfiguration: 'third',\n      triggerConfiguration: 'fourth',\n      algorithmConfiguration: 'fifth',\n      resultConfiguration: 'sixth',\n      IODependencies : 'seventh',\n      summary : 'eighth',\n    };\n\n    return {\n      showDialog: true,\n      showPreviewDialog: false,\n\n      // Analytic attributes data\n      analyticName: '',\n      analyticDescription:'',\n      analyticShouldTriggerAtStart : undefined,\n      analyticStatus : undefined,\n\n\n      // Inputs -> Followed Entity -> attribute data\n      followedEntity: undefined, \n\n      // Inputs  -> Tracking Method -> attribute data\n      inputs: { },\n\n\n      // Config -> trigger attribute data\n      triggers: { },\n\n      // Config -> Algorithms attribute data\n      algorithms: {},\n\n      // Config -> I/O Dependencies attribute data\n      ioDependencies : { R : \"\"},\n\n      // Config -> Result attribute data\n      resultType : '',\n      resultName : '', \n      ticketContextId: '',\n      ticketProcessId: '',\n      phoneNumber:'',\n      phoneMessage:'',\n      alarmPriority: null,\n      gChatMessage : '',\n      gChatSpaceName : '',\n      \n      selectedNode: undefined,\n      entityType: undefined,\n\n      stepper: {\n        active: this.STEPPERS_DATA.analytic,\n        first: false,\n        second: false,\n        third: false,\n        fourth: false,\n        fifth: false,\n        sixth: false,\n        seventh: false,\n        eighth: false,\n      },\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.selectedNode = option.selectedNode;\n      // selectedNode is the analytic node\n      const selectedNodeId = this.selectedNode.id.get();\n      const entity = await spinalAnalyticService.getEntityFromAnalytic(selectedNodeId);\n      this.entityType = entity.entityType.get();\n      this.analyticName = this.selectedNode.name.get();\n      const followedEntityNode = await spinalAnalyticService.getFollowedEntity(selectedNodeId);\n      this.followedEntity = followedEntityNode ? followedEntityNode.id.get() : undefined;\n\n      // need to get all the category names first\n      const trackingMethodNodeRef = await spinalAnalyticService.getTrackingMethod(selectedNodeId);\n      const parseInputs = await spinalAnalyticService.getAllCategoriesAndAttributesFromNode(trackingMethodNodeRef.id.get());\n      for(const inputKey of Object.keys(parseInputs)){\n        this.inputs[inputKey] = { trackingMethod : parseInputs[inputKey][ATTRIBUTE_TRACKING_METHOD],\n                                  filterValue :parseInputs[inputKey][ATTRIBUTE_FILTER_VALUE],\n                                  searchDepth : parseInputs[inputKey][ATTRIBUTE_SEARCH_DEPTH],\n                                  strictDepth : parseInputs[inputKey][ATTRIBUTE_STRICT_DEPTH],\n                                  searchRelations : parseInputs[inputKey][ATTRIBUTE_SEARCH_RELATIONS],\n                                  timeseriesIntervalTime : parseInputs[inputKey][ATTRIBUTE_TIMESERIES] };\n      }\n\n      this.inputs = { ...this.inputs };\n      //this.input = Object.assign({}, this.inputs);\n\n      console.log(this.inputs);\n      const configNode = await spinalAnalyticService.getConfig(selectedNodeId);\n      const analyticAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS);\n      this.analyticDescription = analyticAttributes[ATTRIBUTE_ANALYTIC_DESCRIPTION];\n      this.analyticStatus = analyticAttributes[ATTRIBUTE_ANALYTIC_STATUS]===ANALYTIC_STATUS.ACTIVE;\n      this.analyticShouldTriggerAtStart = analyticAttributes[ATTRIBUTE_TRIGGER_AT_START];\n      const triggerAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS);\n      for(const triggerKey of Object.keys(triggerAttributes)){\n        let triggerValue = triggerAttributes[triggerKey].split(ATTRIBUTE_VALUE_SEPARATOR);\n        this.triggers[triggerKey] = { triggerType : triggerValue[0],\n                                      triggerValue : triggerValue[1],\n                                      changeOfValueThreshold : triggerValue[2] ? triggerValue[2] : null };\n      }\n      this.triggers = { ...this.triggers };\n\n      const algorithmMappingAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING);\n      for(const algorithmIndexName of Object.keys(algorithmMappingAttributes)){\n        this.algorithms[algorithmIndexName] = { name : algorithmMappingAttributes[algorithmIndexName],\n                                                params : []};\n      }\n      const algorithmParametersAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS);\n      for(const algorithmIndexName of Object.keys(this.algorithms)){\n        let algoName = this.algorithms[algorithmIndexName].name;\n        const doc = algos[algoName].requiredParams;\n        for(let i = 0 ; i<doc.length; i++){\n          this.algorithms[algorithmIndexName].params.push(algorithmParametersAttributes[`${algorithmIndexName}${ATTRIBUTE_SEPARATOR}${doc[i].name}`]);\n        }\n      }\n      this.algorithms = { ...this.algorithms };\n\n      const resultAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_RESULT_PARAMETERS);\n      this.resultType = resultAttributes[ATTRIBUTE_RESULT_TYPE];\n      this.resultName = resultAttributes[ATTRIBUTE_RESULT_NAME];\n      if ([ANALYTIC_RESULT_TYPE.TICKET,ANALYTIC_RESULT_TYPE.ALARM].includes(this.resultType)){\n        const ticketAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS);\n        this.ticketContextId = ticketAttributes[ATTRIBUTE_TICKET_CONTEXT_ID];\n        this.ticketProcessId = ticketAttributes[ATTRIBUTE_TICKET_PROCESS_ID];\n        if(this.resultType === ANALYTIC_RESULT_TYPE.ALARM){\n          this.alarmPriority = ticketAttributes[ATTRIBUTE_ALARM_PRIORITY];\n        }\n      }\n      if ([ANALYTIC_RESULT_TYPE.SMS].includes(this.resultType)){\n        const smsAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS);\n        this.phoneNumber = smsAttributes[ATTRIBUTE_PHONE_NUMBER];\n        this.phoneMessage = smsAttributes[ATTRIBUTE_PHONE_MESSAGE];\n      }\n\n      if([ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE,ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD].includes(this.resultType)){\n        const gChatAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS);\n        this.gChatMessage = gChatAttributes[ATTRIBUTE_GCHAT_MESSAGE];\n        this.gChatSpaceName = gChatAttributes[ATTRIBUTE_GCHAT_SPACE];\n      }\n      const ioAttributes = await spinalAnalyticService.getAttributesFromNode(configNode.id.get(),CATEGORY_ATTRIBUTE_IO_DEPENDENCIES);\n      for(const ioDependencyName of Object.keys(ioAttributes)){\n        let ioDependencyValue = ioAttributes[ioDependencyName].split(ATTRIBUTE_VALUE_SEPARATOR);\n        this.ioDependencies[ioDependencyName] = ioDependencyValue;\n      }\n      this.ioDependencies = { ...this.ioDependencies };\n    },\n\n    async removed(res) {\n      if (res.closeResult) {\n        // there must be a better way to get the context id...\n        const contextId = Object.keys(this.selectedNode.contextIds.get())[0];\n        const followedEntityNodeRef = await spinalAnalyticService.getFollowedEntity(this.selectedNode.id.get());\n        if (followedEntityNodeRef && followedEntityNodeRef.id.get() !== this.followedEntity) {\n          console.log(\"change followed entity\");\n          await spinalAnalyticService.removeLinkToFollowedEntity(this.selectedNode.id.get(), followedEntityNodeRef.id.get());\n          await spinalAnalyticService.addInputLinkToFollowedEntity(contextId,this.selectedNode.id.get(), this.followedEntity);\n        }\n        if(!followedEntityNodeRef){\n          await spinalAnalyticService.addInputLinkToFollowedEntity(contextId,this.selectedNode.id.get(), this.followedEntity);\n        }\n\n\n\n        const trackingMethodAttributes = this.getTrackingMethodAttributes();\n        console.log('trackingMethodAttributes :', trackingMethodAttributes);\n        const trackingMethodNodeRef = await spinalAnalyticService.getTrackingMethod(\n          this.selectedNode.id.get(),\n        );\n        const trackingMethodNode =  SpinalGraphService.getRealNode(\n          trackingMethodNodeRef.id.get(),\n        );\n        await spinalAnalyticService.addAttributesToNode(\n          trackingMethodNode,\n          trackingMethodAttributes,\n        );\n\n        \n        const configAttributes = {};\n        const analyticAttributes = this.getAnalyticAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_ANALYTIC_PARAMETERS\n        ] = analyticAttributes;\n\n\n        const resultAttributes = this.getResultAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_RESULT_PARAMETERS\n        ] = resultAttributes;\n\n        const algorithmParametersAttributes = this.getAlgorithmParametersAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_ALGORTHM_PARAMETERS\n        ] = algorithmParametersAttributes;\n\n        const algorithmMappingAttributes = this.getAlgorithmMappingAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_ALGORITHM_INDEX_MAPPING\n        ] = algorithmMappingAttributes;\n\n        if (this.ticketContextId && this.ticketProcessId) {\n          const ticketAttributes = this.getTicketAttributes();\n          configAttributes[\n            CATEGORY_ATTRIBUTE_TICKET_LOCALIZATION_PARAMETERS\n          ] = ticketAttributes;\n        }\n\n        if(this.resultType == ANALYTIC_RESULT_TYPE.SMS){\n          const smsAttributes = this.getSMSAttributes();\n          configAttributes[\n            CATEGORY_ATTRIBUTE_TWILIO_PARAMETERS\n          ] = smsAttributes;\n        };\n\n        if([ANALYTIC_RESULT_TYPE.GCHAT_MESSAGE,ANALYTIC_RESULT_TYPE.GCHAT_ORGAN_CARD].includes(this.resultType)){\n          const gChatAttributes = this.getGChatAttributes();\n          configAttributes[\n            CATEGORY_ATTRIBUTE_GCHAT_PARAMETERS\n          ] = gChatAttributes;\n        };\n\n        const ioAttributes = this.getIOAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_IO_DEPENDENCIES\n        ] = ioAttributes;\n\n        const triggerAttributes = this.getTriggerAttributes();\n        configAttributes[\n          CATEGORY_ATTRIBUTE_TRIGGER_PARAMETERS\n        ] = triggerAttributes;\n\n\n\n        const configNodeRef = await spinalAnalyticService.getConfig(\n          this.selectedNode.id.get()\n        );\n        const configNode = SpinalGraphService.getRealNode(\n          configNodeRef.id.get()\n        );\n        await spinalAnalyticService.addAttributesToNode(\n          configNode,\n          configAttributes\n        );\n        \n        \n      }\n\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised({\n          closeResult,\n          analyticName: this.analyticName,\n        });\n      }\n    },\n\n    addInput() {\n      let length = Object.keys(this.inputs).length;\n      console.log('adding input');\n      this.inputs = { ...this.inputs, [`I${length}`]: { trackingMethod: '', filterValue: '', searchDepth:0, strictDepth:false, searchRelations:'', timeseriesIntervalTime : 0 }};\n    },\n\n    removeInput(inputName) {\n      delete this.inputs[inputName];\n      let index = Number(inputName.match(/(\\d+)/)[0]);\n      // shift back all the inputs after the deleted one.\n      let i = index;\n      while (this.inputs[`I${i + 1}`] !== undefined) {\n        this.inputs[`I${i}`] = this.inputs[`I${i + 1}`];\n        i++;\n      }\n      // Remove the last item.\n      delete this.inputs[`I${i}`];\n\n      this.inputs = { ...this.inputs };\n      console.log(\"deleted input : \", inputName);\n    },\n\n    addTrigger() {\n      let length = Object.keys(this.triggers).length;\n      console.log('adding input');\n      this.triggers = { ...this.triggers, [`T${length}`]: { triggerType: '', triggerValue: '', changeOfValueThreshold : 0 }};\n      \n    },\n\n    removeTrigger(triggerName) {\n      delete this.triggers[triggerName];\n      let index = Number(triggerName.match(/(\\d+)/)[0]);\n      // shift back all the elements after the deleted one.\n      let i = index;\n      while (this.triggers[`T${i + 1}`] !== undefined) {\n        this.triggers[`T${i}`] = this.triggers[`T${i + 1}`];\n        i++;\n      }\n      // Remove the last item.\n      delete this.triggers[`T${i}`];\n\n      this.triggers = { ...this.triggers };\n      console.log(\"deleted trigger : \", triggerName);\n    },\n\n    addAlgorithm(){\n      let length = Object.keys(this.algorithms).length;\n      console.log('adding algorithm');\n      this.algorithms = { ...this.algorithms, [`A${length}`]: { name :'', params: []}};\n    },\n\n    removeAlgorithm(algorithmIndexName){\n      delete this.algorithms[algorithmIndexName];\n      let index = Number(algorithmIndexName.match(/(\\d+)/)[0]);\n      // shift back all the elements after the deleted one.\n      let i = index;\n      while (this.algorithms[`A${i + 1}`] !== undefined) {\n        this.algorithms[`A${i}`] = this.algorithms[`A${i + 1}`];\n        i++;\n      }\n      // Remove the last item.\n      delete this.algorithms[`A${i}`];\n\n      this.algorithms = { ...this.algorithms };\n      console.log(\"deleted algorithm : \", algorithmIndexName);\n    },\n\n    changeStep(stepId) {\n      this.stepper.active = stepId;\n    },\n\n    PassToNextStep() {\n      switch (this.stepper.active) {\n        case this.STEPPERS_DATA.analytic:\n          this.stepper.first = true;\n          this.stepper.active = this.STEPPERS_DATA.followedEntity;\n          break;\n        case this.STEPPERS_DATA.followedEntity:\n          this.stepper.second = true;\n          this.stepper.active = this.STEPPERS_DATA.inputConfiguration;\n          break;\n        case this.STEPPERS_DATA.inputConfiguration:\n          this.stepper.third = true;\n          this.stepper.active = this.STEPPERS_DATA.triggerConfiguration;\n          break;\n        case this.STEPPERS_DATA.triggerConfiguration:\n          this.stepper.fourth = true;\n          this.stepper.active = this.STEPPERS_DATA.algorithmConfiguration;\n          break;\n        case this.STEPPERS_DATA.algorithmConfiguration:\n          this.stepper.fifth = true;\n          this.stepper.active = this.STEPPERS_DATA.resultConfiguration;\n          break;\n        case this.STEPPERS_DATA.resultConfiguration:\n          this.stepper.sixth = true;\n          this.stepper.active = this.STEPPERS_DATA.IODependencies;\n          break;\n        case this.STEPPERS_DATA.IODependencies:\n          this.stepper.seventh = true;\n          this.stepper.active = this.STEPPERS_DATA.summary;\n          break;\n        case this.STEPPERS_DATA.summary:\n          this.stepper.eighth = true;\n          this.stepper.active = this.STEPPERS_DATA.summary;\n          break;\n      }\n    },\n\n    isSaveButtonDisabled() {\n      return (\n        this.analyticName === '' ||\n        this.algorithm === '' ||\n        this.resultType === '' ||\n        this.resultName === '' ||\n        this.intervalTime === null ||\n        !this.followedEntity\n      );\n    },\n\n    getTrackingMethodAttributes(){\n      const trackingMethodAttributes = {};\n      for ( const inputKey of Object.keys(this.inputs))\n      {\n        trackingMethodAttributes[inputKey] = []\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_TRACKING_METHOD}`,\n                  type: 'string',\n                  value: this.inputs[inputKey].trackingMethod });\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_FILTER_VALUE}`,\n                  type: 'string',\n                  value: this.inputs[inputKey].filterValue });\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_SEARCH_DEPTH}`,\n                  type: 'number',\n                  value: this.inputs[inputKey].searchDepth });\n\n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_STRICT_DEPTH}`,\n                  type: 'boolean',\n                  value: this.inputs[inputKey].strictDepth });\n                  \n        trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_SEARCH_RELATIONS}`,\n                  type: 'string',\n                  value: this.inputs[inputKey].searchRelations });\n\n        if([TRACK_METHOD.CONTROL_ENDPOINT_NAME_FILTER,TRACK_METHOD.ENDPOINT_NAME_FILTER].includes(this.inputs[inputKey].trackingMethod) ){\n          trackingMethodAttributes[inputKey].push({ name: `${ATTRIBUTE_TIMESERIES}`,\n                  type: 'number',\n                  value: this.inputs[inputKey].timeseriesIntervalTime });\n        }\n        \n      }\n      return trackingMethodAttributes;\n    },\n\n    getAnalyticAttributes(){\n      const analyticAttributes = [];\n      analyticAttributes.push({\n        name: `${ATTRIBUTE_ANALYTIC_DESCRIPTION}`,\n        type: 'string',\n        value: this.analyticDescription,\n      });\n      analyticAttributes.push({\n        name: `${ATTRIBUTE_ANALYTIC_STATUS}`,\n        type: 'string',\n        value: this.analyticStatus? ANALYTIC_STATUS.ACTIVE : ANALYTIC_STATUS.INACTIVE,\n      });\n      analyticAttributes.push({\n        name: `${ATTRIBUTE_TRIGGER_AT_START}`,\n        type: 'boolean',\n        value: this.analyticShouldTriggerAtStart,\n      });\n      return analyticAttributes;\n    },\n\n    getResultAttributes(){\n      const resultAttributes = [];\n      resultAttributes.push({\n        name: `${ATTRIBUTE_RESULT_TYPE}`,\n        type: 'string',\n        value: this.resultType,\n      });\n      resultAttributes.push({\n        name: `${ATTRIBUTE_RESULT_NAME}`,\n        type: 'string',\n        value: this.resultName,\n      });\n      return resultAttributes;\n    },\n\n    getAlgorithmParametersAttributes(){\n      const algorithmParametersAttributes = [];\n      for (const algorithmIndexName of Object.keys(this.algorithms)) {\n        let algoName = this.algorithms[algorithmIndexName].name;\n        const doc = algos[algoName].requiredParams;\n        for(let i = 0 ; i<this.algorithms[algorithmIndexName].params.length; i++){\n          algorithmParametersAttributes.push({\n            name: `${algorithmIndexName}${ATTRIBUTE_SEPARATOR}${doc[i].name}`,\n            value: doc[i].type === 'number' ? + this.algorithms[algorithmIndexName].params[i] : this.algorithms[algorithmIndexName].params[i],\n            type: doc[i].type,\n          });\n        }\n      }\n      return algorithmParametersAttributes;\n    },\n\n    getAlgorithmMappingAttributes(){\n      const algorithmMappingAttributes = [];\n      for (const algorithmIndexName of Object.keys(this.algorithms)) {\n        algorithmMappingAttributes.push({\n          name: `${algorithmIndexName}`,\n          type: 'string',\n          value: this.algorithms[algorithmIndexName].name,\n        });\n      }\n      return algorithmMappingAttributes;\n    },\n\n    getTicketAttributes(){\n      const ticketAttributes = [];\n      ticketAttributes.push({\n        name: `${ATTRIBUTE_TICKET_CONTEXT_ID}`,\n        type: 'string',\n        value: this.ticketContextId,\n      });\n      ticketAttributes.push({\n        name: `${ATTRIBUTE_TICKET_PROCESS_ID}`,\n        type: 'string',\n        value: this.ticketProcessId,\n      });\n      if(this.alarmPriority){\n          ticketAttributes.push({\n            name: `${ATTRIBUTE_ALARM_PRIORITY}`,\n            value: this.alarmPriority,\n            type: 'number',\n          });\n        }\n      return ticketAttributes;\n    },\n\n    getSMSAttributes(){\n      const smsAttributes = [];\n      smsAttributes.push({\n        name: `${ATTRIBUTE_PHONE_NUMBER}`,\n        type: 'string',\n        value: this.phoneNumber,\n      });\n      smsAttributes.push({\n        name: `${ATTRIBUTE_PHONE_MESSAGE}`,\n        type: 'string',\n        value: this.phoneMessage,\n      });\n      return smsAttributes;\n    },\n\n    getGChatAttributes(){\n      const gChatAttributes = [];\n      gChatAttributes.push({\n        name: `${ATTRIBUTE_GCHAT_MESSAGE}`,\n        type: 'string',\n        value: this.gChatMessage,\n      });\n      gChatAttributes.push({\n        name: `${ATTRIBUTE_GCHAT_SPACE}`,\n        type: 'string',\n        value: this.gChatSpaceName,\n      });\n      return gChatAttributes;\n    },\n\n    getIOAttributes(){\n      const ioAttributes = [];\n      for (const ioDependencyName of Object.keys(this.ioDependencies)) {\n        let str = \"\";\n        for (const ioDependency of this.ioDependencies[ioDependencyName]) {\n          str += `${ioDependency}${ATTRIBUTE_VALUE_SEPARATOR}`;\n        }\n        str = str.slice(0, -1);\n        ioAttributes.push({\n          name: `${ioDependencyName}`,\n          type: 'string',\n          value: str,\n        });\n      }\n      return ioAttributes;\n    },\n\n    getTriggerAttributes(){\n      const triggerAttributes = [];\n      for (const triggerIndex of Object.keys(this.triggers)) {\n        let str = `${this.triggers[triggerIndex].triggerType}${ATTRIBUTE_VALUE_SEPARATOR}${this.triggers[triggerIndex].triggerValue}`;\n        if (this.triggers[triggerIndex].changeOfValueThreshold !== null) {\n          str += `${ATTRIBUTE_VALUE_SEPARATOR}${this.triggers[triggerIndex].changeOfValueThreshold}`;\n        }\n        triggerAttributes.push({\n          name: `${triggerIndex}`,\n          type: 'string',\n          value: str,\n        });\n      }\n      return triggerAttributes;\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n.mdDialog {\n  width: 1200px;\n  max-width: 1500px;\n  height: 600px;\n}\n\n.mdDialog .mdDialogTitle {\n  text-align: center;\n}\n\n.mdDialog .mdDialogContainer {\n  width: 1200px;\n  max-width: 1500px;\n  height: 100%;\n  overflow: auto;\n}\n\n.fixed-size-field {\n  width: 85%;\n  max-width: 85%;\n}\n\n.md-dialog-actions {\n  padding: 8px 16px; /* Add this line */\n  margin: 0; /* Add this line */\n}\n\n.md-button {\n  margin: 0 8px; /* Add this line */\n}\n\n.mdDialog .mdDialogContainer .mdStep {\n  height: 350px;\n  padding: 10px 0px;\n  overflow: auto;\n}\n</style>\n\n<style>\n.mdDialog .mdDialogContainer .mdStep .md-stepper-content.md-active {\n  width: 100%;\n  height: 100%;\n}\n.fixed-size-field {\n  width: 85%;\n  max-width: 85%;\n}\n\n.mdDialog .mdDialogContainer .mdStep .contents {\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  overflow: auto;\n}\n</style>\n","import vue from \"vue\";\n\nconst { SpinalForgeExtention } = require(\"spinal-env-viewer-panel-manager-service_spinalforgeextention\");\n\n\nimport LinkGroupToAnalytics from \"./linkGroupToAnalytics.vue\";\n\nlet panels = [\n   {\n      name: \"linkGroupToAnalyticsPanel\",\n      vueMountComponent: vue.extend(LinkGroupToAnalytics),\n      panel: {\n      title: \"Link Group to Analytic Panel\",\n      closeBehaviour: \"hide\",\n      },\n      style: {\n         height: \"475px\",\n         left: \"400px\",\n      },\n   }\n];\n\nfor (let index = 0; index < panels.length; index++) {\n const element = panels[index];\n const panelExtension = SpinalForgeExtention.createExtention(element);\n SpinalForgeExtention.registerExtention(element.name, panelExtension);\n}","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-content class=\"mdContent\">\n\t\t<div class=\"header\">\n\t\t\t<div class=\"buscar-caja\" :class=\"{ isOpened: isOpened }\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"\"\n\t\t\t\t\tclass=\"buscar-txt\"\n\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t:class=\"{ isOpened: isOpened }\"\n\t\t\t\t\tv-model=\"search\"\n\t\t\t\t/>\n\t\t\t\t<a class=\"md-icon-button buscar-btn\" @click=\"openSearchBar\">\n\t\t\t\t\t<md-icon>search</md-icon>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div\n\t\t\tv-if=\"tempList.length > 0 && appState === STATES.normal\"\n\t\t\tclass=\"_container\"\n\t\t>\n\t\t\t<md-content class=\"listItem md-scrollbar\">\n\t\t\t\t<RecycleScroller\n\t\t\t\t\t:items=\"tempList\"\n\t\t\t\t\t:item-size=\"60\"\n\t\t\t\t\tkey-field=\"id\"\n\t\t\t\t\tv-slot=\"{ item }\"\n\t\t\t\t>\n\t\t\t\t\t<div class=\"listContainer\">\n\t\t\t\t\t\t<span class=\"md-list-item-text\">{{ item.name }}</span>\n\n\t\t\t\t\t\t<md-button\n\t\t\t\t\t\t\tclass=\"md-icon-button panel_link_button\"\n\t\t\t\t\t\t\t@click=\"linkUnlink(item)\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<md-icon>{{ getIcon(item) }}</md-icon>\n\t\t\t\t\t\t</md-button>\n\t\t\t\t\t</div>\n\t\t\t\t</RecycleScroller>\n\t\t\t</md-content>\n\t\t</div>\n\n\t\t<div\n\t\t\tclass=\"_container empty\"\n\t\t\tv-if=\"tempList.length === 0 && appState === STATES.normal\"\n\t\t>\n\t\t\tNo Data found !\n\t\t</div>\n\n\t\t<div class=\"_container empty\" v-if=\"appState === STATES.loading\">\n\t\t\t<md-progress-spinner\n\t\t\t\tclass=\"spiner\"\n\t\t\t\tmd-mode=\"indeterminate\"\n\t\t\t></md-progress-spinner>\n\t\t</div>\n\n\t\t<div class=\"_container empty\" v-if=\"appState === STATES.error\">\n\t\t\tSorry, Something was wrong. Please retry !!\n\t\t</div>\n\t</md-content>\n</template>\n\n<script>\n\timport Vue from \"vue\";\n\n\timport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\timport { spinalAnalyticService } from \"spinal-env-viewer-plugin-analytics-service\";\n\n\timport { RecycleScroller } from \"vue-virtual-scroller\";\n\n\tVue.component(\"RecycleScroller\", RecycleScroller);\n\n\texport default {\n\t\tname: \"linkGroupToAnalyticPanel\",\n\t\tcomponents: {\n\t\t\t// \"pagination-component\": paginationComponent,\n\t\t\t// \"filter-menu\": filterMenu,\n\t\t\t// \"virtual-scroller\": VueVirtualScroller,\n\t\t},\n\t\tdata() {\n\t\t\tthis.STATES = {\n\t\t\t\tnormal: 1,\n\t\t\t\tloading: 2,\n\t\t\t\terror: 3,\n\t\t\t};\n\t\t\tthis.contextId;\n\t\t\tthis.analyticId;\n\t\t\tthis.childrenType;\n\n\t\t\tthis.data = [];\n\n\t\t\tthis.countPerPage = 10;\n\n\t\t\treturn {\n\t\t\t\tsearch: \"\",\n\t\t\t\tisOpened: false,\n\t\t\t\ttempList: [],\n\t\t\t\tdataLinked: [],\n\t\t\t\tcurrentPage: 1,\n\t\t\t\tappState: this.STATES.normal,\n\t\t\t};\n\t\t},\n\t\tmethods: {\n\t\t\tasync opened(option) {\n\t\t\t\tthis.appState = this.STATES.loading;\n\t\t\t\tthis.contextId = option.contextId;\n\t\t\t\tthis.analyticId = option.analyticId;\n\t\t\t\tthis.childrenType = option.childrenType;\n\n\t\t\t\tPromise.all([\n\t\t\t\t\tthis.getGroupsLinked(this.analyticId),\n\t\t\t\t\tthis.getAllGroups(this.childrenType),\n\t\t\t\t])\n\t\t\t\t\t.then(([linked, groups]) => {\n\t\t\t\t\t\tthis.data = groups;\n\t\t\t\t\t\tthis.tempList = groups;\n\t\t\t\t\t\tthis.dataLinked = linked;\n\t\t\t\t\t\tthis.appState = this.STATES.normal;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tthis.appState = this.STATES.error;\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tisLinked(item) {\n\t\t\t\treturn this.dataLinked.find((el) => {\n\t\t\t\t\treturn item.id === el.id;\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tgetIcon(item) {\n\t\t\t\treturn typeof this.isLinked(item) === \"undefined\"\n\t\t\t\t\t? \"link\"\n\t\t\t\t\t: \"link_off\";\n\t\t\t},\n\n\t\t\t// eventMethod(eventName, item) {\n\t\t\t// \tEventBus.$emit(eventName, item);\n\t\t\t// },\n\n\t\t\topenSearchBar() {\n\t\t\t\tthis.isOpened = !this.isOpened;\n\t\t\t},\n\n\t\t\tasync linkUnlink(item) {\n\t\t\t\tif (!this.isLinked(item)) {\n\t\t\t\t\tawait spinalAnalyticService.linkGroupToAnalytic(\n\t\t\t\t\t\tthis.contextId,\n\t\t\t\t\t\tthis.analyticId,\n\t\t\t\t\t\titem.id\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.dataLinked.push(item);\n\t\t\t\t} else {\n\t\t\t\t\tconst removed =\n\t\t\t\t\t\tawait spinalAnalyticService.unLinkGroupToAnalytic(\n\t\t\t\t\t\t\tthis.analyticId,\n\t\t\t\t\t\t\titem.id\n\t\t\t\t\t\t);\n\n\t\t\t\t\tif (removed) {\n\t\t\t\t\t\tthis.dataLinked = this.dataLinked.filter(\n\t\t\t\t\t\t\t(el) => el.id !== item.id\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync getGroupsLinked(analyticId) {\n\t\t\t\tconst groups = await spinalAnalyticService.getGroupsLinked(\n\t\t\t\t\tanalyticId\n\t\t\t\t);\n\t\t\t\treturn groups.map((group) => group.get());\n\t\t\t},\n\n\t\t\tasync getAllGroups(type) {\n\t\t\t\tconst contexts = await groupManagerService.getGroupContexts(type);\n\t\t\t\tconst promises = contexts.map((el) => {\n\t\t\t\t\treturn groupManagerService.getGroups(el.id);\n\t\t\t\t});\n\n\t\t\t\treturn Promise.all(promises).then((result) => {\n\t\t\t\t\tconst _result = result.flat();\n\t\t\t\t\treturn _result.map((el) => el.get());\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t\twatch: {\n\t\t\tsearch: function (newValue) {\n\t\t\t\tnewValue = newValue.trim();\n\t\t\t\t// console.log(\"newValue\", newValue);\n\t\t\t\tif (newValue.length === 0) {\n\t\t\t\t\tthis.tempList = [...this.data];\n\t\t\t\t} else {\n\t\t\t\t\tthis.tempList = this.data.filter((el) => {\n\t\t\t\t\t\treturn el.name.toLowerCase().includes(newValue.toLowerCase());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t// computed: {\n\t\t//   isOpened: function() {\n\t\t//     return this.search.trim().length > 0;\n\t\t//   }\n\t\t// }\n\t};\n</script>\n\n<style scoped>\n\t.mdContent {\n\t\twidth: 100%;\n\t\theight: calc(100% - 15px);\n\t}\n\n\t.header {\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tdisplay: flex;\n\t\tflex-direction: row-reverse;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t._container {\n\t\twidth: 100%;\n\t\theight: calc(100% - 50px);\n\t\toverflow: hidden;\n\t}\n\n\t._container .listItem {\n\t\twidth: 98%;\n\t\theight: calc(100% - 10px);\n\t\toverflow: hidden;\n\t\toverflow-y: auto;\n\t\tmargin: auto;\n\t}\n\n\t._container .listItem .listcontent {\n\t\twidth: 95%;\n\t\tmargin: auto;\n\t}\n\n\t.empty {\n\t\twidth: 100%;\n\t\theight: calc(100% - 50px);\n\t\t/* text-align: center; */\n\t\tfont-size: 20px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n\t.listContainer {\n\t\twidth: 95%;\n\t\theight: 60px;\n\t\tfont-size: 1.2em;\n\t\tpadding: 0 5px 0 5px;\n\t\tborder-bottom: 1px solid white;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t}\n\n\t.listContainer:hover {\n\t\tcursor: pointer;\n\t\tbackground-color: gray;\n\t}\n\n\t.paginationContent {\n\t\twidth: 40%;\n\t\tmargin: auto;\n\t\theight: 40px;\n\t}\n\n\t.paginationContent {\n\t\twidth: 100%;\n\t\theight: 40px;\n\t}\n\n\t/* .groupColor {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t\tborder: 1px solid white;\n\t}\n\n\t.spiner {\n\t\tposition: absolute;\n\t\ttop: calc(50% - 30px);\n\t\tright: calc(50% - 30px);\n\t} */\n</style>\n\n<style>\n\t.listContainer .md-list-item-content {\n\t\tpadding-left: 5px;\n\t\t/* padding-top: 4px;\n  padding-bottom: 4px; */\n\t}\n\n\t.listContainer .panel_link_button .md-ripple {\n\t\tpadding: unset !important;\n\t}\n\n\t/*\n//////////////////////////////////////////////////////////////////\n*/\n\n\t.buscar-caja {\n\t\t/* position: absolute; */\n\t\t/* top: 50%;\n  left: 50%; */\n\t\t/* right: 0; */\n\t\t/* transform: translate(-50%, -50%); */\n\t\t/* background: #2f3640; */\n\t\theight: 35px;\n\t\tborder-radius: 40px;\n\t\tmargin-top: 5px;\n\t\t/* padding: 10px; */\n\t}\n\n\t.buscar-caja.isOpened {\n\t\tbackground: #2f3640;\n\t}\n\n\t/* .buscar-caja:hover > .buscar-txt, */\n\t.buscar-caja > .buscar-txt.isOpened {\n\t\twidth: 240px;\n\t\tpadding: 0 6px;\n\t}\n\n\t/* .buscar-caja:hover > .buscar-btn {\n  background: white;\n  color: black;\n} */\n\n\t.buscar-btn {\n\t\tcolor: #e84118;\n\t\tfloat: right;\n\t\twidth: 40px;\n\t\theight: 35px;\n\t\tborder-radius: 50%;\n\t\t/* background: #2f3640; */\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\ttransition: 0.4s;\n\t\tcolor: white;\n\t\tcursor: pointer;\n\t}\n\n\t.buscar-btn > i {\n\t\tfont-size: 30px;\n\t}\n\n\t.buscar-txt {\n\t\tborder: none;\n\t\tbackground: none;\n\t\toutline: none;\n\t\tfloat: left;\n\t\tpadding: 0;\n\t\tcolor: white;\n\t\tfont-size: 16px;\n\t\ttransition: 0.4s;\n\t\tline-height: 40px;\n\t\twidth: 0px;\n\t\t/* font-weight: bold; */\n\t}\n\n\t/*\n//////////////////////////////////////////////////////////\n//                VUe scroll\n//////////////////////////////////////////////////////////\n*/\n\t.vue-recycle-scroller {\n\t\tposition: relative;\n\t}\n\t.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n\t\toverflow-y: auto;\n\t}\n\t.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n\t\toverflow-x: auto;\n\t}\n\t.vue-recycle-scroller.direction-horizontal {\n\t\tdisplay: -webkit-box;\n\t\tdisplay: -ms-flexbox;\n\t\tdisplay: flex;\n\t}\n\t.vue-recycle-scroller__slot {\n\t\t-webkit-box-flex: 1;\n\t\t-ms-flex: auto 0 0px;\n\t\tflex: auto 0 0;\n\t}\n\t.vue-recycle-scroller__item-wrapper {\n\t\t-webkit-box-flex: 1;\n\t\t-ms-flex: 1;\n\t\tflex: 1;\n\t\t-webkit-box-sizing: border-box;\n\t\tbox-sizing: border-box;\n\t\toverflow: hidden;\n\t\tposition: relative;\n\t}\n\t.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twill-change: transform;\n\t}\n\n\t.vue-recycle-scroller.direction-vertical\n\t\t.vue-recycle-scroller__item-wrapper {\n\t\twidth: 100%;\n\t}\n\n\t.vue-recycle-scroller.direction-horizontal\n\t\t.vue-recycle-scroller__item-wrapper {\n\t\theight: 100%;\n\t}\n\t.vue-recycle-scroller.ready.direction-vertical\n\t\t.vue-recycle-scroller__item-view {\n\t\twidth: 100%;\n\t}\n\t.vue-recycle-scroller.ready.direction-horizontal\n\t\t.vue-recycle-scroller__item-view {\n\t\theight: 100%;\n\t}\n\t.resize-observer[data-v-b329ee4c] {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tz-index: -1;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder: none;\n\t\tbackground-color: transparent;\n\t\tpointer-events: none;\n\t\tdisplay: block;\n\t\toverflow: hidden;\n\t\topacity: 0;\n\t}\n\t.resize-observer[data-v-b329ee4c] object {\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\toverflow: hidden;\n\t\tpointer-events: none;\n\t\tz-index: -1;\n\t}\n</style>\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ARCHIVE_TICKET_RELATIONS = exports.ARCHIVE_TICKET_TIMESTAMP_ATTR_SPATIAL = exports.ARCHIVE_TICKET_TIMESTAMP_ATTR_PROCESS = exports.ARCHIVE_TICKET_RELATION_TYPE = exports.ARCHIVE_TICKET_PART_TICKET_RELATION = exports.ARCHIVE_TICKET_PART_TYPE = exports.ARCHIVE_TICKET_PART_RELATION = exports.SPATIAL_ARCHIVE_TICKET_TYPE = exports.SPATIAL_ARCHIVE_TICKET_RELATION = exports.PROCESS_ARCHIVE_TICKET_TYPE = exports.PROCESS_ARCHIVE_TICKET_RELATION = exports._TICKET_PRIORITIES = exports.LOGS_EVENTS_STEPS = exports.LOG_TYPE = exports.LOG_RELATION_NAME = exports.LOG_RELATION_TYPE = exports._DEFAULT_INCIDENTS_NAME = exports.INCIDENT_TYPE = exports.INCIDENT_RELATION_NAME = exports.INCIDENT_RELATION_TYPE = exports.INCIDENT_SECTION_RELATION_NAME = exports.INCIDENT_SECTION_TYPE = exports.INCIDENT_SECTION_RELATION_TYPE = exports._DEFAULT_STEPS = exports._ARCHIVED_STEP = exports.DEFAULT_STEPS = exports.ARCHIVED_STEP = exports.STEP_TYPE = exports.STEP_RELATION_NAME = exports.STEP_RELATION_TYPE = exports._PROCESS_TYPE = exports.PROCESS_RELATION_NAME = exports.PROCESS_RELATION_TYPE = exports.ALARM_RELATION_NAME = exports.TICKET_ATTRIBUTE_OCCURENCE_NAME = exports.TIKET_TYPE = exports.TICKET_RELATION_NAME = exports.TICKET_RELATION_TYPE = exports.TICKET_CONTEXT_SUBTYPE_LIST = exports.TICKET_CONTEXT_TYPE = exports.GEO_TYPES = void 0;\n/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\nconst OLD_CONSTANTS = require(\"./old_constants\");\n__exportStar(require(\"./old_constants\"), exports);\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nvar spinal_env_viewer_context_geographic_service_1 = require(\"spinal-env-viewer-context-geographic-service\");\nObject.defineProperty(exports, \"GEO_TYPES\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.GEOGRAPHIC_TYPES_ORDER; } });\nexports.TICKET_CONTEXT_TYPE = OLD_CONSTANTS.SERVICE_TYPE;\nexports.TICKET_CONTEXT_SUBTYPE_LIST = ['Ticket', 'Alarm'];\n/////////////////////////////////////////\n/////////////// TICKET ///////////////////\nexports.TICKET_RELATION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE; // STEP_TO_TICKET_RELATION_TYPE\nexports.TICKET_RELATION_NAME = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME; // STEP_TO_TICKET_RELATION_NAME\nexports.TIKET_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_TICKET_TYPE;\nexports.TICKET_ATTRIBUTE_OCCURENCE_NAME = 'Occurrence number';\nexports.ALARM_RELATION_NAME = 'hasAlarm';\n/////////////////////////////////////////\n/////////////// PROCESS /////////////////\nexports.PROCESS_RELATION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE; // CONTEXT_TO_PROCESS_RELATION_TYPE\nexports.PROCESS_RELATION_NAME = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME; //CONTEXT_TO_PROCESS_RELATION_NAME\nexports._PROCESS_TYPE = OLD_CONSTANTS.PROCESS_TYPE;\n//////////////////////////////////////\n/////////////// STEP /////////////////\nexports.STEP_RELATION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE; // PROCESS_TO_STEP_RELATION_TYPE\nexports.STEP_RELATION_NAME = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_STEP_RELATION_NAME; // PROCESS_TO_STEP_RELATION_NAME\nexports.STEP_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_STEP_TYPE;\nexports.ARCHIVED_STEP = OLD_CONSTANTS.ARCHIVED_STEP;\nexports.DEFAULT_STEPS = OLD_CONSTANTS.DEFAULT_STEPS;\nexports._ARCHIVED_STEP = OLD_CONSTANTS.ARCHIVED_STEP;\nexports._DEFAULT_STEPS = OLD_CONSTANTS.DEFAULT_STEPS;\n/////////////////////////////////////////\n/////////////// CATEGORY ////////////////\nexports.INCIDENT_SECTION_RELATION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_TYPE;\nexports.INCIDENT_SECTION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE;\nexports.INCIDENT_SECTION_RELATION_NAME = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME;\nexports.INCIDENT_RELATION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_TYPE;\nexports.INCIDENT_RELATION_NAME = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME;\nexports.INCIDENT_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_TYPE;\nexports._DEFAULT_INCIDENTS_NAME = OLD_CONSTANTS.DEFAULT_INCIDENTS_NAME;\nexports.LOG_RELATION_TYPE = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE;\nexports.LOG_RELATION_NAME = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_LOG_RELATION_NAME;\nexports.LOG_TYPE = OLD_CONSTANTS.SERVICE_LOG_TYPE;\nexports.LOGS_EVENTS_STEPS = OLD_CONSTANTS.LOGS_EVENTS;\nexports._TICKET_PRIORITIES = OLD_CONSTANTS.TICKET_PRIORITIES;\n/////////////////////////////////////////\n/////////////// ARCHIVE ////////////////\nexports.PROCESS_ARCHIVE_TICKET_RELATION = 'ProcessHasArchiveTicket';\nexports.PROCESS_ARCHIVE_TICKET_TYPE = 'ProcessArchiveTicket';\nexports.SPATIAL_ARCHIVE_TICKET_RELATION = 'SpatialHasArchiveTicket';\nexports.SPATIAL_ARCHIVE_TICKET_TYPE = 'SpatialArchiveTicket';\nexports.ARCHIVE_TICKET_PART_RELATION = 'ArchiveTicketHasPart';\nexports.ARCHIVE_TICKET_PART_TYPE = 'ArchiveTicketPart';\nexports.ARCHIVE_TICKET_PART_TICKET_RELATION = 'ArchiveTicketPartHasTicket';\nexports.ARCHIVE_TICKET_RELATION_TYPE = spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.ARCHIVE_TICKET_TIMESTAMP_ATTR_PROCESS = 'ProcessArchiveTimestamp';\nexports.ARCHIVE_TICKET_TIMESTAMP_ATTR_SPATIAL = 'SpatialArchiveTimestamp';\nexports.ARCHIVE_TICKET_RELATIONS = [\n    exports.SPATIAL_ARCHIVE_TICKET_RELATION,\n    exports.ARCHIVE_TICKET_PART_RELATION,\n];\n//# sourceMappingURL=Constants.js.map","/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\nimport * as OLD_CONSTANTS from './old_constants';\nexport * from './old_constants';\nimport { SPINAL_RELATION_PTR_LST_TYPE } from 'spinal-model-graph';\nexport { GEOGRAPHIC_TYPES_ORDER as GEO_TYPES } from 'spinal-env-viewer-context-geographic-service';\nimport { GEOGRAPHIC_TYPES_ORDER as GEO_TYPES } from 'spinal-env-viewer-context-geographic-service';\n\nexport const TICKET_CONTEXT_TYPE: string = OLD_CONSTANTS.SERVICE_TYPE;\nexport const TICKET_CONTEXT_SUBTYPE_LIST: Array<string> = ['Ticket', 'Alarm'];\n/////////////////////////////////////////\n/////////////// TICKET ///////////////////\nexport const TICKET_RELATION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE; // STEP_TO_TICKET_RELATION_TYPE\nexport const TICKET_RELATION_NAME: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME; // STEP_TO_TICKET_RELATION_NAME\nexport const TIKET_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_TICKET_TYPE;\nexport const TICKET_ATTRIBUTE_OCCURENCE_NAME = 'Occurrence number';\nexport const ALARM_RELATION_NAME = 'hasAlarm';\n/////////////////////////////////////////\n/////////////// PROCESS /////////////////\nexport const PROCESS_RELATION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE; // CONTEXT_TO_PROCESS_RELATION_TYPE\nexport const PROCESS_RELATION_NAME: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME; //CONTEXT_TO_PROCESS_RELATION_NAME\nexport const _PROCESS_TYPE: string = OLD_CONSTANTS.PROCESS_TYPE;\n//////////////////////////////////////\n/////////////// STEP /////////////////\nexport const STEP_RELATION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE; // PROCESS_TO_STEP_RELATION_TYPE\nexport const STEP_RELATION_NAME: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_STEP_RELATION_NAME; // PROCESS_TO_STEP_RELATION_NAME\nexport const STEP_TYPE: string = OLD_CONSTANTS.SPINAL_TICKET_SERVICE_STEP_TYPE;\n\nexport const ARCHIVED_STEP = OLD_CONSTANTS.ARCHIVED_STEP;\nexport const DEFAULT_STEPS = OLD_CONSTANTS.DEFAULT_STEPS;\nexport const _ARCHIVED_STEP = OLD_CONSTANTS.ARCHIVED_STEP;\nexport const _DEFAULT_STEPS = OLD_CONSTANTS.DEFAULT_STEPS;\n\n/////////////////////////////////////////\n/////////////// CATEGORY ////////////////\nexport const INCIDENT_SECTION_RELATION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_TYPE;\nexport const INCIDENT_SECTION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE;\nexport const INCIDENT_SECTION_RELATION_NAME: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME;\nexport const INCIDENT_RELATION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_TYPE;\nexport const INCIDENT_RELATION_NAME: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME;\nexport const INCIDENT_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_INCIDENT_TYPE;\nexport const _DEFAULT_INCIDENTS_NAME: string =\n  OLD_CONSTANTS.DEFAULT_INCIDENTS_NAME;\nexport const LOG_RELATION_TYPE: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE;\nexport const LOG_RELATION_NAME: string =\n  OLD_CONSTANTS.SPINAL_TICKET_SERVICE_LOG_RELATION_NAME;\nexport const LOG_TYPE: string = OLD_CONSTANTS.SERVICE_LOG_TYPE;\nexport const LOGS_EVENTS_STEPS = OLD_CONSTANTS.LOGS_EVENTS;\nexport const _TICKET_PRIORITIES = OLD_CONSTANTS.TICKET_PRIORITIES;\n\n/////////////////////////////////////////\n/////////////// ARCHIVE ////////////////\nexport const PROCESS_ARCHIVE_TICKET_RELATION = 'ProcessHasArchiveTicket';\nexport const PROCESS_ARCHIVE_TICKET_TYPE = 'ProcessArchiveTicket';\nexport const SPATIAL_ARCHIVE_TICKET_RELATION = 'SpatialHasArchiveTicket';\nexport const SPATIAL_ARCHIVE_TICKET_TYPE = 'SpatialArchiveTicket';\nexport const ARCHIVE_TICKET_PART_RELATION = 'ArchiveTicketHasPart';\nexport const ARCHIVE_TICKET_PART_TYPE = 'ArchiveTicketPart';\nexport const ARCHIVE_TICKET_PART_TICKET_RELATION = 'ArchiveTicketPartHasTicket';\nexport const ARCHIVE_TICKET_RELATION_TYPE = SPINAL_RELATION_PTR_LST_TYPE;\nexport const ARCHIVE_TICKET_TIMESTAMP_ATTR_PROCESS = 'ProcessArchiveTimestamp';\nexport const ARCHIVE_TICKET_TIMESTAMP_ATTR_SPATIAL = 'SpatialArchiveTimestamp';\nexport const ARCHIVE_TICKET_RELATIONS = [\n  SPATIAL_ARCHIVE_TICKET_RELATION,\n  ARCHIVE_TICKET_PART_RELATION,\n];\n","\"use strict\";\n/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TICKET_PRIORITIES = exports.LOGS_EVENTS_STRING = exports.LOGS_EVENTS_STEPS = exports.LOG_TYPE = exports.LOG_RELATION_NAME = exports.LOG_RELATION_TYPE = exports.EVENTS_TO_LOG = exports.LOGS_EVENTS = exports.SERVICE_LOG_TYPE = exports.SPINAL_TICKET_SERVICE_LOG_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE = exports.DEFAULT_INCIDENTS_NAME = exports.SPINAL_TICKET_SERVICE_INCIDENT_TYPE = exports.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE = exports.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_TYPE = exports.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_TYPE = exports.DEFAULT_STEPS = exports.ARCHIVED_STEP = exports.SPINAL_TICKET_SERVICE_STEP_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_STEP_TYPE = exports.SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE = exports.PROCESS_TYPE = exports.SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE = exports.SPINAL_TICKET_SERVICE_TICKET_TYPE = exports.SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE = exports.SERVICE_TYPE = exports.SERVICE_NAME = void 0;\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nexports.SERVICE_NAME = 'Ticket Service';\nexports.SERVICE_TYPE = 'SpinalSystemServiceTicket';\n/////////////////////////////////////////\n/////////////// TICKET ///////////////////\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME = 'SpinalSystemServiceTicketHasTicket';\nexports.SPINAL_TICKET_SERVICE_TICKET_TYPE = 'SpinalSystemServiceTicketTypeTicket';\n// export const SPINAL_TICKET_SERVICE_TICKET_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION: string = 'SpinalSystemServiceHasTicket';\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION_NAME: string = 'Tickets';\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION_RELATION_NAME: string = 'SpinalSystemServiceHasTicket';\n// export const SPINAL_TICKET_SERVICE_TICKET_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceArchiveHasTicket';\n// export const SECTION_RELATION_TYPE = SPINAL_TICKET_SERVICE_TICKET_SECTION_RELATION_TYPE;\n/**\n * New values\n */\n// export const TICKET_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE; // STEP_TO_TICKET_RELATION_TYPE\n// export const TICKET_RELATION_NAME: string = SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME; // STEP_TO_TICKET_RELATION_NAME\n// export const TIKET_TYPE: string = SPINAL_TICKET_SERVICE_TICKET_TYPE;\n/////////////////////////////////////////\n/////////////// PROCESS /////////////////\nexports.SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME = 'SpinalSystemServiceTicketHasProcess';\nexports.PROCESS_TYPE = 'SpinalServiceTicketProcess';\n// export const SPINAL_TICKET_SERVICE_PROCESS_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_PROCESS_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive_Archive_Process';\n// export const SPINAL_TICKET_SERVICE_PROCESS_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceArchiveHasProcess';\n// export const SPINAL_TICKET_SERVICE_PROCESS_TYPE: string = 'SpinalSystemServiceTicketTypeProcess';\n// export const PROCESS_HAS_TICKET_RELATION_NAME: string = 'SpinalSystemService_ProcessHasTicket';\n// export const PROCESS_HAS_TICKET_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n/**\n * New values\n */\n// export const PROCESS_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE; // CONTEXT_TO_PROCESS_RELATION_TYPE\n// export const PROCESS_RELATION_NAME: string = SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME; //CONTEXT_TO_PROCESS_RELATION_NAME\n// export const PROCESS_TYPE: string = 'SpinalServiceTicketProcess';\n//////////////////////////////////////\n/////////////// STEP /////////////////\nexports.SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_STEP_TYPE = 'SpinalSystemServiceTicketTypeStep';\nexports.SPINAL_TICKET_SERVICE_STEP_RELATION_NAME = 'SpinalSystemServiceTicketHasStep';\n// export const SPINAL_TICKET_SERVICE_STEP_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_STEP_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceArchiveHasStep';\n// export const SPINAL_TICKET_SERVICE_STEP_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive_Archive_Step';\n/**\n * New values\n */\n// export const STEP_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE; // PROCESS_TO_STEP_RELATION_TYPE\n// export const STEP_RELATION_NAME: string = SPINAL_TICKET_SERVICE_STEP_RELATION_NAME; // PROCESS_TO_STEP_RELATION_NAME\n// export const STEP_TYPE: string = SPINAL_TICKET_SERVICE_STEP_TYPE;\nexports.ARCHIVED_STEP = {\n    name: \"Archived\",\n    order: -1,\n    color: \"#FF0000\"\n};\nexports.DEFAULT_STEPS = [\n    { name: 'Déclaré', color: '#ff0019', order: 0 },\n    { name: 'Ouvert', color: '#fff112', order: 1 },\n    { name: 'Résolu', color: '#10ff1d', order: 2 },\n    exports.ARCHIVED_STEP\n];\n/////////////////////////////////////////\n/////////////// CATEGORY ////////////////\nexports.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE = 'DEFAULT_INCIDENT_TYPE';\nexports.SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME = 'Spinal_Service_Ticket_Process_has_category';\nexports.SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME = 'Spinal_Service_Ticket_Process_has_categories_section';\nexports.SPINAL_TICKET_SERVICE_INCIDENT_TYPE = 'INCIDENT_TYPE';\nexports.DEFAULT_INCIDENTS_NAME = 'Incidents commun';\n// export const SPINAL_TICKET_SERVICE_INCIDENT_SUB_SECTION_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_INCIDENT_SUB_SECTION_RELATION_NAME: string = 'Spinal_Service_Ticket_Process_has_sub_category';\n// export const DEFAULT_INCIDENT_TYPE: string = SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE;\n// export const DEFAULT_INCIDENT_RELATION_NAME: string = SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME;\n// export const fdg: string = SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME;\n/////////////////////////////////////////\n/////////////// ARCHIVE /////////////////\n// export const SPINAL_TICKET_SERVICE_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive';\n// export const SPINAL_TICKET_SERVICE_TICKET_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive_Archive_Ticket';\n// export const SPINAL_TICKET_SERVICE_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceTicketHasArchive';\n// export const SERVICE_ARCHIVE_TYPE: string = 'SpinalSystemServiceTicketArchive';\n/////////////////////////////////////////\n/////////////// LOG /////////////////\nexports.SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.SPINAL_TICKET_SERVICE_LOG_RELATION_NAME = 'SpinalSystemServiceTicketHasLog';\nexports.SERVICE_LOG_TYPE = 'SpinalSystemServiceTicketLog';\nvar LOGS_EVENTS;\n(function (LOGS_EVENTS) {\n    LOGS_EVENTS[LOGS_EVENTS[\"creation\"] = 1] = \"creation\";\n    LOGS_EVENTS[LOGS_EVENTS[\"moveToNext\"] = 2] = \"moveToNext\";\n    LOGS_EVENTS[LOGS_EVENTS[\"moveToPrevious\"] = 3] = \"moveToPrevious\";\n    LOGS_EVENTS[LOGS_EVENTS[\"archived\"] = 4] = \"archived\";\n    LOGS_EVENTS[LOGS_EVENTS[\"unarchive\"] = 5] = \"unarchive\";\n    LOGS_EVENTS[LOGS_EVENTS[\"move\"] = 6] = \"move\";\n})(LOGS_EVENTS = exports.LOGS_EVENTS || (exports.LOGS_EVENTS = {}));\nexports.EVENTS_TO_LOG = Object.freeze({\n    1: \"creation\",\n    2: \"moveToNext\",\n    3: \"moveToPrevious\",\n    4: \"archived\",\n    5: \"unarchive\",\n    6: \"move\"\n});\nexports.LOG_RELATION_TYPE = exports.SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE;\nexports.LOG_RELATION_NAME = exports.SPINAL_TICKET_SERVICE_LOG_RELATION_NAME;\nexports.LOG_TYPE = exports.SERVICE_LOG_TYPE;\nexports.LOGS_EVENTS_STEPS = LOGS_EVENTS;\nexports.LOGS_EVENTS_STRING = [\n    \"none\",\n    \"creation\",\n    \"moveToNext\",\n    \"moveToPrevious\",\n    \"archived\",\n    \"unarchive\",\n    \"move\"\n];\n/////////////////////////////////////////\n/////////////// Target /////////////////\n// export const SPINAL_TICKET_SERVICE_TARGET_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_TARGET_RELATION_NAME: string = 'SpinalSystemServiceTicketHasLocation';\n/////////////////////////////////////////\n/////////////// USER ////////////////////\n// export const USER_RELATION_NAME: string = 'userHasDeclaredTicket';\n// export const USER_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n/////////////////////////////////////////\n/////////////// ticket ////////////////////\n// tickethasReferentiel\nexports.TICKET_PRIORITIES = {\n    occasionally: 0,\n    normal: 1,\n    urgent: 2,\n};\n//# sourceMappingURL=old_constants.js.map","/*\n * Copyright 2019 SpinalCom - www.spinalcom.com\n *\n *  This file is part of SpinalCore.\n *\n *  Please read all of the following terms and conditions\n *  of the Free Software license Agreement (\"Agreement\")\n *  carefully.\n *\n *  This Agreement is a legally binding contract between\n *  the Licensee (as defined below) and SpinalCom that\n *  sets forth the terms and conditions that govern your\n *  use of the Program. By installing and/or using the\n *  Program, you agree to abide by all the terms and\n *  conditions stated or referenced herein.\n *\n *  If you do not agree to abide by these terms and\n *  conditions, do not demonstrate your acceptance and do\n *  not install or use the Program.\n *  You should have received a copy of the license along\n *  with this file. If not, see\n *  <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SPINAL_RELATION_PTR_LST_TYPE } from 'spinal-env-viewer-graph-service';\nimport { SpinalStep } from 'spinal-models-ticket/declarations/SpinalStep';\n\nexport const SERVICE_NAME: string = 'Ticket Service';\nexport const SERVICE_TYPE: string = 'SpinalSystemServiceTicket';\n\n/////////////////////////////////////////\n/////////////// TICKET ///////////////////\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME: string = 'SpinalSystemServiceTicketHasTicket';\nexport const SPINAL_TICKET_SERVICE_TICKET_TYPE: string = 'SpinalSystemServiceTicketTypeTicket';\n// export const SPINAL_TICKET_SERVICE_TICKET_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION: string = 'SpinalSystemServiceHasTicket';\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION_NAME: string = 'Tickets';\n// export const SPINAL_TICKET_SERVICE_TICKET_SECTION_RELATION_NAME: string = 'SpinalSystemServiceHasTicket';\n// export const SPINAL_TICKET_SERVICE_TICKET_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceArchiveHasTicket';\n// export const SECTION_RELATION_TYPE = SPINAL_TICKET_SERVICE_TICKET_SECTION_RELATION_TYPE;\n\n/**\n * New values\n */\n// export const TICKET_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_TICKET_RELATION_TYPE; // STEP_TO_TICKET_RELATION_TYPE\n// export const TICKET_RELATION_NAME: string = SPINAL_TICKET_SERVICE_TICKET_RELATION_NAME; // STEP_TO_TICKET_RELATION_NAME\n// export const TIKET_TYPE: string = SPINAL_TICKET_SERVICE_TICKET_TYPE;\n\n/////////////////////////////////////////\n/////////////// PROCESS /////////////////\nexport const SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME: string = 'SpinalSystemServiceTicketHasProcess';\nexport const PROCESS_TYPE: string = 'SpinalServiceTicketProcess';\n\n// export const SPINAL_TICKET_SERVICE_PROCESS_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_PROCESS_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive_Archive_Process';\n// export const SPINAL_TICKET_SERVICE_PROCESS_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceArchiveHasProcess';\n// export const SPINAL_TICKET_SERVICE_PROCESS_TYPE: string = 'SpinalSystemServiceTicketTypeProcess';\n// export const PROCESS_HAS_TICKET_RELATION_NAME: string = 'SpinalSystemService_ProcessHasTicket';\n// export const PROCESS_HAS_TICKET_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n\n/**\n * New values\n */\n// export const PROCESS_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_PROCESS_RELATION_TYPE; // CONTEXT_TO_PROCESS_RELATION_TYPE\n// export const PROCESS_RELATION_NAME: string = SPINAL_TICKET_SERVICE_PROCESS_RELATION_NAME; //CONTEXT_TO_PROCESS_RELATION_NAME\n// export const PROCESS_TYPE: string = 'SpinalServiceTicketProcess';\n\n\n//////////////////////////////////////\n/////////////// STEP /////////////////\nexport const SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_STEP_TYPE: string = 'SpinalSystemServiceTicketTypeStep';\nexport const SPINAL_TICKET_SERVICE_STEP_RELATION_NAME: string = 'SpinalSystemServiceTicketHasStep';\n// export const SPINAL_TICKET_SERVICE_STEP_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_ARCHIVE_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_STEP_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceArchiveHasStep';\n// export const SPINAL_TICKET_SERVICE_STEP_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive_Archive_Step';\n\n\n/**\n * New values\n */\n// export const STEP_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_STEP_RELATION_TYPE; // PROCESS_TO_STEP_RELATION_TYPE\n// export const STEP_RELATION_NAME: string = SPINAL_TICKET_SERVICE_STEP_RELATION_NAME; // PROCESS_TO_STEP_RELATION_NAME\n// export const STEP_TYPE: string = SPINAL_TICKET_SERVICE_STEP_TYPE;\n\n\nexport const ARCHIVED_STEP = {\n  name: \"Archived\",\n  order: -1,\n  color: \"#FF0000\"\n}\n\nexport const DEFAULT_STEPS: SpinalStep[] = [\n  { name: 'Déclaré', color: '#ff0019', order: 0 },\n  { name: 'Ouvert', color: '#fff112', order: 1 },\n  { name: 'Résolu', color: '#10ff1d', order: 2 },\n  ARCHIVED_STEP\n];\n\n\n\n/////////////////////////////////////////\n/////////////// CATEGORY ////////////////\nexport const SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_INCIDENT_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE: string = 'DEFAULT_INCIDENT_TYPE';\nexport const SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME: string = 'Spinal_Service_Ticket_Process_has_category';\nexport const SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME: string = 'Spinal_Service_Ticket_Process_has_categories_section';\nexport const SPINAL_TICKET_SERVICE_INCIDENT_TYPE: string = 'INCIDENT_TYPE';\nexport const DEFAULT_INCIDENTS_NAME: string = 'Incidents commun';\n// export const SPINAL_TICKET_SERVICE_INCIDENT_SUB_SECTION_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_INCIDENT_SUB_SECTION_RELATION_NAME: string = 'Spinal_Service_Ticket_Process_has_sub_category';\n\n\n// export const DEFAULT_INCIDENT_TYPE: string = SPINAL_TICKET_SERVICE_INCIDENT_SECTION_TYPE;\n// export const DEFAULT_INCIDENT_RELATION_NAME: string = SPINAL_TICKET_SERVICE_INCIDENT_RELATION_NAME;\n// export const fdg: string = SPINAL_TICKET_SERVICE_INCIDENT_SECTION_RELATION_NAME;\n\n/////////////////////////////////////////\n/////////////// ARCHIVE /////////////////\n// export const SPINAL_TICKET_SERVICE_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive';\n// export const SPINAL_TICKET_SERVICE_TICKET_ARCHIVE_NAME: string = 'Spinal_Service_Ticket_Archive_Archive_Ticket';\n// export const SPINAL_TICKET_SERVICE_ARCHIVE_RELATION_NAME: string = 'SpinalSystemServiceTicketHasArchive';\n// export const SERVICE_ARCHIVE_TYPE: string = 'SpinalSystemServiceTicketArchive';\n\n/////////////////////////////////////////\n/////////////// LOG /////////////////\nexport const SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\nexport const SPINAL_TICKET_SERVICE_LOG_RELATION_NAME: string = 'SpinalSystemServiceTicketHasLog';\nexport const SERVICE_LOG_TYPE: string = 'SpinalSystemServiceTicketLog';\nexport enum LOGS_EVENTS {\n  creation = 1,\n  moveToNext = 2,\n  moveToPrevious = 3,\n  archived = 4,\n  unarchive = 5,\n  move = 6\n}\n\nexport const EVENTS_TO_LOG = Object.freeze({\n  1: \"creation\",\n  2: \"moveToNext\",\n  3: \"moveToPrevious\",\n  4: \"archived\",\n  5: \"unarchive\",\n  6: \"move\"\n})\n\nexport const LOG_RELATION_TYPE: string = SPINAL_TICKET_SERVICE_LOG_RELATION_TYPE;\nexport const LOG_RELATION_NAME: string = SPINAL_TICKET_SERVICE_LOG_RELATION_NAME;\nexport const LOG_TYPE: string = SERVICE_LOG_TYPE;\nexport const LOGS_EVENTS_STEPS = LOGS_EVENTS;\n\n\nexport const LOGS_EVENTS_STRING: string[] = [\n  \"none\",\n  \"creation\",\n  \"moveToNext\",\n  \"moveToPrevious\",\n  \"archived\",\n  \"unarchive\",\n  \"move\"\n]\n\n/////////////////////////////////////////\n/////////////// Target /////////////////\n// export const SPINAL_TICKET_SERVICE_TARGET_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n// export const SPINAL_TICKET_SERVICE_TARGET_RELATION_NAME: string = 'SpinalSystemServiceTicketHasLocation';\n\n/////////////////////////////////////////\n/////////////// USER ////////////////////\n// export const USER_RELATION_NAME: string = 'userHasDeclaredTicket';\n// export const USER_RELATION_TYPE: string = SPINAL_RELATION_PTR_LST_TYPE;\n\n/////////////////////////////////////////\n/////////////// ticket ////////////////////\n// tickethasReferentiel\n\nexport const TICKET_PRIORITIES: { [key: string]: number } = {\n  occasionally: 0,\n  normal: 1,\n  urgent: 2,\n}"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-analysis.622520c8.js.map"}