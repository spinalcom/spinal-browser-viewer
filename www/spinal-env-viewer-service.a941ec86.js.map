{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A;ACAA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,U,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,MAAA,mBAAA,QAAA;AACA,MAAA,WAAA,QAAA;AACA,MAAA,YAAA,aAAA,QAAA;AACA,aAAA,QAAA,qBAAA;AAEA,QAAA,UAAe;IACb,QAAQ,SAAA;IACR;IACA,gBAAA,iBAAA;AACD;;;A;AEjCD;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S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AA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAkB;AAAA;AAClB,OAAA,eAAA,SAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAU;AAAA;AACV,OAAA,eAAA,SAAA,0BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAkB;AAAA;AAClB,OAAA,eAAA,SAAA,+BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAuB;AAAA;AACvB,OAAA,eAAA,SAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAa;AAAA;AACb,OAAA,eAAA,SAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAiB;AAAA;AACjB,OAAA,eAAA,SAAA,sBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAc;AAAA;AACd,OAAA,eAAA,SAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAa;AAAA;AACb,OAAA,eAAA,SAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAa;AAAA;AACb,OAAA,eAAA,SAAA,iBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAS;AAAA;AACT,OAAA,eAAA,SAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,+CAAA;IAAc;AAAA;;;A;AEpChB;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,U,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,O,e,S,c;I,O;A;A,Q,gB,K;AAEH,MAAA,iCAAA,aAAA,QAAA;AAEA,MAAM,eAAe;AACrB,MAAM,sBAAsB;AAwE5B,MAAa,sBAAsB,+BAAA;IAGjC,aAAA;QACE,KAAK;QACL,IAAI,CAAC,SAAS;YACZ,MAAM;gBACJ;oBACE,YAAY;oBACZ,aAAa;oBACb,WAAW;oBACX,OAAO;wBACL,UAAU;wBACV,cAAc;wBACd,eAAe;oBAChB;oBACD,aAAa;wBACX;4BAAE,KAAK;4BAAgB,OAAO;4BAAmB,OAAO;wBAAI;qBAC7D;oBACD,YAAY;wBACV;4BAAE,KAAK;4BAAgB,OAAO;4BAAoB,OAAO;wBAAI;qBAC9D;oBACD,iBAAiB;wBACf;4BAAE,KAAK;4BAAgB,OAAO;4BAAkB,OAAO;wBAAI;wBAC3D;4BAAE,KAAK;4BAAgB,OAAO;4BAAoB,OAAO;wBAAI;wBAC7D;4BACE,KAAK;4BACL,OAAO;4BACP,OAAO;wBACR;wBACD;4BAAE,KAAK;4BAAgB,OAAO;4BAAsB,OAAO;wBAAI;wBAC/D;4BAAE,KAAK;4BAAgB,OAAO;4BAAmB,OAAO;wBAAI;wBAC5D;4BAAE,KAAK;4BAAgB,OAAO;4BAAmB,OAAO;wBAAI;wBAC5D;4BAAE,KAAK;4BAAgB,OAAO;4BAAsB,OAAO;wBAAI;wBAC/D;4BAAE,KAAK;4BAAgB,OAAO;4BAAqB,OAAO;wBAAI;qBAC/D;oBACD,cAAc;oBACd,aAAa;wBACX;4BAAE,KAAK;4BAAmB,OAAO;wBAAqB;qBACvD;gBACF;aACF;QACF;IACH;IAEA,WAAW,MAAmB,EAA9B;QACE,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,QAAQ,IAAK;YACzC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;YACzB,IAAI,KAAK,WAAW,UAAU,OAAO,YAAY;gBAC/C,MAAM,YAAY,KAAK;gBACvB,MAAM,cAAc,KAAK;gBACzB,MAAM,QAAQ,KAAK;gBACnB,KAAK,IAAI;gBACT,IAAI,WAAW,KAAK,SAAS,aAAa;gBAC1C,IAAI,aAAa,KAAK,SAAS,eAAe;gBAC9C,IAAI,OAAO,KAAK,SAAS,SAAS;YACnC;QACF;IACH;IACA,UAAU,UAAkB,EAA5B;QACE,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,QAAQ,IAAK;YACzC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;YACzB,IAAI,KAAK,WAAW,UAAU,YAC5B,OAAO;QAEV;IACH;IAEA,uBAAuB,SAAiB,EAAxC;QACE,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,QAAQ,IAAK;YACzC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;YACzB,IAAI,KAAK,UAAU,UAAU,WAC3B,OAAO;QAEV;IACH;AACD;AA5ED,QAAA,gBAAA;AA8EA,+BAAA,QAAW,gBAAgB;;;A;AEjL3B;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,kB,K;AAEH,MAAA,0BAAA,QAAA;AACA,MAAA,oCAAA,QAAA;AAIA,MAAA,iDAAA,gBAAA,QAAA;AACA,MAAA,oCAAA,QAAA;AAKA,MAAa,wBAAwB,wBAAA;IAEnC,aAAA;QACE,KAAK;IACP;IAEM,OAAO,IAAY,EAAE,IAAW,EAAE,UAAyB,EAA3D;Q,O,U,I,E,K,G,K,G;YACJ,IAAI,SAAS,kCAAA,mBAAmB,WAAW;gBACzC,MAAM;gBACN,MAAM,+CAAA,QAAkB,UAAU;YACnC,GAAE,IAAI,kCAAA,gBAAgB;YACvB,MAAM,IAAI,CAAC,aAAa,kCAAA,mBAAmB,YAAY,SAAS;YAChE,OAAO,kCAAA,mBAAmB,QAAQ;QACpC;IAAC;IAEK,WAAW,IAAI,EAAf;Q,O,U,I,E,K,G,K,G;YACJ,IAAI,UAAU,MAAM,KAAK;YACzB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAK;gBACvC,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,KAAK,UAAU,+CAAA,QAAkB,UAAU,cAC7D,OAAO,OAAO,CAAC,EAAE;YACpB;YACD,OAAO;QACT;IAAC;IAED,OAAO,QAAgB,EAAE,IAAiC,EAA1D;QACE,OAAO;IACT;AAED;AA5BD,QAAA,kBAAA;;;A;AEnCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AAGH,MAAA,oCAAA,QAAA;AAOA,MAAA,yBAAA,QAAA;AAEA,MAAA,mDAAA,QAAA;AAOA,MAAA,iDAAA,gBAAA,QAAA;AAGA,MAAM,iBAAiB,IAAI,uBAAA;AAE3B,MAAsB;IAGpB,aAAA;QACE,IAAI,CAAC,uBAAuB,IAAI,uBAAA;IAClC;IA0BA;;;;;;;KAOG,GACG,SACJ,SAAiB,EACjB,QAAgB,EAChB,OAAe,EACf,YAAoB,EACpB,YAAoB,EALhB;Q,O,U,I,E,K,G,K,G;YAOJ,MAAM,cAA+B,MAAM,kCAAA,mBAAmB,YAC5D,UACA;gBAAC;aAAa;YAEhB,IAAI,OAAO,gBAAgB,aACzB,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,QAAQ,IAAK;gBAC3C,MAAM,UAAU,WAAW,CAAC,EAAE;gBAC9B,IAAI,QAAQ,GAAG,UAAU,SAAS,OAAO;YAC1C;YACH,OAAO,kCAAA,mBAAmB,kBACxB,UACA,SACA,WACA,cACA,cACA,KAAK,CAAC,OAAS,kCAAA,mBAAmB,QAAQ,KAAK,KAAK,GAAG;QAC3D;IAAC;IAED;;;;KAIG,GACG,OAAO,QAAgB,EAAvB;Q,O,U,I,E,K,G,K,G;YACJ,MAAM,WA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,K,G;YACZ,MAAM,WAAW,MAAM,kCAAA,mBACpB,YAAY,IAAI,CAAC,WAAW;gBAAC,QAAA;aAAiC;YACjE,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,QAAQ,IAAK;gBACxC,IAAI,QAAQ,CAAC,EAAE,CAAC,KAAK,UAAU,QAAA,yBAC7B,OAAO,QAAQ,CAAC,EAAE;YAErB;YACD,MAAM,cAAc,kCAAA,mBAAmB,WAAW;gBAAE,MAAM,QAAA;YAAuB,GAAI;YACrF,MAAM,YAAY,IAAI,CAAC,QAAQ,KAAK,GAAG;YACvC,MAAM,kCAAA,mBAAmB,kBAAkB,WAAW,aAAa,WAAW,QAAA,kCAAkC,kCAAA;YAChH,OAAO,kCAAA,mBAAmB,QAAQ;QACpC;IAAC;IAEO,OAAa,aAAb;Q,O,U,I,E,K,G,K,G;YACN,IAAI,UAAU,kCAAA,mBAAmB,WAAW,QAAA;YAC5C,IAAI,OAAO,YAAY,aACrB,UAAU,MAAM,qBAAqB;YAEvC,OAAO;QACT;IAAC;IAEO,OAAa,gBAAb;Q,O,U,I,E,K,G,K,G;YACN,OAAO,MAAM,kCAAA,mBAAmB,WAAW,QAAA,cAAc,gBAAgB;QAC3E;IAAC;AACF;AA1DD,QAAA,uBAAA;;;A;AEtCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,e,K;AAEH,MAAA,0BAAA,QAAA;AACA,MAAA,oCAAA,QAAA;AAIA,MAAA,iDAAA,gBAAA,QAAA;AACA,MAAA,oCAAA,QAAA;AAKA,MAAa,qBAAqB,wBAAA;IAEhC,aAAA;QACE,KAAK;IACP;IAEM,OAAO,IAAY,EAAE,IAAW,EAAE,UAAyB,EAA3D;Q,O,U,I,E,K,G,K,G;YACJ,MAAM,SAAS,kCAAA,mBAAmB,WAAW;gBAC3C,MAAM;gBACN,MAAM,+CAAA,QAAkB,UAAU;YACnC,GAAE,IAAI,kCAAA,gBAAgB;YAEvB,MAAM,IAAI,CAAC,aAAa,kCAAA,mBAAmB,YAAY,SAAS;YAChE,OAAO,kCAAA,mBAAmB,QAAQ;QAEpC;IAAC;IAEK,WAAW,IAAI,EAAf;Q,O,U,I,E,K,G,K,G;YACJ,IAAI,UAAU,MAAM,KAAK;YACzB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAK;gBACvC,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,KAAK,UAAU,+CAAA,QAAkB,UAAU,eAC7D,OAAO,OAAO,CAAC,EAAE;YACpB;YACD,OAAO;QACT;IAAC;IAED,OAAO,QAAgB,EAAE,IAAiC,EAA1D;QACE,OAAO;IACT;AAED;AA9BD,QAAA,eAAA;;;A;AEnCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,c,K;AAEH,MAAA,0BAAA,QAAA;AACA,MAAA,oCAAA,QAAA;AAKA,MAAA,oCAAA,QAAA;AAGA,MAAA,iDAAA,gBAAA,QAAA;AAIA,MAAa,oBAAoB,wBAAA;IAE/B,aAAA;QACE,KAAK;IACP;IAEM,OAAO,IAAY,EAAE,IAAW,EAAE,UAAyB,EAA3D;Q,O,U,I,E,K,G,K,G;YAEJ,MAAM,SAAS,kCAAA,mBAAmB,WAAW;gBAC3C,MAAM;gBACN,MAAM,+CAAA,QAAkB,UAAU;YACnC,GAAE,IAAI,kCAAA,gBAAgB;YAEvB,MAAM,IAAI,CAAC,aAAa,kCAAA,mBAAmB,YAAY,SAAS;YAChE,OAAO,kCAAA,mBAAmB,QAAQ;QACpC;IAAC;IAGK,WAAW,IAAI,EAAf;Q,O,U,I,E,K,G,K,G;YACJ,IAAI,UAAU,MAAM,KAAK;YACzB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAK;gBACvC,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,KAAK,UAAU,+CAAA,QAAkB,UAAU,YAC7D,OAAO,OAAO,CAAC,EAAE;YACpB;YACD,OAAO;QACT;IAAC;IAED,OAAO,QAAgB,EAAE,IAAgB,EAAzC;QACE,OAAO;IACT;AAED;AA/BD,QAAA,cAAA;;;A;AErCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,e,K;AAGH,SAAsB,aACpB,QAA+B,EAC/B,YAAY,EAAE,EACd,gBAAyD;I,O,U,I,E,K,G,K,G;QAEzD,IAAI,QAAQ;QACZ,MAAM,SAAS,EAAE;QACjB,MAAO,QAAQ,SAAS,OAAQ;YAC9B,IAAI,WAAW,QAAQ;YACvB,IAAI,SAAS,UAAU,UAAU,WAAW,SAAS;YACrD,MAAM,QAAQ,SAAS,MAAM,OAAO;YACpC,MAAM,UAAU,MAAM,QAAQ,IAC5B,MAAM,IAAI,CAAC,IAAuC;YAEpD,IAAI,kBAAkB,iBAAiB,UAAU,SAAS;YAC1D,OAAO,QAAQ;YACf,QAAQ;QACT;QACD,OAAO;IACT;AAAC;AAnBD,QAAA,eAAA;;;A;AEzBA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AE9BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,oBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AElCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,oB,K;AAmCH,IAAY;AAAZ,CAAA,SAAY,iBAAiB;IAC3B,iBAAA,CAAA,iBAAA,CAAA,OAAA,GAAA,EAAA,GAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,EAAA,GAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,EAAA,GAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,aAAA,GAAA,EAAA,GAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,aAAA,GAAA,GAAA,GAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,iBAAA,GAAA,GAAA,GAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,GAAA,GAAA;AACF,CAAA,EARY,oBAAA,QAAA,qBAAA,CAAA,QAAA,oBAAiB,CAAA,CAAA;;;A;AEzD7B;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;;;A;AEtBH;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AE/BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,c,K;AAgBH,SAAS,UACP,MAA8B,EAC9B,IAAY,EACZ,SAAS,CAAA,CAAE;IAEX,OAAO,IAAI,QAAe,CAAC,SAAS;QAClC,IAAI,IAAI;QACR,8DAA8D;QAC9D,MAAM,KAA2B,CAAC;YAChC,IAAI,KAAK,EAAE,MAAM,OAAO,EAAE,IAAI;gBAC5B,OAAO,oBAAoB,SAAS,QAAQ,uBAAuB;gBACnE,QAAQ;YACT;QACH;QACA,OAAO,iBAAiB,SAAS,QAAQ,uBAAuB;QAChE,8DAA8D;QAC9D,IAAI,MAAW,OAAO;QACtB,IAAI,CAAC,OAAO,SAAS,MAAM,OAAO;QAClC,IAAI,KACF,QACA,MACA,QACA,CAAC;YACC,IAAI;QACN,GACA;IAEJ;AACF;AAEA,SAAsB,YACpB,OAAmB,EACnB,MAA8B;I,O,U,I,E,K,G,K,G;QAE9B,MAAM,YAAY,QAAQ,KAAK,GAAG;QAClC,MAAM,iBAAuB,MAAM,OAAO,OAAO,kBAAkB,OACjE,QAAQ,SACR,WACA,QAAQ,KAAK,KAAK;QAEpB,MAAM,OAAO,OAAO,SAAS,SAAS,eAAe;QACrD,MAAM,IAAI,MAAM,UAAU,QAAQ,MAAM,CAAA;QACxC,OAAO,OAAO,iBAAiB,SAC7B,WACA,GACA,eAAe,SACf,MACA,QAAQ,KAAK,KAAK;QAEpB,OAAO;IACT;AAAC;AApBD,QAAA,cAAA;;;A;AEpEA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,a,K;AAEH,MAAA,uBAAA,QAAA;AAMA,MAAA,kBAAA,QAAA;AAEA,SAAsB,WAAW,KAAkB;I,O,U,I,E,K,G,K,G;QACjD,IAAI,gBAAgB,MAAM,MAAM,WAAW;QAC3C,IAAI,OAAO,kBAAkB,aAAa;YACxC,gBAAgB,IAAI,qBAAA,cAClB,WACA,wBACA;YAEF,MAAM,WAAW;QAClB;QACD,MAAM,WAAW,MAAM,cAAc,YAAY;YAAC;SAAY;QAE9D,IAAI;QACJ,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,QAAQ,IACnC,IAAI,QAAQ,CAAC,EAAE,CAAC,KAAK,KAAK,UAAU,iBAAiB;YACnD,SAAS,QAAQ,CAAC,EAAE;YACpB;QACD;QAGH,IAAI,OAAO,WAAW,aAAa;YACjC,wBAAwB;YACxB,SAAS,IAAI,qBAAA,WACX,kBACA,iBACA,IAAI,gBAAA;YAGN,MAAM,cAAc,SAClB,QACA,aACA,qBAAA;QAEH;QACD,OAAO,OAAO,QAAQ;IACxB;AAAC;AAnCD,QAAA,aAAA;;;A;AEhCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,sB,K;AAOH,MAAA,sBAAA,QAAA;AACA,MAAA,aAAA,QAAA;AACA,MAAA,mDAAA,QAAA;AACA,MAAA,4BAAA,QAAA;AACA,MAAA,sBAAA,QAAA;AACA,MAAA,wBAAA,QAAA;AACA,MAAA,oBAAA,QAAA;AACA,MAAA,qBAAA,QAAA;AAEA,SAAe,YAAY,IAAgB;I,O,U,I,E,K,G,K,G;QACzC,MAAM,eAAe;QACrB,MAAM,QAAQ;QACd,IAAI,WAAW,MAAM,iDAAA,iBAAiB,kBAAkB,MAAM;QAC9D,IAAI,CAAC,UA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,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAEH,MAAA,0BAAA,QAAA;AACA,MAAA,gBAAA,QAAA;AACA,MAAA,cAAA,QAAA;AAEA,SAAsB,qBAAqB,SAAiB;I,O,U,I,E,K,G,K,G;QAC1D,MAAM,SAAS,AAAA,CAAA,GAAA,YAAA,SAAA;QACf,MAAM,UAAU,MAAM,AAAA,CAAA,GAAA,wBAAA,qBAAA,EAAsB;QAC5C,OAAO,AAAA,CAAA,GAAA,cAAA,WAAA,EAAY,SAAS;IAC9B;AAAC;AAJD,QAAA,uBAAA;;;A;AE5BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,U,A,I,I,I,C,W,S,C;I,O,I,Y,U,C,I,C,I,G,I,A,I,I,Q;A;A,I,mB,A,I,I,I,C,oB,S,O,E,U,E,S;I,I,C,O,e,M,I,U;I,I,I,U,M,S,c,E,G,G,I,E;I,O,I,C,G,K,S,K,U,K,W,C,C,O,c,G;Q,O,I;I,G;I,S,K,C;Q,I,C,C,E,E,C,C,E,G,S,C;Y,O,I,Q,S,C,E,C;gB,E,K;oB;oB;oB;oB;iB,I,K,O,G;Y;Q;I;I,S,O,C,E,C;Q,I;Y,K,C,C,E,C;Q,E,O,G;Y,O,C,C,E,C,E,E;Q;I;I,S,K,C;Q,E,iB,U,Q,Q,E,M,G,K,S,U,O,C,C,E,C,E,E;I;I,S,Q,K;Q,O,Q;I;I,S,O,K;Q,O,S;I;I,S,O,C,E,C;Q,I,E,I,E,S,E,Q,O,C,C,E,C,E,E,C,C,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AAEH,MAAA,uBAAA,QAAA;AACA,MAAA,iBAAA,QAAA;AAEA,IAAI,0BAAqE;AAEzE,SAAsB,sBACpB,SAAiB;I,O,U,I,E,K,G,K,G;QAEjB,I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Q;gBACV,GAAG;gBACH;YACD;YACD,QAAQ;QACV,GAAG;IACL;AACF;AA5BA,QAAA,aAAA;;;A;AExBA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,sB,K;AAEH,SAAgB,oBACd,OAAiB,EACjB,KAA6B;IAE7B,MAAM,WAAW,MAAM;IACvB,MAAM,WAAW,IAAI,OAAO,MAAM;IAClC,MAAM,WAAW,IAAI,OAAO,MAAM;IAClC,QAAQ,QAAQ,SAAU,MAAM;QAC9B,SAAS,eAAe,QAAQ;QAChC,SAAS,MAAM;IACjB;IACA,OAAO;AACT;AAZA,QAAA,sBAAA;;;A;AExBA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AEpCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AElCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,W,K;AAGH,MAAA,eAAA,QAAA;AACA,MAAA,gBAAA,QAAA;AAGA,MAAA,sBAAA,gBAAA,QAAA;AAGA,SAAsB,SACpB,KAAkB,EAClB,UAAkB,EAClB,OAAmB,EACnB,MAA8B;I,O,U,I,E,K,G,K,G;QAE9B,sBAAsB;QACtB,MAAM,cAAc,MAAM,AAAA,CAAA,GAAA,aAAA,UAAA,EAAW;QACrC,MAAM,SAAS,YAAY,UAAU;QACrC,eAAe;QACf,MAAM,QAAQ,MAAM,AAAA,CAAA,GAAA,cAAA,WAAA,EAAY,SAAS;QACzC,YAAY;QACZ,MAAM,MAAM,AAAA,CAAA,GAAA,oBAAA,OAAA,EAAkB,OAAO;QACrC,MAAM,aAAwB,MAAM,MACjC,eACD,6DAA6D;QAC7D,aAAa;SACZ,oBAAoB;QACvB,OAAO;IACT;AAAC;AAnBD,QAAA,WAAA;;;A;AEhCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,a,K;AAEH,MAAA,cAAA,QAAA;AAEA,SAAgB,WAAW,gBAAwB;IACjD,IAAI,mBAAmB,YAAA,kBAAkB,QACvC,OAAO,YAAA,kBAAkB;IAC3B,IAAI,mBAAmB,YAAA,kBAAkB,QACvC,OAAO,YAAA,kBAAkB;IAC3B,IAAI,mBAAmB,YAAA,kBAAkB,QACvC,OAAO,YAAA,kBAAkB;IAC3B,OAAO,YAAA,kBAAkB;AAC3B;AARA,QAAA,aAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,uB,K;AAIH,SAAgB,qBAAqB,QAAmB,EAAE,QAAgB;IACxE,KAAK,MAAM,QAAQ,SAAS,WAAY;QACtC,IAAI,KAAK,SAAS,UAAU,OAAO,KAAK;IACzC;AACH;AAJA,QAAA,uBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,e,K;AAIH,SAAgB,aACd,QAAqB,EACrB,EAAmB,EACnB,QAAiB;IAEjB,IAAI,UACF,OAAO,SAAS,KAAK,CAAC,MAAQ,IAAI,OAAO,YAAY,IAAI,OAAO;IAClE,OAAO,SAAS,KAAK,CAAC,MAAQ,IAAI,OAAO;AAC3C;AARA,QAAA,eAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,yB,K;AAEH,MAAA,4BAAA,QAAA;AAGA,SAAgB,uBAAuB,SAAmB;IACxD,OAAO,UAAU,IAAI,CAAC;Q,I,I;QACpB,OAAO,AAAA,CAAA,KAAA,AAAA,CAAA,KAAa,0BAAA,WAAW,QAAQ,CAAC,OAAQ,AAAF,MAAE,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,IAAA,MAAI,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,GAAG;IAC7D;AACF;AAJA,QAAA,yBAAA;;;A;AE3BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,a,K;AAIH,MAAA,mDAAA,QAAA;AACA,MAAA,4BAAA,QAAA;AAEA,SAAsB,WACpB,IAAgB,EAChB,KAAoB;I,O,U,I,E,K,G,K,G;QAEpB,IAAI,CAAC,SAAU,SAAS,MAAM,WAAW,GAAI,QAAQ,4BAA4B;QACjF,IAAI,MAAM,MAAM,iDAAA,iBAAiB,kBAAkB,MAAM;QACzD,IAAI,CAAC,KACH,MAAM,MAAM,iDAAA,iBAAiB,qBAAqB,MAAM;QAE1D,MAAM,gBAAgB,MAAM,iDAAA,iBAAiB,wBAC3C,MACA;QAEF,KAAK,MAAM,QAAQ,MAAO;YACxB,MAAM,eAAe,cAAc,KACjC,CAAC,MAAQ,IAAI,MAAM,UAAU,KAAK;YAEpC,IAAI,cAAc;gBAChB,IAAI;oBACF,IAAI,aAAa,iBAAiB,0BAAA,KAChC,aAAa,SAAS,SAAS,KAAK;yBAEpC,aAAa,MAAM,IAAI,KAAK;gBAE/B,EAAC,OAAO,OAAO;oBACd,QAAQ,MAAM;oBACd,QAAQ,IAAI,OAAO,MAAM;wBACvB,OAAO,aAAa;wBACpB,OAAO,KAAK;oBACb;gBACF;gBACD,IAAI,KAAK,MAAM,aAAa,KAAK,IAAI,KAAK;YAC3C,OACC,iDAAA,iBAAiB,uBACf,MACA,KACA,KAAK,OACL,KAAK,MAAM,YACX,IACA,KAAK;QAGV;IACH;AAAC;AA3CD,QAAA,aAAA;;;A;AE7BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,kB,K;AAIH,SAAgB,gBACd,IAAgB,EAChB,GAAW,EACX,KAAsB;IAEtB,IAAI;QACF,IAAI,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,aAC5B,KAAK,KAAK,SAAS,KAAK;aAExB,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI;IAEtB,EAAC,OAAO,KAAK;QACZ,QAAQ,MAAM;QACd,QAAQ,IAAI,OAAO,MAAM;YAAE;YAAK;QAAK;IACtC;AACH;AAfA,QAAA,kBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,a,K;AAIH,MAAA,oBAAA,QAAA;AAEA,SAAgB,WAAW,IAAgB,EAAE,IAAiB;IAC5D,IAAK,MAAM,OAAO,KAChB,IAAI,OAAO,UAAU,eAAe,KAAK,MAAM,MAAM;QACnD,MAAM,QAAQ,IAAI,CAAC,IAAI;QACvB,CAAA,GAAA,kBAAA,eAAA,EAAgB,MAAM,KAAK;IAC5B;AAEL;AAPA,QAAA,aAAA;;;A;AE5BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,U,A,I,I,I,C,W,S,C;I,O,I,Y,U,C,I,C,I,G,I,A,I,I,Q;A;A,I,mB,A,I,I,I,C,oB,S,O,E,U,E,S;I,I,C,O,e,M,I,U;I,I,I,U,M,S,c,E,G,G,I,E;I,O,I,C,G,K,S,K,U,K,W,C,C,O,c,G;Q,O,I;I,G;I,S,K,C;Q,I,C,C,E,E,C,C,E,G,S,C;Y,O,I,Q,S,C,E,C;gB,E,K;oB;oB;oB;oB;iB,I,K,O,G;Y;Q;I;I,S,O,C,E,C;Q,I;Y,K,C,C,E,C;Q,E,O,G;Y,O,C,C,E,C,E,E;Q;I;I,S,K,C;Q,E,iB,U,Q,Q,E,M,G,K,S,U,O,C,C,E,C,E,E;I;I,S,Q,K;Q,O,Q;I;I,S,O,K;Q,O,S;I;I,S,O,C,E,C;Q,I,E,I,E,S,E,Q,O,C,C,E,C,E,E,C,C,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,2B,K;AAEH,MAAA,uBAAA,QAAA;AACA,MAAA,uBAAA,QAAA;AACA,MAAA,0BAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAEA,MAAM,qBAAqB,IAAI;AAI/B,SAAsB,yBACpB,SAAiB,EACjB,WAAW,KAAK;I,O,U,I,E,K,G,K,G;QAEhB,MAAM,UAAU,MAAM,AAAA,CAAA,GAAA,wBAAA,qBAAA,EAAsB;QAC5C,MAAM,cAAc,MAAM,QAAQ,YAAY,WAAA;QAC9C,IAAI,YAAY,SAAS,GACvB,OAAO,WAAW,CAAC,EAAE;QAEvB,IAAI,aAAa,MAAM;YACrB,IAAI,KAAK,mBAAmB,IAAI;YAChC,IAAI,CAAC,IAAI;gBACP,KAAK,kBAAkB;gBACvB,mBAAmB,IAAI,WAAW;YACnC;YACD,OAAO,AAAC,CAAA,MAAM,GAAG,MAAI,EAAI;QAC1B;IACH;AAAC;AAjBD,QAAA,2BAAA;AAmBA,SAAgB,kBACd,OAAmB;I,O,iB,I,E,W,U;QAEnB,MAAM,aAAa,IAAI,qBAAA,WAAW,cAAc;QAChD,MAAA,QAAM,QAAQ,SACZ,YACA,WAAA,0BACA,qBAAA;QAEF,MAAO,KACL,MAAA,MAAA,QAAM;IAEV;AAAC;;;A;AEhED;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,2B,Q,wB,Q,6B,Q,sB,Q,sB,Q,kB,Q,0B,Q,0B,Q,wC,Q,sC,Q,sB,Q,6B,Q,yB,Q,yB,Q,kC,Q,6B,Q,yB,K;AAEU,QAAA,yBAAyB;AACzB,QAAA,6BAA6B;AAC1C,IAAA,uBAAA,QAAA;AAAS,OAAA,eAAA,SAAA,mCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,qBAAA;IAA4B;AAAA;AAExB,QAAA,yBAAyB;AACzB,QAAA,yBAAyB;AACzB,QAAA,6BAA6B;AAC7B,QAAA,sBAAsB;AAEtB,QAAA,sCACX;AACW,QAAA,wCACX;AAEW,QAAA,0BAA0B;AAC1B,QAAA,0BAA0B;AAC1B,QAAA,kBAAkB;AAClB,QAAA,sBAAsB;AACtB,QAAA,sBAAsB;AACtB,QAAA,6BAA6B;AAE7B,QAAA,wBAAwB;AAExB,QAAA,2BAA2B;;;A;AE/CxC;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,O,K;AAEH,SAAgB;IACd,OAAO,CAAA,EAAG,KAAI,CAAA,EAAI,KAAI,CAAA,EAAI,KAAI,CAAA,EAAI,KAAK,MAAM,SAAS,IAAG,CAAE;AAC7D;AAFA,QAAA,OAAA;AAIA,SAAS;IACP,OAAO,KAAK,MAAM,AAAC,CAAA,IAAI,KAAK,QAAM,IAAM,SACrC,SAAS,IACT,UAAU;AACf;;;A;AEhCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,oBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AEvCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,oB,K;AAGH,MAAA,sBAAA,QAAA;AACA,MAAA,qBAAA,QAAA;AAEA,SAAsB,kBACpB,OAAoB,EACpB,MAAiC;I,O,U,I,E,K,G,K,G;QAEjC,MAAM,OAAO,EAAE;QACf,KAAK,MAAM,QAAQ,QAAQ,WACzB,IAAI,OAAO,KAAK,UAAU,eAAe,OAAO,KAAK,SAAS,aAAa;YACzE,MAAM,QAAQ,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB,KAAK;YACrC,KAAK,KACH,AAAA,CAAA,GAAA,mBAAA,gBAAA,EAAiB,KAAK,MAAM,OAAO,QAAQ,KACzC,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE;gBACpB,KAAK,cAAc;gBACnB,KAAK,OAAO;YACd;QAGL;QAEH,MAAM,QAAQ,IAAI;IACpB;AAAC;AAnBD,QAAA,oBAAA;;;A;AE5BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,oB,K;AAIH,SAAgB,kBAAkB,OAAe;IAC/C,MAAM,0BAOF,OAAO,OAAO,iBAAiB;IACnC,IAAK,MAAM,aAAa,wBACtB,IACE,OAAO,UAAU,eAAe,KAAK,yBAAyB,YAC9D;QACA,MAAM,MAAM,uBAAuB,CAAC,UAAU;QAC9C,IAAI,IAAI,YAAY,SAClB,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,IAAI,WAAY;YACtC,IAAI,MAAM,OAAO,SAAS,OAAO;QAClC;IAEJ;AAEL;AArBA,QAAA,oBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,mB,K;AAEH,MAAA,eAAA,QAAA;AACA,MAAA,gCAAA,QAAA;AAEA,SAAsB,iBACpB,IAAY,EACZ,KAA6B,EAC7B,MAAiC;I,O,U,I,E,K,G,K,G;QAEjC,MAAM,MAAM,MAAM,AAAA,CAAA,GAAA,aAAA,UAAA,EAAW,MAAM;QACnC,MAAM,cAA6B,OAAO,KAAK,eAC7C,OACA,GAAG,CAAC,EAAE,EACN;QACF,MAAM,OAAO,AAAA,CAAA,GAAA,8BAAA,2BAAA,EAA4B,KAAK;QAC9C,OAAO;YAAE,aAAa,YAAY;YAAS;QAAI;IACjD;AAAC;AAZD,QAAA,mBAAA;;;A;AE3BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,8B,K;AAEH,SAAgB,4BACd,OAAiB,EA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9D;QACA,MAAM,MAAM,uBAAuB,CAAC,UAAU;QAC9C,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,IAAI,WAC1B,OAAO;IAEV;AACH;AAnBA,QAAA,4BAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,iB,K;AAIH,SAAgB,eACd,IAAgB,EAChB,MAAkB,EAClB,WAA0B;IAE1B,MAAM,gBAAgB,IAAI,MAAM;IAChC,MAAM,QAAQ,IAAI,MAAM,QAAQ,KAAK,GAAG,KAAK,GAAG,KAAK;IACrD,MAAM,UAAU,IAAI,MAAM,QAAQ,OAAO,GAAG,OAAO,GAAG,OAAO;IAC7D,cAAc,WAAW;IACzB,MAAM,aAAa;IACnB,MAAM,IAAI;IACV,MAAM,aAAa;IACnB,OAAO;AACT;AAbA,QAAA,iBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,0B,K;AAGH,MAAA,sBAAA,QAAA;AACA,MAAA,oBAAA,QAAA;AAEA,SAAsB,wBACpB,QAAkB,EAClB,KAA6B;I,O,U,I,E,K,G,K,G;QAE7B,MAAM,OAAO,MAAM;QACnB,IAAI,WAAW,KAAK,WAAW;QAC/B,IAAI;QACJ,KAAK,MAAM,YAAY,SAAU;YAC/B,MAAM,eAAe,AAAA,CAAA,GAAA,kBAAA,eAAA,EAAgB,MAAM;YAC3C,MAAM,gBAAgB,MAAM,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB,OAAO;YACrD,YAAY,cAAc,KAAK,CAAC,MAAQ,IAAI,SAAS;YACrD,IAAI,CAAC,WAAW,OAAO;YACvB,WAAW,UAAU;QACtB;QACD,OAAO,YAAY,YAAY;IACjC;AAAC;AAfD,QAAA,0BAAA;;;A;AE5BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,c,K;AAEH,MAAA,sBAAA,QAAA;AAEA,SAAsB,YACpB,IAAY,EACZ,KAA6B;I,O,U,I,E,K,G,K,G;QAE7B,MAAM,MAAgB,EAAE;QACxB,MAAM,OAAO,MAAM;QACnB,MAAM,SAAS,KAAK,WAAW;QAC/B,IAAI,cAAc;QAClB,MAAO,eAAe,OAAQ;YAC5B,MAAM,QAAQ,MAAM,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB,OAAO;gBAAC;aAAY,EAAE;gBAC1D,YAAY;oBAAC;oBAAQ;oBAAc;iBAAS;YAC7C;YACD,MAAM,OAAO,KAAK,CAAC,EAAE;YACrB,IAAI,KAAK,KAAK;YACd,MAAM,IAAI,KAAK,WAAW,KAAK,CAAC,IAAM,EAAE,kBAAkB;YAC1D,IAAI,CAAC,GAAG,OAAO;YACf,cAAc,SAAS,EAAE;QAC1B;QACD,OAAO,IAAI;IACb;AAAC;AAnBD,QAAA,cAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,oB,K;AAEH,MAAA,oBAAA,QAAA;AAEA,SAAgB,kBAAkB,IAAa;IAC7C,OAAO,gBAAgB,kBAAA;AACzB;AAFA,QAAA,oBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,kB,K;AAKH,MAAA,sBAAA,QAAA;AACA,MAAA,sBAAA,QAAA;AAGA,MAAa;IASX,YAAY,IAAY,CAAxB;QAPA,IAAA,CAAA,SAA4B;YAAE,GAAG;YAAG,GAAG;YAAG,GAAG;QAAC;QAC9C,IAAA,CAAA,MAAM,CAAA,EAAG,KAAK,MAAK,CAAA,EAAI,KAAK,MAAM,KAAK,WAAW,OAAM,CAAA,EAAI,KAAK,MAC/D,KAAK,WAAW,OACjB,CAAE;QACH,IAAA,CAAA,OAA+B,EAAE;QACjC,IAAA,CAAA,eAAuC,EAAE;QAGvC,IAAI,CAAC,OAAO;IACd;IAEM,qBAAqB,MAAiC,EAAtD;Q,O,U,I,E,K,G,K,G;YACJ,OAAO,sBACL,CAAC,OAA+B;gBAC9B,MAAM,QAAQ,IAAI,CAAC,KAAK,KAAK,CAAC;oBAC5B,OAAO,GAAG,YAAY,MAAM;gBAC9B;gBACA,IAAI,OAAO,UAAU,aACnB;oBAAA,IAAI,CAAC,MAAM,UAAU,SAAS,OAC5B,MAAM,UAAU,KAAK;gBACtB,OAED,IAAI,CAAC,KAAK,KAAK;oBACb,SAAS,MAAM;oBACf,WAAW;wBAAC;qBAAK;gBAClB;YAEL;YAEF,MAAM,IAAI,CAAC;QACb;IAAC;IAEK,iBAAA;Q,O,U,I,E,K,G,K,G;YACJ,MAAM,QAA8B,EAAE;YACtC,KAAK,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,IAAI,CAAC,KAAM;gBAC9C,IAAI,UAAU,WAAW,GAAG;gBAC5B,MAAM,KAAK,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB,SAAS;YACvC;YACD,MAAM,SAAS,MAAM,QAAQ,IAAI;YACjC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,OAAO,CAAC;gBAC5B,OAAO,IAAI,UAAU,WAAW;YAClC;YACA,IAAI,CAAC,eAAe,EAAE;YACtB,KAAK,MAAM,OAAO,OAChB,KAAK,MAAM,QAAQ,IAAK;gBACtB,OAAO,OAAO,MAAM;oBAClB,KAAK,CAAA,EAAG,KAAK,MAAK,CAAA,EAAI,KAAK,MAAM,KAAK,WAAW,OAAM,CAAA,EAAI,KAAK,MAC9D,KAAK,WAAW,OACjB,CAAE;gBACJ;gBACD,IAAI,CAAC,aAAa,KAA2B;YAC9C;QAEL;IAAC;IAED,WAAW,IAAuC,EAAlD;QACE,KAAK,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,IAAI,CAAC,KACxC,IAAI,YAAY,KAAK,SAAS;YAC5B,MAAM,MAAM,UAAU,QAAQ,KAAK;YACnC,IAAI,QAAQ,IAAI;gBACd,UAAU,OAAO,KAAK;gBACtB,OAAO,IAAI,CAAC;YACb;YACD,OAAO,QAAQ;QAChB;QAEH,OAAO,QAAQ;IACjB;IAEA,WACE,IAAuC,EACvC,MAAiC,EAFnC;QAIE,KAAK,MAAM,EAAE,OAAO,EAAE,IAAI,IAAI,CAAC,KAC7B,IAAI,YAAY,KAAK,SAAS;YAC5B,MAAM,QAAQ,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB;YAChC,OAAO,OAAO,OAAO;gBAAC,KAAK;aAAK,EAAE;QACnC;IAEL;IACA,UAAU,MAAiC,EAA3C;QACE,OAAO;QACP,KAAK,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,IAAI,CAAC,KAAM;YAC9C,MAAM,QAAQ,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB;YAChC,8DAA8D;YACxD,MAAO,SAAS,aAAa,WAAW;QAC/C;IACH;AACD;AA1FD,QAAA,kBAAA;;;A;AE/BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,oB,K;AAKH,SAAgB,kBAAkB,GAAsB;IACtD,MAAM,QAAQ,AAAC,IAAI,IAAI,KAAK,KAAM;IAClC,MAAM,IAAI,IAAI,IAAI,KAAK,IAAI;IAC3B,MAAM,IAAI,IAAI,IAAI,KAAK,IAAI;IAC3B,OAAO;QAAE;QAAG;QAAG,GAAG,IAAI;IAAC;AACzB;AALA,QAAA,oBAAA;;;A;AE3BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,kB,K;AAEH,MAAA,4BAAA,QAAA;AAEA,SAAgB,gBAAgB,KAAY;IAC1C,IAAI,OAAO,0BAAA,WAAW,QAAQ,CAAC,MAAM,WAAW,KAAK,aACnD,OAAO,QAAQ;IACjB,OAAO,IAAI,QAAQ,CAAC;QAClB,MAAM,QAAQ,YAAY;YACxB,IAAI,OAAO,0BAAA,WAAW,QAAQ,CAAC,MAAM,WAAW,KAAK,aAAa;gBAChE,cAAc;gBACd;YACD;QACH,GAAG;IACL;AACF;AAXA,QAAA,kBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,oB,K;AAIH,SAAgB,kBAAkB,IAAU;IAC1C,OAAO,IAAI,QAAQ,CAAC;QAClB,MAAM,QAAQ,YAAY;YACxB,IAAI,KAAK,UAAU,UAAU,GAAG;gBAC9B,cAAc;gBACd;YACD;QACH,GAAG;IACL;AACF;AATA,QAAA,oBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAGH,MAAA,sBAAA,QAAA;AACA,sCAAsC;AACtC,WAAW;AACX,4BAA4B;AAC5B,iCAAiC;AACjC,2BAA2B;AAC3B,MAAA,mDAAA,QAAA;AACA,MAAA,4BAAA,QAAA;AAEA,SAAe,aAAa,IAAgB,EAAE,KAAa;I,O,U,I,E,K,G,K,G;QACzD,MAAM,eAAe;QACrB,MAAM,QAAQ;QACd,IAAI,WAAW,MAAM,iDAAA,iBAAiB,kBAAkB,MAAM;QAC9D,IAAI,CAAC,UACH,WAAW,MAAM,iDAAA,iBAAiB,qBAAqB,MAAM;QAE/D,MAAM,QAAQ,MAAM,iDAAA,iBAAiB,wBAAwB,MAAM;QACnE,KAAK,MAAM,QAAQ,MACjB,IAAI,KAAK,MAAM,UAAU,OAAO;YAC9B,IAAI,KAAK,iBAAiB,0BAAA,KACxB,KAAK,SAAS,SAAS;iBAClB,KAAK,MAAM,IAAI;YACtB;QACD;QAEH,iDAAA,iBAAiB,uBAAuB,MAAM,UAAU,OAAO;IACjE;AAAC;AAED,SAAsB,qBAAqB,KAAkB;I,O,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AAA,6BAAA,QAAA;AACA,MAAA,yBAAA,QAAA;AAEA,SAAsB,YACpB,SAAiB,EACjB,KAA6B;I,O,U,I,E,K,G,K,G;QAE7B,MAAM,aAAa,MAAM,AAAA,CAAA,GAAA,2BAAA,wBAAA,EAAyB;QAClD,IAAI,OAAO,eAAe,aACxB,MAAM,IAAI,MAAM;QAClB,MAAM,MAAM,MAAM,AAAA,CAAA,GAAA,uBAAA,oBAAA,EAAqB;QACvC,MAAM,UAAU,MAAM,WAAW,YAAY,WAAA;QAC7C,KAAK,MAAM,UAAU,QACnB,IAAI,OAAO,KAAK,UAAU,UAAU,WAAW;YAC7C,MAAM,OAAO,GAAG,CAAC,OAAO,KAAK,WAAW,MAAM;YAC9C,IAAI,MAAM,OAAO,KAAK,KAAK,IAAI;iBAE7B,OAAO,KAAK,KAAK,IAAI;QAExB;IAEL;AAAC;AAlBD,QAAA,cAAA;;;A;AE5BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,uB,K;AAEH,SAAgB,qBACd,KAA6B;IAE7B,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,qBAAqB,SAAS;IACtC;AACF;AANA,QAAA,uBAAA;;;A;AExBA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,iB,K;AAGH,MAAA,sBAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAKA,SAAS,WAAW,UAAsB;IACxC,IAAI,OAAO,WAAW,KAAK,SAAS;QAClC,IAAI,OAAO,WAAW,KAAK,SAAS,aAAa;YAC/C,MAAM,OAAO,WAAW,KAAK;YAC7B,WAAW,KAAK,SAAS;YACzB,WAAW,KAAK,SAAS,QAAQ;QAClC,OACC,WAAW,KAAK,SAAS;;AAG/B;AAEA,SAAsB,eAAe,KAAkB;I,O,U,I,E,K,G,K,G;QACrD,MAAM,UAAU,MAAM,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB;QACxC,MAAM,YAAY,MAAM,QAAQ,qBAAqB;QACrD,KAAK,MAAM,YAAY,UAAW;YAChC,MAAM,SAAS,MAAM,SAAS,qBAAqB;YACnD,KAAK,MAAM,SAAS,OAAQ;gBAC1B,MAAM,CAAC,cAAc,MAAM,GAAG,MAAM,QAAQ,IAAI;oBAC9C,MAAM,YAAY,WAAA;oBAClB,MAAM,qBAAqB;iBAC5B;gBACD,KAAK,MAAM,eAAe,aACxB,WAAW;gBAEb,KAAK,MAAM,QAAQ,MAAO;oBACxB,WAAW;oBACX,MAAM,WAAW,MAAM,KAAK,YAAY,WAAA;oBACxC,KAAK,MAAM,OAAO,SAChB,WAAW;gBAEd;YACF;QACF;IACH;AAAC;AAtBD,QAAA,iBAAA;;;A;AE3CA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAEH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AAEA,sDAAsD;AACtD,sDAAsD;AACtD,aAAA,QAAA,qBAAA;AAEA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,oBAAA;AAEA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AAEA,aAAA,QAAA,qBAAA;;;A;AExCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,gB,K;AAGH,MAAA,uBAAA,QAAA;AAKA,MAAA,sBAAA,QAAA;AACA,MAAA,iDAAA,QAAA;AAQA,MAAA,iBAAA,QAAA;AACA,MAAA,eAAA,QAAA;AACA,MAAA,eAAA,QAAA;AACA,MAAA,oBAAA,QAAA;AACA,MAAA,iBAAA,QAAA;AACA,MAAA,oBAAA,QAAA;AACA,MAAA,6BAAA,QAAA;AACA,MAAA,aAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAEA,SAAsB,cACpB,IAAiB,EACjB,gBAAwB,EACxB,mBAA2B,EAC3B,YAA2D,EAC3D,mBAAmB,EAAE;I,O,U,I,E,K,G,K,G;QAErB,MAAM,QAAQ,AAAA,CAAA,GAAA,eAAA,QAAA;QACd,MAAM,aAAa,MAAM,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB;QAC3C,MAAM,OAAmC,CAAA;QACzC,WAAW,MAAM;QACjB,MAAM,YAAY,MAAM,WAAW;QACnC,UAAU,QAAQ,WAAW,KAAK,MAAM;QACxC,IAAK,IAAI,QAAQ,GAAG,QAAQ,KAAK,QAAQ,QAAS;YAChD,MAAM,SAAS,IAAI,CAAC,MAAM;YAC1B,MAAM,QAAiC,EAAE;YACzC,KAAK,MAAM,OAAO,OAAQ;gBACxB,IAAI,IAAI,SAAS,SACf,MAAM,KACJ,oBAAoB,KAAK,MAAM,MAAM,KAAK,YAAY,+CAAA;qBAEnD,IAAI,IAAI,SAAS,YACtB,MAAM,KACJ,uBAAuB,KAAK,MAAM,MAAM,KAAK,+CAAA;qBAE1C,IAAI,IAAI,SAAS,eACtB,MAAM,KAAK,iBAAiB,KAAK,MAAM,MAAM,KAAK,+CAAA;qBAC7C,IAAI,IAAI,SAAS,gBACtB,MAAM,KACJ,iBAAiB,KACf,MACA,MACA,KACA,+CAAA,eACA,kBACA;qBAGC,IAAI,IAAI,SAAS,QACtB,MAAM,KACJ,oBAAoB,KAAK,MAAM,MAAM,KAAK,YAAY,+CAAA;qBAEnD,IAAI,IAAI,SAAS,WACtB,MAAM,KACJ,uBAAuB,KAAK,MAAM,MAAM,KAAK,+CAAA;qBAE1C,IAAI,IAAI,SAAS,cACtB,MAAM,KACJ,iBAAiB,KAAK,MAAM,MAAM,KAAK,+CAAA;qBAEpC,IAAI,IAAI,SAAS,WACtB,MAAM,KAAK,eAAe,KAAK,MAAM,MAAM,KAAK;YAEnD;YACD,MAAM,AAAA,CAAA,GAAA,eAAA,YAAA,EAAa,OAAO,kBAAkB,CAAC;gBAC3C,IAAI;oBACF,IAAI,cAAc,aAAa,OAAO;gBACvC,EAAC,OAAO,OAAO;oBACd,QAAQ,MAAM;gBACf;YACH;QACD;IACH;AAAC;AA9DD,QAAA,gBAAA;AAgEA,SAAe,cACb,IAAyC,EACzC,SAAiB;I,O,U,I,E,K,G,K,G;QAEjB,MAAM,aAAa,IAAI,CAAC,UAAU;QAClC,IAAI,YAAY,OAAO;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,QAAQ,CAAC,SAAS;YACtC,CAAA,GAAA,2BAAA,wBAAA,EAAyB,WAAW,MACjC,KAAK,CAAC,aAAe,QAAQ,aAC7B,MAAM;QACX;QACA,OAAO,IAAI,CAAC,UAAU;IACxB;AAAC;AAED,SAAe,eACb,IAAgC,EAChC,GAAY,EACZ,UAAyB;I,O,U,I,E,K,G,K,G;QAEzB,IAAI,OAAO,qBAAqB,QAAQ,IAAI,cAAc;QAC1D,MAAM,aAAa,IAAI,CAAC,IAAI,KAAK;QACjC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM,CAAA,aAAA,EAAgB,IAAI,KAAI,WAAA,CAAa;QACtE,4BAA4B;QAC5B,MAAM,WAAW,MAAM,WAAW,qBAAqB;QACvD,MAAM,QAAQ,SAAS,KAAK,CAAC,OAAS,KAAK,KAAK,GAAG,UAAU,IAAI;QACjE,WAAW,MAAM;IACnB;AAAC;AAED,SAAe,iBACb,IAAgC,EAChC,GAAY,EACZ,YAAoB,EACpB,gBAAyB,EACzB,mBAA4B;I,O,U,I,E,K,G,K,G;QAE5B,IAAI,OAAO,qBAAqB,QAAQ,IAAI,oBAAoB;QAChE,MAAM,aAAa,IAAI,CAAC,IAAI,KAAK;QACjC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM,CAAA,aAAA,EAAgB,IAAI,KAAI,WAAA,CAAa;QACtE,MAAM,eAAe,MAAM,WAAW,YAAY;QAClD,MAAM,aAA2B,EAAE;QACnC,KAAK,MAAM,MAAM,IAAI,SAAU;YAC7B,MAAM,WAAW,aAAa,KAAK,CAAC,MAAQ,IAAI,KAAK,GAAG,UAAU;YAClE,IAAI,UAAU,WAAW,KAAK;QAC/B;QACD,IAAI,WAAW,SAAS,GAAG;YACzB,IAAI,kBAAkB;gBACpB,MAAM,oBAAoB,AAAA,CAAA,GAAA,eAAA,WAAA,EAAY;gBACtC,MAAM,iBAAiB,AAAA,CAAA,GAAA,eAAA,WAAA,EAAY;gBACnC,MAAM,OAAO,WAAW,IAAI,CAAC;oBAC3B,OAAO,eAAe,kBACpB,KACA,WAAA,uBACA,qBAAA,8BACA;gBAEJ;gBACA,MAAM,QAAQ,IAAI;YACnB;YACD,MAAM,WAAW,eACf,YACA,cACA,qBAAA;QAEH;IACH;AAAC;AAED,SAAS,WAAW,IAAgC,EAAE,IAAgB;IACpE,IAAI,CAAC,KAAK,KAAK,GAAG,MAAM,GAAG;AAC7B;AAEA,SAAe,oBACb,IAAgC,EAChC,GAAY,EACZ,UAAyB,EACzB,SAA2C;I,O,U,I,E,K,G,K,G;QAE3C,IAAI,OAAO,qBAAqB,QAAQ,IAAI,uBAAuB;QACnE,MAAM,aAAa,IAAI,CAAC,IAAI,KAAK;QACjC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM,CAAA,aAAA,EAAgB,IAAI,KAAI,WAAA,CAAa;QACtE,4BAA4B;QAC5B,MAAM,WAAW,MAAM,WAAW,qBAAqB;QACvD,IAAI,QAAQ,SAAS,KAAK,CAAC,OAAS,KAAK,KAAK,GAAG,UAAU,IAAI;QAC/D,IAAI,CAAC,OACH,+BAA+B;QAC/B,QAAQ,MAAM,UAAU,YAAY,YAAY,IAAI,MAAM,IAAI;QAEhE,6BAA6B;QAC7B,cAAc;QACd,CAAA,GAAA,aAAA,UAAA,EAAW,OAAO,IAAI;QACtB,MAAM,AAAA,CAAA,GAAA,aAAA,UAAA,EAAW,OAAO,IAAI,OAAO,cAAc;QACjD,IAAI,IAAI,MAAM,AAAA,CAAA,GAAA,kBAAA,eAAA,EAAgB,OAAO,QAAQ,IAAI;QACjD,WAAW,MAAM;QACjB,MAAM,qBAAqB;QAC3B,MAAM,AAAA,CAAA,GAAA,kBAAA,eAAA,EAAgB;IACxB;AAAC;AAED,SAAe,qBAAqB,QAAoB;I,O,U,I,E,K,G,K,G;QACtD,MAAM,UAAU,MAAM,SAAS,WAAW,WAAA;QAC1C,MAAM,QAAQ,IACZ,QAAQ,IAAI,CAAC;YACX,OAAO,OAAO,YACZ,UACA,WAAA,uBACA,qBAAA;QAEJ;IAEJ;AAAC;AAED,SAAe,gCACb,IAAgC,EAChC,EAAU,EACV,SAAiB,EACjB,IAAY,EACZ,IAAY,EACZ,UAAmB;I,I,I;I,O,U,I,E,K,G,K,G;QAEnB,MAAM,aAAa,MAAM,cAAmB,MAAM;QAClD,MAAM,UAAU,MAAM,WAAW,YAAY,WAAA;QAC7C,IAAI,YAAY;YACd,KAAK,MAAM,UAAU,QACnB,IAAI,eAAe,CAAA,AAAA,CAAA,KAAA,OAAO,KAAK,UAAA,MAAU,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,KAAG,GAAI;gBAChD,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,QAAQ;gBAChC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,QAAQ;gBAChC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,aAAa;gBACrC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,cAAc;gBACtC,OAAO;YACR;QAEJ;QACD,KAAK,MAAM,UAAU,QACnB,IAAI,SAAS,CAAA,AAAA,CAAA,KAAA,OAAO,KAAK,IAAA,MAAI,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,KAAG,GAAI;YACpC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,QAAQ;YAChC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,QAAQ;YAChC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,aAAa;YACrC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,cAAc;YACtC,OAAO;QACR;QAGH,MAAM,SAAS,IAAI,qBAAA,WAAW,MAAM,+CAAA;QACpC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,QAAQ;QAChC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,MAAM;QAC9B,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,QAAQ;QAChC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,aAAa;QACrC,CAAA,GAAA,kBAAA,eAAA,EAAgB,QAAQ,cAAc;QAEtC,OAAO,WAAW,SAChB,QACA,WAAA,wBACA,qBAAA;I;AAEH;AAED,SAAe,uBACb,IAAgC,EAChC,GAAY,EACZ,YAAoB;I,O,U,I,E,K,G,K,G;QAEpB,IAAI,OAAO,qBAAqB,QAAQ,IAAI,0BAA0B;QACtE,MAAM,aAAa,IAAI,CAAC,IAAI,KAAK;QACjC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM,CAAA,aAAA,EAAgB,IAAI,KAAI,WAAA,CAAa;QACtE,4BAA4B;QAC5B,MAAM,WAAW,MAAM,WAAW,YAAY;QAC9C,IAAI,QAAQ,SAAS,KAAK,CAAC,OAAS,KAAK,KAAK,GAAG,UAAU,IAAI;QAC/D,IAAI,CAAC,OAAO;YACV,+BAA+B;YAC/B,QAAQ,MAAM,gCACZ,MACA,IAAI,IACJ,IAAI,KAAK,WACT,IAAI,MACJ,IAAI,KAAK,MACT,IAAI,KAAK;YAEX,KAAK,MAAM,KAAK,SAAU;gBACxB,IAAI,EAAE,KAAK,GAAG,UAAU,MAAM,KAAK,GAAG,OAAO;YAC9C;YACD,MAAM,WAAW,SACf,OACA,cACA,qBAAA;QAEH;QACD,MAAM,AAAA,CAAA,GAAA,kBAAA,eAAA,EAAgB;IACxB;AAAC;;;A;AE1SD;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,U,A,I,I,I,C,W,S,C;I,O,I,Y,U,C,I,C,I,G,I,A,I,I,Q;A;A,I,mB,A,I,I,I,C,oB,S,O,E,U,E,S;I,I,C,O,e,M,I,U;I,I,I,U,M,S,c,E,G,G,I,E;I,O,I,C,G,K,S,K,U,K,W,C,C,O,c,G;Q,O,I;I,G;I,S,K,C;Q,I,C,C,E,E,C,C,E,G,S,C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gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,sB,K;AE1BA,MAAA,UAAA,QAAA;AACA,MAAA,sBAAA,QAAA;AACA,MAAA,aAAA,QAAA;AACA,MAAA,2BAAA,QAAA;AAEA,SAAsB,oBACpB,IAAY,EACZ,OAAe,EACf,WAAyC,EACzC,YAAoB;I,O,U,I,E,K,G,K,G;QAEpB,MAAM,kBAAkB,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB;QAC1C,MAAM,YAAY,AAAA,CAAA,GAAA,QAAA,qBAAA,EAAsB,gBAAgB;QACxD,MAAM,SAAS,MAAM,AAAA,CAAA,GAAA,yBAAA,sBAAA,EAAuB,aAAa,WAAW;QACpE,MAAM,QAAQ,MAAM,OAAO,WAAW,WAAA;QACtC,MAAM,gBAAgB,MAAM,OAAO,CAAC;YAClC,OACE,KAAK,KAAK,KAAK,UAAU,WAAA,iBACzB,KAAK,WAAW,IAAI;QAExB;QACA,MAAM,OAAO,aAAa,CAAC,EAAE;QAC7B,OAAO;IACT;AAAC;AAlBD,QAAA,sBAAA;;;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,yB,K;AELA,MAAA,0BAAA,QAAA;AAEA,SAAsB,uBACpB,IAAkC,EAClC,SAAiB,EACjB,aAAqB;I,O,U,I,E,K,G,K,G;QAErB,MAAM,UAAU,MAAM,AAAA,CAAA,GAAA,wBAAA,qBAAA,EAAsB,MAAM;QAClD,KAAK,MAAM,UAAU,QAAS;YAC5B,IAAI,OAAO,KAAK,KAAK,UAAU,eAC7B,OAAO;QAEV;IACH;AAAC;AAXD,QAAA,yBAAA;;;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,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;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAEH,MAAA,uBAAA,QAAA;AACA,MAAA,iBAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAKA,SAAsB;I,O,U,I,E,K,G,K,G;QACpB,MAAM,QAAQ,AAAA,CAAA,GAAA,eAAA,QAAA;QACd,MAAM,aAA4B,MAAM,MAAM,WAC5C,WAAA;QAEF,IAAI,YAAY,OAAO;QACvB,MAAM,UAAU,IAAI,qBAAA,cAClB,WAAA,yBACA,WAAA;QAEF,MAAM,MAAM,WAAW;QACvB,CAAA,GAAA,eAAA,mBAAA,EAAoB;QACpB,OAAO;IACT;AAAC;AAbD,QAAA,uBAAA;;;A;AE/BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,wB,K;AAEH,MAAA,aAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAEA,SAAgB,sBAAsB,IAAY,EAAE,QAAQ,IAAI;IAC9D,OAAO,AAAA,CAAA,GAAA,WAAA,QAAA,EAAS,MAAM,WAAA,4BAA4B;AACpD;AAFA,QAAA,wBAAA;;;A;AE3BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,qC,K;AAEH,MAAA,iBAAA,QAAA;AAIA,MAAA,UAAA,QAAA;AACA,MAAA,kBAAA,QAAA;AACA,MAAA,yBAAA,QAAA;AACA,MAAA,qBAAA,QAAA;AACA,MAAA,iBAAA,QAAA;AAEA,SAAsB,mCACpB,OAA4B,EAC5B,QAA6B;I,O,U,I,E,K,G,K,G;QAE7B,MAAM,MAAwB,EAAE;QAChC,MAAM,UAAyB,EAAE;QACjC,MAAM,QAAQ,EAAE;QAChB,KAAK,MAAM,QAAQ,QAAS;YAC1B,MAAM,gBAAgB,KAAK;YAC3B,MAAM,KAAK,IAAM,cAAc,MAAM,eAAe;QACrD;QACD,KAAK,MAAM,OAAO,SAAU;YAC1B,MAAM,gBAAgB,IAAI;YAC1B,MAAM,KAAK,IAAM,aAAa,KAAK,eAAe,KAAK;QACxD;QACD,MAAM,AAAA,CAAA,GAAA,eAAA,YAAA,EACJ,OACA,IACA,QAAQ,IAAI,KAAK,MAAM;QAEzB,OAAO;YAAE,KAAK;YAAK,SAAS;QAAO;IACrC;AAAC;AArBD,QAAA,qCAAA;AAuBA,SAAe,aACb,GAAsB,EACtB,aAAqB,EACrB,GAAqB,EACrB,OAAsB;I,O,U,I,E,K,G,K,G;QAEtB,MAAM,iBAAiB,AAAA,CAAA,GAAA,QAAA,yBAAA,EAA0B,IAAI;QACrD,MAAM,SAAS,MAAM,AAAA,CAAA,GAAA,gBAAA,aAAA,EAAc,gBAAgB;QACnD,MAAM,YAAY,MAAM,AAAA,CAAA,GAAA,eAAA,YAAA,EAAa;QACrC,IAAI,IAAI,SACN,AAAA,CAAA,GAAA,mBAAA,gBAAA,EAAiB,KAAK,QAAQ,IAAI,SAAS,WAAW;aAEtD,AAAA,CAAA,GAAA,uBAAA,oBAAA,EAAqB,SAAS,QAAQ;IAE1C;AAAC;AAED,SAAe,cACb,IAAuB,EACvB,aAAqB,EACrB,GAAqB;I,O,U,I,E,K,G,K,G;QAErB,MAAM,iBAAiB,AAAA,CAAA,GAAA,QAAA,yBAAA,EAA0B,KAAK;QACtD,MAAM,SAAS,MAAM,AAAA,CAAA,GAAA,gBAAA,aAAA,EAAc,gBAAgB;QACnD,MAAM,YAAY,MAAM,AAAA,CAAA,GAAA,eAAA,YAAA,EAAa;QACrC,IAAI,KAAK,SACP,AAAA,CAAA,GAAA,mBAAA,gBAAA,EAAiB,KAAK,QAAQ,KAAK,SAAS,WAAW;aAEvD,AAAA,CAAA,GAAA,mBAAA,gBAAA,EAAiB,KAAK,QAAQ,KAAK,MAAM,WAAW;IAExD;AAAC;;;A;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,O,U,e,K,U,I,gB,U,G;A;A,O,e,S,c;I,O;A;AEtFD;;;;;;;;;;;;;;;;;;;;;;CAsBG,GACH,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,oBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,oBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AEhCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,e,K;AAIH,SAAgB,aACd,MAAkB,EAClB,KAAa,EACb,SAAoC,EACpC,UAA2B,EAC3B,IAAa;IAEb,IAAI,aAAa,YAAY;QAC3B,MAAM,IAAI;YACR;YACA;YACA;QACD;QACD,IAAI,MAAM,OAAO,OAAO,GAAG;YAAE;QAAI;QACjC,OAAO,KAAK;IACb;AACH;AAhBA,QAAA,eAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,c,K;AAGH,MAAA,cAAA,QAAA;AAMA,MAAA,mBAAA,QAAA;AACA,MAAA,gCAAA,QAAA;AAEA,SAAgB,YACd,WAAwB,EACxB,WAAyB,EACzB,gBAAmC;IAEnC,MAAM,YAAyB,EAAE;IACjC,MAAM,YAAsB,EAAE;IAE9B,KAAK,MAAM,cAAc,YAAa;QACpC,MAAM,OAAO,AAAA,CAAA,GAAA,iBAAA,cAAA,EAAe,aAAa,YAAY;QACrD,IAAI,CAAC,MAAM;YACT,YAAY;YACZ,UAAU,KAAK;YACf,WAAW,mBAAmB,YAAA,kBAAkB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AA,kBAAA,eAAA,EAAgB,WAAW,YAAY;SACxC;QACD,OAAO;YACL;YACA;YACA;QACD;IACH;AAAC;AAhCD,QAAA,0BAAA;;;A;AEpCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,sB,K;AAIH,MAAA,yBAAA,QAAA;AACA,MAAA,4BAAA,QAAA;AAEA,SAAsB,oBACpB,UAAyB,EACzB,cAAsB,EACtB,UAAuB,EACvB,gBAAmC;I,O,U,I,E,K,G,K,G;QAEnC,6CAA6C;QAC7C,MAAM,WAAW,iBAAiB,IAAI,WAAW,WAAW;QAC5D,IAAI,UAAU,OAAmB,0BAAA,WAAW,QAAQ,CAAC,SAAS;QAE9D,2CAA2C;QAC3C,MAAM,YAAY,MAAM,WAAW,qBAAqB;QACxD,MAAM,kBAAkB,MAAM,QAAQ,IACpC,UAAU,IAAI,CAAC;YACb,IAAI,SAAS,eAAe,gBAC1B,OAAO,SAAS,qBAAqB;QACzC;QAEF,wBAAwB;QACxB,KAAK,MAAM,kBAAkB,gBAAiB;YAC5C,IAAI,gBACF,KAAK,MAAM,aAAa,eAAgB;gBACtC,IACE,UAAU,KAAK,WAAW,UAAU,WAAW,WAAW,YAE1D,OAAO;YACV;QACJ;QACD,kBAAkB;QAClB,MAAM,iBACJ,AAAA,CAAA,GAAA,uBAAA,oBAAA,EAAqB,WAAW,YAAY;QAE9C,KAAK,MAAM,kBAAkB,gBAAiB;YAC5C,IAAI,gBACF,KAAK,MAAM,aAAa,eAAgB;gBACtC,IAAI,UAAU,KAAK,KAAK,UAAU,gBAAgB,OAAO;YAC1D;QACJ;IACH;AAAC;AAtCD,QAAA,sBAAA;;;A;AE7BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,kB,K;AAQH,MAAA,aAAA,QAAA;AACA,MAAA,gBAAA,QAAA;AAEA,SAAsB,gBACpB,SAAqB,EACrB,UAAuB,EACvB,gBAAmC;I,O,U,I,E,K,G,K,G;QAEnC,MAAM,mBAAmB,MAAM,UAAU,YAAY,WAAA;QACrD,MAAM,aAAa,OAAO,OAAO,WAAW,YAAY,IACtD,CAAC,MAAQ,IAAI;QAEf,MAAM,UAAU,AAAA,CAAA,GAAA,cAAA,WAAA,EAAY,YAAY,kBAAkB;QAC1D,OAAO;IACT;AAAC;AAXD,QAAA,kBAAA;;;A;AEjCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,mB,K;AAGH,MAAA,cAAA,QAAA;AAQA,MAAA,mBAAA,QAAA;AACA,MAAA,gCAAA,QAAA;AACA,MAAA,iBAAA,QAAA;AAEA,SAAsB,iBACpB,SAAqB,EACrB,UAAyB,EACzB,UAAuB,EACvB,gBAAmC;I,O,U,I,E,K,G,K,G;QAEnC,MAAM,cAAiC,EAAE;QACzC,MAAM,WAAyB,EAAE;QACjC,MAAM,WAAqB,EAAE;QAC7B,MAAM,QAAyB,EAAE;QAEjC,MAAM,YAAY,MAAM,UAAU,qBAAqB;QACvD,KAAK,MAAM,GAAG,SAAS,IAAI,OAAO,QAAQ,WAAW,UAAW;YAC9D,MAAM,WAAW,AAAA,CAAA,GAAA,iBAAA,cAAA,EACf,WA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AAK,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,KAAM;gBACpC,MAAM,MAAM,gBAAgB,KAAK,KAAK,CAAC,MAAQ,IAAI,YAAY;gBAC/D,IAAI,KAAK,IAAI,UAAU,KAAK;qBACvB,gBAAgB,KAAK,KAAK;oBAAE;oBAAS,WAAW;wBAAC;qBAAK;gBAAA;YAC5D;YACD,MAAM,gBAAgB;YACtB,OAAO;QACT;IAAC;AACF;AAtED,QAAA,uBAAA;AAuEA,0BAAA,WAAW,gBAAgB;;;A;AEzG3B;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,qB,K;AAIH,MAAA,sBAAA,QAAA;AACA,MAAA,mBAAA,QAAA;AAEA,SAAsB,mBACpB,IAAoB,EACpB,MAAiC;I,O,U,I,E,K,G,K,G;QAEjC,MAAM,qBACJ,OAAO;QACT,KAAK,MAAM,UAAU,mBAAoB;YACvC,MAAM,QAAQ,MAAM,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB,OAAO,OAAO,OAAO;YAC3D,MAAM,OAAwB,EAAE;YAChC,KAAK,MAAM,QAAQ,MACjB,KAAK,KAAK,AAAA,CAAA,GAAA,iBAAA,cAAA,EAAe,MAAM;YAEjC,MAAM,QAAQ,IAAI;QACnB;IACH;AAAC;AAdD,QAAA,qBAAA;;;A;AE7BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,iB,K;AAIH,MAAA,oBAAA,QAAA;AACA,MAAA,mBAAA,QAAA;AAEA,SAAsB,eACpB,IAAoB,EACpB,IAAa;I,O,U,I,E,K,G,K,G;QAEb,IAAI,QAAQ;QACZ,MAAM,aAA8B,EAAE;QACtC,KAAK,MAAM,QAAQ,KAAM;YACvB,IACE,gBAAgB,iBAAA,kBAChB,KAAK,YAAY,KAAK,WACtB,KAAK,SAAS,KAAK,MACnB;gBACA,QAAQ;gBACR;YACD,OAAM,IAAI,gBAAgB,kBAAA,iBACzB,WAAW,KAAK,KAAK,WAAW;QAEnC;QACD,IAAI,CAAC,OACH,KAAK,KACH,IAAI,iBAAA,eACF,KAAK,MACL,KAAK,SACL,KAAK,MACL,KAAK,YACL,KAAK;QAIX,MAAM,QAAQ,IAAI;IACpB;AAAC;AA9BD,QAAA,iBAAA;;;A;AE7BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,kB,Q,kB,Q,c,Q,c,K;AAOH,MAAA,sBAAA,QAAA;AACA,MAAA,0BAAA,QAAA;AACA,MAAA,mBAAA,QAAA;AACA,MAAA,sBAAA,QAAA;AACA,MAAA,sBAAA,QAAA;AACA,MAAA,oBAAA,gBAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAKA,IAAI,UAAuB;AAC3B,IAAI,YAAqC;AACzC,IAAI,UAAmC;AACvC,IAAI,qBAAkC;AACtC,IAAI,mBAAgC;AACpC,IAAI,QAAQ;AACC,QAAA,cAAc,AAAA,CAAA,GAAA,kBAAA,OAAA,EAAS,cAAc;AAElD,SAAe,aACb,IAAqB,EACrB,MAAyB,EACzB,IAAY,EACZ,M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,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAOH,MAAA,aAAA,QAAA;AAEA,SAAsB,qBACpB,OAAsB,EACtB,IAA2B,EAC3B,aAAa,KAAK;I,O,U,I,E,K,G,K,G;QAElB,MAAM,cAEA,MAAM,QAAQ,YAAY,WAAA;QAChC,KAAK,MAAM,QAAQ,YACjB,IAAI,KAAK,KAAK,IAAI,UAAU,KAAK,KAAK;YACpC,IAAI,YACF,KAAK,KAAK,KAAK,IAAI,KAAK;YAE1B,OAAO,KAAK;QACb;IAEL;AAAC;AAhBD,QAAA,uBAAA;;;A;AE/BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,mB,K;AAKH,MAAA,uBAAA,QAAA;AACA,MAAA,4BAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAMA,SAAsB,iBACpB,OAAsB,EACtB,IAA2B;I,O,U,I,E,K,G,K,G;QAE3B,MAAM,SAAS,IAAI,0BAAA;QACnB,MAAM,aAAa,IAAI,qBAAA,WAAW,KAAK,MAAM,WAAA,wBAAwB;QACrE,WAAW,KAAK,SAAS,OAAO,KAAK;QACrC,QAAQ,SACN,YACA,WAAA,4BACA,WAAA;QAEF,OAAO;IACT;AAAC;AAbD,QAAA,mBAAA;;;A;AEnCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,0B,K;AAMH,MAAA,aAAA,QAAA;AAKA,SAAsB,wBACpB,OAAsB,EACtB,GAAW;I,O,U,I,E,K,G,K,G;QAEX,MAAM,cAEA,MAAM,QAAQ,YAAY,WAAA;QAChC,KAAK,MAAM,QAAQ,YAAa;YAC9B,IAAI,KAAK,KAAK,IAAI,UAAU,KAC1B,OAAO,QAAQ,YACb,MACA,WAAA,4BACA,WAAA;QAGL;IACH;AAAC;AAhBD,QAAA,0BAAA;;;A;AEjCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,sB,K;AAMH,MAAA,aAAA,QAAA;AACA,MAAA,0BAAA,QAAA;AACA,MAAA,UAAA,QAAA;AAEA,SAAsB,oBACpB,OAAsB;I,O,U,I,E,K,G,K,G;QAEtB,MAAM,cAEA,MAAM,QAAQ,YAAY,WAAA;QAEhC,MAAM,MAA+B,EAAE;QACvC,KAAK,MAAM,cAAc,YAAa;YACpC,MAAM,AAAA,CAAA,GAAA,QAAA,eAAA,EAAgB;YACtB,IAAI;YACJ,wBAAwB;YACxB,IAAI,OAAO,WAAW,KAAK,QAAQ,aACjC,wBAAwB,IAAI,wBAAA,sBAC1B,WAAW,KAAK,KAAK,OACrB,WAAW;iBAGb,wBAAwB,IAAI,wBAAA,sBAC1B,WAAW,KAAK,KAAK,OACrB,WAAW,YACX,WAAW,KAAK,IAAI;YAGxB,IAAI,KAAK;QACV;QACD,OAAO;IACT;AAAC;AA3BD,QAAA,sBAAA;;;A;AEhCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,+B,K;AAEH,MAAA,0BAAA,QAAA;AACA,MAAA,uBAAA,QAAA;AACA,MAAA,4BAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAKA,MAAA,UAAA,QAAA;AAEA,SAAsB,6BACpB,OAAsB,EACtB,IAAY;I,O,U,I,E,K,G,K,G;QAEZ,MAAM,SAAS,IAAI,0BAAA;QACnB,MAAM,aAAa,IAAI,qBAAA,WAAW,MAAM,WAAA,wBAAwB;QAChE,QAAQ,SACN,YACA,WAAA,4BACA,WAAA;QAEF,MAAM,AAAA,CAAA,GAAA,QAAA,eAAA,EAAgB;QACtB,MAAM,WAAW,IAAI,wBAAA,sBAAsB,MAAM,WAAW;QAC5D,WAAW,KAAK,SAAS,OAAO,SAAS;QACzC,OAAO;IACT;AAAC;AAfD,QAAA,+BAAA;;;A;AElCA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;AAKH,MAAA,eAAA,QAAA;AAEA,OAAO,UAAU,SAAU,IAM1B;IACC,KAAK,iBAAiB,WAAW,SAAU,EAAoB;QAC7D,MAAM,SAAiB,GAAG,KAAK;QAC/B,MAAM,OAAoB,GAAG,KAAK;QAClC,MAAM,MAA8B,AAAA,CAAA,GAAA,aAAA,UAAA,EAAW;QAC/C,KAAK,YAAY;YAAE;YAAQ;QAAG;IAChC;AACF;;;A;AE1CA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,U,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,O,e,S,c;I,O;A;A,Q,a,K;AAGH,MAAA,sBAAA,QAAA;AACA,MAAA,QAAA,aAAA,QAAA,sBAAgC,6BAA6B;AAG7D,SAAgB,WAAW,IAAiB;IAC1C,MAAM,eAAe,KAAK;IAC1B,MAAM,aAAa,KAAK;IACxB,MAAM,MAA8B,EAAE;IACtC,KAAK,MAAM,eAAe,aAAc;QACtC,MAAM,UAAU,IAAI,MAAM,IACxB,IAAI,MAAM,QACR,YAAY,OAAO,GACnB,YAAY,OAAO,GACnB,YAAY,OAAO,IAErB,IAAI,MAAM,QAAQ,GAAG,GAAG;QAE1B,IAAI,oBAA0C;QAC9C,KAAK,MAAM,oBAAoB,WAAY;YACzC,MAAM,gBAAgB,IAAI,MAAM;YAChC,KAAK,MAAM,QAAQ,iBAAiB,SAAU;gBAC5C,MAAM,MAAM,QAAQ;gBACpB,cAAc,WAAW,KAAK;gBAC9B,IAAI,aAAa;gBACjB,sCAAsC;gBACtC,MAAM,YAAY,mBAAmB,KAAK,MAAM,QAAQ;gBACxD,IAAI,WAEF,AADA,kDAAkD;gBAClD,CAAA,GAAA,oBAAA,iBAAA,EACE,KAAK,UACL,SAAU,EAAiB,EAAE,EAAiB,EAAE,EAAiB;oBAC/D,MAAM,MAAM,IAAI,MAAM;oBACtB,MAAM,oBAAoB,IAAI,kBAC5B,IACA,IACA,IACA,OACA;oBAEF,IAAI,CAAC,mBAAmB;oBACxB,kBAAkB,aAAa,KAAK;oBACpC,MAAM,WAAW,QAAQ,OAAO,WAAW;oBAC3C,iEAAiE;oBACjE,IACE,CAAC,qBACA,qBACC,kBAAkB,cAAc,WAAW,UAE7C,oBAAoB;wBAClB,QAAQ;wBACR,eAAe;4BACb;4BACA,SAAS,iBAAiB;4BAC1B,MAAM,iBAAiB;wBACxB;oBACF;gBAEL;YAGL;QACF;QACD,IAAI,mBACF,IAAI,KAAK;IAEZ;IACD,OAAO;AACT;AA/DA,QAAA,aAAA;AAiEA,SAAS,mBAAmB,IAAgB,EAAE,KAAoB;IAChE,+BAA+B;IAC/B,IACE,KAAK,IAAI,KAAK,MAAM,KACpB,MAAM,KAAK,KAAK,IAAI,KACpB,KAAK,IAAI,KAAK,MAAM,KACpB,MAAM,KAAK,KAAK,IAAI,KACpB,MAAM,KAAK,KAAK,IAAI,GAEpB,OAAO;IAET,OAAO;AACT;;;A;AE1GA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,yB,G;I,I,C,Q,C,S,O,C,E,a,K,Y,K,Y,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,e,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,U,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,O,e,S,c;I,O;A;A,Q,oB,K;AAGH,MAAA,QAAA,aAAA,QAAA,sBAAgC,6BAA6B;AAE7D,IAAI,IACF,IACA,IACA,IACA,IACA;AAEF,SAAgB,kBACd,QAAuB,EACvB,QAUS;IAET,MAAM,aAAa,SAAS;IAC5B,IAAI,GAAW,GAAW;IAE1B,IAAI,CAAC,IAAI;QACP,KAAK,IAAI,MAAM;QACf,KAAK,IAAI,MAAM;QACf,KAAK,IAAI,MAAM;QACf,KAAK,IAAI,MAAM;QACf,KAAK,IAAI,MAAM;QACf,KAAK,IAAI,MAAM;IAChB;IAED,MAAM,YAAY,SAAS,MAAM,WAAW,SAAS;IACrD,IAAI,UAAU,SAAS,MAAO,WAAW,UAAU,WAAW,OAAO,OAAQ,yCAAyC;IACtH,MAAM,SAAS,SAAS,KAAK,SAAS,WAAW;IACjD,oEAAoE;IACpE,kEAAkE;IAClE,IAAI;IACJ,IAAI,SAAS,UAAU;QACrB,IAAI,CA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AAEH,SAAgB,4BACd,KAA6B,EAC7B,QAAgB;IAEhB,MAAM,UAAU,CAAhB;;;;;;;;;;;;;;;;;YAiBY,EAAA,SAAA;;;;;;;;;GASV,CAAA;IAEF,6DAA6D;IAC7D,aAAa;IACb,OAAO,MAAM,gBAAgB,oBAAoB;AACnD;AAnCA,QAAA,8BAAA;;;A;AExBA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAGH,MAAA,sBAAA,QAAA;AACA,MAAA,sBAAA,QAAA;AACA,MAAA,yBAAA,QAAA;AAEA,SAAsB;I,O,U,I,E,K,G,K,G;QACpB,MAAM,SAAS,AAAA,CAAA,GAAA,oBAAA,iBAAA;QACf,MAAM,MAA0B,CAAA;QAChC,KAAK,MAAM,SAAS,OAAQ;YAC1B,MAAM,YAAY,MAAM,AAAA,CAAA,GAAA,uBAAA,oBAAA,EAAqB;YAC7C,MAAM,aAAa,MAAM,AAAA,CAAA,GAAA,oBAAA,iBAAA,EAAkB,OAAO,WAAW;gBAC3D,YAAY;oBAAC;oBAAQ;iBAAa;YACnC;YACD,GAAG,CAAC,MAAM,GAAG,GAAG,WAAW,IAAI,CAAC;gBAC9B,OAAO;oBACL,IAAI,IAAI;oBACR,YAAY,IAAI;oBAChB,MAAM,IAAI;oBACV,MAAM,IAAI;oBACV,SAAS,MAAM;gBAChB;YACH;QACD;QACD,OAAO;IACT;AAAC;AAnBD,QAAA,uBAAA;;;A;AE7BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,oB,K;AAIH,SAAgB;IACd,MAAM,0BAOF,OAAO,OAAO,iBAAiB;IACnC,MAAM,SAAS,IAAI;IACnB,IAAK,MAAM,aAAa,wBAAyB;QAC/C,IACE,OAAO,UAAU,eAAe,KAAK,yBAAyB,YAE9D,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,uBAAuB,CAAC,UAAU,CAAC,WACzD,OAAO,IAAI;IAGhB;IACD,OAAO,MAAM,KAAK;AACpB;AApBA,QAAA,oBAAA;;;A;AE1BA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,uB,K;AAEH,SAAgB,qBACd,KAA6B;IAE7B,MAAM,UAAU,CAAhB;;;;;;;;;;;;;;;;;;;;;;GAsBE,CAAA;IAEF,6DAA6D;IAC7D,aAAa;IACb,OAAO,MAAM,gBAAgB,oBAAoB;AACnD;AA9BA,QAAA,uBAAA;;;A;AExBA;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;A,Q,oB,K;AAGH,MAAA,aAAA,QAAA;AAWA,MAAA,8BAAA,QAAA;AACA,MAAA,eAAA,QAAA;AACA,MAAA,UAAA,QAAA;AAEA,SAAsB;I,O,U,I,E,K,G,K,G;QAGpB,MAAM,QAAQ,AAAA,CAAA,GAAA,QAAA,QAAA;QACd,MAAM,UAAU,MAAM,AAAA,CAAA,GAAA,QAAA,iBAAA,EAAkB;QACxC,MAAM,SAAyD,CAAA;QAC/D,MAAM,gBAAgB;YACpB,WAAA;YACA,WAAA;YACA,WAAA;YACA,WAAA;SACD;QACD,MAAM,eAAe;YAAC,WAAA;YAAmB,WAAA;SAAkB;QAC3D,YAAY;QACZ,MAAM,SAAS,MAAM,QAAQ,KAAK,eAAe,CAAC;YAChD,OAAO,KAAK,UAAU,UAAU,WAAA;QAClC;QACA,KAAK,MAAM,SAAS,OAAQ;YAC1B,CAAA,GAAA,QAAA,mBAAA,EAAoB;YACpB,MAAM,WAA2C,EAAE;YACnD,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,GAAG;YAC9B,kBAAkB;YAClB,MAA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","sources":["node_modules/spinal-spatial-referential/dist/index.js","node_modules/spinal-spatial-referential/src/index.ts","node_modules/spinal-spatial-referential/dist/SpatialManager.js","node_modules/spinal-spatial-referential/src/SpatialManager.ts","node_modules/spinal-spatial-referential/dist/createFctGetArchi.js","node_modules/spinal-spatial-referential/src/createFctGetArchi.ts","node_modules/spinal-spatial-referential/dist/Config.js","node_modules/spinal-spatial-referential/src/Config.ts","node_modules/spinal-spatial-referential/dist/Constant.js","node_modules/spinal-spatial-referential/src/Constant.ts","node_modules/spinal-spatial-referential/dist/models/SpatialConfig.js","node_modules/spinal-spatial-referential/src/models/SpatialConfig.ts","node_modules/spinal-spatial-referential/dist/managers/BuildingManager.js","node_modules/spinal-spatial-referential/src/managers/BuildingManager.ts","node_modules/spinal-spatial-referential/dist/managers/AbstractEntityManager.js","node_modules/spinal-spatial-referential/src/managers/AbstractEntityManager.ts","node_modules/spinal-spatial-referential/dist/managers/InvalidObjectManager.js","node_modules/spinal-spatial-referential/src/managers/InvalidObjectManager.ts","node_modules/spinal-spatial-referential/dist/managers/FloorManager.js","node_modules/spinal-spatial-referential/src/managers/FloorManager.ts","node_modules/spinal-spatial-referential/dist/managers/RoomManager.js","node_modules/spinal-spatial-referential/src/managers/RoomManager.ts","node_modules/spinal-spatial-referential/dist/utils/consumeBatch.js","node_modules/spinal-spatial-referential/src/utils/consumeBatch.ts","node_modules/spinal-spatial-referential/dist/interfaces.js","node_modules/spinal-spatial-referential/src/interfaces.ts","node_modules/spinal-spatial-referential/dist/v2/index.js","node_modules/spinal-spatial-referential/src/v2/index.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/index.js","node_modules/spinal-spatial-referential/src/v2/interfaces/index.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/AuProps.js","node_modules/spinal-spatial-referential/src/v2/interfaces/AuProps.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/IAggregateSelectItem.js","node_modules/spinal-spatial-referential/src/v2/interfaces/IAggregateSelectItem.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/ICmdNew.js","node_modules/spinal-spatial-referential/src/v2/interfaces/ICmdNew.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/IFloorData.js","node_modules/spinal-spatial-referential/src/v2/interfaces/IFloorData.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/IGetArchi.js","node_modules/spinal-spatial-referential/src/v2/interfaces/IGetArchi.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/IProjectionItem.js","node_modules/spinal-spatial-referential/src/v2/interfaces/IProjectionItem.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/IProjectionOffset.js","node_modules/spinal-spatial-referential/src/v2/interfaces/IProjectionOffset.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/ISkipItem.js","node_modules/spinal-spatial-referential/src/v2/interfaces/ISkipItem.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/SpinalVec3.js","node_modules/spinal-spatial-referential/src/v2/interfaces/SpinalVec3.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/TProjectionItem.js","node_modules/spinal-spatial-referential/src/v2/interfaces/TProjectionItem.ts","node_modules/spinal-spatial-referential/dist/v2/interfaces/TProjectionLst.js","node_modules/spinal-spatial-referential/src/v2/interfaces/TProjectionLst.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/index.js","node_modules/spinal-spatial-referential/src/v2/scripts/index.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/loadBimFile.js","node_modules/spinal-spatial-referential/src/v2/scripts/loadBimFile.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/loadConfig.js","node_modules/spinal-spatial-referential/src/v2/scripts/loadConfig.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/setAreaInContextGeo.js","node_modules/spinal-spatial-referential/src/v2/scripts/setAreaInContextGeo.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getContextSpatial.js","node_modules/spinal-spatial-referential/src/v2/utils/getContextSpatial.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/updateLoadedModel.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/updateLoadedModel.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getViewer.js","node_modules/spinal-spatial-referential/src/v2/utils/getViewer.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getModelByBimFileId.js","node_modules/spinal-spatial-referential/src/v2/utils/getModelByBimFileId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/loadModelByBimFileId.js","node_modules/spinal-spatial-referential/src/v2/utils/loadModelByBimFileId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getBimFileByBimFileId.js","node_modules/spinal-spatial-referential/src/v2/utils/getBimFileByBimFileId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/graphservice.js","node_modules/spinal-spatial-referential/src/v2/utils/graphservice.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/getADModelProps.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/getADModelProps.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/getADPropBylabel.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/getADPropBylabel.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/setCenterPosInContextGeo.js","node_modules/spinal-spatial-referential/src/v2/scripts/setCenterPosInContextGeo.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getFragIds.js","node_modules/spinal-spatial-referential/src/v2/utils/getFragIds.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getWorldBoundingBox.js","node_modules/spinal-spatial-referential/src/v2/utils/getWorldBoundingBox.ts","node_modules/spinal-spatial-referential/dist/v2/utils/index.js","node_modules/spinal-spatial-referential/src/v2/utils/index.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/index.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/index.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/getArchi.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/getArchi.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/getModType.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/getModType.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/getNodeInfoArchiAttr.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/getNodeInfoArchiAttr.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/isInSkipList.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/isInSkipList.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/serverIdArrToNodeIdArr.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/serverIdArrToNodeIdArr.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/updateAttr.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/updateAttr.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/updateInfoByKey.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/updateInfoByKey.ts","node_modules/spinal-spatial-referential/dist/v2/utils/archi/updateInfo.js","node_modules/spinal-spatial-referential/src/v2/utils/archi/updateInfo.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getBimContextByBimFileId.js","node_modules/spinal-spatial-referential/src/v2/utils/getBimContextByBimFileId.ts","node_modules/spinal-spatial-referential/dist/v2/constant.js","node_modules/spinal-spatial-referential/src/v2/constant.ts","node_modules/spinal-spatial-referential/dist/v2/utils/guid.js","node_modules/spinal-spatial-referential/src/v2/utils/guid.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/index.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/index.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getBBoxAndMatrixs.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getBBoxAndMatrixs.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getModelByModelId.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getModelByModelId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getBBoxAndMatrix.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getBBoxAndMatrix.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getModifiedWorldBoundingBox.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getModifiedWorldBoundingBox.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getBimFileIdByModelId.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getBimFileIdByModelId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getBulkProperties.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getBulkProperties.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getDbIdChildren.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getDbIdChildren.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getLeafDbIdsByModelId.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getLeafDbIdsByModelId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getLeafDbIds.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getLeafDbIds.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getLeafDbIdsByModel.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getLeafDbIdsByModel.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getModelByBimFileIdLoaded.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getModelByBimFileIdLoaded.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getPointOffset.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getPointOffset.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getPropItemFromPropPath.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getPropItemFromPropPath.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getPropPath.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getPropPath.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/isProjectionGroup.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/isProjectionGroup.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/ProjectionItem/ProjectionGroup.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/ProjectionItem/ProjectionGroup.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/transformRtzToXyz.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/transformRtzToXyz.ts","node_modules/spinal-spatial-referential/dist/v2/utils/waitGetServerId.js","node_modules/spinal-spatial-referential/src/v2/utils/waitGetServerId.ts","node_modules/spinal-spatial-referential/dist/v2/utils/waitPathSendToHub.js","node_modules/spinal-spatial-referential/src/v2/utils/waitPathSendToHub.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/setLevelInContextGeo.js","node_modules/spinal-spatial-referential/src/v2/scripts/setLevelInContextGeo.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/transformArchi.js","node_modules/spinal-spatial-referential/src/v2/scripts/transformArchi.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/updateDbIds.js","node_modules/spinal-spatial-referential/src/v2/scripts/updateDbIds.ts","node_modules/spinal-spatial-referential/dist/v2/utils/getExternalIdMapping.js","node_modules/spinal-spatial-referential/src/v2/utils/getExternalIdMapping.ts","node_modules/spinal-spatial-referential/dist/v2/scripts/updateRoomDbId.js","node_modules/spinal-spatial-referential/src/v2/scripts/updateRoomDbId.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/index.js","node_modules/spinal-spatial-referential/src/v2/cmd/index.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/consumeCmdGeo/consumeCmdGeo.js","node_modules/spinal-spatial-referential/src/v2/cmd/consumeCmdGeo/consumeCmdGeo.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/consumeCmdProjection/consumeCmdProjection.js","node_modules/spinal-spatial-referential/src/v2/cmd/consumeCmdProjection/consumeCmdProjection.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdGeo/generateCmdGeo.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdGeo/generateCmdGeo.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdGeo/handleFloorCmdNew.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdGeo/handleFloorCmdNew.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdGeo/handleFloorUpdate.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdGeo/handleFloorUpdate.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/createCmdNotFound.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/createCmdNotFound.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/getDiffSelection.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/getDiffSelection.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/createCmdNotFoundItm.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/createCmdNotFoundItm.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/getCategory.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/getCategory.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/getCenterPos.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/getCenterPos.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/createCmdProjection.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/createCmdProjection.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getProperties.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getProperties.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/getIntersectionRoom.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/getIntersectionRoom.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/getBimObjFromBimFileId.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/getBimObjFromBimFileId.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/getBimObjsOfBimFileId.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/getBimObjsOfBimFileId.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/createCmdProjItm.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/createCmdProjItm.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/saveCmd/decodeCmds.js","node_modules/spinal-spatial-referential/src/v2/cmd/saveCmd/decodeCmds.ts","node_modules/compress-json/dist/index.js","node_modules/compress-json/dist/core.js","node_modules/compress-json/dist/debug.js","node_modules/compress-json/dist/encode.js","node_modules/compress-json/dist/number.js","node_modules/compress-json/dist/memory.js","node_modules/compress-json/dist/config.js","node_modules/compress-json/dist/helpers.js","node_modules/spinal-spatial-referential/node_modules/pako/dist/pako.esm.mjs","node_modules/spinal-spatial-referential/dist/v2/cmd/saveCmd/getCmdServId.js","node_modules/spinal-spatial-referential/src/v2/cmd/saveCmd/getCmdServId.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/saveCmd/saveCmdsGenerateGeo.js","node_modules/spinal-spatial-referential/src/v2/cmd/saveCmd/saveCmdsGenerateGeo.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/saveCmd/saveCmds.js","node_modules/spinal-spatial-referential/src/v2/cmd/saveCmd/saveCmds.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/saveCmd/getContextGeneration.js","node_modules/spinal-spatial-referential/src/v2/cmd/saveCmd/getContextGeneration.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/saveCmd/saveCmdsProjectionGeo.js","node_modules/spinal-spatial-referential/src/v2/cmd/saveCmd/saveCmdsProjectionGeo.ts","node_modules/spinal-spatial-referential/dist/v2/cmd/generateCmdProjection/createCmdProjectionForManualAssing.js","node_modules/spinal-spatial-referential/src/v2/cmd/generateCmdProjection/createCmdProjectionForManualAssing.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/index.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/index.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/checkDiffObj.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/checkDiffObj.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/diffBimObjs.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/diffBimObjs.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/getNodeFromGeo.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/getNodeFromGeo.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/findNodeArchiWithSpinalNode.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/findNodeArchiWithSpinalNode.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/diffFloorWithContextGeo.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/diffFloorWithContextGeo.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/getFloorFromContext.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/getFloorFromContext.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/getDiffRefFloor.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/getDiffRefFloor.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/diffRoomChildren.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/diffRoomChildren.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/diffInfoAttr.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/diffInfoAttr.ts","node_modules/spinal-spatial-referential/dist/v2/diffArchi/floorArchiHasChildren.js","node_modules/spinal-spatial-referential/src/v2/diffArchi/floorArchiHasChildren.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/index.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/index.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionModels/ProjectionItemModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionModels/ProjectionItemModel.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/ProjectionItem/ProjectionItem.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/ProjectionItem/ProjectionItem.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionModels/ProjectionOffsetModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionModels/ProjectionOffsetModel.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionModels/ProjectionGroupItemModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionModels/ProjectionGroupItemModel.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionModels/ProjectionGroupModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionModels/ProjectionGroupModel.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/UxUtils/addSelectionToList.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/UxUtils/addSelectionToList.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/UxUtils/addProjectItem.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/UxUtils/addProjectItem.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/UxUtils/PreviewCenter.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/UxUtils/PreviewCenter.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/UxUtils/addViewerSelection.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/UxUtils/addViewerSelection.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/UxUtils/addToProjectionGroup.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/UxUtils/addToProjectionGroup.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/ProjectionItem/ProjectionGroupConfig.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/ProjectionItem/ProjectionGroupConfig.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionConfig/getConfigFromContext.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionConfig/getConfigFromContext.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionConfig/createConfigNode.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionConfig/createConfigNode.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionConfig/removeConfigFromContext.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionConfig/removeConfigFromContext.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionConfig/getProjectionConfig.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionConfig/getProjectionConfig.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projectionConfig/createConfigNodeAndProjGroup.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projectionConfig/createConfigNodeAndProjGroup.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/rayUtils/raycastWorker.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/rayUtils/raycastWorker.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/rayUtils/raycastJob.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/rayUtils/raycastJob.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/rayUtils/enumMeshTriangles.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/rayUtils/enumMeshTriangles.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/rayUtils/workerManager.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/rayUtils/workerManager.ts","node_modules/webworkify/index.js","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projection/getIntersects.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projection/getIntersects.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projection/raycastItemToMesh.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projection/raycastItemToMesh.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projection/mergeIntersectRes.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projection/mergeIntersectRes.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projection/mergeRoomRef.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projection/mergeRoomRef.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/projection/getRoomRef.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/projection/getRoomRef.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignFloor/getRefFloorZMinMax.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignFloor/getRefFloorZMinMax.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignFloor/getFloorChildrenDbIdOfModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignFloor/getFloorChildrenDbIdOfModel.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignFloor/getFloorPropForModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignFloor/getFloorPropForModel.ts","node_modules/spinal-spatial-referential/dist/v2/utils/projection/getAllModelLoaded.js","node_modules/spinal-spatial-referential/src/v2/utils/projection/getAllModelLoaded.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignFloor/getFloorsDbIdOfModel.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignFloor/getFloorsDbIdOfModel.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignFloor/getRoomRefByFloor.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignFloor/getRoomRefByFloor.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignView/getSpatialTree.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignView/getSpatialTree.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignView/getDataAssing.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignView/getDataAssing.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignView/viewDataAssignInViewer.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignView/viewDataAssignInViewer.ts","node_modules/spinal-spatial-referential/dist/v2/ProjectObjectInContext/assignView/getRoomNameFromSelectFloor.js","node_modules/spinal-spatial-referential/src/v2/ProjectObjectInContext/assignView/getRoomNameFromSelectFloor.ts"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SpatialManager_1 = require(\"./SpatialManager\");\nconst Config_1 = require(\"./Config\");\nconst constants = __importStar(require(\"./Constant\"));\n__exportStar(require(\"./v2/index\"), exports);\nexports.default = {\n    config: Config_1.config,\n    constants,\n    SpatialManager: SpatialManager_1.SpatialManager,\n};\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpatialManager } from './SpatialManager';\nimport { config } from './Config';\nimport * as constants from './Constant';\nexport * from './v2/index';\n\nexport default {\n  config: config,\n  constants,\n  SpatialManager,\n};\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpatialManager = void 0;\nconst spinal_env_viewer_context_geographic_service_1 = __importDefault(require(\"spinal-env-viewer-context-geographic-service\"));\n// import { serviceDocumentation } from 'spinal-env-viewer-plugin-documentation-service'\nconst createFctGetArchi_1 = __importDefault(require(\"./createFctGetArchi\"));\nconst Config_1 = require(\"./Config\");\nconst Constant_1 = require(\"./Constant\");\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst SpatialConfig_1 = require(\"./models/SpatialConfig\");\nconst BuildingManager_1 = require(\"./managers/BuildingManager\");\nconst FloorManager_1 = require(\"./managers/FloorManager\");\nconst RoomManager_1 = require(\"./managers/RoomManager\");\nconst consumeBatch_1 = require(\"./utils/consumeBatch\");\n__exportStar(require(\"./interfaces\"), exports);\nclass SpatialManager {\n    constructor() {\n        this.modelArchiLib = new Map();\n        //Todo remove\n        this.initialized = this.init();\n        window.getArchi = this.getArchiModel.bind(this);\n    }\n    init() {\n        this.initialized = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.waitForInitialization();\n            this.spatialConfig = yield this.getSpatialConfig();\n            if (typeof this.spatialConfig === 'undefined')\n                reject('SpatialConfiguration undefined');\n            // let contextName = \"spatial\";\n            // if (typeof this.spatialConfig.contextName !== \"undefined\") {\n            //   // @ts-ignore\n            //   contextName = this.spatialConfig.contextName.get()\n            // }\n            // this.context = await SpatialManager.getContext(contextName);\n            // this.contextId = this.context.info.id.get();\n            this.buildingManager = new BuildingManager_1.BuildingManager();\n            this.floorManager = new FloorManager_1.FloorManager();\n            this.roomManager = new RoomManager_1.RoomManager();\n            resolve();\n        }));\n        return this.initialized;\n    }\n    generateContext(configName, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.model = model;\n                yield this.init();\n                this.modelArchi = yield this.getArchiModel(model, configName);\n                const config = this.spatialConfig.getConfig(configName);\n                config.mod_attr('archi', this.modelArchi);\n                let building = yield this.getBuilding(config);\n                if (typeof building !== 'undefined' && building.hasOwnProperty('id'))\n                    building = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(building.id.get());\n                const context = yield this.getContextFromConfig(config);\n                const contextId = context.getId().get();\n                if (typeof building === 'undefined') {\n                    building = yield spinal_env_viewer_context_geographic_service_1.default.addBuilding(contextId, contextId, config.basic.buildingName.get());\n                }\n                const prom = [];\n                for (const key in this.modelArchi) {\n                    if (this.modelArchi.hasOwnProperty(key) &&\n                        Object.entries(this.modelArchi[key].children).length !== 0 &&\n                        this.modelArchi[key].constructor === Object) {\n                        const level = this.modelArchi[key];\n                        const buildingName = this.floorManager.getPropertyValueByName(level.properties.properties, 'name');\n                        // prom.push(\n                        yield this.createFloor(contextId, building.info.id.get(), buildingName, level, model);\n                        // )\n                    }\n                }\n                yield Promise.all(prom);\n            }\n            catch (e) {\n                console.error(e);\n            }\n            console.log('generateContext DONE');\n        });\n    }\n    addRoomValueParam(target, other) {\n        const area = this.roomManager.getPropertyValueByName(other.properties.properties, 'Area');\n        const perimeter = this.roomManager.getPropertyValueByName(other.properties.properties, 'Perimeter');\n        const volume = this.roomManager.getPropertyValueByName(other.properties.properties, 'Volume');\n        for (const targetParam of target) {\n            if (targetParam.name === 'Area')\n                targetParam.value = round(targetParam.value + area);\n            if (targetParam.name === 'Perimeter')\n                targetParam.value = round(targetParam.value + perimeter);\n            if (targetParam.name === 'Volume')\n                targetParam.value = round(targetParam.value + volume);\n        }\n    }\n    addIfExist(array, room) {\n        const roomNuber = this.roomManager.getPropertyValueByName(room.properties.properties, 'Number');\n        const target = array.find((e) => {\n            return (this.roomManager.getPropertyValueByName(e.properties.properties, 'Number') === roomNuber);\n        });\n        if (target) {\n            this.addRoomValueParam(target.properties.properties, room);\n            return false;\n        }\n        return true;\n    }\n    getRoomName(room) {\n        const roomNbr = this.roomManager.getPropertyValueByName(room.properties.properties, 'Number');\n        const roomName = this.roomManager.getPropertyValueByName(room.properties.properties, 'name');\n        return `${roomNbr}-${roomName}`;\n    }\n    createRooms(rooms, contextId, floorId, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodeAttrNames = ['dbId', 'externalId'];\n            const tmpRoom = [];\n            for (const key in rooms) {\n                if (rooms.hasOwnProperty(key))\n                    if (this.addIfExist(tmpRoom, rooms[key])) {\n                        tmpRoom.push(rooms[key]);\n                    }\n            }\n            const proms = [];\n            const resolveBatch = [];\n            let turn = 0;\n            let j = 0;\n            while (j < tmpRoom.length) {\n                for (j = turn * Config_1.config.batchSize; j < (turn + 1) * Config_1.config.batchSize && j < tmpRoom.length; j++) {\n                    const room = tmpRoom[j];\n                    proms.push(spinal_env_viewer_context_geographic_service_1.default.addRoom(contextId, floorId, this.getRoomName(room)));\n                }\n                const tmp = yield this.waitForFileSystem(proms);\n                resolveBatch.push(...tmp);\n                turn++;\n            }\n            for (let i = 0; i < resolveBatch.length; i++) {\n                const roomName = resolveBatch[i].info.name.get();\n                const room = tmpRoom.find((r) => {\n                    return this.getRoomName(r) === roomName;\n                });\n                if (typeof room !== 'undefined' && typeof room.children !== 'undefined') {\n                    const prom = [\n                        this.roomManager.addAttribute(resolveBatch[i], room.properties.properties),\n                    ];\n                    for (const child of room.children) {\n                        const objName = this.roomManager.getPropertyValueByName(child.properties, 'name');\n                        prom.push(this.addReferenceObject(child.dbId, objName, model, resolveBatch[i], Constant_1.GEO_REFERENCE_ROOM_RELATION).catch((e) => e));\n                    }\n                    yield Promise.all(prom);\n                    // add or set attribut to  dbId & externalId\n                    for (const nodeAttrName of nodeAttrNames) {\n                        if (typeof resolveBatch[i].info[nodeAttrName] === 'undefined')\n                            resolveBatch[i].info.add_attr(nodeAttrName, room.properties[nodeAttrName]);\n                        else if (resolveBatch[i].info[nodeAttrName].get() !==\n                            room.properties[nodeAttrName]) {\n                            resolveBatch[i].info[nodeAttrName].set(room.properties[nodeAttrName]);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Waits for the nodes to be in the FileSystem.\n     * @param {Array<Promise>} promises Array of promises containing the nodes\n     * @returns {Promise<any>} An empty promise\n     */\n    waitForFileSystem(promises) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodes = yield Promise.all(promises);\n            let unResolvedNode = [];\n            return new Promise((resolve) => {\n                const inter = setInterval(() => {\n                    unResolvedNode = nodes.filter((node) => {\n                        return (window.FileSystem._objects[node._server_id] === undefined);\n                    });\n                    if (unResolvedNode.length === 0) {\n                        clearInterval(inter);\n                        resolve(nodes);\n                    }\n                }, 500);\n            });\n        });\n    }\n    addReferenceObject(dbId, name, model, targetNode, relationName = Constant_1.GEO_REFERENCE_RELATION) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // @ts-ignore\n            let bimObj = yield window.spinal.BimObjectService.getBIMObject(dbId, model);\n            if (typeof bimObj === 'undefined') {\n                // @ts-ignore\n                bimObj = yield window.spinal.BimObjectService.createBIMObject(dbId, name, model);\n            }\n            if (typeof bimObj.id !== 'undefined') {\n                // @ts-ignore\n                bimObj = window.spinal.spinalGraphService.nodes[bimObj.id.get()];\n            }\n            const childrenIds = targetNode.getChildrenIds();\n            const idx = childrenIds.indexOf(bimObj.info.id.get());\n            if (idx !== -1)\n                return bimObj;\n            return targetNode.addChild(bimObj, relationName, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n        });\n    }\n    addRefStructureToLevel(levelId, structures, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prom = [];\n            const fct = (dbId, name, model, targetNode) => {\n                return this.addReferenceObject(dbId, name, model, targetNode).catch((e) => e);\n            };\n            try {\n                for (const key in structures) {\n                    if (structures.hasOwnProperty(key)) {\n                        const objName = this.roomManager.getPropertyValueByName(structures[key].properties.properties, 'name');\n                        prom.push(fct.bind(this, structures[key].properties.dbId, objName, model, \n                        // @ts-ignore\n                        spinal.spinalGraphService.nodes[levelId]));\n                    }\n                }\n                yield (0, consumeBatch_1.consumeBatch)(prom, 10);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        });\n    }\n    addRefStructureToRoom(levelId, structures, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prom = [];\n            const fct = (dbId, name, model, targetNode) => {\n                return this.addReferenceObject(dbId, name, model, targetNode, Constant_1.GEO_REFERENCE_ROOM_RELATION).catch((e) => e);\n            };\n            try {\n                for (const structure of structures) {\n                    let props;\n                    let strucdbId;\n                    if (typeof structure.properties.properties === 'undefined') {\n                        props = structure.properties;\n                        // @ts-ignore\n                        strucdbId = structure.dbId;\n                    }\n                    else {\n                        props = structure.properties.properties;\n                        strucdbId = structure.properties.dbId;\n                    }\n                    const objName = this.roomManager.getPropertyValueByName(props, 'name');\n                    prom.push(fct.bind(this, strucdbId, objName, model, \n                    // @ts-ignore\n                    spinal.spinalGraphService.nodes[levelId]));\n                }\n                yield (0, consumeBatch_1.consumeBatch)(prom, 10);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        });\n    }\n    createFloor(contextId, buildingId, name, level, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const floorProps = level.properties;\n            const rooms = level.children;\n            const structures = level.structures;\n            try {\n                const floor = yield spinal_env_viewer_context_geographic_service_1.default.addFloor(contextId, buildingId, name);\n                floor.info.add_attr({ externalId: floorProps.externalId });\n                yield this.floorManager.addAttribute(floor, floorProps.properties);\n                yield this.createRooms(rooms, contextId, floor.info.id.get(), model);\n                yield this.addRefStructureToLevel(floor.info.id.get(), structures, model);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        });\n    }\n    updateContext(configName, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.model = model;\n                yield this.init();\n                this.modelArchi = yield this.getArchiModel(model, configName);\n                const config = this.spatialConfig.getConfig(configName);\n                const oldArchi = config.archi.get();\n                let building = yield this.getBuilding(config);\n                if (typeof building !== 'undefined' && building.hasOwnProperty('id'))\n                    building = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(building.id.get());\n                const cmpObject = this.compareArchi(oldArchi, this.modelArchi);\n                const context = yield this.getContextFromConfig(config);\n                const contextId = context.getId().get();\n                for (const levelId in cmpObject.updated.levels) {\n                    if (cmpObject.updated.levels.hasOwnProperty(levelId))\n                        yield this.updateLevel(building, cmpObject.updated.levels[levelId], model);\n                }\n                for (const roomId in cmpObject.updated.rooms) {\n                    if (cmpObject.updated.rooms.hasOwnProperty(roomId)) {\n                        const levelId = cmpObject.updated.rooms[roomId].levelId;\n                        const room = cmpObject.updated.rooms[roomId].room;\n                        yield this.updateRoom(building, levelId, room, model);\n                    }\n                }\n                for (const levelId in cmpObject.new.rooms) {\n                    if (!cmpObject.new.rooms.hasOwnProperty(levelId))\n                        continue;\n                    const level = yield this.findLevel(building, levelId);\n                    const proms = [];\n                    for (let i = 0; i < cmpObject.new.rooms[levelId].length; i++) {\n                        const room = cmpObject.new.rooms[levelId][i];\n                        proms.push(this.updateContextCreateRoom(contextId, room, level, model)\n                        // GeographicService.addRoom(contextId, level.id.get(),\n                        //   this.roomManager.getPropertyValueByName(room.properties.properties, 'name')\n                        // )\n                        );\n                    }\n                    yield Promise.all(proms).then(console.log);\n                }\n                // for (let levelId in cmpObject.deleted.levels) {\n                //   if (cmpObject.deleted.levels.hasOwnProperty(levelId)) {\n                //   }\n                // }\n                for (const roomId in cmpObject.deleted.rooms) {\n                    if (cmpObject.deleted.rooms.hasOwnProperty(roomId)) {\n                        const levelId = cmpObject.deleted.rooms[roomId].levelId;\n                        const room = cmpObject.deleted.rooms[roomId].room;\n                        const levelRef = yield this.findLevel(building, levelId);\n                        const roomRef = yield this.findRoom(building, levelId, room.properties.externalId);\n                        yield this.removeRoom(levelRef, roomRef);\n                    }\n                }\n                config.mod_attr('archi', this.modelArchi);\n            }\n            catch (e) {\n                console.error(e);\n            }\n            console.log('generateContext DONE');\n        });\n    }\n    updateContextCreateRoom(contextId, room, level, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodeAttrNames = ['dbId', 'externalId'];\n            const roomRealNode = yield spinal_env_viewer_context_geographic_service_1.default.addRoom(contextId, level.id.get(), this.roomManager.getPropertyValueByName(room.properties.properties, 'name'));\n            if (typeof room !== 'undefined' && typeof room.children !== 'undefined') {\n                const prom = [\n                    this.roomManager.addAttribute(roomRealNode, room.properties.properties),\n                ];\n                for (const child of room.children) {\n                    const objName = this.roomManager.getPropertyValueByName(child.properties, 'name');\n                    prom.push(this.addReferenceObject(child.dbId, objName, model, roomRealNode, Constant_1.GEO_REFERENCE_ROOM_RELATION).catch((e) => e));\n                }\n                yield Promise.all(prom);\n                // add or set attribut to  dbId & externalId\n                for (const nodeAttrName of nodeAttrNames) {\n                    if (typeof roomRealNode.info[nodeAttrName] === 'undefined')\n                        roomRealNode.info.add_attr(nodeAttrName, room.properties[nodeAttrName]);\n                    else if (roomRealNode.info[nodeAttrName].get() !==\n                        room.properties[nodeAttrName]) {\n                        roomRealNode.info[nodeAttrName].set(room.properties[nodeAttrName]);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * remove $room from the floor, the .room context and at it to the invalid\n     * context\n     * @param room\n     */\n    removeRoom(levelRef, roomRef) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const room = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(roomRef.id.get());\n            const floor = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(levelRef.id.get());\n            yield floor.removeChild(room, Constant_1.GEO_ROOM_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE); // remove the room from the floor\n            const roomReferenceContext = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext(spinal_env_viewer_context_geographic_service_1.default.constants.ROOM_REFERENCE_CONTEXT);\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.removeChild(roomReferenceContext.info.id.get(), room.info.id.get(), Constant_1.GEO_ROOM_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n            yield this.addToInvalidContext(room.info.id.get());\n        });\n    }\n    addToInvalidContext(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext('.invalid');\n            if (typeof context === 'undefined')\n                context = yield spinal_env_viewer_graph_service_1.SpinalGraphService.addContext('.invalid', 'invalid');\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(context.info.id.get(), id, 'Invalid', spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n        });\n    }\n    getFloorFromRoom(room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.warn(\"SpatialManager.getFloorFromRoom doesn't work\", room);\n            // let parents = await room.getParents();\n            // for (let i = 0; i < parents.length; i++) {\n            //   if (parents[i].info.type.get() === \"geographicFloor\")\n            //     return parents[i];\n            // }\n            // return undefined;\n        });\n    }\n    updateLevel(building, level, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // @ts-ignore\n            spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(building);\n            const levelNodeRef = yield this.findLevel(building, level.properties.externalId);\n            const levelId = levelNodeRef.id.get();\n            const levelRealNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(levelId);\n            yield this.floorManager.addAttribute(levelRealNode, level.properties.properties);\n            yield this.addRefStructureToLevel(levelId, level.structures, model);\n        });\n    }\n    updateRoom(building, levelExternId, room, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // @ts-ignore\n            spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(building);\n            const roomNodeRef = yield this.findRoom(building, levelExternId, room.properties.externalId);\n            const roomId = roomNodeRef.id.get();\n            const roomRealNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(roomId);\n            yield this.roomManager.addAttribute(roomRealNode, room.properties.properties);\n            if (typeof roomRealNode.info.dbId !== 'undefined') {\n                roomRealNode.info.dbId.set(room.properties.dbId);\n            }\n            else {\n                roomRealNode.info.add_attr('dbId', room.properties.dbId);\n            }\n            // missing check refObject\n            yield this.addRefStructureToRoom(roomId, room.children, model);\n        });\n    }\n    // private async updateRoom(externalId: string, room: Room) {\n    //   this.roomManager\n    //     .getByExternalId(externalId,\n    //       SpinalGraphService.getContext(\n    //         GeographicService.constants.ROOM_REFERENCE_CONTEXT).info.id.get(), GEO_ROOM_RELATION)\n    //     .then(r => {\n    //       this.roomManager.addAttribute(SpinalGraphService.getRealNode(r.id.get()), room.properties.properties);\n    //       // @ts-ignore\n    //       SpinalGraphService.modifyNode(r.id.get(), { dbId: room.properties.dbId });\n    //     })\n    //   // missing check refObject\n    // }\n    createRoomObj(levelId, room) {\n        return { levelId, room };\n    }\n    compareArchi(oldArchi, newArchi) {\n        const cmpObj = {\n            deleted: { levels: {}, rooms: {} },\n            updated: { levels: {}, rooms: {} },\n            new: { levels: {}, rooms: {} },\n        };\n        for (const levelId in oldArchi) {\n            const oldLevel = oldArchi[levelId];\n            if (newArchi.hasOwnProperty(levelId)) {\n                // level exist in old and new => level update\n                const newArchiLvl = newArchi[levelId];\n                for (const roomExternId in oldLevel.children) {\n                    if (oldLevel.children.hasOwnProperty(roomExternId) &&\n                        typeof oldLevel.children[roomExternId].children !== 'undefined') {\n                        // exist in old and have children\n                        cmpObj.updated.levels[levelId] = newArchiLvl;\n                        const levelExternalId = newArchiLvl.properties.externalId;\n                        if (newArchiLvl.children[roomExternId] &&\n                            newArchiLvl.children[roomExternId].children) {\n                            cmpObj.updated.rooms[roomExternId] = this.createRoomObj(levelExternalId, newArchiLvl.children[roomExternId]);\n                        }\n                        else {\n                            cmpObj.deleted.rooms[roomExternId] = this.createRoomObj(levelExternalId, oldLevel.children[roomExternId]);\n                        }\n                    }\n                }\n            }\n            else {\n                //delete floor\n                cmpObj.deleted.levels[levelId] = oldArchi[levelId];\n                for (const roomExternId in oldLevel.children) {\n                    //delete all rooms\n                    if (oldLevel.children.hasOwnProperty(roomExternId)) {\n                        const levelExternalId = oldLevel.properties.externalId;\n                        cmpObj.deleted.rooms[roomExternId] = this.createRoomObj(levelExternalId, oldArchi[levelId].children[roomExternId]);\n                    }\n                }\n            }\n        }\n        for (const levelId in newArchi) {\n            if (!newArchi.hasOwnProperty(levelId)) {\n                continue;\n            }\n            const newLevel = newArchi[levelId];\n            if (oldArchi.hasOwnProperty(levelId)) {\n                //level already exist\n                for (const roomExternal in newLevel.children) {\n                    if (newLevel.children.hasOwnProperty(roomExternal) &&\n                        typeof newLevel.children[roomExternal].children !== 'undefined' &&\n                        (!oldArchi[levelId].children.hasOwnProperty(roomExternal) ||\n                            typeof oldArchi[levelId].children[roomExternal].children ===\n                                'undefined')) {\n                        const lvlExternId = newLevel.properties.externalId;\n                        if (typeof cmpObj.new.rooms[lvlExternId] === 'undefined') {\n                            cmpObj.new.rooms[lvlExternId] = [];\n                        }\n                        cmpObj.new.rooms[lvlExternId].push(newLevel.children[roomExternal]);\n                    }\n                }\n            }\n            else {\n                //add level and rooms to new\n                cmpObj.new.levels[levelId] = newLevel;\n                for (const roomExternal in newLevel.children) {\n                    if (newLevel.children.hasOwnProperty(roomExternal) &&\n                        typeof newLevel.children[levelId].children !== 'undefined') {\n                        //add room if it has a floor\n                        const lvlExternId = newLevel.properties.externalId;\n                        if (typeof cmpObj.new.rooms[lvlExternId] === 'undefined') {\n                            cmpObj.new.rooms[lvlExternId] = [];\n                        }\n                        cmpObj.new.rooms[lvlExternId].push(newLevel.children[roomExternal]);\n                    }\n                }\n            }\n        }\n        return cmpObj;\n    }\n    static getContext(contextName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext(contextName);\n            if (typeof context === 'undefined' || context === null) {\n                context = yield spinal_env_viewer_context_geographic_service_1.default.createContext(contextName);\n            }\n            return context;\n        });\n    }\n    getSpatialConfig() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext('.config');\n            if (typeof context === 'undefined')\n                context = yield spinal_env_viewer_graph_service_1.SpinalGraphService.addContext('.config', 'system configuration', undefined);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(context.info.id.get(), [\n                'hasConfig',\n            ]).then((children) => __awaiter(this, void 0, void 0, function* () {\n                let config;\n                if (typeof children !== 'undefined')\n                    for (let i = 0; i < children.length; i++) {\n                        if (children[i].type.get() === 'SpatialConfig')\n                            config = children[i];\n                    }\n                if (typeof config === 'undefined') {\n                    // create default config\n                    config = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({\n                        name: 'spatial config',\n                        type: 'SpatialConfig',\n                    }, new SpatialConfig_1.SpatialConfig());\n                    yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(context.info.id.get(), config, 'hasConfig', spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE);\n                    config = spinal_env_viewer_graph_service_1.SpinalGraphService.getNode(config);\n                }\n                return config.element.load();\n            }));\n        });\n    }\n    /**\n     * use propertyDb to create a representation of the architecture of the model\n     * @private\n     * @param {Model} model\n     * @returns {Promise<ModelArchi>}\n     * @memberof SpatialManager\n     */\n    getArchiModel(model, configName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.modelArchiLib.has(model))\n                return this.modelArchiLib.get(model);\n            //TODO une fois sur la version 7 du viewer la fonction\n            // executerUserFonction permetera de passer des parametre a userFunction\n            this.spatialConfig = yield this.getSpatialConfig();\n            // let objectProperties = this.spatialConfig.objectProperties.get();\n            // let floorAttrn = this.spatialConfig.revitAttribute.floors.attrName.get();\n            const config = this.spatialConfig.getConfig(configName);\n            if (!config)\n                throw new Error('No Config Name found');\n            const fct = (0, createFctGetArchi_1.default)(config.get());\n            const modelArchi = yield model\n                .getPropertyDb()\n                // @ts-ignore\n                .executeUserFunction(fct);\n            console.log('modelArchi', modelArchi);\n            this.modelArchiLib.set(model, modelArchi);\n            return modelArchi;\n        });\n    }\n    findLevel(building, externalId) {\n        return this.floorManager.getByExternalId(externalId, building.info.id.get(), Constant_1.GEO_FLOOR_RELATION);\n    }\n    findRoom(building, floorExternId, roomExternId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const level = yield this.findLevel(building, floorExternId);\n            return this.roomManager.getByExternalId(roomExternId, level.id.get(), Constant_1.GEO_ROOM_RELATION);\n        });\n    }\n    getContextFromConfig(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(config.contextId.get());\n            if (typeof context === 'undefined' || context === null) {\n                context = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext(config.contextName.get());\n            }\n            if (typeof context === 'undefined' || context === null) {\n                context = yield spinal_env_viewer_context_geographic_service_1.default.createContext(config.contextName.get());\n            }\n            config.contextId.set(context.info.id.get());\n            return context;\n        });\n    }\n    getBuilding(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const context = yield this.getContextFromConfig(config);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(context.info.id.get(), [\n                Constant_1.GEO_BUILDING_RELATION,\n            ]).then((children) => {\n                if (typeof children === 'undefined')\n                    return undefined;\n                for (let i = 0; i < children.length; i++) {\n                    const building = children[i];\n                    if (building.name.get() === config.basic.buildingName.get())\n                        return building;\n                }\n                return undefined;\n            });\n        });\n    }\n    getFloorFinish(configName, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.modelArchi = yield this.getArchiModel(model, configName);\n            const floorFinish = [];\n            for (const key in this.modelArchi) {\n                if (this.modelArchi.hasOwnProperty(key)) {\n                    for (const roomId in this.modelArchi[key].children) {\n                        if (this.modelArchi[key].children.hasOwnProperty(roomId)) {\n                            const room = this.modelArchi[key].children[roomId];\n                            if (typeof room.children !== 'undefined')\n                                floorFinish.push(...room.children);\n                        }\n                    }\n                }\n            }\n            return floorFinish;\n        });\n    }\n    getRoomIdFromDbId(externalId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const roomReferenceContext = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext(spinal_env_viewer_context_geographic_service_1.default.constants.ROOM_REFERENCE_CONTEXT);\n            const rooms = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(roomReferenceContext.info.id.get(), [Constant_1.GEO_ROOM_RELATION]);\n            for (let i = 0; i < rooms.length; i++) {\n                if (rooms[i].externalId.get() === externalId) {\n                    return rooms[i].id.get();\n                }\n            }\n        });\n    }\n    getRoomIdFromFloorFinish(floorId) {\n        for (const key in this.modelArchi) {\n            if (this.modelArchi.hasOwnProperty(key)) {\n                for (const roomId in this.modelArchi[key].children) {\n                    if (this.modelArchi[key].children.hasOwnProperty(roomId)) {\n                        const room = this.modelArchi[key].children[roomId];\n                        if (typeof room.children !== 'undefined')\n                            for (const roomChild of room.children) {\n                                if (roomChild.properties.dbId === floorId)\n                                    return room.properties.externalId;\n                            }\n                    }\n                }\n            }\n        }\n    }\n    getFloorFinishId(configName, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const floors = yield this.getFloorFinish(configName, model);\n            return floors.map((floor) => floor.properties.dbId);\n        });\n    }\n}\nexports.SpatialManager = SpatialManager;\nfunction round(x, digits = 2) {\n    return parseFloat(x.toFixed(digits));\n}\n//# sourceMappingURL=SpatialManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport Model = Autodesk.Viewing.Model;\nimport GeographicService from 'spinal-env-viewer-context-geographic-service';\n// import { serviceDocumentation } from 'spinal-env-viewer-plugin-documentation-service'\nimport createFctGetArchi from './createFctGetArchi';\nimport { config } from './Config';\nimport {\n  GEO_REFERENCE_RELATION,\n  GEO_REFERENCE_ROOM_RELATION,\n  GEO_BUILDING_RELATION,\n  GEO_FLOOR_RELATION,\n  GEO_ROOM_RELATION,\n} from './Constant';\n\nimport {\n  SpinalContext,\n  SpinalNode,\n  SpinalGraphService,\n  SpinalNodeRef,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from 'spinal-env-viewer-graph-service';\nimport { SpatialConfig, IMConfigArchi } from './models/SpatialConfig';\nimport { BuildingManager } from './managers/BuildingManager';\nimport { FloorManager } from './managers/FloorManager';\nimport { RoomManager } from './managers/RoomManager';\nimport { consumeBatch } from './utils/consumeBatch';\n\nexport * from './interfaces';\nimport {\n  ComparisionObject,\n  ModelArchi,\n  LevelRooms,\n  LevelStructures,\n  Level,\n  Room,\n  Structure,\n  SpinalProps,\n} from './interfaces';\n\nexport class SpatialManager {\n  // private context: SpinalContext<any>;\n  // private contextId: string;\n  private spatialConfig: SpatialConfig;\n  private buildingManager: BuildingManager;\n  private floorManager: FloorManager;\n  private roomManager: RoomManager;\n  private initialized: Promise<any>;\n  private model: Model;\n  private modelArchi: ModelArchi;\n  private modelArchiLib = new Map<Model, ModelArchi>();\n\n  constructor() {\n    //Todo remove\n    this.initialized = this.init();\n    (<any>window).getArchi = this.getArchiModel.bind(this);\n  }\n\n  public init(): Promise<void> {\n    this.initialized = new Promise<void>(async (resolve, reject) => {\n      await SpinalGraphService.waitForInitialization();\n      this.spatialConfig = await this.getSpatialConfig();\n      if (typeof this.spatialConfig === 'undefined')\n        reject('SpatialConfiguration undefined');\n\n      // let contextName = \"spatial\";\n      // if (typeof this.spatialConfig.contextName !== \"undefined\") {\n      //   // @ts-ignore\n      //   contextName = this.spatialConfig.contextName.get()\n      // }\n      // this.context = await SpatialManager.getContext(contextName);\n      // this.contextId = this.context.info.id.get();\n      this.buildingManager = new BuildingManager();\n      this.floorManager = new FloorManager();\n      this.roomManager = new RoomManager();\n      resolve();\n    });\n    return this.initialized;\n  }\n\n  public async generateContext(configName: string, model: Model) {\n    try {\n      this.model = model;\n      await this.init();\n      this.modelArchi = await this.getArchiModel(model, configName);\n      const config = this.spatialConfig.getConfig(configName);\n      config.mod_attr('archi', this.modelArchi);\n      let building: any = await this.getBuilding(config);\n      if (typeof building !== 'undefined' && building.hasOwnProperty('id'))\n        building = SpinalGraphService.getRealNode(building.id.get());\n      const context = await this.getContextFromConfig(config);\n      const contextId = context.getId().get();\n      if (typeof building === 'undefined') {\n        building = await GeographicService.addBuilding(\n          contextId,\n          contextId,\n          config.basic.buildingName.get()\n        );\n      }\n      const prom = [];\n      for (const key in this.modelArchi) {\n        if (\n          this.modelArchi.hasOwnProperty(key) &&\n          Object.entries(this.modelArchi[key].children).length !== 0 &&\n          this.modelArchi[key].constructor === Object\n        ) {\n          const level = this.modelArchi[key];\n          const buildingName = this.floorManager.getPropertyValueByName(\n            level.properties.properties,\n            'name'\n          );\n          // prom.push(\n          await this.createFloor(\n            contextId,\n            building.info.id.get(),\n            buildingName,\n            level,\n            model\n          );\n          // )\n        }\n      }\n      await Promise.all(prom);\n    } catch (e) {\n      console.error(e);\n    }\n    console.log('generateContext DONE');\n  }\n\n  addRoomValueParam(target: SpinalProps[], other: Room) {\n    const area = this.roomManager.getPropertyValueByName(\n      other.properties.properties,\n      'Area'\n    );\n    const perimeter = this.roomManager.getPropertyValueByName(\n      other.properties.properties,\n      'Perimeter'\n    );\n    const volume = this.roomManager.getPropertyValueByName(\n      other.properties.properties,\n      'Volume'\n    );\n    for (const targetParam of target) {\n      if (targetParam.name === 'Area')\n        targetParam.value = round(targetParam.value + area);\n      if (targetParam.name === 'Perimeter')\n        targetParam.value = round(targetParam.value + perimeter);\n      if (targetParam.name === 'Volume')\n        targetParam.value = round(targetParam.value + volume);\n    }\n  }\n  addIfExist(array: Room[], room: Room) {\n    const roomNuber = this.roomManager.getPropertyValueByName(\n      room.properties.properties,\n      'Number'\n    );\n    const target = array.find((e) => {\n      return (\n        this.roomManager.getPropertyValueByName(\n          e.properties.properties,\n          'Number'\n        ) === roomNuber\n      );\n    });\n    if (target) {\n      this.addRoomValueParam(target.properties.properties, room);\n      return false;\n    }\n    return true;\n  }\n  getRoomName(room: Room) {\n    const roomNbr = this.roomManager.getPropertyValueByName(\n      room.properties.properties,\n      'Number'\n    );\n    const roomName = this.roomManager.getPropertyValueByName(\n      room.properties.properties,\n      'name'\n    );\n    return `${roomNbr}-${roomName}`;\n  }\n\n  async createRooms(\n    rooms: LevelRooms,\n    contextId: string,\n    floorId: string,\n    model: Model\n  ) {\n    const nodeAttrNames = ['dbId', 'externalId'];\n    const tmpRoom = [];\n    for (const key in rooms) {\n      if (rooms.hasOwnProperty(key))\n        if (this.addIfExist(tmpRoom, rooms[key])) {\n          tmpRoom.push(rooms[key]);\n        }\n    }\n\n    const proms = [];\n    const resolveBatch: SpinalNode<any>[] = [];\n    let turn = 0;\n    let j = 0;\n\n    while (j < tmpRoom.length) {\n      for (\n        j = turn * config.batchSize;\n        j < (turn + 1) * config.batchSize && j < tmpRoom.length;\n        j++\n      ) {\n        const room = tmpRoom[j];\n        proms.push(\n          GeographicService.addRoom(contextId, floorId, this.getRoomName(room))\n        );\n      }\n      const tmp: SpinalNode<any>[] = await this.waitForFileSystem(proms);\n      resolveBatch.push(...tmp);\n      turn++;\n    }\n\n    for (let i = 0; i < resolveBatch.length; i++) {\n      const roomName = resolveBatch[i].info.name.get();\n      const room = tmpRoom.find((r) => {\n        return this.getRoomName(r) === roomName;\n      });\n      if (typeof room !== 'undefined' && typeof room.children !== 'undefined') {\n        const prom: any[] = [\n          this.roomManager.addAttribute(\n            resolveBatch[i],\n            room.properties.properties\n          ),\n        ];\n        for (const child of room.children) {\n          const objName = this.roomManager.getPropertyValueByName(\n            child.properties,\n            'name'\n          );\n          prom.push(\n            this.addReferenceObject(\n              child.dbId,\n              objName,\n              model,\n              resolveBatch[i],\n              GEO_REFERENCE_ROOM_RELATION\n            ).catch((e) => e)\n          );\n        }\n        await Promise.all(prom);\n        // add or set attribut to  dbId & externalId\n        for (const nodeAttrName of nodeAttrNames) {\n          if (typeof resolveBatch[i].info[nodeAttrName] === 'undefined')\n            resolveBatch[i].info.add_attr(\n              nodeAttrName,\n              room.properties[nodeAttrName]\n            );\n          else if (\n            resolveBatch[i].info[nodeAttrName].get() !==\n            room.properties[nodeAttrName]\n          ) {\n            resolveBatch[i].info[nodeAttrName].set(\n              room.properties[nodeAttrName]\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Waits for the nodes to be in the FileSystem.\n   * @param {Array<Promise>} promises Array of promises containing the nodes\n   * @returns {Promise<any>} An empty promise\n   */\n  async waitForFileSystem(promises: Promise<any>[]): Promise<any[]> {\n    const nodes: any[] = await Promise.all(promises);\n    let unResolvedNode = [];\n    return new Promise((resolve) => {\n      const inter = setInterval(() => {\n        unResolvedNode = nodes.filter((node) => {\n          return (\n            (<any>window).FileSystem._objects[node._server_id] === undefined\n          );\n        });\n\n        if (unResolvedNode.length === 0) {\n          clearInterval(inter);\n          resolve(nodes);\n        }\n      }, 500);\n    });\n  }\n\n  async addReferenceObject(\n    dbId: number,\n    name: string,\n    model: Model,\n    targetNode: SpinalNode<any>,\n    relationName = GEO_REFERENCE_RELATION\n  ): Promise<SpinalNode<any>> {\n    // @ts-ignore\n    let bimObj = await window.spinal.BimObjectService.getBIMObject(dbId, model);\n    if (typeof bimObj === 'undefined') {\n      // @ts-ignore\n      bimObj = await window.spinal.BimObjectService.createBIMObject(\n        dbId,\n        name,\n        model\n      );\n    }\n    if (typeof bimObj.id !== 'undefined') {\n      // @ts-ignore\n      bimObj = window.spinal.spinalGraphService.nodes[bimObj.id.get()];\n    }\n\n    const childrenIds = targetNode.getChildrenIds();\n    const idx = childrenIds.indexOf(bimObj.info.id.get());\n    if (idx !== -1) return bimObj;\n    return targetNode.addChild(\n      bimObj,\n      relationName,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n  }\n\n  private async addRefStructureToLevel(\n    levelId: string,\n    structures: LevelStructures,\n    model: Model\n  ) {\n    const prom = [];\n    const fct = (dbId, name, model, targetNode) => {\n      return this.addReferenceObject(dbId, name, model, targetNode).catch(\n        (e) => e\n      );\n    };\n\n    try {\n      for (const key in structures) {\n        if (structures.hasOwnProperty(key)) {\n          const objName = this.roomManager.getPropertyValueByName(\n            structures[key].properties.properties,\n            'name'\n          );\n          prom.push(\n            fct.bind(\n              this,\n              structures[key].properties.dbId,\n              objName,\n              model,\n              // @ts-ignore\n              spinal.spinalGraphService.nodes[levelId]\n            )\n          );\n        }\n      }\n      await consumeBatch(prom, 10);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  private async addRefStructureToRoom(\n    levelId: string,\n    structures: Structure[],\n    model: Model\n  ) {\n    const prom = [];\n    const fct = (dbId, name, model, targetNode) => {\n      return this.addReferenceObject(\n        dbId,\n        name,\n        model,\n        targetNode,\n        GEO_REFERENCE_ROOM_RELATION\n      ).catch((e) => e);\n    };\n\n    try {\n      for (const structure of structures) {\n        let props: any;\n        let strucdbId: any;\n        if (typeof structure.properties.properties === 'undefined') {\n          props = structure.properties;\n          // @ts-ignore\n          strucdbId = structure.dbId;\n        } else {\n          props = structure.properties.properties;\n          strucdbId = structure.properties.dbId;\n        }\n\n        const objName = this.roomManager.getPropertyValueByName(props, 'name');\n        prom.push(\n          fct.bind(\n            this,\n            strucdbId,\n            objName,\n            model,\n            // @ts-ignore\n            spinal.spinalGraphService.nodes[levelId]\n          )\n        );\n      }\n      await consumeBatch(prom, 10);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  async createFloor(\n    contextId: string,\n    buildingId: string,\n    name: string,\n    level: Level,\n    model: Model\n  ) {\n    const floorProps = level.properties;\n    const rooms = level.children;\n    const structures = level.structures;\n    try {\n      const floor = await GeographicService.addFloor(\n        contextId,\n        buildingId,\n        name\n      );\n      floor.info.add_attr({ externalId: floorProps.externalId });\n      await this.floorManager.addAttribute(floor, floorProps.properties);\n      await this.createRooms(rooms, contextId, floor.info.id.get(), model);\n      await this.addRefStructureToLevel(floor.info.id.get(), structures, model);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  public async updateContext(configName: string, model: Model) {\n    try {\n      this.model = model;\n      await this.init();\n      this.modelArchi = await this.getArchiModel(model, configName);\n      const config = this.spatialConfig.getConfig(configName);\n      const oldArchi = config.archi.get();\n\n      let building: any = await this.getBuilding(config);\n      if (typeof building !== 'undefined' && building.hasOwnProperty('id'))\n        building = SpinalGraphService.getRealNode(building.id.get());\n      const cmpObject = this.compareArchi(oldArchi, this.modelArchi);\n      const context = await this.getContextFromConfig(config);\n      const contextId = context.getId().get();\n\n      for (const levelId in cmpObject.updated.levels) {\n        if (cmpObject.updated.levels.hasOwnProperty(levelId))\n          await this.updateLevel(\n            building,\n            cmpObject.updated.levels[levelId],\n            model\n          );\n      }\n\n      for (const roomId in cmpObject.updated.rooms) {\n        if (cmpObject.updated.rooms.hasOwnProperty(roomId)) {\n          const levelId = cmpObject.updated.rooms[roomId].levelId;\n          const room = cmpObject.updated.rooms[roomId].room;\n          await this.updateRoom(building, levelId, room, model);\n        }\n      }\n\n      for (const levelId in cmpObject.new.rooms) {\n        if (!cmpObject.new.rooms.hasOwnProperty(levelId)) continue;\n        const level = await this.findLevel(building, levelId);\n        const proms = [];\n        for (let i = 0; i < cmpObject.new.rooms[levelId].length; i++) {\n          const room = cmpObject.new.rooms[levelId][i];\n          proms.push(\n            this.updateContextCreateRoom(contextId, room, level, model)\n\n            // GeographicService.addRoom(contextId, level.id.get(),\n            //   this.roomManager.getPropertyValueByName(room.properties.properties, 'name')\n            // )\n          );\n        }\n        await Promise.all(proms).then(console.log);\n      }\n\n      // for (let levelId in cmpObject.deleted.levels) {\n      //   if (cmpObject.deleted.levels.hasOwnProperty(levelId)) {\n      //   }\n      // }\n\n      for (const roomId in cmpObject.deleted.rooms) {\n        if (cmpObject.deleted.rooms.hasOwnProperty(roomId)) {\n          const levelId = cmpObject.deleted.rooms[roomId].levelId;\n          const room = cmpObject.deleted.rooms[roomId].room;\n          const levelRef = await this.findLevel(building, levelId);\n          const roomRef = await this.findRoom(\n            building,\n            levelId,\n            room.properties.externalId\n          );\n          await this.removeRoom(levelRef, roomRef);\n        }\n      }\n      config.mod_attr('archi', this.modelArchi);\n    } catch (e) {\n      console.error(e);\n    }\n    console.log('generateContext DONE');\n  }\n\n  async updateContextCreateRoom(\n    contextId: string,\n    room: Room,\n    level: SpinalNodeRef,\n    model: Model\n  ) {\n    const nodeAttrNames = ['dbId', 'externalId'];\n    const roomRealNode: SpinalNode<any> = await GeographicService.addRoom(\n      contextId,\n      level.id.get(),\n      this.roomManager.getPropertyValueByName(\n        room.properties.properties,\n        'name'\n      )\n    );\n    if (typeof room !== 'undefined' && typeof room.children !== 'undefined') {\n      const prom: any[] = [\n        this.roomManager.addAttribute(roomRealNode, room.properties.properties),\n      ];\n      for (const child of <any>room.children) {\n        const objName = this.roomManager.getPropertyValueByName(\n          child.properties,\n          'name'\n        );\n        prom.push(\n          this.addReferenceObject(\n            child.dbId,\n            objName,\n            model,\n            roomRealNode,\n            GEO_REFERENCE_ROOM_RELATION\n          ).catch((e) => e)\n        );\n      }\n      await Promise.all(prom);\n      // add or set attribut to  dbId & externalId\n      for (const nodeAttrName of nodeAttrNames) {\n        if (typeof roomRealNode.info[nodeAttrName] === 'undefined')\n          roomRealNode.info.add_attr(\n            nodeAttrName,\n            room.properties[nodeAttrName]\n          );\n        else if (\n          roomRealNode.info[nodeAttrName].get() !==\n          room.properties[nodeAttrName]\n        ) {\n          roomRealNode.info[nodeAttrName].set(room.properties[nodeAttrName]);\n        }\n      }\n    }\n  }\n\n  /**\n   * remove $room from the floor, the .room context and at it to the invalid\n   * context\n   * @param room\n   */\n  async removeRoom(levelRef: SpinalNodeRef, roomRef: SpinalNodeRef) {\n    const room = SpinalGraphService.getRealNode(roomRef.id.get());\n    const floor = SpinalGraphService.getRealNode(levelRef.id.get());\n    await floor.removeChild(\n      room,\n      GEO_ROOM_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    ); // remove the room from the floor\n    const roomReferenceContext = SpinalGraphService.getContext(\n      GeographicService.constants.ROOM_REFERENCE_CONTEXT\n    );\n    await SpinalGraphService.removeChild(\n      roomReferenceContext.info.id.get(),\n      room.info.id.get(),\n      GEO_ROOM_RELATION,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    await this.addToInvalidContext(room.info.id.get());\n  }\n\n  async addToInvalidContext(id: string) {\n    let context = SpinalGraphService.getContext('.invalid');\n    if (typeof context === 'undefined')\n      context = await SpinalGraphService.addContext('.invalid', 'invalid');\n    return SpinalGraphService.addChild(\n      context.info.id.get(),\n      id,\n      'Invalid',\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n  }\n\n  async getFloorFromRoom(room) {\n    console.warn(\"SpatialManager.getFloorFromRoom doesn't work\", room);\n    // let parents = await room.getParents();\n    // for (let i = 0; i < parents.length; i++) {\n    //   if (parents[i].info.type.get() === \"geographicFloor\")\n    //     return parents[i];\n    // }\n    // return undefined;\n  }\n\n  private async updateLevel(\n    building: SpinalNode<any>,\n    level: Level,\n    model: Model\n  ) {\n    // @ts-ignore\n    SpinalGraphService._addNode(building);\n    const levelNodeRef = await this.findLevel(\n      building,\n      level.properties.externalId\n    );\n    const levelId = levelNodeRef.id.get();\n    const levelRealNode = SpinalGraphService.getRealNode(levelId);\n    await this.floorManager.addAttribute(\n      levelRealNode,\n      level.properties.properties\n    );\n    await this.addRefStructureToLevel(levelId, level.structures, model);\n  }\n\n  private async updateRoom(\n    building: SpinalNode<any>,\n    levelExternId: string,\n    room: Room,\n    model: Model\n  ) {\n    // @ts-ignore\n    SpinalGraphService._addNode(building);\n    const roomNodeRef = await this.findRoom(\n      building,\n      levelExternId,\n      room.properties.externalId\n    );\n    const roomId = roomNodeRef.id.get();\n    const roomRealNode = SpinalGraphService.getRealNode(roomId);\n    await this.roomManager.addAttribute(\n      roomRealNode,\n      room.properties.properties\n    );\n    if (typeof roomRealNode.info.dbId !== 'undefined') {\n      roomRealNode.info.dbId.set(room.properties.dbId);\n    } else {\n      roomRealNode.info.add_attr('dbId', room.properties.dbId);\n    }\n    // missing check refObject\n    await this.addRefStructureToRoom(roomId, room.children, model);\n  }\n\n  // private async updateRoom(externalId: string, room: Room) {\n  //   this.roomManager\n  //     .getByExternalId(externalId,\n  //       SpinalGraphService.getContext(\n  //         GeographicService.constants.ROOM_REFERENCE_CONTEXT).info.id.get(), GEO_ROOM_RELATION)\n  //     .then(r => {\n  //       this.roomManager.addAttribute(SpinalGraphService.getRealNode(r.id.get()), room.properties.properties);\n  //       // @ts-ignore\n  //       SpinalGraphService.modifyNode(r.id.get(), { dbId: room.properties.dbId });\n  //     })\n  //   // missing check refObject\n  // }\n\n  createRoomObj(levelId: string, room: Room) {\n    return { levelId, room };\n  }\n\n  public compareArchi(\n    oldArchi: ModelArchi,\n    newArchi: ModelArchi\n  ): ComparisionObject {\n    const cmpObj = {\n      deleted: { levels: {}, rooms: {} },\n      updated: { levels: {}, rooms: {} },\n      new: { levels: {}, rooms: {} },\n    };\n\n    for (const levelId in oldArchi) {\n      const oldLevel = oldArchi[levelId];\n      if (newArchi.hasOwnProperty(levelId)) {\n        // level exist in old and new => level update\n        const newArchiLvl = newArchi[levelId];\n        for (const roomExternId in oldLevel.children) {\n          if (\n            oldLevel.children.hasOwnProperty(roomExternId) &&\n            typeof oldLevel.children[roomExternId].children !== 'undefined'\n          ) {\n            // exist in old and have children\n            cmpObj.updated.levels[levelId] = newArchiLvl;\n            const levelExternalId = newArchiLvl.properties.externalId;\n            if (\n              newArchiLvl.children[roomExternId] &&\n              newArchiLvl.children[roomExternId].children\n            ) {\n              cmpObj.updated.rooms[roomExternId] = this.createRoomObj(\n                levelExternalId,\n                newArchiLvl.children[roomExternId]\n              );\n            } else {\n              cmpObj.deleted.rooms[roomExternId] = this.createRoomObj(\n                levelExternalId,\n                oldLevel.children[roomExternId]\n              );\n            }\n          }\n        }\n      } else {\n        //delete floor\n        cmpObj.deleted.levels[levelId] = oldArchi[levelId];\n        for (const roomExternId in oldLevel.children) {\n          //delete all rooms\n          if (oldLevel.children.hasOwnProperty(roomExternId)) {\n            const levelExternalId = oldLevel.properties.externalId;\n            cmpObj.deleted.rooms[roomExternId] = this.createRoomObj(\n              levelExternalId,\n              oldArchi[levelId].children[roomExternId]\n            );\n          }\n        }\n      }\n    }\n\n    for (const levelId in newArchi) {\n      if (!newArchi.hasOwnProperty(levelId)) {\n        continue;\n      }\n      const newLevel = newArchi[levelId];\n      if (oldArchi.hasOwnProperty(levelId)) {\n        //level already exist\n        for (const roomExternal in newLevel.children) {\n          if (\n            newLevel.children.hasOwnProperty(roomExternal) &&\n            typeof newLevel.children[roomExternal].children !== 'undefined' &&\n            (!oldArchi[levelId].children.hasOwnProperty(roomExternal) ||\n              typeof oldArchi[levelId].children[roomExternal].children ===\n                'undefined')\n          ) {\n            const lvlExternId = newLevel.properties.externalId;\n            if (typeof cmpObj.new.rooms[lvlExternId] === 'undefined') {\n              cmpObj.new.rooms[lvlExternId] = [];\n            }\n            cmpObj.new.rooms[lvlExternId].push(newLevel.children[roomExternal]);\n          }\n        }\n      } else {\n        //add level and rooms to new\n        cmpObj.new.levels[levelId] = newLevel;\n        for (const roomExternal in newLevel.children) {\n          if (\n            newLevel.children.hasOwnProperty(roomExternal) &&\n            typeof newLevel.children[levelId].children !== 'undefined'\n          ) {\n            //add room if it has a floor\n            const lvlExternId = newLevel.properties.externalId;\n            if (typeof cmpObj.new.rooms[lvlExternId] === 'undefined') {\n              cmpObj.new.rooms[lvlExternId] = [];\n            }\n            cmpObj.new.rooms[lvlExternId].push(newLevel.children[roomExternal]);\n          }\n        }\n      }\n    }\n    return cmpObj;\n  }\n\n  private static async getContext(contextName: string) {\n    let context = SpinalGraphService.getContext(contextName);\n    if (typeof context === 'undefined' || context === null) {\n      context = await GeographicService.createContext(contextName);\n    }\n    return context;\n  }\n\n  async getSpatialConfig(): Promise<SpatialConfig> {\n    let context = SpinalGraphService.getContext('.config');\n    if (typeof context === 'undefined')\n      context = await SpinalGraphService.addContext(\n        '.config',\n        'system configuration',\n        undefined\n      );\n    return SpinalGraphService.getChildren(context.info.id.get(), [\n      'hasConfig',\n    ]).then(async (children) => {\n      let config;\n      if (typeof children !== 'undefined')\n        for (let i = 0; i < children.length; i++) {\n          if (children[i].type.get() === 'SpatialConfig') config = children[i];\n        }\n\n      if (typeof config === 'undefined') {\n        // create default config\n        config = SpinalGraphService.createNode(\n          {\n            name: 'spatial config',\n            type: 'SpatialConfig',\n          },\n          new SpatialConfig()\n        );\n\n        await SpinalGraphService.addChild(\n          context.info.id.get(),\n          config,\n          'hasConfig',\n          SPINAL_RELATION_PTR_LST_TYPE\n        );\n        config = SpinalGraphService.getNode(config);\n      }\n      return config.element.load();\n    });\n  }\n\n  /**\n   * use propertyDb to create a representation of the architecture of the model\n   * @private\n   * @param {Model} model\n   * @returns {Promise<ModelArchi>}\n   * @memberof SpatialManager\n   */\n  private async getArchiModel(\n    model: Model,\n    configName: string\n  ): Promise<ModelArchi> {\n    if (this.modelArchiLib.has(model)) return this.modelArchiLib.get(model);\n    //TODO une fois sur la version 7 du viewer la fonction\n    // executerUserFonction permetera de passer des parametre a userFunction\n    this.spatialConfig = await this.getSpatialConfig();\n    // let objectProperties = this.spatialConfig.objectProperties.get();\n    // let floorAttrn = this.spatialConfig.revitAttribute.floors.attrName.get();\n\n    const config = this.spatialConfig.getConfig(configName);\n    if (!config) throw new Error('No Config Name found');\n    const fct = createFctGetArchi(config.get());\n    const modelArchi: ModelArchi = await model\n      .getPropertyDb()\n      // @ts-ignore\n      .executeUserFunction(fct);\n\n    console.log('modelArchi', modelArchi);\n\n    this.modelArchiLib.set(model, modelArchi);\n    return modelArchi;\n  }\n\n  private findLevel(\n    building: SpinalNode<any>,\n    externalId: string\n  ): Promise<SpinalNodeRef> {\n    return this.floorManager.getByExternalId(\n      externalId,\n      building.info.id.get(),\n      GEO_FLOOR_RELATION\n    );\n  }\n\n  private async findRoom(\n    building: SpinalNode<any>,\n    floorExternId: string,\n    roomExternId: string\n  ): Promise<SpinalNodeRef> {\n    const level = await this.findLevel(building, floorExternId);\n    return this.roomManager.getByExternalId(\n      roomExternId,\n      level.id.get(),\n      GEO_ROOM_RELATION\n    );\n  }\n\n  async getContextFromConfig(\n    config: IMConfigArchi\n  ): Promise<SpinalContext<any>> {\n    let context = SpinalGraphService.getRealNode(config.contextId.get());\n\n    if (typeof context === 'undefined' || context === null) {\n      context = SpinalGraphService.getContext(config.contextName.get());\n    }\n    if (typeof context === 'undefined' || context === null) {\n      context = await GeographicService.createContext(config.contextName.get());\n    }\n    config.contextId.set(context.info.id.get());\n    return context;\n  }\n\n  private async getBuilding(config: IMConfigArchi): Promise<SpinalNodeRef> {\n    const context = await this.getContextFromConfig(config);\n    return SpinalGraphService.getChildren(context.info.id.get(), [\n      GEO_BUILDING_RELATION,\n    ]).then((children) => {\n      if (typeof children === 'undefined') return undefined;\n      for (let i = 0; i < children.length; i++) {\n        const building = children[i];\n        if (building.name.get() === config.basic.buildingName.get())\n          return building;\n      }\n      return undefined;\n    });\n  }\n\n  public async getFloorFinish(\n    configName: string,\n    model: Model\n  ): Promise<Structure[]> {\n    this.modelArchi = await this.getArchiModel(model, configName);\n    const floorFinish: Structure[] = [];\n    for (const key in this.modelArchi) {\n      if (this.modelArchi.hasOwnProperty(key)) {\n        for (const roomId in this.modelArchi[key].children) {\n          if (this.modelArchi[key].children.hasOwnProperty(roomId)) {\n            const room = this.modelArchi[key].children[roomId];\n            if (typeof room.children !== 'undefined')\n              floorFinish.push(...room.children);\n          }\n        }\n      }\n    }\n    return floorFinish;\n  }\n\n  async getRoomIdFromDbId(externalId: string) {\n    const roomReferenceContext = SpinalGraphService.getContext(\n      GeographicService.constants.ROOM_REFERENCE_CONTEXT\n    );\n    const rooms = await SpinalGraphService.getChildren(\n      roomReferenceContext.info.id.get(),\n      [GEO_ROOM_RELATION]\n    );\n\n    for (let i = 0; i < rooms.length; i++) {\n      if (rooms[i].externalId.get() === externalId) {\n        return rooms[i].id.get();\n      }\n    }\n  }\n\n  public getRoomIdFromFloorFinish(floorId: number) {\n    for (const key in this.modelArchi) {\n      if (this.modelArchi.hasOwnProperty(key)) {\n        for (const roomId in this.modelArchi[key].children) {\n          if (this.modelArchi[key].children.hasOwnProperty(roomId)) {\n            const room = this.modelArchi[key].children[roomId];\n            if (typeof room.children !== 'undefined')\n              for (const roomChild of room.children) {\n                if (roomChild.properties.dbId === floorId)\n                  return room.properties.externalId;\n              }\n          }\n        }\n      }\n    }\n  }\n\n  public async getFloorFinishId(configName: string, model: Model) {\n    const floors = await this.getFloorFinish(configName, model);\n    return floors.map((floor) => floor.properties.dbId);\n  }\n}\n\nfunction round(x, digits = 2) {\n  return parseFloat(x.toFixed(digits));\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// export interface ArchiSelectUser {\n//   key: RegExp;\n//   value: RegExp;\n//   isCat?: boolean;\n// }\n// export interface ConfigGetArchiUser {\n//   basic: Basic;\n//   levelSelect: ArchiSelectUser[];\n//   roomSelect: ArchiSelectUser[];\n//   structureSelect: ArchiSelectUser[];\n//   floorSelect?: ArchiSelectUser[];\n// }\n// const testCfg = {\n//   basic: { \"addLevel\": false, \"buildingName\": \"64646\", \"selectedModel\": \"DEI (1).rvt\" },\n//   levelSelect: [{ \"key\": /^Category$/, \"value\": /^Revit Level$/, \"isCat\": true }],\n//   roomSelect: [{ \"key\": /^Category$/, \"value\": /^Revit Pièces$/, \"isCat\": true }],\n//   structureSelect: [\n//     { \"key\": /^Category$/, \"value\": /^Revit Murs$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Portes$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Sols$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Garde-corps$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Fenêtres$/, \"isCat\": true }\n//   ]\n// }\n// interface AttrItem { id: number, attrDef: any, d: ArchiSelectUser }\nfunction getArchiSelectStr(archiSelect) {\n    if (!archiSelect)\n        return '[]';\n    const data = ['['];\n    for (const d of archiSelect) {\n        let isCatStr = '';\n        if (d.isCat === true)\n            isCatStr = `, isCat: true`;\n        const str = `{ key: ${d.key.toString()}, value: ${d.value.toString()}${isCatStr}},`;\n        data.push(str);\n    }\n    data.push(']');\n    return data.join('');\n}\nfunction createFctGetArchi(config) {\n    const levelStr = getArchiSelectStr(config.levelSelect);\n    const roomStr = getArchiSelectStr(config.roomSelect);\n    const structureStr = getArchiSelectStr(config.structureSelect);\n    const floorStr = getArchiSelectStr(config.floorSelect);\n    let FLOOR_ROOM_NUMBER_ATTR_NAME = 'Number';\n    let FLOOR_ROOM_NAME_ATTR_NAME = '';\n    let FLOOR_LEVEL_NAME_ATTR_NAME = '';\n    if (config.floorRoomNbr)\n        FLOOR_ROOM_NUMBER_ATTR_NAME = config.floorRoomNbr; // 'Number\n    if (config.floorRoomName)\n        FLOOR_ROOM_NAME_ATTR_NAME = config.floorRoomName; // 'Local'\n    if (config.floorLevelName)\n        FLOOR_LEVEL_NAME_ATTR_NAME = config.floorLevelName; // 'Etage'\n    const propsToGet = [\n        'name',\n        'elevation',\n        'area',\n        'volume',\n        'perimeter',\n        'stype',\n        'roomid',\n        'number',\n    ];\n    if (FLOOR_ROOM_NUMBER_ATTR_NAME)\n        propsToGet.push(FLOOR_ROOM_NUMBER_ATTR_NAME.toLowerCase());\n    if (FLOOR_ROOM_NAME_ATTR_NAME)\n        propsToGet.push(FLOOR_ROOM_NAME_ATTR_NAME.toLowerCase());\n    if (FLOOR_LEVEL_NAME_ATTR_NAME)\n        propsToGet.push(FLOOR_LEVEL_NAME_ATTR_NAME.toLowerCase());\n    let useFloor = false;\n    if (Array.isArray(config.floorSelect) && config.floorSelect.length > 0) {\n        useFloor = true;\n    }\n    const fct = `function userFunction(pdb) {\n    // TEST\n    // let useFloor = false;\n    // const levelSelect = testCfg.levelSelect;\n    // const roomSelect = testCfg.roomSelect;\n    // const structureSelect = testCfg.structureSelect;\n    // const propsNames = propsToGet\n    // END TEST\n\n    let useFloor = ${useFloor};\n    const levelSelect = ${levelStr};\n    const roomSelect = ${roomStr};\n    const structureSelect = ${structureStr};\n    const floorSelect = ${floorStr};\n    const propsNames = ${JSON.stringify(propsToGet)};\n\n    const FLOOR_ROOM_NUMBER_ATTR_NAME = \"${FLOOR_ROOM_NUMBER_ATTR_NAME}\";\n    const FLOOR_ROOM_NAME_ATTR_NAME = \"${FLOOR_ROOM_NAME_ATTR_NAME}\";\n    const FLOOR_LEVEL_NAME_ATTR_NAME = \"${FLOOR_LEVEL_NAME_ATTR_NAME}\";\n    const attrLevel = [];\n    const attrRoom = [];\n    const attrStructure = [];\n    const attrFloor = [];\n    const props = [];\n    function round(x, digits = 2) {\n      return parseFloat(x.toFixed(digits))\n    }\n\n    function pushSelect(data, attrDef, idx, res) {\n      for (const d of data) {\n        if (\n          (attrDef.displayName && d.key.test(attrDef.displayName)) ||\n          (!attrDef.displayName && d.key.test(attrDef.name)) ||\n          (d.isCat === true && attrDef.category === '__category__' && d.key.test(attrDef.name))\n        ) {\n          const item = res.find((item) => item.id === idx);\n          if (item) item.d.push(d)\n          else {\n            res.push({\n              id: idx,\n              attrDef, d: [d]\n            });\n          }\n        }\n      }\n    }\n\n    function attrIsValid(attrs, attrId, value) {\n      const attr = attrs.find((item) => item.id === attrId);\n      if (!attr) return null;\n      for (const d of attr.d) {\n        if (d.value.test(value)) {\n          return attr;\n        }\n      }\n    }\n\n    pdb.enumAttributes(function (idx, attrDef) {\n      if (propsNames.includes(attrDef.name.toLowerCase()) ||\n        (attrDef.name === 'Level' && attrDef.category === '__internalref__')) {\n        props.push({ attrId: idx, attrDef })\n      }\n      pushSelect(levelSelect, attrDef, idx, attrLevel)\n      pushSelect(roomSelect, attrDef, idx, attrRoom)\n      pushSelect(structureSelect, attrDef, idx, attrStructure)\n      pushSelect(floorSelect, attrDef, idx, attrFloor)\n    });\n    let dbIds = { floors: [], rooms: [], levels: [], structures: [] };\n    const idExternal = {};\n\n    let externalIdMapping = pdb.getExternalIdMapping();\n    for (let key in externalIdMapping) {\n      if (externalIdMapping.hasOwnProperty(key)) {\n        idExternal[externalIdMapping[key]] = key;\n      }\n    }\n    pdb.enumObjects(function (dbId) {\n      const properties = [];\n      let array = undefined;\n      pdb.enumObjectProperties(dbId, function (attrId, valId) {\n        let value = pdb.getAttrValue(attrId, valId);\n        if (typeof value === \"number\") value = round(value);\n        let prop = props.find(prop => prop.attrId === attrId)\n\n        const levelProps = attrIsValid(attrLevel, attrId, value);\n        const roomProps = attrIsValid(attrRoom, attrId, value);\n        const structureProps = attrIsValid(attrStructure, attrId, value);\n        const floorProps = attrIsValid(attrFloor, attrId, value);\n        if (levelProps) {\n          prop = levelProps;\n          array = dbIds.levels;\n        }\n        if (roomProps) {\n          prop = roomProps;\n          array = dbIds.rooms;\n        }\n        if (floorProps) {\n          prop = floorProps;\n          array = dbIds.floors;\n        }\n        if (structureProps) {\n          prop = structureProps;\n          array = dbIds.structures;\n        }\n\n        if (prop) {\n          const attrNameLowerCase = prop.attrDef.name.toLowerCase()\n          let found =  false;\n          for (const propertie of properties) {\n            if (propertie.name.toLowerCase() === attrNameLowerCase && propertie.category !== '__internalref__') {\n              if (propertie.value !== value) {\n                propertie.oldValue = propertie.value\n                propertie.value = value\n              }\n              found = true\n              break;\n            }\n          }\n          if (!found) {\n            const res = { name: attrNameLowerCase, value }\n            if (prop.attrDef.dataTypeContext)\n              Object.assign(res, { dataTypeContext: prop.attrDef.dataTypeContext });\n            if (attrNameLowerCase === 'level' && prop.attrDef.category === '__internalref__')\n              Object.assign(res, { category: prop.attrDef.category });\n            properties.push(res);\n          }\n        }\n\n\n      });\n      if (Array.isArray(array))\n        array.push({ dbId, properties, externalId: idExternal[dbId] })\n\n    });\n    if (useFloor === false) dbIds.floors = dbIds.rooms\n    function createArchitectureModel(object) {\n      const archiModel = {};\n\n      function getAttrValue(obj, attrName, attrCat) {\n        const props = obj.properties;\n        const attrNameLowerCase = attrName.toLowerCase()\n        for (let i = 0; i < props.length; i++) {\n          if (props[i].name.toLowerCase() === attrNameLowerCase) {\n            if (attrCat && props[i].category !== attrCat) {\n              continue;\n            }\n            return props[i].value\n          }\n        }\n      }\n      function setAttrValue(obj, attrName, value) {\n        const props = obj.properties;\n        const attrNameLowerCase = attrName.toLowerCase()\n        for (let i = 0; i < props.length; i++) {\n          if (props[i].name.toLowerCase() === attrNameLowerCase) {\n            if (props[i].value === value) return;\n            props[i].oldValue = props[i].value\n            props[i].value = value\n            return;\n          }\n        }\n      }\n\n      function getLevelByDbId(dbId) {\n        for (const level of object.levels) {\n          if (level.dbId === dbId) {\n            return level\n          }\n        }\n      }\n\n      function findFloor(room, data) {\n        const leveldbId = getAttrValue(room, \"level\", '__internalref__');\n        const roomNumber = getAttrValue(room, \"number\").toString()\n        const res = [];\n\n        for (const floor of data.floors) {\n          const floorRoomId = getAttrValue(floor, \"roomid\");\n          const levelItemdbId = getAttrValue(floor, \"level\", '__internalref__');\n          const floorRoomNumber = getAttrValue(floor, FLOOR_ROOM_NUMBER_ATTR_NAME)\n          if (floorRoomId === room.externalId ||\n            (leveldbId === levelItemdbId &&\n            floorRoomNumber !== undefined &&\n            roomNumber == floorRoomNumber.toString())\n          ) {\n            if (FLOOR_ROOM_NAME_ATTR_NAME) {\n              const floorRoomName = getAttrValue(floor, FLOOR_ROOM_NAME_ATTR_NAME)\n              if (floorRoomName)\n                setAttrValue(room, 'name', floorRoomName)\n            }\n            if (FLOOR_LEVEL_NAME_ATTR_NAME) {\n              const floorName = getAttrValue(floor, FLOOR_LEVEL_NAME_ATTR_NAME)\n              if (floorName)\n                setAttrValue(getLevelByDbId(leveldbId), 'name', floorName)\n            }\n            res.push(floor);\n          }\n        }\n        return res;\n      }\n\n\n      for (let i = 0; i < object.levels.length; i++) {\n        const obj = object.levels[i];\n        archiModel[obj.dbId] = { properties: obj, children: {}, structures: {} }\n      }\n      for (let i = 0; i < object.rooms.length; i++) {\n        const obj = object.rooms[i];\n        const lvl = getAttrValue(obj, 'level', '__internalref__'); // check here;\n        if (lvl) {\n          archiModel[lvl].children[obj.externalId] = {\n            properties: obj,\n            children: findFloor(obj, object)\n          }\n        }\n      }\n      for (let i = 0; i < object.structures.length; i++) {\n        const obj = object.structures[i];\n        const lvl = getAttrValue(obj, 'level', '__internalref__');\n        if (archiModel[lvl]) {\n          archiModel[lvl].structures[obj.externalId] = {\n            properties: obj,\n          }\n        }\n      }\n      return archiModel;\n    }\n    console.log(\"dbIds =>\", dbIds);\n    return createArchitectureModel(dbIds)\n  }`;\n    return fct;\n}\nexports.default = createFctGetArchi;\n// (<any>window).testCreateFctGetArchi = async function () {\n//   const cfg = {\n//     \"configName\": \"default\",\n//     \"basic\": { \"addLevel\": false, \"buildingName\": \"Parallèle\", \"selectedModel\": \"enedis.rvt\" },\n//     \"levelSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Level$/\", \"isCat\": true }],\n//     \"roomSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Pièces$/\", \"isCat\": true }],\n//     \"structureSelect\": [\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Murs$/\", \"isCat\": true },\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Sols$/\", \"isCat\": true },\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Portes$/\", \"isCat\": true },\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Fenêtres$/\", \"isCat\": true }],\n//     \"floorSelect\": [{ \"key\": \"/^SCtype$/\", \"value\": \"/^Floor_finish$/\" }],\n//     \"floorRoomNbr\": \"Number\"\n//   }\n//   const fct = createFctGetArchi(cfg)\n//   const modelArchi = await (<any>window).NOP_VIEWER.model.getPropertyDb().executeUserFunction(fct);\n//   console.log(modelArchi);\n// }\n// (<any>window).test = async function () {\n//   const cfg = {\n//     \"configName\": \"default\",\n//     \"contextName\": \"spatial\",\n//     \"contextId\": \"SpinalContext-538f2dd5-71d1-4a9a-e260-5e18de281e49-17163c0c1d0\",\n//     \"basic\": { \"addLevel\": false, \"buildingName\": \"azerty\", \"selectedModel\": \"DEI (1).rvt\" },\n//     \"levelSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Level$/\", \"isCat\": true }],\n//     \"roomSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Pièces$/\", \"isCat\": true }],\n//     \"structureSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Murs$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Portes$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Sols$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Garde-corps$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Fenêtres$/\", \"isCat\": true }],\n//     \"floorRoomNbr\": \"Number\",\n//   }\n//   const fct = createFctGetArchi(cfg)\n//   function userFunction(pdb) {\n//     // TEST\n//     // let useFloor = false;\n//     // const levelSelect = testCfg.levelSelect;\n//     // const roomSelect = testCfg.roomSelect;\n//     // const structureSelect = testCfg.structureSelect;\n//     // const propsNames = propsToGet\n//     // END TEST\n//     let useFloor = false;\n//     const levelSelect = [{ key: /^Category$/, value: /^Revit Level$/, isCat: true },];\n//     const roomSelect = [{ key: /^Category$/, value: /^Revit Pièces$/, isCat: true },];\n//     const structureSelect = [{ key: /^Category$/, value: /^Revit Murs$/, isCat: true }, { key: /^Category$/, value: /^Revit Portes$/, isCat: true }, { key: /^Category$/, value: /^Revit Sols$/, isCat: true }, { key: /^Category$/, value: /^Revit Garde-corps$/, isCat: true }, { key: /^Category$/, value: /^Revit Fenêtres$/, isCat: true },];\n//     const floorSelect = [];\n//     const propsNames = [\"name\", \"elevation\", \"area\", \"volume\", \"perimeter\", \"stype\", \"roomid\", \"number\", \"Number\"];\n//     const FLOOR_ROOM_NUMBER_ATTR_NAME = \"Number\";\n//     const FLOOR_ROOM_NAME_ATTR_NAME = \"\";\n//     const FLOOR_LEVEL_NAME_ATTR_NAME = \"\";\n//     const attrLevel = [];\n//     const attrRoom = [];\n//     const attrStructure = [];\n//     const attrFloor = [];\n//     const props = [];\n//     function round(x, digits = 2) {\n//       return parseFloat(x.toFixed(digits))\n//     }\n//     function pushSelect(data, attrDef, idx, res) {\n//       for (const d of data) {\n//         if (\n//           d.key.test(attrDef.displayName) ||\n//           (d.isCat === true && attrDef.category === '__category__' && d.key.test(attrDef.name))\n//         ) {\n//           const item = res.find((item) => item.id === idx);\n//           if (item) item.d.push(d)\n//           else {\n//             res.push({\n//               id: idx,\n//               attrDef, d: [d]\n//             });\n//           }\n//         }\n//       }\n//     }\n//     function attrIsValid(attrs, attrId, value) {\n//       const attr = attrs.find((item) => item.id === attrId);\n//       if (!attr) return null;\n//       for (const d of attr.d) {\n//         if (d.value.test(value)) {\n//           return attr;\n//         }\n//       }\n//     }\n//     pdb.enumAttributes(function (idx, attrDef) {\n//       if (propsNames.includes(attrDef.name.toLowerCase()) ||\n//         (attrDef.name === 'Level' && attrDef.category === '__internalref__')) {\n//         props.push({ attrId: idx, attrDef })\n//       }\n//       pushSelect(levelSelect, attrDef, idx, attrLevel)\n//       pushSelect(roomSelect, attrDef, idx, attrRoom)\n//       pushSelect(structureSelect, attrDef, idx, attrStructure)\n//       pushSelect(floorSelect, attrDef, idx, attrFloor)\n//     });\n//     let dbIds = { floors: [], rooms: [], levels: [], structures: [] };\n//     const idExternal = {};\n//     let externalIdMapping = pdb.getExternalIdMapping();\n//     for (let key in externalIdMapping) {\n//       if (externalIdMapping.hasOwnProperty(key)) {\n//         idExternal[externalIdMapping[key]] = key;\n//       }\n//     }\n//     pdb.enumObjects(function (dbId) {\n//       const properties = [];\n//       let array = undefined;\n//       pdb.enumObjectProperties(dbId, function (attrId, valId) {\n//         let value = pdb.getAttrValue(attrId, valId);\n//         if (typeof value === \"number\") value = round(value);\n//         let prop = props.find(prop => prop.attrId === attrId)\n//         const levelProps = attrIsValid(attrLevel, attrId, value);\n//         const roomProps = attrIsValid(attrRoom, attrId, value);\n//         const structureProps = attrIsValid(attrStructure, attrId, value);\n//         const floorProps = attrIsValid(attrFloor, attrId, value);\n//         if (levelProps) {\n//           prop = levelProps;\n//           array = dbIds.levels;\n//         }\n//         if (roomProps) {\n//           prop = roomProps;\n//           array = dbIds.rooms;\n//         }\n//         if (floorProps) {\n//           prop = floorProps;\n//           array = dbIds.floors;\n//         }\n//         if (structureProps) {\n//           prop = structureProps;\n//           array = dbIds.structures;\n//         }\n//         if (prop) {\n//           const attrNameLowerCase = prop.attrDef.name.toLowerCase()\n//           let found = false;\n//           for (const propertie of properties) {\n//             if (propertie.name.toLowerCase() === attrNameLowerCase && propertie.category !== '__internalref__') {\n//               if (propertie.value !== value) {\n//                 propertie.oldValue = propertie.value\n//                 propertie.value = value\n//               }\n//               found = true\n//               break;\n//             }\n//           }\n//           if (!found) {\n//             const res = { name: attrNameLowerCase, value }\n//             if (prop.attrDef.dataTypeContext)\n//               Object.assign(res, { dataTypeContext: prop.attrDef.dataTypeContext });\n//             if (attrNameLowerCase === 'level' && prop.attrDef.category === '__internalref__')\n//               Object.assign(res, { category: prop.attrDef.category });\n//             properties.push(res);\n//           }\n//         }\n//       });\n//       if (Array.isArray(array))\n//         array.push({ dbId, properties, externalId: idExternal[dbId] })\n//     });\n//     if (useFloor === false) dbIds.floors = dbIds.rooms\n//     function createArchitectureModel(object) {\n//       const archiModel = {};\n//       function getAttrValue(obj, attrName, attrCat?) {\n//         const props = obj.properties;\n//         const attrNameLowerCase = attrName.toLowerCase()\n//         for (let i = 0; i < props.length; i++) {\n//           if (props[i].name.toLowerCase() === attrNameLowerCase) {\n//             if (attrCat && props[i].category !== attrCat) {\n//               continue;\n//             }\n//             return props[i].value\n//           }\n//         }\n//       }\n//       function setAttrValue(obj, attrName, value) {\n//         const props = obj.properties;\n//         const attrNameLowerCase = attrName.toLowerCase()\n//         for (let i = 0; i < props.length; i++) {\n//           if (props[i].name.toLowerCase() === attrNameLowerCase) {\n//             if (props[i].value === value) return;\n//             props[i].oldValue = props[i].value\n//             props[i].value = value\n//             return;\n//           }\n//         }\n//       }\n//       function getLevelByDbId(dbId) {\n//         for (const level of object.levels) {\n//           if (level.dbId === dbId) {\n//             return level\n//           }\n//         }\n//       }\n//       function findFloor(room, data) {\n//         const leveldbId = getAttrValue(room, \"level\", '__internalref__');\n//         const roomNumber = getAttrValue(room, \"number\").toString()\n//         const res = [];\n//         for (const floor of data.floors) {\n//           const levelItemdbId = getAttrValue(floor, \"level\", '__internalref__');\n//           const floorRoomNumber = getAttrValue(floor, FLOOR_ROOM_NUMBER_ATTR_NAME)\n//           if (\n//             leveldbId === levelItemdbId &&\n//             floorRoomNumber !== undefined &&\n//             roomNumber == floorRoomNumber.toString()\n//           ) {\n//             if (FLOOR_ROOM_NAME_ATTR_NAME) {\n//               const floorRoomName = getAttrValue(floor, FLOOR_ROOM_NAME_ATTR_NAME)\n//               if (floorRoomName)\n//                 setAttrValue(room, 'name', floorRoomName)\n//             }\n//             if (FLOOR_LEVEL_NAME_ATTR_NAME) {\n//               const floorName = getAttrValue(floor, FLOOR_LEVEL_NAME_ATTR_NAME)\n//               if (floorName)\n//                 setAttrValue(getLevelByDbId(leveldbId), 'name', floorName)\n//             }\n//             res.push(floor);\n//           }\n//         }\n//         return res;\n//       }\n//       for (let i = 0; i < object.levels.length; i++) {\n//         const obj = object.levels[i];\n//         archiModel[obj.dbId] = { properties: obj, children: {}, structures: {} }\n//       }\n//       for (let i = 0; i < object.rooms.length; i++) {\n//         const obj = object.rooms[i];\n//         const lvl = getAttrValue(obj, 'level', '__internalref__'); // check here;\n//         if (lvl) {\n//           archiModel[lvl].children[obj.externalId] = {\n//             properties: obj,\n//             children: findFloor(obj, object)\n//           }\n//         }\n//       }\n//       for (let i = 0; i < object.structures.length; i++) {\n//         const obj = object.structures[i];\n//         const lvl = getAttrValue(obj, 'level', '__internalref__');\n//         if (archiModel[lvl]) {\n//           archiModel[lvl].structures[obj.externalId] = {\n//             properties: obj,\n//           }\n//         }\n//       }\n//       return archiModel;\n//     }\n//     console.log(\"dbIds =>\", dbIds);\n//     return dbIds\n//     // return createArchitectureModel(dbIds)\n//   }\n//   const modelArchi = await (<any>window).NOP_VIEWER.model.getPropertyDb().executeUserFunction(fct);\n//   console.log(modelArchi);\n// }\n//# sourceMappingURL=createFctGetArchi.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program,  * you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexport interface Basic {\n  addLevel: boolean;\n  buildingName: string;\n  selectedModel: string;\n}\n\nexport interface ArchiSelect {\n  key: string;\n  value: string;\n  isCat?: boolean;\n}\n\nexport interface ConfigGetArchi {\n  basic: Basic;\n  levelSelect: ArchiSelect[];\n  roomSelect: ArchiSelect[];\n  structureSelect: ArchiSelect[];\n  floorSelect?: ArchiSelect[];\n  floorRoomNbr: string;\n  floorRoomName?: string;\n  floorLevelName?: string;\n}\n\n// export interface ArchiSelectUser {\n//   key: RegExp;\n//   value: RegExp;\n//   isCat?: boolean;\n// }\n\n// export interface ConfigGetArchiUser {\n//   basic: Basic;\n//   levelSelect: ArchiSelectUser[];\n//   roomSelect: ArchiSelectUser[];\n//   structureSelect: ArchiSelectUser[];\n//   floorSelect?: ArchiSelectUser[];\n// }\n\n// const testCfg = {\n//   basic: { \"addLevel\": false, \"buildingName\": \"64646\", \"selectedModel\": \"DEI (1).rvt\" },\n//   levelSelect: [{ \"key\": /^Category$/, \"value\": /^Revit Level$/, \"isCat\": true }],\n//   roomSelect: [{ \"key\": /^Category$/, \"value\": /^Revit Pièces$/, \"isCat\": true }],\n//   structureSelect: [\n//     { \"key\": /^Category$/, \"value\": /^Revit Murs$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Portes$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Sols$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Garde-corps$/, \"isCat\": true },\n//     { \"key\": /^Category$/, \"value\": /^Revit Fenêtres$/, \"isCat\": true }\n//   ]\n// }\n\n// interface AttrItem { id: number, attrDef: any, d: ArchiSelectUser }\n\nfunction getArchiSelectStr(archiSelect: ArchiSelect[]) {\n  if (!archiSelect) return '[]';\n  const data = ['['];\n  for (const d of archiSelect) {\n    let isCatStr = '';\n    if (d.isCat === true) isCatStr = `, isCat: true`;\n    const str = `{ key: ${d.key.toString()}, value: ${d.value.toString()}${isCatStr}},`;\n    data.push(str);\n  }\n  data.push(']');\n  return data.join('');\n}\n\nexport default function createFctGetArchi(config: ConfigGetArchi) {\n  const levelStr = getArchiSelectStr(config.levelSelect);\n  const roomStr = getArchiSelectStr(config.roomSelect);\n  const structureStr = getArchiSelectStr(config.structureSelect);\n  const floorStr = getArchiSelectStr(config.floorSelect);\n  let FLOOR_ROOM_NUMBER_ATTR_NAME = 'Number';\n  let FLOOR_ROOM_NAME_ATTR_NAME = '';\n  let FLOOR_LEVEL_NAME_ATTR_NAME = '';\n  if (config.floorRoomNbr) FLOOR_ROOM_NUMBER_ATTR_NAME = config.floorRoomNbr; // 'Number\n  if (config.floorRoomName) FLOOR_ROOM_NAME_ATTR_NAME = config.floorRoomName; // 'Local'\n  if (config.floorLevelName) FLOOR_LEVEL_NAME_ATTR_NAME = config.floorLevelName; // 'Etage'\n\n  const propsToGet = [\n    'name',\n    'elevation',\n    'area',\n    'volume',\n    'perimeter',\n    'stype',\n    'roomid',\n    'number',\n  ];\n\n  if (FLOOR_ROOM_NUMBER_ATTR_NAME)\n    propsToGet.push(FLOOR_ROOM_NUMBER_ATTR_NAME.toLowerCase());\n  if (FLOOR_ROOM_NAME_ATTR_NAME)\n    propsToGet.push(FLOOR_ROOM_NAME_ATTR_NAME.toLowerCase());\n  if (FLOOR_LEVEL_NAME_ATTR_NAME)\n    propsToGet.push(FLOOR_LEVEL_NAME_ATTR_NAME.toLowerCase());\n  let useFloor = false;\n  if (Array.isArray(config.floorSelect) && config.floorSelect.length > 0) {\n    useFloor = true;\n  }\n\n  const fct = `function userFunction(pdb) {\n    // TEST\n    // let useFloor = false;\n    // const levelSelect = testCfg.levelSelect;\n    // const roomSelect = testCfg.roomSelect;\n    // const structureSelect = testCfg.structureSelect;\n    // const propsNames = propsToGet\n    // END TEST\n\n    let useFloor = ${useFloor};\n    const levelSelect = ${levelStr};\n    const roomSelect = ${roomStr};\n    const structureSelect = ${structureStr};\n    const floorSelect = ${floorStr};\n    const propsNames = ${JSON.stringify(propsToGet)};\n\n    const FLOOR_ROOM_NUMBER_ATTR_NAME = \"${FLOOR_ROOM_NUMBER_ATTR_NAME}\";\n    const FLOOR_ROOM_NAME_ATTR_NAME = \"${FLOOR_ROOM_NAME_ATTR_NAME}\";\n    const FLOOR_LEVEL_NAME_ATTR_NAME = \"${FLOOR_LEVEL_NAME_ATTR_NAME}\";\n    const attrLevel = [];\n    const attrRoom = [];\n    const attrStructure = [];\n    const attrFloor = [];\n    const props = [];\n    function round(x, digits = 2) {\n      return parseFloat(x.toFixed(digits))\n    }\n\n    function pushSelect(data, attrDef, idx, res) {\n      for (const d of data) {\n        if (\n          (attrDef.displayName && d.key.test(attrDef.displayName)) ||\n          (!attrDef.displayName && d.key.test(attrDef.name)) ||\n          (d.isCat === true && attrDef.category === '__category__' && d.key.test(attrDef.name))\n        ) {\n          const item = res.find((item) => item.id === idx);\n          if (item) item.d.push(d)\n          else {\n            res.push({\n              id: idx,\n              attrDef, d: [d]\n            });\n          }\n        }\n      }\n    }\n\n    function attrIsValid(attrs, attrId, value) {\n      const attr = attrs.find((item) => item.id === attrId);\n      if (!attr) return null;\n      for (const d of attr.d) {\n        if (d.value.test(value)) {\n          return attr;\n        }\n      }\n    }\n\n    pdb.enumAttributes(function (idx, attrDef) {\n      if (propsNames.includes(attrDef.name.toLowerCase()) ||\n        (attrDef.name === 'Level' && attrDef.category === '__internalref__')) {\n        props.push({ attrId: idx, attrDef })\n      }\n      pushSelect(levelSelect, attrDef, idx, attrLevel)\n      pushSelect(roomSelect, attrDef, idx, attrRoom)\n      pushSelect(structureSelect, attrDef, idx, attrStructure)\n      pushSelect(floorSelect, attrDef, idx, attrFloor)\n    });\n    let dbIds = { floors: [], rooms: [], levels: [], structures: [] };\n    const idExternal = {};\n\n    let externalIdMapping = pdb.getExternalIdMapping();\n    for (let key in externalIdMapping) {\n      if (externalIdMapping.hasOwnProperty(key)) {\n        idExternal[externalIdMapping[key]] = key;\n      }\n    }\n    pdb.enumObjects(function (dbId) {\n      const properties = [];\n      let array = undefined;\n      pdb.enumObjectProperties(dbId, function (attrId, valId) {\n        let value = pdb.getAttrValue(attrId, valId);\n        if (typeof value === \"number\") value = round(value);\n        let prop = props.find(prop => prop.attrId === attrId)\n\n        const levelProps = attrIsValid(attrLevel, attrId, value);\n        const roomProps = attrIsValid(attrRoom, attrId, value);\n        const structureProps = attrIsValid(attrStructure, attrId, value);\n        const floorProps = attrIsValid(attrFloor, attrId, value);\n        if (levelProps) {\n          prop = levelProps;\n          array = dbIds.levels;\n        }\n        if (roomProps) {\n          prop = roomProps;\n          array = dbIds.rooms;\n        }\n        if (floorProps) {\n          prop = floorProps;\n          array = dbIds.floors;\n        }\n        if (structureProps) {\n          prop = structureProps;\n          array = dbIds.structures;\n        }\n\n        if (prop) {\n          const attrNameLowerCase = prop.attrDef.name.toLowerCase()\n          let found =  false;\n          for (const propertie of properties) {\n            if (propertie.name.toLowerCase() === attrNameLowerCase && propertie.category !== '__internalref__') {\n              if (propertie.value !== value) {\n                propertie.oldValue = propertie.value\n                propertie.value = value\n              }\n              found = true\n              break;\n            }\n          }\n          if (!found) {\n            const res = { name: attrNameLowerCase, value }\n            if (prop.attrDef.dataTypeContext)\n              Object.assign(res, { dataTypeContext: prop.attrDef.dataTypeContext });\n            if (attrNameLowerCase === 'level' && prop.attrDef.category === '__internalref__')\n              Object.assign(res, { category: prop.attrDef.category });\n            properties.push(res);\n          }\n        }\n\n\n      });\n      if (Array.isArray(array))\n        array.push({ dbId, properties, externalId: idExternal[dbId] })\n\n    });\n    if (useFloor === false) dbIds.floors = dbIds.rooms\n    function createArchitectureModel(object) {\n      const archiModel = {};\n\n      function getAttrValue(obj, attrName, attrCat) {\n        const props = obj.properties;\n        const attrNameLowerCase = attrName.toLowerCase()\n        for (let i = 0; i < props.length; i++) {\n          if (props[i].name.toLowerCase() === attrNameLowerCase) {\n            if (attrCat && props[i].category !== attrCat) {\n              continue;\n            }\n            return props[i].value\n          }\n        }\n      }\n      function setAttrValue(obj, attrName, value) {\n        const props = obj.properties;\n        const attrNameLowerCase = attrName.toLowerCase()\n        for (let i = 0; i < props.length; i++) {\n          if (props[i].name.toLowerCase() === attrNameLowerCase) {\n            if (props[i].value === value) return;\n            props[i].oldValue = props[i].value\n            props[i].value = value\n            return;\n          }\n        }\n      }\n\n      function getLevelByDbId(dbId) {\n        for (const level of object.levels) {\n          if (level.dbId === dbId) {\n            return level\n          }\n        }\n      }\n\n      function findFloor(room, data) {\n        const leveldbId = getAttrValue(room, \"level\", '__internalref__');\n        const roomNumber = getAttrValue(room, \"number\").toString()\n        const res = [];\n\n        for (const floor of data.floors) {\n          const floorRoomId = getAttrValue(floor, \"roomid\");\n          const levelItemdbId = getAttrValue(floor, \"level\", '__internalref__');\n          const floorRoomNumber = getAttrValue(floor, FLOOR_ROOM_NUMBER_ATTR_NAME)\n          if (floorRoomId === room.externalId ||\n            (leveldbId === levelItemdbId &&\n            floorRoomNumber !== undefined &&\n            roomNumber == floorRoomNumber.toString())\n          ) {\n            if (FLOOR_ROOM_NAME_ATTR_NAME) {\n              const floorRoomName = getAttrValue(floor, FLOOR_ROOM_NAME_ATTR_NAME)\n              if (floorRoomName)\n                setAttrValue(room, 'name', floorRoomName)\n            }\n            if (FLOOR_LEVEL_NAME_ATTR_NAME) {\n              const floorName = getAttrValue(floor, FLOOR_LEVEL_NAME_ATTR_NAME)\n              if (floorName)\n                setAttrValue(getLevelByDbId(leveldbId), 'name', floorName)\n            }\n            res.push(floor);\n          }\n        }\n        return res;\n      }\n\n\n      for (let i = 0; i < object.levels.length; i++) {\n        const obj = object.levels[i];\n        archiModel[obj.dbId] = { properties: obj, children: {}, structures: {} }\n      }\n      for (let i = 0; i < object.rooms.length; i++) {\n        const obj = object.rooms[i];\n        const lvl = getAttrValue(obj, 'level', '__internalref__'); // check here;\n        if (lvl) {\n          archiModel[lvl].children[obj.externalId] = {\n            properties: obj,\n            children: findFloor(obj, object)\n          }\n        }\n      }\n      for (let i = 0; i < object.structures.length; i++) {\n        const obj = object.structures[i];\n        const lvl = getAttrValue(obj, 'level', '__internalref__');\n        if (archiModel[lvl]) {\n          archiModel[lvl].structures[obj.externalId] = {\n            properties: obj,\n          }\n        }\n      }\n      return archiModel;\n    }\n    console.log(\"dbIds =>\", dbIds);\n    return createArchitectureModel(dbIds)\n  }`;\n  return fct;\n}\n\n// (<any>window).testCreateFctGetArchi = async function () {\n//   const cfg = {\n//     \"configName\": \"default\",\n//     \"basic\": { \"addLevel\": false, \"buildingName\": \"Parallèle\", \"selectedModel\": \"enedis.rvt\" },\n//     \"levelSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Level$/\", \"isCat\": true }],\n//     \"roomSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Pièces$/\", \"isCat\": true }],\n//     \"structureSelect\": [\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Murs$/\", \"isCat\": true },\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Sols$/\", \"isCat\": true },\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Portes$/\", \"isCat\": true },\n//       { \"key\": \"/^Category$/\", \"value\": \"/^Revit Fenêtres$/\", \"isCat\": true }],\n//     \"floorSelect\": [{ \"key\": \"/^SCtype$/\", \"value\": \"/^Floor_finish$/\" }],\n//     \"floorRoomNbr\": \"Number\"\n//   }\n//   const fct = createFctGetArchi(cfg)\n//   const modelArchi = await (<any>window).NOP_VIEWER.model.getPropertyDb().executeUserFunction(fct);\n//   console.log(modelArchi);\n// }\n\n// (<any>window).test = async function () {\n//   const cfg = {\n//     \"configName\": \"default\",\n//     \"contextName\": \"spatial\",\n//     \"contextId\": \"SpinalContext-538f2dd5-71d1-4a9a-e260-5e18de281e49-17163c0c1d0\",\n//     \"basic\": { \"addLevel\": false, \"buildingName\": \"azerty\", \"selectedModel\": \"DEI (1).rvt\" },\n//     \"levelSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Level$/\", \"isCat\": true }],\n//     \"roomSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Pièces$/\", \"isCat\": true }],\n//     \"structureSelect\": [{ \"key\": \"/^Category$/\", \"value\": \"/^Revit Murs$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Portes$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Sols$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Garde-corps$/\", \"isCat\": true },\n//     { \"key\": \"/^Category$/\", \"value\": \"/^Revit Fenêtres$/\", \"isCat\": true }],\n//     \"floorRoomNbr\": \"Number\",\n//   }\n\n//   const fct = createFctGetArchi(cfg)\n\n//   function userFunction(pdb) {\n//     // TEST\n//     // let useFloor = false;\n//     // const levelSelect = testCfg.levelSelect;\n//     // const roomSelect = testCfg.roomSelect;\n//     // const structureSelect = testCfg.structureSelect;\n//     // const propsNames = propsToGet\n//     // END TEST\n\n//     let useFloor = false;\n//     const levelSelect = [{ key: /^Category$/, value: /^Revit Level$/, isCat: true },];\n//     const roomSelect = [{ key: /^Category$/, value: /^Revit Pièces$/, isCat: true },];\n//     const structureSelect = [{ key: /^Category$/, value: /^Revit Murs$/, isCat: true }, { key: /^Category$/, value: /^Revit Portes$/, isCat: true }, { key: /^Category$/, value: /^Revit Sols$/, isCat: true }, { key: /^Category$/, value: /^Revit Garde-corps$/, isCat: true }, { key: /^Category$/, value: /^Revit Fenêtres$/, isCat: true },];\n//     const floorSelect = [];\n//     const propsNames = [\"name\", \"elevation\", \"area\", \"volume\", \"perimeter\", \"stype\", \"roomid\", \"number\", \"Number\"];\n\n//     const FLOOR_ROOM_NUMBER_ATTR_NAME = \"Number\";\n//     const FLOOR_ROOM_NAME_ATTR_NAME = \"\";\n//     const FLOOR_LEVEL_NAME_ATTR_NAME = \"\";\n//     const attrLevel = [];\n//     const attrRoom = [];\n//     const attrStructure = [];\n//     const attrFloor = [];\n//     const props = [];\n//     function round(x, digits = 2) {\n//       return parseFloat(x.toFixed(digits))\n//     }\n\n//     function pushSelect(data, attrDef, idx, res) {\n//       for (const d of data) {\n//         if (\n//           d.key.test(attrDef.displayName) ||\n//           (d.isCat === true && attrDef.category === '__category__' && d.key.test(attrDef.name))\n//         ) {\n//           const item = res.find((item) => item.id === idx);\n//           if (item) item.d.push(d)\n//           else {\n//             res.push({\n//               id: idx,\n//               attrDef, d: [d]\n//             });\n//           }\n//         }\n//       }\n//     }\n\n//     function attrIsValid(attrs, attrId, value) {\n//       const attr = attrs.find((item) => item.id === attrId);\n//       if (!attr) return null;\n//       for (const d of attr.d) {\n//         if (d.value.test(value)) {\n//           return attr;\n//         }\n//       }\n//     }\n\n//     pdb.enumAttributes(function (idx, attrDef) {\n//       if (propsNames.includes(attrDef.name.toLowerCase()) ||\n//         (attrDef.name === 'Level' && attrDef.category === '__internalref__')) {\n//         props.push({ attrId: idx, attrDef })\n//       }\n//       pushSelect(levelSelect, attrDef, idx, attrLevel)\n//       pushSelect(roomSelect, attrDef, idx, attrRoom)\n//       pushSelect(structureSelect, attrDef, idx, attrStructure)\n//       pushSelect(floorSelect, attrDef, idx, attrFloor)\n//     });\n\n//     let dbIds = { floors: [], rooms: [], levels: [], structures: [] };\n//     const idExternal = {};\n\n//     let externalIdMapping = pdb.getExternalIdMapping();\n//     for (let key in externalIdMapping) {\n//       if (externalIdMapping.hasOwnProperty(key)) {\n//         idExternal[externalIdMapping[key]] = key;\n//       }\n//     }\n//     pdb.enumObjects(function (dbId) {\n//       const properties = [];\n//       let array = undefined;\n//       pdb.enumObjectProperties(dbId, function (attrId, valId) {\n//         let value = pdb.getAttrValue(attrId, valId);\n//         if (typeof value === \"number\") value = round(value);\n//         let prop = props.find(prop => prop.attrId === attrId)\n\n//         const levelProps = attrIsValid(attrLevel, attrId, value);\n//         const roomProps = attrIsValid(attrRoom, attrId, value);\n//         const structureProps = attrIsValid(attrStructure, attrId, value);\n//         const floorProps = attrIsValid(attrFloor, attrId, value);\n//         if (levelProps) {\n//           prop = levelProps;\n//           array = dbIds.levels;\n//         }\n//         if (roomProps) {\n//           prop = roomProps;\n//           array = dbIds.rooms;\n//         }\n//         if (floorProps) {\n//           prop = floorProps;\n//           array = dbIds.floors;\n//         }\n//         if (structureProps) {\n//           prop = structureProps;\n//           array = dbIds.structures;\n//         }\n\n//         if (prop) {\n//           const attrNameLowerCase = prop.attrDef.name.toLowerCase()\n//           let found = false;\n//           for (const propertie of properties) {\n//             if (propertie.name.toLowerCase() === attrNameLowerCase && propertie.category !== '__internalref__') {\n//               if (propertie.value !== value) {\n//                 propertie.oldValue = propertie.value\n//                 propertie.value = value\n//               }\n//               found = true\n//               break;\n//             }\n//           }\n//           if (!found) {\n//             const res = { name: attrNameLowerCase, value }\n//             if (prop.attrDef.dataTypeContext)\n//               Object.assign(res, { dataTypeContext: prop.attrDef.dataTypeContext });\n//             if (attrNameLowerCase === 'level' && prop.attrDef.category === '__internalref__')\n//               Object.assign(res, { category: prop.attrDef.category });\n//             properties.push(res);\n//           }\n//         }\n\n//       });\n//       if (Array.isArray(array))\n//         array.push({ dbId, properties, externalId: idExternal[dbId] })\n\n//     });\n\n//     if (useFloor === false) dbIds.floors = dbIds.rooms\n//     function createArchitectureModel(object) {\n//       const archiModel = {};\n\n//       function getAttrValue(obj, attrName, attrCat?) {\n//         const props = obj.properties;\n//         const attrNameLowerCase = attrName.toLowerCase()\n//         for (let i = 0; i < props.length; i++) {\n//           if (props[i].name.toLowerCase() === attrNameLowerCase) {\n//             if (attrCat && props[i].category !== attrCat) {\n//               continue;\n//             }\n//             return props[i].value\n//           }\n//         }\n//       }\n//       function setAttrValue(obj, attrName, value) {\n//         const props = obj.properties;\n//         const attrNameLowerCase = attrName.toLowerCase()\n//         for (let i = 0; i < props.length; i++) {\n//           if (props[i].name.toLowerCase() === attrNameLowerCase) {\n//             if (props[i].value === value) return;\n//             props[i].oldValue = props[i].value\n//             props[i].value = value\n//             return;\n//           }\n//         }\n//       }\n\n//       function getLevelByDbId(dbId) {\n//         for (const level of object.levels) {\n//           if (level.dbId === dbId) {\n//             return level\n//           }\n//         }\n//       }\n\n//       function findFloor(room, data) {\n//         const leveldbId = getAttrValue(room, \"level\", '__internalref__');\n//         const roomNumber = getAttrValue(room, \"number\").toString()\n//         const res = [];\n\n//         for (const floor of data.floors) {\n//           const levelItemdbId = getAttrValue(floor, \"level\", '__internalref__');\n//           const floorRoomNumber = getAttrValue(floor, FLOOR_ROOM_NUMBER_ATTR_NAME)\n\n//           if (\n//             leveldbId === levelItemdbId &&\n//             floorRoomNumber !== undefined &&\n//             roomNumber == floorRoomNumber.toString()\n//           ) {\n//             if (FLOOR_ROOM_NAME_ATTR_NAME) {\n//               const floorRoomName = getAttrValue(floor, FLOOR_ROOM_NAME_ATTR_NAME)\n//               if (floorRoomName)\n//                 setAttrValue(room, 'name', floorRoomName)\n//             }\n//             if (FLOOR_LEVEL_NAME_ATTR_NAME) {\n//               const floorName = getAttrValue(floor, FLOOR_LEVEL_NAME_ATTR_NAME)\n//               if (floorName)\n//                 setAttrValue(getLevelByDbId(leveldbId), 'name', floorName)\n//             }\n//             res.push(floor);\n//           }\n//         }\n//         return res;\n//       }\n\n//       for (let i = 0; i < object.levels.length; i++) {\n//         const obj = object.levels[i];\n//         archiModel[obj.dbId] = { properties: obj, children: {}, structures: {} }\n//       }\n//       for (let i = 0; i < object.rooms.length; i++) {\n//         const obj = object.rooms[i];\n//         const lvl = getAttrValue(obj, 'level', '__internalref__'); // check here;\n//         if (lvl) {\n//           archiModel[lvl].children[obj.externalId] = {\n//             properties: obj,\n//             children: findFloor(obj, object)\n//           }\n//         }\n//       }\n//       for (let i = 0; i < object.structures.length; i++) {\n//         const obj = object.structures[i];\n//         const lvl = getAttrValue(obj, 'level', '__internalref__');\n//         if (archiModel[lvl]) {\n//           archiModel[lvl].structures[obj.externalId] = {\n//             properties: obj,\n//           }\n//         }\n//       }\n//       return archiModel;\n//     }\n//     console.log(\"dbIds =>\", dbIds);\n//     return dbIds\n//     // return createArchitectureModel(dbIds)\n//   }\n\n//   const modelArchi = await (<any>window).NOP_VIEWER.model.getPropertyDb().executeUserFunction(fct);\n//   console.log(modelArchi);\n\n// }\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.config = void 0;\nexports.config = {\n    batchSize: 50,\n    contextName: 'spatial',\n    buildingName: 'building',\n    attrs: {\n        // Attributs recherché dans les props du batiment\n        room: {\n            // Piece du batiment\n            attrName: 'category',\n            attrVal: 'Revit Pièces',\n        },\n        level: {\n            // Etage du batiment\n            attrName: 'category',\n            attrVal: 'Revit Level',\n        },\n        floors: {\n            // sol des rooms\n            attrName: 'Stype',\n            attrVal: 'Floor_finish',\n        },\n    },\n    roomNiveau: 'Etage',\n    props: {\n        // Proprieté a recuperer pour chaque type d'objet\n        room: [\n            'area',\n            'volume',\n            'perimeter',\n            'local',\n            'etage',\n            'stype',\n            'roomid',\n            'number',\n        ],\n        level: {\n            components: {\n                type: 'Array',\n            },\n        },\n        floors: ['roomid'],\n    },\n};\n//# sourceMappingURL=Config.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport const config = {\n  batchSize: 50,\n  contextName: 'spatial',\n  buildingName: 'building',\n  attrs: {\n    // Attributs recherché dans les props du batiment\n    room: {\n      // Piece du batiment\n      attrName: 'category',\n      attrVal: 'Revit Pièces',\n    },\n    level: {\n      // Etage du batiment\n      attrName: 'category',\n      attrVal: 'Revit Level',\n    },\n    floors: {\n      // sol des rooms\n      attrName: 'Stype',\n      attrVal: 'Floor_finish',\n    },\n  },\n  roomNiveau: 'Etage',\n  props: {\n    // Proprieté a recuperer pour chaque type d'objet\n    room: [\n      'area',\n      'volume',\n      'perimeter',\n      'local',\n      'etage',\n      'stype',\n      'roomid',\n      'number',\n    ],\n    level: {\n      components: {\n        type: 'Array',\n      },\n    },\n    floors: ['roomid'],\n  },\n};\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BIMOBJECT_TYPE = exports.GEO_ROOM_TYPE = exports.GEO_ZONE_RELATION = exports.GEO_ROOM_RELATION = exports.GEO_FLOOR_RELATION = exports.GEO_BUILDING_RELATION = exports.GEO_SITE_RELATION = exports.GEO_REFERENCE_ROOM_RELATION = exports.GEO_REFERENCE_RELATION = exports.GEO_FLOOR_TYPE = exports.GEO_EQUIPMENT_RELATION = exports.GEO_EQUIPMENT_TYPE = void 0;\nvar spinal_env_viewer_context_geographic_service_1 = require(\"spinal-env-viewer-context-geographic-service\");\nObject.defineProperty(exports, \"GEO_EQUIPMENT_TYPE\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.EQUIPMENT_TYPE; } });\nObject.defineProperty(exports, \"GEO_EQUIPMENT_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.EQUIPMENT_RELATION; } });\nObject.defineProperty(exports, \"GEO_FLOOR_TYPE\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.FLOOR_TYPE; } });\nObject.defineProperty(exports, \"GEO_REFERENCE_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.REFERENCE_RELATION; } });\nObject.defineProperty(exports, \"GEO_REFERENCE_ROOM_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.REFERENCE_ROOM_RELATION; } });\nObject.defineProperty(exports, \"GEO_SITE_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.SITE_RELATION; } });\nObject.defineProperty(exports, \"GEO_BUILDING_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.BUILDING_RELATION; } });\nObject.defineProperty(exports, \"GEO_FLOOR_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.FLOOR_RELATION; } });\nObject.defineProperty(exports, \"GEO_ROOM_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.ROOM_RELATION; } });\nObject.defineProperty(exports, \"GEO_ZONE_RELATION\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.ZONE_RELATION; } });\nObject.defineProperty(exports, \"GEO_ROOM_TYPE\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.ROOM_TYPE; } });\nObject.defineProperty(exports, \"BIMOBJECT_TYPE\", { enumerable: true, get: function () { return spinal_env_viewer_context_geographic_service_1.EQUIPMENT_TYPE; } });\n//# sourceMappingURL=Constant.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport {\n  EQUIPMENT_TYPE as GEO_EQUIPMENT_TYPE,\n  EQUIPMENT_RELATION as GEO_EQUIPMENT_RELATION,\n  FLOOR_TYPE as GEO_FLOOR_TYPE,\n  REFERENCE_RELATION as GEO_REFERENCE_RELATION,\n  REFERENCE_ROOM_RELATION as GEO_REFERENCE_ROOM_RELATION,\n  SITE_RELATION as GEO_SITE_RELATION,\n  BUILDING_RELATION as GEO_BUILDING_RELATION,\n  FLOOR_RELATION as GEO_FLOOR_RELATION,\n  ROOM_RELATION as GEO_ROOM_RELATION,\n  ZONE_RELATION as GEO_ZONE_RELATION,\n  ROOM_TYPE as GEO_ROOM_TYPE,\n  EQUIPMENT_TYPE as BIMOBJECT_TYPE,\n} from 'spinal-env-viewer-context-geographic-service';\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpatialConfig = void 0;\nconst spinal_core_connectorjs_type_1 = __importStar(require(\"spinal-core-connectorjs_type\"));\nconst CONTEXT_NAME = 'spatial';\nconst DEFAULT_CONFIG_NAME = 'default';\nclass SpatialConfig extends spinal_core_connectorjs_type_1.Model {\n    constructor() {\n        super();\n        this.add_attr({\n            data: [\n                {\n                    configName: DEFAULT_CONFIG_NAME,\n                    contextName: CONTEXT_NAME,\n                    contextId: '',\n                    basic: {\n                        addLevel: false,\n                        buildingName: 'Building',\n                        selectedModel: '',\n                    },\n                    levelSelect: [\n                        { key: '/^Category$/', value: '/^Revit Level$/', isCat: true },\n                    ],\n                    roomSelect: [\n                        { key: '/^Category$/', value: '/^Revit Pièces$/', isCat: true },\n                    ],\n                    structureSelect: [\n                        { key: '/^Category$/', value: '/^Revit Murs$/', isCat: true },\n                        { key: '/^Category$/', value: '/^Revit Portes$/', isCat: true },\n                        {\n                            key: '/^Category$/',\n                            value: '/^Revit Garde-corps$/',\n                            isCat: true,\n                        },\n                        { key: '/^Category$/', value: '/^Revit Fenêtres$/', isCat: true },\n                        { key: '/^Category$/', value: '/^Revit Walls$/', isCat: true },\n                        { key: '/^Category$/', value: '/^Revit Doors$/', isCat: true },\n                        { key: '/^Category$/', value: '/^Revit Railings$/', isCat: true },\n                        { key: '/^Category$/', value: '/^Revit Windows$/', isCat: true },\n                    ],\n                    floorRoomNbr: 'Number',\n                    floorSelect: [\n                        { key: '/^Nom du type$/', value: '/^Finition de sol$/' },\n                    ],\n                },\n            ],\n        });\n    }\n    saveConfig(config) {\n        for (let i = 0; i < this.data.length; i++) {\n            const item = this.data[i];\n            if (item.configName.get() === config.configName) {\n                const contextId = item.contextId;\n                const contextName = item.contextName;\n                const archi = item.archi;\n                item.set(config);\n                if (contextId)\n                    item.mod_attr('contextId', contextId);\n                if (contextName)\n                    item.mod_attr('contextName', contextName);\n                if (archi)\n                    item.mod_attr('archi', archi);\n            }\n        }\n    }\n    getConfig(configName) {\n        for (let i = 0; i < this.data.length; i++) {\n            const item = this.data[i];\n            if (item.configName.get() === configName) {\n                return item;\n            }\n        }\n    }\n    getConfigFromContextId(contextId) {\n        for (let i = 0; i < this.data.length; i++) {\n            const item = this.data[i];\n            if (item.contextId.get() === contextId) {\n                return item;\n            }\n        }\n    }\n}\nexports.SpatialConfig = SpatialConfig;\nspinal_core_connectorjs_type_1.default.register_models(SpatialConfig);\n//# sourceMappingURL=SpatialConfig.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport spinalCore, { Model } from 'spinal-core-connectorjs_type';\n\nconst CONTEXT_NAME = 'spatial';\nconst DEFAULT_CONFIG_NAME = 'default';\n\n// interface RevitAttributesObj extends spinal.Model {\n//   attrName: spinal.Str,\n//   attrVal: spinal.Str,\n// }\n\n//Attribute needed to find the elements\n// export interface RevitAttributes extends spinal.Model {\n//   room: RevitAttributesObj;// Piece du batiment\n//   level: RevitAttributesObj;// Etage du batiment\n//   floors: RevitAttributesObj;// Sol des rooms\n// }\n\n// export interface ObjectProperties extends spinal.Model {\n//   room: spinal.Lst<spinal.Str>,\n//   level: spinal.Lst<spinal.Str>,\n//   floor: spinal.Lst<spinal.Str>,\n// }\nexport interface IMBasic extends spinal.Model {\n  addLevel: spinal.Bool;\n  buildingName: spinal.Str;\n  selectedModel: spinal.Str;\n}\n\nexport interface IMArchiSelect extends spinal.Model {\n  key: spinal.Str;\n  value: spinal.Str;\n  isCat?: spinal.Bool;\n}\n\nexport interface IMConfigArchi extends spinal.Model {\n  configName: spinal.Str;\n  contextName: spinal.Str;\n  contextId: spinal.Str;\n  basic: IMBasic;\n  levelSelect: IMArchiSelect[];\n  roomSelect: IMArchiSelect[];\n  structureSelect: IMArchiSelect[];\n  floorSelect?: IMArchiSelect[];\n  floorRoomNbr: spinal.Str;\n  floorRoomName?: spinal.Str;\n  floorLevelName?: spinal.Str;\n}\n\nexport interface Basic {\n  addLevel: boolean;\n  buildingName: string;\n  selectedModel: string;\n}\n\nexport interface ArchiSelect {\n  key: string;\n  value: string;\n  isCat?: boolean;\n}\n\nexport interface ConfigArchi {\n  configName: string;\n  contextName: string;\n  contextId: string;\n  basic: Basic;\n  levelSelect: ArchiSelect[];\n  roomSelect: ArchiSelect[];\n  structureSelect: ArchiSelect[];\n  floorSelect?: ArchiSelect[];\n  floorRoomNbr: string;\n  floorRoomName?: string;\n  floorLevelName?: string;\n  archi?: any;\n}\n\nexport class SpatialConfig extends Model {\n  public data: spinal.Lst<IMConfigArchi>;\n\n  constructor() {\n    super();\n    this.add_attr({\n      data: [\n        {\n          configName: DEFAULT_CONFIG_NAME,\n          contextName: CONTEXT_NAME,\n          contextId: '',\n          basic: {\n            addLevel: false,\n            buildingName: 'Building',\n            selectedModel: '',\n          },\n          levelSelect: [\n            { key: '/^Category$/', value: '/^Revit Level$/', isCat: true },\n          ],\n          roomSelect: [\n            { key: '/^Category$/', value: '/^Revit Pièces$/', isCat: true },\n          ],\n          structureSelect: [\n            { key: '/^Category$/', value: '/^Revit Murs$/', isCat: true },\n            { key: '/^Category$/', value: '/^Revit Portes$/', isCat: true },\n            {\n              key: '/^Category$/',\n              value: '/^Revit Garde-corps$/',\n              isCat: true,\n            },\n            { key: '/^Category$/', value: '/^Revit Fenêtres$/', isCat: true },\n            { key: '/^Category$/', value: '/^Revit Walls$/', isCat: true },\n            { key: '/^Category$/', value: '/^Revit Doors$/', isCat: true },\n            { key: '/^Category$/', value: '/^Revit Railings$/', isCat: true },\n            { key: '/^Category$/', value: '/^Revit Windows$/', isCat: true },\n          ],\n          floorRoomNbr: 'Number',\n          floorSelect: [\n            { key: '/^Nom du type$/', value: '/^Finition de sol$/' },\n          ],\n        },\n      ],\n    });\n  }\n\n  saveConfig(config: ConfigArchi) {\n    for (let i = 0; i < this.data.length; i++) {\n      const item = this.data[i];\n      if (item.configName.get() === config.configName) {\n        const contextId = item.contextId;\n        const contextName = item.contextName;\n        const archi = item.archi;\n        item.set(config);\n        if (contextId) item.mod_attr('contextId', contextId);\n        if (contextName) item.mod_attr('contextName', contextName);\n        if (archi) item.mod_attr('archi', archi);\n      }\n    }\n  }\n  getConfig(configName: string): IMConfigArchi {\n    for (let i = 0; i < this.data.length; i++) {\n      const item = this.data[i];\n      if (item.configName.get() === configName) {\n        return item;\n      }\n    }\n  }\n\n  getConfigFromContextId(contextId: string): IMConfigArchi {\n    for (let i = 0; i < this.data.length; i++) {\n      const item = this.data[i];\n      if (item.contextId.get() === contextId) {\n        return item;\n      }\n    }\n  }\n}\n\nspinalCore.register_models(SpatialConfig);\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BuildingManager = void 0;\nconst AbstractEntityManager_1 = require(\"./AbstractEntityManager\");\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst spinal_env_viewer_context_geographic_service_1 = __importDefault(require(\"spinal-env-viewer-context-geographic-service\"));\nconst spinal_models_building_elements_1 = require(\"spinal-models-building-elements\");\nclass BuildingManager extends AbstractEntityManager_1.AbstractEntityManager {\n    constructor() {\n        super();\n    }\n    create(name, info, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let nodeId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({\n                name: name,\n                type: spinal_env_viewer_context_geographic_service_1.default.constants.BUILDING_TYPE\n            }, new spinal_models_building_elements_1.AbstractElement(name));\n            yield this.addAttribute(spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId), attributes);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getNode(nodeId);\n        });\n    }\n    getParents(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let parents = yield node.getParents();\n            for (let i = 0; i < parents.length; i++) {\n                if (parents[i].info.type.get() === spinal_env_viewer_context_geographic_service_1.default.constants.CONTEXT_TYPE)\n                    return parents[i];\n            }\n            return undefined;\n        });\n    }\n    update(entityId, info) {\n        return undefined;\n    }\n}\nexports.BuildingManager = BuildingManager;\n//# sourceMappingURL=BuildingManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { AbstractEntityManager } from \"./AbstractEntityManager\";\nimport {\n  SpinalGraphService,\n  SpinalNodeRef\n} from \"spinal-env-viewer-graph-service\";\nimport GeographicService from 'spinal-env-viewer-context-geographic-service'\nimport {\n  AbstractElement\n} from \"spinal-models-building-elements\";\nimport { SpinalProps } from \"../SpatialManager\";\n\nexport class BuildingManager extends AbstractEntityManager {\n\n  constructor() {\n    super();\n  }\n\n  async create(name: string, info: any[], attributes: SpinalProps[]): Promise<SpinalNodeRef> {\n    let nodeId = SpinalGraphService.createNode({\n      name: name,\n      type: GeographicService.constants.BUILDING_TYPE\n    }, new AbstractElement(name));\n    await this.addAttribute(SpinalGraphService.getRealNode(nodeId), attributes);\n    return SpinalGraphService.getNode(nodeId)\n  }\n\n  async getParents(node) {\n    let parents = await node.getParents();\n    for (let i = 0; i < parents.length; i++) {\n      if (parents[i].info.type.get() === GeographicService.constants.CONTEXT_TYPE)\n        return parents[i];\n    }\n    return undefined;\n  }\n\n  update(entityId: string, info: Autodesk.Viewing.Property[]): SpinalNodeRef {\n    return undefined;\n  }\n\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractEntityManager = void 0;\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst InvalidObjectManager_1 = require(\"./InvalidObjectManager\");\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst spinal_env_viewer_context_geographic_service_1 = __importDefault(require(\"spinal-env-viewer-context-geographic-service\"));\nconst InvalidManager = new InvalidObjectManager_1.InvalidObjectManager();\nclass AbstractEntityManager {\n    constructor() {\n        this.invalidObjectManager = new InvalidObjectManager_1.InvalidObjectManager();\n    }\n    /**\n     * add a new entity to the parent if the entity is not already present\n     * @param contextId {string}\n     * @param parentId {string}\n     * @param childId {string}\n     * @param relationName {string}\n     * @param relationType {string}\n     */\n    addChild(contextId, parentId, childId, relationName, relationType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parentChild = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(parentId, [relationName]);\n            if (typeof parentChild !== 'undefined')\n                for (let i = 0; i < parentChild.length; i++) {\n                    const brother = parentChild[i];\n                    if (brother.id.get() === childId)\n                        return brother;\n                }\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(parentId, childId, contextId, relationName, relationType).then((node) => spinal_env_viewer_graph_service_1.SpinalGraphService.getNode(node.info.id.get()));\n        });\n    }\n    /**\n     * Delete the entity\n     * @param entityId {string} id of the entity\n     * @returns true if the entity has been deleted false otherwise\n     */\n    delete(entityId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const roomNode = yield spinal_env_viewer_graph_service_1.SpinalGraphService.getNodeAsync(entityId);\n            const parent = yield this.getParents(roomNode);\n            if (typeof parent === 'undefined')\n                return false;\n            const removed = yield spinal_env_viewer_graph_service_1.SpinalGraphService.removeChild(parent.info.id.get(), entityId, spinal_env_viewer_context_geographic_service_1.default.constants.ROOM_RELATION, spinal_env_viewer_graph_service_1.SPINAL_RELATION_TYPE);\n            yield this.invalidObjectManager.addObject(entityId);\n            return removed;\n        });\n    }\n    addBimObject(contextId, parentId, dbId, objectName, model) {\n        // @ts-ignore\n        window.spinal.BimObjectService.addBIMObject(contextId, parentId, dbId, objectName, model);\n    }\n    addReferenceObject(parentId, dbId, name, model) {\n        // @ts-ignore\n        window.spinal.BimObjectService.addReferenceObject(parentId, dbId, name, model);\n    }\n    /**\n     * Add all the attribute of $attribute to the node\n     * @param node\n     * @param attributes\n     * @param properties\n     */\n    addAttribute(node, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let proms = [];\n            let category = yield spinal_env_viewer_plugin_documentation_service_1.serviceDocumentation.getCategoryByName(node, 'Spatial');\n            if (typeof category === 'undefined') {\n                category = yield spinal_env_viewer_plugin_documentation_service_1.serviceDocumentation.addCategoryAttribute(node, 'Spatial');\n            }\n            for (let i = 0; i < attributes.length; i++) {\n                const prop = attributes[i];\n                proms.push(spinal_env_viewer_plugin_documentation_service_1.serviceDocumentation.addAttributeByCategory(node, category, prop.name, prop.value));\n            }\n            return Promise.all(proms);\n        });\n    }\n    /**\n     * Get the entity for entityId\n     * @param entityId {string} id of the entity\n     * @returns  the entity if found undefined otherwise\n     */\n    get(entityId) {\n        return spinal_env_viewer_graph_service_1.SpinalGraphService.getNodeAsync(entityId);\n    }\n    getPropertyValueByName(properties, name) {\n        for (let i = 0; i < properties.length; i++) {\n            if (properties[i].name.toLowerCase() === name.toLowerCase())\n                return properties[i].value;\n        }\n        return undefined;\n    }\n    getByExternalId(externalId, parentId, relationName) {\n        return spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(parentId, [relationName]).then((children) => {\n            if (typeof children === 'undefined')\n                return undefined;\n            for (let i = 0; i < children.length; i++) {\n                if (children[i].hasOwnProperty('externalId') &&\n                    children[i].externalId.get() === externalId)\n                    return children[i];\n            }\n            return undefined;\n        });\n    }\n}\nexports.AbstractEntityManager = AbstractEntityManager;\n//# sourceMappingURL=AbstractEntityManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport Model = Autodesk.Viewing.Model;\nimport {\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SpinalGraphService,\n  SpinalNodeRef,\n  SpinalNode,\n  SPINAL_RELATION_TYPE,\n} from 'spinal-env-viewer-graph-service';\nimport { InvalidObjectManager } from './InvalidObjectManager';\n\nimport { serviceDocumentation } from 'spinal-env-viewer-plugin-documentation-service';\n\nexport interface EntityProp {\n  propName: string;\n  propVal: any;\n}\n\nimport GeographicService from 'spinal-env-viewer-context-geographic-service';\nimport { SpinalProps } from '../SpatialManager';\n\nconst InvalidManager = new InvalidObjectManager();\n\nexport abstract class AbstractEntityManager {\n  private invalidObjectManager: InvalidObjectManager;\n\n  protected constructor() {\n    this.invalidObjectManager = new InvalidObjectManager();\n  }\n\n  /**\n   * Create a new entity with the info as SpinalAttribute\n   * @param name {string} node of the entity\n   * @param info {EntityProp[]}\n   * @param attributes {string} properties to add as attribute for the entity\n   * return the entity newly created\n\n   */\n  abstract create(\n    name: string,\n    info: SpinalProps[],\n    attributes: SpinalProps[]\n  ): Promise<SpinalNodeRef>;\n\n  abstract getParents(node): Promise<SpinalNode<any>>;\n\n  /**\n   * Update the entity with all the props of info\n   * @param entityId {string}\n   * @param info {EntityProp[]}\n   * @returns return the entity updated\n   */\n  abstract update(entityId: string, info: any[]): SpinalNodeRef;\n\n  /**\n   * add a new entity to the parent if the entity is not already present\n   * @param contextId {string}\n   * @param parentId {string}\n   * @param childId {string}\n   * @param relationName {string}\n   * @param relationType {string}\n   */\n  async addChild(\n    contextId: string,\n    parentId: string,\n    childId: string,\n    relationName: string,\n    relationType: string\n  ): Promise<SpinalNodeRef> {\n    const parentChild: SpinalNodeRef[] = await SpinalGraphService.getChildren(\n      parentId,\n      [relationName]\n    );\n    if (typeof parentChild !== 'undefined')\n      for (let i = 0; i < parentChild.length; i++) {\n        const brother = parentChild[i];\n        if (brother.id.get() === childId) return brother;\n      }\n    return SpinalGraphService.addChildInContext(\n      parentId,\n      childId,\n      contextId,\n      relationName,\n      relationType\n    ).then((node) => SpinalGraphService.getNode(node.info.id.get()));\n  }\n\n  /**\n   * Delete the entity\n   * @param entityId {string} id of the entity\n   * @returns true if the entity has been deleted false otherwise\n   */\n  async delete(entityId: string): Promise<boolean> {\n    const roomNode = await SpinalGraphService.getNodeAsync(entityId);\n    const parent = await this.getParents(roomNode);\n    if (typeof parent === 'undefined') return false;\n\n    const removed = await SpinalGraphService.removeChild(\n      parent.info.id.get(),\n      entityId,\n      GeographicService.constants.ROOM_RELATION,\n      SPINAL_RELATION_TYPE\n    );\n    await this.invalidObjectManager.addObject(entityId);\n    return removed;\n  }\n\n  addBimObject(\n    contextId: string,\n    parentId: string,\n    dbId: number,\n    objectName: string,\n    model\n  ) {\n    // @ts-ignore\n    window.spinal.BimObjectService.addBIMObject(\n      contextId,\n      parentId,\n      dbId,\n      objectName,\n      model\n    );\n  }\n\n  addReferenceObject(\n    parentId: string,\n    dbId: number,\n    name: string,\n    model: Model\n  ) {\n    // @ts-ignore\n    window.spinal.BimObjectService.addReferenceObject(\n      parentId,\n      dbId,\n      name,\n      model\n    );\n  }\n\n  /**\n   * Add all the attribute of $attribute to the node\n   * @param node\n   * @param attributes\n   * @param properties\n   */\n  async addAttribute(node: SpinalNode<any>, attributes: SpinalProps[]) {\n    let proms = [];\n    let category = await serviceDocumentation.getCategoryByName(\n      node,\n      'Spatial'\n    );\n    if (typeof category === 'undefined') {\n      category = await serviceDocumentation.addCategoryAttribute(\n        node,\n        'Spatial'\n      );\n    }\n    for (let i = 0; i < attributes.length; i++) {\n      const prop = attributes[i];\n\n      proms.push(\n        serviceDocumentation.addAttributeByCategory(\n          node,\n          category,\n          prop.name,\n          prop.value\n        )\n      );\n    }\n    return Promise.all(proms);\n  }\n\n  /**\n   * Get the entity for entityId\n   * @param entityId {string} id of the entity\n   * @returns  the entity if found undefined otherwise\n   */\n  get(entityId: string): Promise<SpinalNodeRef> {\n    return SpinalGraphService.getNodeAsync(entityId);\n  }\n\n  getPropertyValueByName(properties: SpinalProps[], name: string): string {\n    for (let i = 0; i < properties.length; i++) {\n      if (properties[i].name.toLowerCase() === name.toLowerCase())\n        return properties[i].value;\n    }\n    return undefined;\n  }\n\n  getByExternalId(externalId: string, parentId, relationName) {\n    return SpinalGraphService.getChildren(parentId, [relationName]).then(\n      (children) => {\n        if (typeof children === 'undefined') return undefined;\n\n        for (let i = 0; i < children.length; i++) {\n          if (\n            children[i].hasOwnProperty('externalId') &&\n            children[i].externalId.get() === externalId\n          )\n            return children[i];\n        }\n        return undefined;\n      }\n    );\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvalidObjectManager = exports.SPATIAL_START_NODE_NAME = exports.SPATIAL_RELATION_NAME = exports.SPATIAL_START_NODE_RELATION_NAME = exports.CONTEXT_NAME = void 0;\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nexports.CONTEXT_NAME = 'Invalid';\nexports.SPATIAL_START_NODE_RELATION_NAME = 'hasSpatialInvalidStartNode';\nexports.SPATIAL_RELATION_NAME = 'hasSpatialInvalidNode';\nexports.SPATIAL_START_NODE_NAME = 'Object invalid du' +\n    ' context Spatial';\nclass InvalidObjectManager {\n    constructor() {\n        this.initialized = this.init();\n    }\n    addObject(nodeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.initialized;\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(this.spatialStartNode.id.get(), nodeId, this.context.info.id.get(), exports.SPATIAL_RELATION_NAME, spinal_env_viewer_graph_service_1.SPINAL_RELATION_TYPE);\n        });\n    }\n    init() {\n        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield spinal_env_viewer_graph_service_1.SpinalGraphService.waitForInitialization();\n                this.context = yield InvalidObjectManager.getContext();\n                this.contextId = this.context.info.id.get();\n                this.spatialStartNode = yield this.getSpatialStartNode();\n                resolve(true);\n            }\n            catch (e) {\n                console.error(e);\n                resolve(false);\n            }\n        }));\n    }\n    getSpatialStartNode() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const children = yield spinal_env_viewer_graph_service_1.SpinalGraphService\n                .getChildren(this.contextId, [exports.SPATIAL_START_NODE_RELATION_NAME]);\n            for (let i = 0; i < children.length; i++) {\n                if (children[i].name.get() === exports.SPATIAL_START_NODE_NAME) {\n                    return children[i];\n                }\n            }\n            const startNodeId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({ name: exports.SPATIAL_START_NODE_NAME }, undefined);\n            const contextId = this.context.info.id.get();\n            yield spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(contextId, startNodeId, contextId, exports.SPATIAL_START_NODE_RELATION_NAME, spinal_env_viewer_graph_service_1.SPINAL_RELATION_TYPE);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getNode(startNodeId);\n        });\n    }\n    static getContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext(exports.CONTEXT_NAME);\n            if (typeof context === \"undefined\")\n                context = yield InvalidObjectManager.createContext();\n            return context;\n        });\n    }\n    static createContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield spinal_env_viewer_graph_service_1.SpinalGraphService.addContext(exports.CONTEXT_NAME, 'SpinalSystem', undefined);\n        });\n    }\n}\nexports.InvalidObjectManager = InvalidObjectManager;\n//# sourceMappingURL=InvalidObjectManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_TYPE,\n  SpinalNodeRef,\n  SpinalContext\n} from \"spinal-env-viewer-graph-service\";\nimport Obj = spinal.Obj;\n\nexport const CONTEXT_NAME: string = 'Invalid';\nexport const SPATIAL_START_NODE_RELATION_NAME: string = 'hasSpatialInvalidStartNode';\nexport const SPATIAL_RELATION_NAME: string = 'hasSpatialInvalidNode';\nexport const SPATIAL_START_NODE_NAME: string = 'Object invalid du' +\n  ' context Spatial';\n\nexport class InvalidObjectManager {\n\n  private context: SpinalContext<any>;\n  public contextId: string;\n  private spatialStartNode: SpinalNodeRef;\n  private readonly initialized: Promise<boolean>;\n\n  constructor() {\n    this.initialized = this.init();\n  }\n\n  public async addObject(nodeId) {\n    await this.initialized;\n    return SpinalGraphService.addChildInContext(this.spatialStartNode.id.get(),\n      nodeId, this.context.info.id.get(), SPATIAL_RELATION_NAME, SPINAL_RELATION_TYPE);\n  }\n\n  private init(): Promise<boolean> {\n    return new Promise(async resolve => {\n      try {\n        await SpinalGraphService.waitForInitialization();\n\n        this.context = await InvalidObjectManager.getContext();\n        this.contextId = this.context.info.id.get();\n        this.spatialStartNode = await this.getSpatialStartNode();\n        resolve(true);\n      } catch (e) {\n        console.error(e);\n        resolve(false);\n      }\n    });\n  }\n\n  private async getSpatialStartNode(): Promise<SpinalNodeRef> {\n    const children = await SpinalGraphService\n      .getChildren(this.contextId, [SPATIAL_START_NODE_RELATION_NAME]);\n    for (let i = 0; i < children.length; i++) {\n      if (children[i].name.get() === SPATIAL_START_NODE_NAME) {\n        return children[i];\n      }\n    }\n    const startNodeId = SpinalGraphService.createNode({ name: SPATIAL_START_NODE_NAME }, undefined);\n    const contextId = this.context.info.id.get();\n    await SpinalGraphService.addChildInContext(contextId, startNodeId, contextId, SPATIAL_START_NODE_RELATION_NAME, SPINAL_RELATION_TYPE);\n    return SpinalGraphService.getNode(startNodeId);\n  }\n\n  private static async getContext() {\n    let context = SpinalGraphService.getContext(CONTEXT_NAME);\n    if (typeof context === \"undefined\")\n      context = await InvalidObjectManager.createContext();\n\n    return context\n  }\n\n  private static async createContext() {\n    return await SpinalGraphService.addContext(CONTEXT_NAME, 'SpinalSystem', undefined);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FloorManager = void 0;\nconst AbstractEntityManager_1 = require(\"./AbstractEntityManager\");\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst spinal_env_viewer_context_geographic_service_1 = __importDefault(require(\"spinal-env-viewer-context-geographic-service\"));\nconst spinal_models_building_elements_1 = require(\"spinal-models-building-elements\");\nclass FloorManager extends AbstractEntityManager_1.AbstractEntityManager {\n    constructor() {\n        super();\n    }\n    create(name, info, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nodeId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({\n                name: name,\n                type: spinal_env_viewer_context_geographic_service_1.default.constants.FLOOR_TYPE\n            }, new spinal_models_building_elements_1.AbstractElement(name));\n            yield this.addAttribute(spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId), attributes);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getNode(nodeId);\n        });\n    }\n    getParents(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let parents = yield node.getParents();\n            for (let i = 0; i < parents.length; i++) {\n                if (parents[i].info.type.get() === spinal_env_viewer_context_geographic_service_1.default.constants.BUILDING_TYPE)\n                    return parents[i];\n            }\n            return undefined;\n        });\n    }\n    update(entityId, info) {\n        return undefined;\n    }\n}\nexports.FloorManager = FloorManager;\n//# sourceMappingURL=FloorManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { AbstractEntityManager } from \"./AbstractEntityManager\";\nimport {\n  SpinalGraphService,\n  SpinalNodeRef\n} from \"spinal-env-viewer-graph-service\";\nimport GeographicService from 'spinal-env-viewer-context-geographic-service'\nimport {\n  AbstractElement\n} from \"spinal-models-building-elements\";\nimport { SpinalProps } from \"../SpatialManager\";\n\nexport class FloorManager extends AbstractEntityManager {\n\n  constructor() {\n    super();\n  }\n\n  async create(name: string, info: any[], attributes: SpinalProps[]): Promise<SpinalNodeRef> {\n    const nodeId = SpinalGraphService.createNode({\n      name: name,\n      type: GeographicService.constants.FLOOR_TYPE\n    }, new AbstractElement(name));\n\n    await this.addAttribute(SpinalGraphService.getRealNode(nodeId), attributes);\n    return SpinalGraphService.getNode(nodeId)\n\n  }\n\n  async getParents(node) {\n    let parents = await node.getParents();\n    for (let i = 0; i < parents.length; i++) {\n      if (parents[i].info.type.get() === GeographicService.constants.BUILDING_TYPE)\n        return parents[i];\n    }\n    return undefined;\n  }\n\n  update(entityId: string, info: Autodesk.Viewing.Property[]): SpinalNodeRef {\n    return undefined;\n  }\n\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoomManager = void 0;\nconst AbstractEntityManager_1 = require(\"./AbstractEntityManager\");\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nconst spinal_models_building_elements_1 = require(\"spinal-models-building-elements\");\nconst spinal_env_viewer_context_geographic_service_1 = __importDefault(require(\"spinal-env-viewer-context-geographic-service\"));\nclass RoomManager extends AbstractEntityManager_1.AbstractEntityManager {\n    constructor() {\n        super();\n    }\n    create(name, info, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const roomId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({\n                name: name,\n                type: spinal_env_viewer_context_geographic_service_1.default.constants.ROOM_TYPE\n            }, new spinal_models_building_elements_1.AbstractElement(name));\n            yield this.addAttribute(spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(roomId), attributes);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getNode(roomId);\n        });\n    }\n    getParents(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let parents = yield node.getParents();\n            for (let i = 0; i < parents.length; i++) {\n                if (parents[i].info.type.get() === spinal_env_viewer_context_geographic_service_1.default.constants.FLOOR_TYPE)\n                    return parents[i];\n            }\n            return undefined;\n        });\n    }\n    update(entityId, info) {\n        return undefined;\n    }\n}\nexports.RoomManager = RoomManager;\n//# sourceMappingURL=RoomManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { AbstractEntityManager } from \"./AbstractEntityManager\";\nimport {\n  SpinalGraphService,\n  SpinalNodeRef,\n  SPINAL_RELATION_TYPE\n} from \"spinal-env-viewer-graph-service\";\nimport {\n  AbstractElement\n} from \"spinal-models-building-elements\";\nimport GeographicService from 'spinal-env-viewer-context-geographic-service'\nimport Property = Autodesk.Viewing.Property;\nimport { SpinalProps } from \"../SpatialManager\";\n\nexport class RoomManager extends AbstractEntityManager {\n\n  constructor() {\n    super();\n  }\n\n  async create(name: string, info: any[], attributes: SpinalProps[])\n    : Promise<SpinalNodeRef> {\n    const roomId = SpinalGraphService.createNode({\n      name: name,\n      type: GeographicService.constants.ROOM_TYPE\n    }, new AbstractElement(name));\n\n    await this.addAttribute(SpinalGraphService.getRealNode(roomId), attributes);\n    return SpinalGraphService.getNode(roomId);\n  }\n\n\n  async getParents(node) {\n    let parents = await node.getParents();\n    for (let i = 0; i < parents.length; i++) {\n      if (parents[i].info.type.get() === GeographicService.constants.FLOOR_TYPE)\n        return parents[i];\n    }\n    return undefined;\n  }\n\n  update(entityId: string, info: Property[]): SpinalNodeRef {\n    return undefined;\n  }\n\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.consumeBatch = void 0;\nfunction consumeBatch(promises, batchSize = 10, callBackProgress) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let index = 0;\n        const result = [];\n        while (index < promises.length) {\n            let endIndex = index + batchSize;\n            if (promises.length <= endIndex)\n                endIndex = promises.length;\n            const slice = promises.slice(index, endIndex);\n            const resProm = yield Promise.all(slice.map((e) => e()));\n            if (callBackProgress)\n                callBackProgress(endIndex, promises.length);\n            result.push(...resProm);\n            index = endIndex;\n        }\n        return result;\n    });\n}\nexports.consumeBatch = consumeBatch;\n//# sourceMappingURL=consumeBatch.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport type Consumedfunction<T> = () => Promise<T>;\nexport async function consumeBatch<T>(\n  promises: Consumedfunction<T>[],\n  batchSize = 10,\n  callBackProgress?: (index: number, total: number) => void\n): Promise<T[]> {\n  let index = 0;\n  const result = [];\n  while (index < promises.length) {\n    let endIndex = index + batchSize;\n    if (promises.length <= endIndex) endIndex = promises.length;\n    const slice = promises.slice(index, endIndex);\n    const resProm = await Promise.all(\n      slice.map((e: Consumedfunction<T>): Promise<T> => e())\n    );\n    if (callBackProgress) callBackProgress(endIndex, promises.length);\n    result.push(...resProm);\n    index = endIndex;\n  }\n  return result;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=interfaces.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface ComparisionObject {\n  deleted: {\n    levels: { [externalId: string]: Level };\n    rooms: { [externalId: string]: CmpRoom };\n  };\n  updated: {\n    levels: { [externalId: string]: Level };\n    rooms: { [externalId: string]: CmpRoom };\n  };\n  new: {\n    levels: { [externalId: string]: Level };\n    rooms: { [externalId: string]: Room[] };\n  };\n}\n\nexport type CmpRoom = { levelId: string; room: Room };\nexport interface ModelArchi {\n  [dbId: string]: Level;\n}\nexport type LevelRooms = { [externalId: string]: Room };\nexport type LevelStructures = { [externalId: string]: Structure };\n\nexport interface Level {\n  properties: Properties;\n  children: LevelRooms;\n  structures: LevelStructures;\n}\n\nexport interface Room {\n  properties: Properties;\n  children: Structure[];\n}\nexport interface Structure {\n  properties: Properties;\n}\n\nexport interface Properties {\n  dbId: number;\n  externalId: string;\n  properties: SpinalProps[];\n}\n\nexport interface SpinalProps {\n  name: string;\n  value: any;\n  [type: string]: any;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./scripts\"), exports);\n__exportStar(require(\"./cmd\"), exports);\n__exportStar(require(\"./utils\"), exports);\n__exportStar(require(\"./diffArchi\"), exports);\n__exportStar(require(\"./ProjectObjectInContext\"), exports);\n__exportStar(require(\"./constant\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './interfaces';\nexport * from './scripts';\nexport * from './cmd';\nexport * from './utils';\nexport * from './diffArchi';\nexport * from './ProjectObjectInContext';\nexport * from './constant';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./AuProps\"), exports);\n__exportStar(require(\"./IAggregateSelectItem\"), exports);\n__exportStar(require(\"./ICmdNew\"), exports);\n__exportStar(require(\"./IFloorData\"), exports);\n__exportStar(require(\"./IGetArchi\"), exports);\n__exportStar(require(\"./IProjectionItem\"), exports);\n__exportStar(require(\"./IProjectionOffset\"), exports);\n__exportStar(require(\"./ISkipItem\"), exports);\n__exportStar(require(\"./SpinalVec3\"), exports);\n__exportStar(require(\"./TProjectionItem\"), exports);\n__exportStar(require(\"./TProjectionLst\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './AuProps';\nexport * from './IAggregateSelectItem';\nexport * from './ICmdNew';\nexport * from './IFloorData';\nexport * from './IGetArchi';\nexport * from './IProjectionItem';\nexport * from './IProjectionOffset';\nexport * from './ISkipItem';\nexport * from './SpinalVec3';\nexport * from './TProjectionItem';\nexport * from './TProjectionLst';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=AuProps.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport type AuProps = Autodesk.Viewing.PropertyResult & {\n  id: string;\n  modelId: number;\n};\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IAggregateSelectItem.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface IAggregateSelectItem {\n  modelId: number;\n  selection: number[];\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ICmdNew.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface ICmdNew {\n  /**\n   * nodeIdParent\n   */\n  pNId: string;\n  id?: string;\n  name?: string;\n  type: string;\n  nIdToDel?: string[];\n  info?: ICmdNewInfo;\n  attr?: ICmdNewAttr[];\n}\n\nexport interface ICmdNewInfo {\n  dbid: number;\n  externalId: string;\n  bimFileId: string;\n  [key: string]: string | number;\n}\n\nexport interface ICmdNewAttr {\n  label: string;\n  value: string | number;\n  unit?: string;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IFloorData.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IDiffFloor, IFloorArchi } from './IGetArchi';\nexport interface IFloorData {\n  diff?: IDiffFloor;\n  floorArchi: IFloorArchi;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EModificationType = void 0;\nvar EModificationType;\n(function (EModificationType) {\n    EModificationType[EModificationType[\"none\"] = 0] = \"none\";\n    EModificationType[EModificationType[\"update\"] = 1] = \"update\";\n    EModificationType[EModificationType[\"create\"] = 2] = \"create\";\n    EModificationType[EModificationType[\"updateNode\"] = 8] = \"updateNode\";\n    EModificationType[EModificationType[\"updateAttr\"] = 16] = \"updateAttr\";\n    EModificationType[EModificationType[\"updateChildren\"] = 32] = \"updateChildren\";\n    EModificationType[EModificationType[\"delete\"] = 64] = \"delete\";\n})(EModificationType = exports.EModificationType || (exports.EModificationType = {}));\n//# sourceMappingURL=IGetArchi.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface IGetArchi {\n  [floorDbId: number]: IFloorArchi;\n}\nexport interface IFloorArchi {\n  properties: INodeInfo;\n  children: Record<string, IRoomArchi>;\n  structures: IStructures;\n}\nexport interface INodeInfo {\n  dbId: number;\n  externalId: string;\n  spinalnodeServerId?: number;\n  modificationType?: number;\n  properties: IPropertiesItem[];\n}\nexport interface IPropertiesItem {\n  name: string;\n  value: string | number;\n  dataTypeContext?: string; // eg: 'autodesk.unit.unit:millimeters-1.0.1'\n  oldValue?: string;\n  category?: string;\n  overwriteValue?: string | number;\n}\nexport interface IRoomArchi {\n  properties: INodeInfo;\n  children: INodeInfo[];\n}\nexport interface IStructures {\n  [externalId: string]: {\n    properties: INodeInfo;\n  };\n}\n\nexport enum EModificationType {\n  none = 0,\n  update = 1 << 0,\n  create = 1 << 1,\n  updateNode = 1 << 3, // update on node\n  updateAttr = 1 << 4, // update on attr\n  updateChildren = 1 << 5, // change in children\n  delete = 1 << 6,\n}\n\nexport interface IDiffNodeInfoAttr {\n  diffInfo: IDiffObj[];\n  diffAttr: IDiffObj[];\n}\n\nexport interface IDiffObj {\n  label: string;\n  nodeValue: string | number | boolean;\n  archiValue: string | number;\n  unit?: string;\n}\n\nexport interface IUpdateRoomDiff {\n  roomArchi: IRoomArchi;\n  diff: IDiffNodeInfoAttr;\n}\n\nexport interface IUpdateBimObjDiff {\n  nodeInfo: INodeInfo;\n  diff: IDiffNodeInfoAttr;\n}\n\nexport interface IDiffRoomChildren {\n  newRooms: IRoomArchi[];\n  updateRooms: IUpdateRoomDiff[];\n  delRooms: number[];\n}\nexport interface IDiffBimObj {\n  newBimObj: INodeInfo[];\n  delBimObj: number[];\n}\n\nexport interface IDiffFloor {\n  diffInfo: IDiffNodeInfoAttr;\n  diffRoom: IDiffRoomChildren;\n  diffRef: IDiffBimObj;\n}\n\nexport type TManualAssingment = Map<string, number>;\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IProjectionItem.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IProjectionOffset } from './IProjectionOffset';\n\nexport interface IProjectionItem {\n  name: string;\n  offset: IProjectionOffset;\n  uid: string;\n  modelId: number;\n  dbId: number;\n  id: string;\n  properties: Autodesk.Viewing.Property[];\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IProjectionOffset.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface IProjectionOffset {\n  r: number;\n  t: number;\n  z: number;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ISkipItem.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface ISkipItem {\n  id: string | number;\n  type?: string;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SpinalVec3.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport interface SpinalVec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=TProjectionItem.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ProjectionGroup } from '../ProjectObjectInContext/ProjectionItem/ProjectionGroup';\nimport type { ProjectionItem } from '../ProjectObjectInContext/ProjectionItem/ProjectionItem';\n\nexport type TProjectionItem = ProjectionGroup | ProjectionItem;\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=TProjectionLst.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { TProjectionItem } from './TProjectionItem';\n\nexport type TProjectionLst = TProjectionItem[];\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./loadBimFile\"), exports);\n__exportStar(require(\"./loadConfig\"), exports);\n__exportStar(require(\"./setAreaInContextGeo\"), exports);\n__exportStar(require(\"./setCenterPosInContextGeo\"), exports);\n__exportStar(require(\"./setLevelInContextGeo\"), exports);\n__exportStar(require(\"./transformArchi\"), exports);\n__exportStar(require(\"./updateDbIds\"), exports);\n__exportStar(require(\"./updateRoomDbId\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './loadBimFile';\nexport * from './loadConfig';\nexport * from './setAreaInContextGeo';\nexport * from './setCenterPosInContextGeo';\nexport * from './setLevelInContextGeo';\nexport * from './transformArchi';\nexport * from './updateDbIds';\nexport * from './updateRoomDbId';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadBimFile = void 0;\nfunction loadModel(viewer, path, option = {}) {\n    return new Promise((resolve, reject) => {\n        let m = undefined;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const fn = (e) => {\n            if (m && e.model.id === m.id) {\n                viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, fn);\n                resolve(m);\n            }\n        };\n        viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, fn);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let fct = viewer.loadModel;\n        if (!viewer.started)\n            fct = viewer.start;\n        fct.call(viewer, path, option, (model) => {\n            m = model;\n        }, reject);\n    });\n}\nfunction loadBimFile(bimFile, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimFileId = bimFile.info.id.get();\n        const svfVersionFile = yield window.spinal.SpinalForgeViewer.getSVF(bimFile.element, bimFileId, bimFile.info.name.get());\n        const path = window.location.origin + svfVersionFile.path;\n        const m = yield loadModel(viewer, path, {});\n        window.spinal.BimObjectService.addModel(bimFileId, m, svfVersionFile.version, null, bimFile.info.name.get());\n        return m;\n    });\n}\nexports.loadBimFile = loadBimFile;\n//# sourceMappingURL=loadBimFile.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport Model = Autodesk.Viewing.Model;\nimport GuiViewer3D = Autodesk.Viewing.GuiViewer3D;\nimport Viewer3D = Autodesk.Viewing.Viewer3D;\n\ninterface ISVF {\n  version: number;\n  path: string;\n  id: string;\n  name: string;\n  thumbnail: string;\n  aecPath: string;\n}\n\nfunction loadModel(\n  viewer: GuiViewer3D | Viewer3D,\n  path: string,\n  option = {}\n): Promise<Model> {\n  return new Promise<Model>((resolve, reject) => {\n    let m = undefined;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const fn: (event: any) => void = (e: any) => {\n      if (m && e.model.id === m.id) {\n        viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, fn);\n        resolve(m);\n      }\n    };\n    viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, fn);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let fct: any = viewer.loadModel;\n    if (!viewer.started) fct = viewer.start;\n    fct.call(\n      viewer,\n      path,\n      option,\n      (model: Model) => {\n        m = model;\n      },\n      reject\n    );\n  });\n}\n\nexport async function loadBimFile(\n  bimFile: SpinalNode,\n  viewer: GuiViewer3D | Viewer3D\n) {\n  const bimFileId = bimFile.info.id.get();\n  const svfVersionFile: ISVF = await window.spinal.SpinalForgeViewer.getSVF(\n    bimFile.element,\n    bimFileId,\n    bimFile.info.name.get()\n  );\n  const path = window.location.origin + svfVersionFile.path;\n  const m = await loadModel(viewer, path, {});\n  window.spinal.BimObjectService.addModel(\n    bimFileId,\n    m,\n    svfVersionFile.version,\n    null,\n    bimFile.info.name.get()\n  );\n  return m;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadConfig = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst SpatialConfig_1 = require(\"../../models/SpatialConfig\");\nfunction loadConfig(graph) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let configContext = yield graph.getContext('.config');\n        if (typeof configContext === 'undefined') {\n            configContext = new spinal_model_graph_1.SpinalContext('.config', 'system configuration', undefined);\n            graph.addContext(configContext);\n        }\n        const children = yield configContext.getChildren(['hasConfig']);\n        let config;\n        for (let i = 0; i < children.length; i++) {\n            if (children[i].info.type.get() === 'SpatialConfig') {\n                config = children[i];\n                break;\n            }\n        }\n        if (typeof config === 'undefined') {\n            // create default config\n            config = new spinal_model_graph_1.SpinalNode('spatial config', 'SpatialConfig', new SpatialConfig_1.SpatialConfig());\n            yield configContext.addChild(config, 'hasConfig', spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n        }\n        return config.element.load();\n    });\n}\nexports.loadConfig = loadConfig;\n//# sourceMappingURL=loadConfig.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  type SpinalGraph,\n  SpinalNode,\n  SpinalContext,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from 'spinal-model-graph';\nimport { SpatialConfig } from '../../models/SpatialConfig';\n\nexport async function loadConfig(graph: SpinalGraph): Promise<SpatialConfig> {\n  let configContext = await graph.getContext('.config');\n  if (typeof configContext === 'undefined') {\n    configContext = new SpinalContext(\n      '.config',\n      'system configuration',\n      undefined\n    );\n    graph.addContext(configContext);\n  }\n  const children = await configContext.getChildren(['hasConfig']);\n\n  let config: SpinalNode<SpatialConfig>;\n  for (let i = 0; i < children.length; i++) {\n    if (children[i].info.type.get() === 'SpatialConfig') {\n      config = children[i];\n      break;\n    }\n  }\n\n  if (typeof config === 'undefined') {\n    // create default config\n    config = new SpinalNode(\n      'spatial config',\n      'SpatialConfig',\n      new SpatialConfig()\n    );\n\n    await configContext.addChild(\n      config,\n      'hasConfig',\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n  }\n  return config.element.load();\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setAreaInContextGeo = void 0;\nconst getContextSpatial_1 = require(\"../utils/getContextSpatial\");\nconst Constant_1 = require(\"../../Constant\");\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst updateLoadedModel_1 = require(\"../utils/archi/updateLoadedModel\");\nconst getModelByBimFileId_1 = require(\"../utils/getModelByBimFileId\");\nconst getADModelProps_1 = require(\"../utils/archi/getADModelProps\");\nconst getADPropBylabel_1 = require(\"../utils/archi/getADPropBylabel\");\nfunction getAreaAttr(node) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const categoryName = 'Spatial';\n        const label = 'area';\n        let category = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategoryByName(node, categoryName);\n        if (!category) {\n            category = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.addCategoryAttribute(node, categoryName);\n        }\n        const attrs = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, category);\n        for (const attr of attrs) {\n            if (attr.label.get() === label) {\n                if (attr.value instanceof spinal_core_connectorjs_1.Val) {\n                    attr.mod_attr('value', attr.value.get().toString());\n                }\n                return attr;\n            }\n        }\n        return spinal_env_viewer_plugin_documentation_service_1.attributeService.addAttributeByCategory(node, category, label, '0');\n    });\n}\nfunction updateRoomArea(room, loadedModel) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const roomProp = yield getAreaAttr(room);\n        const refsRoom = yield room.getChildren(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n        const proms = [];\n        for (const refRoom of refsRoom) {\n            proms.push(getADAreaProp(refRoom, loadedModel));\n        }\n        const refsArea = yield Promise.all(proms);\n        const roomArea = refsArea.reduce((acc, itm) => {\n            return acc + parseFloat(itm);\n        }, 0);\n        roomProp.value.set(roomArea.toFixed(2));\n        return roomProp;\n    });\n}\nfunction getADAreaProp(refRoom, loadedModel) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const dbid = (_a = refRoom.info.dbid) === null || _a === void 0 ? void 0 : _a.get();\n            if (dbid && dbid > 0) {\n                const model = yield (0, getModelByBimFileId_1.getModelByBimFileId)(refRoom.info.bimFileId.get(), loadedModel);\n                const refProps = yield (0, getADModelProps_1.getADModelProps)(model, dbid);\n                const refADProp = (0, getADPropBylabel_1.getADPropBylabel)(refProps, 'Area');\n                return (refADProp === null || refADProp === void 0 ? void 0 : refADProp.displayValue) || '0';\n            }\n            return '0';\n        }\n        catch (error) {\n            return '0';\n        }\n    });\n}\nfunction updateFloorArea(floor, context, loadedModel) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const proms = [];\n        proms.push(getAreaAttr(floor));\n        const rooms = yield floor.getChildrenInContext(context);\n        for (const room of rooms) {\n            proms.push(updateRoomArea(room, loadedModel));\n        }\n        const [floorProp, ...roomProps] = yield Promise.all(proms);\n        const floorArea = roomProps.reduce((acc, itm) => {\n            return acc + parseFloat(itm.value.get());\n        }, 0);\n        floorProp.value.set(floorArea.toFixed(2));\n        return floorProp;\n    });\n}\nfunction setAreaInContextGeo(graph) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const loadedModel = new Map();\n        (0, updateLoadedModel_1.updateLoadedModel)(loadedModel);\n        const context = yield (0, getContextSpatial_1.getContextSpatial)(graph);\n        const buildings = yield context.getChildrenInContext(context);\n        for (const building of buildings) {\n            const proms = [];\n            proms.push(getAreaAttr(building));\n            const floors = yield building.getChildrenInContext(context);\n            for (const floor of floors) {\n                proms.push(updateFloorArea(floor, context, loadedModel));\n            }\n            const [buildingProp, ...floorProps] = yield Promise.all(proms);\n            const buildingArea = floorProps.reduce((acc, itm) => {\n                return acc + parseFloat(itm.value.get());\n            }, 0);\n            buildingProp.value.set(buildingArea.toFixed(2));\n        }\n    });\n}\nexports.setAreaInContextGeo = setAreaInContextGeo;\n//# sourceMappingURL=setAreaInContextGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type {\n  SpinalGraph,\n  SpinalContext,\n  SpinalNode,\n} from 'spinal-model-graph';\nimport { getContextSpatial } from '../utils/getContextSpatial';\nimport { GEO_REFERENCE_ROOM_RELATION } from '../../Constant';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport { Val } from 'spinal-core-connectorjs';\nimport { updateLoadedModel } from '../utils/archi/updateLoadedModel';\nimport { getModelByBimFileId } from '../utils/getModelByBimFileId';\nimport { getADModelProps } from '../utils/archi/getADModelProps';\nimport { getADPropBylabel } from '../utils/archi/getADPropBylabel';\n\nasync function getAreaAttr(node: SpinalNode) {\n  const categoryName = 'Spatial';\n  const label = 'area';\n  let category = await attributeService.getCategoryByName(node, categoryName);\n  if (!category) {\n    category = await attributeService.addCategoryAttribute(node, categoryName);\n  }\n  const attrs = await attributeService.getAttributesByCategory(node, category);\n  for (const attr of attrs) {\n    if (attr.label.get() === label) {\n      if (attr.value instanceof Val) {\n        attr.mod_attr('value', attr.value.get().toString());\n      }\n      return attr;\n    }\n  }\n  return attributeService.addAttributeByCategory(node, category, label, '0');\n}\n\nasync function updateRoomArea(\n  room: SpinalNode,\n  loadedModel: Map<string, Promise<Autodesk.Viewing.Model>>\n) {\n  const roomProp = await getAreaAttr(room);\n  const refsRoom = await room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n  const proms: Promise<string>[] = [];\n  for (const refRoom of refsRoom) {\n    proms.push(getADAreaProp(refRoom, loadedModel));\n  }\n  const refsArea = await Promise.all(proms);\n\n  const roomArea = refsArea.reduce((acc, itm) => {\n    return acc + parseFloat(itm);\n  }, 0);\n\n  roomProp.value.set(roomArea.toFixed(2));\n  return roomProp;\n}\n\nasync function getADAreaProp(\n  refRoom: SpinalNode,\n  loadedModel: Map<string, Promise<Autodesk.Viewing.Model>>\n): Promise<string> {\n  try {\n    const dbid = refRoom.info.dbid?.get();\n    if (dbid && dbid > 0) {\n      const model = await getModelByBimFileId(\n        refRoom.info.bimFileId.get(),\n        loadedModel\n      );\n      const refProps = await getADModelProps(model, dbid);\n      const refADProp = getADPropBylabel(refProps, 'Area');\n      return refADProp?.displayValue || '0';\n    }\n    return '0';\n  } catch (error) {\n    return '0';\n  }\n}\n\nasync function updateFloorArea(\n  floor: SpinalNode,\n  context: SpinalContext,\n  loadedModel: Map<string, Promise<Autodesk.Viewing.Model>>\n) {\n  const proms: ReturnType<typeof getAreaAttr>[] = [];\n  proms.push(getAreaAttr(floor));\n  const rooms = await floor.getChildrenInContext(context);\n  for (const room of rooms) {\n    proms.push(updateRoomArea(room, loadedModel));\n  }\n  const [floorProp, ...roomProps] = await Promise.all(proms);\n  const floorArea = roomProps.reduce((acc, itm) => {\n    return acc + parseFloat(itm.value.get() as string);\n  }, 0);\n  floorProp.value.set(floorArea.toFixed(2));\n  return floorProp;\n}\n\nexport async function setAreaInContextGeo(graph: SpinalGraph): Promise<void> {\n  const loadedModel = new Map<string, Promise<Autodesk.Viewing.Model>>();\n  updateLoadedModel(loadedModel);\n\n  const context = await getContextSpatial(graph);\n  const buildings = await context.getChildrenInContext(context);\n\n  for (const building of buildings) {\n    const proms: ReturnType<typeof getAreaAttr>[] = [];\n    proms.push(getAreaAttr(building));\n    const floors = await building.getChildrenInContext(context);\n    for (const floor of floors) {\n      proms.push(updateFloorArea(floor, context, loadedModel));\n    }\n    const [buildingProp, ...floorProps] = await Promise.all(proms);\n    const buildingArea = floorProps.reduce((acc, itm) => {\n      return acc + parseFloat(itm.value.get() as string);\n    }, 0);\n    buildingProp.value.set(buildingArea.toFixed(2));\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContextSpatial = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nfunction getContextSpatial(graph) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let context = yield graph.getContext('spatial');\n        if (context)\n            return context;\n        context = new spinal_model_graph_1.SpinalContext('spatial', 'geographicContext');\n        yield graph.addContext(context);\n        return context;\n    });\n}\nexports.getContextSpatial = getContextSpatial;\n//# sourceMappingURL=getContextSpatial.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { type SpinalGraph, SpinalContext } from 'spinal-model-graph';\n\nexport async function getContextSpatial(\n  graph: SpinalGraph\n): Promise<SpinalContext> {\n  let context = await graph.getContext('spatial');\n  if (context) return context;\n  context = new SpinalContext('spatial', 'geographicContext');\n  await graph.addContext(context);\n  return context;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateLoadedModel = void 0;\nconst getViewer_1 = require(\"../getViewer\");\nfunction updateLoadedModel(loadedModel) {\n    const viewer = (0, getViewer_1.getViewer)();\n    if (!viewer)\n        return;\n    try {\n        const allModel = viewer.getAllModels();\n        for (const model of allModel) {\n            const obj = spinal.SpinalForgeViewer.bimObjectService.mappingModelIdBimFileId[model.id];\n            if (obj) {\n                const bimFileId = obj.bimFileId;\n                loadedModel.set(bimFileId, Promise.resolve(model));\n            }\n        }\n    }\n    catch (error) {\n        console.log('updateLoadedModel fail load existing model list, ignore it if no model loaded');\n    }\n}\nexports.updateLoadedModel = updateLoadedModel;\n//# sourceMappingURL=updateLoadedModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getViewer } from '../getViewer';\n\nexport function updateLoadedModel(\n  loadedModel: Map<string, Promise<Autodesk.Viewing.Model>>\n): void {\n  const viewer: Autodesk.Viewing.Viewer3D = getViewer();\n  if (!viewer) return;\n  try {\n    const allModel: Autodesk.Viewing.Model[] = viewer.getAllModels();\n    for (const model of allModel) {\n      const obj =\n        spinal.SpinalForgeViewer.bimObjectService.mappingModelIdBimFileId[\n          model.id\n        ];\n      if (obj) {\n        const bimFileId = obj.bimFileId;\n        loadedModel.set(bimFileId, Promise.resolve(model));\n      }\n    }\n  } catch (error) {\n    console.log(\n      'updateLoadedModel fail load existing model list, ignore it if no model loaded'\n    );\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getViewer = void 0;\nfunction getViewer() {\n    try {\n        return window.spinal.SpinalForgeViewer.viewerManager.viewer;\n    }\n    catch (error) {\n        return window.spinal.ForgeViewer.viewer;\n    }\n}\nexports.getViewer = getViewer;\n//# sourceMappingURL=getViewer.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getViewer():\n  | Autodesk.Viewing.Viewer3D\n  | Autodesk.Viewing.GuiViewer3D {\n  try {\n    return window.spinal.SpinalForgeViewer.viewerManager.viewer;\n  } catch (error) {\n    return window.spinal.ForgeViewer.viewer;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getModelByBimFileId = void 0;\nconst loadModelByBimFileId_1 = require(\"./loadModelByBimFileId\");\nfunction getModelByBimFileId(bimFileId, loadedModel) {\n    if (loadedModel.has(bimFileId))\n        return loadedModel.get(bimFileId);\n    const prom = (0, loadModelByBimFileId_1.loadModelByBimFileId)(bimFileId);\n    loadedModel.set(bimFileId, prom);\n    return prom;\n}\nexports.getModelByBimFileId = getModelByBimFileId;\n//# sourceMappingURL=getModelByBimFileId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { loadModelByBimFileId } from './loadModelByBimFileId';\n\nexport function getModelByBimFileId(\n  bimFileId: string,\n  loadedModel: Map<string, Promise<Autodesk.Viewing.Model>>\n): Promise<Autodesk.Viewing.Model> {\n  if (loadedModel.has(bimFileId)) return loadedModel.get(bimFileId);\n  const prom = loadModelByBimFileId(bimFileId);\n  loadedModel.set(bimFileId, prom);\n  return prom;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadModelByBimFileId = void 0;\nconst getBimFileByBimFileId_1 = require(\"./getBimFileByBimFileId\");\nconst loadBimFile_1 = require(\"../scripts/loadBimFile\");\nconst getViewer_1 = require(\"./getViewer\");\nfunction loadModelByBimFileId(bimFileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const viewer = (0, getViewer_1.getViewer)();\n        const bimFile = yield (0, getBimFileByBimFileId_1.getBimFileByBimFileId)(bimFileId);\n        return (0, loadBimFile_1.loadBimFile)(bimFile, viewer);\n    });\n}\nexports.loadModelByBimFileId = loadModelByBimFileId;\n//# sourceMappingURL=loadModelByBimFileId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getBimFileByBimFileId } from './getBimFileByBimFileId';\nimport { loadBimFile } from '../scripts/loadBimFile';\nimport { getViewer } from './getViewer';\n\nexport async function loadModelByBimFileId(bimFileId: string) {\n  const viewer = getViewer();\n  const bimFile = await getBimFileByBimFileId(bimFileId);\n  return loadBimFile(bimFile, viewer);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBimFileByBimFileId = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst graphservice_1 = require(\"./graphservice\");\nlet getBimFileByBimFileIdIt = null;\nfunction getBimFileByBimFileId(bimFileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!getBimFileByBimFileIdIt) {\n            getBimFileByBimFileIdIt = _getBimFileByBimFileId(bimFileId);\n        }\n        const data = (yield getBimFileByBimFileIdIt.next(bimFileId)).value;\n        if (data instanceof Error)\n            throw data;\n        return data;\n    });\n}\nexports.getBimFileByBimFileId = getBimFileByBimFileId;\nfunction _getBimFileByBimFileId(bimFileId) {\n    return __asyncGenerator(this, arguments, function* _getBimFileByBimFileId_1() {\n        let nextBimFileId = bimFileId;\n        while (true) {\n            const bimFile = (0, graphservice_1.getRealNode)(nextBimFileId);\n            if (bimFile) {\n                nextBimFileId = yield yield __await(bimFile);\n                continue;\n            }\n            const graph = (0, graphservice_1.getGraph)();\n            const context = yield __await(graph.getContext('BimFileContext'));\n            if (!context) {\n                nextBimFileId = yield yield __await(new Error('BimFileContext not found in graph'));\n                continue;\n            }\n            const child = yield __await(context.getChild((node) => node.info.id.get() === nextBimFileId, 'hasBimFile', spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE));\n            if (child) {\n                nextBimFileId = yield yield __await(child);\n            }\n            else {\n                nextBimFileId = yield yield __await(new Error(`BimFileId [${nextBimFileId}] not found`));\n            }\n        }\n    });\n}\n//# sourceMappingURL=getBimFileByBimFileId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalNode, SPINAL_RELATION_PTR_LST_TYPE } from 'spinal-model-graph';\nimport { getGraph, getRealNode } from './graphservice';\n\nlet getBimFileByBimFileIdIt: ReturnType<typeof _getBimFileByBimFileId> = null;\n\nexport async function getBimFileByBimFileId(\n  bimFileId: string\n): Promise<SpinalNode> {\n  if (!getBimFileByBimFileIdIt) {\n    getBimFileByBimFileIdIt = _getBimFileByBimFileId(bimFileId);\n  }\n  const data = (await getBimFileByBimFileIdIt.next(bimFileId)).value;\n  if (data instanceof Error) throw data;\n  return data;\n}\n\nasync function* _getBimFileByBimFileId(\n  bimFileId: string\n): AsyncGenerator<SpinalNode | Error, never, string> {\n  let nextBimFileId = bimFileId;\n  while (true) {\n    const bimFile = getRealNode(nextBimFileId);\n    if (bimFile) {\n      nextBimFileId = yield bimFile;\n      continue;\n    }\n    const graph = getGraph();\n    const context = await graph.getContext('BimFileContext');\n    if (!context) {\n      nextBimFileId = yield new Error('BimFileContext not found in graph');\n      continue;\n    }\n    const child = await context.getChild(\n      (node) => node.info.id.get() === nextBimFileId,\n      'hasBimFile',\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n    if (child) {\n      nextBimFileId = yield child;\n    } else {\n      nextBimFileId = yield new Error(`BimFileId [${nextBimFileId}] not found`);\n    }\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getInfoGraphService = exports.getRealNode = exports.getGraph = exports.addNodeGraphService = void 0;\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nconst spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nfunction addNodeGraphService(node) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(node);\n}\nexports.addNodeGraphService = addNodeGraphService;\nfunction getGraph() {\n    return spinal_env_viewer_graph_service_1.SpinalGraphService.getGraph();\n}\nexports.getGraph = getGraph;\nfunction getRealNode(nodeId) {\n    return spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n}\nexports.getRealNode = getRealNode;\nfunction getInfoGraphService(nodeId) {\n    return spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(nodeId);\n}\nexports.getInfoGraphService = getInfoGraphService;\n//# sourceMappingURL=graphservice.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nimport {\n  SpinalGraphService,\n  type SpinalNodeRef,\n} from 'spinal-env-viewer-graph-service';\nimport { SpinalGraph, SpinalNode } from 'spinal-model-graph';\n\nexport function addNodeGraphService(node: SpinalNode): void {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  SpinalGraphService._addNode(node);\n}\n\nexport function getGraph(): SpinalGraph {\n  return SpinalGraphService.getGraph();\n}\n\nexport function getRealNode(nodeId: string): SpinalNode {\n  return SpinalGraphService.getRealNode(nodeId);\n}\n\nexport function getInfoGraphService(nodeId: string): SpinalNodeRef {\n  return SpinalGraphService.getInfo(nodeId);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getADModelProps = void 0;\nfunction getADModelProps(model, dbid) {\n    return new Promise((resolve, reject) => {\n        model.getProperties(dbid, (res) => {\n            resolve(res);\n        }, reject);\n    });\n}\nexports.getADModelProps = getADModelProps;\n//# sourceMappingURL=getADModelProps.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getADModelProps(\n  model: Autodesk.Viewing.Model,\n  dbid: number\n): Promise<Autodesk.Viewing.PropertyResult> {\n  return new Promise((resolve, reject) => {\n    model.getProperties(\n      dbid,\n      (res) => {\n        resolve(res);\n      },\n      reject\n    );\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getADPropBylabel = void 0;\nfunction getADPropBylabel(props, label) {\n    for (const prop of props.properties) {\n        if (prop.attributeName === label)\n            return prop;\n    }\n}\nexports.getADPropBylabel = getADPropBylabel;\n//# sourceMappingURL=getADPropBylabel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getADPropBylabel(\n  props: Autodesk.Viewing.PropertyResult,\n  label: string\n): Autodesk.Viewing.Property {\n  for (const prop of props.properties) {\n    if (prop.attributeName === label) return prop;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setCenterPosInContextGeo = void 0;\nconst getContextSpatial_1 = require(\"../utils/getContextSpatial\");\nconst Constant_1 = require(\"../../Constant\");\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst consumeBatch_1 = require(\"../../utils/consumeBatch\");\nconst getFragIds_1 = require(\"../utils/getFragIds\");\nconst getWorldBoundingBox_1 = require(\"../utils/getWorldBoundingBox\");\nconst utils_1 = require(\"../utils\");\nfunction setCenterPosInContextGeo(graph, cb) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const context = yield (0, getContextSpatial_1.getContextSpatial)(graph);\n        const relationNames = [\n            Constant_1.GEO_SITE_RELATION,\n            Constant_1.GEO_BUILDING_RELATION,\n            Constant_1.GEO_FLOOR_RELATION,\n            Constant_1.GEO_ZONE_RELATION,\n            Constant_1.GEO_ROOM_RELATION,\n        ];\n        const roomNodes = yield context.find(relationNames, (node) => {\n            return node.info.type.get() === Constant_1.GEO_ROOM_TYPE;\n        });\n        const roomArrProm = [];\n        roomNodes.forEach((roomNode) => {\n            roomArrProm.push(() => updateRoomPos(roomNode));\n        });\n        yield (0, consumeBatch_1.consumeBatch)(roomArrProm, 20, (i, total) => cb(`1/3 room progress: ${i}/${total}`));\n        const bimobjArrProm = [];\n        const roomArrProm2 = roomNodes.map((roomNode) => () => updateBimObj(roomNode, context, bimobjArrProm));\n        yield (0, consumeBatch_1.consumeBatch)(roomArrProm2, 20, (i, total) => cb(`2/3 load bimObj progress: ${i}/${total}`));\n        yield (0, consumeBatch_1.consumeBatch)(bimobjArrProm, 20, (i, total) => cb(`3/3 bimObj update progress: ${i}/${total}`));\n        cb(`done`);\n    });\n}\nexports.setCenterPosInContextGeo = setCenterPosInContextGeo;\nfunction updateRoomPos(roomNode) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const roomRefs = yield roomNode.getChildren(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n        let roomBbox = null;\n        for (const roomRef of roomRefs) {\n            if (roomRef.info.dbid.get() > 0) {\n                // get autodesk Model\n                const model = (0, utils_1.getModelByBimFileIdLoaded)(roomRef.info.bimFileId.get());\n                if (!model) {\n                    console.log(`${roomNode.info.name.get()}} skipped : model not loaded`);\n                    continue;\n                }\n                const fragIds = yield (0, getFragIds_1.getFragIds)(roomRef.info.dbid.get(), model);\n                const bbox = (0, getWorldBoundingBox_1.getWorldBoundingBox)(fragIds, model);\n                if (!roomBbox)\n                    roomBbox = bbox;\n                else\n                    roomBbox.union(bbox);\n            }\n        }\n        if (roomBbox) {\n            const centerRoom = new THREE.Vector3();\n            roomBbox.getCenter(centerRoom);\n            const attr = yield getCenterPosAttr(roomNode);\n            attr.value.set(`${centerRoom.x};${centerRoom.y};${centerRoom.z}`);\n        }\n    });\n}\nfunction getCenterPosAttr(node) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const categoryName = 'Spatial';\n        const label = 'XYZ center';\n        let category = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategoryByName(node, categoryName);\n        if (!category) {\n            category = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.addCategoryAttribute(node, categoryName);\n        }\n        const attrs = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, category);\n        for (const attr of attrs) {\n            if (attr.label.get() === label) {\n                if (attr.value instanceof spinal_core_connectorjs_1.Val) {\n                    attr.mod_attr('value', attr.value.get().toString());\n                }\n                return attr;\n            }\n        }\n        return spinal_env_viewer_plugin_documentation_service_1.attributeService.addAttributeByCategory(node, category, label, '0;0;0');\n    });\n}\nfunction updateBimObj(roomNode, context, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimObjs = yield roomNode.getChildrenInContext(context);\n        for (const bimObj of bimObjs) {\n            res.push(() => __awaiter(this, void 0, void 0, function* () {\n                const model = (0, utils_1.getModelByBimFileIdLoaded)(bimObj.info.bimFileId.get());\n                if (!model) {\n                    console.log(`${roomNode.info.name.get()}/${bimObj.info.name.get()} skipped : model not loaded`);\n                    return;\n                }\n                const fragIds = yield (0, getFragIds_1.getFragIds)(bimObj.info.dbid.get(), model);\n                const bbox = (0, getWorldBoundingBox_1.getWorldBoundingBox)(fragIds, model);\n                const center = new THREE.Vector3();\n                bbox.getCenter(center);\n                const attr = yield getCenterPosAttr(bimObj);\n                const str = `${center.x};${center.y};${center.z}`;\n                attr.value.set(str);\n            }));\n        }\n    });\n}\n//# sourceMappingURL=setCenterPosInContextGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type {\n  SpinalContext,\n  SpinalGraph,\n  SpinalNode,\n} from 'spinal-model-graph';\nimport { getContextSpatial } from '../utils/getContextSpatial';\nimport {\n  GEO_SITE_RELATION,\n  GEO_BUILDING_RELATION,\n  GEO_FLOOR_RELATION,\n  GEO_ZONE_RELATION,\n  GEO_ROOM_RELATION,\n  GEO_REFERENCE_ROOM_RELATION,\n  GEO_ROOM_TYPE,\n} from '../../Constant';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport { Val } from 'spinal-core-connectorjs';\nimport { consumeBatch } from '../../utils/consumeBatch';\nimport { getFragIds } from '../utils/getFragIds';\nimport { getWorldBoundingBox } from '../utils/getWorldBoundingBox';\nimport { getModelByBimFileIdLoaded } from '../utils';\n\nexport async function setCenterPosInContextGeo(\n  graph: SpinalGraph,\n  cb: (msg: string) => void\n): Promise<void> {\n  const context = await getContextSpatial(graph);\n  const relationNames = [\n    GEO_SITE_RELATION,\n    GEO_BUILDING_RELATION,\n    GEO_FLOOR_RELATION,\n    GEO_ZONE_RELATION,\n    GEO_ROOM_RELATION,\n  ];\n  const roomNodes = await context.find(relationNames, (node: SpinalNode) => {\n    return node.info.type.get() === GEO_ROOM_TYPE;\n  });\n  const roomArrProm = [];\n  roomNodes.forEach((roomNode) => {\n    roomArrProm.push(() => updateRoomPos(roomNode));\n  });\n  await consumeBatch(roomArrProm, 20, (i, total) =>\n    cb(`1/3 room progress: ${i}/${total}`)\n  );\n  const bimobjArrProm = [];\n  const roomArrProm2 = roomNodes.map(\n    (roomNode) => () => updateBimObj(roomNode, context, bimobjArrProm)\n  );\n\n  await consumeBatch(roomArrProm2, 20, (i, total) =>\n    cb(`2/3 load bimObj progress: ${i}/${total}`)\n  );\n\n  await consumeBatch(bimobjArrProm, 20, (i, total) =>\n    cb(`3/3 bimObj update progress: ${i}/${total}`)\n  );\n  cb(`done`);\n}\n\nasync function updateRoomPos(roomNode: SpinalNode): Promise<void> {\n  const roomRefs = await roomNode.getChildren(GEO_REFERENCE_ROOM_RELATION);\n  let roomBbox: THREE.Box3 = null;\n  for (const roomRef of roomRefs) {\n    if (roomRef.info.dbid.get() > 0) {\n      // get autodesk Model\n      const model = getModelByBimFileIdLoaded(roomRef.info.bimFileId.get());\n      if (!model) {\n        console.log(`${roomNode.info.name.get()}} skipped : model not loaded`);\n        continue;\n      }\n      const fragIds = await getFragIds(roomRef.info.dbid.get(), model);\n      const bbox = getWorldBoundingBox(fragIds, model);\n      if (!roomBbox) roomBbox = bbox;\n      else roomBbox.union(bbox);\n    }\n  }\n  if (roomBbox) {\n    const centerRoom = new THREE.Vector3();\n    roomBbox.getCenter(centerRoom);\n    const attr = await getCenterPosAttr(roomNode);\n    attr.value.set(`${centerRoom.x};${centerRoom.y};${centerRoom.z}`);\n  }\n}\nasync function getCenterPosAttr(node: SpinalNode) {\n  const categoryName = 'Spatial';\n  const label = 'XYZ center';\n  let category = await attributeService.getCategoryByName(node, categoryName);\n  if (!category) {\n    category = await attributeService.addCategoryAttribute(node, categoryName);\n  }\n  const attrs = await attributeService.getAttributesByCategory(node, category);\n  for (const attr of attrs) {\n    if (attr.label.get() === label) {\n      if (attr.value instanceof Val) {\n        attr.mod_attr('value', attr.value.get().toString());\n      }\n      return attr;\n    }\n  }\n  return attributeService.addAttributeByCategory(\n    node,\n    category,\n    label,\n    '0;0;0'\n  );\n}\n\nasync function updateBimObj(\n  roomNode: SpinalNode,\n  context: SpinalContext,\n  res: (() => Promise<void>)[]\n) {\n  const bimObjs = await roomNode.getChildrenInContext(context);\n  for (const bimObj of bimObjs) {\n    res.push(async () => {\n      const model = getModelByBimFileIdLoaded(bimObj.info.bimFileId.get());\n      if (!model) {\n        console.log(\n          `${roomNode.info.name.get()}/${bimObj.info.name.get()} skipped : model not loaded`\n        );\n        return;\n      }\n      const fragIds = await getFragIds(bimObj.info.dbid.get(), model);\n      const bbox = getWorldBoundingBox(fragIds, model);\n      const center = new THREE.Vector3();\n      bbox.getCenter(center);\n      const attr = await getCenterPosAttr(bimObj);\n      const str = `${center.x};${center.y};${center.z}`;\n      attr.value.set(str);\n    });\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFragIds = void 0;\nfunction getFragIds(dbId, model) {\n    return new Promise((resolve, reject) => {\n        const it = model.getInstanceTree();\n        const ids = [];\n        it.enumNodeFragments(dbId, (res) => {\n            ids.push(res);\n        }, false);\n        // wait 1s or 2 if not yet done\n        setTimeout(() => {\n            if (ids.length === 0) {\n                setTimeout(() => {\n                    if (ids.length === 0) {\n                        return reject();\n                    }\n                    resolve(ids);\n                }, 1000);\n                return;\n            }\n            resolve(ids);\n        }, 500);\n    });\n}\nexports.getFragIds = getFragIds;\n//# sourceMappingURL=getFragIds.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getFragIds(\n  dbId: number,\n  model: Autodesk.Viewing.Model\n): Promise<number[]> {\n  return new Promise((resolve, reject) => {\n    const it = model.getInstanceTree();\n    const ids: number[] = [];\n    it.enumNodeFragments(\n      dbId,\n      (res) => {\n        ids.push(res);\n      },\n      false\n    );\n    // wait 1s or 2 if not yet done\n    setTimeout(() => {\n      if (ids.length === 0) {\n        setTimeout(() => {\n          if (ids.length === 0) {\n            return reject();\n          }\n          resolve(ids);\n        }, 1000);\n        return;\n      }\n      resolve(ids);\n    }, 500);\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWorldBoundingBox = void 0;\nfunction getWorldBoundingBox(fragIds, model) {\n    const fragList = model.getFragmentList();\n    const fragbBox = new window.THREE.Box3();\n    const nodebBox = new window.THREE.Box3();\n    fragIds.forEach(function (fragId) {\n        fragList.getWorldBounds(fragId, fragbBox);\n        nodebBox.union(fragbBox);\n    });\n    return nodebBox;\n}\nexports.getWorldBoundingBox = getWorldBoundingBox;\n//# sourceMappingURL=getWorldBoundingBox.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getWorldBoundingBox(\n  fragIds: number[],\n  model: Autodesk.Viewing.Model\n) {\n  const fragList = model.getFragmentList();\n  const fragbBox = new window.THREE.Box3();\n  const nodebBox = new window.THREE.Box3();\n  fragIds.forEach(function (fragId) {\n    fragList.getWorldBounds(fragId, fragbBox);\n    nodebBox.union(fragbBox);\n  });\n  return nodebBox;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./archi\"), exports);\n__exportStar(require(\"./getBimContextByBimFileId\"), exports);\n__exportStar(require(\"./getContextSpatial\"), exports);\n__exportStar(require(\"./getFragIds\"), exports);\n__exportStar(require(\"./getModelByBimFileId\"), exports);\n__exportStar(require(\"./getWorldBoundingBox\"), exports);\n__exportStar(require(\"./graphservice\"), exports);\n__exportStar(require(\"./guid\"), exports);\n__exportStar(require(\"./loadModelByBimFileId\"), exports);\n__exportStar(require(\"./projection\"), exports);\n__exportStar(require(\"./waitGetServerId\"), exports);\n__exportStar(require(\"./waitPathSendToHub\"), exports);\n__exportStar(require(\"./getViewer\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './archi';\nexport * from './getBimContextByBimFileId';\nexport * from './getContextSpatial';\nexport * from './getFragIds';\nexport * from './getModelByBimFileId';\nexport * from './getWorldBoundingBox';\nexport * from './graphservice';\nexport * from './guid';\nexport * from './loadModelByBimFileId';\nexport * from './projection';\nexport * from './waitGetServerId';\nexport * from './waitPathSendToHub';\nexport * from './getViewer';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./getADModelProps\"), exports);\n__exportStar(require(\"./getADPropBylabel\"), exports);\n__exportStar(require(\"./getArchi\"), exports);\n__exportStar(require(\"./getModType\"), exports);\n__exportStar(require(\"./getNodeInfoArchiAttr\"), exports);\n__exportStar(require(\"./isInSkipList\"), exports);\n__exportStar(require(\"./serverIdArrToNodeIdArr\"), exports);\n__exportStar(require(\"./updateAttr\"), exports);\n__exportStar(require(\"./updateInfoByKey\"), exports);\n__exportStar(require(\"./updateInfo\"), exports);\n__exportStar(require(\"./updateLoadedModel\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './getADModelProps';\nexport * from './getADPropBylabel';\nexport * from './getArchi';\nexport * from './getModType';\nexport * from './getNodeInfoArchiAttr';\nexport * from './isInSkipList';\nexport * from './serverIdArrToNodeIdArr';\nexport * from './updateAttr';\nexport * from './updateInfoByKey';\nexport * from './updateInfo';\nexport * from './updateLoadedModel';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getArchi = void 0;\nconst loadConfig_1 = require(\"../../scripts/loadConfig\");\nconst loadBimFile_1 = require(\"../../scripts/loadBimFile\");\nconst createFctGetArchi_1 = __importDefault(require(\"../../../createFctGetArchi\"));\nfunction getArchi(graph, configName, bimFile, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // load config ny name\n        const configModel = yield (0, loadConfig_1.loadConfig)(graph);\n        const config = configModel.getConfig(configName);\n        // load BIMFILE\n        const model = yield (0, loadBimFile_1.loadBimFile)(bimFile, viewer);\n        // get Archi\n        const fct = (0, createFctGetArchi_1.default)(config.get());\n        const modelArchi = yield model\n            .getPropertyDb()\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .executeUserFunction(fct);\n        return modelArchi;\n    });\n}\nexports.getArchi = getArchi;\n//# sourceMappingURL=getArchi.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { type SpinalGraph, SpinalNode } from 'spinal-model-graph';\nimport { loadConfig } from '../../scripts/loadConfig';\nimport { loadBimFile } from '../../scripts/loadBimFile';\nimport GuiViewer3D = Autodesk.Viewing.GuiViewer3D;\nimport Viewer3D = Autodesk.Viewing.Viewer3D;\nimport createFctGetArchi from '../../../createFctGetArchi';\nimport type { IGetArchi } from '../../interfaces/IGetArchi';\n\nexport async function getArchi(\n  graph: SpinalGraph,\n  configName: string,\n  bimFile: SpinalNode,\n  viewer: GuiViewer3D | Viewer3D\n): Promise<IGetArchi> {\n  // load config ny name\n  const configModel = await loadConfig(graph);\n  const config = configModel.getConfig(configName);\n  // load BIMFILE\n  const model = await loadBimFile(bimFile, viewer);\n  // get Archi\n  const fct = createFctGetArchi(config.get());\n  const modelArchi: IGetArchi = await model\n    .getPropertyDb()\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .executeUserFunction(fct);\n  return modelArchi;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getModType = void 0;\nconst IGetArchi_1 = require(\"../../interfaces/IGetArchi\");\nfunction getModType(modificationType) {\n    if (modificationType & IGetArchi_1.EModificationType.update)\n        return IGetArchi_1.EModificationType.update;\n    if (modificationType & IGetArchi_1.EModificationType.create)\n        return IGetArchi_1.EModificationType.create;\n    if (modificationType & IGetArchi_1.EModificationType.delete)\n        return IGetArchi_1.EModificationType.delete;\n    return IGetArchi_1.EModificationType.none;\n}\nexports.getModType = getModType;\n//# sourceMappingURL=getModType.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { EModificationType } from '../../interfaces/IGetArchi';\n\nexport function getModType(modificationType: number): EModificationType {\n  if (modificationType & EModificationType.update)\n    return EModificationType.update;\n  if (modificationType & EModificationType.create)\n    return EModificationType.create;\n  if (modificationType & EModificationType.delete)\n    return EModificationType.delete;\n  return EModificationType.none;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNodeInfoArchiAttr = void 0;\nfunction getNodeInfoArchiAttr(nodeInfo, propName) {\n    for (const prop of nodeInfo.properties) {\n        if (prop.name === propName)\n            return prop.value;\n    }\n}\nexports.getNodeInfoArchiAttr = getNodeInfoArchiAttr;\n//# sourceMappingURL=getNodeInfoArchiAttr.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { INodeInfo } from '../../interfaces/IGetArchi';\n\nexport function getNodeInfoArchiAttr(nodeInfo: INodeInfo, propName: string) {\n  for (const prop of nodeInfo.properties) {\n    if (prop.name === propName) return prop.value;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isInSkipList = void 0;\nfunction isInSkipList(skipList, id, parentId) {\n    if (parentId)\n        return skipList.some((itm) => itm.id === parentId || itm.id === id);\n    return skipList.some((itm) => itm.id === id);\n}\nexports.isInSkipList = isInSkipList;\n//# sourceMappingURL=isInSkipList.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ISkipItem } from '../../interfaces/ISkipItem';\n\nexport function isInSkipList(\n  skipList: ISkipItem[],\n  id: string | number,\n  parentId?: string\n) {\n  if (parentId)\n    return skipList.some((itm) => itm.id === parentId || itm.id === id);\n  return skipList.some((itm) => itm.id === id);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serverIdArrToNodeIdArr = void 0;\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction serverIdArrToNodeIdArr(serverIds) {\n    return serverIds.map((servId) => {\n        var _a, _b;\n        return (_b = (_a = spinal_core_connectorjs_1.FileSystem._objects[servId]) === null || _a === void 0 ? void 0 : _a.info) === null || _b === void 0 ? void 0 : _b.id.get();\n    });\n}\nexports.serverIdArrToNodeIdArr = serverIdArrToNodeIdArr;\n//# sourceMappingURL=serverIdArrToNodeIdArr.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { FileSystem } from 'spinal-core-connectorjs';\nimport type { SpinalNode } from 'spinal-env-viewer-graph-service';\n\nexport function serverIdArrToNodeIdArr(serverIds: number[]): string[] {\n  return serverIds.map((servId): string => {\n    return (<SpinalNode>FileSystem._objects[servId])?.info?.id.get();\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateAttr = void 0;\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction updateAttr(node, attrs) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!attrs || (attrs && attrs.length === 0))\n            return; // skip if nothing to update\n        let cat = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategoryByName(node, 'Spatial');\n        if (!cat) {\n            cat = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.addCategoryAttribute(node, 'Spatial');\n        }\n        const attrsFromNode = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, cat);\n        for (const attr of attrs) {\n            const attrFromNode = attrsFromNode.find((itm) => itm.label.get() === attr.label);\n            if (attrFromNode) {\n                try {\n                    if (attrFromNode.value instanceof spinal_core_connectorjs_1.Val) {\n                        attrFromNode.mod_attr('value', attr.value);\n                    }\n                    else {\n                        attrFromNode.value.set(attr.value);\n                    }\n                }\n                catch (error) {\n                    console.error(error);\n                    console.log('err', node, {\n                        label: attrFromNode.label,\n                        value: attr.value,\n                    });\n                }\n                if (attr.unit)\n                    attrFromNode.unit.set(attr.unit);\n            }\n            else {\n                spinal_env_viewer_plugin_documentation_service_1.attributeService.addAttributeByCategory(node, cat, attr.label, attr.value.toString(), '', attr.unit);\n            }\n        }\n    });\n}\nexports.updateAttr = updateAttr;\n//# sourceMappingURL=updateAttr.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ICmdNewAttr } from '../../interfaces/ICmdNew';\nimport type { SpinalNode } from 'spinal-model-graph';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport { Val } from 'spinal-core-connectorjs';\n\nexport async function updateAttr(\n  node: SpinalNode,\n  attrs: ICmdNewAttr[]\n): Promise<void> {\n  if (!attrs || (attrs && attrs.length === 0)) return; // skip if nothing to update\n  let cat = await attributeService.getCategoryByName(node, 'Spatial');\n  if (!cat) {\n    cat = await attributeService.addCategoryAttribute(node, 'Spatial');\n  }\n  const attrsFromNode = await attributeService.getAttributesByCategory(\n    node,\n    cat\n  );\n  for (const attr of attrs) {\n    const attrFromNode = attrsFromNode.find(\n      (itm) => itm.label.get() === attr.label\n    );\n    if (attrFromNode) {\n      try {\n        if (attrFromNode.value instanceof Val) {\n          attrFromNode.mod_attr('value', attr.value);\n        } else {\n          attrFromNode.value.set(attr.value);\n        }\n      } catch (error) {\n        console.error(error);\n        console.log('err', node, {\n          label: attrFromNode.label,\n          value: attr.value,\n        });\n      }\n      if (attr.unit) attrFromNode.unit.set(attr.unit);\n    } else {\n      attributeService.addAttributeByCategory(\n        node,\n        cat,\n        attr.label,\n        attr.value.toString(),\n        '',\n        attr.unit\n      );\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateInfoByKey = void 0;\nfunction updateInfoByKey(node, key, value) {\n    try {\n        if (typeof node.info[key] === 'undefined') {\n            node.info.add_attr(key, value);\n        }\n        else {\n            node.info[key].set(value);\n        }\n    }\n    catch (err) {\n        console.error(err);\n        console.log('err', node, { key, value });\n    }\n}\nexports.updateInfoByKey = updateInfoByKey;\n//# sourceMappingURL=updateInfoByKey.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\n\nexport function updateInfoByKey(\n  node: SpinalNode,\n  key: string,\n  value: string | number\n): void {\n  try {\n    if (typeof node.info[key] === 'undefined') {\n      node.info.add_attr(key, value);\n    } else {\n      node.info[key].set(value);\n    }\n  } catch (err) {\n    console.error(err);\n    console.log('err', node, { key, value });\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateInfo = void 0;\nconst updateInfoByKey_1 = require(\"./updateInfoByKey\");\nfunction updateInfo(node, info) {\n    for (const key in info) {\n        if (Object.prototype.hasOwnProperty.call(info, key)) {\n            const value = info[key];\n            (0, updateInfoByKey_1.updateInfoByKey)(node, key, value);\n        }\n    }\n}\nexports.updateInfo = updateInfo;\n//# sourceMappingURL=updateInfo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ICmdNewInfo } from '../../interfaces/ICmdNew';\nimport type { SpinalNode } from 'spinal-model-graph';\nimport { updateInfoByKey } from './updateInfoByKey';\n\nexport function updateInfo(node: SpinalNode, info: ICmdNewInfo): void {\n  for (const key in info) {\n    if (Object.prototype.hasOwnProperty.call(info, key)) {\n      const value = info[key];\n      updateInfoByKey(node, key, value);\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBimContextByBimFileId = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst spinal_model_graph_2 = require(\"spinal-model-graph\");\nconst getBimFileByBimFileId_1 = require(\"./getBimFileByBimFileId\");\nconst constant_1 = require(\"../constant\");\nconst createBimContextIt = new Map();\nfunction getBimContextByBimFileId(bimFileId, doCreate = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimFile = yield (0, getBimFileByBimFileId_1.getBimFileByBimFileId)(bimFileId);\n        const bimContexts = yield bimFile.getChildren(constant_1.BIMCONTEXT_RELATION_NAME);\n        if (bimContexts.length > 0) {\n            return bimContexts[0];\n        }\n        if (doCreate === true) {\n            let it = createBimContextIt.get(bimFileId);\n            if (!it) {\n                it = _createBimContext(bimFile);\n                createBimContextIt.set(bimFileId, it);\n            }\n            return (yield it.next()).value;\n        }\n    });\n}\nexports.getBimContextByBimFileId = getBimContextByBimFileId;\nfunction _createBimContext(bimFile) {\n    return __asyncGenerator(this, arguments, function* _createBimContext_1() {\n        const bimContext = new spinal_model_graph_1.SpinalNode('BIMContext', 'SpinalNode');\n        yield __await(bimFile.addChild(bimContext, constant_1.BIMCONTEXT_RELATION_NAME, spinal_model_graph_2.SPINAL_RELATION_PTR_LST_TYPE));\n        while (true) {\n            yield yield __await(bimContext);\n        }\n    });\n}\n//# sourceMappingURL=getBimContextByBimFileId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalNode } from 'spinal-model-graph';\nimport { SPINAL_RELATION_PTR_LST_TYPE } from 'spinal-model-graph';\nimport { getBimFileByBimFileId } from './getBimFileByBimFileId';\nimport { BIMCONTEXT_RELATION_NAME } from '../constant';\n\nconst createBimContextIt = new Map<\n  string,\n  ReturnType<typeof _createBimContext>\n>();\nexport async function getBimContextByBimFileId(\n  bimFileId: string,\n  doCreate = false\n): Promise<SpinalNode> {\n  const bimFile = await getBimFileByBimFileId(bimFileId);\n  const bimContexts = await bimFile.getChildren(BIMCONTEXT_RELATION_NAME);\n  if (bimContexts.length > 0) {\n    return bimContexts[0];\n  }\n  if (doCreate === true) {\n    let it = createBimContextIt.get(bimFileId);\n    if (!it) {\n      it = _createBimContext(bimFile);\n      createBimContextIt.set(bimFileId, it);\n    }\n    return (await it.next()).value;\n  }\n}\n\nasync function* _createBimContext(\n  bimFile: SpinalNode\n): AsyncGenerator<SpinalNode, never, void> {\n  const bimContext = new SpinalNode('BIMContext', 'SpinalNode');\n  await bimFile.addChild(\n    bimContext,\n    BIMCONTEXT_RELATION_NAME,\n    SPINAL_RELATION_PTR_LST_TYPE\n  );\n  while (true) {\n    yield bimContext;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BIMCONTEXT_RELATION_NAME = exports.ARCHIVE_RELATION_NAME = exports.GENERATION_PROJECTION_TYPE = exports.GENERATION_GEO_TYPE = exports.GENERATION_RELATION = exports.GENERATION_TYPE = exports.GENERATION_CONTEXT_TYPE = exports.GENERATION_CONTEXT_NAME = exports.OVERLAY_SPHERES_PREVIEW_POSITION_NAME = exports.OVERLAY_LINES_PREVIEW_POSITION_NAME = exports.NOT_FOUND_DATE_TYPE = exports.CONTEXT_NOT_FOUND_RELATION = exports.CONTEXT_NOT_FOUND_TYPE = exports.CONTEXT_NOT_FOUND_NAME = exports.PROJECTION_CONFIG_RELATION_TYPE = exports.PROJECTION_CONFIG_RELATION = exports.PROJECTION_CONFIG_TYPE = void 0;\nexports.PROJECTION_CONFIG_TYPE = 'ProjectionConfig';\nexports.PROJECTION_CONFIG_RELATION = 'hasProjectionConfig';\nvar spinal_model_graph_1 = require(\"spinal-model-graph\");\nObject.defineProperty(exports, \"PROJECTION_CONFIG_RELATION_TYPE\", { enumerable: true, get: function () { return spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE; } });\nexports.CONTEXT_NOT_FOUND_NAME = 'Projection Error';\nexports.CONTEXT_NOT_FOUND_TYPE = 'ProjectionError';\nexports.CONTEXT_NOT_FOUND_RELATION = 'ProjectionErrorHasDate';\nexports.NOT_FOUND_DATE_TYPE = 'ProjectionErrorDate';\nexports.OVERLAY_LINES_PREVIEW_POSITION_NAME = 'spinal-overlay-preview-position-line';\nexports.OVERLAY_SPHERES_PREVIEW_POSITION_NAME = 'spinal-overlay-preview-position-sphere';\nexports.GENERATION_CONTEXT_NAME = 'Generation Context';\nexports.GENERATION_CONTEXT_TYPE = 'GenerationContext';\nexports.GENERATION_TYPE = 'GenerationType';\nexports.GENERATION_RELATION = 'hasGeneration';\nexports.GENERATION_GEO_TYPE = 'ContextSpatial';\nexports.GENERATION_PROJECTION_TYPE = 'ProjectionSpatial';\nexports.ARCHIVE_RELATION_NAME = 'hasGenerationArchive';\nexports.BIMCONTEXT_RELATION_NAME = 'hasBimContext';\n//# sourceMappingURL=constant.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport const PROJECTION_CONFIG_TYPE = 'ProjectionConfig';\nexport const PROJECTION_CONFIG_RELATION = 'hasProjectionConfig';\nexport { SPINAL_RELATION_PTR_LST_TYPE as PROJECTION_CONFIG_RELATION_TYPE } from 'spinal-model-graph';\n\nexport const CONTEXT_NOT_FOUND_NAME = 'Projection Error';\nexport const CONTEXT_NOT_FOUND_TYPE = 'ProjectionError';\nexport const CONTEXT_NOT_FOUND_RELATION = 'ProjectionErrorHasDate';\nexport const NOT_FOUND_DATE_TYPE = 'ProjectionErrorDate';\n\nexport const OVERLAY_LINES_PREVIEW_POSITION_NAME =\n  'spinal-overlay-preview-position-line';\nexport const OVERLAY_SPHERES_PREVIEW_POSITION_NAME =\n  'spinal-overlay-preview-position-sphere';\n\nexport const GENERATION_CONTEXT_NAME = 'Generation Context';\nexport const GENERATION_CONTEXT_TYPE = 'GenerationContext';\nexport const GENERATION_TYPE = 'GenerationType';\nexport const GENERATION_RELATION = 'hasGeneration';\nexport const GENERATION_GEO_TYPE = 'ContextSpatial';\nexport const GENERATION_PROJECTION_TYPE = 'ProjectionSpatial';\n\nexport const ARCHIVE_RELATION_NAME = 'hasGenerationArchive';\n\nexport const BIMCONTEXT_RELATION_NAME = 'hasBimContext';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.guid = void 0;\nfunction guid() {\n    return `${s4()}-${s4()}-${s4()}-${Date.now().toString(16)}`;\n}\nexports.guid = guid;\nfunction s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n}\n//# sourceMappingURL=guid.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function guid(): string {\n  return `${s4()}-${s4()}-${s4()}-${Date.now().toString(16)}`;\n}\n\nfunction s4(): string {\n  return Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./getBBoxAndMatrixs\"), exports);\n__exportStar(require(\"./getBBoxAndMatrix\"), exports);\n__exportStar(require(\"./getBimFileIdByModelId\"), exports);\n__exportStar(require(\"./getBulkProperties\"), exports);\n__exportStar(require(\"./getDbIdChildren\"), exports);\n__exportStar(require(\"./getLeafDbIdsByModelId\"), exports);\n__exportStar(require(\"./getLeafDbIdsByModel\"), exports);\n__exportStar(require(\"./getLeafDbIds\"), exports);\n__exportStar(require(\"./getModelByBimFileIdLoaded\"), exports);\n__exportStar(require(\"./getModelByModelId\"), exports);\n__exportStar(require(\"./getModifiedWorldBoundingBox\"), exports);\n__exportStar(require(\"./getPointOffset\"), exports);\n__exportStar(require(\"./getPropItemFromPropPath\"), exports);\n__exportStar(require(\"./getPropPath\"), exports);\n__exportStar(require(\"./isProjectionGroup\"), exports);\n__exportStar(require(\"./transformRtzToXyz\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './getBBoxAndMatrixs';\nexport * from './getBBoxAndMatrix';\nexport * from './getBimFileIdByModelId';\nexport * from './getBulkProperties';\nexport * from './getDbIdChildren';\nexport * from './getLeafDbIdsByModelId';\nexport * from './getLeafDbIdsByModel';\nexport * from './getLeafDbIds';\nexport * from './getModelByBimFileIdLoaded';\nexport * from './getModelByModelId';\nexport * from './getModifiedWorldBoundingBox';\nexport * from './getPointOffset';\nexport * from './getPropItemFromPropPath';\nexport * from './getPropPath';\nexport * from './isProjectionGroup';\nexport * from './transformRtzToXyz';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBBoxAndMatrixs = void 0;\nconst getModelByModelId_1 = require(\"./getModelByModelId\");\nconst getBBoxAndMatrix_1 = require(\"./getBBoxAndMatrix\");\nfunction getBBoxAndMatrixs(current, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const prom = [];\n        for (const item of current.itemToShow) {\n            if (typeof item.meshs === 'undefined' || typeof item.bbox === 'undefined') {\n                const model = (0, getModelByModelId_1.getModelByModelId)(item.modelId);\n                prom.push((0, getBBoxAndMatrix_1.getBBoxAndMatrix)(item.dbId, model, viewer).then(({ matrixWorld, bbox }) => {\n                    item.matrixWorld = matrixWorld;\n                    item.bbox = bbox;\n                }));\n            }\n        }\n        yield Promise.all(prom);\n    });\n}\nexports.getBBoxAndMatrixs = getBBoxAndMatrixs;\n//# sourceMappingURL=getBBoxAndMatrixs.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IPreviewObj } from '../../interfaces/IPreviewObj';\nimport { getModelByModelId } from './getModelByModelId';\nimport { getBBoxAndMatrix } from './getBBoxAndMatrix';\n\nexport async function getBBoxAndMatrixs(\n  current: IPreviewObj,\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<void> {\n  const prom = [];\n  for (const item of current.itemToShow) {\n    if (typeof item.meshs === 'undefined' || typeof item.bbox === 'undefined') {\n      const model = getModelByModelId(item.modelId);\n      prom.push(\n        getBBoxAndMatrix(item.dbId, model, viewer).then(\n          ({ matrixWorld, bbox }) => {\n            item.matrixWorld = matrixWorld;\n            item.bbox = bbox;\n          }\n        )\n      );\n    }\n  }\n  await Promise.all(prom);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getModelByModelId = void 0;\nfunction getModelByModelId(modelId) {\n    const mappingBimFileIdModelId = window.spinal.BimObjectService.mappingBimFileIdModelId;\n    for (const bimFileId in mappingBimFileIdModelId) {\n        if (Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)) {\n            const obj = mappingBimFileIdModelId[bimFileId];\n            if (obj.modelId === modelId) {\n                for (const { model } of obj.modelScene) {\n                    if (model.id === modelId)\n                        return model;\n                }\n            }\n        }\n    }\n}\nexports.getModelByModelId = getModelByModelId;\n//# sourceMappingURL=getModelByModelId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { Model, Val } from 'spinal-core-connectorjs';\n\nexport function getModelByModelId(modelId: number): Autodesk.Viewing.Model {\n  const mappingBimFileIdModelId: Record<\n    string,\n    {\n      modelId: number;\n      modelScene: { model: Autodesk.Viewing.Model; scene: Model }[];\n      version: Val;\n    }\n  > = window.spinal.BimObjectService.mappingBimFileIdModelId;\n  for (const bimFileId in mappingBimFileIdModelId) {\n    if (\n      Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)\n    ) {\n      const obj = mappingBimFileIdModelId[bimFileId];\n      if (obj.modelId === modelId) {\n        for (const { model } of obj.modelScene) {\n          if (model.id === modelId) return model;\n        }\n      }\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBBoxAndMatrix = void 0;\nconst getFragIds_1 = require(\"../getFragIds\");\nconst getModifiedWorldBoundingBox_1 = require(\"./getModifiedWorldBoundingBox\");\nfunction getBBoxAndMatrix(dbId, model, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const ids = yield (0, getFragIds_1.getFragIds)(dbId, model);\n        const matrixWorld = viewer.impl.getRenderProxy(model, ids[0]).matrixWorld;\n        const bbox = (0, getModifiedWorldBoundingBox_1.getModifiedWorldBoundingBox)(ids, model);\n        return { matrixWorld: matrixWorld.clone(), bbox };\n    });\n}\nexports.getBBoxAndMatrix = getBBoxAndMatrix;\n//# sourceMappingURL=getBBoxAndMatrix.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getFragIds } from '../getFragIds';\nimport { getModifiedWorldBoundingBox } from './getModifiedWorldBoundingBox';\n\nexport async function getBBoxAndMatrix(\n  dbId: number,\n  model: Autodesk.Viewing.Model,\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<{ matrixWorld: THREE.Matrix4; bbox: THREE.Box3 }> {\n  const ids = await getFragIds(dbId, model);\n  const matrixWorld: THREE.Matrix4 = viewer.impl.getRenderProxy(\n    model,\n    ids[0]\n  ).matrixWorld;\n  const bbox = getModifiedWorldBoundingBox(ids, model);\n  return { matrixWorld: matrixWorld.clone(), bbox };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getModifiedWorldBoundingBox = void 0;\nfunction getModifiedWorldBoundingBox(fragIds, model) {\n    //fragments list array\n    const fragList = model.getFragmentList();\n    const fragbBox = new window.THREE.Box3();\n    const nodebBox = new window.THREE.Box3();\n    fragIds.forEach(function (fragId) {\n        fragList.getWorldBounds(fragId, fragbBox);\n        nodebBox.union(fragbBox);\n    });\n    return nodebBox;\n}\nexports.getModifiedWorldBoundingBox = getModifiedWorldBoundingBox;\n//# sourceMappingURL=getModifiedWorldBoundingBox.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getModifiedWorldBoundingBox(\n  fragIds: number[],\n  model: Autodesk.Viewing.Model\n): THREE.Box3 {\n  //fragments list array\n  const fragList = model.getFragmentList();\n  const fragbBox = new window.THREE.Box3();\n  const nodebBox = new window.THREE.Box3();\n  fragIds.forEach(function (fragId) {\n    fragList.getWorldBounds(fragId, fragbBox);\n    nodebBox.union(fragbBox);\n  });\n  return nodebBox;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBimFileIdByModelId = void 0;\nfunction getBimFileIdByModelId(modelId) {\n    const mappingBimFileIdModelId = window.spinal.BimObjectService.mappingBimFileIdModelId;\n    for (const bimFileId in mappingBimFileIdModelId) {\n        if (Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)) {\n            const obj = mappingBimFileIdModelId[bimFileId];\n            if (obj.modelId === modelId) {\n                for (const { model } of obj.modelScene) {\n                    if (model.id === modelId)\n                        return bimFileId;\n                }\n            }\n        }\n    }\n}\nexports.getBimFileIdByModelId = getBimFileIdByModelId;\n//# sourceMappingURL=getBimFileIdByModelId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { Model, Val } from 'spinal-core-connectorjs';\n\nexport function getBimFileIdByModelId(modelId: number): string {\n  const mappingBimFileIdModelId: Record<\n    string,\n    {\n      modelId: number;\n      modelScene: { model: Autodesk.Viewing.Model; scene: Model }[];\n      version: Val;\n    }\n  > = window.spinal.BimObjectService.mappingBimFileIdModelId;\n  for (const bimFileId in mappingBimFileIdModelId) {\n    if (\n      Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)\n    ) {\n      const obj = mappingBimFileIdModelId[bimFileId];\n      if (obj.modelId === modelId) {\n        for (const { model } of obj.modelScene) {\n          if (model.id === modelId) return bimFileId;\n        }\n      }\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBulkProperties = void 0;\nconst getModelByModelId_1 = require(\"./getModelByModelId\");\nfunction getBulkProperties(model, dbIds, props = { propFilter: ['name', 'externalId'] }) {\n    let m;\n    if (typeof model === 'number') {\n        m = (0, getModelByModelId_1.getModelByModelId)(model);\n    }\n    else {\n        m = model;\n    }\n    return new Promise((resolve, reject) => {\n        m.getBulkProperties(Array.from(dbIds), props, (result) => {\n            const map = result.map((e) => {\n                return Object.assign(e, {\n                    id: `${m.id}-${e.dbId}`,\n                    modelId: m.id,\n                });\n            });\n            resolve(map);\n        }, (err) => reject(err));\n    });\n}\nexports.getBulkProperties = getBulkProperties;\n//# sourceMappingURL=getBulkProperties.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport { getModelByModelId } from './getModelByModelId';\n\nexport function getBulkProperties(\n  model: number | Autodesk.Viewing.Model,\n  dbIds: number[] | Set<number>,\n  props = { propFilter: ['name', 'externalId'] }\n): Promise<AuProps[]> {\n  let m: Autodesk.Viewing.Model;\n  if (typeof model === 'number') {\n    m = getModelByModelId(model);\n  } else {\n    m = model;\n  }\n  return new Promise((resolve, reject) => {\n    m.getBulkProperties(\n      Array.from(dbIds),\n      props,\n      (result) => {\n        const map = result.map((e): AuProps => {\n          return Object.assign(e, {\n            id: `${m.id}-${e.dbId}`,\n            modelId: m.id,\n          });\n        });\n        resolve(map);\n      },\n      (err) => reject(err)\n    );\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDbIdChildren = void 0;\nfunction getDbIdChildren(tree, id) {\n    const res = [];\n    tree.enumNodeChildren(id, (childId) => {\n        res.push(childId);\n    });\n    return res;\n}\nexports.getDbIdChildren = getDbIdChildren;\n//# sourceMappingURL=getDbIdChildren.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getDbIdChildren(\n  tree: Autodesk.Viewing.InstanceTree,\n  id: number\n): number[] {\n  const res: number[] = [];\n  tree.enumNodeChildren(id, (childId) => {\n    res.push(childId);\n  });\n  return res;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLeafDbIdsByModelId = void 0;\nconst getModelByModelId_1 = require(\"./getModelByModelId\");\nconst getLeafDbIds_1 = require(\"./getLeafDbIds\");\nfunction getLeafDbIdsByModelId(modelId, dbIds) {\n    const model = (0, getModelByModelId_1.getModelByModelId)(modelId);\n    return (0, getLeafDbIds_1.getLeafDbIds)(model, dbIds).selection;\n}\nexports.getLeafDbIdsByModelId = getLeafDbIdsByModelId;\n//# sourceMappingURL=getLeafDbIdsByModelId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getModelByModelId } from './getModelByModelId';\nimport { getLeafDbIds } from './getLeafDbIds';\n\nexport function getLeafDbIdsByModelId(\n  modelId: number,\n  dbIds: number | number[]\n): number[] {\n  const model = getModelByModelId(modelId);\n  return getLeafDbIds(model, dbIds).selection;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLeafDbIds = void 0;\nconst getDbIdChildren_1 = require(\"./getDbIdChildren\");\nfunction getLeafDbIds(model, rootId) {\n    const tree = model.getInstanceTree();\n    const dbIds = [];\n    if (typeof rootId === 'undefined') {\n        rootId = [tree.nodeAccess.rootId];\n    }\n    else {\n        rootId = Array.isArray(rootId) ? rootId : [rootId];\n    }\n    rootId.forEach((el) => {\n        const queue = [el];\n        while (queue.length) {\n            const id = queue.pop();\n            const children = (0, getDbIdChildren_1.getDbIdChildren)(tree, id);\n            if (children.length > 0) {\n                queue.push(...children);\n            }\n            else {\n                dbIds.push(id);\n            }\n        }\n    });\n    return { model: model, selection: dbIds };\n}\nexports.getLeafDbIds = getLeafDbIds;\n//# sourceMappingURL=getLeafDbIds.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getDbIdChildren } from './getDbIdChildren';\n\nexport function getLeafDbIds(\n  model: Autodesk.Viewing.Model,\n  rootId?: number | number[]\n): { model: Autodesk.Viewing.Model; selection: number[] } {\n  const tree = model.getInstanceTree();\n  const dbIds = [];\n\n  if (typeof rootId === 'undefined') {\n    rootId = [tree.nodeAccess.rootId];\n  } else {\n    rootId = Array.isArray(rootId) ? rootId : [rootId];\n  }\n  rootId.forEach((el) => {\n    const queue = [el];\n    while (queue.length) {\n      const id = queue.pop();\n      const children = getDbIdChildren(tree, id);\n      if (children.length > 0) {\n        queue.push(...children);\n      } else {\n        dbIds.push(id);\n      }\n    }\n  });\n  return { model: model, selection: dbIds };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLeafDbIdsByModel = void 0;\nconst getLeafDbIds_1 = require(\"./getLeafDbIds\");\nfunction getLeafDbIdsByModel(model, dbIds) {\n    return (0, getLeafDbIds_1.getLeafDbIds)(model, dbIds).selection;\n}\nexports.getLeafDbIdsByModel = getLeafDbIdsByModel;\n//# sourceMappingURL=getLeafDbIdsByModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getLeafDbIds } from './getLeafDbIds';\n\nexport function getLeafDbIdsByModel(\n  model: Autodesk.Viewing.Model,\n  dbIds: number | number[]\n): number[] {\n  return getLeafDbIds(model, dbIds).selection;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getModelByBimFileIdLoaded = void 0;\nfunction getModelByBimFileIdLoaded(bimFileId) {\n    const mappingBimFileIdModelId = window.spinal.BimObjectService.mappingBimFileIdModelId;\n    if (Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)) {\n        const obj = mappingBimFileIdModelId[bimFileId];\n        for (const { model } of obj.modelScene) {\n            return model;\n        }\n    }\n}\nexports.getModelByBimFileIdLoaded = getModelByBimFileIdLoaded;\n//# sourceMappingURL=getModelByBimFileIdLoaded.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { Model, Val } from 'spinal-core-connectorjs';\n\nexport function getModelByBimFileIdLoaded(\n  bimFileId: string\n): Autodesk.Viewing.Model {\n  const mappingBimFileIdModelId: Record<\n    string,\n    {\n      modelId: number;\n      modelScene: { model: Autodesk.Viewing.Model; scene: Model }[];\n      version: Val;\n    }\n  > = window.spinal.BimObjectService.mappingBimFileIdModelId;\n  if (\n    Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)\n  ) {\n    const obj = mappingBimFileIdModelId[bimFileId];\n    for (const { model } of obj.modelScene) {\n      return model;\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPointOffset = void 0;\nfunction getPointOffset(orig, offset, matrixWorld) {\n    const inverseMatrix = new THREE.Matrix4();\n    const point = new THREE.Vector3(orig.x, orig.y, orig.z);\n    const _offset = new THREE.Vector3(offset.x, offset.y, offset.z);\n    inverseMatrix.getInverse(matrixWorld);\n    point.applyMatrix4(inverseMatrix);\n    point.add(_offset);\n    point.applyMatrix4(matrixWorld);\n    return point;\n}\nexports.getPointOffset = getPointOffset;\n//# sourceMappingURL=getPointOffset.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalVec3 } from '../../interfaces/SpinalVec3';\n\nexport function getPointOffset(\n  orig: SpinalVec3,\n  offset: SpinalVec3,\n  matrixWorld: THREE.Matrix4\n): THREE.Vector3 {\n  const inverseMatrix = new THREE.Matrix4();\n  const point = new THREE.Vector3(orig.x, orig.y, orig.z);\n  const _offset = new THREE.Vector3(offset.x, offset.y, offset.z);\n  inverseMatrix.getInverse(matrixWorld);\n  point.applyMatrix4(inverseMatrix);\n  point.add(_offset);\n  point.applyMatrix4(matrixWorld);\n  return point;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPropItemFromPropPath = void 0;\nconst getBulkProperties_1 = require(\"./getBulkProperties\");\nconst getDbIdChildren_1 = require(\"./getDbIdChildren\");\nfunction getPropItemFromPropPath(propPath, model) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const tree = model.getInstanceTree();\n        let currDbId = tree.nodeAccess.rootId;\n        let lastFound;\n        for (const nameProp of propPath) {\n            const childrenDbId = (0, getDbIdChildren_1.getDbIdChildren)(tree, currDbId);\n            const childrenProps = yield (0, getBulkProperties_1.getBulkProperties)(model, childrenDbId);\n            lastFound = childrenProps.find((itm) => itm.name === nameProp);\n            if (!lastFound)\n                return undefined;\n            currDbId = lastFound.dbId;\n        }\n        return lastFound ? lastFound : undefined;\n    });\n}\nexports.getPropItemFromPropPath = getPropItemFromPropPath;\n//# sourceMappingURL=getPropItemFromPropPath.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces';\nimport { getBulkProperties } from './getBulkProperties';\nimport { getDbIdChildren } from './getDbIdChildren';\n\nexport async function getPropItemFromPropPath(\n  propPath: string[],\n  model: Autodesk.Viewing.Model\n): Promise<AuProps> {\n  const tree = model.getInstanceTree();\n  let currDbId = tree.nodeAccess.rootId;\n  let lastFound: AuProps;\n  for (const nameProp of propPath) {\n    const childrenDbId = getDbIdChildren(tree, currDbId);\n    const childrenProps = await getBulkProperties(model, childrenDbId);\n    lastFound = childrenProps.find((itm) => itm.name === nameProp);\n    if (!lastFound) return undefined;\n    currDbId = lastFound.dbId;\n  }\n  return lastFound ? lastFound : undefined;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPropPath = void 0;\nconst getBulkProperties_1 = require(\"./getBulkProperties\");\nfunction getPropPath(dbId, model) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = [];\n        const tree = model.getInstanceTree();\n        const rootId = tree.nodeAccess.rootId;\n        let currentDbId = dbId;\n        while (currentDbId != rootId) {\n            const props = yield (0, getBulkProperties_1.getBulkProperties)(model, [currentDbId], {\n                propFilter: ['name', 'externalId', 'parent'],\n            });\n            const prop = props[0];\n            res.push(prop.name);\n            const p = prop.properties.find((p) => p.attributeName === 'parent');\n            if (!p)\n                return undefined;\n            currentDbId = parseInt(p.displayValue);\n        }\n        return res.reverse();\n    });\n}\nexports.getPropPath = getPropPath;\n//# sourceMappingURL=getPropPath.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { getBulkProperties } from './getBulkProperties';\n\nexport async function getPropPath(\n  dbId: number,\n  model: Autodesk.Viewing.Model\n): Promise<string[]> {\n  const res: string[] = [];\n  const tree = model.getInstanceTree();\n  const rootId = tree.nodeAccess.rootId;\n  let currentDbId = dbId;\n  while (currentDbId != rootId) {\n    const props = await getBulkProperties(model, [currentDbId], {\n      propFilter: ['name', 'externalId', 'parent'],\n    });\n    const prop = props[0];\n    res.push(prop.name);\n    const p = prop.properties.find((p) => p.attributeName === 'parent');\n    if (!p) return undefined;\n    currentDbId = parseInt(p.displayValue);\n  }\n  return res.reverse();\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isProjectionGroup = void 0;\nconst ProjectionGroup_1 = require(\"../../ProjectObjectInContext/ProjectionItem/ProjectionGroup\");\nfunction isProjectionGroup(item) {\n    return item instanceof ProjectionGroup_1.ProjectionGroup;\n}\nexports.isProjectionGroup = isProjectionGroup;\n//# sourceMappingURL=isProjectionGroup.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { ProjectionGroup } from '../../ProjectObjectInContext/ProjectionItem/ProjectionGroup';\n\nexport function isProjectionGroup(item: unknown): item is ProjectionGroup {\n  return item instanceof ProjectionGroup;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionGroup = void 0;\nconst getBulkProperties_1 = require(\"../../utils/projection/getBulkProperties\");\nconst getModelByModelId_1 = require(\"../../utils/projection/getModelByModelId\");\nclass ProjectionGroup {\n    constructor(name) {\n        this.offset = { r: 0, t: 0, z: 0 };\n        this.uid = `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(Math.random() * 10000)}`;\n        this.data = [];\n        this.computedData = [];\n        this.name = name;\n    }\n    getAndMergeSelection(viewer) {\n        return __awaiter(this, void 0, void 0, function* () {\n            viewer.getAggregateSelection((model, dbId) => {\n                const found = this.data.find((el) => {\n                    return el.modelId === model.id;\n                });\n                if (typeof found !== 'undefined') {\n                    if (!found.selection.includes(dbId)) {\n                        found.selection.push(dbId);\n                    }\n                }\n                else {\n                    this.data.push({\n                        modelId: model.id,\n                        selection: [dbId],\n                    });\n                }\n            });\n            yield this.updateComputed();\n        });\n    }\n    updateComputed() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proms = [];\n            for (const { modelId, selection } of this.data) {\n                if (selection.length === 0)\n                    continue;\n                proms.push((0, getBulkProperties_1.getBulkProperties)(modelId, selection));\n            }\n            const tmpRes = yield Promise.all(proms);\n            this.data = this.data.filter((obj) => {\n                return obj.selection.length !== 0;\n            });\n            this.computedData = [];\n            for (const arr of tmpRes) {\n                for (const item of arr) {\n                    Object.assign(item, {\n                        uid: `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(Math.random() * 10000)}`,\n                    });\n                    this.computedData.push(item);\n                }\n            }\n        });\n    }\n    deleteItem(item) {\n        for (const { modelId, selection } of this.data) {\n            if (modelId === item.modelId) {\n                const idx = selection.indexOf(item.dbId);\n                if (idx !== -1) {\n                    selection.splice(idx, 1);\n                    return this.updateComputed();\n                }\n                return Promise.resolve();\n            }\n        }\n        return Promise.resolve();\n    }\n    selectItem(item, viewer) {\n        for (const { modelId } of this.data) {\n            if (modelId === item.modelId) {\n                const model = (0, getModelByModelId_1.getModelByModelId)(modelId);\n                return viewer.select([item.dbId], model);\n            }\n        }\n    }\n    selectAll(viewer) {\n        viewer.clearSelection();\n        for (const { modelId, selection } of this.data) {\n            const model = (0, getModelByModelId_1.getModelByModelId)(modelId);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            model.selector.setSelection(selection, model);\n        }\n    }\n}\nexports.ProjectionGroup = ProjectionGroup;\n//# sourceMappingURL=ProjectionGroup.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport type { IProjectionOffset } from '../../interfaces/IProjectionOffset';\nimport type { IAggregateSelectItem } from '../../interfaces/IAggregateSelectItem';\nimport { getBulkProperties } from '../../utils/projection/getBulkProperties';\nimport { getModelByModelId } from '../../utils/projection/getModelByModelId';\nimport { IProjectionGroupItem } from '../../interfaces/IProjectionGroupItem';\n\nexport class ProjectionGroup {\n  name: string;\n  offset: IProjectionOffset = { r: 0, t: 0, z: 0 };\n  uid = `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(\n    Math.random() * 10000\n  )}`;\n  data: IAggregateSelectItem[] = [];\n  computedData: IProjectionGroupItem[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  async getAndMergeSelection(viewer: Autodesk.Viewing.Viewer3D): Promise<void> {\n    viewer.getAggregateSelection(\n      (model: Autodesk.Viewing.Model, dbId: number) => {\n        const found = this.data.find((el) => {\n          return el.modelId === model.id;\n        });\n        if (typeof found !== 'undefined') {\n          if (!found.selection.includes(dbId)) {\n            found.selection.push(dbId);\n          }\n        } else {\n          this.data.push({\n            modelId: model.id,\n            selection: [dbId],\n          });\n        }\n      }\n    );\n    await this.updateComputed();\n  }\n\n  async updateComputed(): Promise<void> {\n    const proms: Promise<AuProps[]>[] = [];\n    for (const { modelId, selection } of this.data) {\n      if (selection.length === 0) continue;\n      proms.push(getBulkProperties(modelId, selection));\n    }\n    const tmpRes = await Promise.all(proms);\n    this.data = this.data.filter((obj) => {\n      return obj.selection.length !== 0;\n    });\n    this.computedData = [];\n    for (const arr of tmpRes) {\n      for (const item of arr) {\n        Object.assign(item, {\n          uid: `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(\n            Math.random() * 10000\n          )}`,\n        });\n        this.computedData.push(<IProjectionGroupItem>item);\n      }\n    }\n  }\n\n  deleteItem(item: { modelId: number; dbId: number }) {\n    for (const { modelId, selection } of this.data) {\n      if (modelId === item.modelId) {\n        const idx = selection.indexOf(item.dbId);\n        if (idx !== -1) {\n          selection.splice(idx, 1);\n          return this.updateComputed();\n        }\n        return Promise.resolve();\n      }\n    }\n    return Promise.resolve();\n  }\n\n  selectItem(\n    item: { modelId: number; dbId: number },\n    viewer: Autodesk.Viewing.Viewer3D\n  ): void {\n    for (const { modelId } of this.data) {\n      if (modelId === item.modelId) {\n        const model = getModelByModelId(modelId);\n        return viewer.select([item.dbId], model);\n      }\n    }\n  }\n  selectAll(viewer: Autodesk.Viewing.Viewer3D): void {\n    viewer.clearSelection();\n    for (const { modelId, selection } of this.data) {\n      const model = getModelByModelId(modelId);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (<any>model).selector.setSelection(selection, model);\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformRtzToXyz = void 0;\nfunction transformRtzToXyz(obj) {\n    const angle = (obj.t * Math.PI) / 180;\n    const x = obj.r * Math.cos(angle);\n    const y = obj.r * Math.sin(angle);\n    return { x, y, z: obj.z };\n}\nexports.transformRtzToXyz = transformRtzToXyz;\n//# sourceMappingURL=transformRtzToXyz.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IProjectionOffset } from '../../interfaces/IProjectionOffset';\nimport type { SpinalVec3 } from '../../interfaces/SpinalVec3';\n\nexport function transformRtzToXyz(obj: IProjectionOffset): SpinalVec3 {\n  const angle = (obj.t * Math.PI) / 180;\n  const x = obj.r * Math.cos(angle);\n  const y = obj.r * Math.sin(angle);\n  return { x, y, z: obj.z };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitGetServerId = void 0;\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction waitGetServerId(model) {\n    if (typeof spinal_core_connectorjs_1.FileSystem._objects[model._server_id] !== 'undefined')\n        return Promise.resolve();\n    return new Promise((resolve) => {\n        const inter = setInterval(() => {\n            if (typeof spinal_core_connectorjs_1.FileSystem._objects[model._server_id] !== 'undefined') {\n                clearInterval(inter);\n                resolve();\n            }\n        }, 100);\n    });\n}\nexports.waitGetServerId = waitGetServerId;\n//# sourceMappingURL=waitGetServerId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { type Model, FileSystem } from 'spinal-core-connectorjs';\n\nexport function waitGetServerId(model: Model): Promise<void> {\n  if (typeof FileSystem._objects[model._server_id] !== 'undefined')\n    return Promise.resolve();\n  return new Promise((resolve) => {\n    const inter = setInterval(() => {\n      if (typeof FileSystem._objects[model._server_id] !== 'undefined') {\n        clearInterval(inter);\n        resolve();\n      }\n    }, 100);\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitPathSendToHub = void 0;\nfunction waitPathSendToHub(path) {\n    return new Promise((resolve) => {\n        const inter = setInterval(() => {\n            if (path.remaining.get() === 0) {\n                clearInterval(inter);\n                resolve();\n            }\n        }, 100);\n    });\n}\nexports.waitPathSendToHub = waitPathSendToHub;\n//# sourceMappingURL=waitPathSendToHub.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { Path } from 'spinal-core-connectorjs';\n\nexport function waitPathSendToHub(path: Path): Promise<void> {\n  return new Promise((resolve) => {\n    const inter = setInterval(() => {\n      if (path.remaining.get() === 0) {\n        clearInterval(inter);\n        resolve();\n      }\n    }, 100);\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setLevelInContextGeo = void 0;\nconst getContextSpatial_1 = require(\"../utils/getContextSpatial\");\n// // uncomment to add Attr to refobjs\n// import {\n//   GEO_REFERENCE_RELATION,\n//   GEO_REFERENCE_ROOM_RELATION,\n// } from '../../Constant';\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction setLevelAttr(node, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const categoryName = 'Spatial';\n        const label = 'level';\n        let category = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategoryByName(node, categoryName);\n        if (!category) {\n            category = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.addCategoryAttribute(node, categoryName);\n        }\n        const attrs = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(node, category);\n        for (const attr of attrs) {\n            if (attr.label.get() === label) {\n                if (attr.value instanceof spinal_core_connectorjs_1.Val) {\n                    attr.mod_attr('value', value);\n                }\n                else\n                    attr.value.set(value);\n                return;\n            }\n        }\n        spinal_env_viewer_plugin_documentation_service_1.attributeService.addAttributeByCategory(node, category, label, value);\n    });\n}\nfunction setLevelInContextGeo(graph) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const context = yield (0, getContextSpatial_1.getContextSpatial)(graph);\n        const buildings = yield context.getChildrenInContext(context);\n        for (const building of buildings) {\n            const floors = yield building.getChildrenInContext(context);\n            for (const floor of floors) {\n                const rooms = yield floor.getChildrenInContext(context);\n                // // uncomment to add Attr to refobjs\n                // const [floorRefObjs, rooms] = await Promise.all([\n                //   floor.getChildren(GEO_REFERENCE_RELATION),\n                //   floor.getChildrenInContext(context),\n                // ]);\n                const floorName = floor.info.name.get();\n                const proms = [];\n                // // uncomment to add Attr to refobjs\n                // for (const floorRefObj of floorRefObjs) {\n                //   proms.push(setLevelAttr(floorRefObj, floorName));\n                // }\n                for (const room of rooms) {\n                    proms.push(setLevelAttr(room, floorName));\n                    // // uncomment to add Attr to refobjs\n                    // const refsRoom = await room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n                    // for (const ref of refsRoom) {\n                    //   proms.push(setLevelAttr(ref, floorName));\n                    // }\n                }\n                yield Promise.all(proms);\n            }\n        }\n    });\n}\nexports.setLevelInContextGeo = setLevelInContextGeo;\n//# sourceMappingURL=setLevelInContextGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalGraph, SpinalNode } from 'spinal-model-graph';\nimport { getContextSpatial } from '../utils/getContextSpatial';\n// // uncomment to add Attr to refobjs\n// import {\n//   GEO_REFERENCE_RELATION,\n//   GEO_REFERENCE_ROOM_RELATION,\n// } from '../../Constant';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport { Val } from 'spinal-core-connectorjs';\n\nasync function setLevelAttr(node: SpinalNode, value: string) {\n  const categoryName = 'Spatial';\n  const label = 'level';\n  let category = await attributeService.getCategoryByName(node, categoryName);\n  if (!category) {\n    category = await attributeService.addCategoryAttribute(node, categoryName);\n  }\n  const attrs = await attributeService.getAttributesByCategory(node, category);\n  for (const attr of attrs) {\n    if (attr.label.get() === label) {\n      if (attr.value instanceof Val) {\n        attr.mod_attr('value', value);\n      } else attr.value.set(value);\n      return;\n    }\n  }\n  attributeService.addAttributeByCategory(node, category, label, value);\n}\n\nexport async function setLevelInContextGeo(graph: SpinalGraph) {\n  const context = await getContextSpatial(graph);\n  const buildings = await context.getChildrenInContext(context);\n  for (const building of buildings) {\n    const floors = await building.getChildrenInContext(context);\n    for (const floor of floors) {\n      const rooms = await floor.getChildrenInContext(context);\n      // // uncomment to add Attr to refobjs\n      // const [floorRefObjs, rooms] = await Promise.all([\n      //   floor.getChildren(GEO_REFERENCE_RELATION),\n      //   floor.getChildrenInContext(context),\n      // ]);\n      const floorName = floor.info.name.get();\n      const proms = [];\n      // // uncomment to add Attr to refobjs\n      // for (const floorRefObj of floorRefObjs) {\n      //   proms.push(setLevelAttr(floorRefObj, floorName));\n      // }\n\n      for (const room of rooms) {\n        proms.push(setLevelAttr(room, floorName));\n        // // uncomment to add Attr to refobjs\n        // const refsRoom = await room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n        // for (const ref of refsRoom) {\n        //   proms.push(setLevelAttr(ref, floorName));\n        // }\n      }\n      await Promise.all(proms);\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformArchi = exports.parseUnit = void 0;\nfunction parseUnit(str) {\n    var _a;\n    const data = (_a = /autodesk\\.unit\\.unit:(.+)-\\d+\\.\\d+\\.\\d+/.exec(str)) === null || _a === void 0 ? void 0 : _a[1];\n    return data ? data : str;\n}\nexports.parseUnit = parseUnit;\nfunction returnNumberStr(value) {\n    if (typeof value === 'number')\n        return Number.isInteger(value) ? value.toString() : value.toFixed(2);\n    return value.toString();\n}\nfunction updatePropsUnitAndGetArea(props) {\n    let res;\n    for (const prop of props) {\n        if (prop.name === 'area')\n            res = prop;\n        if (prop.dataTypeContext)\n            prop.dataTypeContext = parseUnit(prop.dataTypeContext);\n        if (typeof prop.value === 'number')\n            prop.value = returnNumberStr(prop.value);\n    }\n    return res;\n}\n/**\n * calculate Area & parse unit type\n * @export\n * @param {IGetArchi} archi\n */\nfunction transformArchi(archi) {\n    for (const floorExtId in archi) {\n        if (Object.prototype.hasOwnProperty.call(archi, floorExtId)) {\n            const floorAchi = archi[floorExtId];\n            let unitName = 'squareMeter';\n            let floorArea = 0;\n            for (const roomExtId in floorAchi.children) {\n                if (Object.prototype.hasOwnProperty.call(floorAchi.children, roomExtId)) {\n                    const roomAchi = floorAchi.children[roomExtId];\n                    let roomArea = 0;\n                    for (const roomRefExtId in roomAchi.children) {\n                        if (Object.prototype.hasOwnProperty.call(roomAchi.children, roomRefExtId)) {\n                            const roomRef = roomAchi.children[roomRefExtId];\n                            const prop = updatePropsUnitAndGetArea(roomRef.properties);\n                            if (prop) {\n                                unitName = prop.dataTypeContext;\n                                roomArea += parseFloat(prop.value);\n                            }\n                        }\n                    }\n                    let roomProp = updatePropsUnitAndGetArea(roomAchi.properties.properties);\n                    if (!roomProp) {\n                        roomProp = {\n                            name: 'area',\n                            value: returnNumberStr(roomArea),\n                            dataTypeContext: unitName,\n                        };\n                        roomAchi.properties.properties.push(roomProp);\n                    }\n                    else {\n                        roomProp.value = returnNumberStr(roomArea);\n                    }\n                    floorArea += roomArea;\n                }\n            }\n            // update strutures\n            for (const extid in floorAchi.structures) {\n                if (Object.prototype.hasOwnProperty.call(floorAchi.structures, extid)) {\n                    const { properties } = floorAchi.structures[extid];\n                    updatePropsUnitAndGetArea(properties.properties);\n                }\n            }\n            let floorProp = updatePropsUnitAndGetArea(floorAchi.properties.properties);\n            if (!floorProp) {\n                floorProp = {\n                    name: 'area',\n                    value: returnNumberStr(floorArea),\n                    dataTypeContext: unitName,\n                };\n                floorAchi.properties.properties.push(floorProp);\n            }\n            else {\n                floorProp.value = returnNumberStr(floorArea);\n            }\n        }\n    }\n}\nexports.transformArchi = transformArchi;\n//# sourceMappingURL=transformArchi.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IGetArchi, IPropertiesItem } from '../interfaces/IGetArchi';\n\nexport function parseUnit(str: string): string {\n  const data = /autodesk\\.unit\\.unit:(.+)-\\d+\\.\\d+\\.\\d+/.exec(str)?.[1];\n  return data ? data : str;\n}\n\nfunction returnNumberStr(value: number | string): string {\n  if (typeof value === 'number')\n    return Number.isInteger(value) ? value.toString() : value.toFixed(2);\n  return value.toString();\n}\n\nfunction updatePropsUnitAndGetArea(props: IPropertiesItem[]): IPropertiesItem {\n  let res: IPropertiesItem;\n  for (const prop of props) {\n    if (prop.name === 'area') res = prop;\n    if (prop.dataTypeContext)\n      prop.dataTypeContext = parseUnit(prop.dataTypeContext);\n    if (typeof prop.value === 'number')\n      prop.value = returnNumberStr(prop.value);\n  }\n  return res;\n}\n\n/**\n * calculate Area & parse unit type\n * @export\n * @param {IGetArchi} archi\n */\nexport function transformArchi(archi: IGetArchi) {\n  for (const floorExtId in archi) {\n    if (Object.prototype.hasOwnProperty.call(archi, floorExtId)) {\n      const floorAchi = archi[floorExtId];\n      let unitName = 'squareMeter';\n      let floorArea = 0;\n      for (const roomExtId in floorAchi.children) {\n        if (\n          Object.prototype.hasOwnProperty.call(floorAchi.children, roomExtId)\n        ) {\n          const roomAchi = floorAchi.children[roomExtId];\n          let roomArea = 0;\n          for (const roomRefExtId in roomAchi.children) {\n            if (\n              Object.prototype.hasOwnProperty.call(\n                roomAchi.children,\n                roomRefExtId\n              )\n            ) {\n              const roomRef = roomAchi.children[roomRefExtId];\n              const prop = updatePropsUnitAndGetArea(roomRef.properties);\n              if (prop) {\n                unitName = prop.dataTypeContext;\n                roomArea += parseFloat(prop.value as string);\n              }\n            }\n          }\n          let roomProp = updatePropsUnitAndGetArea(\n            roomAchi.properties.properties\n          );\n          if (!roomProp) {\n            roomProp = {\n              name: 'area',\n              value: returnNumberStr(roomArea),\n              dataTypeContext: unitName,\n            };\n            roomAchi.properties.properties.push(roomProp);\n          } else {\n            roomProp.value = returnNumberStr(roomArea);\n          }\n          floorArea += roomArea;\n        }\n      }\n\n      // update strutures\n      for (const extid in floorAchi.structures) {\n        if (Object.prototype.hasOwnProperty.call(floorAchi.structures, extid)) {\n          const { properties } = floorAchi.structures[extid];\n          updatePropsUnitAndGetArea(properties.properties);\n        }\n      }\n      let floorProp = updatePropsUnitAndGetArea(\n        floorAchi.properties.properties\n      );\n\n      if (!floorProp) {\n        floorProp = {\n          name: 'area',\n          value: returnNumberStr(floorArea),\n          dataTypeContext: unitName,\n        };\n        floorAchi.properties.properties.push(floorProp);\n      } else {\n        floorProp.value = returnNumberStr(floorArea);\n      }\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateDbIds = void 0;\nconst Constant_1 = require(\"../../Constant\");\nconst getBimContextByBimFileId_1 = require(\"../utils/getBimContextByBimFileId\");\nconst getExternalIdMapping_1 = require(\"../utils/getExternalIdMapping\");\nfunction updateDbIds(bimFileId, model) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimContext = yield (0, getBimContextByBimFileId_1.getBimContextByBimFileId)(bimFileId);\n        if (typeof bimContext === 'undefined')\n            throw new Error('No BimOject found with this bimFileId');\n        const map = yield (0, getExternalIdMapping_1.getExternalIdMapping)(model);\n        const bimobjs = yield bimContext.getChildren(Constant_1.GEO_EQUIPMENT_RELATION);\n        for (const bimobj of bimobjs) {\n            if (bimobj.info.bimFileId.get() === bimFileId) {\n                const dbid = map[bimobj.info.externalId.get()];\n                if (dbid)\n                    bimobj.info.dbid.set(dbid);\n                else {\n                    bimobj.info.dbid.set(-1);\n                }\n            }\n        }\n    });\n}\nexports.updateDbIds = updateDbIds;\n//# sourceMappingURL=updateDbIds.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { GEO_EQUIPMENT_RELATION } from '../../Constant';\nimport { getBimContextByBimFileId } from '../utils/getBimContextByBimFileId';\nimport { getExternalIdMapping } from '../utils/getExternalIdMapping';\n\nexport async function updateDbIds(\n  bimFileId: string,\n  model: Autodesk.Viewing.Model\n): Promise<void> {\n  const bimContext = await getBimContextByBimFileId(bimFileId);\n  if (typeof bimContext === 'undefined')\n    throw new Error('No BimOject found with this bimFileId');\n  const map = await getExternalIdMapping(model);\n  const bimobjs = await bimContext.getChildren(GEO_EQUIPMENT_RELATION);\n  for (const bimobj of bimobjs) {\n    if (bimobj.info.bimFileId.get() === bimFileId) {\n      const dbid = map[bimobj.info.externalId.get()];\n      if (dbid) bimobj.info.dbid.set(dbid);\n      else {\n        bimobj.info.dbid.set(-1);\n      }\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getExternalIdMapping = void 0;\nfunction getExternalIdMapping(model) {\n    return new Promise((resolve, reject) => {\n        model.getExternalIdMapping(resolve, reject);\n    });\n}\nexports.getExternalIdMapping = getExternalIdMapping;\n//# sourceMappingURL=getExternalIdMapping.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getExternalIdMapping(\n  model: Autodesk.Viewing.Model\n): Promise<Record<string, number>> {\n  return new Promise((resolve, reject) => {\n    model.getExternalIdMapping(resolve, reject);\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateRoomDbId = void 0;\nconst getContextSpatial_1 = require(\"../utils/getContextSpatial\");\nconst Constant_1 = require(\"../../Constant\");\nfunction updateDbId(spinalNode) {\n    if (typeof spinalNode.info.dbId !== 'undefined') {\n        if (typeof spinalNode.info.dbid === 'undefined') {\n            const dbid = spinalNode.info.dbId;\n            spinalNode.info.rem_attr('dbId');\n            spinalNode.info.add_attr('dbid', dbid);\n        }\n        else {\n            spinalNode.info.rem_attr('dbId');\n        }\n    }\n}\nfunction updateRoomDbId(graph) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const context = yield (0, getContextSpatial_1.getContextSpatial)(graph);\n        const buildings = yield context.getChildrenInContext(context);\n        for (const building of buildings) {\n            const floors = yield building.getChildrenInContext(context);\n            for (const floor of floors) {\n                const [floorRefObjs, rooms] = yield Promise.all([\n                    floor.getChildren(Constant_1.GEO_REFERENCE_RELATION),\n                    floor.getChildrenInContext(context),\n                ]);\n                for (const floorRefObj of floorRefObjs) {\n                    updateDbId(floorRefObj);\n                }\n                for (const room of rooms) {\n                    updateDbId(room);\n                    const refsRoom = yield room.getChildren(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n                    for (const ref of refsRoom) {\n                        updateDbId(ref);\n                    }\n                }\n            }\n        }\n    });\n}\nexports.updateRoomDbId = updateRoomDbId;\n//# sourceMappingURL=updateRoomDbId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalGraph, SpinalNode } from 'spinal-model-graph';\nimport { getContextSpatial } from '../utils/getContextSpatial';\nimport {\n  GEO_REFERENCE_RELATION,\n  GEO_REFERENCE_ROOM_RELATION,\n} from '../../Constant';\n\nfunction updateDbId(spinalNode: SpinalNode) {\n  if (typeof spinalNode.info.dbId !== 'undefined') {\n    if (typeof spinalNode.info.dbid === 'undefined') {\n      const dbid = spinalNode.info.dbId;\n      spinalNode.info.rem_attr('dbId');\n      spinalNode.info.add_attr('dbid', dbid);\n    } else {\n      spinalNode.info.rem_attr('dbId');\n    }\n  }\n}\n\nexport async function updateRoomDbId(graph: SpinalGraph): Promise<void> {\n  const context = await getContextSpatial(graph);\n  const buildings = await context.getChildrenInContext(context);\n  for (const building of buildings) {\n    const floors = await building.getChildrenInContext(context);\n    for (const floor of floors) {\n      const [floorRefObjs, rooms] = await Promise.all([\n        floor.getChildren(GEO_REFERENCE_RELATION),\n        floor.getChildrenInContext(context),\n      ]);\n      for (const floorRefObj of floorRefObjs) {\n        updateDbId(floorRefObj);\n      }\n      for (const room of rooms) {\n        updateDbId(room);\n        const refsRoom = await room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n        for (const ref of refsRoom) {\n          updateDbId(ref);\n        }\n      }\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./consumeCmdGeo/consumeCmdGeo\"), exports);\n__exportStar(require(\"./consumeCmdProjection/consumeCmdProjection\"), exports);\n// export * from './generateCmdGeo/handleFloorUpdate';\n// export * from './generateCmdGeo/handleFloorCmdNew';\n__exportStar(require(\"./generateCmdGeo/generateCmdGeo\"), exports);\n__exportStar(require(\"./generateCmdProjection/createCmdNotFound\"), exports);\n__exportStar(require(\"./generateCmdProjection/createCmdProjection\"), exports);\n__exportStar(require(\"./saveCmd/decodeCmds\"), exports);\n__exportStar(require(\"./saveCmd/getCmdServId\"), exports);\n__exportStar(require(\"./saveCmd/saveCmdsGenerateGeo\"), exports);\n__exportStar(require(\"./saveCmd/saveCmdsProjectionGeo\"), exports);\n__exportStar(require(\"./saveCmd/getContextGeneration\"), exports);\n__exportStar(require(\"./generateCmdProjection/createCmdProjectionForManualAssing\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './consumeCmdGeo/consumeCmdGeo';\nexport * from './consumeCmdProjection/consumeCmdProjection';\n\n// export * from './generateCmdGeo/handleFloorUpdate';\n// export * from './generateCmdGeo/handleFloorCmdNew';\nexport * from './generateCmdGeo/generateCmdGeo';\n\nexport * from './generateCmdProjection/createCmdNotFound';\nexport * from './generateCmdProjection/createCmdProjection';\n\nexport * from './saveCmd/decodeCmds';\nexport * from './saveCmd/getCmdServId';\nexport * from './saveCmd/saveCmdsGenerateGeo';\nexport * from './saveCmd/saveCmdsProjectionGeo';\nexport * from './saveCmd/getContextGeneration';\n\nexport * from './generateCmdProjection/createCmdProjectionForManualAssing';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.consumeCmdGeo = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst getContextSpatial_1 = require(\"../../utils/getContextSpatial\");\nconst spinal_env_viewer_context_geographic_service_1 = require(\"spinal-env-viewer-context-geographic-service\");\nconst consumeBatch_1 = require(\"../../../utils/consumeBatch\");\nconst updateAttr_1 = require(\"../../utils/archi/updateAttr\");\nconst updateInfo_1 = require(\"../../utils/archi/updateInfo\");\nconst updateInfoByKey_1 = require(\"../../utils/archi/updateInfoByKey\");\nconst graphservice_1 = require(\"../../utils/graphservice\");\nconst waitGetServerId_1 = require(\"../../utils/waitGetServerId\");\nconst getBimContextByBimFileId_1 = require(\"../../utils/getBimContextByBimFileId\");\nconst constant_1 = require(\"../../constant\");\nconst Constant_1 = require(\"../../../Constant\");\nfunction consumeCmdGeo(cmds, nodeGenerationId, contextGenerationId, callbackProg, consumeBatchSize = 20) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const graph = (0, graphservice_1.getGraph)();\n        const contextGeo = yield (0, getContextSpatial_1.getContextSpatial)(graph);\n        const dico = {};\n        recordDico(dico, contextGeo);\n        const buildings = yield contextGeo.getChildrenInContext();\n        buildings.forEach(recordDico.bind(null, dico));\n        for (let index = 0; index < cmds.length; index++) {\n            const cmdArr = cmds[index];\n            const proms = [];\n            for (const cmd of cmdArr) {\n                if (cmd.type === 'floor') {\n                    proms.push(consumeNewUpdateCmd.bind(null, dico, cmd, contextGeo, spinal_env_viewer_context_geographic_service_1.addFloor));\n                }\n                else if (cmd.type === 'floorRef') {\n                    proms.push(consumeNewUpdateRefCmd.bind(null, dico, cmd, spinal_env_viewer_context_geographic_service_1.REFERENCE_RELATION));\n                }\n                else if (cmd.type === 'floorRefDel') {\n                    proms.push(consumeDeleteCmd.bind(null, dico, cmd, spinal_env_viewer_context_geographic_service_1.REFERENCE_RELATION));\n                }\n                else if (cmd.type === 'floorRoomDel') {\n                    proms.push(consumeDeleteCmd.bind(null, dico, cmd, spinal_env_viewer_context_geographic_service_1.ROOM_RELATION, nodeGenerationId, contextGenerationId));\n                }\n                else if (cmd.type === 'room') {\n                    proms.push(consumeNewUpdateCmd.bind(null, dico, cmd, contextGeo, spinal_env_viewer_context_geographic_service_1.addRoom));\n                }\n                else if (cmd.type === 'roomRef') {\n                    proms.push(consumeNewUpdateRefCmd.bind(null, dico, cmd, spinal_env_viewer_context_geographic_service_1.REFERENCE_ROOM_RELATION));\n                }\n                else if (cmd.type === 'roomRefDel') {\n                    proms.push(consumeDeleteCmd.bind(null, dico, cmd, spinal_env_viewer_context_geographic_service_1.REFERENCE_ROOM_RELATION));\n                }\n                else if (cmd.type === 'RefNode') {\n                    proms.push(consumeRefNode.bind(null, dico, cmd, contextGeo));\n                }\n            }\n            yield (0, consumeBatch_1.consumeBatch)(proms, consumeBatchSize, (idx) => {\n                try {\n                    if (callbackProg)\n                        callbackProg(index, idx);\n                }\n                catch (error) {\n                    console.error(error);\n                }\n            });\n        }\n    });\n}\nexports.consumeCmdGeo = consumeCmdGeo;\nfunction getBimContext(dico, bimFileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimContext = dico[bimFileId];\n        if (bimContext)\n            return bimContext;\n        dico[bimFileId] = new Promise((resolve, reject) => {\n            (0, getBimContextByBimFileId_1.getBimContextByBimFileId)(bimFileId, true)\n                .then((bimContext) => resolve(bimContext))\n                .catch(reject);\n        });\n        return dico[bimFileId];\n    });\n}\nfunction consumeRefNode(dico, cmd, contextGeo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (spinal.SHOW_LOG_GENERATION)\n            console.log('consumeRef', cmd);\n        const parentNode = dico[cmd.pNId];\n        if (!parentNode)\n            throw new Error(`ParentId for ${cmd.type} not found.`);\n        // find id in parentChildren\n        const children = yield parentNode.getChildrenInContext(contextGeo);\n        const child = children.find((node) => node.info.id.get() === cmd.id);\n        recordDico(dico, child);\n    });\n}\nfunction consumeDeleteCmd(dico, cmd, relationName, nodeGenerationId, contextGenerationId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (spinal.SHOW_LOG_GENERATION)\n            console.log('consumeDeleteCmd', cmd);\n        const parentNode = dico[cmd.pNId];\n        if (!parentNode)\n            throw new Error(`ParentId for ${cmd.type} not found.`);\n        const childrenNode = yield parentNode.getChildren(relationName);\n        const nodesToDel = [];\n        for (const id of cmd.nIdToDel) {\n            const refChild = childrenNode.find((itm) => itm.info.id.get() === id);\n            if (refChild)\n                nodesToDel.push(refChild);\n        }\n        if (nodesToDel.length > 0) {\n            if (nodeGenerationId) {\n                const contextGeneration = (0, graphservice_1.getRealNode)(contextGenerationId);\n                const nodeGeneration = (0, graphservice_1.getRealNode)(nodeGenerationId);\n                const prom = nodesToDel.map((itm) => {\n                    return nodeGeneration.addChildInContext(itm, constant_1.ARCHIVE_RELATION_NAME, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE, contextGeneration);\n                });\n                yield Promise.all(prom);\n            }\n            yield parentNode.removeChildren(nodesToDel, relationName, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n        }\n    });\n}\nfunction recordDico(dico, node) {\n    dico[node.info.id.get()] = node;\n}\nfunction consumeNewUpdateCmd(dico, cmd, contextGeo, createMtd) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (spinal.SHOW_LOG_GENERATION)\n            console.log('consumeNewUpdateCmd', cmd);\n        const parentNode = dico[cmd.pNId];\n        if (!parentNode)\n            throw new Error(`ParentId for ${cmd.type} not found.`);\n        // find id in parentChildren\n        const children = yield parentNode.getChildrenInContext(contextGeo);\n        let child = children.find((node) => node.info.id.get() === cmd.id);\n        if (!child) {\n            // id not found => create Child\n            child = yield createMtd(contextGeo, parentNode, cmd.name, cmd.id);\n        }\n        // update the floor with cmd!\n        // update info\n        (0, updateInfo_1.updateInfo)(child, cmd.info);\n        yield (0, updateAttr_1.updateAttr)(child, cmd.attr); // update attr\n        if (cmd.name)\n            (0, updateInfoByKey_1.updateInfoByKey)(child, 'name', cmd.name);\n        recordDico(dico, child);\n        yield removeFromContextGen(child);\n        yield (0, waitGetServerId_1.waitGetServerId)(child);\n    });\n}\nfunction removeFromContextGen(roomNode) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const parents = yield roomNode.getParents(constant_1.ARCHIVE_RELATION_NAME);\n        yield Promise.all(parents.map((parent) => {\n            return parent.removeChild(roomNode, constant_1.ARCHIVE_RELATION_NAME, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n        }));\n    });\n}\nfunction createOrUpdateBimObjByBimFileId(dico, id, bimFileId, name, dbId, externalId) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimContext = yield getBimContext(dico, bimFileId);\n        const bimobjs = yield bimContext.getChildren(Constant_1.GEO_EQUIPMENT_RELATION);\n        if (externalId) {\n            for (const bimObj of bimobjs) {\n                if (externalId === ((_a = bimObj.info.externalId) === null || _a === void 0 ? void 0 : _a.get())) {\n                    (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'name', name);\n                    (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'dbid', dbId);\n                    (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'bimFileId', bimFileId);\n                    (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'externalId', externalId);\n                    return bimObj;\n                }\n            }\n        }\n        for (const bimObj of bimobjs) {\n            if (dbId === ((_b = bimObj.info.dbid) === null || _b === void 0 ? void 0 : _b.get())) {\n                (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'name', name);\n                (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'dbid', dbId);\n                (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'bimFileId', bimFileId);\n                (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'externalId', externalId);\n                return bimObj;\n            }\n        }\n        const bimObj = new spinal_model_graph_1.SpinalNode(name, spinal_env_viewer_context_geographic_service_1.EQUIPMENT_TYPE);\n        (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'name', name);\n        (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'id', id);\n        (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'dbid', dbId);\n        (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'bimFileId', bimFileId);\n        (0, updateInfoByKey_1.updateInfoByKey)(bimObj, 'externalId', externalId);\n        return bimContext.addChild(bimObj, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n    });\n}\nfunction consumeNewUpdateRefCmd(dico, cmd, relationName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (spinal.SHOW_LOG_GENERATION)\n            console.log('consumeNewUpdateRefCmd', cmd);\n        const parentNode = dico[cmd.pNId];\n        if (!parentNode)\n            throw new Error(`ParentId for ${cmd.type} not found.`);\n        // find id in parentChildren\n        const children = yield parentNode.getChildren(relationName);\n        let child = children.find((node) => node.info.id.get() === cmd.id);\n        if (!child) {\n            // id not found => create Child\n            child = yield createOrUpdateBimObjByBimFileId(dico, cmd.id, cmd.info.bimFileId, cmd.name, cmd.info.dbid, cmd.info.externalId);\n            for (const c of children) {\n                if (c.info.id.get() === child.info.id.get())\n                    return;\n            }\n            yield parentNode.addChild(child, relationName, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n        }\n        yield (0, waitGetServerId_1.waitGetServerId)(child);\n    });\n}\n//# sourceMappingURL=consumeCmdGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ICmdNew } from '../../interfaces/ICmdNew';\nimport {\n  SpinalNode,\n  SpinalContext,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from 'spinal-model-graph';\nimport { getContextSpatial } from '../../utils/getContextSpatial';\nimport {\n  EQUIPMENT_TYPE,\n  REFERENCE_RELATION,\n  REFERENCE_ROOM_RELATION,\n  ROOM_RELATION,\n  addFloor,\n  addRoom,\n} from 'spinal-env-viewer-context-geographic-service';\nimport { consumeBatch } from '../../../utils/consumeBatch';\nimport { updateAttr } from '../../utils/archi/updateAttr';\nimport { updateInfo } from '../../utils/archi/updateInfo';\nimport { updateInfoByKey } from '../../utils/archi/updateInfoByKey';\nimport { getGraph, getRealNode } from '../../utils/graphservice';\nimport { waitGetServerId } from '../../utils/waitGetServerId';\nimport { getBimContextByBimFileId } from '../../utils/getBimContextByBimFileId';\nimport { ARCHIVE_RELATION_NAME } from '../../constant';\nimport { GEO_EQUIPMENT_RELATION } from '../../../Constant';\n\nexport async function consumeCmdGeo(\n  cmds: ICmdNew[][],\n  nodeGenerationId: string,\n  contextGenerationId: string,\n  callbackProg?: (indexCmd: number, idxInCmd: number) => void,\n  consumeBatchSize = 20\n) {\n  const graph = getGraph();\n  const contextGeo = await getContextSpatial(graph);\n  const dico: Record<string, SpinalNode> = {};\n  recordDico(dico, contextGeo);\n  const buildings = await contextGeo.getChildrenInContext();\n  buildings.forEach(recordDico.bind(null, dico));\n  for (let index = 0; index < cmds.length; index++) {\n    const cmdArr = cmds[index];\n    const proms: (() => Promise<void>)[] = [];\n    for (const cmd of cmdArr) {\n      if (cmd.type === 'floor') {\n        proms.push(\n          consumeNewUpdateCmd.bind(null, dico, cmd, contextGeo, addFloor)\n        );\n      } else if (cmd.type === 'floorRef') {\n        proms.push(\n          consumeNewUpdateRefCmd.bind(null, dico, cmd, REFERENCE_RELATION)\n        );\n      } else if (cmd.type === 'floorRefDel') {\n        proms.push(consumeDeleteCmd.bind(null, dico, cmd, REFERENCE_RELATION));\n      } else if (cmd.type === 'floorRoomDel') {\n        proms.push(\n          consumeDeleteCmd.bind(\n            null,\n            dico,\n            cmd,\n            ROOM_RELATION,\n            nodeGenerationId,\n            contextGenerationId\n          )\n        );\n      } else if (cmd.type === 'room') {\n        proms.push(\n          consumeNewUpdateCmd.bind(null, dico, cmd, contextGeo, addRoom)\n        );\n      } else if (cmd.type === 'roomRef') {\n        proms.push(\n          consumeNewUpdateRefCmd.bind(null, dico, cmd, REFERENCE_ROOM_RELATION)\n        );\n      } else if (cmd.type === 'roomRefDel') {\n        proms.push(\n          consumeDeleteCmd.bind(null, dico, cmd, REFERENCE_ROOM_RELATION)\n        );\n      } else if (cmd.type === 'RefNode') {\n        proms.push(consumeRefNode.bind(null, dico, cmd, contextGeo));\n      }\n    }\n    await consumeBatch(proms, consumeBatchSize, (idx) => {\n      try {\n        if (callbackProg) callbackProg(index, idx);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n}\n\nasync function getBimContext(\n  dico: Record<string, Promise<SpinalNode>>,\n  bimFileId: string\n): Promise<SpinalNode> {\n  const bimContext = dico[bimFileId];\n  if (bimContext) return bimContext;\n  dico[bimFileId] = new Promise((resolve, reject) => {\n    getBimContextByBimFileId(bimFileId, true)\n      .then((bimContext) => resolve(bimContext))\n      .catch(reject);\n  });\n  return dico[bimFileId];\n}\n\nasync function consumeRefNode(\n  dico: Record<string, SpinalNode>,\n  cmd: ICmdNew,\n  contextGeo: SpinalContext\n) {\n  if (spinal.SHOW_LOG_GENERATION) console.log('consumeRef', cmd);\n  const parentNode = dico[cmd.pNId];\n  if (!parentNode) throw new Error(`ParentId for ${cmd.type} not found.`);\n  // find id in parentChildren\n  const children = await parentNode.getChildrenInContext(contextGeo);\n  const child = children.find((node) => node.info.id.get() === cmd.id);\n  recordDico(dico, child);\n}\n\nasync function consumeDeleteCmd(\n  dico: Record<string, SpinalNode>,\n  cmd: ICmdNew,\n  relationName: string,\n  nodeGenerationId?: string,\n  contextGenerationId?: string\n): Promise<void> {\n  if (spinal.SHOW_LOG_GENERATION) console.log('consumeDeleteCmd', cmd);\n  const parentNode = dico[cmd.pNId];\n  if (!parentNode) throw new Error(`ParentId for ${cmd.type} not found.`);\n  const childrenNode = await parentNode.getChildren(relationName);\n  const nodesToDel: SpinalNode[] = [];\n  for (const id of cmd.nIdToDel) {\n    const refChild = childrenNode.find((itm) => itm.info.id.get() === id);\n    if (refChild) nodesToDel.push(refChild);\n  }\n  if (nodesToDel.length > 0) {\n    if (nodeGenerationId) {\n      const contextGeneration = getRealNode(contextGenerationId);\n      const nodeGeneration = getRealNode(nodeGenerationId);\n      const prom = nodesToDel.map((itm) => {\n        return nodeGeneration.addChildInContext(\n          itm,\n          ARCHIVE_RELATION_NAME,\n          SPINAL_RELATION_PTR_LST_TYPE,\n          contextGeneration\n        );\n      });\n      await Promise.all(prom);\n    }\n    await parentNode.removeChildren(\n      nodesToDel,\n      relationName,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n  }\n}\n\nfunction recordDico(dico: Record<string, SpinalNode>, node: SpinalNode): void {\n  dico[node.info.id.get()] = node;\n}\n\nasync function consumeNewUpdateCmd(\n  dico: Record<string, SpinalNode>,\n  cmd: ICmdNew,\n  contextGeo: SpinalContext,\n  createMtd: typeof addFloor | typeof addRoom\n) {\n  if (spinal.SHOW_LOG_GENERATION) console.log('consumeNewUpdateCmd', cmd);\n  const parentNode = dico[cmd.pNId];\n  if (!parentNode) throw new Error(`ParentId for ${cmd.type} not found.`);\n  // find id in parentChildren\n  const children = await parentNode.getChildrenInContext(contextGeo);\n  let child = children.find((node) => node.info.id.get() === cmd.id);\n  if (!child) {\n    // id not found => create Child\n    child = await createMtd(contextGeo, parentNode, cmd.name, cmd.id);\n  }\n  // update the floor with cmd!\n  // update info\n  updateInfo(child, cmd.info);\n  await updateAttr(child, cmd.attr); // update attr\n  if (cmd.name) updateInfoByKey(child, 'name', cmd.name);\n  recordDico(dico, child);\n  await removeFromContextGen(child);\n  await waitGetServerId(child);\n}\n\nasync function removeFromContextGen(roomNode: SpinalNode) {\n  const parents = await roomNode.getParents(ARCHIVE_RELATION_NAME);\n  await Promise.all(\n    parents.map((parent) => {\n      return parent.removeChild(\n        roomNode,\n        ARCHIVE_RELATION_NAME,\n        SPINAL_RELATION_PTR_LST_TYPE\n      );\n    })\n  );\n}\n\nasync function createOrUpdateBimObjByBimFileId(\n  dico: Record<string, SpinalNode>,\n  id: string,\n  bimFileId: string,\n  name: string,\n  dbId: number,\n  externalId?: string\n): Promise<SpinalNode> {\n  const bimContext = await getBimContext(<any>dico, bimFileId);\n  const bimobjs = await bimContext.getChildren(GEO_EQUIPMENT_RELATION);\n  if (externalId) {\n    for (const bimObj of bimobjs) {\n      if (externalId === bimObj.info.externalId?.get()) {\n        updateInfoByKey(bimObj, 'name', name);\n        updateInfoByKey(bimObj, 'dbid', dbId);\n        updateInfoByKey(bimObj, 'bimFileId', bimFileId);\n        updateInfoByKey(bimObj, 'externalId', externalId);\n        return bimObj;\n      }\n    }\n  }\n  for (const bimObj of bimobjs) {\n    if (dbId === bimObj.info.dbid?.get()) {\n      updateInfoByKey(bimObj, 'name', name);\n      updateInfoByKey(bimObj, 'dbid', dbId);\n      updateInfoByKey(bimObj, 'bimFileId', bimFileId);\n      updateInfoByKey(bimObj, 'externalId', externalId);\n      return bimObj;\n    }\n  }\n\n  const bimObj = new SpinalNode(name, EQUIPMENT_TYPE);\n  updateInfoByKey(bimObj, 'name', name);\n  updateInfoByKey(bimObj, 'id', id);\n  updateInfoByKey(bimObj, 'dbid', dbId);\n  updateInfoByKey(bimObj, 'bimFileId', bimFileId);\n  updateInfoByKey(bimObj, 'externalId', externalId);\n\n  return bimContext.addChild(\n    bimObj,\n    GEO_EQUIPMENT_RELATION,\n    SPINAL_RELATION_PTR_LST_TYPE\n  );\n}\n\nasync function consumeNewUpdateRefCmd(\n  dico: Record<string, SpinalNode>,\n  cmd: ICmdNew,\n  relationName: string\n) {\n  if (spinal.SHOW_LOG_GENERATION) console.log('consumeNewUpdateRefCmd', cmd);\n  const parentNode = dico[cmd.pNId];\n  if (!parentNode) throw new Error(`ParentId for ${cmd.type} not found.`);\n  // find id in parentChildren\n  const children = await parentNode.getChildren(relationName);\n  let child = children.find((node) => node.info.id.get() === cmd.id);\n  if (!child) {\n    // id not found => create Child\n    child = await createOrUpdateBimObjByBimFileId(\n      dico,\n      cmd.id,\n      cmd.info.bimFileId,\n      cmd.name,\n      cmd.info.dbid,\n      cmd.info.externalId\n    );\n    for (const c of children) {\n      if (c.info.id.get() === child.info.id.get()) return;\n    }\n    await parentNode.addChild(\n      child,\n      relationName,\n      SPINAL_RELATION_PTR_LST_TYPE\n    );\n  }\n  await waitGetServerId(child);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.consumeCmdProjection = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst utils_1 = require(\"../../utils\");\nconst Constant_1 = require(\"../../../Constant\");\nconst spinal_env_viewer_context_geographic_service_1 = require(\"spinal-env-viewer-context-geographic-service\");\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst consumeBatch_1 = require(\"../../../utils/consumeBatch\");\nconst lodash_throttle_1 = __importDefault(require(\"lodash.throttle\"));\nfunction consumeCmdProjection(cmds, nodeId, contextId, callbackProg, consumeBatchSize = 20) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const contextGeneration = (0, utils_1.getRealNode)(contextId);\n        const nodeGeneration = (0, utils_1.getRealNode)(nodeId);\n        const warnNodeGen = getOrCreateGenOutNode(contextGeneration, nodeGeneration, 'warn');\n        const errorNodeGen = getOrCreateGenOutNode(contextGeneration, nodeGeneration, 'error');\n        const dico = {};\n        const graph = (0, utils_1.getGraph)();\n        const contextGeo = yield (0, utils_1.getContextSpatial)(graph);\n        const cb = (0, lodash_throttle_1.default)(callbackProg, 100);\n        recordDico(dico, contextGeo);\n        yield contextGeo.find([\n            Constant_1.GEO_SITE_RELATION,\n            Constant_1.GEO_BUILDING_RELATION,\n            Constant_1.GEO_FLOOR_RELATION,\n            Constant_1.GEO_ROOM_RELATION,\n            Constant_1.GEO_ZONE_RELATION,\n        ], (node) => {\n            if (node.info.type.get() === Constant_1.GEO_ROOM_TYPE) {\n                recordDico(dico, node);\n                return true;\n            }\n            return false;\n        });\n        if (callbackProg)\n            callbackProg(10);\n        const totalIteration = cmds.reduce((acc, cmd) => {\n            return acc + cmd.data.length;\n        }, 0);\n        const proms = [];\n        let totalIt = 0;\n        for (let idx = 0; idx < cmds.length; idx++) {\n            const cmd = cmds[idx];\n            const bimContext = yield getBimContext(dico, cmd.bimFileId);\n            const bimobjs = yield bimContext.getChildren(Constant_1.GEO_EQUIPMENT_RELATION);\n            if (isCmdProj(cmd)) {\n                proms.push(consumeCmdProj.bind(this, dico, cmd, contextGeo, () => {\n                    cb((++totalIt / totalIteration) * 90 + 10);\n                }, bimContext, bimobjs, warnNodeGen, contextGeneration));\n            }\n            else {\n                proms.push(consumeCmdMissingProj.bind(this, errorNodeGen, contextGeo, cmd, bimContext, bimobjs, contextGeneration, () => {\n                    cb((++totalIt / totalIteration) * 90 + 10);\n                }));\n            }\n        }\n        yield (0, consumeBatch_1.consumeBatch)(proms, consumeBatchSize);\n    });\n}\nexports.consumeCmdProjection = consumeCmdProjection;\nfunction getOrCreateGenOutNode(contextGeneration, nodeGeneration, type) {\n    return __asyncGenerator(this, arguments, function* getOrCreateGenOutNode_1() {\n        let resNode;\n        const nodes = yield __await(nodeGeneration.getChildrenInContext(contextGeneration));\n        for (const node of nodes) {\n            if (type === 'warn' && node.info.name.get() === 'warn') {\n                resNode = node;\n            }\n            else if (type === 'error' && node.info.name.get() === 'error') {\n                resNode = node;\n            }\n        }\n        if (!resNode) {\n            resNode = new spinal_model_graph_1.SpinalNode(type, `GenerationContextType`);\n            nodeGeneration.addChildInContext(resNode, 'hasGenerationContextType', spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE, contextGeneration);\n        }\n        const children = yield __await(resNode.getChildrenInContext(contextGeneration));\n        while (true)\n            yield yield __await({ node: resNode, children });\n    });\n}\nfunction consumeCmdMissingProj(errorGen, contextGeo, cmd, bimContext, bimobjs, contextGeneration, callbackProg) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (spinal.SHOW_LOG_GENERATION)\n            console.log('consumeCmdMissingProj', cmd);\n        const nodeGeneration = (yield errorGen.next()).value;\n        for (const obj of cmd.data) {\n            if (spinal.SHOW_LOG_GENERATION)\n                console.log(' => ', obj);\n            let child = nodeGeneration.children.find((node) => node.info.externalId.get() === obj.externalId);\n            if (child) {\n                updateBimObjInfo(child, obj.name, obj.dbid, cmd.bimFileId, obj.externalId);\n            }\n            else {\n                child = yield createOrUpdateBimObj(bimContext, bimobjs, cmd.bimFileId, obj.name, obj.dbid, obj.externalId);\n                yield nodeGeneration.node.addChildInContext(child, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE, contextGeneration);\n                yield updateRevitCategory(child, obj.revitCat, obj.centerPos);\n            }\n            yield removeOtherParents(child, contextGeo, '');\n            yield removeOtherParents(child, contextGeneration, nodeGeneration.node.info.id.get());\n            yield (0, utils_1.waitGetServerId)(child);\n            if (callbackProg)\n                callbackProg();\n        }\n    });\n}\nfunction consumeCmdProj(dico, cmd, contextGeo, callbackProg, bimContext, bimobjs, warnGen, contextGeneration) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (spinal.SHOW_LOG_GENERATION)\n            console.log('consumeCmdProj', cmd);\n        const parentNode = yield getFromDico(dico, cmd.pNId);\n        if (!parentNode)\n            throw new Error(`ParentId for ${cmd.type} not found.`);\n        const children = yield parentNode.getChildrenInContext(contextGeo);\n        for (const obj of cmd.data) {\n            if (spinal.SHOW_LOG_GENERATION)\n                console.log(' => ', obj);\n            let child = children.find((node) => node.info.externalId.get() === obj.externalId);\n            if (child) {\n                updateBimObjInfo(child, obj.name, obj.dbid, cmd.bimFileId, obj.externalId);\n            }\n            else {\n                child = yield createOrUpdateBimObj(bimContext, bimobjs, cmd.bimFileId, obj.name, obj.dbid, obj.externalId);\n                yield parentNode.addChildInContext(child, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE, contextGeo);\n            }\n            yield removeOtherParents(child, contextGeo, parentNode.info.id.get());\n            yield removeOtherParents(child, contextGeneration, '');\n            yield updateRevitCategory(child, obj.revitCat, obj.centerPos);\n            if (obj.flagWarining) {\n                const nodeGeneration = (yield warnGen.next()).value;\n                let childGen = nodeGeneration.children.find((node) => node.info.externalId.get() === obj.externalId);\n                if (!childGen) {\n                    childGen = yield createOrUpdateBimObj(bimContext, bimobjs, cmd.bimFileId, obj.name, obj.dbid, obj.externalId);\n                    yield nodeGeneration.node.addChildInContext(childGen, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE, contextGeneration);\n                }\n                yield removeOtherParents(child, contextGeneration, nodeGeneration.node.info.id.get());\n            }\n            yield (0, utils_1.waitGetServerId)(child);\n            if (callbackProg)\n                callbackProg();\n        }\n    });\n}\nfunction updateRevitCategory(child, revitCat, centerPos) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!revitCat)\n            return;\n        let cat = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategoryByName(child, 'Spatial');\n        if (!cat) {\n            cat = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.addCategoryAttribute(child, 'Spatial');\n        }\n        const attrsFromNode = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(child, cat);\n        const revitCatAttr = attrsFromNode.find((itm) => itm.label.get() === 'revit_category');\n        if (revitCatAttr) {\n            revitCatAttr.value.set(revitCat);\n        }\n        else {\n            spinal_env_viewer_plugin_documentation_service_1.attributeService.addAttributeByCategory(child, cat, 'revit_category', revitCat, '', '');\n        }\n        if (centerPos) {\n            const centerPosAttr = attrsFromNode.find((itm) => itm.label.get() === 'XYZ center');\n            if (centerPosAttr) {\n                centerPosAttr.value.set(centerPos);\n            }\n            else {\n                spinal_env_viewer_plugin_documentation_service_1.attributeService.addAttributeByCategory(child, cat, 'XYZ center', centerPos, '', '');\n            }\n        }\n    });\n}\nfunction removeOtherParents(child, context, parentNodeId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const parents = yield child.getParentsInContext(context);\n        const toRm = [];\n        try {\n            for (const otherParent of parents) {\n                if (otherParent.info.id.get() !== parentNodeId) {\n                    toRm.push(otherParent);\n                }\n            }\n            for (const obj of toRm) {\n                if ((_a = obj.children.LstPtr) === null || _a === void 0 ? void 0 : _a[Constant_1.GEO_EQUIPMENT_RELATION]) {\n                    try {\n                        yield obj.removeChild(child, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_LST_PTR_TYPE);\n                    }\n                    catch (e) {\n                        yield obj.removeChild(child, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n                    }\n                }\n                else {\n                    yield obj.removeChild(child, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n            console.log('trying to removeOtherParents', {\n                child,\n                context,\n                parentNodeId,\n            });\n        }\n    });\n}\nfunction recordDico(dico, node) {\n    dico[node.info.id.get()] = Promise.resolve(node);\n}\nfunction getFromDico(dico, id) {\n    return dico[id];\n}\nfunction isCmdProj(item) {\n    return item.type === 'CmdProjection';\n}\nfunction getBimContext(dico, bimFileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimContext = getFromDico(dico, bimFileId);\n        if (bimContext)\n            return bimContext;\n        dico[bimFileId] = new Promise((resolve, reject) => {\n            (0, utils_1.getBimContextByBimFileId)(bimFileId, true)\n                .then((bimContext) => resolve(bimContext))\n                .catch(reject);\n        });\n        return getFromDico(dico, bimFileId);\n    });\n}\nfunction createOrUpdateBimObj(bimContext, bimobjs, bimFileId, name, dbid, externalId) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        if (externalId) {\n            for (const bimObj of bimobjs) {\n                if (externalId === ((_a = bimObj.info.externalId) === null || _a === void 0 ? void 0 : _a.get())) {\n                    updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId);\n                    return bimObj;\n                }\n            }\n        }\n        for (const bimObj of bimobjs) {\n            if (dbid === ((_b = bimObj.info.dbid) === null || _b === void 0 ? void 0 : _b.get())) {\n                updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId);\n                return bimObj;\n            }\n        }\n        const bimObj = new spinal_model_graph_1.SpinalNode(name, spinal_env_viewer_context_geographic_service_1.EQUIPMENT_TYPE);\n        updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId);\n        return bimContext.addChild(bimObj, Constant_1.GEO_EQUIPMENT_RELATION, spinal_model_graph_1.SPINAL_RELATION_PTR_LST_TYPE);\n    });\n}\nfunction updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId) {\n    (0, utils_1.updateInfoByKey)(bimObj, 'name', name);\n    (0, utils_1.updateInfoByKey)(bimObj, 'dbid', dbid);\n    (0, utils_1.updateInfoByKey)(bimObj, 'bimFileId', bimFileId);\n    (0, utils_1.updateInfoByKey)(bimObj, 'externalId', externalId);\n}\n//# sourceMappingURL=consumeCmdProjection.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ICmdProjection } from '../../interfaces/ICmdProjection';\nimport type { ICmdMissing } from '../../interfaces/ICmdMissing';\nimport {\n  SPINAL_RELATION_PTR_LST_TYPE,\n  type SpinalContext,\n  SpinalNode,\n  SPINAL_RELATION_LST_PTR_TYPE,\n} from 'spinal-model-graph';\nimport {\n  getBimContextByBimFileId,\n  getContextSpatial,\n  getGraph,\n  getRealNode,\n  updateInfoByKey,\n  waitGetServerId,\n} from '../../utils';\nimport {\n  GEO_BUILDING_RELATION,\n  GEO_EQUIPMENT_RELATION,\n  GEO_FLOOR_RELATION,\n  GEO_ROOM_RELATION,\n  GEO_ROOM_TYPE,\n  GEO_SITE_RELATION,\n  GEO_ZONE_RELATION,\n} from '../../../Constant';\nimport { EQUIPMENT_TYPE } from 'spinal-env-viewer-context-geographic-service';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport { consumeBatch } from '../../../utils/consumeBatch';\nimport throttle from 'lodash.throttle';\ntype RecordSpinalNode = Record<string, Promise<SpinalNode>>;\ntype TAsyncGenNodeGeneration = AsyncGenerator<\n  {\n    node: SpinalNode;\n    children: SpinalNode[];\n  },\n  never,\n  never\n>;\n\nexport async function consumeCmdProjection(\n  cmds: (ICmdMissing | ICmdProjection)[],\n  nodeId: string,\n  contextId: string,\n  callbackProg?: (index: number) => void,\n  consumeBatchSize = 20\n): Promise<void> {\n  const contextGeneration = getRealNode(contextId);\n  const nodeGeneration = getRealNode(nodeId);\n  const warnNodeGen = getOrCreateGenOutNode(\n    contextGeneration,\n    nodeGeneration,\n    'warn'\n  );\n  const errorNodeGen = getOrCreateGenOutNode(\n    contextGeneration,\n    nodeGeneration,\n    'error'\n  );\n  const dico: RecordSpinalNode = {};\n  const graph = getGraph();\n  const contextGeo = await getContextSpatial(graph);\n  const cb = throttle(callbackProg, 100);\n  recordDico(dico, contextGeo);\n  await contextGeo.find(\n    [\n      GEO_SITE_RELATION,\n      GEO_BUILDING_RELATION,\n      GEO_FLOOR_RELATION,\n      GEO_ROOM_RELATION,\n      GEO_ZONE_RELATION,\n    ],\n    (node) => {\n      if (node.info.type.get() === GEO_ROOM_TYPE) {\n        recordDico(dico, node);\n        return true;\n      }\n      return false;\n    }\n  );\n  if (callbackProg) callbackProg(10);\n  const totalIteration = cmds.reduce((acc, cmd) => {\n    return acc + cmd.data.length;\n  }, 0);\n  const proms: (() => Promise<void>)[] = [];\n  let totalIt = 0;\n  for (let idx = 0; idx < cmds.length; idx++) {\n    const cmd = cmds[idx];\n    const bimContext = await getBimContext(dico, cmd.bimFileId);\n    const bimobjs = await bimContext.getChildren(GEO_EQUIPMENT_RELATION);\n    if (isCmdProj(cmd)) {\n      proms.push(\n        consumeCmdProj.bind(\n          this,\n          dico,\n          cmd,\n          contextGeo,\n          () => {\n            cb((++totalIt / totalIteration) * 90 + 10);\n          },\n          bimContext,\n          bimobjs,\n          warnNodeGen,\n          contextGeneration\n        )\n      );\n    } else {\n      proms.push(\n        consumeCmdMissingProj.bind(\n          this,\n          errorNodeGen,\n          contextGeo,\n          cmd,\n          bimContext,\n          bimobjs,\n          contextGeneration,\n          () => {\n            cb((++totalIt / totalIteration) * 90 + 10);\n          }\n        )\n      );\n    }\n  }\n  await consumeBatch(proms, consumeBatchSize);\n}\n\nasync function* getOrCreateGenOutNode(\n  contextGeneration: SpinalContext,\n  nodeGeneration: SpinalNode,\n  type: 'warn' | 'error'\n): TAsyncGenNodeGeneration {\n  let resNode: SpinalNode;\n  const nodes = await nodeGeneration.getChildrenInContext(contextGeneration);\n  for (const node of nodes) {\n    if (type === 'warn' && node.info.name.get() === 'warn') {\n      resNode = node;\n    } else if (type === 'error' && node.info.name.get() === 'error') {\n      resNode = node;\n    }\n  }\n  if (!resNode) {\n    resNode = new SpinalNode(type, `GenerationContextType`);\n    nodeGeneration.addChildInContext(\n      resNode,\n      'hasGenerationContextType',\n      SPINAL_RELATION_PTR_LST_TYPE,\n      contextGeneration\n    );\n  }\n  const children = await resNode.getChildrenInContext(contextGeneration);\n  while (true) yield { node: resNode, children };\n}\n\nasync function consumeCmdMissingProj(\n  errorGen: TAsyncGenNodeGeneration,\n  contextGeo: SpinalContext,\n  cmd: ICmdMissing,\n  bimContext: SpinalNode,\n  bimobjs: SpinalNode[],\n  contextGeneration: SpinalContext,\n  callbackProg: () => void\n) {\n  if (spinal.SHOW_LOG_GENERATION) console.log('consumeCmdMissingProj', cmd);\n  const nodeGeneration = (await errorGen.next()).value;\n  for (const obj of cmd.data) {\n    if (spinal.SHOW_LOG_GENERATION) console.log(' => ', obj);\n    let child = nodeGeneration.children.find(\n      (node) => node.info.externalId.get() === obj.externalId\n    );\n    if (child) {\n      updateBimObjInfo(\n        child,\n        obj.name,\n        obj.dbid,\n        cmd.bimFileId,\n        obj.externalId\n      );\n    } else {\n      child = await createOrUpdateBimObj(\n        bimContext,\n        bimobjs,\n        cmd.bimFileId,\n        obj.name,\n        obj.dbid,\n        obj.externalId\n      );\n      await nodeGeneration.node.addChildInContext(\n        child,\n        GEO_EQUIPMENT_RELATION,\n        SPINAL_RELATION_PTR_LST_TYPE,\n        contextGeneration\n      );\n      await updateRevitCategory(child, obj.revitCat, obj.centerPos);\n    }\n    await removeOtherParents(child, contextGeo, '');\n    await removeOtherParents(\n      child,\n      contextGeneration,\n      nodeGeneration.node.info.id.get()\n    );\n    await waitGetServerId(child);\n    if (callbackProg) callbackProg();\n  }\n}\n\nasync function consumeCmdProj(\n  dico: RecordSpinalNode,\n  cmd: ICmdProjection,\n  contextGeo: SpinalContext,\n  callbackProg: () => void,\n  bimContext: SpinalNode,\n  bimobjs: SpinalNode[],\n  warnGen: TAsyncGenNodeGeneration,\n  contextGeneration: SpinalContext\n) {\n  if (spinal.SHOW_LOG_GENERATION) console.log('consumeCmdProj', cmd);\n\n  const parentNode = await getFromDico(dico, cmd.pNId);\n  if (!parentNode) throw new Error(`ParentId for ${cmd.type} not found.`);\n  const children = await parentNode.getChildrenInContext(contextGeo);\n  for (const obj of cmd.data) {\n    if (spinal.SHOW_LOG_GENERATION) console.log(' => ', obj);\n    let child = children.find(\n      (node) => node.info.externalId.get() === obj.externalId\n    );\n    if (child) {\n      updateBimObjInfo(\n        child,\n        obj.name,\n        obj.dbid,\n        cmd.bimFileId,\n        obj.externalId\n      );\n    } else {\n      child = await createOrUpdateBimObj(\n        bimContext,\n        bimobjs,\n        cmd.bimFileId,\n        obj.name,\n        obj.dbid,\n        obj.externalId\n      );\n      await parentNode.addChildInContext(\n        child,\n        GEO_EQUIPMENT_RELATION,\n        SPINAL_RELATION_PTR_LST_TYPE,\n        contextGeo\n      );\n    }\n    await removeOtherParents(child, contextGeo, parentNode.info.id.get());\n    await removeOtherParents(child, contextGeneration, '');\n    await updateRevitCategory(child, obj.revitCat, obj.centerPos);\n    if (obj.flagWarining) {\n      const nodeGeneration = (await warnGen.next()).value;\n      let childGen = nodeGeneration.children.find(\n        (node) => node.info.externalId.get() === obj.externalId\n      );\n      if (!childGen) {\n        childGen = await createOrUpdateBimObj(\n          bimContext,\n          bimobjs,\n          cmd.bimFileId,\n          obj.name,\n          obj.dbid,\n          obj.externalId\n        );\n        await nodeGeneration.node.addChildInContext(\n          childGen,\n          GEO_EQUIPMENT_RELATION,\n          SPINAL_RELATION_PTR_LST_TYPE,\n          contextGeneration\n        );\n      }\n      await removeOtherParents(\n        child,\n        contextGeneration,\n        nodeGeneration.node.info.id.get()\n      );\n    }\n    await waitGetServerId(child);\n    if (callbackProg) callbackProg();\n  }\n}\n\nasync function updateRevitCategory(\n  child: SpinalNode,\n  revitCat: string,\n  centerPos: string\n) {\n  if (!revitCat) return;\n  let cat = await attributeService.getCategoryByName(child, 'Spatial');\n  if (!cat) {\n    cat = await attributeService.addCategoryAttribute(child, 'Spatial');\n  }\n  const attrsFromNode = await attributeService.getAttributesByCategory(\n    child,\n    cat\n  );\n  const revitCatAttr = attrsFromNode.find(\n    (itm) => itm.label.get() === 'revit_category'\n  );\n  if (revitCatAttr) {\n    revitCatAttr.value.set(revitCat);\n  } else {\n    attributeService.addAttributeByCategory(\n      child,\n      cat,\n      'revit_category',\n      revitCat,\n      '',\n      ''\n    );\n  }\n  if (centerPos) {\n    const centerPosAttr = attrsFromNode.find(\n      (itm) => itm.label.get() === 'XYZ center'\n    );\n    if (centerPosAttr) {\n      centerPosAttr.value.set(centerPos);\n    } else {\n      attributeService.addAttributeByCategory(\n        child,\n        cat,\n        'XYZ center',\n        centerPos,\n        '',\n        ''\n      );\n    }\n  }\n}\n\nasync function removeOtherParents(\n  child: SpinalNode,\n  context: SpinalContext,\n  parentNodeId: string\n) {\n  const parents = await child.getParentsInContext(context);\n  const toRm: SpinalNode[] = [];\n  try {\n    for (const otherParent of parents) {\n      if (otherParent.info.id.get() !== parentNodeId) {\n        toRm.push(otherParent);\n      }\n    }\n    for (const obj of toRm) {\n      if (obj.children.LstPtr?.[GEO_EQUIPMENT_RELATION]) {\n        try {\n          await obj.removeChild(\n            child,\n            GEO_EQUIPMENT_RELATION,\n            SPINAL_RELATION_LST_PTR_TYPE\n          );\n        } catch (e) {\n          await obj.removeChild(\n            child,\n            GEO_EQUIPMENT_RELATION,\n            SPINAL_RELATION_PTR_LST_TYPE\n          );\n        }\n      } else {\n        await obj.removeChild(\n          child,\n          GEO_EQUIPMENT_RELATION,\n          SPINAL_RELATION_PTR_LST_TYPE\n        );\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    console.log('trying to removeOtherParents', {\n      child,\n      context,\n      parentNodeId,\n    });\n  }\n}\n\nfunction recordDico(dico: RecordSpinalNode, node: SpinalNode): void {\n  dico[node.info.id.get()] = Promise.resolve(node);\n}\nfunction getFromDico(dico: RecordSpinalNode, id: string): Promise<SpinalNode> {\n  return dico[id];\n}\n\nfunction isCmdProj(item: ICmdMissing | ICmdProjection): item is ICmdProjection {\n  return item.type === 'CmdProjection';\n}\nasync function getBimContext(dico: RecordSpinalNode, bimFileId: string) {\n  const bimContext = getFromDico(dico, bimFileId);\n  if (bimContext) return bimContext;\n  dico[bimFileId] = new Promise((resolve, reject) => {\n    getBimContextByBimFileId(bimFileId, true)\n      .then((bimContext) => resolve(bimContext))\n      .catch(reject);\n  });\n  return getFromDico(dico, bimFileId);\n}\n\nasync function createOrUpdateBimObj(\n  bimContext: SpinalContext,\n  bimobjs: SpinalNode[],\n  bimFileId: string,\n  name: string,\n  dbid: number,\n  externalId?: string\n): Promise<SpinalNode> {\n  if (externalId) {\n    for (const bimObj of bimobjs) {\n      if (externalId === bimObj.info.externalId?.get()) {\n        updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId);\n        return bimObj;\n      }\n    }\n  }\n  for (const bimObj of bimobjs) {\n    if (dbid === bimObj.info.dbid?.get()) {\n      updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId);\n      return bimObj;\n    }\n  }\n\n  const bimObj = new SpinalNode(name, EQUIPMENT_TYPE);\n  updateBimObjInfo(bimObj, name, dbid, bimFileId, externalId);\n\n  return bimContext.addChild(\n    bimObj,\n    GEO_EQUIPMENT_RELATION,\n    SPINAL_RELATION_PTR_LST_TYPE\n  );\n}\nfunction updateBimObjInfo(\n  bimObj: SpinalNode,\n  name: string,\n  dbid: number,\n  bimFileId: string,\n  externalId: string\n) {\n  updateInfoByKey(bimObj, 'name', name);\n  updateInfoByKey(bimObj, 'dbid', dbid);\n  updateInfoByKey(bimObj, 'bimFileId', bimFileId);\n  updateInfoByKey(bimObj, 'externalId', externalId);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateCmdGeo = void 0;\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst IGetArchi_1 = require(\"../../interfaces/IGetArchi\");\nconst getModType_1 = require(\"../../utils/archi/getModType\");\nconst isInSkipList_1 = require(\"../../utils/archi/isInSkipList\");\nconst handleFloorCmdNew_1 = require(\"./handleFloorCmdNew\");\nconst handleFloorUpdate_1 = require(\"./handleFloorUpdate\");\nconst spinal_env_viewer_context_geographic_service_1 = require(\"spinal-env-viewer-context-geographic-service\");\nfunction generateCmdGeo(data, skipList, buildingServerId, bimFileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const dataToDo = [];\n        const buildingNode = spinal_core_connectorjs_1.FileSystem._objects[buildingServerId];\n        const refContext = yield (0, spinal_env_viewer_context_geographic_service_1.getOrCreateRefContext)(spinal_env_viewer_context_geographic_service_1.ROOM_REFERENCE_CONTEXT);\n        for (const floorData of data) {\n            if ((0, isInSkipList_1.isInSkipList)(skipList, floorData.floorArchi.properties.externalId))\n                continue;\n            switch ((0, getModType_1.getModType)(floorData.floorArchi.properties.modificationType)) {\n                case IGetArchi_1.EModificationType.update:\n                case IGetArchi_1.EModificationType.none:\n                    if (!floorData.diff) {\n                        console.warn(`${floorData.floorArchi.properties.externalId} got update modification type but no Diff object`);\n                    }\n                    else {\n                        yield (0, handleFloorUpdate_1.handleFloorUpdate)(floorData, buildingNode, dataToDo, skipList, bimFileId, refContext);\n                    }\n                    break;\n                case IGetArchi_1.EModificationType.create:\n                    yield (0, handleFloorCmdNew_1.handleFloorCmdNew)(floorData, buildingNode, bimFileId, dataToDo, skipList, refContext);\n                    break;\n                default:\n                    // do nothing | no delete floor\n                    break;\n            }\n        }\n        return dataToDo;\n    });\n}\nexports.generateCmdGeo = generateCmdGeo;\n//# sourceMappingURL=generateCmdGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport type { IFloorData } from '../../interfaces/IFloorData';\nimport type { ISkipItem } from '../../interfaces/ISkipItem';\nimport type { ICmdNew } from '../../interfaces/ICmdNew';\nimport { FileSystem } from 'spinal-core-connectorjs';\nimport { EModificationType } from '../../interfaces/IGetArchi';\nimport { getModType } from '../../utils/archi/getModType';\nimport { isInSkipList } from '../../utils/archi/isInSkipList';\nimport { handleFloorCmdNew } from './handleFloorCmdNew';\nimport { handleFloorUpdate } from './handleFloorUpdate';\nimport {\n  ROOM_REFERENCE_CONTEXT,\n  getOrCreateRefContext,\n} from 'spinal-env-viewer-context-geographic-service';\n\nexport async function generateCmdGeo(\n  data: IFloorData[],\n  skipList: ISkipItem[],\n  buildingServerId: number,\n  bimFileId: string\n) {\n  const dataToDo: ICmdNew[][] = [];\n  const buildingNode = <SpinalNode>FileSystem._objects[buildingServerId];\n  const refContext = await getOrCreateRefContext(ROOM_REFERENCE_CONTEXT);\n\n  for (const floorData of data) {\n    if (isInSkipList(skipList, floorData.floorArchi.properties.externalId))\n      continue;\n\n    switch (getModType(floorData.floorArchi.properties.modificationType)) {\n      case EModificationType.update:\n      case EModificationType.none:\n        if (!floorData.diff) {\n          console.warn(\n            `${floorData.floorArchi.properties.externalId} got update modification type but no Diff object`\n          );\n        } else {\n          await handleFloorUpdate(\n            floorData,\n            buildingNode,\n            dataToDo,\n            skipList,\n            bimFileId,\n            refContext\n          );\n        }\n        break;\n      case EModificationType.create:\n        await handleFloorCmdNew(\n          floorData,\n          buildingNode,\n          bimFileId,\n          dataToDo,\n          skipList,\n          refContext\n        );\n        break;\n      default:\n        // do nothing | no delete floor\n        break;\n    }\n  }\n  return dataToDo;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRefCmd = exports.getRoomCmd = exports.getRoomFromRefByName = exports.handleFloorCmdNew = void 0;\nconst transformArchi_1 = require(\"../../scripts/transformArchi\");\nconst guid_1 = require(\"../../utils/guid\");\nconst isInSkipList_1 = require(\"../../utils/archi/isInSkipList\");\nconst Constant_1 = require(\"../../../Constant\");\nfunction handleFloorCmdNew(floorData, buildingNode, bimFileId, dataToDo, skipList, refContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const floorCmd = getFloorCmdNew(floorData, buildingNode, bimFileId);\n        dataToDo.push([floorCmd]);\n        // floor ref structs\n        const floorRefCmds = getFloorRefCmdNew(floorData.floorArchi.structures, floorCmd.id, bimFileId, 'floorRef');\n        // rooms\n        const { roomCmds, roomRefCmds } = yield getFloorRoomsCmdNew(floorData, floorCmd, bimFileId, skipList, refContext);\n        const floorRefAndRoomCmds = floorRefCmds.concat(roomCmds);\n        if (floorRefAndRoomCmds.length > 0)\n            dataToDo.push(floorRefAndRoomCmds);\n        if (roomRefCmds.length > 0)\n            dataToDo.push(roomRefCmds);\n    });\n}\nexports.handleFloorCmdNew = handleFloorCmdNew;\nfunction getFloorRoomsCmdNew(floorData, floorCmd, bimFileId, skipList, refContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const roomCmds = [];\n        const roomRefCmds = [];\n        for (const floorExtId in floorData.floorArchi.children) {\n            if (Object.prototype.hasOwnProperty.call(floorData.floorArchi.children, floorExtId)) {\n                const roomArchi = floorData.floorArchi.children[floorExtId];\n                if ((0, isInSkipList_1.isInSkipList)(skipList, roomArchi.properties.externalId))\n                    continue;\n                yield getRoomCmd(roomArchi, floorCmd.id, bimFileId, roomCmds, roomRefCmds, refContext);\n            }\n        }\n        return { roomCmds, roomRefCmds };\n    });\n}\nfunction getRoomFromRefByName(refContext, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const children = yield refContext.getChildren(Constant_1.GEO_ROOM_RELATION);\n        for (const child of children) {\n            if (child.info.name.get() === name)\n                return child;\n        }\n    });\n}\nexports.getRoomFromRefByName = getRoomFromRefByName;\nfunction getRoomCmd(roomArchi, pNId, bimFileId, roomCmds, roomRefCmds, refContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let name = '';\n        let number = undefined;\n        const attr = roomArchi.properties.properties.map((itm) => {\n            if (itm.name === 'name')\n                name = itm.value;\n            if (itm.name === 'number')\n                number = itm.value;\n            return {\n                label: itm.name,\n                value: itm.value,\n                unit: (0, transformArchi_1.parseUnit)(itm.dataTypeContext),\n            };\n        });\n        name = number ? `${number}-${name}` : name;\n        const node = yield getRoomFromRefByName(refContext, name);\n        const id = node ? node.info.id.get() : (0, guid_1.guid)();\n        const roomCmd = {\n            pNId,\n            id,\n            type: 'room',\n            name,\n            info: {\n                dbid: roomArchi.properties.dbId,\n                externalId: roomArchi.properties.externalId,\n                bimFileId,\n            },\n            attr,\n        };\n        roomCmds.push(roomCmd);\n        roomArchi.children.forEach((nodeInfo) => {\n            const roomRefCmd = getRefCmd(nodeInfo, roomCmd.id, 'roomRef', bimFileId);\n            roomRefCmds.push(roomRefCmd);\n        });\n    });\n}\nexports.getRoomCmd = getRoomCmd;\nfunction getFloorRefCmdNew(structures, floorId, bimFileId, type) {\n    const refObjs = [];\n    for (const RefExtId in structures) {\n        if (Object.prototype.hasOwnProperty.call(structures, RefExtId)) {\n            const { properties } = structures[RefExtId];\n            const struct = getRefCmd(properties, floorId, type, bimFileId);\n            refObjs.push(struct);\n        }\n    }\n    return refObjs;\n}\nfunction getRefCmd(properties, pNId, type, bimFileId) {\n    let name = '';\n    properties.properties.forEach((itm) => {\n        if (itm.name === 'name')\n            name = itm.value;\n    });\n    return {\n        pNId,\n        id: (0, guid_1.guid)(),\n        type,\n        name,\n        info: {\n            dbid: properties.dbId,\n            externalId: properties.externalId,\n            bimFileId,\n        },\n    };\n}\nexports.getRefCmd = getRefCmd;\nfunction getFloorCmdNew(floorData, buildingNode, bimFileId) {\n    const info = {\n        dbid: floorData.floorArchi.properties.dbId,\n        externalId: floorData.floorArchi.properties.externalId,\n        bimFileId,\n    };\n    let name = '';\n    const attr = floorData.floorArchi.properties.properties.map((itm) => {\n        if (itm.name === 'name')\n            name = itm.value;\n        return {\n            label: itm.name,\n            value: itm.value,\n            unit: (0, transformArchi_1.parseUnit)(itm.dataTypeContext),\n        };\n    });\n    return {\n        pNId: buildingNode.info.id.get(),\n        id: (0, guid_1.guid)(),\n        type: 'floor',\n        name,\n        info,\n        attr,\n    };\n}\n//# sourceMappingURL=handleFloorCmdNew.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type {\n  INodeInfo,\n  IRoomArchi,\n  IStructures,\n} from '../../interfaces/IGetArchi';\nimport type { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport type { IFloorData } from '../../interfaces/IFloorData';\nimport type { ISkipItem } from '../../interfaces/ISkipItem';\nimport type { ICmdNew } from '../../interfaces/ICmdNew';\nimport { parseUnit } from '../../scripts/transformArchi';\nimport { guid } from '../../utils/guid';\nimport { isInSkipList } from '../../utils/archi/isInSkipList';\nimport { GEO_ROOM_RELATION } from '../../../Constant';\n\nexport async function handleFloorCmdNew(\n  floorData: IFloorData,\n  buildingNode: SpinalNode,\n  bimFileId: string,\n  dataToDo: ICmdNew[][],\n  skipList: ISkipItem[],\n  refContext: SpinalContext\n) {\n  const floorCmd = getFloorCmdNew(floorData, buildingNode, bimFileId);\n  dataToDo.push([floorCmd]);\n  // floor ref structs\n  const floorRefCmds = getFloorRefCmdNew(\n    floorData.floorArchi.structures,\n    floorCmd.id,\n    bimFileId,\n    'floorRef'\n  );\n  // rooms\n  const { roomCmds, roomRefCmds } = await getFloorRoomsCmdNew(\n    floorData,\n    floorCmd,\n    bimFileId,\n    skipList,\n    refContext\n  );\n  const floorRefAndRoomCmds = floorRefCmds.concat(roomCmds);\n  if (floorRefAndRoomCmds.length > 0) dataToDo.push(floorRefAndRoomCmds);\n  if (roomRefCmds.length > 0) dataToDo.push(roomRefCmds);\n}\n\nasync function getFloorRoomsCmdNew(\n  floorData: IFloorData,\n  floorCmd: ICmdNew,\n  bimFileId: string,\n  skipList: ISkipItem[],\n  refContext: SpinalContext\n) {\n  const roomCmds: ICmdNew[] = [];\n  const roomRefCmds: ICmdNew[] = [];\n  for (const floorExtId in floorData.floorArchi.children) {\n    if (\n      Object.prototype.hasOwnProperty.call(\n        floorData.floorArchi.children,\n        floorExtId\n      )\n    ) {\n      const roomArchi = floorData.floorArchi.children[floorExtId];\n      if (isInSkipList(skipList, roomArchi.properties.externalId)) continue;\n      await getRoomCmd(\n        roomArchi,\n        floorCmd.id,\n        bimFileId,\n        roomCmds,\n        roomRefCmds,\n        refContext\n      );\n    }\n  }\n  return { roomCmds, roomRefCmds };\n}\n\nexport async function getRoomFromRefByName(\n  refContext: SpinalContext,\n  name: string\n) {\n  const children = await refContext.getChildren(GEO_ROOM_RELATION);\n  for (const child of children) {\n    if (child.info.name.get() === name) return child;\n  }\n}\n\nexport async function getRoomCmd(\n  roomArchi: IRoomArchi,\n  pNId: string,\n  bimFileId: string,\n  roomCmds: ICmdNew[],\n  roomRefCmds: ICmdNew[],\n  refContext: SpinalContext\n) {\n  let name = '';\n  let number = undefined;\n  const attr = roomArchi.properties.properties.map((itm) => {\n    if (itm.name === 'name') name = <string>itm.value;\n    if (itm.name === 'number') number = <string>itm.value;\n    return {\n      label: itm.name,\n      value: itm.value,\n      unit: parseUnit(itm.dataTypeContext),\n    };\n  });\n  name = number ? `${number}-${name}` : name;\n  const node = await getRoomFromRefByName(refContext, name);\n  const id = node ? node.info.id.get() : guid();\n  const roomCmd: ICmdNew = {\n    pNId,\n    id,\n    type: 'room',\n    name,\n    info: {\n      dbid: roomArchi.properties.dbId,\n      externalId: roomArchi.properties.externalId,\n      bimFileId,\n    },\n    attr,\n  };\n  roomCmds.push(roomCmd);\n  roomArchi.children.forEach((nodeInfo) => {\n    const roomRefCmd = getRefCmd(nodeInfo, roomCmd.id, 'roomRef', bimFileId);\n    roomRefCmds.push(roomRefCmd);\n  });\n}\n\nfunction getFloorRefCmdNew(\n  structures: IStructures,\n  floorId: string,\n  bimFileId: string,\n  type: string\n): ICmdNew[] {\n  const refObjs: ICmdNew[] = [];\n  for (const RefExtId in structures) {\n    if (Object.prototype.hasOwnProperty.call(structures, RefExtId)) {\n      const { properties } = structures[RefExtId];\n      const struct: ICmdNew = getRefCmd(properties, floorId, type, bimFileId);\n      refObjs.push(struct);\n    }\n  }\n  return refObjs;\n}\nexport function getRefCmd(\n  properties: INodeInfo,\n  pNId: string,\n  type: string,\n  bimFileId: string\n): ICmdNew {\n  let name = '';\n  properties.properties.forEach((itm) => {\n    if (itm.name === 'name') name = <string>itm.value;\n  });\n  return {\n    pNId,\n    id: guid(),\n    type,\n    name,\n    info: {\n      dbid: properties.dbId,\n      externalId: properties.externalId,\n      bimFileId,\n    },\n  };\n}\nfunction getFloorCmdNew(\n  floorData: IFloorData,\n  buildingNode: SpinalNode,\n  bimFileId: string\n): ICmdNew {\n  const info = {\n    dbid: floorData.floorArchi.properties.dbId,\n    externalId: floorData.floorArchi.properties.externalId,\n    bimFileId,\n  };\n  let name = '';\n  const attr = floorData.floorArchi.properties.properties.map((itm) => {\n    if (itm.name === 'name') name = <string>itm.value;\n    return {\n      label: itm.name,\n      value: itm.value,\n      unit: parseUnit(itm.dataTypeContext),\n    };\n  });\n  return {\n    pNId: buildingNode.info.id.get(),\n    id: guid(),\n    type: 'floor',\n    name,\n    info,\n    attr,\n  };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleFloorUpdate = void 0;\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst isInSkipList_1 = require(\"../../utils/archi/isInSkipList\");\nconst handleFloorCmdNew_1 = require(\"./handleFloorCmdNew\");\nconst transformArchi_1 = require(\"../../scripts/transformArchi\");\nconst guid_1 = require(\"../../utils/guid\");\nconst getNodeInfoArchiAttr_1 = require(\"../../utils/archi/getNodeInfoArchiAttr\");\nconst serverIdArrToNodeIdArr_1 = require(\"../../utils/archi/serverIdArrToNodeIdArr\");\nconst spinal_env_viewer_context_geographic_service_1 = require(\"spinal-env-viewer-context-geographic-service\");\nfunction handleFloorUpdate(floorData, buildingNode, dataToDo, skipList, bimFileId, refContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const floorNode = (spinal_core_connectorjs_1.FileSystem._objects[floorData.floorArchi.properties.spinalnodeServerId]);\n        const floorCmd = getFloorCmdUp(floorData, buildingNode, floorNode);\n        dataToDo.push([floorCmd]);\n        const floorCmds = [];\n        if (floorData.diff.diffRef.delBimObj.length > 0) {\n            const delBimObj = {\n                pNId: floorNode.info.id.get(),\n                type: 'floorRefDel',\n                nIdToDel: (0, serverIdArrToNodeIdArr_1.serverIdArrToNodeIdArr)(floorData.diff.diffRef.delBimObj),\n            };\n            floorCmds.push(delBimObj);\n        }\n        const roomDelServerId = floorData.diff.diffRoom.delRooms.filter((itm) => !(0, isInSkipList_1.isInSkipList)(skipList, itm));\n        if (roomDelServerId.length > 0) {\n            const floorRoomDel = {\n                pNId: floorNode.info.id.get(),\n                type: 'floorRoomDel',\n                nIdToDel: (0, serverIdArrToNodeIdArr_1.serverIdArrToNodeIdArr)(roomDelServerId),\n            };\n            floorCmds.push(floorRoomDel);\n        }\n        if (floorCmds.length > 0)\n            dataToDo.push(floorCmds);\n        const floorRefCmd = getFloorRefCmd(floorData, floorNode, bimFileId);\n        const roomCmds = [], roomRefCmds = [];\n        floorData.diff.diffRoom.newRooms.forEach((roomArchi) => {\n            if (!(0, isInSkipList_1.isInSkipList)(skipList, roomArchi.properties.externalId))\n                (0, handleFloorCmdNew_1.getRoomCmd)(roomArchi, floorNode.info.id.get(), bimFileId, roomCmds, roomRefCmds, refContext);\n        });\n        yield getRoomCmdUp(floorData, floorNode, roomCmds, bimFileId, roomRefCmds, skipList);\n        const floorRefAndRoomCmds = floorRefCmd.concat(roomCmds);\n        if (floorRefAndRoomCmds.length > 0)\n            dataToDo.push(floorRefAndRoomCmds);\n        if (roomRefCmds.length > 0)\n            dataToDo.push(roomRefCmds);\n    });\n}\nexports.handleFloorUpdate = handleFloorUpdate;\nfunction getRoomCmdUp(floorData, floorNode, roomCmds, bimFileId, roomRefCmds, skipList) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const updatedRoomSet = new Set();\n        floorData.diff.diffRoom.newRooms.forEach((roomArchi) => {\n            updatedRoomSet.add(roomArchi.properties.externalId);\n        });\n        for (const { diff, roomArchi } of floorData.diff.diffRoom.updateRooms) {\n            updatedRoomSet.add(roomArchi.properties.externalId);\n            if ((0, isInSkipList_1.isInSkipList)(skipList, roomArchi.properties.externalId))\n                continue;\n            const { name, attr, info } = getRoomNameAndAttr(roomArchi, diff);\n            const roomNode = (spinal_core_connectorjs_1.FileSystem._objects[roomArchi.properties.spinalnodeServerId]);\n            const roomCmd = {\n                pNId: floorNode.info.id.get(),\n                id: ((_a = roomNode === null || roomNode === void 0 ? void 0 : roomNode.info.id) === null || _a === void 0 ? void 0 : _a.get()) || (0, guid_1.guid)(),\n                type: 'room',\n                name,\n                info,\n                attr,\n            };\n            roomCmds.push(roomCmd);\n            roomArchi.children.forEach((nodeInfo) => {\n                const roomRefCmd = (0, handleFloorCmdNew_1.getRefCmd)(nodeInfo, roomCmd.id, 'roomRef', bimFileId);\n                roomRefCmds.push(roomRefCmd);\n            });\n        }\n        const proms = [];\n        for (const roomExtId in floorData.floorArchi.children) {\n            if (Object.prototype.hasOwnProperty.call(floorData.floorArchi.children, roomExtId)) {\n                const roomArchi = floorData.floorArchi.children[roomExtId];\n                if (updatedRoomSet.has(roomExtId))\n                    continue;\n                if ((0, isInSkipList_1.isInSkipList)(skipList, roomExtId))\n                    continue;\n                // get realNode\n                const roomNode = (spinal_core_connectorjs_1.FileSystem._objects[roomArchi.properties.spinalnodeServerId]);\n                if (!roomNode)\n                    continue;\n                proms.push(roomNode\n                    .getChildren(spinal_env_viewer_context_geographic_service_1.REFERENCE_ROOM_RELATION)\n                    .then((children) => {\n                    var _a;\n                    return {\n                        children,\n                        roomArchi,\n                        roomCmd: {\n                            pNId: floorNode.info.id.get(),\n                            id: ((_a = roomNode === null || roomNode === void 0 ? void 0 : roomNode.info.id) === null || _a === void 0 ? void 0 : _a.get()) || (0, guid_1.guid)(),\n                            type: 'RefNode',\n                        },\n                    };\n                }));\n            }\n        }\n        const cmds = yield Promise.all(proms);\n        for (const { children, roomCmd, roomArchi } of cmds) {\n            const roomRefCmds2 = [];\n            const refsToRm = [];\n            // check child to remove\n            for (const child of children) {\n                let found = false;\n                for (const nodeInfo of roomArchi.children) {\n                    if (child.info.dbid.get() === nodeInfo.dbId &&\n                        child.info.bimFileId.get() === bimFileId) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found === false) {\n                    refsToRm.push(child.info.externalId.get());\n                }\n            }\n            roomArchi.children.forEach((nodeInfo) => {\n                // check if it exist\n                for (const child of children) {\n                    if (child.info.externalId.get() === nodeInfo.externalId)\n                        return;\n                }\n                // if not exist add to list createRef\n                const roomRefCmd = (0, handleFloorCmdNew_1.getRefCmd)(nodeInfo, roomCmd.id, 'roomRef', bimFileId);\n                roomRefCmds2.push(roomRefCmd);\n            });\n            if (refsToRm.length > 0 || roomRefCmds2.length > 0) {\n                roomCmds.push(roomCmd);\n                if (refsToRm.length > 0) {\n                    roomRefCmds.push({\n                        pNId: roomCmd.id,\n                        type: 'roomRefDel',\n                        nIdToDel: refsToRm,\n                    });\n                }\n                if (roomRefCmds2.length > 0) {\n                    roomRefCmds.push(...roomRefCmds2);\n                }\n            }\n        }\n    });\n}\nfunction getRoomName(roomArchi, diff) {\n    for (const infoObj of diff.diffInfo) {\n        if (infoObj.label === 'name')\n            return infoObj.archiValue;\n    }\n    const name = (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(roomArchi.properties, 'name');\n    const number = (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(roomArchi.properties, 'number');\n    return number ? `${number}-${name}` : name;\n}\nfunction getRoomNameAndAttr(roomArchi, diff) {\n    const name = getRoomName(roomArchi, diff);\n    const info = {};\n    for (const diffInfo of diff.diffInfo) {\n        info[diffInfo.label] = diffInfo.archiValue;\n    }\n    const attr = diff.diffAttr.map((itm) => {\n        return {\n            label: itm.label,\n            value: itm.archiValue,\n            unit: (0, transformArchi_1.parseUnit)(itm.unit),\n        };\n    });\n    return { name, attr, info };\n}\nfunction getFloorRefCmd(floorData, floorNode, bimFileId) {\n    const floorRefCmd = [];\n    for (const strucNodeInfo of floorData.diff.diffRef.newBimObj) {\n        let name = '';\n        strucNodeInfo.properties.forEach((itm) => {\n            if (itm.name === 'name')\n                name = itm.value;\n        });\n        floorRefCmd.push({\n            pNId: floorNode.info.id.get(),\n            id: (0, guid_1.guid)(),\n            type: 'floorRef',\n            name,\n            info: {\n                dbid: strucNodeInfo.dbId,\n                externalId: strucNodeInfo.externalId,\n                bimFileId,\n            },\n        });\n    }\n    return floorRefCmd;\n}\nfunction getFloorName(floorData) {\n    for (const infoObj of floorData.diff.diffInfo.diffInfo) {\n        if (infoObj.label === 'name')\n            return infoObj.archiValue;\n    }\n    return (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(floorData.floorArchi.properties, 'name');\n}\nfunction getFloorCmdUp(floorData, buildingNode, floorNode) {\n    var _a;\n    const info = {};\n    for (const diffInfo of floorData.diff.diffInfo.diffInfo) {\n        info[diffInfo.label] = diffInfo.archiValue;\n    }\n    const name = getFloorName(floorData);\n    const attr = floorData.diff.diffInfo.diffAttr.map((itm) => {\n        return {\n            label: itm.label,\n            value: itm.archiValue,\n            unit: (0, transformArchi_1.parseUnit)(itm.unit),\n        };\n    });\n    const floorCmd = {\n        type: 'floor',\n        pNId: buildingNode.info.id.get(),\n        id: (_a = floorNode === null || floorNode === void 0 ? void 0 : floorNode.info.id) === null || _a === void 0 ? void 0 : _a.get(),\n        name,\n        info,\n        attr,\n    };\n    if (name === '') {\n        Object.assign(floorCmd, { name });\n    }\n    return floorCmd;\n}\n//# sourceMappingURL=handleFloorUpdate.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport type { IFloorData } from '../../interfaces/IFloorData';\nimport type { ISkipItem } from '../../interfaces/ISkipItem';\nimport type { ICmdNew, ICmdNewInfo } from '../../interfaces/ICmdNew';\nimport { FileSystem } from 'spinal-core-connectorjs';\nimport { IDiffNodeInfoAttr, IRoomArchi } from '../../interfaces/IGetArchi';\nimport { isInSkipList } from '../../utils/archi/isInSkipList';\nimport { getRefCmd, getRoomCmd } from './handleFloorCmdNew';\nimport { parseUnit } from '../../scripts/transformArchi';\nimport { guid } from '../../utils/guid';\nimport { getNodeInfoArchiAttr } from '../../utils/archi/getNodeInfoArchiAttr';\nimport { serverIdArrToNodeIdArr } from '../../utils/archi/serverIdArrToNodeIdArr';\nimport { REFERENCE_ROOM_RELATION } from 'spinal-env-viewer-context-geographic-service';\ntype ICmdRefChildren = {\n  children: SpinalNode[];\n  roomCmd: ICmdNew;\n  roomArchi: IRoomArchi;\n};\n\nexport async function handleFloorUpdate(\n  floorData: IFloorData,\n  buildingNode: SpinalNode,\n  dataToDo: ICmdNew[][],\n  skipList: ISkipItem[],\n  bimFileId: string,\n  refContext: SpinalContext\n) {\n  const floorNode = <SpinalNode>(\n    FileSystem._objects[floorData.floorArchi.properties.spinalnodeServerId]\n  );\n  const floorCmd: ICmdNew = getFloorCmdUp(floorData, buildingNode, floorNode);\n  dataToDo.push([floorCmd]);\n\n  const floorCmds: ICmdNew[] = [];\n  if (floorData.diff.diffRef.delBimObj.length > 0) {\n    const delBimObj = {\n      pNId: floorNode.info.id.get(),\n      type: 'floorRefDel',\n      nIdToDel: serverIdArrToNodeIdArr(floorData.diff.diffRef.delBimObj),\n    };\n    floorCmds.push(delBimObj);\n  }\n  const roomDelServerId = floorData.diff.diffRoom.delRooms.filter(\n    (itm) => !isInSkipList(skipList, itm)\n  );\n  if (roomDelServerId.length > 0) {\n    const floorRoomDel = {\n      pNId: floorNode.info.id.get(),\n      type: 'floorRoomDel',\n      nIdToDel: serverIdArrToNodeIdArr(roomDelServerId),\n    };\n    floorCmds.push(floorRoomDel);\n  }\n  if (floorCmds.length > 0) dataToDo.push(floorCmds);\n\n  const floorRefCmd = getFloorRefCmd(floorData, floorNode, bimFileId);\n  const roomCmds: ICmdNew[] = [],\n    roomRefCmds: ICmdNew[] = [];\n  floorData.diff.diffRoom.newRooms.forEach((roomArchi) => {\n    if (!isInSkipList(skipList, roomArchi.properties.externalId))\n      getRoomCmd(\n        roomArchi,\n        floorNode.info.id.get(),\n        bimFileId,\n        roomCmds,\n        roomRefCmds,\n        refContext\n      );\n  });\n  await getRoomCmdUp(\n    floorData,\n    floorNode,\n    roomCmds,\n    bimFileId,\n    roomRefCmds,\n    skipList\n  );\n  const floorRefAndRoomCmds = floorRefCmd.concat(roomCmds);\n  if (floorRefAndRoomCmds.length > 0) dataToDo.push(floorRefAndRoomCmds);\n  if (roomRefCmds.length > 0) dataToDo.push(roomRefCmds);\n}\n\nasync function getRoomCmdUp(\n  floorData: IFloorData,\n  floorNode: SpinalNode,\n  roomCmds: ICmdNew[],\n  bimFileId: string,\n  roomRefCmds: ICmdNew[],\n  skipList: ISkipItem[]\n) {\n  const updatedRoomSet = new Set<string>();\n  floorData.diff.diffRoom.newRooms.forEach((roomArchi) => {\n    updatedRoomSet.add(roomArchi.properties.externalId);\n  });\n  for (const { diff, roomArchi } of floorData.diff.diffRoom.updateRooms) {\n    updatedRoomSet.add(roomArchi.properties.externalId);\n    if (isInSkipList(skipList, roomArchi.properties.externalId)) continue;\n    const { name, attr, info } = getRoomNameAndAttr(roomArchi, diff);\n    const roomNode = <SpinalNode>(\n      FileSystem._objects[roomArchi.properties.spinalnodeServerId]\n    );\n    const roomCmd: ICmdNew = {\n      pNId: floorNode.info.id.get(),\n      id: roomNode?.info.id?.get() || guid(),\n      type: 'room',\n      name,\n      info,\n      attr,\n    };\n    roomCmds.push(roomCmd);\n    roomArchi.children.forEach((nodeInfo) => {\n      const roomRefCmd = getRefCmd(nodeInfo, roomCmd.id, 'roomRef', bimFileId);\n      roomRefCmds.push(roomRefCmd);\n    });\n  }\n  const proms: Promise<ICmdRefChildren>[] = [];\n  for (const roomExtId in floorData.floorArchi.children) {\n    if (\n      Object.prototype.hasOwnProperty.call(\n        floorData.floorArchi.children,\n        roomExtId\n      )\n    ) {\n      const roomArchi = floorData.floorArchi.children[roomExtId];\n      if (updatedRoomSet.has(roomExtId)) continue;\n      if (isInSkipList(skipList, roomExtId)) continue;\n      // get realNode\n      const roomNode = <SpinalNode>(\n        FileSystem._objects[roomArchi.properties.spinalnodeServerId]\n      );\n      if (!roomNode) continue;\n      proms.push(\n        roomNode\n          .getChildren(REFERENCE_ROOM_RELATION)\n          .then((children): ICmdRefChildren => {\n            return {\n              children,\n              roomArchi,\n              roomCmd: {\n                pNId: floorNode.info.id.get(),\n                id: roomNode?.info.id?.get() || guid(),\n                type: 'RefNode',\n              } as ICmdNew,\n            };\n          })\n      );\n    }\n  }\n\n  const cmds = await Promise.all(proms);\n  for (const { children, roomCmd, roomArchi } of cmds) {\n    const roomRefCmds2: ICmdNew[] = [];\n    const refsToRm = [];\n    // check child to remove\n    for (const child of children) {\n      let found = false;\n      for (const nodeInfo of roomArchi.children) {\n        if (\n          child.info.dbid.get() === nodeInfo.dbId &&\n          child.info.bimFileId.get() === bimFileId\n        ) {\n          found = true;\n          break;\n        }\n      }\n      if (found === false) {\n        refsToRm.push(child.info.externalId.get());\n      }\n    }\n\n    roomArchi.children.forEach((nodeInfo) => {\n      // check if it exist\n      for (const child of children) {\n        if (child.info.externalId.get() === nodeInfo.externalId) return;\n      }\n      // if not exist add to list createRef\n      const roomRefCmd = getRefCmd(nodeInfo, roomCmd.id, 'roomRef', bimFileId);\n      roomRefCmds2.push(roomRefCmd);\n    });\n    if (refsToRm.length > 0 || roomRefCmds2.length > 0) {\n      roomCmds.push(roomCmd);\n      if (refsToRm.length > 0) {\n        roomRefCmds.push({\n          pNId: roomCmd.id,\n          type: 'roomRefDel',\n          nIdToDel: refsToRm,\n        });\n      }\n      if (roomRefCmds2.length > 0) {\n        roomRefCmds.push(...roomRefCmds2);\n      }\n    }\n  }\n}\nfunction getRoomName(roomArchi: IRoomArchi, diff: IDiffNodeInfoAttr): string {\n  for (const infoObj of diff.diffInfo) {\n    if (infoObj.label === 'name') return <string>infoObj.archiValue;\n  }\n  const name = <string>getNodeInfoArchiAttr(roomArchi.properties, 'name');\n  const number = <string>getNodeInfoArchiAttr(roomArchi.properties, 'number');\n  return number ? `${number}-${name}` : name;\n}\nfunction getRoomNameAndAttr(roomArchi: IRoomArchi, diff: IDiffNodeInfoAttr) {\n  const name = getRoomName(roomArchi, diff);\n  const info = {} as ICmdNewInfo;\n  for (const diffInfo of diff.diffInfo) {\n    info[diffInfo.label] = diffInfo.archiValue;\n  }\n\n  const attr = diff.diffAttr.map((itm) => {\n    return {\n      label: itm.label,\n      value: itm.archiValue,\n      unit: parseUnit(itm.unit),\n    };\n  });\n  return { name, attr, info };\n}\nfunction getFloorRefCmd(\n  floorData: IFloorData,\n  floorNode: SpinalNode,\n  bimFileId: string\n): ICmdNew[] {\n  const floorRefCmd: ICmdNew[] = [];\n  for (const strucNodeInfo of floorData.diff.diffRef.newBimObj) {\n    let name = '';\n    strucNodeInfo.properties.forEach((itm) => {\n      if (itm.name === 'name') name = <string>itm.value;\n    });\n    floorRefCmd.push({\n      pNId: floorNode.info.id.get(),\n      id: guid(),\n      type: 'floorRef',\n      name,\n      info: {\n        dbid: strucNodeInfo.dbId,\n        externalId: strucNodeInfo.externalId,\n        bimFileId,\n      },\n    });\n  }\n  return floorRefCmd;\n}\n\nfunction getFloorName(floorData: IFloorData): string {\n  for (const infoObj of floorData.diff.diffInfo.diffInfo) {\n    if (infoObj.label === 'name') return <string>infoObj.archiValue;\n  }\n  return <string>getNodeInfoArchiAttr(floorData.floorArchi.properties, 'name');\n}\n\nfunction getFloorCmdUp(\n  floorData: IFloorData,\n  buildingNode: SpinalNode,\n  floorNode: SpinalNode\n) {\n  const info = {} as ICmdNewInfo;\n  for (const diffInfo of floorData.diff.diffInfo.diffInfo) {\n    info[diffInfo.label] = diffInfo.archiValue;\n  }\n  const name = getFloorName(floorData);\n  const attr = floorData.diff.diffInfo.diffAttr.map((itm) => {\n    return {\n      label: itm.label,\n      value: itm.archiValue,\n      unit: parseUnit(itm.unit),\n    };\n  });\n  const floorCmd: ICmdNew = {\n    type: 'floor',\n    pNId: buildingNode.info.id.get(),\n    id: floorNode?.info.id?.get(),\n    name,\n    info,\n    attr,\n  };\n  if (name === '') {\n    Object.assign(floorCmd, { name });\n  }\n  return floorCmd;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCmdNotFound = void 0;\nconst getBulkProperties_1 = require(\"../../utils/projection/getBulkProperties\");\nconst getDiffSelection_1 = require(\"./getDiffSelection\");\nconst createCmdNotFoundItm_1 = require(\"./createCmdNotFoundItm\");\nconst getCenterPos_1 = require(\"./getCenterPos\");\nfunction createCmdNotFound(intersectRes) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const notFound = (0, getDiffSelection_1.getDiffSelection)(intersectRes);\n        const auProps = yield getItemNames(notFound);\n        const res = [];\n        const proms = auProps.map((auProp) => __awaiter(this, void 0, void 0, function* () {\n            const centerPos = yield (0, getCenterPos_1.getCenterPos)(auProp);\n            (0, createCmdNotFoundItm_1.createCmdNotFoundItm)(res, auProp, centerPos);\n        }));\n        yield Promise.all(proms);\n        return res;\n    });\n}\nexports.createCmdNotFound = createCmdNotFound;\nfunction getItemNames(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = [];\n        for (const { model, dbIds } of data) {\n            res.push((0, getBulkProperties_1.getBulkProperties)(model, dbIds, {\n                propFilter: ['name', 'externalId', 'Category'],\n            }));\n        }\n        return Promise.all(res).then((arr) => {\n            const result = [];\n            for (const itms of arr) {\n                result.push(...itms);\n            }\n            return result;\n        });\n    });\n}\n//# sourceMappingURL=createCmdNotFound.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport type { IIntersectNotFound } from '../../interfaces/IIntersectNotFound';\nimport type { IIntersectRes } from '../../interfaces/IIntersectRes';\nimport type { ICmdMissing } from '../../interfaces/ICmdMissing';\nimport { getBulkProperties } from '../../utils/projection/getBulkProperties';\nimport { getDiffSelection } from './getDiffSelection';\nimport { createCmdNotFoundItm } from './createCmdNotFoundItm';\nimport { getCenterPos } from './getCenterPos';\n\nexport async function createCmdNotFound(\n  intersectRes: IIntersectRes\n): Promise<ICmdMissing[]> {\n  const notFound = getDiffSelection(intersectRes);\n  const auProps = await getItemNames(notFound);\n  const res: ICmdMissing[] = [];\n  const proms = auProps.map(async (auProp) => {\n    const centerPos = await getCenterPos(auProp);\n    createCmdNotFoundItm(res, auProp, centerPos);\n  });\n  await Promise.all(proms);\n  return res;\n}\n\nasync function getItemNames(data: IIntersectNotFound[]) {\n  const res: Promise<AuProps[]>[] = [];\n  for (const { model, dbIds } of data) {\n    res.push(\n      getBulkProperties(model, dbIds, {\n        propFilter: ['name', 'externalId', 'Category'],\n      })\n    );\n  }\n\n  return Promise.all(res).then((arr) => {\n    const result: AuProps[] = [];\n    for (const itms of arr) {\n      result.push(...itms);\n    }\n    return result;\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDiffSelection = void 0;\nfunction getDiffSelection(intersectRes) {\n    const data = [];\n    for (const { model, dbId } of intersectRes.selection) {\n        for (const id of dbId) {\n            let found = false;\n            for (const { origin } of intersectRes.intersects) {\n                if (origin.modelId === model.id && origin.dbId === id.dbId) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                pushToData(data, id.dbId, model);\n            }\n        }\n    }\n    return data;\n}\nexports.getDiffSelection = getDiffSelection;\nfunction pushToData(data, dbId, model) {\n    for (const item of data) {\n        if (item.model.id === model.id) {\n            item.dbIds.add(dbId);\n            return;\n        }\n    }\n    data.push({\n        model,\n        dbIds: new Set([dbId]),\n    });\n}\n//# sourceMappingURL=getDiffSelection.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IIntersectRes } from '../../interfaces/IIntersectRes';\nimport type { IIntersectNotFound } from '../../interfaces/IIntersectNotFound';\n\nexport function getDiffSelection(\n  intersectRes: IIntersectRes\n): IIntersectNotFound[] {\n  const data: IIntersectNotFound[] = [];\n  for (const { model, dbId } of intersectRes.selection) {\n    for (const id of dbId) {\n      let found = false;\n      for (const { origin } of intersectRes.intersects) {\n        if (origin.modelId === model.id && origin.dbId === id.dbId) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        pushToData(data, id.dbId, model);\n      }\n    }\n  }\n  return data;\n}\n\nfunction pushToData(\n  data: IIntersectNotFound[],\n  dbId: number,\n  model: Autodesk.Viewing.Model\n) {\n  for (const item of data) {\n    if (item.model.id === model.id) {\n      item.dbIds.add(dbId);\n      return;\n    }\n  }\n  data.push({\n    model,\n    dbIds: new Set([dbId]),\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCmdNotFoundItm = void 0;\nconst getBimFileIdByModelId_1 = require(\"../../utils/projection/getBimFileIdByModelId\");\nconst getCategory_1 = require(\"./getCategory\");\nfunction createCmdNotFoundItm(target, auProp, centerPos) {\n    const revitCat = (0, getCategory_1.getCategory)(auProp);\n    const bimFileId = (0, getBimFileIdByModelId_1.getBimFileIdByModelId)(auProp.modelId);\n    const itm = target.find((it) => it.bimFileId === bimFileId);\n    if (itm) {\n        const tmp = itm.data.find((it) => it.dbid === auProp.dbId);\n        if (!tmp) {\n            itm.data.push({\n                dbid: auProp.dbId,\n                externalId: auProp.externalId,\n                name: auProp.name,\n                revitCat: revitCat.displayValue,\n                centerPos,\n            });\n        }\n    }\n    else {\n        target.push({\n            type: 'CmdMissing',\n            bimFileId,\n            data: [\n                {\n                    dbid: auProp.dbId,\n                    externalId: auProp.externalId,\n                    name: auProp.name,\n                    revitCat: revitCat.displayValue,\n                    centerPos,\n                },\n            ],\n        });\n    }\n}\nexports.createCmdNotFoundItm = createCmdNotFoundItm;\n//# sourceMappingURL=createCmdNotFoundItm.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport type { ICmdMissing } from '../../interfaces/ICmdMissing';\nimport { getBimFileIdByModelId } from '../../utils/projection/getBimFileIdByModelId';\nimport { getCategory } from './getCategory';\n\nexport function createCmdNotFoundItm(\n  target: ICmdMissing[],\n  auProp: AuProps,\n  centerPos: string\n): void {\n  const revitCat = getCategory(auProp);\n  const bimFileId = getBimFileIdByModelId(auProp.modelId);\n  const itm = target.find((it) => it.bimFileId === bimFileId);\n  if (itm) {\n    const tmp = itm.data.find((it) => it.dbid === auProp.dbId);\n    if (!tmp) {\n      itm.data.push({\n        dbid: auProp.dbId,\n        externalId: auProp.externalId,\n        name: auProp.name,\n        revitCat: revitCat.displayValue,\n        centerPos,\n      });\n    }\n  } else {\n    target.push({\n      type: 'CmdMissing',\n      bimFileId,\n      data: [\n        {\n          dbid: auProp.dbId,\n          externalId: auProp.externalId,\n          name: auProp.name,\n          revitCat: revitCat.displayValue,\n          centerPos,\n        },\n      ],\n    });\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCategory = void 0;\nfunction getCategory(props) {\n    for (const prop of props.properties) {\n        if (prop.attributeName === 'Category' &&\n            prop.displayCategory === '__category__') {\n            return prop;\n        }\n    }\n}\nexports.getCategory = getCategory;\n//# sourceMappingURL=getCategory.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces';\n\nexport function getCategory(props: AuProps) {\n  for (const prop of props.properties) {\n    if (\n      prop.attributeName === 'Category' &&\n      prop.displayCategory === '__category__'\n    ) {\n      return prop;\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCenterPos = void 0;\nconst utils_1 = require(\"../../utils\");\nfunction getCenterPos(auProp) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const model = (0, utils_1.getModelByModelId)(auProp.modelId);\n        const fragIds = yield (0, utils_1.getFragIds)(auProp.dbId, model);\n        const bbox = (0, utils_1.getWorldBoundingBox)(fragIds, model);\n        const center = new THREE.Vector3();\n        bbox.getCenter(center);\n        return `${center.x};${center.y};${center.z}`;\n    });\n}\nexports.getCenterPos = getCenterPos;\n//# sourceMappingURL=getCenterPos.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport {\n  getFragIds,\n  getModelByModelId,\n  getWorldBoundingBox,\n} from '../../utils';\n\nexport async function getCenterPos(auProp: AuProps): Promise<string> {\n  const model = getModelByModelId(auProp.modelId);\n  const fragIds = await getFragIds(auProp.dbId, model);\n  const bbox = getWorldBoundingBox(fragIds, model);\n  const center = new THREE.Vector3();\n  bbox.getCenter(center);\n  return `${center.x};${center.y};${center.z}`;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCmdProjection = void 0;\nconst graphservice_1 = require(\"../../utils/graphservice\");\nconst getModelByModelId_1 = require(\"../../utils/projection/getModelByModelId\");\nconst getProperties_1 = require(\"../../utils/projection/getProperties\");\nconst getIntersectionRoom_1 = require(\"./getIntersectionRoom\");\nconst createCmdProjItm_1 = require(\"./createCmdProjItm\");\nconst getCenterPos_1 = require(\"./getCenterPos\");\nconst consumeBatch_1 = require(\"../../../utils/consumeBatch\");\nfunction createCmdProjection(intersects, contextGeoId, floorsData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = [];\n        const dicoBimObjs = {};\n        const proms = [];\n        for (const spinalIntersection of intersects) {\n            proms.push(() => handleCreateCmd(spinalIntersection, dicoBimObjs, contextGeoId, floorsData, res));\n        }\n        yield (0, consumeBatch_1.consumeBatch)(proms, 500, console.log.bind(null, 'createCmdProjection %d/%d'));\n        return res;\n    });\n}\nexports.createCmdProjection = createCmdProjection;\nfunction handleCreateCmd(spinalIntersection, dicoBimObjs, contextGeoId, floorsData, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimObjectDbId = spinalIntersection.origin.dbId;\n        const bimObjectModel = (0, getModelByModelId_1.getModelByModelId)(spinalIntersection.origin.modelId);\n        const auProp = yield (0, getProperties_1.getProperties)(bimObjectModel, bimObjectDbId);\n        const room = yield (0, getIntersectionRoom_1.getIntersectionRoom)(spinalIntersection.intersections.dbId, spinalIntersection.intersections.modelId, dicoBimObjs, contextGeoId);\n        let flagWarining = false;\n        const floor = yield getFloorFromRoom(room, contextGeoId);\n        if (floor) {\n            const floorData = floorsData[floor.info.id.get()];\n            if (floorData &&\n                floorData.distance &&\n                spinalIntersection.intersections.distance > floorData.distance) {\n                flagWarining = true;\n            }\n        }\n        if (!room) {\n            console.error(`createCmdProjection: room not found for ${bimObjectDbId}`);\n        }\n        else {\n            const centerPos = yield (0, getCenterPos_1.getCenterPos)(auProp);\n            (0, createCmdProjItm_1.createCmdProjItm)(res, auProp, room.info.id.get(), centerPos, flagWarining);\n        }\n    });\n}\nfunction getFloorFromRoom(room, contextGeoId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const contextGeo = (0, graphservice_1.getRealNode)(contextGeoId);\n        const floors = yield room.getParentsInContext(contextGeo);\n        for (const floor of floors) {\n            return floor;\n        }\n    });\n}\n//# sourceMappingURL=createCmdProjection.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport type { ICmdProjection } from '../../interfaces/ICmdProjection';\nimport type { IRaycastIntersectRes } from '../../interfaces/IRaycastIntersectRes';\nimport type { IFloorZData } from '../../interfaces/IFloorZData';\nimport { getRealNode } from '../../utils/graphservice';\nimport { getModelByModelId } from '../../utils/projection/getModelByModelId';\nimport { getProperties } from '../../utils/projection/getProperties';\nimport { getIntersectionRoom } from './getIntersectionRoom';\nimport { createCmdProjItm } from './createCmdProjItm';\nimport { getCenterPos } from './getCenterPos';\nimport { consumeBatch } from '../../../utils/consumeBatch';\n\nexport async function createCmdProjection(\n  intersects: IRaycastIntersectRes[],\n  contextGeoId: string,\n  floorsData: Record<string, IFloorZData>\n): Promise<ICmdProjection[]> {\n  const res: ICmdProjection[] = [];\n  const dicoBimObjs: Record<string, SpinalNode[]> = {};\n  const proms = [];\n  for (const spinalIntersection of intersects) {\n    proms.push(() =>\n      handleCreateCmd(\n        spinalIntersection,\n        dicoBimObjs,\n        contextGeoId,\n        floorsData,\n        res\n      )\n    );\n  }\n  await consumeBatch(\n    proms,\n    500,\n    console.log.bind(null, 'createCmdProjection %d/%d')\n  );\n  return res;\n}\n\nasync function handleCreateCmd(\n  spinalIntersection: IRaycastIntersectRes,\n  dicoBimObjs: Record<string, SpinalNode[]>,\n  contextGeoId: string,\n  floorsData: Record<string, IFloorZData>,\n  res: ICmdProjection[]\n) {\n  const bimObjectDbId = spinalIntersection.origin.dbId;\n  const bimObjectModel = getModelByModelId(spinalIntersection.origin.modelId);\n  const auProp = await getProperties(bimObjectModel, bimObjectDbId);\n  const room = await getIntersectionRoom(\n    spinalIntersection.intersections.dbId,\n    spinalIntersection.intersections.modelId,\n    dicoBimObjs,\n    contextGeoId\n  );\n  let flagWarining = false;\n  const floor = await getFloorFromRoom(room, contextGeoId);\n  if (floor) {\n    const floorData = floorsData[floor.info.id.get()];\n    if (\n      floorData &&\n      floorData.distance &&\n      spinalIntersection.intersections.distance > floorData.distance\n    ) {\n      flagWarining = true;\n    }\n  }\n  if (!room) {\n    console.error(`createCmdProjection: room not found for ${bimObjectDbId}`);\n  } else {\n    const centerPos = await getCenterPos(auProp);\n    createCmdProjItm(res, auProp, room.info.id.get(), centerPos, flagWarining);\n  }\n}\n\nasync function getFloorFromRoom(room: SpinalNode, contextGeoId: string) {\n  const contextGeo = getRealNode(contextGeoId);\n  const floors = await room.getParentsInContext(contextGeo);\n\n  for (const floor of floors) {\n    return floor;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProperties = void 0;\nconst getModelByModelId_1 = require(\"./getModelByModelId\");\nfunction getProperties(model, dbId) {\n    let m;\n    if (typeof model === 'number') {\n        m = (0, getModelByModelId_1.getModelByModelId)(model);\n    }\n    else {\n        m = model;\n    }\n    return new Promise((resolve, reject) => {\n        m.getProperties(dbId, (result) => {\n            const data = Object.assign(result, {\n                id: `${m.id}-${result.dbId}`,\n                modelId: m.id,\n            });\n            resolve(data);\n        }, (err) => reject(err));\n    });\n}\nexports.getProperties = getProperties;\n//# sourceMappingURL=getProperties.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport { getModelByModelId } from './getModelByModelId';\n\nexport function getProperties(\n  model: number | Autodesk.Viewing.Model,\n  dbId: number\n): Promise<AuProps> {\n  let m: Autodesk.Viewing.Model;\n  if (typeof model === 'number') {\n    m = getModelByModelId(model);\n  } else {\n    m = model;\n  }\n  return new Promise((resolve, reject) => {\n    m.getProperties(\n      dbId,\n      (result) => {\n        const data = Object.assign(result, {\n          id: `${m.id}-${result.dbId}`,\n          modelId: m.id,\n        });\n        resolve(data);\n      },\n      (err) => reject(err)\n    );\n  });\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIntersectionRoom = void 0;\nconst utils_1 = require(\"../../utils\");\nconst getModelByModelId_1 = require(\"../../utils/projection/getModelByModelId\");\nconst Constant_1 = require(\"../../../Constant\");\nconst getBimObjFromBimFileId_1 = require(\"./getBimObjFromBimFileId\");\nfunction getIntersectionRoom(dbId, modelId, dicoBimObjs, contextGeoId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const roomRefObjModel = (0, getModelByModelId_1.getModelByModelId)(modelId);\n        const bimFileId = (0, utils_1.getBimFileIdByModelId)(roomRefObjModel.id);\n        const refObj = yield (0, getBimObjFromBimFileId_1.getBimObjFromBimFileId)(dicoBimObjs, bimFileId, dbId);\n        const rooms = yield refObj.getParents(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n        const filteredRooms = rooms.filter((room) => {\n            return (room.info.type.get() === Constant_1.GEO_ROOM_TYPE &&\n                room.contextIds.has(contextGeoId));\n        });\n        const room = filteredRooms[0];\n        return room;\n    });\n}\nexports.getIntersectionRoom = getIntersectionRoom;\n//# sourceMappingURL=getIntersectionRoom.js.map","import type { SpinalNode } from 'spinal-model-graph';\nimport { getBimFileIdByModelId } from '../../utils';\nimport { getModelByModelId } from '../../utils/projection/getModelByModelId';\nimport { GEO_REFERENCE_ROOM_RELATION, GEO_ROOM_TYPE } from '../../../Constant';\nimport { getBimObjFromBimFileId } from './getBimObjFromBimFileId';\n\nexport async function getIntersectionRoom(\n  dbId: number,\n  modelId: number,\n  dicoBimObjs: Record<string, SpinalNode[]>,\n  contextGeoId: string\n): Promise<SpinalNode> {\n  const roomRefObjModel = getModelByModelId(modelId);\n  const bimFileId = getBimFileIdByModelId(roomRefObjModel.id);\n  const refObj = await getBimObjFromBimFileId(dicoBimObjs, bimFileId, dbId);\n  const rooms = await refObj.getParents(GEO_REFERENCE_ROOM_RELATION);\n  const filteredRooms = rooms.filter((room) => {\n    return (\n      room.info.type.get() === GEO_ROOM_TYPE &&\n      room.contextIds.has(contextGeoId)\n    );\n  });\n  const room = filteredRooms[0];\n  return room;\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBimObjFromBimFileId = void 0;\nconst getBimObjsOfBimFileId_1 = require(\"./getBimObjsOfBimFileId\");\nfunction getBimObjFromBimFileId(dico, bimFileId, bimObjectDbId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimObjs = yield (0, getBimObjsOfBimFileId_1.getBimObjsOfBimFileId)(dico, bimFileId);\n        for (const bimObj of bimObjs) {\n            if (bimObj.info.dbid.get() === bimObjectDbId) {\n                return bimObj;\n            }\n        }\n    });\n}\nexports.getBimObjFromBimFileId = getBimObjFromBimFileId;\n//# sourceMappingURL=getBimObjFromBimFileId.js.map","import type { SpinalNode } from 'spinal-model-graph';\nimport { getBimObjsOfBimFileId } from './getBimObjsOfBimFileId';\n\nexport async function getBimObjFromBimFileId(\n  dico: Record<string, SpinalNode[]>,\n  bimFileId: string,\n  bimObjectDbId: number\n): Promise<SpinalNode> {\n  const bimObjs = await getBimObjsOfBimFileId(dico, bimFileId);\n  for (const bimObj of bimObjs) {\n    if (bimObj.info.dbid.get() === bimObjectDbId) {\n      return bimObj;\n    }\n  }\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBimObjsOfBimFileId = void 0;\nconst utils_1 = require(\"../../utils\");\nconst Constant_1 = require(\"../../../Constant\");\nfunction getBimObjsOfBimFileId(dico, bimFileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const _bimObjs = dico[bimFileId];\n        if (_bimObjs)\n            return _bimObjs;\n        const bimContext = yield (0, utils_1.getBimContextByBimFileId)(bimFileId);\n        const bimObjs = yield bimContext.getChildren(Constant_1.GEO_EQUIPMENT_RELATION);\n        dico[bimFileId] = bimObjs;\n        return bimObjs;\n    });\n}\nexports.getBimObjsOfBimFileId = getBimObjsOfBimFileId;\n//# sourceMappingURL=getBimObjsOfBimFileId.js.map","import type { SpinalNode } from 'spinal-model-graph';\nimport { getBimContextByBimFileId } from '../../utils';\nimport { GEO_EQUIPMENT_RELATION } from '../../../Constant';\n\nexport async function getBimObjsOfBimFileId(\n  dico: Record<string, SpinalNode[]>,\n  bimFileId: string\n): Promise<SpinalNode[]> {\n  const _bimObjs = dico[bimFileId];\n  if (_bimObjs) return _bimObjs;\n  const bimContext = await getBimContextByBimFileId(bimFileId);\n  const bimObjs = await bimContext.getChildren(GEO_EQUIPMENT_RELATION);\n  dico[bimFileId] = bimObjs;\n  return bimObjs;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCmdProjItm = void 0;\nconst getCategory_1 = require(\"./getCategory\");\nconst getBimFileIdByModelId_1 = require(\"../../utils/projection/getBimFileIdByModelId\");\nfunction createCmdProjItm(target, auProp, pNId, centerPos, flagWarining) {\n    const bimFileId = (0, getBimFileIdByModelId_1.getBimFileIdByModelId)(auProp.modelId);\n    const itm = target.find((it) => it.bimFileId === bimFileId && pNId === it.pNId);\n    const revitCat = (0, getCategory_1.getCategory)(auProp);\n    if (itm) {\n        const tmp = itm.data.find((it) => it.dbid === auProp.dbId);\n        if (!tmp) {\n            itm.data.push({\n                dbid: auProp.dbId,\n                externalId: auProp.externalId,\n                name: auProp.name,\n                revitCat: revitCat.displayValue,\n                centerPos,\n                flagWarining,\n            });\n        }\n    }\n    else {\n        target.push({\n            type: 'CmdProjection',\n            pNId,\n            bimFileId,\n            data: [\n                {\n                    dbid: auProp.dbId,\n                    externalId: auProp.externalId,\n                    name: auProp.name,\n                    revitCat: revitCat.displayValue,\n                    centerPos,\n                    flagWarining,\n                },\n            ],\n        });\n    }\n}\nexports.createCmdProjItm = createCmdProjItm;\n//# sourceMappingURL=createCmdProjItm.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces';\nimport type { ICmdProjection } from '../../interfaces/ICmdProjection';\nimport { getCategory } from './getCategory';\nimport { getBimFileIdByModelId } from '../../utils/projection/getBimFileIdByModelId';\n\nexport function createCmdProjItm(\n  target: ICmdProjection[],\n  auProp: AuProps,\n  pNId: string,\n  centerPos: string,\n  flagWarining: boolean\n) {\n  const bimFileId = getBimFileIdByModelId(auProp.modelId);\n  const itm = target.find(\n    (it) => it.bimFileId === bimFileId && pNId === it.pNId\n  );\n  const revitCat = getCategory(auProp);\n  if (itm) {\n    const tmp = itm.data.find((it) => it.dbid === auProp.dbId);\n    if (!tmp) {\n      itm.data.push({\n        dbid: auProp.dbId,\n        externalId: auProp.externalId,\n        name: auProp.name,\n        revitCat: revitCat.displayValue,\n        centerPos,\n        flagWarining,\n      });\n    }\n  } else {\n    target.push({\n      type: 'CmdProjection',\n      pNId,\n      bimFileId,\n      data: [\n        {\n          dbid: auProp.dbId,\n          externalId: auProp.externalId,\n          name: auProp.name,\n          revitCat: revitCat.displayValue,\n          centerPos,\n          flagWarining,\n        },\n      ],\n    });\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeCmds = void 0;\nconst compress_json_1 = require(\"compress-json\");\nconst pako_1 = require(\"pako\");\nfunction decodeCmds(compressed) {\n    const ungzip = (0, pako_1.inflate)(compressed, { to: 'string' });\n    const reversed = (0, compress_json_1.decompress)(JSON.parse(ungzip));\n    return reversed;\n}\nexports.decodeCmds = decodeCmds;\n//# sourceMappingURL=decodeCmds.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { decompress } from 'compress-json';\nimport { inflate } from 'pako';\n\nexport function decodeCmds(compressed: Uint8Array) {\n  const ungzip = inflate(compressed, { to: 'string' });\n  const reversed = decompress(JSON.parse(ungzip));\n  return reversed;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* for direct usage */\nvar core_1 = require(\"./core\");\nexports.compress = core_1.compress;\nexports.decompress = core_1.decompress;\n/* for custom wrapper */\nvar core_2 = require(\"./core\");\nexports.decode = core_2.decode;\nvar memory_1 = require(\"./memory\");\nexports.addValue = memory_1.addValue;\n/* to remove undefined object fields */\nvar helpers_1 = require(\"./helpers\");\nexports.trimUndefined = helpers_1.trimUndefined;\nexports.trimUndefinedRecursively = helpers_1.trimUndefinedRecursively;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = require(\"./debug\");\nconst encode_1 = require(\"./encode\");\nconst memory_1 = require(\"./memory\");\nfunction compress(o) {\n    const mem = memory_1.makeInMemoryMemory();\n    const root = memory_1.addValue(mem, o, undefined);\n    const values = memory_1.memToValues(mem);\n    return [values, root];\n}\nexports.compress = compress;\nfunction decodeObject(values, s) {\n    if (s === 'o|') {\n        return {};\n    }\n    const o = {};\n    const vs = s.split('|');\n    const key_id = vs[1];\n    let keys = decode(values, key_id);\n    const n = vs.length;\n    if (n - 2 === 1 && !Array.isArray(keys)) {\n        // single-key object using existing value as key\n        keys = [keys];\n    }\n    for (let i = 2; i < n; i++) {\n        const k = keys[i - 2];\n        let v = vs[i];\n        v = decode(values, v);\n        o[k] = v;\n    }\n    return o;\n}\nfunction decodeArray(values, s) {\n    if (s === 'a|') {\n        return [];\n    }\n    const vs = s.split('|');\n    const n = vs.length - 1;\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        let v = vs[i + 1];\n        v = decode(values, v);\n        xs[i] = v;\n    }\n    return xs;\n}\nfunction decode(values, key) {\n    if (key === '' || key === '_') {\n        return null;\n    }\n    const id = encode_1.decodeKey(key);\n    const v = values[id];\n    if (v === null) {\n        return v;\n    }\n    switch (typeof v) {\n        case 'undefined':\n            return v;\n        case 'number':\n            return v;\n        case 'string':\n            const prefix = v[0] + v[1];\n            switch (prefix) {\n                case 'b|':\n                    return encode_1.decodeBool(v);\n                case 'o|':\n                    return decodeObject(values, v);\n                case 'n|':\n                    return encode_1.decodeNum(v);\n                case 'a|':\n                    return decodeArray(values, v);\n                default:\n                    return encode_1.decodeStr(v);\n            }\n    }\n    return debug_1.throwUnknownDataType(v);\n}\nexports.decode = decode;\nfunction decompress(c) {\n    const [values, root] = c;\n    return decode(values, root);\n}\nexports.decompress = decompress;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getType(o) {\n    return Object.prototype.toString.call(o);\n}\nexports.getType = getType;\nfunction throwUnknownDataType(o) {\n    throw new TypeError('unsupported data type: ' + getType(o));\n}\nexports.throwUnknownDataType = throwUnknownDataType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst number_1 = require(\"./number\");\nfunction encodeNum(num) {\n    const a = 'n|' + number_1.num_to_s(num);\n    return a;\n    // let b = num.toString()\n    // return a.length < b.length ? a : num\n}\nexports.encodeNum = encodeNum;\nfunction decodeNum(s) {\n    s = s.replace('n|', '');\n    return number_1.s_to_num(s);\n}\nexports.decodeNum = decodeNum;\nfunction decodeKey(key) {\n    return typeof key === 'number' ? key : number_1.s_to_int(key);\n}\nexports.decodeKey = decodeKey;\nfunction encodeBool(b) {\n    // return 'b|' + bool_to_s(b)\n    return b ? 'b|T' : 'b|F';\n}\nexports.encodeBool = encodeBool;\nfunction decodeBool(s) {\n    switch (s) {\n        case 'b|T':\n            return true;\n        case 'b|F':\n            return false;\n    }\n    return !!s;\n}\nexports.decodeBool = decodeBool;\nfunction encodeStr(str) {\n    const prefix = str[0] + str[1];\n    switch (prefix) {\n        case 'b|':\n        case 'o|':\n        case 'n|':\n        case 'a|':\n        case 's|':\n            str = 's|' + str;\n    }\n    return str;\n}\nexports.encodeStr = encodeStr;\nfunction decodeStr(s) {\n    const prefix = s[0] + s[1];\n    return prefix === 's|' ? s.substr(2) : s;\n}\nexports.decodeStr = decodeStr;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet i_to_s = '';\nfor (let i = 0; i < 10; i++) {\n    const c = String.fromCharCode(48 + i);\n    i_to_s += c;\n}\nfor (let i = 0; i < 26; i++) {\n    const c = String.fromCharCode(65 + i);\n    i_to_s += c;\n}\nfor (let i = 0; i < 26; i++) {\n    const c = String.fromCharCode(65 + 32 + i);\n    i_to_s += c;\n}\nconst N = i_to_s.length;\nconst s_to_i = {};\nfor (let i = 0; i < N; i++) {\n    const s = i_to_s[i];\n    s_to_i[s] = i;\n}\nfunction s_to_int(s) {\n    let acc = 0;\n    let pow = 1;\n    for (let i = s.length - 1; i >= 0; i--) {\n        const c = s[i];\n        let x = s_to_i[c];\n        x *= pow;\n        acc += x;\n        pow *= N;\n    }\n    return acc;\n}\nexports.s_to_int = s_to_int;\nfunction s_to_big_int(s) {\n    let acc = BigInt(0);\n    let pow = BigInt(1);\n    const n = BigInt(N);\n    for (let i = s.length - 1; i >= 0; i--) {\n        const c = s[i];\n        let x = BigInt(s_to_i[c]);\n        x *= pow;\n        acc += x;\n        pow *= n;\n    }\n    return acc;\n}\nexports.s_to_big_int = s_to_big_int;\nfunction int_to_s(int) {\n    if (int === 0) {\n        return i_to_s[0];\n    }\n    const acc = [];\n    while (int !== 0) {\n        const i = int % N;\n        const c = i_to_s[i];\n        acc.push(c);\n        int -= i;\n        int /= N;\n    }\n    return acc.reverse().join('');\n}\nexports.int_to_s = int_to_s;\nfunction big_int_to_s(int) {\n    const zero = BigInt(0);\n    const n = BigInt(N);\n    if (int === zero) {\n        return i_to_s[0];\n    }\n    const acc = [];\n    while (int !== zero) {\n        const i = int % n;\n        const c = i_to_s[Number(i)];\n        acc.push(c);\n        int -= i;\n        int /= n;\n    }\n    return acc.reverse().join('');\n}\nexports.big_int_to_s = big_int_to_s;\nfunction reverse(s) {\n    return s.split('').reverse().join('');\n}\nfunction num_to_s(num) {\n    if (num < 0) {\n        return '-' + num_to_s(-num);\n    }\n    let [a, b] = num.toString().split('.');\n    if (!b) {\n        return int_to_s(num);\n    }\n    let c;\n    if (b) {\n        [b, c] = b.split('e');\n    }\n    a = int_str_to_s(a);\n    b = reverse(b);\n    b = int_str_to_s(b);\n    let str = a + '.' + b;\n    if (c) {\n        str += '.';\n        switch (c[0]) {\n            case '+':\n                c = c.slice(1);\n                break;\n            case '-':\n                str += '-';\n                c = c.slice(1);\n                break;\n        }\n        c = reverse(c);\n        c = int_str_to_s(c);\n        str += c;\n    }\n    return str;\n}\nexports.num_to_s = num_to_s;\nfunction int_str_to_s(int_str) {\n    const num = +int_str;\n    if (num.toString() === int_str) {\n        return int_to_s(num);\n    }\n    return ':' + big_int_to_s(BigInt(int_str));\n}\nexports.int_str_to_s = int_str_to_s;\nfunction s_to_int_str(s) {\n    if (s[0] === ':') {\n        return s_to_big_int(s.substring(1)).toString();\n    }\n    return s_to_int(s).toString();\n}\nfunction s_to_num(s) {\n    if (s[0] === '-') {\n        return -s_to_num(s.substr(1));\n    }\n    let [a, b, c] = s.split('.');\n    if (!b) {\n        return s_to_int(a);\n    }\n    a = s_to_int_str(a);\n    b = s_to_int_str(b);\n    b = reverse(b);\n    let str = a + '.' + b;\n    if (c) {\n        str += 'e';\n        let neg = false;\n        if (c[0] === '-') {\n            neg = true;\n            c = c.slice(1);\n        }\n        c = s_to_int_str(c);\n        c = reverse(c);\n        str += neg ? -c : +c;\n    }\n    return +str;\n}\nexports.s_to_num = s_to_num;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst config_1 = require(\"./config\");\nconst debug_1 = require(\"./debug\");\nconst encode_1 = require(\"./encode\");\nconst number_1 = require(\"./number\");\nfunction memToValues(mem) {\n    return mem.store.toArray();\n}\nexports.memToValues = memToValues;\nfunction makeInMemoryStore() {\n    const mem = [];\n    return {\n        forEach(cb) {\n            for (let i = 0; i < mem.length; i++) {\n                if (cb(mem[i]) === 'break') {\n                    return;\n                }\n            }\n        },\n        add(value) {\n            mem.push(value);\n        },\n        toArray() {\n            return mem;\n        },\n    };\n}\nexports.makeInMemoryStore = makeInMemoryStore;\nfunction makeInMemoryCache() {\n    const valueMem = Object.create(null);\n    const schemaMem = Object.create(null);\n    return {\n        getValue(key) {\n            return valueMem[key];\n        },\n        getSchema(key) {\n            return schemaMem[key];\n        },\n        forEachValue(cb) {\n            for (const [key, value] of Object.entries(valueMem)) {\n                if (cb(key, value) === 'break') {\n                    return;\n                }\n            }\n        },\n        forEachSchema(cb) {\n            for (const [key, value] of Object.entries(schemaMem)) {\n                if (cb(key, value) === 'break') {\n                    return;\n                }\n            }\n        },\n        setValue(key, value) {\n            valueMem[key] = value;\n        },\n        setSchema(key, value) {\n            schemaMem[key] = value;\n        },\n        hasValue(key) {\n            return key in valueMem;\n        },\n        hasSchema(key) {\n            return key in schemaMem;\n        },\n    };\n}\nexports.makeInMemoryCache = makeInMemoryCache;\nfunction makeInMemoryMemory() {\n    return {\n        store: makeInMemoryStore(),\n        cache: makeInMemoryCache(),\n        keyCount: 0,\n    };\n}\nexports.makeInMemoryMemory = makeInMemoryMemory;\nfunction getValueKey(mem, value) {\n    if (mem.cache.hasValue(value)) {\n        return mem.cache.getValue(value);\n    }\n    const id = mem.keyCount++;\n    const key = number_1.num_to_s(id);\n    mem.store.add(value);\n    mem.cache.setValue(value, key);\n    return key;\n}\n/** @remark in-place sort the keys */\nfunction getSchema(mem, keys) {\n    if (config_1.config.sort_key) {\n        keys.sort();\n    }\n    const schema = keys.join(',');\n    if (mem.cache.hasSchema(schema)) {\n        return mem.cache.getSchema(schema);\n    }\n    const key_id = addValue(mem, keys, undefined);\n    mem.cache.setSchema(schema, key_id);\n    return key_id;\n}\nfunction addValue(mem, o, parent) {\n    if (o === null) {\n        return '';\n    }\n    switch (typeof o) {\n        case 'undefined':\n            if (Array.isArray(parent)) {\n                return addValue(mem, null, parent);\n            }\n            break;\n        case 'object':\n            if (o === null) {\n                return getValueKey(mem, null);\n            }\n            if (Array.isArray(o)) {\n                let acc = 'a';\n                for (let i = 0; i < o.length; i++) {\n                    const v = o[i];\n                    const key = v === null ? '_' : addValue(mem, v, o);\n                    acc += '|' + key;\n                }\n                if (acc === 'a') {\n                    acc = 'a|';\n                }\n                return getValueKey(mem, acc);\n            }\n            else {\n                const keys = Object.keys(o);\n                if (keys.length === 0) {\n                    return getValueKey(mem, 'o|');\n                }\n                let acc = 'o';\n                const key_id = getSchema(mem, keys);\n                acc += '|' + key_id;\n                for (const key of keys) {\n                    const value = o[key];\n                    const v = addValue(mem, value, o);\n                    acc += '|' + v;\n                }\n                return getValueKey(mem, acc);\n            }\n        case 'boolean':\n            return getValueKey(mem, encode_1.encodeBool(o));\n        case 'number':\n            return getValueKey(mem, encode_1.encodeNum(o));\n        case 'string':\n            return getValueKey(mem, encode_1.encodeStr(o));\n    }\n    return debug_1.throwUnknownDataType(o);\n}\nexports.addValue = addValue;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.config = {\n    sort_key: false,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction trimUndefined(object) {\n    for (const key in object) {\n        if (object[key] === undefined) {\n            delete object[key];\n        }\n    }\n}\nexports.trimUndefined = trimUndefined;\nfunction trimUndefinedRecursively(object) {\n    trimUndefinedRecursivelyLoop(object, new Set());\n}\nexports.trimUndefinedRecursively = trimUndefinedRecursively;\nfunction trimUndefinedRecursivelyLoop(object, tracks) {\n    tracks.add(object);\n    for (const key in object) {\n        if (object[key] === undefined) {\n            delete object[key];\n        }\n        else {\n            const value = object[key];\n            if (value && typeof value === 'object' && !tracks.has(value)) {\n                trimUndefinedRecursivelyLoop(value, tracks);\n            }\n        }\n    }\n}\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCmdServId = void 0;\nconst constant_1 = require(\"../../constant\");\nfunction getCmdServId(node) {\n    var _a;\n    if (node.info.type.get() !== constant_1.GENERATION_TYPE)\n        throw new Error(`getCmd, spinalnode in agument is not of type ${constant_1.GENERATION_TYPE}`);\n    if (!node.element)\n        throw new Error(`getCmd, spinalnode in agument have no Element`);\n    return ((_a = node.element.ptr.data.model) === null || _a === void 0 ? void 0 : _a._server_id) || node.element.ptr.data.value;\n}\nexports.getCmdServId = getCmdServId;\n//# sourceMappingURL=getCmdServId.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport type { Path } from 'spinal-core-connectorjs';\nimport { GENERATION_TYPE } from '../../constant';\n\nexport function getCmdServId(node: SpinalNode<Path>): number {\n  if (node.info.type.get() !== GENERATION_TYPE)\n    throw new Error(\n      `getCmd, spinalnode in agument is not of type ${GENERATION_TYPE}`\n    );\n  if (!node.element)\n    throw new Error(`getCmd, spinalnode in agument have no Element`);\n  return node.element.ptr.data.model?._server_id || node.element.ptr.data.value;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveCmdsGenerateGeo = void 0;\nconst constant_1 = require(\"../../constant\");\nconst saveCmds_1 = require(\"./saveCmds\");\nfunction saveCmdsGenerateGeo(json, local = true) {\n    return (0, saveCmds_1.saveCmds)(json, constant_1.GENERATION_GEO_TYPE, local);\n}\nexports.saveCmdsGenerateGeo = saveCmdsGenerateGeo;\n//# sourceMappingURL=saveCmdsGenerateGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { GENERATION_GEO_TYPE } from '../../constant';\nimport { saveCmds } from './saveCmds';\n\nexport function saveCmdsGenerateGeo(json: object, local = true) {\n  return saveCmds(json, GENERATION_GEO_TYPE, local);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveCmds = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst compress_json_1 = require(\"compress-json\");\nconst pako_1 = require(\"pako\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst constant_1 = require(\"../../constant\");\nconst getContextGeneration_1 = require(\"./getContextGeneration\");\nconst utils_1 = require(\"../../utils\");\nfunction saveCmds(json, generationType, local) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const context = yield (0, getContextGeneration_1.getContextGeneration)();\n        (0, compress_json_1.trimUndefinedRecursively)(json);\n        const compressed = (0, pako_1.deflate)(JSON.stringify((0, compress_json_1.compress)(json)));\n        const p = new spinal_core_connectorjs_1.Path();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        p.file = compressed;\n        p.remaining.set(compressed.length);\n        p.to_upload.set(compressed.length);\n        const node = new spinal_model_graph_1.SpinalNode(`${generationType}-${new Date().toISOString()}`, constant_1.GENERATION_TYPE, p);\n        (0, utils_1.addNodeGraphService)(node);\n        node.info.add_attr('generationType', generationType);\n        node.info.add_attr('local', local);\n        yield context.addChildInContext(node, constant_1.GENERATION_RELATION);\n        return { node, context, data: p };\n    });\n}\nexports.saveCmds = saveCmds;\n//# sourceMappingURL=saveCmds.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport { compress, trimUndefinedRecursively } from 'compress-json';\nimport { deflate } from 'pako';\nimport { Path } from 'spinal-core-connectorjs';\nimport { GENERATION_RELATION, GENERATION_TYPE } from '../../constant';\nimport { getContextGeneration } from './getContextGeneration';\nimport { addNodeGraphService } from '../../utils';\n\nexport async function saveCmds(\n  json: object,\n  generationType: string,\n  local: boolean\n): Promise<{ node: SpinalNode<Path>; context: SpinalContext; data: Path }> {\n  const context = await getContextGeneration();\n  trimUndefinedRecursively(json);\n  const compressed = deflate(JSON.stringify(compress(json)));\n  const p = new Path();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  p.file = <any>compressed;\n  p.remaining.set(compressed.length);\n  p.to_upload.set(compressed.length);\n  const node = new SpinalNode(\n    `${generationType}-${new Date().toISOString()}`,\n    GENERATION_TYPE,\n    p\n  );\n  addNodeGraphService(node);\n  node.info.add_attr('generationType', generationType);\n  node.info.add_attr('local', local);\n  await context.addChildInContext(node, GENERATION_RELATION);\n  return { node, context, data: p };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContextGeneration = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst graphservice_1 = require(\"../../utils/graphservice\");\nconst constant_1 = require(\"../../constant\");\nfunction getContextGeneration() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const graph = (0, graphservice_1.getGraph)();\n        const contextRes = yield graph.getContext(constant_1.GENERATION_CONTEXT_NAME);\n        if (contextRes)\n            return contextRes;\n        const context = new spinal_model_graph_1.SpinalContext(constant_1.GENERATION_CONTEXT_NAME, constant_1.GENERATION_CONTEXT_TYPE);\n        yield graph.addContext(context);\n        (0, graphservice_1.addNodeGraphService)(context);\n        return context;\n    });\n}\nexports.getContextGeneration = getContextGeneration;\n//# sourceMappingURL=getContextGeneration.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalContext } from 'spinal-model-graph';\nimport { addNodeGraphService, getGraph } from '../../utils/graphservice';\nimport {\n  GENERATION_CONTEXT_NAME,\n  GENERATION_CONTEXT_TYPE,\n} from '../../constant';\n\nexport async function getContextGeneration(): Promise<SpinalContext> {\n  const graph = getGraph();\n  const contextRes: SpinalContext = await graph.getContext(\n    GENERATION_CONTEXT_NAME\n  );\n  if (contextRes) return contextRes;\n  const context = new SpinalContext(\n    GENERATION_CONTEXT_NAME,\n    GENERATION_CONTEXT_TYPE\n  );\n  await graph.addContext(context);\n  addNodeGraphService(context);\n  return context;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveCmdsProjectionGeo = void 0;\nconst constant_1 = require(\"../../constant\");\nconst saveCmds_1 = require(\"./saveCmds\");\nfunction saveCmdsProjectionGeo(json, local = true) {\n    return (0, saveCmds_1.saveCmds)(json, constant_1.GENERATION_PROJECTION_TYPE, local);\n}\nexports.saveCmdsProjectionGeo = saveCmdsProjectionGeo;\n//# sourceMappingURL=saveCmdsProjectionGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { GENERATION_PROJECTION_TYPE } from '../../constant';\nimport { saveCmds } from './saveCmds';\n\nexport function saveCmdsProjectionGeo(json: object, local = true) {\n  return saveCmds(json, GENERATION_PROJECTION_TYPE, local);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCmdProjectionForManualAssing = void 0;\nconst consumeBatch_1 = require(\"../../../utils/consumeBatch\");\nconst utils_1 = require(\"../../utils\");\nconst getProperties_1 = require(\"../../utils/projection/getProperties\");\nconst createCmdNotFoundItm_1 = require(\"./createCmdNotFoundItm\");\nconst createCmdProjItm_1 = require(\"./createCmdProjItm\");\nconst getCenterPos_1 = require(\"./getCenterPos\");\nfunction createCmdProjectionForManualAssing(warnArr, errorArr) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = [];\n        const resMiss = [];\n        const proms = [];\n        for (const warn of warnArr) {\n            const bimObjectDbId = warn.dbid;\n            proms.push(() => handleWarnCmd(warn, bimObjectDbId, res));\n        }\n        for (const err of errorArr) {\n            const bimObjectDbId = err.dbid;\n            proms.push(() => handleErrCmd(err, bimObjectDbId, res, resMiss));\n        }\n        yield (0, consumeBatch_1.consumeBatch)(proms, 20, console.log.bind(null, 'createCmdProjectionForManualAssing %d/%d'));\n        return { cmd: res, cmdMiss: resMiss };\n    });\n}\nexports.createCmdProjectionForManualAssing = createCmdProjectionForManualAssing;\nfunction handleErrCmd(err, bimObjectDbId, res, resMiss) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimObjectModel = (0, utils_1.getModelByBimFileIdLoaded)(err.bimFileId);\n        const auProp = yield (0, getProperties_1.getProperties)(bimObjectModel, bimObjectDbId);\n        const centerPos = yield (0, getCenterPos_1.getCenterPos)(auProp);\n        if (err.validId) {\n            (0, createCmdProjItm_1.createCmdProjItm)(res, auProp, err.validId, centerPos, false);\n        }\n        else {\n            (0, createCmdNotFoundItm_1.createCmdNotFoundItm)(resMiss, auProp, centerPos);\n        }\n    });\n}\nfunction handleWarnCmd(warn, bimObjectDbId, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimObjectModel = (0, utils_1.getModelByBimFileIdLoaded)(warn.bimFileId);\n        const auProp = yield (0, getProperties_1.getProperties)(bimObjectModel, bimObjectDbId);\n        const centerPos = yield (0, getCenterPos_1.getCenterPos)(auProp);\n        if (warn.validId) {\n            (0, createCmdProjItm_1.createCmdProjItm)(res, auProp, warn.validId, centerPos, false);\n        }\n        else {\n            (0, createCmdProjItm_1.createCmdProjItm)(res, auProp, warn.PNId, centerPos, true);\n        }\n    });\n}\n//# sourceMappingURL=createCmdProjectionForManualAssing.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { consumeBatch } from '../../../utils/consumeBatch';\nimport type { ICmdMissing } from '../../interfaces/ICmdMissing';\nimport type { ICmdProjection } from '../../interfaces/ICmdProjection';\nimport type { IManualAssingData } from '../../interfaces/IManualAssingData';\nimport { getModelByBimFileIdLoaded } from '../../utils';\nimport { getProperties } from '../../utils/projection/getProperties';\nimport { createCmdNotFoundItm } from './createCmdNotFoundItm';\nimport { createCmdProjItm } from './createCmdProjItm';\nimport { getCenterPos } from './getCenterPos';\n\nexport async function createCmdProjectionForManualAssing(\n  warnArr: IManualAssingData[],\n  errorArr: IManualAssingData[]\n) {\n  const res: ICmdProjection[] = [];\n  const resMiss: ICmdMissing[] = [];\n  const proms = [];\n  for (const warn of warnArr) {\n    const bimObjectDbId = warn.dbid;\n    proms.push(() => handleWarnCmd(warn, bimObjectDbId, res));\n  }\n  for (const err of errorArr) {\n    const bimObjectDbId = err.dbid;\n    proms.push(() => handleErrCmd(err, bimObjectDbId, res, resMiss));\n  }\n  await consumeBatch(\n    proms,\n    20,\n    console.log.bind(null, 'createCmdProjectionForManualAssing %d/%d')\n  );\n  return { cmd: res, cmdMiss: resMiss };\n}\n\nasync function handleErrCmd(\n  err: IManualAssingData,\n  bimObjectDbId: number,\n  res: ICmdProjection[],\n  resMiss: ICmdMissing[]\n) {\n  const bimObjectModel = getModelByBimFileIdLoaded(err.bimFileId);\n  const auProp = await getProperties(bimObjectModel, bimObjectDbId);\n  const centerPos = await getCenterPos(auProp);\n  if (err.validId) {\n    createCmdProjItm(res, auProp, err.validId, centerPos, false);\n  } else {\n    createCmdNotFoundItm(resMiss, auProp, centerPos);\n  }\n}\n\nasync function handleWarnCmd(\n  warn: IManualAssingData,\n  bimObjectDbId: number,\n  res: ICmdProjection[]\n) {\n  const bimObjectModel = getModelByBimFileIdLoaded(warn.bimFileId);\n  const auProp = await getProperties(bimObjectModel, bimObjectDbId);\n  const centerPos = await getCenterPos(auProp);\n  if (warn.validId) {\n    createCmdProjItm(res, auProp, warn.validId, centerPos, false);\n  } else {\n    createCmdProjItm(res, auProp, warn.PNId, centerPos, true);\n  }\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n__exportStar(require(\"./checkDiffObj\"), exports);\n__exportStar(require(\"./diffBimObjs\"), exports);\n__exportStar(require(\"./diffFloorWithContextGeo\"), exports);\n__exportStar(require(\"./diffInfoAttr\"), exports);\n__exportStar(require(\"./diffRoomChildren\"), exports);\n__exportStar(require(\"./findNodeArchiWithSpinalNode\"), exports);\n__exportStar(require(\"./floorArchiHasChildren\"), exports);\n__exportStar(require(\"./getDiffRefFloor\"), exports);\n__exportStar(require(\"./getFloorFromContext\"), exports);\n__exportStar(require(\"./getNodeFromGeo\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexport * from './checkDiffObj';\nexport * from './diffBimObjs';\nexport * from './diffFloorWithContextGeo';\nexport * from './diffInfoAttr';\nexport * from './diffRoomChildren';\nexport * from './findNodeArchiWithSpinalNode';\nexport * from './floorArchiHasChildren';\nexport * from './getDiffRefFloor';\nexport * from './getFloorFromContext';\nexport * from './getNodeFromGeo';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkDiffObj = void 0;\nfunction checkDiffObj(result, label, nodeValue, archiValue, unit) {\n    if (nodeValue != archiValue) {\n        const p = {\n            label,\n            nodeValue,\n            archiValue,\n        };\n        if (unit)\n            Object.assign(p, { unit });\n        result.push(p);\n    }\n}\nexports.checkDiffObj = checkDiffObj;\n//# sourceMappingURL=checkDiffObj.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IDiffObj } from '../interfaces/IGetArchi';\n\nexport function checkDiffObj(\n  result: IDiffObj[],\n  label: string,\n  nodeValue: string | number | boolean,\n  archiValue: string | number,\n  unit?: string\n): void {\n  if (nodeValue != archiValue) {\n    const p = {\n      label,\n      nodeValue,\n      archiValue,\n    };\n    if (unit) Object.assign(p, { unit });\n    result.push(p);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diffBimObjs = void 0;\nconst IGetArchi_1 = require(\"../interfaces/IGetArchi\");\nconst getNodeFromGeo_1 = require(\"./getNodeFromGeo\");\nconst findNodeArchiWithSpinalNode_1 = require(\"./findNodeArchiWithSpinalNode\");\nfunction diffBimObjs(bimObjInfos, bimObjNodes, manualAssingment) {\n    const newBimObj = [];\n    const delBimObj = [];\n    for (const bimObjInfo of bimObjInfos) {\n        const node = (0, getNodeFromGeo_1.getNodeFromGeo)(bimObjNodes, bimObjInfo, manualAssingment);\n        if (!node) {\n            // not found\n            newBimObj.push(bimObjInfo);\n            bimObjInfo.modificationType = IGetArchi_1.EModificationType.create;\n            continue;\n        }\n    }\n    for (const bimObjNode of bimObjNodes) {\n        const nodeArchi = (0, findNodeArchiWithSpinalNode_1.findNodeArchiWithSpinalNode)(bimObjNode, bimObjInfos, manualAssingment);\n        if (nodeArchi === undefined)\n            delBimObj.push(bimObjNode._server_id);\n    }\n    return { newBimObj, delBimObj };\n}\nexports.diffBimObjs = diffBimObjs;\n//# sourceMappingURL=diffBimObjs.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport {\n  EModificationType,\n  type IDiffBimObj,\n  type INodeInfo,\n  type TManualAssingment,\n} from '../interfaces/IGetArchi';\nimport { getNodeFromGeo } from './getNodeFromGeo';\nimport { findNodeArchiWithSpinalNode } from './findNodeArchiWithSpinalNode';\n\nexport function diffBimObjs(\n  bimObjInfos: INodeInfo[],\n  bimObjNodes: SpinalNode[],\n  manualAssingment: TManualAssingment\n): IDiffBimObj {\n  const newBimObj: INodeInfo[] = [];\n  const delBimObj: number[] = [];\n\n  for (const bimObjInfo of bimObjInfos) {\n    const node = getNodeFromGeo(bimObjNodes, bimObjInfo, manualAssingment);\n    if (!node) {\n      // not found\n      newBimObj.push(bimObjInfo);\n      bimObjInfo.modificationType = EModificationType.create;\n      continue;\n    }\n  }\n  for (const bimObjNode of bimObjNodes) {\n    const nodeArchi = findNodeArchiWithSpinalNode(\n      bimObjNode,\n      bimObjInfos,\n      manualAssingment\n    );\n    if (nodeArchi === undefined) delBimObj.push(bimObjNode._server_id);\n  }\n  return { newBimObj, delBimObj };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNodeFromGeo = void 0;\nconst getNodeInfoArchiAttr_1 = require(\"../utils/archi/getNodeInfoArchiAttr\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction getNodeFromGeo(geoNodes, nodeInfo, manualAssingment) {\n    var _a, _b;\n    // check ManualAssingment retrun it if found;\n    const serverId = manualAssingment.get(nodeInfo.externalId);\n    if (serverId)\n        return spinal_core_connectorjs_1.FileSystem._objects[serverId];\n    // not in manualAssing\n    // search via externalId\n    for (const geoRoomNode of geoNodes) {\n        if (((_a = geoRoomNode.info.externalId) === null || _a === void 0 ? void 0 : _a.get()) === nodeInfo.externalId)\n            return geoRoomNode;\n    }\n    // search via name\n    const roomArchiName = (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(nodeInfo, 'name');\n    for (const geoRoomNode of geoNodes) {\n        if (((_b = geoRoomNode.info.externalId) === null || _b === void 0 ? void 0 : _b.get()) === roomArchiName)\n            return geoRoomNode;\n    }\n}\nexports.getNodeFromGeo = getNodeFromGeo;\n//# sourceMappingURL=getNodeFromGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport type { INodeInfo, TManualAssingment } from '../interfaces/IGetArchi';\nimport { getNodeInfoArchiAttr } from '../utils/archi/getNodeInfoArchiAttr';\nimport { FileSystem } from 'spinal-core-connectorjs';\n\nexport function getNodeFromGeo(\n  geoNodes: SpinalNode[],\n  nodeInfo: INodeInfo,\n  manualAssingment: TManualAssingment\n): SpinalNode {\n  // check ManualAssingment retrun it if found;\n  const serverId = manualAssingment.get(nodeInfo.externalId);\n  if (serverId) return <SpinalNode>FileSystem._objects[serverId];\n\n  // not in manualAssing\n  // search via externalId\n  for (const geoRoomNode of geoNodes) {\n    if (geoRoomNode.info.externalId?.get() === nodeInfo.externalId)\n      return geoRoomNode;\n  }\n  // search via name\n  const roomArchiName = <string>getNodeInfoArchiAttr(nodeInfo, 'name');\n  for (const geoRoomNode of geoNodes) {\n    if (geoRoomNode.info.externalId?.get() === roomArchiName)\n      return geoRoomNode;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findNodeArchiWithSpinalNode = void 0;\nconst getNodeInfoArchiAttr_1 = require(\"../utils/archi/getNodeInfoArchiAttr\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction findNodeArchiWithSpinalNode(node, nodeInfosArchi, manualAssingment) {\n    var _a, _b;\n    // check ManualAssingment retrun it if found;\n    for (const [extId, serverId] of manualAssingment) {\n        if (spinal_core_connectorjs_1.FileSystem._objects[serverId] === node) {\n            for (const nodeArchi of nodeInfosArchi) {\n                if (nodeArchi.externalId === extId) {\n                    return nodeArchi;\n                }\n            }\n        }\n    }\n    // search via externalId\n    for (const nodeArchi1 of nodeInfosArchi) {\n        if (nodeArchi1.externalId === ((_a = node.info.externalId) === null || _a === void 0 ? void 0 : _a.get())) {\n            return nodeArchi1;\n        }\n    }\n    // search via name\n    for (const nodeArchi2 of nodeInfosArchi) {\n        const nodeArchiName = (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(nodeArchi2, 'name');\n        if (nodeArchiName === ((_b = node.info.name) === null || _b === void 0 ? void 0 : _b.get())) {\n            return nodeArchi2;\n        }\n    }\n}\nexports.findNodeArchiWithSpinalNode = findNodeArchiWithSpinalNode;\n//# sourceMappingURL=findNodeArchiWithSpinalNode.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport type { INodeInfo, TManualAssingment } from '../interfaces/IGetArchi';\nimport { getNodeInfoArchiAttr } from '../utils/archi/getNodeInfoArchiAttr';\nimport { FileSystem } from 'spinal-core-connectorjs';\n\nexport function findNodeArchiWithSpinalNode(\n  node: SpinalNode,\n  nodeInfosArchi: INodeInfo[],\n  manualAssingment: TManualAssingment\n): INodeInfo {\n  // check ManualAssingment retrun it if found;\n  for (const [extId, serverId] of manualAssingment) {\n    if (FileSystem._objects[serverId] === node) {\n      for (const nodeArchi of nodeInfosArchi) {\n        if (nodeArchi.externalId === extId) {\n          return nodeArchi;\n        }\n      }\n    }\n  }\n  // search via externalId\n  for (const nodeArchi1 of nodeInfosArchi) {\n    if (nodeArchi1.externalId === node.info.externalId?.get()) {\n      return nodeArchi1;\n    }\n  }\n\n  // search via name\n  for (const nodeArchi2 of nodeInfosArchi) {\n    const nodeArchiName = <string>getNodeInfoArchiAttr(nodeArchi2, 'name');\n    if (nodeArchiName === node.info.name?.get()) {\n      return nodeArchi2;\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diffFloorWithContextGeo = void 0;\nconst IGetArchi_1 = require(\"../interfaces/IGetArchi\");\nconst getFloorFromContext_1 = require(\"./getFloorFromContext\");\nconst getDiffRefFloor_1 = require(\"./getDiffRefFloor\");\nconst diffRoomChildren_1 = require(\"./diffRoomChildren\");\nconst diffInfoAttr_1 = require(\"./diffInfoAttr\");\nfunction diffFloorWithContextGeo(floorArchi, contextGeo, buildingServerId, manualAssingment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const floorNode = yield (0, getFloorFromContext_1.getFloorFromContext)(contextGeo, buildingServerId, floorArchi, manualAssingment);\n        if (!floorNode) {\n            // floor not found\n            floorArchi.properties.modificationType = IGetArchi_1.EModificationType.create;\n            return undefined;\n        }\n        // archi exist in context\n        const [diffInfo, diffRoom, diffRef] = yield Promise.all([\n            // -> diff archi info\n            (0, diffInfoAttr_1.diffInfoAttr)(floorArchi.properties, floorNode),\n            // -> diff archi children\n            (0, diffRoomChildren_1.diffRoomChildren)(floorNode, contextGeo, floorArchi, manualAssingment),\n            // diff structures\n            (0, getDiffRefFloor_1.getDiffRefFloor)(floorNode, floorArchi, manualAssingment),\n        ]);\n        return {\n            diffInfo,\n            diffRoom,\n            diffRef,\n        };\n    });\n}\nexports.diffFloorWithContextGeo = diffFloorWithContextGeo;\n//# sourceMappingURL=diffFloorWithContextGeo.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalContext } from 'spinal-model-graph';\nimport {\n  EModificationType,\n  type IDiffFloor,\n  type IFloorArchi,\n  type TManualAssingment,\n} from '../interfaces/IGetArchi';\nimport { getFloorFromContext } from './getFloorFromContext';\nimport { getDiffRefFloor } from './getDiffRefFloor';\nimport { diffRoomChildren } from './diffRoomChildren';\nimport { diffInfoAttr } from './diffInfoAttr';\n\nexport async function diffFloorWithContextGeo(\n  floorArchi: IFloorArchi,\n  contextGeo: SpinalContext,\n  buildingServerId: number,\n  manualAssingment: TManualAssingment\n): Promise<IDiffFloor> {\n  const floorNode = await getFloorFromContext(\n    contextGeo,\n    buildingServerId,\n    floorArchi,\n    manualAssingment\n  );\n  if (!floorNode) {\n    // floor not found\n    floorArchi.properties.modificationType = EModificationType.create;\n    return undefined;\n  }\n  // archi exist in context\n\n  const [diffInfo, diffRoom, diffRef] = await Promise.all([\n    // -> diff archi info\n    diffInfoAttr(floorArchi.properties, floorNode),\n    // -> diff archi children\n    diffRoomChildren(floorNode, contextGeo, floorArchi, manualAssingment),\n    // diff structures\n    getDiffRefFloor(floorNode, floorArchi, manualAssingment),\n  ]);\n  return {\n    diffInfo,\n    diffRoom,\n    diffRef,\n  };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFloorFromContext = void 0;\nconst getNodeInfoArchiAttr_1 = require(\"../utils/archi/getNodeInfoArchiAttr\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nfunction getFloorFromContext(contextGeo, buildingServId, floorArchi, manualAssingment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // check ManualAssingment retrun it if found;\n        const serverId = manualAssingment.get(floorArchi.properties.externalId);\n        if (serverId)\n            return spinal_core_connectorjs_1.FileSystem._objects[serverId];\n        // not in manualAssing; get building floors\n        const buildings = yield contextGeo.getChildrenInContext(contextGeo);\n        const buildingsFloors = yield Promise.all(buildings.map((building) => {\n            if (building._server_id === buildingServId)\n                return building.getChildrenInContext(contextGeo);\n        }));\n        // search via externalId\n        for (const buildingFloors of buildingsFloors) {\n            if (buildingFloors)\n                for (const floorNode of buildingFloors) {\n                    if (floorNode.info.externalId.get() === floorArchi.properties.externalId)\n                        return floorNode;\n                }\n        }\n        // search via name\n        const floorArchiName = ((0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(floorArchi.properties, 'name'));\n        for (const buildingFloors of buildingsFloors) {\n            if (buildingFloors)\n                for (const floorNode of buildingFloors) {\n                    if (floorNode.info.name.get() === floorArchiName)\n                        return floorNode;\n                }\n        }\n    });\n}\nexports.getFloorFromContext = getFloorFromContext;\n//# sourceMappingURL=getFloorFromContext.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport type { IFloorArchi, TManualAssingment } from '../interfaces/IGetArchi';\nimport { getNodeInfoArchiAttr } from '../utils/archi/getNodeInfoArchiAttr';\nimport { FileSystem } from 'spinal-core-connectorjs';\n\nexport async function getFloorFromContext(\n  contextGeo: SpinalContext,\n  buildingServId: number,\n  floorArchi: IFloorArchi,\n  manualAssingment: TManualAssingment\n): Promise<SpinalNode> {\n  // check ManualAssingment retrun it if found;\n  const serverId = manualAssingment.get(floorArchi.properties.externalId);\n  if (serverId) return <SpinalNode>FileSystem._objects[serverId];\n\n  // not in manualAssing; get building floors\n  const buildings = await contextGeo.getChildrenInContext(contextGeo);\n  const buildingsFloors = await Promise.all(\n    buildings.map((building) => {\n      if (building._server_id === buildingServId)\n        return building.getChildrenInContext(contextGeo);\n    })\n  );\n  // search via externalId\n  for (const buildingFloors of buildingsFloors) {\n    if (buildingFloors)\n      for (const floorNode of buildingFloors) {\n        if (\n          floorNode.info.externalId.get() === floorArchi.properties.externalId\n        )\n          return floorNode;\n      }\n  }\n  // search via name\n  const floorArchiName = <string>(\n    getNodeInfoArchiAttr(floorArchi.properties, 'name')\n  );\n  for (const buildingFloors of buildingsFloors) {\n    if (buildingFloors)\n      for (const floorNode of buildingFloors) {\n        if (floorNode.info.name.get() === floorArchiName) return floorNode;\n      }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDiffRefFloor = void 0;\nconst Constant_1 = require(\"../../Constant\");\nconst diffBimObjs_1 = require(\"./diffBimObjs\");\nfunction getDiffRefFloor(floorNode, floorArchi, manualAssingment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const floorNodeRefObjs = yield floorNode.getChildren(Constant_1.GEO_REFERENCE_RELATION);\n        const structures = Object.values(floorArchi.structures).map((itm) => itm.properties);\n        const diffRef = (0, diffBimObjs_1.diffBimObjs)(structures, floorNodeRefObjs, manualAssingment);\n        return diffRef;\n    });\n}\nexports.getDiffRefFloor = getDiffRefFloor;\n//# sourceMappingURL=getDiffRefFloor.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport type {\n  IDiffBimObj,\n  IFloorArchi,\n  TManualAssingment,\n} from '../interfaces/IGetArchi';\nimport { GEO_REFERENCE_RELATION } from '../../Constant';\nimport { diffBimObjs } from './diffBimObjs';\n\nexport async function getDiffRefFloor(\n  floorNode: SpinalNode,\n  floorArchi: IFloorArchi,\n  manualAssingment: TManualAssingment\n): Promise<IDiffBimObj> {\n  const floorNodeRefObjs = await floorNode.getChildren(GEO_REFERENCE_RELATION);\n  const structures = Object.values(floorArchi.structures).map(\n    (itm) => itm.properties\n  );\n  const diffRef = diffBimObjs(structures, floorNodeRefObjs, manualAssingment);\n  return diffRef;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diffRoomChildren = void 0;\nconst IGetArchi_1 = require(\"../interfaces/IGetArchi\");\nconst getNodeFromGeo_1 = require(\"./getNodeFromGeo\");\nconst findNodeArchiWithSpinalNode_1 = require(\"./findNodeArchiWithSpinalNode\");\nconst diffInfoAttr_1 = require(\"./diffInfoAttr\");\nfunction diffRoomChildren(floorNode, contextGeo, floorArchi, manualAssingment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const updateRooms = [];\n        const newRooms = [];\n        const delRooms = [];\n        const proms = [];\n        const roomNodes = yield floorNode.getChildrenInContext(contextGeo);\n        for (const [, roomAchi] of Object.entries(floorArchi.children)) {\n            const roomNode = (0, getNodeFromGeo_1.getNodeFromGeo)(roomNodes, roomAchi.properties, manualAssingment);\n            if (!roomNode) {\n                // not found\n                newRooms.push(roomAchi);\n                roomAchi.properties.modificationType = IGetArchi_1.EModificationType.create;\n                roomAchi.properties.spinalnodeServerId = floorNode._server_id;\n                continue;\n            }\n            proms.push((0, diffInfoAttr_1.diffInfoAttr)(roomAchi.properties, roomNode).then((diff) => {\n                if (diff.diffAttr.length === 0 && diff.diffInfo.length === 0) {\n                    return;\n                }\n                updateRooms.push({\n                    roomArchi: roomAchi,\n                    diff,\n                });\n            }));\n        }\n        yield Promise.all(proms);\n        const nodeInfosArchi = Object.values(floorArchi.children).map((it) => it.properties);\n        for (const roomNode of roomNodes) {\n            const roomArchi = (0, findNodeArchiWithSpinalNode_1.findNodeArchiWithSpinalNode)(roomNode, nodeInfosArchi, manualAssingment);\n            if (roomArchi === undefined) {\n                delRooms.push(roomNode._server_id);\n            }\n        }\n        return { newRooms, updateRooms, delRooms };\n    });\n}\nexports.diffRoomChildren = diffRoomChildren;\n//# sourceMappingURL=diffRoomChildren.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport {\n  EModificationType,\n  type IDiffRoomChildren,\n  type IFloorArchi,\n  type IRoomArchi,\n  type IUpdateRoomDiff,\n  type TManualAssingment,\n} from '../interfaces/IGetArchi';\nimport { getNodeFromGeo } from './getNodeFromGeo';\nimport { findNodeArchiWithSpinalNode } from './findNodeArchiWithSpinalNode';\nimport { diffInfoAttr } from './diffInfoAttr';\n\nexport async function diffRoomChildren(\n  floorNode: SpinalNode,\n  contextGeo: SpinalContext,\n  floorArchi: IFloorArchi,\n  manualAssingment: TManualAssingment\n): Promise<IDiffRoomChildren> {\n  const updateRooms: IUpdateRoomDiff[] = [];\n  const newRooms: IRoomArchi[] = [];\n  const delRooms: number[] = [];\n  const proms: Promise<void>[] = [];\n\n  const roomNodes = await floorNode.getChildrenInContext(contextGeo);\n  for (const [, roomAchi] of Object.entries(floorArchi.children)) {\n    const roomNode = getNodeFromGeo(\n      roomNodes,\n      roomAchi.properties,\n      manualAssingment\n    );\n    if (!roomNode) {\n      // not found\n      newRooms.push(roomAchi);\n      roomAchi.properties.modificationType = EModificationType.create;\n      roomAchi.properties.spinalnodeServerId = floorNode._server_id;\n      continue;\n    }\n    proms.push(\n      diffInfoAttr(roomAchi.properties, roomNode).then((diff) => {\n        if (diff.diffAttr.length === 0 && diff.diffInfo.length === 0) {\n          return;\n        }\n        updateRooms.push({\n          roomArchi: roomAchi,\n          diff,\n        });\n      })\n    );\n  }\n\n  await Promise.all(proms);\n  const nodeInfosArchi = Object.values(floorArchi.children).map(\n    (it) => it.properties\n  );\n\n  for (const roomNode of roomNodes) {\n    const roomArchi = findNodeArchiWithSpinalNode(\n      roomNode,\n      nodeInfosArchi,\n      manualAssingment\n    );\n    if (roomArchi === undefined) {\n      delRooms.push(roomNode._server_id);\n    }\n  }\n\n  return { newRooms, updateRooms, delRooms };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diffInfoAttr = void 0;\nconst spinal_env_viewer_plugin_documentation_service_1 = require(\"spinal-env-viewer-plugin-documentation-service\");\nconst IGetArchi_1 = require(\"../interfaces/IGetArchi\");\nconst checkDiffObj_1 = require(\"./checkDiffObj\");\nconst getNodeInfoArchiAttr_1 = require(\"../utils/archi/getNodeInfoArchiAttr\");\nfunction diffInfoAttr(nodeInfo, spinalNode) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        nodeInfo.spinalnodeServerId = spinalNode._server_id;\n        nodeInfo.modificationType = 0;\n        const diffInfo = [];\n        // check dbId\n        (0, checkDiffObj_1.checkDiffObj)(diffInfo, 'dbid', (_a = spinalNode.info.dbid) === null || _a === void 0 ? void 0 : _a.get(), nodeInfo.dbId);\n        // check externalId\n        (0, checkDiffObj_1.checkDiffObj)(diffInfo, 'externalId', (_b = spinalNode.info.externalId) === null || _b === void 0 ? void 0 : _b.get(), nodeInfo.externalId);\n        // check name node\n        const name = (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(nodeInfo, 'name');\n        const number = (0, getNodeInfoArchiAttr_1.getNodeInfoArchiAttr)(nodeInfo, 'number');\n        (0, checkDiffObj_1.checkDiffObj)(diffInfo, 'name', spinalNode.info.name.get(), number ? `${number}-${name}` : name);\n        // -> diff archi attr\n        const categoryNodeSpatial = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getCategoryByName(spinalNode, 'Spatial');\n        const attrs = yield spinal_env_viewer_plugin_documentation_service_1.attributeService.getAttributesByCategory(spinalNode, categoryNodeSpatial);\n        const diffAttr = [];\n        for (const archiProps of nodeInfo.properties) {\n            if (archiProps.category === '__internalref__')\n                continue; // if level skip (will be set later)\n            let find = false;\n            for (const attr of attrs) {\n                if (archiProps.name === attr.label.get()) {\n                    (0, checkDiffObj_1.checkDiffObj)(diffAttr, archiProps.name, attr.value.get(), archiProps.value, archiProps.dataTypeContext);\n                    find = true;\n                    break;\n                }\n            }\n            if (find === false) {\n                (0, checkDiffObj_1.checkDiffObj)(diffAttr, archiProps.name, undefined, archiProps.value, archiProps.dataTypeContext);\n            }\n        }\n        if (diffInfo.length > 0) {\n            nodeInfo.modificationType =\n                nodeInfo.modificationType | IGetArchi_1.EModificationType.update;\n            nodeInfo.modificationType =\n                nodeInfo.modificationType | IGetArchi_1.EModificationType.updateNode;\n        }\n        if (diffAttr.length > 0) {\n            nodeInfo.modificationType =\n                nodeInfo.modificationType | IGetArchi_1.EModificationType.update;\n            nodeInfo.modificationType =\n                nodeInfo.modificationType | IGetArchi_1.EModificationType.updateAttr;\n        }\n        return {\n            diffInfo,\n            diffAttr,\n        };\n    });\n}\nexports.diffInfoAttr = diffInfoAttr;\n//# sourceMappingURL=diffInfoAttr.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode } from 'spinal-model-graph';\nimport { attributeService } from 'spinal-env-viewer-plugin-documentation-service';\nimport {\n  EModificationType,\n  type IDiffNodeInfoAttr,\n  type IDiffObj,\n  type INodeInfo,\n} from '../interfaces/IGetArchi';\nimport { checkDiffObj } from './checkDiffObj';\nimport { getNodeInfoArchiAttr } from '../utils/archi/getNodeInfoArchiAttr';\n\nexport async function diffInfoAttr(\n  nodeInfo: INodeInfo,\n  spinalNode: SpinalNode\n): Promise<IDiffNodeInfoAttr> {\n  nodeInfo.spinalnodeServerId = spinalNode._server_id;\n  nodeInfo.modificationType = 0;\n  const diffInfo: IDiffObj[] = [];\n  // check dbId\n  checkDiffObj(diffInfo, 'dbid', spinalNode.info.dbid?.get(), nodeInfo.dbId);\n  // check externalId\n  checkDiffObj(\n    diffInfo,\n    'externalId',\n    spinalNode.info.externalId?.get(),\n    nodeInfo.externalId\n  );\n  // check name node\n  const name = <string>getNodeInfoArchiAttr(nodeInfo, 'name');\n  const number = <string>getNodeInfoArchiAttr(nodeInfo, 'number');\n  checkDiffObj(\n    diffInfo,\n    'name',\n    spinalNode.info.name.get(),\n    number ? `${number}-${name}` : name\n  );\n\n  // -> diff archi attr\n  const categoryNodeSpatial = await attributeService.getCategoryByName(\n    spinalNode,\n    'Spatial'\n  );\n  const attrs = await attributeService.getAttributesByCategory(\n    spinalNode,\n    categoryNodeSpatial\n  );\n  const diffAttr: IDiffObj[] = [];\n  for (const archiProps of nodeInfo.properties) {\n    if (archiProps.category === '__internalref__') continue; // if level skip (will be set later)\n    let find = false;\n    for (const attr of attrs) {\n      if (archiProps.name === attr.label.get()) {\n        checkDiffObj(\n          diffAttr,\n          archiProps.name,\n          attr.value.get(),\n          archiProps.value,\n          archiProps.dataTypeContext\n        );\n        find = true;\n        break;\n      }\n    }\n    if (find === false) {\n      checkDiffObj(\n        diffAttr,\n        archiProps.name,\n        undefined,\n        archiProps.value,\n        archiProps.dataTypeContext\n      );\n    }\n  }\n\n  if (diffInfo.length > 0) {\n    nodeInfo.modificationType =\n      nodeInfo.modificationType | EModificationType.update;\n    nodeInfo.modificationType =\n      nodeInfo.modificationType | EModificationType.updateNode;\n  }\n  if (diffAttr.length > 0) {\n    nodeInfo.modificationType =\n      nodeInfo.modificationType | EModificationType.update;\n    nodeInfo.modificationType =\n      nodeInfo.modificationType | EModificationType.updateAttr;\n  }\n  return {\n    diffInfo,\n    diffAttr,\n  };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.floorArchiHasChildren = void 0;\nfunction floorArchiHasChildren(floorArchi) {\n    for (const ext in floorArchi.children) {\n        if (Object.prototype.hasOwnProperty.call(floorArchi.children, ext)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.floorArchiHasChildren = floorArchiHasChildren;\n//# sourceMappingURL=floorArchiHasChildren.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IFloorArchi } from '../interfaces/IGetArchi';\n\nexport function floorArchiHasChildren(floorArchi: IFloorArchi): boolean {\n  for (const ext in floorArchi.children) {\n    if (Object.prototype.hasOwnProperty.call(floorArchi.children, ext)) {\n      return true;\n    }\n  }\n  return false;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./projectionModels/ProjectionItemModel\"), exports);\n__exportStar(require(\"./projectionModels/ProjectionOffsetModel\"), exports);\n__exportStar(require(\"./projectionModels/ProjectionGroupItemModel\"), exports);\n__exportStar(require(\"./projectionModels/ProjectionGroupModel\"), exports);\n__exportStar(require(\"./UxUtils/addSelectionToList\"), exports);\n__exportStar(require(\"./UxUtils/PreviewCenter\"), exports);\n__exportStar(require(\"./UxUtils/addViewerSelection\"), exports);\n__exportStar(require(\"./UxUtils/addToProjectionGroup\"), exports);\n__exportStar(require(\"./UxUtils/addProjectItem\"), exports);\n__exportStar(require(\"./ProjectionItem/ProjectionGroup\"), exports);\n__exportStar(require(\"./ProjectionItem/ProjectionGroupConfig\"), exports);\n__exportStar(require(\"./ProjectionItem/ProjectionItem\"), exports);\n__exportStar(require(\"./projectionConfig/getProjectionConfig\"), exports);\n__exportStar(require(\"./projectionConfig/getConfigFromContext\"), exports);\n__exportStar(require(\"./projectionConfig/createConfigNode\"), exports);\n__exportStar(require(\"./projectionConfig/createConfigNodeAndProjGroup\"), exports);\n__exportStar(require(\"./projectionConfig/removeConfigFromContext\"), exports);\n__exportStar(require(\"./rayUtils/raycastWorker\"), exports);\n__exportStar(require(\"./rayUtils/workerManager\"), exports);\n__exportStar(require(\"./rayUtils/enumMeshTriangles\"), exports);\n__exportStar(require(\"./projection/getIntersects\"), exports);\n__exportStar(require(\"./projection/raycastItemToMesh\"), exports);\n__exportStar(require(\"./projection/mergeIntersectRes\"), exports);\n__exportStar(require(\"./projection/mergeRoomRef\"), exports);\n__exportStar(require(\"./projection/getRoomRef\"), exports);\n__exportStar(require(\"./assignFloor/getRefFloorZMinMax\"), exports);\n__exportStar(require(\"./assignFloor/getFloorChildrenDbIdOfModel\"), exports);\n__exportStar(require(\"./assignFloor/getFloorPropForModel\"), exports);\n__exportStar(require(\"./assignFloor/getFloorsDbIdOfModel\"), exports);\n__exportStar(require(\"./assignFloor/getRoomRefByFloor\"), exports);\n__exportStar(require(\"./assignView/getSpatialTree\"), exports);\n__exportStar(require(\"./assignView/getDataAssing\"), exports);\n__exportStar(require(\"./assignView/viewDataAssignInViewer\"), exports);\n__exportStar(require(\"./assignView/getRoomNameFromSelectFloor\"), exports);\n//# sourceMappingURL=index.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport * from './projectionModels/ProjectionItemModel';\nexport * from './projectionModels/ProjectionOffsetModel';\nexport * from './projectionModels/ProjectionGroupItemModel';\nexport * from './projectionModels/ProjectionGroupModel';\n\nexport * from './UxUtils/addSelectionToList';\nexport * from './UxUtils/PreviewCenter';\nexport * from './UxUtils/addViewerSelection';\nexport * from './UxUtils/addToProjectionGroup';\nexport * from './UxUtils/addProjectItem';\n\nexport * from './ProjectionItem/ProjectionGroup';\nexport * from './ProjectionItem/ProjectionGroupConfig';\nexport * from './ProjectionItem/ProjectionItem';\n\nexport * from './projectionConfig/getProjectionConfig';\nexport * from './projectionConfig/getConfigFromContext';\nexport * from './projectionConfig/createConfigNode';\nexport * from './projectionConfig/createConfigNodeAndProjGroup';\nexport * from './projectionConfig/removeConfigFromContext';\n\nexport * from './rayUtils/raycastWorker';\nexport * from './rayUtils/workerManager';\nexport * from './rayUtils/enumMeshTriangles';\n\nexport * from './projection/getIntersects';\nexport * from './projection/raycastItemToMesh';\nexport * from './projection/mergeIntersectRes';\nexport * from './projection/mergeRoomRef';\nexport * from './projection/getRoomRef';\n\nexport * from './assignFloor/getRefFloorZMinMax';\nexport * from './assignFloor/getFloorChildrenDbIdOfModel';\nexport * from './assignFloor/getFloorPropForModel';\nexport * from './assignFloor/getFloorsDbIdOfModel';\nexport * from './assignFloor/getRoomRefByFloor';\n\nexport * from './assignView/getSpatialTree';\nexport * from './assignView/getDataAssing';\nexport * from './assignView/viewDataAssignInViewer';\nexport * from './assignView/getRoomNameFromSelectFloor';\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionItemModel = void 0;\nconst ProjectionItem_1 = require(\"../ProjectionItem/ProjectionItem\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst utils_1 = require(\"../../utils\");\nconst ProjectionOffsetModel_1 = require(\"./ProjectionOffsetModel\");\nconst getExternalIdMapping_1 = require(\"../../utils/getExternalIdMapping\");\nconst getBimFileByBimFileId_1 = require(\"../../utils/getBimFileByBimFileId\");\nclass ProjectionItemModel extends spinal_core_connectorjs_1.Model {\n    constructor(projectionItem) {\n        super();\n        if (spinal_core_connectorjs_1.FileSystem._sig_server === false)\n            return;\n        this.add_attr('uid', projectionItem.uid);\n        this.add_attr('bimFileId', (0, utils_1.getBimFileIdByModelId)(projectionItem.modelId));\n        this.add_attr('offset', new ProjectionOffsetModel_1.ProjectionOffsetModel(projectionItem.offset));\n    }\n    update(projectionItem) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.uid.set(projectionItem.uid);\n            this.bimFileId.set((0, utils_1.getBimFileIdByModelId)(projectionItem.modelId));\n            this.offset.update(projectionItem.offset);\n            const model = (0, utils_1.getModelByModelId)(projectionItem.modelId);\n            const tree = model.getInstanceTree();\n            const children = (0, utils_1.getDbIdChildren)(tree, projectionItem.dbId);\n            if (children.length > 0) {\n                const path = yield (0, utils_1.getPropPath)(projectionItem.dbId, model);\n                if (typeof this.path === 'undefined') {\n                    this.add_attr('path', path);\n                }\n                else {\n                    this.path.set(path);\n                }\n            }\n            else {\n                if (typeof this.externalId === 'undefined') {\n                    this.add_attr('externalId', projectionItem.externalId);\n                }\n                else {\n                    this.externalId.set(projectionItem.externalId);\n                }\n            }\n            return this;\n        });\n    }\n    toUxModel() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = (0, utils_1.getModelByBimFileIdLoaded)(this.bimFileId.get());\n            if (!model) {\n                try {\n                    const bimFile = yield (0, getBimFileByBimFileId_1.getBimFileByBimFileId)(this.bimFileId.get());\n                    throw new Error(`Model [${bimFile.info.name.get()}] not loaded for bimFileId : ${this.bimFileId.get()}`);\n                }\n                catch (error) {\n                    console.error(error);\n                    throw error;\n                }\n            }\n            let projectionItem;\n            if (typeof this.path !== 'undefined') {\n                const path = this.path.get();\n                const props = yield (0, utils_1.getPropItemFromPropPath)(path, model);\n                if (!props) {\n                    throw new Error(`projectionItemModel [${this.uid.get()}] no item found for path : ${path}`);\n                }\n                projectionItem = new ProjectionItem_1.ProjectionItem(props.name, model.id, props.dbId, props.properties, props.externalId);\n            }\n            else {\n                const extMap = yield (0, getExternalIdMapping_1.getExternalIdMapping)(model);\n                const dbid = extMap[this.externalId.get()];\n                if (!dbid) {\n                    throw new Error(`projectionItemModel [${this.uid.get()}] skiped - no item found for externalId : ${this.externalId.get()}`);\n                }\n                const props = yield (0, utils_1.getBulkProperties)(model, [dbid]);\n                projectionItem = new ProjectionItem_1.ProjectionItem(props[0].name, model.id, dbid, props[0].properties, props[0].externalId);\n            }\n            projectionItem.uid = this.uid.get();\n            projectionItem.offset = this.offset.get();\n            return projectionItem;\n        });\n    }\n}\nexports.ProjectionItemModel = ProjectionItemModel;\nspinal_core_connectorjs_1.spinalCore.register_models(ProjectionItemModel);\n//# sourceMappingURL=ProjectionItemModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { ProjectionItem } from '../ProjectionItem/ProjectionItem';\nimport {\n  type Lst,\n  type Str,\n  FileSystem,\n  Model,\n  spinalCore,\n} from 'spinal-core-connectorjs';\nimport {\n  getBimFileIdByModelId,\n  getBulkProperties,\n  getDbIdChildren,\n  getModelByBimFileIdLoaded,\n  getModelByModelId,\n  getPropItemFromPropPath,\n  getPropPath,\n} from '../../utils';\nimport { ProjectionOffsetModel } from './ProjectionOffsetModel';\nimport { getExternalIdMapping } from '../../utils/getExternalIdMapping';\nimport { getBimFileByBimFileId } from '../../utils/getBimFileByBimFileId';\n\nexport class ProjectionItemModel extends Model {\n  offset: ProjectionOffsetModel;\n  uid: Str;\n  bimFileId: Str;\n  externalId?: Str;\n  path?: Lst<Str>;\n\n  constructor(projectionItem: ProjectionItem);\n  constructor();\n  constructor(projectionItem?: ProjectionItem) {\n    super();\n    if (FileSystem._sig_server === false) return;\n    this.add_attr('uid', projectionItem.uid);\n    this.add_attr('bimFileId', getBimFileIdByModelId(projectionItem.modelId));\n    this.add_attr('offset', new ProjectionOffsetModel(projectionItem.offset));\n  }\n\n  async update(projectionItem: ProjectionItem): Promise<this> {\n    this.uid.set(projectionItem.uid);\n    this.bimFileId.set(getBimFileIdByModelId(projectionItem.modelId));\n    this.offset.update(projectionItem.offset);\n    const model = getModelByModelId(projectionItem.modelId);\n    const tree = model.getInstanceTree();\n    const children = getDbIdChildren(tree, projectionItem.dbId);\n    if (children.length > 0) {\n      const path = await getPropPath(projectionItem.dbId, model);\n      if (typeof this.path === 'undefined') {\n        this.add_attr('path', path);\n      } else {\n        this.path.set(path);\n      }\n    } else {\n      if (typeof this.externalId === 'undefined') {\n        this.add_attr('externalId', projectionItem.externalId);\n      } else {\n        this.externalId.set(projectionItem.externalId);\n      }\n    }\n    return this;\n  }\n\n  async toUxModel(): Promise<ProjectionItem> {\n    const model = getModelByBimFileIdLoaded(this.bimFileId.get());\n    if (!model) {\n      try {\n        const bimFile = await getBimFileByBimFileId(this.bimFileId.get());\n        throw new Error(\n          `Model [${bimFile.info.name.get()}] not loaded for bimFileId : ${this.bimFileId.get()}`\n        );\n      } catch (error) {\n        console.error(error);\n        throw error;\n      }\n    }\n    let projectionItem: ProjectionItem;\n    if (typeof this.path !== 'undefined') {\n      const path = this.path.get();\n      const props = await getPropItemFromPropPath(path, model);\n      if (!props) {\n        throw new Error(\n          `projectionItemModel [${this.uid.get()}] no item found for path : ${path}`\n        );\n      }\n      projectionItem = new ProjectionItem(\n        props.name,\n        model.id,\n        props.dbId,\n        props.properties,\n        props.externalId\n      );\n    } else {\n      const extMap = await getExternalIdMapping(model);\n      const dbid = extMap[this.externalId.get()];\n      if (!dbid) {\n        throw new Error(\n          `projectionItemModel [${this.uid.get()}] skiped - no item found for externalId : ${this.externalId.get()}`\n        );\n      }\n      const props = await getBulkProperties(model, [dbid]);\n      projectionItem = new ProjectionItem(\n        props[0].name,\n        model.id,\n        dbid,\n        props[0].properties,\n        props[0].externalId\n      );\n    }\n    projectionItem.uid = this.uid.get();\n    projectionItem.offset = this.offset.get();\n    return projectionItem;\n  }\n}\nspinalCore.register_models(ProjectionItemModel);\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionItem = void 0;\nconst getModelByModelId_1 = require(\"../../utils/projection/getModelByModelId\");\nclass ProjectionItem {\n    constructor(name, modelId, dbId, properties, externalId) {\n        this.offset = { r: 0, t: 0, z: 0 };\n        this.uid = `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(Math.random() * 10000)}`;\n        this.name = name;\n        this.modelId = modelId;\n        this.dbId = dbId;\n        this.id = `${modelId}-${dbId}`;\n        this.properties = properties;\n        this.externalId = externalId;\n    }\n    selectItem(viewer) {\n        const model = (0, getModelByModelId_1.getModelByModelId)(this.modelId);\n        return viewer.select([this.dbId], model);\n    }\n}\nexports.ProjectionItem = ProjectionItem;\n//# sourceMappingURL=ProjectionItem.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IProjectionItem } from '../../interfaces/IProjectionItem';\nimport type { IProjectionOffset } from '../../interfaces/IProjectionOffset';\nimport { getModelByModelId } from '../../utils/projection/getModelByModelId';\n\nexport class ProjectionItem implements IProjectionItem {\n  name: string;\n  offset: IProjectionOffset = { r: 0, t: 0, z: 0 };\n  uid = `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(\n    Math.random() * 10000\n  )}`;\n  modelId: number;\n  externalId: string;\n  dbId: number;\n  id: string;\n  properties: Autodesk.Viewing.Property[];\n  constructor(\n    name: string,\n    modelId: number,\n    dbId: number,\n    properties: Autodesk.Viewing.Property[],\n    externalId: string\n  ) {\n    this.name = name;\n    this.modelId = modelId;\n    this.dbId = dbId;\n    this.id = `${modelId}-${dbId}`;\n    this.properties = properties;\n    this.externalId = externalId;\n  }\n  selectItem(viewer: Autodesk.Viewing.Viewer3D) {\n    const model = getModelByModelId(this.modelId);\n    return viewer.select([this.dbId], model);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionOffsetModel = void 0;\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nclass ProjectionOffsetModel extends spinal_core_connectorjs_1.Model {\n    constructor(offset) {\n        super();\n        if (spinal_core_connectorjs_1.FileSystem._sig_server === false)\n            return;\n        this.add_attr('r', offset.r);\n        this.add_attr('t', offset.t);\n        this.add_attr('z', offset.z);\n    }\n    update(offset) {\n        this.r.set(offset.r);\n        this.t.set(offset.t);\n        this.z.set(offset.z);\n    }\n}\nexports.ProjectionOffsetModel = ProjectionOffsetModel;\nspinal_core_connectorjs_1.spinalCore.register_models(ProjectionOffsetModel);\n//# sourceMappingURL=ProjectionOffsetModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IProjectionOffset } from '../../interfaces';\nimport {\n  type Val,\n  FileSystem,\n  Model,\n  spinalCore,\n} from 'spinal-core-connectorjs';\n\nexport class ProjectionOffsetModel extends Model {\n  r: Val;\n  t: Val;\n  z: Val;\n\n  constructor(offset: IProjectionOffset) {\n    super();\n    if (FileSystem._sig_server === false) return;\n    this.add_attr('r', offset.r);\n    this.add_attr('t', offset.t);\n    this.add_attr('z', offset.z);\n  }\n  update(offset: IProjectionOffset): void {\n    this.r.set(offset.r);\n    this.t.set(offset.t);\n    this.z.set(offset.z);\n  }\n}\nspinalCore.register_models(ProjectionOffsetModel);\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionGroupItemModel = void 0;\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst utils_1 = require(\"../../utils\");\nconst getExternalIdMapping_1 = require(\"../../utils/getExternalIdMapping\");\nconst getBimFileByBimFileId_1 = require(\"../../utils/getBimFileByBimFileId\");\nclass ProjectionGroupItemModel extends spinal_core_connectorjs_1.Model {\n    constructor(item) {\n        super();\n        if (spinal_core_connectorjs_1.FileSystem._sig_server === false)\n            return;\n        this.add_attr('bimFileId', (0, utils_1.getBimFileIdByModelId)(item.modelId));\n        this.add_attr('uid', item.uid);\n    }\n    update(item) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.bimFileId.set((0, utils_1.getBimFileIdByModelId)(item.modelId));\n            this.uid.set(item.uid);\n            const model = (0, utils_1.getModelByModelId)(item.modelId);\n            const tree = model.getInstanceTree();\n            const children = (0, utils_1.getDbIdChildren)(tree, item.dbId);\n            if (children.length > 0) {\n                const path = yield (0, utils_1.getPropPath)(item.dbId, model);\n                if (typeof this.path === 'undefined') {\n                    this.add_attr('path', path);\n                }\n                else {\n                    this.path.set(path);\n                }\n            }\n            else {\n                if (typeof this.externalId === 'undefined') {\n                    this.add_attr('externalId', item.externalId);\n                }\n                else {\n                    this.externalId.set(item.externalId);\n                }\n            }\n            return this;\n        });\n    }\n    toUxModel() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = (0, utils_1.getModelByBimFileIdLoaded)(this.bimFileId.get());\n            if (!model) {\n                try {\n                    const bimFile = yield (0, getBimFileByBimFileId_1.getBimFileByBimFileId)(this.bimFileId.get());\n                    throw new Error(`Model [${bimFile.info.name.get()}] not loaded for bimFileId : ${this.bimFileId.get()}`);\n                }\n                catch (error) {\n                    console.error(error);\n                    throw error;\n                }\n            }\n            if (typeof this.path !== 'undefined') {\n                const path = this.path.get();\n                const props = yield (0, utils_1.getPropItemFromPropPath)(path, model);\n                if (!props) {\n                    throw new Error(`ProjectionGroupItemModel [${this.uid.get()}] no item found for path : ${path}`);\n                }\n                return {\n                    modelId: model.id,\n                    dbid: props.dbId,\n                };\n            }\n            else {\n                const extMap = yield (0, getExternalIdMapping_1.getExternalIdMapping)(model);\n                const dbid = extMap[this.externalId.get()];\n                if (!dbid) {\n                    throw new Error(`ProjectionGroupItemModel [${this.uid.get()}] skiped - no item found for externalId : ${this.externalId.get()}`);\n                }\n                return {\n                    modelId: model.id,\n                    dbid: dbid,\n                };\n            }\n        });\n    }\n}\nexports.ProjectionGroupItemModel = ProjectionGroupItemModel;\nspinal_core_connectorjs_1.spinalCore.register_models(ProjectionGroupItemModel);\n//# sourceMappingURL=ProjectionGroupItemModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IProjectionGroupItem } from '../../interfaces/IProjectionGroupItem';\nimport {\n  type Lst,\n  type Str,\n  FileSystem,\n  Model,\n  spinalCore,\n} from 'spinal-core-connectorjs';\nimport {\n  getBimFileIdByModelId,\n  getDbIdChildren,\n  getModelByBimFileIdLoaded,\n  getModelByModelId,\n  getPropItemFromPropPath,\n  getPropPath,\n} from '../../utils';\nimport { getExternalIdMapping } from '../../utils/getExternalIdMapping';\nimport { getBimFileByBimFileId } from '../../utils/getBimFileByBimFileId';\n\nexport class ProjectionGroupItemModel extends Model {\n  bimFileId: Str;\n  uid: Str;\n  externalId?: Str;\n  path?: Lst<Str>;\n\n  constructor(item: IProjectionGroupItem);\n  constructor();\n  constructor(item?: IProjectionGroupItem) {\n    super();\n    if (FileSystem._sig_server === false) return;\n    this.add_attr('bimFileId', getBimFileIdByModelId(item.modelId));\n    this.add_attr('uid', item.uid);\n  }\n\n  async update(item: IProjectionGroupItem): Promise<this> {\n    this.bimFileId.set(getBimFileIdByModelId(item.modelId));\n    this.uid.set(item.uid);\n    const model = getModelByModelId(item.modelId);\n    const tree = model.getInstanceTree();\n    const children = getDbIdChildren(tree, item.dbId);\n    if (children.length > 0) {\n      const path = await getPropPath(item.dbId, model);\n      if (typeof this.path === 'undefined') {\n        this.add_attr('path', path);\n      } else {\n        this.path.set(path);\n      }\n    } else {\n      if (typeof this.externalId === 'undefined') {\n        this.add_attr('externalId', item.externalId);\n      } else {\n        this.externalId.set(item.externalId);\n      }\n    }\n    return this;\n  }\n  async toUxModel(): Promise<{ modelId: number; dbid: number }> {\n    const model = getModelByBimFileIdLoaded(this.bimFileId.get());\n    if (!model) {\n      try {\n        const bimFile = await getBimFileByBimFileId(this.bimFileId.get());\n        throw new Error(\n          `Model [${bimFile.info.name.get()}] not loaded for bimFileId : ${this.bimFileId.get()}`\n        );\n      } catch (error) {\n        console.error(error);\n        throw error;\n      }\n    }\n    if (typeof this.path !== 'undefined') {\n      const path = this.path.get();\n      const props = await getPropItemFromPropPath(path, model);\n      if (!props) {\n        throw new Error(\n          `ProjectionGroupItemModel [${this.uid.get()}] no item found for path : ${path}`\n        );\n      }\n      return {\n        modelId: model.id,\n        dbid: props.dbId,\n      };\n    } else {\n      const extMap = await getExternalIdMapping(model);\n      const dbid = extMap[this.externalId.get()];\n      if (!dbid) {\n        throw new Error(\n          `ProjectionGroupItemModel [${this.uid.get()}] skiped - no item found for externalId : ${this.externalId.get()}`\n        );\n      }\n      return {\n        modelId: model.id,\n        dbid: dbid,\n      };\n    }\n  }\n}\nspinalCore.register_models(ProjectionGroupItemModel);\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionGroupModel = void 0;\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nconst ProjectionGroup_1 = require(\"../ProjectionItem/ProjectionGroup\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst ProjectionOffsetModel_1 = require(\"./ProjectionOffsetModel\");\nconst ProjectionGroupItemModel_1 = require(\"./ProjectionGroupItemModel\");\nclass ProjectionGroupModel extends spinal_core_connectorjs_1.Model {\n    constructor(projectionGroup) {\n        super();\n        if (spinal_core_connectorjs_1.FileSystem._sig_server === false)\n            return;\n        this.add_attr('name', projectionGroup.name);\n        this.add_attr('uid', projectionGroup.uid);\n        this.add_attr('offset', new ProjectionOffsetModel_1.ProjectionOffsetModel(projectionGroup.offset));\n        this.add_attr('data', []);\n    }\n    updateData(projectionGroup) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const promises = [];\n            const toDel = [];\n            for (let idx = 0; idx < this.data.length; idx++) {\n                const projItemModel = this.data[idx];\n                const item = projectionGroup.computedData.find((itm) => {\n                    return itm.uid === projItemModel.uid.get();\n                });\n                if (item) {\n                    promises.push(projItemModel.update(item));\n                }\n                else {\n                    toDel.push(projItemModel);\n                }\n            }\n            for (const itm of toDel) {\n                this.data.remove_ref(itm);\n            }\n            // add\n            for (const data of projectionGroup.computedData) {\n                const item = this.data.detect((itm) => {\n                    return itm.uid.get() === data.uid;\n                });\n                if (!item) {\n                    const mod = new ProjectionGroupItemModel_1.ProjectionGroupItemModel(data);\n                    promises.push(mod.update(data));\n                    this.data.push(mod);\n                }\n            }\n            yield Promise.all(promises);\n            return this;\n        });\n    }\n    update(projectionGroup) {\n        this.name.set(projectionGroup.name);\n        this.uid.set(projectionGroup.uid);\n        this.offset.update(projectionGroup.offset);\n        return this.updateData(projectionGroup);\n    }\n    toUxModel() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const projectionGroup = new ProjectionGroup_1.ProjectionGroup(this.name.get());\n            projectionGroup.offset = this.offset.get();\n            projectionGroup.uid = this.uid.get();\n            const promises = [];\n            for (const data of this.data) {\n                promises.push(data.toUxModel());\n            }\n            const data = yield Promise.all(promises);\n            for (const { modelId, dbid } of data) {\n                const obj = projectionGroup.data.find((itm) => itm.modelId === modelId);\n                if (obj)\n                    obj.selection.push(dbid);\n                else\n                    projectionGroup.data.push({ modelId, selection: [dbid] });\n            }\n            yield projectionGroup.updateComputed();\n            return projectionGroup;\n        });\n    }\n}\nexports.ProjectionGroupModel = ProjectionGroupModel;\nspinal_core_connectorjs_1.spinalCore.register_models(ProjectionGroupModel);\n//# sourceMappingURL=ProjectionGroupModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nimport { ProjectionGroup } from '../ProjectionItem/ProjectionGroup';\nimport {\n  type Lst,\n  type Str,\n  FileSystem,\n  Model,\n  spinalCore,\n} from 'spinal-core-connectorjs';\nimport { ProjectionOffsetModel } from './ProjectionOffsetModel';\nimport { ProjectionGroupItemModel } from './ProjectionGroupItemModel';\n\nexport class ProjectionGroupModel extends Model {\n  name: Str;\n  offset: ProjectionOffsetModel;\n  uid: Str;\n  data: Lst<ProjectionGroupItemModel>;\n\n  constructor(projectionGroup?: ProjectionGroup) {\n    super();\n    if (FileSystem._sig_server === false) return;\n    this.add_attr('name', projectionGroup.name);\n    this.add_attr('uid', projectionGroup.uid);\n    this.add_attr('offset', new ProjectionOffsetModel(projectionGroup.offset));\n    this.add_attr('data', []);\n  }\n  private async updateData(projectionGroup: ProjectionGroup): Promise<this> {\n    const promises: Promise<ProjectionGroupItemModel>[] = [];\n    const toDel: ProjectionGroupItemModel[] = [];\n    for (let idx = 0; idx < this.data.length; idx++) {\n      const projItemModel: ProjectionGroupItemModel = this.data[idx];\n      const item = projectionGroup.computedData.find((itm) => {\n        return itm.uid === projItemModel.uid.get();\n      });\n      if (item) {\n        promises.push(projItemModel.update(item));\n      } else {\n        toDel.push(projItemModel);\n      }\n    }\n    for (const itm of toDel) {\n      this.data.remove_ref(itm);\n    }\n\n    // add\n    for (const data of projectionGroup.computedData) {\n      const item = this.data.detect((itm) => {\n        return itm.uid.get() === data.uid;\n      });\n      if (!item) {\n        const mod = new ProjectionGroupItemModel(data);\n        promises.push(mod.update(data));\n        this.data.push(mod);\n      }\n    }\n    await Promise.all(promises);\n    return this;\n  }\n  update(projectionGroup: ProjectionGroup): Promise<this> {\n    this.name.set(projectionGroup.name);\n    this.uid.set(projectionGroup.uid);\n    this.offset.update(projectionGroup.offset);\n    return this.updateData(projectionGroup);\n  }\n\n  async toUxModel(): Promise<ProjectionGroup> {\n    const projectionGroup = new ProjectionGroup(this.name.get());\n    projectionGroup.offset = this.offset.get();\n    projectionGroup.uid = this.uid.get();\n    const promises: ReturnType<ProjectionGroupItemModel['toUxModel']>[] = [];\n    for (const data of this.data) {\n      promises.push(data.toUxModel());\n    }\n    const data = await Promise.all(promises);\n    for (const { modelId, dbid } of data) {\n      const obj = projectionGroup.data.find((itm) => itm.modelId === modelId);\n      if (obj) obj.selection.push(dbid);\n      else projectionGroup.data.push({ modelId, selection: [dbid] });\n    }\n    await projectionGroup.updateComputed();\n    return projectionGroup;\n  }\n}\nspinalCore.register_models(ProjectionGroupModel);\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addSelectionToList = void 0;\nconst getBulkProperties_1 = require(\"../../utils/projection/getBulkProperties\");\nconst addProjectItem_1 = require(\"./addProjectItem\");\nfunction addSelectionToList(list, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const aggregateSelection = viewer.getAggregateSelection();\n        for (const select of aggregateSelection) {\n            const props = yield (0, getBulkProperties_1.getBulkProperties)(select.model, select.selection);\n            const prom = [];\n            for (const prop of props) {\n                prom.push((0, addProjectItem_1.addProjectItem)(list, prop));\n            }\n            yield Promise.all(prom);\n        }\n    });\n}\nexports.addSelectionToList = addSelectionToList;\n//# sourceMappingURL=addSelectionToList.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IAuAggregateSelectItem } from '../../interfaces/IAuAggregateSelectItem';\nimport type { TProjectionLst } from '../../interfaces/TProjectionLst';\nimport { getBulkProperties } from '../../utils/projection/getBulkProperties';\nimport { addProjectItem } from './addProjectItem';\n\nexport async function addSelectionToList(\n  list: TProjectionLst,\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<void> {\n  const aggregateSelection: IAuAggregateSelectItem[] =\n    viewer.getAggregateSelection();\n  for (const select of aggregateSelection) {\n    const props = await getBulkProperties(select.model, select.selection);\n    const prom: Promise<void>[] = [];\n    for (const prop of props) {\n      prom.push(addProjectItem(list, prop));\n    }\n    await Promise.all(prom);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addProjectItem = void 0;\nconst ProjectionGroup_1 = require(\"../ProjectionItem/ProjectionGroup\");\nconst ProjectionItem_1 = require(\"../ProjectionItem/ProjectionItem\");\nfunction addProjectItem(list, prop) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let found = false;\n        const promRemove = [];\n        for (const item of list) {\n            if (item instanceof ProjectionItem_1.ProjectionItem &&\n                item.modelId === prop.modelId &&\n                item.dbId === prop.dbId) {\n                found = true;\n                continue;\n            }\n            else if (item instanceof ProjectionGroup_1.ProjectionGroup) {\n                promRemove.push(item.deleteItem(prop));\n            }\n        }\n        if (!found) {\n            list.push(new ProjectionItem_1.ProjectionItem(prop.name, prop.modelId, prop.dbId, prop.properties, prop.externalId));\n        }\n        yield Promise.all(promRemove);\n    });\n}\nexports.addProjectItem = addProjectItem;\n//# sourceMappingURL=addProjectItem.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { AuProps } from '../../interfaces/AuProps';\nimport type { TProjectionLst } from '../../interfaces/TProjectionLst';\nimport { ProjectionGroup } from '../ProjectionItem/ProjectionGroup';\nimport { ProjectionItem } from '../ProjectionItem/ProjectionItem';\n\nexport async function addProjectItem(\n  list: TProjectionLst,\n  prop: AuProps\n): Promise<void> {\n  let found = false;\n  const promRemove: Promise<void>[] = [];\n  for (const item of list) {\n    if (\n      item instanceof ProjectionItem &&\n      item.modelId === prop.modelId &&\n      item.dbId === prop.dbId\n    ) {\n      found = true;\n      continue;\n    } else if (item instanceof ProjectionGroup) {\n      promRemove.push(item.deleteItem(prop));\n    }\n  }\n  if (!found) {\n    list.push(\n      new ProjectionItem(\n        prop.name,\n        prop.modelId,\n        prop.dbId,\n        prop.properties,\n        prop.externalId\n      )\n    );\n  }\n  await Promise.all(promRemove);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getColorPreview = exports.setColorPreview = exports.stopPreview = exports.previewItem = void 0;\nconst getBBoxAndMatrixs_1 = require(\"../../utils/projection/getBBoxAndMatrixs\");\nconst getLeafDbIdsByModelId_1 = require(\"../../utils/projection/getLeafDbIdsByModelId\");\nconst getPointOffset_1 = require(\"../../utils/projection/getPointOffset\");\nconst transformRtzToXyz_1 = require(\"../../utils/projection/transformRtzToXyz\");\nconst isProjectionGroup_1 = require(\"../../utils/projection/isProjectionGroup\");\nconst lodash_throttle_1 = __importDefault(require(\"lodash.throttle\"));\nconst constant_1 = require(\"../../constant\");\nlet current = null;\nlet sphereMat = null;\nlet lineMat = null;\nlet sceneSphereOverlay = null;\nlet sceneLineOverlay = null;\nlet color = '#00ff00';\nexports.previewItem = (0, lodash_throttle_1.default)(_previewItem, 1000);\nfunction _previewItem(item, offset, mode, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const _offset = (0, transformRtzToXyz_1.transformRtzToXyz)(offset);\n        if (current === null) {\n            createNew(item, _offset);\n        }\n        try {\n            current.offset = _offset;\n            populateItemToShow(item, mode);\n            yield (0, getBBoxAndMatrixs_1.getBBoxAndMatrixs)(current, viewer);\n            for (const itm of current.itemToShow) {\n                updatePointOffset(itm, _offset, viewer);\n            }\n            viewer.impl.invalidate(true, true, true);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    });\n}\nfunction stopPreview(viewer) {\n    const curr = current;\n    if (curr === null)\n        return Promise.resolve();\n    curr.lock = true;\n    for (const itm of curr.itemToShow) {\n        hideItem(itm);\n    }\n    viewer.impl.invalidate(true, true, true);\n    current = null;\n    viewer.impl.invalidate(true, true, true);\n}\nexports.stopPreview = stopPreview;\nfunction setColorPreview(colorStr) {\n    color = colorStr;\n    if (sphereMat)\n        sphereMat.color.set(color);\n    if (lineMat)\n        lineMat.color.set(color);\n}\nexports.setColorPreview = setColorPreview;\nfunction getColorPreview() {\n    return color;\n}\nexports.getColorPreview = getColorPreview;\nfunction createNew(item, offset) {\n    current = {\n        item,\n        mode: 0,\n        offset,\n        lock: false,\n        itemToShow: [],\n    };\n}\nfunction populateItemToShow(item, mode) {\n    const curr = current;\n    if (curr.mode !== mode) {\n        if (mode === 0) {\n            for (const itm of curr.itemToShow) {\n                hideItem(itm);\n            }\n            curr.itemToShow = [];\n            curr.mode = mode;\n        }\n        else if (mode === 1) {\n            if ((0, isProjectionGroup_1.isProjectionGroup)(item)) {\n                const first = item.computedData[0];\n                if (typeof first === 'undefined')\n                    return;\n                const ids = (0, getLeafDbIdsByModelId_1.getLeafDbIdsByModelId)(first.modelId, first.dbId);\n                if (ids.length === 0)\n                    return;\n                for (const itm of curr.itemToShow) {\n                    hideItem(itm);\n                }\n                curr.itemToShow = [{ dbId: ids[0], modelId: first.modelId }];\n            }\n            else {\n                const ids = (0, getLeafDbIdsByModelId_1.getLeafDbIdsByModelId)(item.modelId, item.dbId);\n                if (ids.length === 0)\n                    return;\n                for (const itm of curr.itemToShow) {\n                    hideItem(itm);\n                }\n                curr.itemToShow = [{ dbId: ids[0], modelId: item.modelId }];\n            }\n        }\n        else {\n            if ((0, isProjectionGroup_1.isProjectionGroup)(item)) {\n                for (const itm of curr.itemToShow) {\n                    hideItem(itm);\n                }\n                curr.itemToShow = [];\n                for (const itm of item.computedData) {\n                    const ids = (0, getLeafDbIdsByModelId_1.getLeafDbIdsByModelId)(itm.modelId, itm.dbId);\n                    if (ids.length === 0)\n                        continue;\n                    for (const id of ids) {\n                        curr.itemToShow.push({ dbId: id, modelId: itm.modelId });\n                    }\n                }\n            }\n            else {\n                for (const itm of curr.itemToShow) {\n                    hideItem(itm);\n                }\n                const ids = (0, getLeafDbIdsByModelId_1.getLeafDbIdsByModelId)(item.modelId, item.dbId);\n                if (ids.length === 0)\n                    return;\n                curr.itemToShow = [];\n                for (const id of ids) {\n                    curr.itemToShow.push({ dbId: id, modelId: item.modelId });\n                }\n            }\n        }\n        curr.mode = mode;\n    }\n}\nfunction hideItem(item) {\n    sceneSphereOverlay.remove(item.sphere);\n    sceneLineOverlay.remove(item.line);\n}\nfunction getSphereMat(viewer) {\n    if (sphereMat === null) {\n        sphereMat = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n        const { scene } = viewer.impl.createOverlayScene(constant_1.OVERLAY_SPHERES_PREVIEW_POSITION_NAME, sphereMat);\n        sceneSphereOverlay = scene;\n    }\n    return sphereMat;\n}\nfunction getLineMat(viewer) {\n    if (lineMat === null) {\n        lineMat = new THREE.LineBasicMaterial({\n            color: 0x00ff00,\n            depthWrite: true,\n            depthTest: true,\n            linewidth: 3,\n            opacity: 1.0,\n        });\n        const { scene } = viewer.impl.createOverlayScene(constant_1.OVERLAY_LINES_PREVIEW_POSITION_NAME, lineMat);\n        sceneLineOverlay = scene;\n    }\n    return lineMat;\n}\nfunction updatePointOffset(item, offset, viewer) {\n    const matrixWorld = item.matrixWorld;\n    const bbox = item.bbox;\n    const bBoxCenter = new THREE.Vector3();\n    bbox.getCenter(bBoxCenter);\n    const point = (0, getPointOffset_1.getPointOffset)(bBoxCenter, offset, matrixWorld);\n    const sphere = getOrCreateSphere(item, viewer);\n    sphere.position.set(point.x, point.y, point.z);\n    sphere.updateMatrix();\n    const line = getOrCreateLine(item, bBoxCenter, viewer);\n    if (line.geometry instanceof THREE.BufferGeometry) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        line.geometry.attributes.position.needsUpdate = true;\n    }\n    else {\n        line.geometry.verticesNeedUpdate = true;\n    }\n}\nfunction getOrCreateSphere(item, viewer) {\n    if (typeof item.sphere === 'undefined') {\n        const material_green = getSphereMat(viewer);\n        const sphere_geo = new THREE.SphereGeometry(0.4, 30, 30);\n        const sphere_maxpt = new THREE.Mesh(sphere_geo, material_green);\n        sphere_maxpt.matrixAutoUpdate = false;\n        viewer.impl.addOverlay(constant_1.OVERLAY_SPHERES_PREVIEW_POSITION_NAME, sphere_maxpt);\n        item.sphere = sphere_maxpt;\n    }\n    return item.sphere;\n}\nfunction getOrCreateLine(item, bBoxCenter, viewer) {\n    if (typeof item.line === 'undefined') {\n        const geometryLine = new THREE.Geometry();\n        geometryLine.vertices.push(new THREE.Vector3(bBoxCenter.x, bBoxCenter.y, bBoxCenter.z), item.sphere.position);\n        const material = getLineMat(viewer);\n        const line = new THREE.Line(geometryLine, material);\n        viewer.impl.addOverlay(constant_1.OVERLAY_LINES_PREVIEW_POSITION_NAME, line);\n        item.line = line;\n    }\n    return item.line;\n}\n//# sourceMappingURL=PreviewCenter.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IProjectionOffset } from '../../interfaces/IProjectionOffset';\nimport type { SpinalVec3 } from '../../interfaces/SpinalVec3';\nimport type { TProjectionItem } from '../../interfaces';\nimport type { IPrevewItemToShow } from '../../interfaces/IPrevewItemToShow';\nimport type { IPreviewObj } from '../../interfaces/IPreviewObj';\nimport { getBBoxAndMatrixs } from '../../utils/projection/getBBoxAndMatrixs';\nimport { getLeafDbIdsByModelId } from '../../utils/projection/getLeafDbIdsByModelId';\nimport { getPointOffset } from '../../utils/projection/getPointOffset';\nimport { transformRtzToXyz } from '../../utils/projection/transformRtzToXyz';\nimport { isProjectionGroup } from '../../utils/projection/isProjectionGroup';\nimport throttle from 'lodash.throttle';\nimport {\n  OVERLAY_LINES_PREVIEW_POSITION_NAME,\n  OVERLAY_SPHERES_PREVIEW_POSITION_NAME,\n} from '../../constant';\n\nlet current: IPreviewObj = null;\nlet sphereMat: THREE.MeshPhongMaterial = null;\nlet lineMat: THREE.LineBasicMaterial = null;\nlet sceneSphereOverlay: THREE.Scene = null;\nlet sceneLineOverlay: THREE.Scene = null;\nlet color = '#00ff00';\nexport const previewItem = throttle(_previewItem, 1000);\n\nasync function _previewItem(\n  item: TProjectionItem,\n  offset: IProjectionOffset,\n  mode: number,\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<void> {\n  const _offset = transformRtzToXyz(offset);\n  if (current === null) {\n    createNew(item, _offset);\n  }\n  try {\n    current.offset = _offset;\n    populateItemToShow(item, mode);\n    await getBBoxAndMatrixs(current, viewer);\n    for (const itm of current.itemToShow) {\n      updatePointOffset(itm, _offset, viewer);\n    }\n    viewer.impl.invalidate(true, true, true);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function stopPreview(viewer: Autodesk.Viewing.Viewer3D): Promise<void> {\n  const curr = current;\n  if (curr === null) return Promise.resolve();\n  curr.lock = true;\n  for (const itm of curr.itemToShow) {\n    hideItem(itm);\n  }\n  viewer.impl.invalidate(true, true, true);\n  current = null;\n  viewer.impl.invalidate(true, true, true);\n}\n\nexport function setColorPreview(colorStr: string): void {\n  color = colorStr;\n  if (sphereMat) sphereMat.color.set(color);\n  if (lineMat) lineMat.color.set(color);\n}\nexport function getColorPreview(): string {\n  return color;\n}\n\nfunction createNew(item: TProjectionItem, offset: SpinalVec3): void {\n  current = {\n    item,\n    mode: 0,\n    offset,\n    lock: false,\n    itemToShow: [],\n  };\n}\n\nfunction populateItemToShow(item: TProjectionItem, mode: number): void {\n  const curr = current;\n  if (curr.mode !== mode) {\n    if (mode === 0) {\n      for (const itm of curr.itemToShow) {\n        hideItem(itm);\n      }\n      curr.itemToShow = [];\n      curr.mode = mode;\n    } else if (mode === 1) {\n      if (isProjectionGroup(item)) {\n        const first = item.computedData[0];\n        if (typeof first === 'undefined') return;\n        const ids = getLeafDbIdsByModelId(first.modelId, first.dbId);\n        if (ids.length === 0) return;\n        for (const itm of curr.itemToShow) {\n          hideItem(itm);\n        }\n        curr.itemToShow = [{ dbId: ids[0], modelId: first.modelId }];\n      } else {\n        const ids = getLeafDbIdsByModelId(item.modelId, item.dbId);\n        if (ids.length === 0) return;\n        for (const itm of curr.itemToShow) {\n          hideItem(itm);\n        }\n        curr.itemToShow = [{ dbId: ids[0], modelId: item.modelId }];\n      }\n    } else {\n      if (isProjectionGroup(item)) {\n        for (const itm of curr.itemToShow) {\n          hideItem(itm);\n        }\n        curr.itemToShow = [];\n        for (const itm of item.computedData) {\n          const ids = getLeafDbIdsByModelId(itm.modelId, itm.dbId);\n          if (ids.length === 0) continue;\n          for (const id of ids) {\n            curr.itemToShow.push({ dbId: id, modelId: itm.modelId });\n          }\n        }\n      } else {\n        for (const itm of curr.itemToShow) {\n          hideItem(itm);\n        }\n        const ids = getLeafDbIdsByModelId(item.modelId, item.dbId);\n        if (ids.length === 0) return;\n        curr.itemToShow = [];\n        for (const id of ids) {\n          curr.itemToShow.push({ dbId: id, modelId: item.modelId });\n        }\n      }\n    }\n    curr.mode = mode;\n  }\n}\n\nfunction hideItem(item: IPrevewItemToShow): void {\n  sceneSphereOverlay.remove(item.sphere);\n  sceneLineOverlay.remove(item.line);\n}\n\nfunction getSphereMat(\n  viewer: Autodesk.Viewing.Viewer3D\n): THREE.MeshPhongMaterial {\n  if (sphereMat === null) {\n    sphereMat = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n    const { scene } = viewer.impl.createOverlayScene(\n      OVERLAY_SPHERES_PREVIEW_POSITION_NAME,\n      sphereMat\n    );\n    sceneSphereOverlay = scene;\n  }\n  return sphereMat;\n}\nfunction getLineMat(\n  viewer: Autodesk.Viewing.Viewer3D\n): THREE.LineBasicMaterial {\n  if (lineMat === null) {\n    lineMat = new THREE.LineBasicMaterial({\n      color: 0x00ff00,\n      depthWrite: true,\n      depthTest: true,\n      linewidth: 3,\n      opacity: 1.0,\n    });\n    const { scene } = viewer.impl.createOverlayScene(\n      OVERLAY_LINES_PREVIEW_POSITION_NAME,\n      lineMat\n    );\n    sceneLineOverlay = scene;\n  }\n  return lineMat;\n}\nfunction updatePointOffset(\n  item: IPrevewItemToShow,\n  offset: SpinalVec3,\n  viewer: Autodesk.Viewing.Viewer3D\n): void {\n  const matrixWorld = item.matrixWorld;\n  const bbox = item.bbox;\n  const bBoxCenter = new THREE.Vector3();\n  bbox.getCenter(bBoxCenter);\n  const point = getPointOffset(bBoxCenter, offset, matrixWorld);\n  const sphere = getOrCreateSphere(item, viewer);\n  sphere.position.set(point.x, point.y, point.z);\n  sphere.updateMatrix();\n  const line = getOrCreateLine(item, bBoxCenter, viewer);\n  if (line.geometry instanceof THREE.BufferGeometry) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    line.geometry.attributes.position.needsUpdate = true;\n  } else {\n    line.geometry.verticesNeedUpdate = true;\n  }\n}\n\nfunction getOrCreateSphere(\n  item: IPrevewItemToShow,\n  viewer: Autodesk.Viewing.Viewer3D\n): THREE.Mesh {\n  if (typeof item.sphere === 'undefined') {\n    const material_green = getSphereMat(viewer);\n    const sphere_geo = new THREE.SphereGeometry(0.4, 30, 30);\n    const sphere_maxpt = new THREE.Mesh(sphere_geo, material_green);\n    sphere_maxpt.matrixAutoUpdate = false;\n    viewer.impl.addOverlay(OVERLAY_SPHERES_PREVIEW_POSITION_NAME, sphere_maxpt);\n    item.sphere = sphere_maxpt;\n  }\n  return item.sphere;\n}\nfunction getOrCreateLine(\n  item: IPrevewItemToShow,\n  bBoxCenter: THREE.Vector3,\n  viewer: Autodesk.Viewing.Viewer3D\n): THREE.Line {\n  if (typeof item.line === 'undefined') {\n    const geometryLine = new THREE.Geometry();\n    geometryLine.vertices.push(\n      new THREE.Vector3(bBoxCenter.x, bBoxCenter.y, bBoxCenter.z),\n      item.sphere.position\n    );\n    const material = getLineMat(viewer);\n    const line = new THREE.Line(geometryLine, material);\n    viewer.impl.addOverlay(OVERLAY_LINES_PREVIEW_POSITION_NAME, line);\n    item.line = line;\n  }\n  return item.line;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addViewerSelection = void 0;\nconst getBulkProperties_1 = require(\"../../utils/projection/getBulkProperties\");\nconst isProjectionGroup_1 = require(\"../../utils/projection/isProjectionGroup\");\nfunction addViewerSelection(index, list, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const prom = [];\n        const toDel = [];\n        const aggregateSelection = viewer.getAggregateSelection();\n        const aggrProps = [];\n        for (const select of aggregateSelection) {\n            const props = yield (0, getBulkProperties_1.getBulkProperties)(select.model, select.selection);\n            aggrProps.push(...props);\n        }\n        for (let idx = 0; idx < list.length; idx++) {\n            const item = list[idx];\n            if ((0, isProjectionGroup_1.isProjectionGroup)(item)) {\n                if (idx === index) {\n                    prom.push(item.getAndMergeSelection(viewer));\n                }\n                else {\n                    for (const prop of aggrProps) {\n                        prom.push(item.deleteItem(prop));\n                    }\n                }\n            }\n            else {\n                for (const select of aggregateSelection) {\n                    for (const dbId of select.selection) {\n                        if (select.model.id === item.modelId && dbId === item.dbId) {\n                            toDel.push(item);\n                        }\n                    }\n                }\n            }\n        }\n        for (const del of toDel) {\n            const idx = list.findIndex((itm) => itm.uid === del.uid);\n            if (idx !== -1) {\n                list.splice(idx, 1);\n            }\n        }\n        yield Promise.all(prom);\n    });\n}\nexports.addViewerSelection = addViewerSelection;\n//# sourceMappingURL=addViewerSelection.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { TProjectionLst } from '../../interfaces/TProjectionLst';\nimport type { IAuAggregateSelectItem } from '../../interfaces/IAuAggregateSelectItem';\nimport { getBulkProperties } from '../../utils/projection/getBulkProperties';\nimport { isProjectionGroup } from '../../utils/projection/isProjectionGroup';\nimport type { ProjectionItem } from '../ProjectionItem/ProjectionItem';\nimport { AuProps } from '../../interfaces/AuProps';\n\nexport async function addViewerSelection(\n  index: number,\n  list: TProjectionLst,\n  viewer: Autodesk.Viewing.Viewer3D\n) {\n  const prom: Promise<void>[] = [];\n  const toDel: ProjectionItem[] = [];\n  const aggregateSelection: IAuAggregateSelectItem[] =\n    viewer.getAggregateSelection();\n  const aggrProps: AuProps[] = [];\n  for (const select of aggregateSelection) {\n    const props = await getBulkProperties(select.model, select.selection);\n    aggrProps.push(...props);\n  }\n\n  for (let idx = 0; idx < list.length; idx++) {\n    const item = list[idx];\n    if (isProjectionGroup(item)) {\n      if (idx === index) {\n        prom.push(item.getAndMergeSelection(viewer));\n      } else {\n        for (const prop of aggrProps) {\n          prom.push(item.deleteItem(prop));\n        }\n      }\n    } else {\n      for (const select of aggregateSelection) {\n        for (const dbId of select.selection) {\n          if (select.model.id === item.modelId && dbId === item.dbId) {\n            toDel.push(item);\n          }\n        }\n      }\n    }\n  }\n  for (const del of toDel) {\n    const idx = list.findIndex((itm) => itm.uid === del.uid);\n    if (idx !== -1) {\n      list.splice(idx, 1);\n    }\n  }\n  await Promise.all(prom);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addToProjectionGroup = void 0;\nconst ProjectionGroup_1 = require(\"../ProjectionItem/ProjectionGroup\");\nfunction addToProjectionGroup(list, name) {\n    list.push(new ProjectionGroup_1.ProjectionGroup(name));\n}\nexports.addToProjectionGroup = addToProjectionGroup;\n//# sourceMappingURL=addToProjectionGroup.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { ProjectionGroup } from '../ProjectionItem/ProjectionGroup';\nimport type { TProjectionLst } from '../../interfaces/TProjectionLst';\n\nexport function addToProjectionGroup(list: TProjectionLst, name: string): void {\n  list.push(new ProjectionGroup(name));\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectionGroupConfig = void 0;\nconst isProjectionGroup_1 = require(\"../../utils/projection/isProjectionGroup\");\nconst getConfigFromContext_1 = require(\"../projectionConfig/getConfigFromContext\");\nconst createConfigNode_1 = require(\"../projectionConfig/createConfigNode\");\nconst removeConfigFromContext_1 = require(\"../projectionConfig/removeConfigFromContext\");\nconst ProjectionGroupModel_1 = require(\"../projectionModels/ProjectionGroupModel\");\nconst ProjectionItemModel_1 = require(\"../projectionModels/ProjectionItemModel\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nclass ProjectionGroupConfig {\n    constructor(name, _server_id, uid = `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(Math.random() * 10000)}`) {\n        this._server_id = _server_id;\n        this.data = [];\n        this.progress = 100;\n        this.isLoaded = false;\n        this.name = name;\n        this.uid = uid;\n    }\n    countChild() {\n        let counter = 0;\n        for (const itm of this.data) {\n            if ((0, isProjectionGroup_1.isProjectionGroup)(itm)) {\n                counter += itm.computedData.length;\n            }\n            else {\n                counter += 1;\n            }\n        }\n        return counter;\n    }\n    removeFromContext(context) {\n        return (0, removeConfigFromContext_1.removeConfigFromContext)(context, this.uid);\n    }\n    loadConfigNode() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.isLoaded) {\n                    return;\n                }\n                this.isLoaded = true;\n                const configNode = spinal_core_connectorjs_1.FileSystem._objects[this._server_id];\n                const lstData = yield configNode.getElement();\n                const promises = [];\n                for (const data of lstData) {\n                    promises.push(data.toUxModel());\n                }\n                const data = yield Promise.all(promises);\n                for (const itm of data) {\n                    if (itm)\n                        this.data.push(itm);\n                }\n                if (typeof configNode.info.uid === 'undefined') {\n                    configNode.info.add_attr('uid', this.uid);\n                }\n            }\n            catch (error) {\n                this.isLoaded = false;\n                throw error;\n            }\n        });\n    }\n    saveToContext(context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let projectLst = yield (0, getConfigFromContext_1.getConfigFromContext)(context, this, true);\n            if (!projectLst) {\n                projectLst = yield (0, createConfigNode_1.createConfigNode)(context, this);\n            }\n            if (this.isLoaded === false)\n                yield this.loadConfigNode();\n            const promises = [];\n            for (const data of this.data) {\n                const itmInModel = projectLst.detect((itm) => itm.uid.get() === data.uid);\n                if (itmInModel)\n                    promises.push(itmInModel.update(data));\n                else {\n                    if ((0, isProjectionGroup_1.isProjectionGroup)(data)) {\n                        const mod = new ProjectionGroupModel_1.ProjectionGroupModel(data);\n                        promises.push(mod.update(data));\n                    }\n                    else {\n                        const mod = new ProjectionItemModel_1.ProjectionItemModel(data);\n                        promises.push(mod.update(data));\n                    }\n                }\n            }\n            const res = yield Promise.all(promises);\n            let change = false;\n            for (let idx = 0; idx < res.length; idx++) {\n                if (res[idx] !== projectLst[idx])\n                    change = true;\n            }\n            if (change) {\n                while (projectLst.length > 0)\n                    projectLst.pop();\n                for (let idx = 0; idx < res.length; idx++) {\n                    projectLst.push(res[idx]);\n                }\n            }\n            else {\n                projectLst.trim(res.length);\n            }\n        });\n    }\n}\nexports.ProjectionGroupConfig = ProjectionGroupConfig;\n//# sourceMappingURL=ProjectionGroupConfig.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalContext } from 'spinal-model-graph';\nimport type { TProjectionLst } from '../../interfaces/TProjectionLst';\nimport type { ProjectionItem } from './ProjectionItem';\nimport type { ProjectionGroup } from './ProjectionGroup';\nimport { isProjectionGroup } from '../../utils/projection/isProjectionGroup';\nimport { getConfigFromContext } from '../projectionConfig/getConfigFromContext';\nimport { createConfigNode } from '../projectionConfig/createConfigNode';\nimport { removeConfigFromContext } from '../projectionConfig/removeConfigFromContext';\nimport { ProjectionGroupModel } from '../projectionModels/ProjectionGroupModel';\nimport { ProjectionItemModel } from '../projectionModels/ProjectionItemModel';\nimport { FileSystem } from 'spinal-core-connectorjs';\n\nexport class ProjectionGroupConfig {\n  name: string;\n  uid: string;\n  data: TProjectionLst = [];\n  progress = 100;\n  isLoaded = false;\n\n  constructor(\n    name: string,\n    readonly _server_id: number,\n    uid = `${Date.now()}-${Math.round(Math.random() * 10000)}-${Math.round(\n      Math.random() * 10000\n    )}`\n  ) {\n    this.name = name;\n    this.uid = uid;\n  }\n\n  countChild(): number {\n    let counter = 0;\n\n    for (const itm of this.data) {\n      if (isProjectionGroup(itm)) {\n        counter += itm.computedData.length;\n      } else {\n        counter += 1;\n      }\n    }\n    return counter;\n  }\n\n  removeFromContext(context: SpinalContext) {\n    return removeConfigFromContext(context, this.uid);\n  }\n\n  async loadConfigNode() {\n    try {\n      if (this.isLoaded) {\n        return;\n      }\n      this.isLoaded = true;\n      const configNode = FileSystem._objects[this._server_id];\n      const lstData = await configNode.getElement();\n      const promises: Promise<ProjectionItem | ProjectionGroup>[] = [];\n      for (const data of lstData) {\n        promises.push(data.toUxModel());\n      }\n      const data = await Promise.all(promises);\n      for (const itm of data) {\n        if (itm) this.data.push(itm);\n      }\n      if (typeof configNode.info.uid === 'undefined') {\n        configNode.info.add_attr('uid', this.uid);\n      }\n    } catch (error) {\n      this.isLoaded = false;\n      throw error;\n    }\n  }\n\n  async saveToContext(context: SpinalContext): Promise<void> {\n    let projectLst = await getConfigFromContext(context, this, true);\n    if (!projectLst) {\n      projectLst = await createConfigNode(context, this);\n    }\n    if (this.isLoaded === false) await this.loadConfigNode();\n    const promises: Promise<ProjectionGroupModel | ProjectionItemModel>[] = [];\n    for (const data of this.data) {\n      const itmInModel = projectLst.detect((itm) => itm.uid.get() === data.uid);\n      if (itmInModel) promises.push(itmInModel.update(<any>data));\n      else {\n        if (isProjectionGroup(data)) {\n          const mod = new ProjectionGroupModel(data);\n          promises.push(mod.update(data));\n        } else {\n          const mod = new ProjectionItemModel(data);\n          promises.push(mod.update(data));\n        }\n      }\n    }\n    const res = await Promise.all(promises);\n    let change = false;\n    for (let idx = 0; idx < res.length; idx++) {\n      if (res[idx] !== projectLst[idx]) change = true;\n    }\n    if (change) {\n      while (projectLst.length > 0) projectLst.pop();\n      for (let idx = 0; idx < res.length; idx++) {\n        projectLst.push(res[idx]);\n      }\n    } else {\n      projectLst.trim(res.length);\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getConfigFromContext = void 0;\nconst constant_1 = require(\"../../constant\");\nfunction getConfigFromContext(context, item, updateName = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const configNodes = yield context.getChildren(constant_1.PROJECTION_CONFIG_RELATION);\n        for (const node of configNodes) {\n            if (node.info.uid.get() === item.uid) {\n                if (updateName) {\n                    node.info.name.set(item.name);\n                }\n                return node.getElement();\n            }\n        }\n    });\n}\nexports.getConfigFromContext = getConfigFromContext;\n//# sourceMappingURL=getConfigFromContext.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalNode, SpinalContext } from 'spinal-model-graph';\nimport type { Lst } from 'spinal-core-connectorjs';\nimport type { ProjectionGroupConfig } from '../ProjectionItem/ProjectionGroupConfig';\nimport type { ProjectionGroupModel } from '../projectionModels/ProjectionGroupModel';\nimport type { ProjectionItemModel } from '../projectionModels/ProjectionItemModel';\nimport { PROJECTION_CONFIG_RELATION } from '../../constant';\n\nexport async function getConfigFromContext(\n  context: SpinalContext,\n  item: ProjectionGroupConfig,\n  updateName = false\n): Promise<Lst<ProjectionGroupModel | ProjectionItemModel>> {\n  const configNodes: SpinalNode<\n    Lst<ProjectionGroupModel | ProjectionItemModel>\n  >[] = await context.getChildren(PROJECTION_CONFIG_RELATION);\n  for (const node of configNodes) {\n    if (node.info.uid.get() === item.uid) {\n      if (updateName) {\n        node.info.name.set(item.name);\n      }\n      return node.getElement();\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConfigNode = void 0;\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst constant_1 = require(\"../../constant\");\nfunction createConfigNode(context, item) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const config = new spinal_core_connectorjs_1.Lst();\n        const configNode = new spinal_model_graph_1.SpinalNode(item.name, constant_1.PROJECTION_CONFIG_TYPE, config);\n        configNode.info.add_attr('uid', item.uid);\n        context.addChild(configNode, constant_1.PROJECTION_CONFIG_RELATION, constant_1.PROJECTION_CONFIG_RELATION_TYPE);\n        return config;\n    });\n}\nexports.createConfigNode = createConfigNode;\n//# sourceMappingURL=createConfigNode.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ProjectionGroupConfig } from '../ProjectionItem/ProjectionGroupConfig';\nimport type { ProjectionGroupModel } from '../projectionModels/ProjectionGroupModel';\nimport type { ProjectionItemModel } from '../projectionModels/ProjectionItemModel';\nimport { SpinalNode, type SpinalContext } from 'spinal-model-graph';\nimport { Lst } from 'spinal-core-connectorjs';\nimport {\n  PROJECTION_CONFIG_RELATION,\n  PROJECTION_CONFIG_TYPE,\n  PROJECTION_CONFIG_RELATION_TYPE,\n} from '../../constant';\n\nexport async function createConfigNode(\n  context: SpinalContext,\n  item: ProjectionGroupConfig\n): Promise<Lst<ProjectionGroupModel | ProjectionItemModel>> {\n  const config = new Lst();\n  const configNode = new SpinalNode(item.name, PROJECTION_CONFIG_TYPE, config);\n  configNode.info.add_attr('uid', item.uid);\n  context.addChild(\n    configNode,\n    PROJECTION_CONFIG_RELATION,\n    PROJECTION_CONFIG_RELATION_TYPE\n  );\n  return config;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeConfigFromContext = void 0;\nconst constant_1 = require(\"../../constant\");\nfunction removeConfigFromContext(context, uid) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const configNodes = yield context.getChildren(constant_1.PROJECTION_CONFIG_RELATION);\n        for (const node of configNodes) {\n            if (node.info.uid.get() === uid) {\n                return context.removeChild(node, constant_1.PROJECTION_CONFIG_RELATION, constant_1.PROJECTION_CONFIG_RELATION_TYPE);\n            }\n        }\n    });\n}\nexports.removeConfigFromContext = removeConfigFromContext;\n//# sourceMappingURL=removeConfigFromContext.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { ProjectionGroupModel } from '../projectionModels/ProjectionGroupModel';\nimport type { ProjectionItemModel } from '../projectionModels/ProjectionItemModel';\nimport type { Lst } from 'spinal-core-connectorjs';\nimport type { SpinalNode, SpinalContext } from 'spinal-model-graph';\nimport {\n  PROJECTION_CONFIG_RELATION,\n  PROJECTION_CONFIG_RELATION_TYPE,\n} from '../../constant';\n\nexport async function removeConfigFromContext(\n  context: SpinalContext,\n  uid: string\n): Promise<void> {\n  const configNodes: SpinalNode<\n    Lst<ProjectionGroupModel | ProjectionItemModel>\n  >[] = await context.getChildren(PROJECTION_CONFIG_RELATION);\n  for (const node of configNodes) {\n    if (node.info.uid.get() === uid) {\n      return context.removeChild(\n        node,\n        PROJECTION_CONFIG_RELATION,\n        PROJECTION_CONFIG_RELATION_TYPE\n      );\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProjectionConfig = void 0;\nconst constant_1 = require(\"../../constant\");\nconst ProjectionGroupConfig_1 = require(\"../ProjectionItem/ProjectionGroupConfig\");\nconst utils_1 = require(\"../../utils\");\nfunction getProjectionConfig(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const configNodes = yield context.getChildren(constant_1.PROJECTION_CONFIG_RELATION);\n        const res = [];\n        for (const configNode of configNodes) {\n            yield (0, utils_1.waitGetServerId)(configNode);\n            let projectionGroupConfig;\n            // old config => add uid\n            if (typeof configNode.info.uid === 'undefined') {\n                projectionGroupConfig = new ProjectionGroupConfig_1.ProjectionGroupConfig(configNode.info.name.get(), configNode._server_id);\n            }\n            else {\n                projectionGroupConfig = new ProjectionGroupConfig_1.ProjectionGroupConfig(configNode.info.name.get(), configNode._server_id, configNode.info.uid.get());\n            }\n            res.push(projectionGroupConfig);\n        }\n        return res;\n    });\n}\nexports.getProjectionConfig = getProjectionConfig;\n//# sourceMappingURL=getProjectionConfig.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport type { ProjectionItemModel } from '../projectionModels/ProjectionItemModel';\nimport type { ProjectionGroupModel } from '../projectionModels/ProjectionGroupModel';\nimport type { Lst } from 'spinal-core-connectorjs';\nimport { PROJECTION_CONFIG_RELATION } from '../../constant';\nimport { ProjectionGroupConfig } from '../ProjectionItem/ProjectionGroupConfig';\nimport { waitGetServerId } from '../../utils';\n\nexport async function getProjectionConfig(\n  context: SpinalContext\n): Promise<ProjectionGroupConfig[]> {\n  const configNodes: SpinalNode<\n    Lst<ProjectionGroupModel | ProjectionItemModel>\n  >[] = await context.getChildren(PROJECTION_CONFIG_RELATION);\n\n  const res: ProjectionGroupConfig[] = [];\n  for (const configNode of configNodes) {\n    await waitGetServerId(configNode);\n    let projectionGroupConfig: ProjectionGroupConfig;\n    // old config => add uid\n    if (typeof configNode.info.uid === 'undefined') {\n      projectionGroupConfig = new ProjectionGroupConfig(\n        configNode.info.name.get(),\n        configNode._server_id\n      );\n    } else {\n      projectionGroupConfig = new ProjectionGroupConfig(\n        configNode.info.name.get(),\n        configNode._server_id,\n        configNode.info.uid.get()\n      );\n    }\n    res.push(projectionGroupConfig);\n  }\n  return res;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConfigNodeAndProjGroup = void 0;\nconst ProjectionGroupConfig_1 = require(\"../ProjectionItem/ProjectionGroupConfig\");\nconst spinal_model_graph_1 = require(\"spinal-model-graph\");\nconst spinal_core_connectorjs_1 = require(\"spinal-core-connectorjs\");\nconst constant_1 = require(\"../../constant\");\nconst utils_1 = require(\"../../utils\");\nfunction createConfigNodeAndProjGroup(context, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const config = new spinal_core_connectorjs_1.Lst();\n        const configNode = new spinal_model_graph_1.SpinalNode(name, constant_1.PROJECTION_CONFIG_TYPE, config);\n        context.addChild(configNode, constant_1.PROJECTION_CONFIG_RELATION, constant_1.PROJECTION_CONFIG_RELATION_TYPE);\n        yield (0, utils_1.waitGetServerId)(configNode);\n        const cfgGroup = new ProjectionGroupConfig_1.ProjectionGroupConfig(name, configNode._server_id);\n        configNode.info.add_attr('uid', cfgGroup.uid);\n        return cfgGroup;\n    });\n}\nexports.createConfigNodeAndProjGroup = createConfigNodeAndProjGroup;\n//# sourceMappingURL=createConfigNodeAndProjGroup.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { ProjectionGroupConfig } from '../ProjectionItem/ProjectionGroupConfig';\nimport { SpinalNode, type SpinalContext } from 'spinal-model-graph';\nimport { Lst } from 'spinal-core-connectorjs';\nimport {\n  PROJECTION_CONFIG_RELATION,\n  PROJECTION_CONFIG_TYPE,\n  PROJECTION_CONFIG_RELATION_TYPE,\n} from '../../constant';\nimport { waitGetServerId } from '../../utils';\n\nexport async function createConfigNodeAndProjGroup(\n  context: SpinalContext,\n  name: string\n): Promise<ProjectionGroupConfig> {\n  const config = new Lst();\n  const configNode = new SpinalNode(name, PROJECTION_CONFIG_TYPE, config);\n  context.addChild(\n    configNode,\n    PROJECTION_CONFIG_RELATION,\n    PROJECTION_CONFIG_RELATION_TYPE\n  );\n  await waitGetServerId(configNode);\n  const cfgGroup = new ProjectionGroupConfig(name, configNode._server_id);\n  configNode.info.add_attr('uid', cfgGroup.uid);\n  return cfgGroup;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst raycastJob_1 = require(\"./raycastJob\");\nmodule.exports = function (self) {\n    self.addEventListener('message', function (ev) {\n        const workId = ev.data.workId;\n        const data = ev.data.data;\n        const res = (0, raycastJob_1.raycastJob)(data);\n        self.postMessage({ workId, res });\n    });\n};\n//# sourceMappingURL=raycastWorker.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IRaycastIntersectRes } from '../../interfaces/IRaycastIntersectRes';\nimport type { IWorkerData } from '../../interfaces/IWorkerData';\nimport type { IWorkerEventData } from '../../interfaces/IWorkerEventData';\nimport { raycastJob } from './raycastJob';\n\nmodule.exports = function (self: {\n  addEventListener: (\n    eventName: string,\n    func: (ev: IWorkerEventData) => void\n  ) => void;\n  postMessage: (arg0: { workId: number; res: IRaycastIntersectRes[] }) => void;\n}) {\n  self.addEventListener('message', function (ev: IWorkerEventData) {\n    const workId: number = ev.data.workId;\n    const data: IWorkerData = ev.data.data;\n    const res: IRaycastIntersectRes[] = raycastJob(data);\n    self.postMessage({ workId, res });\n  });\n};\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.raycastJob = void 0;\nconst enumMeshTriangles_1 = require(\"./enumMeshTriangles\");\nconst THREE = __importStar(require(\"three\")); // uncomment for worker usage\nfunction raycastJob(data) {\n    const centerPoints = data.centerPoints;\n    const geometries = data.geometries;\n    const res = [];\n    for (const centerPoint of centerPoints) {\n        const rayOrig = new THREE.Ray(new THREE.Vector3(centerPoint.center.x, centerPoint.center.y, centerPoint.center.z), new THREE.Vector3(0, 0, -1));\n        let dbObjIntersection = null;\n        for (const intersectionObjs of geometries) {\n            const inverseMatrix = new THREE.Matrix4();\n            for (const mesh of intersectionObjs.dataMesh) {\n                const ray = rayOrig.clone();\n                inverseMatrix.getInverse(mesh.matrixWorld);\n                ray.applyMatrix4(inverseMatrix);\n                // test if point on top of boundingbox\n                const bboxFound = isPointOnTopOfBBox(mesh.bbox, rayOrig.origin);\n                if (bboxFound) {\n                    // test with boundingbox ok -> test with triangles\n                    (0, enumMeshTriangles_1.enumMeshTriangles)(mesh.geometry, function (vA, vB, vC) {\n                        const tmp = new THREE.Vector3();\n                        const intersectionPoint = ray.intersectTriangle(vC, vB, vA, false, tmp);\n                        if (!intersectionPoint)\n                            return;\n                        intersectionPoint.applyMatrix4(mesh.matrixWorld);\n                        const distance = rayOrig.origin.distanceTo(intersectionPoint);\n                        // if dbObjIntersection don't exist or distance > to old distance\n                        if (!dbObjIntersection ||\n                            (dbObjIntersection &&\n                                dbObjIntersection.intersections.distance > distance)) {\n                            dbObjIntersection = {\n                                origin: centerPoint,\n                                intersections: {\n                                    distance,\n                                    modelId: intersectionObjs.modelId,\n                                    dbId: intersectionObjs.dbId,\n                                },\n                            };\n                        }\n                    });\n                }\n            }\n        }\n        if (dbObjIntersection) {\n            res.push(dbObjIntersection);\n        }\n    }\n    return res;\n}\nexports.raycastJob = raycastJob;\nfunction isPointOnTopOfBBox(bBox, point) {\n    // test if point on top of bbox\n    if (bBox.min.x <= point.x &&\n        point.x <= bBox.max.x &&\n        bBox.min.y <= point.y &&\n        point.y <= bBox.max.y &&\n        point.z >= bBox.min.z) {\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=raycastJob.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IRaycastIntersectRes } from '../../interfaces/IRaycastIntersectRes';\nimport { enumMeshTriangles } from './enumMeshTriangles';\nimport * as THREE from 'three'; // uncomment for worker usage\nimport type { IWorkerData } from '../../interfaces/IWorkerData';\n\nexport function raycastJob(data: IWorkerData): IRaycastIntersectRes[] {\n  const centerPoints = data.centerPoints;\n  const geometries = data.geometries;\n  const res: IRaycastIntersectRes[] = [];\n  for (const centerPoint of centerPoints) {\n    const rayOrig = new THREE.Ray(\n      new THREE.Vector3(\n        centerPoint.center.x,\n        centerPoint.center.y,\n        centerPoint.center.z\n      ),\n      new THREE.Vector3(0, 0, -1)\n    );\n    let dbObjIntersection: IRaycastIntersectRes = null;\n    for (const intersectionObjs of geometries) {\n      const inverseMatrix = new THREE.Matrix4();\n      for (const mesh of intersectionObjs.dataMesh) {\n        const ray = rayOrig.clone();\n        inverseMatrix.getInverse(mesh.matrixWorld);\n        ray.applyMatrix4(inverseMatrix);\n        // test if point on top of boundingbox\n        const bboxFound = isPointOnTopOfBBox(mesh.bbox, rayOrig.origin);\n        if (bboxFound) {\n          // test with boundingbox ok -> test with triangles\n          enumMeshTriangles(\n            mesh.geometry,\n            function (vA: THREE.Vector3, vB: THREE.Vector3, vC: THREE.Vector3) {\n              const tmp = new THREE.Vector3();\n              const intersectionPoint = ray.intersectTriangle(\n                vC,\n                vB,\n                vA,\n                false,\n                tmp\n              );\n              if (!intersectionPoint) return;\n              intersectionPoint.applyMatrix4(mesh.matrixWorld);\n              const distance = rayOrig.origin.distanceTo(intersectionPoint);\n              // if dbObjIntersection don't exist or distance > to old distance\n              if (\n                !dbObjIntersection ||\n                (dbObjIntersection &&\n                  dbObjIntersection.intersections.distance > distance)\n              ) {\n                dbObjIntersection = {\n                  origin: centerPoint,\n                  intersections: {\n                    distance,\n                    modelId: intersectionObjs.modelId,\n                    dbId: intersectionObjs.dbId,\n                  },\n                };\n              }\n            }\n          );\n        }\n      }\n    }\n    if (dbObjIntersection) {\n      res.push(dbObjIntersection);\n    }\n  }\n  return res;\n}\n\nfunction isPointOnTopOfBBox(bBox: THREE.Box3, point: THREE.Vector3): boolean {\n  // test if point on top of bbox\n  if (\n    bBox.min.x <= point.x &&\n    point.x <= bBox.max.x &&\n    bBox.min.y <= point.y &&\n    point.y <= bBox.max.y &&\n    point.z >= bBox.min.z\n  ) {\n    return true;\n  }\n  return false;\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.enumMeshTriangles = void 0;\nconst THREE = __importStar(require(\"three\")); // uncomment for worker usage\nlet vA, vB, vC, nA, nB, nC;\nfunction enumMeshTriangles(geometry, callback) {\n    const attributes = geometry.attributes;\n    let a, b, c;\n    if (!vA) {\n        vA = new THREE.Vector3();\n        vB = new THREE.Vector3();\n        vC = new THREE.Vector3();\n        nA = new THREE.Vector3();\n        nB = new THREE.Vector3();\n        nC = new THREE.Vector3();\n    }\n    const positions = geometry.vb || attributes.position.array;\n    let normals = geometry.vb || (attributes.normal && attributes.normal.array); // eslint-disable-line no-mixed-operators\n    const stride = geometry.vb ? geometry.vbstride : 3;\n    // Get the offset to positions in the buffer. Be careful, 2D buffers\n    // don't use the 'position' attribute for positions. Reject those.\n    let poffset;\n    if (geometry.vblayout) {\n        if (!geometry.vblayout.position) {\n            return;\n        } // No positions, what to do??\n        poffset = geometry.vblayout.position.offset;\n    }\n    else if (!attributes.position) {\n        return;\n    } // No positions, what to do??\n    else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        poffset = attributes.position.itemOffset || 0;\n    }\n    let noffset = 0;\n    const nattr = geometry.vblayout\n        ? geometry.vblayout.normal\n        : attributes.normal || null;\n    if (nattr) {\n        noffset = nattr.offset || nattr.itemOffset || 0;\n    }\n    else {\n        normals = null;\n    }\n    if (nattr && (nattr.itemSize !== 3 || nattr.bytesPerItem !== 4)) {\n        normals = null;\n    }\n    const indices = geometry.ib ||\n        geometry.indices ||\n        (attributes.index ? attributes.index.array : null);\n    if (indices) {\n        let offsets = geometry.offsets;\n        if (!offsets || offsets.length === 0) {\n            offsets = [{ start: 0, count: indices.length, index: 0 }];\n        }\n        for (let oi = 0, ol = offsets.length; oi < ol; ++oi) {\n            const start = offsets[oi].start;\n            const count = offsets[oi].count;\n            const index = offsets[oi].index;\n            for (let i = start, il = start + count; i < il; i += 3) {\n                a = index + indices[i];\n                b = index + indices[i + 1];\n                c = index + indices[i + 2];\n                const pa = a * stride + poffset;\n                const pb = b * stride + poffset;\n                const pc = c * stride + poffset;\n                vA.x = positions[pa];\n                vA.y = positions[pa + 1];\n                vA.z = positions[pa + 2];\n                vB.x = positions[pb];\n                vB.y = positions[pb + 1];\n                vB.z = positions[pb + 2];\n                vC.x = positions[pc];\n                vC.y = positions[pc + 1];\n                vC.z = positions[pc + 2];\n                if (normals) {\n                    const na = a * stride + noffset;\n                    const nb = b * stride + noffset;\n                    const nc = c * stride + noffset;\n                    nA.x = normals[na];\n                    nA.y = normals[na + 1];\n                    nA.z = normals[na + 2];\n                    nB.x = normals[nb];\n                    nB.y = normals[nb + 1];\n                    nB.z = normals[nb + 2];\n                    nC.x = normals[nc];\n                    nC.y = normals[nc + 1];\n                    nC.z = normals[nc + 2];\n                    callback(vA, vB, vC, a, b, c, nA, nB, nC);\n                }\n                else {\n                    callback(vA, vB, vC, a, b, c);\n                }\n            }\n        }\n    }\n    else {\n        const vcount = geometry.vb\n            ? geometry.vb.length / geometry.vbstride\n            : positions.length / 3;\n        for (let i = 0; i < vcount; i++) {\n            a = 3 * i;\n            b = 3 * i + 1;\n            c = 3 * i + 2;\n            const pa = a * stride + poffset;\n            const pb = b * stride + poffset;\n            const pc = c * stride + poffset;\n            vA.x = positions[pa];\n            vA.y = positions[pa + 1];\n            vA.z = positions[pa + 2];\n            vB.x = positions[pb];\n            vB.y = positions[pb + 1];\n            vB.z = positions[pb + 2];\n            vC.x = positions[pc];\n            vC.y = positions[pc + 1];\n            vC.z = positions[pc + 2];\n            if (normals) {\n                const na = a * stride + noffset;\n                const nb = b * stride + noffset;\n                const nc = c * stride + noffset;\n                nA.x = normals[na];\n                nA.y = normals[na + 1];\n                nA.z = normals[na + 2];\n                nB.x = normals[nb];\n                nB.y = normals[nb + 1];\n                nB.z = normals[nb + 2];\n                nC.x = normals[nc];\n                nC.y = normals[nc + 1];\n                nC.z = normals[nc + 2];\n                callback(vA, vB, vC, a, b, c, nA, nB, nC);\n            }\n            else {\n                callback(vA, vB, vC, a, b, c);\n            }\n        }\n    }\n}\nexports.enumMeshTriangles = enumMeshTriangles;\n//# sourceMappingURL=enumMeshTriangles.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IMeshGeometry } from '../../interfaces/IMeshGeometry';\nimport * as THREE from 'three'; // uncomment for worker usage\n\nlet vA: THREE.Vector3,\n  vB: THREE.Vector3,\n  vC: THREE.Vector3,\n  nA: THREE.Vector3,\n  nB: THREE.Vector3,\n  nC: THREE.Vector3;\n\nexport function enumMeshTriangles(\n  geometry: IMeshGeometry,\n  callback: (\n    vA: THREE.Vector3,\n    vB: THREE.Vector3,\n    vC: THREE.Vector3,\n    a?: number,\n    b?: number,\n    c?: number,\n    nA?: THREE.Vector3,\n    nB?: THREE.Vector3,\n    nC?: THREE.Vector3\n  ) => void\n) {\n  const attributes = geometry.attributes;\n  let a: number, b: number, c: number;\n\n  if (!vA) {\n    vA = new THREE.Vector3();\n    vB = new THREE.Vector3();\n    vC = new THREE.Vector3();\n    nA = new THREE.Vector3();\n    nB = new THREE.Vector3();\n    nC = new THREE.Vector3();\n  }\n\n  const positions = geometry.vb || attributes.position.array;\n  let normals = geometry.vb || (attributes.normal && attributes.normal.array); // eslint-disable-line no-mixed-operators\n  const stride = geometry.vb ? geometry.vbstride : 3;\n  // Get the offset to positions in the buffer. Be careful, 2D buffers\n  // don't use the 'position' attribute for positions. Reject those.\n  let poffset: number;\n  if (geometry.vblayout) {\n    if (!geometry.vblayout.position) {\n      return;\n    } // No positions, what to do??\n    poffset = geometry.vblayout.position.offset;\n  } else if (!attributes.position) {\n    return;\n  } // No positions, what to do??\n  else {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    poffset = attributes.position.itemOffset || 0;\n  }\n\n  let noffset = 0;\n  const nattr = geometry.vblayout\n    ? geometry.vblayout.normal\n    : attributes.normal || null;\n  if (nattr) {\n    noffset = nattr.offset || nattr.itemOffset || 0;\n  } else {\n    normals = null;\n  }\n\n  if (nattr && (nattr.itemSize !== 3 || nattr.bytesPerItem !== 4)) {\n    normals = null;\n  }\n\n  const indices =\n    geometry.ib ||\n    geometry.indices ||\n    (attributes.index ? attributes.index.array : null);\n\n  if (indices) {\n    let offsets = geometry.offsets;\n\n    if (!offsets || offsets.length === 0) {\n      offsets = [{ start: 0, count: indices.length, index: 0 }];\n    }\n\n    for (let oi = 0, ol = offsets.length; oi < ol; ++oi) {\n      const start = offsets[oi].start;\n      const count = offsets[oi].count;\n      const index = offsets[oi].index;\n\n      for (let i = start, il = start + count; i < il; i += 3) {\n        a = index + indices[i];\n        b = index + indices[i + 1];\n        c = index + indices[i + 2];\n\n        const pa = a * stride + poffset;\n        const pb = b * stride + poffset;\n        const pc = c * stride + poffset;\n\n        vA.x = positions[pa];\n        vA.y = positions[pa + 1];\n        vA.z = positions[pa + 2];\n        vB.x = positions[pb];\n        vB.y = positions[pb + 1];\n        vB.z = positions[pb + 2];\n        vC.x = positions[pc];\n        vC.y = positions[pc + 1];\n        vC.z = positions[pc + 2];\n\n        if (normals) {\n          const na = a * stride + noffset;\n          const nb = b * stride + noffset;\n          const nc = c * stride + noffset;\n\n          nA.x = normals[na];\n          nA.y = normals[na + 1];\n          nA.z = normals[na + 2];\n          nB.x = normals[nb];\n          nB.y = normals[nb + 1];\n          nB.z = normals[nb + 2];\n          nC.x = normals[nc];\n          nC.y = normals[nc + 1];\n          nC.z = normals[nc + 2];\n\n          callback(vA, vB, vC, a, b, c, nA, nB, nC);\n        } else {\n          callback(vA, vB, vC, a, b, c);\n        }\n      }\n    }\n  } else {\n    const vcount = geometry.vb\n      ? geometry.vb.length / geometry.vbstride\n      : positions.length / 3;\n    for (let i = 0; i < vcount; i++) {\n      a = 3 * i;\n      b = 3 * i + 1;\n      c = 3 * i + 2;\n\n      const pa = a * stride + poffset;\n      const pb = b * stride + poffset;\n      const pc = c * stride + poffset;\n\n      vA.x = positions[pa];\n      vA.y = positions[pa + 1];\n      vA.z = positions[pa + 2];\n      vB.x = positions[pb];\n      vB.y = positions[pb + 1];\n      vB.z = positions[pb + 2];\n      vC.x = positions[pc];\n      vC.y = positions[pc + 1];\n      vC.z = positions[pc + 2];\n\n      if (normals) {\n        const na = a * stride + noffset;\n        const nb = b * stride + noffset;\n        const nc = c * stride + noffset;\n\n        nA.x = normals[na];\n        nA.y = normals[na + 1];\n        nA.z = normals[na + 2];\n        nB.x = normals[nb];\n        nB.y = normals[nb + 1];\n        nB.z = normals[nb + 2];\n        nC.x = normals[nc];\n        nC.y = normals[nc + 1];\n        nC.z = normals[nc + 2];\n\n        callback(vA, vB, vC, a, b, c, nA, nB, nC);\n      } else {\n        callback(vA, vB, vC, a, b, c);\n      }\n    }\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RayWorkerManager = void 0;\nconst work = require(\"webworkify\");\nconst q = require(\"q\");\nconst raycastWorker = require(\"./raycastWorker\");\nclass RayWorkerManager {\n    constructor() {\n        this.workInProg = new Map();\n        this.workId = 0;\n        this.worker = work(raycastWorker);\n        this.worker.addEventListener('message', (ev) => {\n            const prom = this.workInProg.get(ev.data.workId);\n            prom.resolve(ev.data.res);\n            this.workInProg.delete(ev.data.workId);\n        });\n    }\n    work(arg) {\n        const defered = q.defer();\n        this.workInProg.set(this.workId, defered);\n        this.worker.postMessage({ workId: this.workId, data: arg }); // send the worker a message\n        this.workId += 1;\n        return defered.promise;\n    }\n    static getInstance() {\n        if (RayWorkerManager.instance)\n            return RayWorkerManager.instance;\n        RayWorkerManager.instance = new RayWorkerManager();\n        return RayWorkerManager.instance;\n    }\n}\nexports.RayWorkerManager = RayWorkerManager;\nRayWorkerManager.instance = null;\nexports.default = RayWorkerManager;\n//# sourceMappingURL=workerManager.js.map","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nimport type { IWorkerData } from '../../interfaces/IWorkerData';\nimport type { IRaycastIntersectRes } from '../../interfaces/IRaycastIntersectRes';\nimport work = require('webworkify');\nimport q = require('q');\nimport raycastWorker = require('./raycastWorker');\n\nclass RayWorkerManager {\n  worker;\n  workInProg = new Map<number, q.Deferred<IRaycastIntersectRes[]>>();\n  workId = 0;\n  static instance: RayWorkerManager = null;\n  private constructor() {\n    this.worker = work(raycastWorker);\n    this.worker.addEventListener(\n      'message',\n      (ev: { data: { workId: number; res: IRaycastIntersectRes[] } }) => {\n        const prom = this.workInProg.get(ev.data.workId);\n        prom.resolve(ev.data.res);\n        this.workInProg.delete(ev.data.workId);\n      }\n    );\n  }\n\n  work(arg: IWorkerData): q.Promise<IRaycastIntersectRes[]> {\n    const defered = q.defer<IRaycastIntersectRes[]>();\n    this.workInProg.set(this.workId, defered);\n    this.worker.postMessage({ workId: this.workId, data: arg }); // send the worker a message\n    this.workId += 1;\n    return defered.promise;\n  }\n\n  static getInstance() {\n    if (RayWorkerManager.instance) return RayWorkerManager.instance;\n    RayWorkerManager.instance = new RayWorkerManager();\n    return RayWorkerManager.instance;\n  }\n}\n\nexport { RayWorkerManager };\nexport default RayWorkerManager;\n","var bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            'function(require,module,exports){' + fn + '(self); }',\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        'function(require,module,exports){' +\n            // try to call default if defined to also support babel esmodule exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);' +\n        '}',\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pushToAggregateDbidByModel = exports.getIntersects = void 0;\nconst raycastItemToMesh_1 = require(\"./raycastItemToMesh\");\nconst getLeafDbIdsByModel_1 = require(\"../../utils/projection/getLeafDbIdsByModel\");\nconst transformRtzToXyz_1 = require(\"../../utils/projection/transformRtzToXyz\");\nconst isProjectionGroup_1 = require(\"../../utils/projection/isProjectionGroup\");\nconst getModelByModelId_1 = require(\"../../utils/projection/getModelByModelId\");\nconst getViewer_1 = require(\"../../utils/getViewer\");\nfunction getIntersects(projectionGroupConfig, mergedRoomRef) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const selection = [];\n        projectionGroupConfig.progress = 0;\n        try {\n            for (let idx = 0; idx < projectionGroupConfig.data.length; idx++) {\n                const itemToProj = projectionGroupConfig.data[idx];\n                const _offset = (0, transformRtzToXyz_1.transformRtzToXyz)(itemToProj.offset);\n                if ((0, isProjectionGroup_1.isProjectionGroup)(itemToProj)) {\n                    for (const itm of itemToProj.computedData) {\n                        const model = (0, getModelByModelId_1.getModelByModelId)(itm.modelId);\n                        const ids = (0, getLeafDbIdsByModel_1.getLeafDbIdsByModel)(model, itm.dbId);\n                        if (ids.length === 0)\n                            continue;\n                        pushToAggregateDbidByModel(selection, ids, model, _offset, itm.dbId);\n                    }\n                }\n                else {\n                    const model = (0, getModelByModelId_1.getModelByModelId)(itemToProj.modelId);\n                    const ids = (0, getLeafDbIdsByModel_1.getLeafDbIdsByModel)(model, itemToProj.dbId);\n                    pushToAggregateDbidByModel(selection, ids, model, _offset, itemToProj.dbId);\n                }\n                projectionGroupConfig.progress =\n                    (projectionGroupConfig.data.length / (idx + 1)) * 66;\n            }\n            const intersects = yield (0, raycastItemToMesh_1.raycastItemToMesh)(selection, mergedRoomRef, (0, getViewer_1.getViewer)());\n            projectionGroupConfig.progress = 100;\n            return { selection, intersects };\n        }\n        catch (error) {\n            projectionGroupConfig.progress = 100;\n            console.error(error);\n        }\n    });\n}\nexports.getIntersects = getIntersects;\nfunction pushToAggregateDbidByModel(targetArray, ids, model, offset, rootDbId) {\n    for (const obj of targetArray) {\n        if (obj.model === model) {\n            for (const id of ids) {\n                const findItem = obj.dbId.find((a) => a.dbId === id);\n                const isFocus = rootDbId === id;\n                if (findItem === undefined) {\n                    obj.dbId.push({ dbId: id, offset, isFocus });\n                }\n                else if (isFocus === true && findItem.isFocus === false) {\n                    findItem.isFocus = true;\n                    findItem.offset = offset;\n                }\n            }\n            return;\n        }\n    }\n    const dbId = [];\n    for (const id of ids) {\n        const isFocus = rootDbId === id;\n        dbId.push({ dbId: id, offset, isFocus });\n    }\n    targetArray.push({\n        model,\n        dbId,\n    });\n}\nexports.pushToAggregateDbidByModel = pushToAggregateDbidByModel;\n//# sourceMappingURL=getIntersects.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { SpinalVec3 } from '../../interfaces';\nimport type { IAggregateDbidByModelItem } from '../../interfaces/IAggregateDbidByModelItem';\nimport type { ProjectionGroupConfig } from '../ProjectionItem/ProjectionGroupConfig';\nimport type { IIntersectRes } from '../../interfaces/IIntersectRes';\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport { raycastItemToMesh } from './raycastItemToMesh';\nimport { getLeafDbIdsByModel } from '../../utils/projection/getLeafDbIdsByModel';\nimport { transformRtzToXyz } from '../../utils/projection/transformRtzToXyz';\nimport { isProjectionGroup } from '../../utils/projection/isProjectionGroup';\nimport { getModelByModelId } from '../../utils/projection/getModelByModelId';\nimport { getViewer } from '../../utils/getViewer';\n\nexport async function getIntersects(\n  projectionGroupConfig: ProjectionGroupConfig,\n  mergedRoomRef: IAggregateDbidSetByModelItem[]\n): Promise<IIntersectRes> {\n  const selection: IAggregateDbidByModelItem[] = [];\n  projectionGroupConfig.progress = 0;\n  try {\n    for (let idx = 0; idx < projectionGroupConfig.data.length; idx++) {\n      const itemToProj = projectionGroupConfig.data[idx];\n      const _offset = transformRtzToXyz(itemToProj.offset);\n      if (isProjectionGroup(itemToProj)) {\n        for (const itm of itemToProj.computedData) {\n          const model = getModelByModelId(itm.modelId);\n          const ids = getLeafDbIdsByModel(model, itm.dbId);\n          if (ids.length === 0) continue;\n          pushToAggregateDbidByModel(selection, ids, model, _offset, itm.dbId);\n        }\n      } else {\n        const model = getModelByModelId(itemToProj.modelId);\n        const ids = getLeafDbIdsByModel(model, itemToProj.dbId);\n        pushToAggregateDbidByModel(\n          selection,\n          ids,\n          model,\n          _offset,\n          itemToProj.dbId\n        );\n      }\n      projectionGroupConfig.progress =\n        (projectionGroupConfig.data.length / (idx + 1)) * 66;\n    }\n    const intersects = await raycastItemToMesh(\n      selection,\n      mergedRoomRef,\n      getViewer()\n    );\n    projectionGroupConfig.progress = 100;\n    return { selection, intersects };\n  } catch (error) {\n    projectionGroupConfig.progress = 100;\n    console.error(error);\n  }\n}\n\nexport function pushToAggregateDbidByModel(\n  targetArray: IAggregateDbidByModelItem[],\n  ids: number[],\n  model: Autodesk.Viewing.Model,\n  offset: SpinalVec3,\n  rootDbId: number\n): void {\n  for (const obj of targetArray) {\n    if (obj.model === model) {\n      for (const id of ids) {\n        const findItem = obj.dbId.find((a) => a.dbId === id);\n        const isFocus = rootDbId === id;\n        if (findItem === undefined) {\n          obj.dbId.push({ dbId: id, offset, isFocus });\n        } else if (isFocus === true && findItem.isFocus === false) {\n          findItem.isFocus = true;\n          findItem.offset = offset;\n        }\n      }\n      return;\n    }\n  }\n\n  const dbId = [];\n  for (const id of ids) {\n    const isFocus = rootDbId === id;\n    dbId.push({ dbId: id, offset, isFocus });\n  }\n  targetArray.push({\n    model,\n    dbId,\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.raycastItemToMesh = void 0;\nconst utils_1 = require(\"../../utils\");\nconst getModifiedWorldBoundingBox_1 = require(\"../../utils/projection/getModifiedWorldBoundingBox\");\nconst getPointOffset_1 = require(\"../../utils/projection/getPointOffset\");\nconst getFragIds_1 = require(\"../../utils/getFragIds\");\n// raycast job don't use webworker\nconst raycastJob_1 = require(\"../rayUtils/raycastJob\");\n// also raycast job but use webworker\nconst workerManager_1 = require(\"../rayUtils/workerManager\");\nfunction raycastItemToMesh(from, to, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const [centerPoints, geometries] = yield Promise.all([\n                getCenterObjects(from, viewer),\n                getMeshsData(to, viewer),\n            ]);\n            console.log('raycastItemToMesh', centerPoints, geometries);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (!window._hmr) {\n                // use worker only on build, aka without HRM\n                const rayWorkerManager = workerManager_1.RayWorkerManager.getInstance();\n                return rayWorkerManager.work({ centerPoints, geometries }); // send the worker a message\n            }\n            return (0, raycastJob_1.raycastJob)({ centerPoints, geometries });\n        }\n        catch (e) {\n            console.error(e);\n            throw e;\n        }\n    });\n}\nexports.raycastItemToMesh = raycastItemToMesh;\nfunction getCenterObjects(array, viewer) {\n    const res = [];\n    for (const obj of array) {\n        for (const { dbId, offset } of obj.dbId) {\n            // add offset here\n            const center = getCenter(dbId, offset, obj.model, viewer);\n            res.push(center);\n        }\n    }\n    return Promise.all(res);\n}\nfunction getCenter(dbId, offset, model, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { matrixWorld, bbox } = yield (0, utils_1.getBBoxAndMatrix)(dbId, model, viewer);\n        const center = new THREE.Vector3();\n        bbox.getCenter(center);\n        return {\n            dbId,\n            modelId: model.id,\n            center: (0, getPointOffset_1.getPointOffset)(center, offset, matrixWorld),\n        };\n    });\n}\nfunction getMeshsData(array, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = [];\n        for (const { model, dbId } of array) {\n            for (const dbIdItem of dbId) {\n                res.push(getMesh(dbIdItem, model, viewer));\n            }\n        }\n        const tmp = yield Promise.all(res);\n        return tmp.filter((item) => {\n            return item != null;\n        });\n    });\n}\nfunction getMesh(dbIdItem, model, viewer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const ids = yield (0, getFragIds_1.getFragIds)(dbIdItem, model);\n            const meshs = ids.map((fragId) => viewer.impl.getRenderProxy(model, fragId));\n            const bbox = (0, getModifiedWorldBoundingBox_1.getModifiedWorldBoundingBox)(ids, model);\n            const center = new THREE.Vector3();\n            bbox.getCenter(center);\n            const dataMesh = meshs.map((mesh) => {\n                return {\n                    geometry: {\n                        vb: mesh.geometry.vb,\n                        vblayout: mesh.geometry.vblayout,\n                        attributes: mesh.geometry.attributes,\n                        ib: mesh.geometry.ib,\n                        indices: mesh.geometry.indices,\n                        index: mesh.geometry.index,\n                        offsets: mesh.geometry.offsets,\n                        vbstride: mesh.geometry.vbstride,\n                    },\n                    matrixWorld: mesh.matrixWorld,\n                    center,\n                    bbox,\n                };\n            });\n            return {\n                dataMesh,\n                dbId: dbIdItem,\n                modelId: model.id,\n            };\n        }\n        catch (e) {\n            console.log('getMeshsData no fragId in', dbIdItem);\n            return null;\n        }\n    });\n}\n//# sourceMappingURL=raycastItemToMesh.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IRaycastIntersectRes } from '../../interfaces/IRaycastIntersectRes';\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport type { IAggregateDbidByModelItem } from '../../interfaces/IAggregateDbidByModelItem';\nimport type { SpinalVec3 } from '../../interfaces/SpinalVec3';\nimport type { IMeshData } from '../../interfaces/IMeshData';\nimport type { IDbIdMeshData } from '../../interfaces/IDbIdMeshData';\nimport type { IDbIdCenter } from '../../interfaces/IDbIdCenter';\nimport { getBBoxAndMatrix } from '../../utils';\nimport { getModifiedWorldBoundingBox } from '../../utils/projection/getModifiedWorldBoundingBox';\nimport { getPointOffset } from '../../utils/projection/getPointOffset';\nimport { getFragIds } from '../../utils/getFragIds';\n\n// raycast job don't use webworker\nimport { raycastJob } from '../rayUtils/raycastJob';\n// also raycast job but use webworker\nimport { RayWorkerManager } from '../rayUtils/workerManager';\n\nexport async function raycastItemToMesh(\n  from: IAggregateDbidByModelItem[],\n  to: IAggregateDbidSetByModelItem[],\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<IRaycastIntersectRes[]> {\n  try {\n    const [centerPoints, geometries] = await Promise.all([\n      getCenterObjects(from, viewer),\n      getMeshsData(to, viewer),\n    ]);\n    console.log('raycastItemToMesh', centerPoints, geometries);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (!(<any>window)._hmr) {\n      // use worker only on build, aka without HRM\n      const rayWorkerManager = RayWorkerManager.getInstance();\n      return rayWorkerManager.work({ centerPoints, geometries }); // send the worker a message\n    }\n    return raycastJob({ centerPoints, geometries });\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nfunction getCenterObjects(\n  array: IAggregateDbidByModelItem[],\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<IDbIdCenter[]> {\n  const res: Promise<IDbIdCenter>[] = [];\n  for (const obj of array) {\n    for (const { dbId, offset } of obj.dbId) {\n      // add offset here\n      const center = getCenter(dbId, offset, obj.model, viewer);\n      res.push(center);\n    }\n  }\n  return Promise.all(res);\n}\n\nasync function getCenter(\n  dbId: number,\n  offset: SpinalVec3,\n  model: Autodesk.Viewing.Model,\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<IDbIdCenter> {\n  const { matrixWorld, bbox } = await getBBoxAndMatrix(dbId, model, viewer);\n  const center = new THREE.Vector3();\n  bbox.getCenter(center);\n  return {\n    dbId,\n    modelId: model.id,\n    center: getPointOffset(center, offset, matrixWorld),\n  };\n}\n\nasync function getMeshsData(\n  array: IAggregateDbidSetByModelItem[],\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<IDbIdMeshData[]> {\n  const res: Promise<IDbIdMeshData>[] = [];\n  for (const { model, dbId } of array) {\n    for (const dbIdItem of dbId) {\n      res.push(getMesh(dbIdItem, model, viewer));\n    }\n  }\n  const tmp = await Promise.all(res);\n  return tmp.filter((item) => {\n    return item != null;\n  });\n}\n\nasync function getMesh(\n  dbIdItem: number,\n  model: Autodesk.Viewing.Model,\n  viewer: Autodesk.Viewing.Viewer3D\n): Promise<IDbIdMeshData> {\n  try {\n    const ids = await getFragIds(dbIdItem, model);\n    const meshs = ids.map((fragId) =>\n      viewer.impl.getRenderProxy(model, fragId)\n    );\n    const bbox = getModifiedWorldBoundingBox(ids, model);\n    const center = new THREE.Vector3();\n    bbox.getCenter(center);\n\n    const dataMesh = meshs.map((mesh): IMeshData => {\n      return {\n        geometry: {\n          vb: mesh.geometry.vb,\n          vblayout: mesh.geometry.vblayout,\n          attributes: mesh.geometry.attributes,\n          ib: mesh.geometry.ib,\n          indices: mesh.geometry.indices,\n          index: mesh.geometry.index,\n          offsets: mesh.geometry.offsets,\n          vbstride: mesh.geometry.vbstride,\n        },\n        matrixWorld: mesh.matrixWorld,\n        center,\n        bbox,\n      };\n    });\n    return {\n      dataMesh,\n      dbId: dbIdItem,\n      modelId: model.id,\n    };\n  } catch (e) {\n    console.log('getMeshsData no fragId in', dbIdItem);\n    return null;\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeIntersectRes = void 0;\nfunction mergeIntersectRes(target, item) {\n    for (const itemInter of item.intersects) {\n        const targetInter = target.intersects.find((t) => {\n            return (t.origin.modelId === itemInter.origin.modelId &&\n                t.origin.dbId === itemInter.origin.dbId);\n        });\n        if (!targetInter) {\n            target.intersects.push(itemInter);\n        }\n        else if (itemInter.intersections.distance > targetInter.intersections.distance) {\n            targetInter.intersections.dbId = itemInter.intersections.dbId;\n            targetInter.intersections.distance = itemInter.intersections.distance;\n            targetInter.intersections.modelId = itemInter.intersections.modelId;\n        }\n    }\n    for (const itemSelect of item.selection) {\n        const targetSelect = target.selection.find((t) => {\n            return t.model === itemSelect.model;\n        });\n        if (!targetSelect) {\n            target.selection.push(itemSelect);\n        }\n        else {\n            for (const objDbId of itemSelect.dbId) {\n                if (!targetSelect.dbId.find((tDbId) => tDbId.dbId === objDbId.dbId)) {\n                    targetSelect.dbId.push(objDbId);\n                }\n            }\n        }\n    }\n}\nexports.mergeIntersectRes = mergeIntersectRes;\n//# sourceMappingURL=mergeIntersectRes.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IIntersectRes } from '../../interfaces/IIntersectRes';\n\nexport function mergeIntersectRes(\n  target: IIntersectRes,\n  item: IIntersectRes\n): void {\n  for (const itemInter of item.intersects) {\n    const targetInter = target.intersects.find((t) => {\n      return (\n        t.origin.modelId === itemInter.origin.modelId &&\n        t.origin.dbId === itemInter.origin.dbId\n      );\n    });\n    if (!targetInter) {\n      target.intersects.push(itemInter);\n    } else if (\n      itemInter.intersections.distance > targetInter.intersections.distance\n    ) {\n      targetInter.intersections.dbId = itemInter.intersections.dbId;\n      targetInter.intersections.distance = itemInter.intersections.distance;\n      targetInter.intersections.modelId = itemInter.intersections.modelId;\n    }\n  }\n  for (const itemSelect of item.selection) {\n    const targetSelect = target.selection.find((t) => {\n      return t.model === itemSelect.model;\n    });\n    if (!targetSelect) {\n      target.selection.push(itemSelect);\n    } else {\n      for (const objDbId of itemSelect.dbId) {\n        if (!targetSelect.dbId.find((tDbId) => tDbId.dbId === objDbId.dbId)) {\n          targetSelect.dbId.push(objDbId);\n        }\n      }\n    }\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeRoomRef = void 0;\nconst getRoomRef_1 = require(\"./getRoomRef\");\nfunction mergeRoomRef(data) {\n    const result = [];\n    for (const floorName in data) {\n        if (Object.prototype.hasOwnProperty.call(data, floorName)) {\n            const arrAgre = data[floorName];\n            arrAgre.forEach((agre) => {\n                agre.dbId.forEach((dbid) => {\n                    (0, getRoomRef_1.pushToAggregateSetDbidByModel)(result, dbid, agre.model);\n                });\n            });\n        }\n    }\n    return result;\n}\nexports.mergeRoomRef = mergeRoomRef;\n//# sourceMappingURL=mergeRoomRef.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport { pushToAggregateSetDbidByModel } from './getRoomRef';\n\nexport function mergeRoomRef(\n  data: Record<string, IAggregateDbidSetByModelItem[]>\n): IAggregateDbidSetByModelItem[] {\n  const result: IAggregateDbidSetByModelItem[] = [];\n  for (const floorName in data) {\n    if (Object.prototype.hasOwnProperty.call(data, floorName)) {\n      const arrAgre = data[floorName];\n      arrAgre.forEach((agre) => {\n        agre.dbId.forEach((dbid) => {\n          pushToAggregateSetDbidByModel(result, dbid, agre.model);\n        });\n      });\n    }\n  }\n  return result;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pushToAggregateSetDbidByModel = exports.getRoomRef = void 0;\nconst Constant_1 = require(\"../../../Constant\");\nconst getModelByBimFileIdLoaded_1 = require(\"../../utils/projection/getModelByBimFileIdLoaded\");\nfunction getRoomRef(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const result = [];\n        const relNames = [\n            Constant_1.GEO_SITE_RELATION,\n            Constant_1.GEO_BUILDING_RELATION,\n            Constant_1.GEO_FLOOR_RELATION,\n            Constant_1.GEO_ROOM_RELATION,\n            Constant_1.GEO_ZONE_RELATION,\n        ];\n        // get rooms nodes\n        const rooms = yield context.find(relNames, (node) => {\n            return node.getType().get() === Constant_1.GEO_ROOM_TYPE;\n        });\n        // get refObjet from rooms nodes\n        const refObjsProm = rooms.map((room) => {\n            return room.getChildren([Constant_1.GEO_REFERENCE_ROOM_RELATION]);\n        });\n        const refObjs = yield Promise.all(refObjsProm);\n        // merge result by model\n        for (const refs of refObjs) {\n            for (const ref of refs) {\n                if (ref.getType().get() === Constant_1.GEO_EQUIPMENT_TYPE) {\n                    const bimFileId = ref.info.bimFileId.get();\n                    const model = (0, getModelByBimFileIdLoaded_1.getModelByBimFileIdLoaded)(bimFileId);\n                    if (model) {\n                        const dbId = ref.info.dbid.get();\n                        pushToAggregateSetDbidByModel(result, dbId, model);\n                    }\n                }\n            }\n        }\n        return result;\n    });\n}\nexports.getRoomRef = getRoomRef;\nfunction pushToAggregateSetDbidByModel(targetArray, id, model) {\n    if (id === -1)\n        return;\n    for (const obj of targetArray) {\n        if (obj.model === model) {\n            obj.dbId.add(id);\n            return;\n        }\n    }\n    const idSet = new Set();\n    idSet.add(id);\n    targetArray.push({\n        model,\n        dbId: idSet,\n    });\n}\nexports.pushToAggregateSetDbidByModel = pushToAggregateSetDbidByModel;\n//# sourceMappingURL=getRoomRef.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport type { SpinalContext } from 'spinal-model-graph';\nimport {\n  GEO_SITE_RELATION,\n  GEO_BUILDING_RELATION,\n  GEO_FLOOR_RELATION,\n  GEO_ROOM_RELATION,\n  GEO_ZONE_RELATION,\n  GEO_ROOM_TYPE,\n  GEO_REFERENCE_ROOM_RELATION,\n  GEO_EQUIPMENT_TYPE,\n} from '../../../Constant';\nimport { getModelByBimFileIdLoaded } from '../../utils/projection/getModelByBimFileIdLoaded';\n\nexport async function getRoomRef(\n  context: SpinalContext\n): Promise<IAggregateDbidSetByModelItem[]> {\n  const result: IAggregateDbidSetByModelItem[] = [];\n  const relNames = [\n    GEO_SITE_RELATION,\n    GEO_BUILDING_RELATION,\n    GEO_FLOOR_RELATION,\n    GEO_ROOM_RELATION,\n    GEO_ZONE_RELATION,\n  ];\n\n  // get rooms nodes\n  const rooms = await context.find(relNames, (node) => {\n    return node.getType().get() === GEO_ROOM_TYPE;\n  });\n\n  // get refObjet from rooms nodes\n  const refObjsProm = rooms.map((room) => {\n    return room.getChildren([GEO_REFERENCE_ROOM_RELATION]);\n  });\n  const refObjs = await Promise.all(refObjsProm);\n\n  // merge result by model\n  for (const refs of refObjs) {\n    for (const ref of refs) {\n      if (ref.getType().get() === GEO_EQUIPMENT_TYPE) {\n        const bimFileId: string = ref.info.bimFileId.get();\n        const model = getModelByBimFileIdLoaded(bimFileId);\n        if (model) {\n          const dbId: number = ref.info.dbid.get();\n          pushToAggregateSetDbidByModel(result, dbId, model);\n        }\n      }\n    }\n  }\n  return result;\n}\n\nexport function pushToAggregateSetDbidByModel(\n  targetArray: IAggregateDbidSetByModelItem[],\n  id: number,\n  model: Autodesk.Viewing.Model\n): void {\n  if (id === -1) return;\n  for (const obj of targetArray) {\n    if (obj.model === model) {\n      obj.dbId.add(id);\n      return;\n    }\n  }\n\n  const idSet = new Set<number>();\n  idSet.add(id);\n  targetArray.push({\n    model,\n    dbId: idSet,\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRefFloorZMinMax = void 0;\nconst getFragIds_1 = require(\"../../utils/getFragIds\");\nconst getWorldBoundingBox_1 = require(\"../../utils/getWorldBoundingBox\");\nfunction getRefFloorZMinMax(data) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const record = {};\n        for (const id in data) {\n            const promise = [];\n            let min = null;\n            for (const { dbId: dbids, model } of data[id]) {\n                for (const dbid of dbids) {\n                    promise.push(getMinZ(dbid, model));\n                }\n            }\n            const p = yield Promise.all(promise);\n            for (const z of p) {\n                if (min === null || z < min)\n                    min = z;\n            }\n            const res = { min, max: null, floorId: id, distance: null };\n            record[id] = res;\n        }\n        const tmp = [];\n        for (const floorName in record) {\n            tmp.push(record[floorName]);\n        }\n        tmp.sort((a, b) => {\n            return a.min - b.min;\n        });\n        for (let idx = 0; idx < tmp.length; idx++) {\n            const itm = tmp[idx];\n            itm.max = ((_a = tmp[idx + 1]) === null || _a === void 0 ? void 0 : _a.min) || null;\n            if (itm.max !== null) {\n                tmp[idx].distance = itm.max - itm.min;\n            }\n        }\n        const result = {};\n        for (const itm of tmp) {\n            result[itm.floorId] = itm;\n        }\n        return result;\n    });\n}\nexports.getRefFloorZMinMax = getRefFloorZMinMax;\nfunction getMinZ(dbid, model) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const fragIds = yield (0, getFragIds_1.getFragIds)(dbid, model);\n        const bbox = (0, getWorldBoundingBox_1.getWorldBoundingBox)(fragIds, model);\n        return bbox.min.z;\n    });\n}\n//# sourceMappingURL=getRefFloorZMinMax.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport type { IFloorZData } from '../../interfaces/IFloorZData';\nimport { getFragIds } from '../../utils/getFragIds';\nimport { getWorldBoundingBox } from '../../utils/getWorldBoundingBox';\n\nexport async function getRefFloorZMinMax(\n  data: Record<string, IAggregateDbidSetByModelItem[]>\n): Promise<Record<string, IFloorZData>> {\n  const record: Record<string, IFloorZData> = {};\n  for (const id in data) {\n    const promise: Promise<number>[] = [];\n    let min: number = null;\n    for (const { dbId: dbids, model } of data[id]) {\n      for (const dbid of dbids) {\n        promise.push(getMinZ(dbid, model));\n      }\n    }\n    const p = await Promise.all(promise);\n    for (const z of p) {\n      if (min === null || z < min) min = z;\n    }\n    const res = { min, max: null, floorId: id, distance: null };\n    record[id] = res;\n  }\n  const tmp: IFloorZData[] = [];\n  for (const floorName in record) {\n    tmp.push(record[floorName]);\n  }\n  tmp.sort((a, b) => {\n    return a.min - b.min;\n  });\n  for (let idx = 0; idx < tmp.length; idx++) {\n    const itm = tmp[idx];\n    itm.max = tmp[idx + 1]?.min || null;\n    if (itm.max !== null) {\n      tmp[idx].distance = itm.max - itm.min;\n    }\n  }\n  const result: Record<string, IFloorZData> = {};\n  for (const itm of tmp) {\n    result[itm.floorId] = itm;\n  }\n  return result;\n}\n\nasync function getMinZ(dbid: number, model: Autodesk.Viewing.Model) {\n  const fragIds = await getFragIds(dbid, model);\n  const bbox = getWorldBoundingBox(fragIds, model);\n  return bbox.min.z;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFloorChildrenDbIdOfModel = void 0;\nfunction getFloorChildrenDbIdOfModel(model, floorNbr) {\n    const userFct = `function userFunction(pdb) {\n    const result = new Set();\n    let idCat = -1;\n    pdb.enumAttributes(function (i, attrDef) {\n      if (\n        attrDef.name.toLowerCase() === 'level' &&\n        attrDef.category === '__internalref__'\n      ) {\n        console.log(\"attrDef\", attrDef);\n        idCat = i;\n      }\n    });\n    if (idCat === -1) return [];\n    pdb.enumObjects(function (dbId) {\n      pdb.enumObjectProperties(dbId, function (attrId, valId) {\n        if (idCat !== attrId) return false;\n        const value = pdb.getAttrValue(attrId, valId);\n        if (${floorNbr} === value) {\n                  console.log(dbId,attrId, value);\n          result.add(dbId)\n        };\n        return true;\n      });\n    });\n\n    return Array.from(result);\n  }`;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return model.getPropertyDb().executeUserFunction(userFct);\n}\nexports.getFloorChildrenDbIdOfModel = getFloorChildrenDbIdOfModel;\n//# sourceMappingURL=getFloorChildrenDbIdOfModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getFloorChildrenDbIdOfModel(\n  model: Autodesk.Viewing.Model,\n  floorNbr: number\n): Promise<number[]> {\n  const userFct = `function userFunction(pdb) {\n    const result = new Set();\n    let idCat = -1;\n    pdb.enumAttributes(function (i, attrDef) {\n      if (\n        attrDef.name.toLowerCase() === 'level' &&\n        attrDef.category === '__internalref__'\n      ) {\n        console.log(\"attrDef\", attrDef);\n        idCat = i;\n      }\n    });\n    if (idCat === -1) return [];\n    pdb.enumObjects(function (dbId) {\n      pdb.enumObjectProperties(dbId, function (attrId, valId) {\n        if (idCat !== attrId) return false;\n        const value = pdb.getAttrValue(attrId, valId);\n        if (${floorNbr} === value) {\n                  console.log(dbId,attrId, value);\n          result.add(dbId)\n        };\n        return true;\n      });\n    });\n\n    return Array.from(result);\n  }`;\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return model.getPropertyDb().executeUserFunction(userFct);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFloorPropForModel = void 0;\nconst getBulkProperties_1 = require(\"../../utils/projection/getBulkProperties\");\nconst getAllModelLoaded_1 = require(\"../../utils/projection/getAllModelLoaded\");\nconst getFloorsDbIdOfModel_1 = require(\"./getFloorsDbIdOfModel\");\nfunction getFloorPropForModel() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const models = (0, getAllModelLoaded_1.getAllModelLoaded)();\n        const res = {};\n        for (const model of models) {\n            const floorDbid = yield (0, getFloorsDbIdOfModel_1.getFloorsDbIdOfModel)(model);\n            const floorProps = yield (0, getBulkProperties_1.getBulkProperties)(model, floorDbid, {\n                propFilter: ['name', 'externalId'],\n            });\n            res[model.id] = floorProps.map((itm) => {\n                return {\n                    id: itm.id,\n                    externalId: itm.externalId,\n                    dbId: itm.dbId,\n                    name: itm.name,\n                    modelId: model.id,\n                };\n            });\n        }\n        return res;\n    });\n}\nexports.getFloorPropForModel = getFloorPropForModel;\n//# sourceMappingURL=getFloorPropForModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IFloorPropForModel } from '../../interfaces/IFloorPropForModel';\nimport { getBulkProperties } from '../../utils/projection/getBulkProperties';\nimport { getAllModelLoaded } from '../../utils/projection/getAllModelLoaded';\nimport { getFloorsDbIdOfModel } from './getFloorsDbIdOfModel';\n\nexport async function getFloorPropForModel(): Promise<IFloorPropForModel> {\n  const models = getAllModelLoaded();\n  const res: IFloorPropForModel = {};\n  for (const model of models) {\n    const floorDbid = await getFloorsDbIdOfModel(model);\n    const floorProps = await getBulkProperties(model, floorDbid, {\n      propFilter: ['name', 'externalId'],\n    });\n    res[model.id] = floorProps.map((itm) => {\n      return {\n        id: itm.id,\n        externalId: itm.externalId,\n        dbId: itm.dbId,\n        name: itm.name,\n        modelId: model.id,\n      };\n    });\n  }\n  return res;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAllModelLoaded = void 0;\nfunction getAllModelLoaded() {\n    const mappingBimFileIdModelId = window.spinal.BimObjectService.mappingBimFileIdModelId;\n    const models = new Set();\n    for (const bimFileId in mappingBimFileIdModelId) {\n        if (Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)) {\n            for (const { model } of mappingBimFileIdModelId[bimFileId].modelScene) {\n                models.add(model);\n            }\n        }\n    }\n    return Array.from(models);\n}\nexports.getAllModelLoaded = getAllModelLoaded;\n//# sourceMappingURL=getAllModelLoaded.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { Model, Val } from 'spinal-core-connectorjs';\n\nexport function getAllModelLoaded(): Autodesk.Viewing.Model[] {\n  const mappingBimFileIdModelId: Record<\n    string,\n    {\n      modelId: number;\n      modelScene: { model: Autodesk.Viewing.Model; scene: Model }[];\n      version: Val;\n    }\n  > = window.spinal.BimObjectService.mappingBimFileIdModelId;\n  const models = new Set<Autodesk.Viewing.Model>();\n  for (const bimFileId in mappingBimFileIdModelId) {\n    if (\n      Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)\n    ) {\n      for (const { model } of mappingBimFileIdModelId[bimFileId].modelScene) {\n        models.add(model);\n      }\n    }\n  }\n  return Array.from(models);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFloorsDbIdOfModel = void 0;\nfunction getFloorsDbIdOfModel(model) {\n    const userFct = `function userFunction(pdb) {\n    const result = new Set();\n    let idCat = -1;\n    pdb.enumAttributes(function (i, attrDef) {\n      if (\n        attrDef.name.toLowerCase() === 'level' &&\n        attrDef.category === '__internalref__'\n      ) {\n        idCat = i;\n      }\n    });\n    if (idCat === -1) return [];\n    pdb.enumObjects(function (dbId) {\n      pdb.enumObjectProperties(dbId, function (attrId, valId) {\n        if (idCat !== attrId) return false;\n        const value = pdb.getAttrValue(attrId, valId);\n        result.add(value);\n        return true;\n      });\n    });\n\n    return Array.from(result);\n  }`;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return model.getPropertyDb().executeUserFunction(userFct);\n}\nexports.getFloorsDbIdOfModel = getFloorsDbIdOfModel;\n//# sourceMappingURL=getFloorsDbIdOfModel.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nexport function getFloorsDbIdOfModel(\n  model: Autodesk.Viewing.Model\n): Promise<number[]> {\n  const userFct = `function userFunction(pdb) {\n    const result = new Set();\n    let idCat = -1;\n    pdb.enumAttributes(function (i, attrDef) {\n      if (\n        attrDef.name.toLowerCase() === 'level' &&\n        attrDef.category === '__internalref__'\n      ) {\n        idCat = i;\n      }\n    });\n    if (idCat === -1) return [];\n    pdb.enumObjects(function (dbId) {\n      pdb.enumObjectProperties(dbId, function (attrId, valId) {\n        if (idCat !== attrId) return false;\n        const value = pdb.getAttrValue(attrId, valId);\n        result.add(value);\n        return true;\n      });\n    });\n\n    return Array.from(result);\n  }`;\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return model.getPropertyDb().executeUserFunction(userFct);\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRoomRefByFloor = void 0;\nconst Constant_1 = require(\"../../../Constant\");\nconst getModelByBimFileIdLoaded_1 = require(\"../../utils/projection/getModelByBimFileIdLoaded\");\nconst getRoomRef_1 = require(\"../projection/getRoomRef\");\nconst utils_1 = require(\"../../utils\");\nfunction getRoomRefByFloor() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const graph = (0, utils_1.getGraph)();\n        const context = yield (0, utils_1.getContextSpatial)(graph);\n        const result = {};\n        const floorRelNames = [\n            Constant_1.GEO_SITE_RELATION,\n            Constant_1.GEO_BUILDING_RELATION,\n            Constant_1.GEO_FLOOR_RELATION,\n            Constant_1.GEO_ZONE_RELATION,\n        ];\n        const roomRelNames = [Constant_1.GEO_ROOM_RELATION, Constant_1.GEO_ZONE_RELATION];\n        // get floor\n        const floors = yield context.find(floorRelNames, (node) => {\n            return node.getType().get() === Constant_1.GEO_FLOOR_TYPE;\n        });\n        for (const floor of floors) {\n            (0, utils_1.addNodeGraphService)(floor);\n            const resFloor = [];\n            result[floor.info.id.get()] = resFloor;\n            // get rooms nodes\n            const rooms = yield floor.find(roomRelNames, (node) => {\n                return node.getType().get() === Constant_1.GEO_ROOM_TYPE;\n            });\n            const refObjsProm = rooms.map((room) => {\n                return room.getChildren([Constant_1.GEO_REFERENCE_ROOM_RELATION]);\n            });\n            const refObjs = yield Promise.all(refObjsProm);\n            // merge result by model\n            for (const refs of refObjs) {\n                for (const ref of refs) {\n                    if (ref.getType().get() === Constant_1.GEO_EQUIPMENT_TYPE) {\n                        const bimFileId = ref.info.bimFileId.get();\n                        const model = (0, getModelByBimFileIdLoaded_1.getModelByBimFileIdLoaded)(bimFileId);\n                        if (model) {\n                            const dbId = ref.info.dbid.get();\n                            (0, getRoomRef_1.pushToAggregateSetDbidByModel)(resFloor, dbId, model);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    });\n}\nexports.getRoomRefByFloor = getRoomRefByFloor;\n//# sourceMappingURL=getRoomRefByFloor.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport {\n  GEO_SITE_RELATION,\n  GEO_BUILDING_RELATION,\n  GEO_FLOOR_RELATION,\n  GEO_ROOM_RELATION,\n  GEO_ZONE_RELATION,\n  GEO_ROOM_TYPE,\n  GEO_REFERENCE_ROOM_RELATION,\n  GEO_EQUIPMENT_TYPE,\n  GEO_FLOOR_TYPE,\n} from '../../../Constant';\nimport { getModelByBimFileIdLoaded } from '../../utils/projection/getModelByBimFileIdLoaded';\nimport { pushToAggregateSetDbidByModel } from '../projection/getRoomRef';\nimport { addNodeGraphService, getContextSpatial, getGraph } from '../../utils';\n\nexport async function getRoomRefByFloor(): Promise<\n  Record<string, IAggregateDbidSetByModelItem[]>\n> {\n  const graph = getGraph();\n  const context = await getContextSpatial(graph);\n  const result: Record<string, IAggregateDbidSetByModelItem[]> = {};\n  const floorRelNames = [\n    GEO_SITE_RELATION,\n    GEO_BUILDING_RELATION,\n    GEO_FLOOR_RELATION,\n    GEO_ZONE_RELATION,\n  ];\n  const roomRelNames = [GEO_ROOM_RELATION, GEO_ZONE_RELATION];\n  // get floor\n  const floors = await context.find(floorRelNames, (node) => {\n    return node.getType().get() === GEO_FLOOR_TYPE;\n  });\n  for (const floor of floors) {\n    addNodeGraphService(floor);\n    const resFloor: IAggregateDbidSetByModelItem[] = [];\n    result[floor.info.id.get()] = resFloor;\n    // get rooms nodes\n    const rooms = await floor.find(roomRelNames, (node) => {\n      return node.getType().get() === GEO_ROOM_TYPE;\n    });\n    const refObjsProm = rooms.map((room) => {\n      return room.getChildren([GEO_REFERENCE_ROOM_RELATION]);\n    });\n    const refObjs = await Promise.all(refObjsProm);\n    // merge result by model\n    for (const refs of refObjs) {\n      for (const ref of refs) {\n        if (ref.getType().get() === GEO_EQUIPMENT_TYPE) {\n          const bimFileId: string = ref.info.bimFileId.get();\n          const model = getModelByBimFileIdLoaded(bimFileId);\n          if (model) {\n            const dbId: number = ref.info.dbid.get();\n            pushToAggregateSetDbidByModel(resFloor, dbId, model);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pushToAggregateSetDbidByBimFileId = exports.getSpatialTree = void 0;\nconst Constant_1 = require(\"../../../Constant\");\nconst utils_1 = require(\"../../utils\");\nfunction getSpatialTree() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const graph = (0, utils_1.getGraph)();\n        const spatialContext = yield (0, utils_1.getContextSpatial)(graph);\n        const buildings = yield spatialContext.getChildrenInContext(spatialContext);\n        const proms = buildings.map((building) => __awaiter(this, void 0, void 0, function* () {\n            const floors = yield building.getChildrenInContext(spatialContext);\n            const buildingChildren = floors.map((floor) => __awaiter(this, void 0, void 0, function* () {\n                const rooms = yield floor.getChildrenInContext(spatialContext);\n                const roomDatas = rooms.map((room) => __awaiter(this, void 0, void 0, function* () {\n                    (0, utils_1.addNodeGraphService)(room);\n                    // to preload roomrefs\n                    room.getChildren(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n                    // const roomRefs = await room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n                    // const aggrData = [];\n                    // for (const roomRef of roomRefs) {\n                    //   pushToAggregateSetDbidByBimFileId(\n                    //     aggrData,\n                    //     roomRef.info.dbid.get(),\n                    //     roomRef.info.bimFileId.get()\n                    //   );\n                    // }\n                    return {\n                        type: 'room',\n                        id: room.info.id.get(),\n                        name: room.info.name.get(),\n                        server_id: room._server_id,\n                        children: [],\n                        // data: aggrData,\n                    };\n                }));\n                return {\n                    type: 'floor',\n                    id: floor.info.id.get(),\n                    name: floor.info.name.get(),\n                    server_id: floor._server_id,\n                    children: yield Promise.all(roomDatas),\n                };\n            }));\n            return {\n                type: 'building',\n                id: building.info.id.get(),\n                name: building.info.name.get(),\n                server_id: building._server_id,\n                children: yield Promise.all(buildingChildren),\n            };\n        }));\n        return Promise.all(proms);\n    });\n}\nexports.getSpatialTree = getSpatialTree;\nfunction pushToAggregateSetDbidByBimFileId(targetArray, id, bimFileId) {\n    if (id === -1)\n        return;\n    for (const obj of targetArray) {\n        if (obj.bimFileId === bimFileId) {\n            obj.dbId.add(id);\n            return;\n        }\n    }\n    const idSet = new Set();\n    idSet.add(id);\n    targetArray.push({\n        bimFileId,\n        dbId: idSet,\n    });\n}\nexports.pushToAggregateSetDbidByBimFileId = pushToAggregateSetDbidByBimFileId;\n//# sourceMappingURL=getSpatialTree.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { GEO_REFERENCE_ROOM_RELATION } from '../../../Constant';\nimport { addNodeGraphService, getContextSpatial, getGraph } from '../../utils';\ninterface IAggregateSetDbidByBimFileId {\n  bimFileId: string;\n  dbId: Set<number>;\n}\ninterface ISpatialTreeNode {\n  type: string;\n  id: string;\n  name: string;\n  server_id: number;\n  children: ISpatialTreeNode[];\n  data?: IAggregateSetDbidByBimFileId[];\n}\n\nexport async function getSpatialTree(): Promise<ISpatialTreeNode[]> {\n  const graph = getGraph();\n  const spatialContext = await getContextSpatial(graph);\n  const buildings = await spatialContext.getChildrenInContext(spatialContext);\n  const proms: Promise<ISpatialTreeNode>[] = buildings.map(async (building) => {\n    const floors = await building.getChildrenInContext(spatialContext);\n    const buildingChildren = floors.map(async (floor) => {\n      const rooms = await floor.getChildrenInContext(spatialContext);\n      const roomDatas: Promise<ISpatialTreeNode>[] = rooms.map(async (room) => {\n        addNodeGraphService(room);\n        // to preload roomrefs\n        room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n        // const roomRefs = await room.getChildren(GEO_REFERENCE_ROOM_RELATION);\n        // const aggrData = [];\n        // for (const roomRef of roomRefs) {\n        //   pushToAggregateSetDbidByBimFileId(\n        //     aggrData,\n        //     roomRef.info.dbid.get(),\n        //     roomRef.info.bimFileId.get()\n        //   );\n        // }\n        return {\n          type: 'room',\n          id: room.info.id.get(),\n          name: room.info.name.get(),\n          server_id: room._server_id,\n          children: [],\n          // data: aggrData,\n        };\n      });\n      return {\n        type: 'floor',\n        id: floor.info.id.get(),\n        name: floor.info.name.get(),\n        server_id: floor._server_id,\n        children: await Promise.all(roomDatas),\n      };\n    });\n\n    return {\n      type: 'building',\n      id: building.info.id.get(),\n      name: building.info.name.get(),\n      server_id: building._server_id,\n      children: await Promise.all(buildingChildren),\n    };\n  });\n\n  return Promise.all(proms);\n}\n\nexport function pushToAggregateSetDbidByBimFileId(\n  targetArray: IAggregateSetDbidByBimFileId[],\n  id: number,\n  bimFileId: string\n): void {\n  if (id === -1) return;\n  for (const obj of targetArray) {\n    if (obj.bimFileId === bimFileId) {\n      obj.dbId.add(id);\n      return;\n    }\n  }\n\n  const idSet = new Set<number>();\n  idSet.add(id);\n  targetArray.push({\n    bimFileId,\n    dbId: idSet,\n  });\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDataAssing = void 0;\nconst utils_1 = require(\"../../utils\");\nfunction getParentRoom(node, contextGeo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = yield node.getParentsInContext(contextGeo);\n        return res[0];\n    });\n}\nfunction getDataAssing({ contextId, selectedNodeId, }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const graph = (0, utils_1.getGraph)();\n        const contextGeo = yield (0, utils_1.getContextSpatial)(graph);\n        const context = (0, utils_1.getRealNode)(contextId);\n        const selectedNode = (0, utils_1.getRealNode)(selectedNodeId);\n        const warn = [];\n        const error = [];\n        const children = yield selectedNode.getChildrenInContext(context);\n        for (const child of children) {\n            const arr = child.info.name.get() === 'error' ? error : warn;\n            const items = yield child.getChildrenInContext(context);\n            for (const item of items) {\n                let PNId = '';\n                let PName = '';\n                if (child.info.name.get() === 'warn') {\n                    // get parent ID\n                    const parent = yield getParentRoom(item, contextGeo);\n                    PNId = (parent === null || parent === void 0 ? void 0 : parent.info.id.get()) || '';\n                    PName = (parent === null || parent === void 0 ? void 0 : parent.info.name.get()) || '';\n                }\n                arr.push({\n                    name: item.info.name.get(),\n                    PNId,\n                    PName,\n                    bimFileId: item.info.bimFileId.get(),\n                    dbid: item.info.dbid.get(),\n                    externalId: item.info.externalId.get(),\n                    validId: '',\n                });\n            }\n        }\n        return {\n            warn,\n            error,\n        };\n    });\n}\nexports.getDataAssing = getDataAssing;\n//# sourceMappingURL=getDataAssing.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalContext, SpinalNode } from 'spinal-model-graph';\nimport { getContextSpatial, getGraph, getRealNode } from '../../utils';\nimport type { IManualAssingData } from '../../interfaces/IManualAssingData';\n\nasync function getParentRoom(\n  node: SpinalNode,\n  contextGeo: SpinalContext\n): Promise<SpinalNode> {\n  const res = await node.getParentsInContext(contextGeo);\n  return res[0];\n}\nexport async function getDataAssing({\n  contextId,\n  selectedNodeId,\n}: {\n  contextId: string;\n  selectedNodeId: string;\n}): Promise<{ warn: IManualAssingData[]; error: IManualAssingData[] }> {\n  const graph = getGraph();\n  const contextGeo = await getContextSpatial(graph);\n  const context = getRealNode(contextId);\n  const selectedNode = getRealNode(selectedNodeId);\n  const warn: IManualAssingData[] = [];\n  const error: IManualAssingData[] = [];\n\n  const children = await selectedNode.getChildrenInContext(context);\n  for (const child of children) {\n    const arr = child.info.name.get() === 'error' ? error : warn;\n    const items = await child.getChildrenInContext(context);\n    for (const item of items) {\n      let PNId = '';\n      let PName = '';\n      if (child.info.name.get() === 'warn') {\n        // get parent ID\n        const parent = await getParentRoom(item, contextGeo);\n        PNId = parent?.info.id.get() || '';\n        PName = parent?.info.name.get() || '';\n      }\n      arr.push({\n        name: item.info.name.get(),\n        PNId,\n        PName,\n        bimFileId: item.info.bimFileId.get(),\n        dbid: item.info.dbid.get(),\n        externalId: item.info.externalId.get(),\n        validId: '',\n      });\n    }\n  }\n  return {\n    warn,\n    error,\n  };\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearThemingColors = exports.viewDataAssignInViewer = void 0;\nconst Constant_1 = require(\"../../../Constant\");\nconst utils_1 = require(\"../../utils\");\nconst getAllModelLoaded_1 = require(\"../../utils/projection/getAllModelLoaded\");\nconst getRoomRef_1 = require(\"../projection/getRoomRef\");\n/**\n * obj = blue\n * roomSelect = yellow\n * if validId; valid = green & parent = red\n * else parent = green\n * @export\n * @param {number} dbid\n * @param {string} bimFileId\n * @param {string} [roomId]\n * @param {string} [parentValidId]\n * @param {string} [parentNodeId]\n */\nfunction viewDataAssignInViewer(dbid, bimFileId, roomId, parentValidId, parentNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const models = (0, getAllModelLoaded_1.getAllModelLoaded)();\n        const viewer = (0, utils_1.getViewer)();\n        // clean model selection / isolation\n        for (const model of models) {\n            viewer.clearThemingColors(model);\n        }\n        const green = new THREE.Vector4(0, 227, 0);\n        const red = new THREE.Vector4(255, 0, 0);\n        const roomIdColor = new THREE.Vector4(227, 219, 0);\n        const modelDbid = (0, utils_1.getModelByBimFileIdLoaded)(bimFileId);\n        if (modelDbid) {\n            viewer.clearSelection();\n            viewer.select(dbid, modelDbid);\n        }\n        const aggrData = [\n            {\n                dbId: new Set([dbid]),\n                model: modelDbid,\n            },\n        ];\n        let colorValid, colorParent;\n        if (parentValidId) {\n            colorValid = green;\n            colorParent = red;\n        }\n        else {\n            colorValid = red;\n            colorParent = green;\n        }\n        if (roomId)\n            yield getRoomRefsInfo((0, utils_1.getRealNode)(roomId), aggrData, roomIdColor);\n        if (parentNodeId)\n            yield getRoomRefsInfo((0, utils_1.getRealNode)(parentNodeId), aggrData, colorParent);\n        if (parentValidId)\n            yield getRoomRefsInfo((0, utils_1.getRealNode)(parentValidId), aggrData, colorValid);\n        viewer.fitToView(Array.from(aggrData[0].dbId), aggrData[0].model);\n        const data = aggrData.map((itm) => {\n            return {\n                model: itm.model,\n                selection: Array.from(itm.dbId),\n            };\n        });\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        viewer.impl.visibilityManager.aggregateIsolate(data);\n    });\n}\nexports.viewDataAssignInViewer = viewDataAssignInViewer;\nfunction getRoomRefsInfo(roomNode, aggrData, color) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const viewer = (0, utils_1.getViewer)();\n        if (roomNode) {\n            const roomRefs = yield roomNode.getChildren(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n            for (const roomRef of roomRefs) {\n                const model = (0, utils_1.getModelByBimFileIdLoaded)(roomRef.info.bimFileId.get());\n                if (model) {\n                    const dbid = roomRef.info.dbid.get();\n                    viewer.setThemingColor(dbid, color, model);\n                    (0, getRoomRef_1.pushToAggregateSetDbidByModel)(aggrData, dbid, model);\n                }\n            }\n        }\n    });\n}\nfunction clearThemingColors() {\n    const models = (0, getAllModelLoaded_1.getAllModelLoaded)();\n    const viewer = (0, utils_1.getViewer)();\n    for (const model of models) {\n        viewer.clearThemingColors(model);\n    }\n}\nexports.clearThemingColors = clearThemingColors;\n//# sourceMappingURL=viewDataAssignInViewer.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { IAggregateDbidSetByModelItem } from '../../interfaces/IAggregateDbidSetByModelItem';\nimport type { SpinalNode } from 'spinal-model-graph';\nimport { GEO_REFERENCE_ROOM_RELATION } from '../../../Constant';\nimport { getModelByBimFileIdLoaded, getRealNode, getViewer } from '../../utils';\nimport { getAllModelLoaded } from '../../utils/projection/getAllModelLoaded';\nimport { pushToAggregateSetDbidByModel } from '../projection/getRoomRef';\n\n/**\n * obj = blue\n * roomSelect = yellow\n * if validId; valid = green & parent = red\n * else parent = green\n * @export\n * @param {number} dbid\n * @param {string} bimFileId\n * @param {string} [roomId]\n * @param {string} [parentValidId]\n * @param {string} [parentNodeId]\n */\nexport async function viewDataAssignInViewer(\n  dbid: number,\n  bimFileId: string,\n  roomId?: string,\n  parentValidId?: string,\n  parentNodeId?: string\n) {\n  const models = getAllModelLoaded();\n  const viewer = getViewer();\n  // clean model selection / isolation\n  for (const model of models) {\n    viewer.clearThemingColors(model);\n  }\n  const green = new THREE.Vector4(0, 227, 0);\n  const red = new THREE.Vector4(255, 0, 0);\n  const roomIdColor = new THREE.Vector4(227, 219, 0);\n  const modelDbid = getModelByBimFileIdLoaded(bimFileId);\n  if (modelDbid) {\n    viewer.clearSelection();\n    viewer.select(dbid, modelDbid);\n  }\n  const aggrData: IAggregateDbidSetByModelItem[] = [\n    {\n      dbId: new Set([dbid]),\n      model: modelDbid,\n    },\n  ];\n  let colorValid: THREE.Vector4, colorParent: THREE.Vector4;\n  if (parentValidId) {\n    colorValid = green;\n    colorParent = red;\n  } else {\n    colorValid = red;\n    colorParent = green;\n  }\n  if (roomId) await getRoomRefsInfo(getRealNode(roomId), aggrData, roomIdColor);\n  if (parentNodeId)\n    await getRoomRefsInfo(getRealNode(parentNodeId), aggrData, colorParent);\n  if (parentValidId)\n    await getRoomRefsInfo(getRealNode(parentValidId), aggrData, colorValid);\n\n  viewer.fitToView(Array.from(aggrData[0].dbId), aggrData[0].model);\n  const data = aggrData.map((itm) => {\n    return {\n      model: itm.model,\n      selection: Array.from(itm.dbId),\n    };\n  });\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  viewer.impl.visibilityManager.aggregateIsolate(data);\n}\n\nasync function getRoomRefsInfo(\n  roomNode: SpinalNode,\n  aggrData: IAggregateDbidSetByModelItem[],\n  color: THREE.Vector4\n) {\n  const viewer = getViewer();\n  if (roomNode) {\n    const roomRefs = await roomNode.getChildren(GEO_REFERENCE_ROOM_RELATION);\n    for (const roomRef of roomRefs) {\n      const model = getModelByBimFileIdLoaded(roomRef.info.bimFileId.get());\n      if (model) {\n        const dbid = roomRef.info.dbid.get();\n        viewer.setThemingColor(dbid, color, model);\n        pushToAggregateSetDbidByModel(aggrData, dbid, model);\n      }\n    }\n  }\n}\nexport function clearThemingColors() {\n  const models = getAllModelLoaded();\n  const viewer = getViewer();\n  for (const model of models) {\n    viewer.clearThemingColors(model);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRoomNodeFromSelectFloor = void 0;\nconst utils_1 = require(\"../../utils\");\nconst Constant_1 = require(\"../../../Constant\");\nfunction getRoomNodeFromSelectFloor() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bimObj = yield getFloorSelectedBimObj();\n        if (bimObj) {\n            const parents = yield bimObj.getParents(Constant_1.GEO_REFERENCE_ROOM_RELATION);\n            return parents[0];\n        }\n    });\n}\nexports.getRoomNodeFromSelectFloor = getRoomNodeFromSelectFloor;\nfunction getFloorSelectedBimObj() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const aggregateSelection = (0, utils_1.getViewer)().getAggregateSelection();\n        const { model, dbid } = get1stDbidFromAggre(aggregateSelection);\n        if (!model && !dbid)\n            return;\n        const bimFileId = getBimFileIdByModelId(model.id);\n        const bimContext = yield (0, utils_1.getBimContextByBimFileId)(bimFileId);\n        const bimobjs = yield bimContext.getChildren(Constant_1.GEO_EQUIPMENT_RELATION);\n        for (const bimObj of bimobjs) {\n            if (bimObj.info.dbid.get() === dbid)\n                return bimObj;\n        }\n    });\n}\nfunction get1stDbidFromAggre(aggregateSelection) {\n    for (const { model, selection } of aggregateSelection) {\n        return { model, dbid: selection[0] };\n    }\n}\nfunction getBimFileIdByModelId(modelId) {\n    const mappingBimFileIdModelId = window.spinal.BimObjectService.mappingBimFileIdModelId;\n    for (const bimFileId in mappingBimFileIdModelId) {\n        if (Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)) {\n            const obj = mappingBimFileIdModelId[bimFileId];\n            if (obj.modelId === modelId) {\n                for (const { model } of obj.modelScene) {\n                    if (model.id === modelId)\n                        return bimFileId;\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=getRoomNameFromSelectFloor.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport type { Model, Val } from 'spinal-core-connectorjs_type';\nimport type { IAuAggregateSelectItem } from '../../interfaces/IAuAggregateSelectItem';\nimport { getBimContextByBimFileId, getViewer } from '../../utils';\nimport {\n  GEO_EQUIPMENT_RELATION,\n  GEO_REFERENCE_ROOM_RELATION,\n} from '../../../Constant';\n\nexport async function getRoomNodeFromSelectFloor() {\n  const bimObj = await getFloorSelectedBimObj();\n  if (bimObj) {\n    const parents = await bimObj.getParents(GEO_REFERENCE_ROOM_RELATION);\n    return parents[0];\n  }\n}\nasync function getFloorSelectedBimObj() {\n  const aggregateSelection: IAuAggregateSelectItem[] =\n    getViewer().getAggregateSelection();\n  const { model, dbid } = get1stDbidFromAggre(aggregateSelection);\n  if (!model && !dbid) return;\n  const bimFileId = getBimFileIdByModelId(model.id);\n  const bimContext = await getBimContextByBimFileId(bimFileId);\n  const bimobjs = await bimContext.getChildren(GEO_EQUIPMENT_RELATION);\n  for (const bimObj of bimobjs) {\n    if (bimObj.info.dbid.get() === dbid) return bimObj;\n  }\n}\n\nfunction get1stDbidFromAggre(aggregateSelection: IAuAggregateSelectItem[]) {\n  for (const { model, selection } of aggregateSelection) {\n    return { model, dbid: selection[0] };\n  }\n}\n\nfunction getBimFileIdByModelId(modelId: number): string {\n  const mappingBimFileIdModelId: Record<\n    string,\n    {\n      modelId: number;\n      modelScene: { model: Autodesk.Viewing.Model; scene: Model }[];\n      version: Val;\n    }\n  > = window.spinal.BimObjectService.mappingBimFileIdModelId;\n  for (const bimFileId in mappingBimFileIdModelId) {\n    if (\n      Object.prototype.hasOwnProperty.call(mappingBimFileIdModelId, bimFileId)\n    ) {\n      const obj = mappingBimFileIdModelId[bimFileId];\n      if (obj.modelId === modelId) {\n        for (const { model } of obj.modelScene) {\n          if (model.id === modelId) return bimFileId;\n        }\n      }\n    }\n  }\n}\n"],"names":[],"version":3,"file":"spinal-env-viewer-service.a941ec86.js.map"}