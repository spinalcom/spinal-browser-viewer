{"mappingssources":["node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/dialogs/createContext.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/components/controlPoints.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/dialogs/createControlPoint.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/components/config-components/numberConfig.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/components/config-components/booleanConfig.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/components/config-components/enumConfig.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/dialogs/configuration.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/components/linkTogroupTemplate.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/dialogs/linkControlPointDialog.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/dialogs/selectGeoType.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/panels/controlPointEdit.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/panels/unLinkControlPointPanel.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/components/heatmap.vue","node_modules/spinal-env-viewer-plugin-control-endpoint/src/vue/legends/heatmap-container.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"_dialogTitle\">Create Control Point Context\n    </md-dialog-title>\n\n    <md-dialog-content>\n      <md-field>\n        <label>Context name</label>\n        <md-input v-model=\"name\"></md-input>\n      </md-field>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Cancel</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"disabled()\">OK</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\n\nexport default {\n  name: \"createControlEndpointContextDialog\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      name: \"\",\n      showDialog: true,\n      callback: undefined,\n    };\n  },\n  mounted() {},\n  methods: {\n    opened(option) {\n      if (option.callback) {\n        this.callback = option.callback;\n      }\n    },\n    async removed(option) {\n      if (option) {\n        spinalControlPointService.createContext(this.name.trim()).then((el) => {\n          if (this.callback && typeof this.callback === \"function\") {\n            this.callback(el.get());\n          }\n        });\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n    disabled() {\n      return !(this.name && this.name.trim().length > 0);\n    },\n  },\n};\n</script>\n\n<style scoped>\n._dialogTitle {\n  text-align: center;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<div class=\"control-point-table\">\n\t\t<!-- <div class=\"table\"> -->\n\t\t<md-table class=\"table\" v-model=\"searched\">\n\t\t\t<md-table-empty-state\n\t\t\t\tmd-label=\"No control point found\"\n\t\t\t\t:md-description=\"`No control point found.`\"\n\t\t\t>\n\t\t\t</md-table-empty-state>\n\n\t\t\t<md-table-row\n\t\t\t\tv-if=\"!editMode\"\n\t\t\t\tslot=\"md-table-row\"\n\t\t\t\tslot-scope=\"{ item }\"\n\t\t\t>\n\t\t\t\t<md-table-cell md-label=\"Name\">\n\t\t\t\t\t{{ item.name }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell md-label=\"Alias\">\n\t\t\t\t\t{{ item.alias }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell md-label=\"DataType\">\n\t\t\t\t\t{{ controlPointDataType[item.dataType] }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell md-label=\"Endpoint Type\">\n\t\t\t\t\t{{ item.type }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<!-- <md-table-cell md-label=\"Endpoint Icon\">\n          <md-icon :title=\"item.icon\">{{item.icon}}</md-icon>\n        </md-table-cell> -->\n\n\t\t\t\t<md-table-cell md-label=\"Unit\">\n\t\t\t\t\t{{ item.unit || \"-\" }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell md-label=\"Command\">\n\t\t\t\t\t{{ boolValues[item.command] || \"No\" }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell md-label=\"Save TimeSeries\">\n\t\t\t\t\t{{ boolValues[item.saveTimeSeries] || \"No\" }}\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<!-- <md-table-cell>\n          <md-button class=\"md-icon-button md-primary\"\n                     @click=\"configureColor(item)\">\n            <md-icon>settings</md-icon>\n          </md-button>\n        </md-table-cell>\n\n        <md-table-cell v-if=\"editMode\">\n          <md-button class=\"md-icon-button md-accent\">\n            <md-icon>delete</md-icon>\n          </md-button>\n        </md-table-cell> -->\n\t\t\t</md-table-row>\n\n\t\t\t<!--\n      //////////////////////////////////// \n      //  Edit Mode \n      //////////////////////////////////// \n      -->\n\n\t\t\t<md-table-row v-else slot=\"md-table-row\" slot-scope=\"{ item }\">\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"Name\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label>Name</label>\n\t\t\t\t\t\t<md-input v-model=\"item.name\"></md-input>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"Alias\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label>Alias</label>\n\t\t\t\t\t\t<md-input v-model=\"item.alias\"></md-input>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"DataType\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label for=\"command\">dataType</label>\n\t\t\t\t\t\t<md-select\n\t\t\t\t\t\t\tv-model=\"item.dataType\"\n\t\t\t\t\t\t\tname=\"dataType\"\n\t\t\t\t\t\t\tid=\"dataType\"\n\t\t\t\t\t\t\t@md-selected=\"selectDataType(item)\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<md-option\n\t\t\t\t\t\t\t\tv-for=\"(type, index) in Object.keys(\n\t\t\t\t\t\t\t\t\tcontrolPointDataType\n\t\t\t\t\t\t\t\t)\"\n\t\t\t\t\t\t\t\t:value=\"type\"\n\t\t\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{ controlPointDataType[type] }}\n\t\t\t\t\t\t\t</md-option>\n\t\t\t\t\t\t</md-select>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"Endpoint Type\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label for=\"command\">type</label>\n\t\t\t\t\t\t<md-select v-model=\"item.type\" name=\"type\" id=\"type\">\n\t\t\t\t\t\t\t<md-option\n\t\t\t\t\t\t\t\tv-for=\"(type, index) in Object.keys(endpointTypes)\"\n\t\t\t\t\t\t\t\t:value=\"type\"\n\t\t\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{ endpointTypes[type] }}\n\t\t\t\t\t\t\t</md-option>\n\t\t\t\t\t\t</md-select>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"Unit\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label>Unit</label>\n\t\t\t\t\t\t<md-input v-model=\"item.unit\"></md-input>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"Command\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label for=\"command\">Command</label>\n\t\t\t\t\t\t<md-select v-model=\"item.command\" name=\"command\" id=\"command\">\n\t\t\t\t\t\t\t<md-option :value=\"1\">Yes</md-option>\n\t\t\t\t\t\t\t<md-option :value=\"0\">No</md-option>\n\t\t\t\t\t\t</md-select>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\" md-label=\"Save TimeSeries\">\n\t\t\t\t\t<md-field md-inline>\n\t\t\t\t\t\t<label for=\"saveTimeSeries\">TimeSeries</label>\n\t\t\t\t\t\t<md-select\n\t\t\t\t\t\t\tv-model=\"item.saveTimeSeries\"\n\t\t\t\t\t\t\tname=\"saveTimeSeries\"\n\t\t\t\t\t\t\tid=\"saveTimeSeries\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<md-option :value=\"1\">Yes</md-option>\n\t\t\t\t\t\t\t<md-option :value=\"0\">No</md-option>\n\t\t\t\t\t\t</md-select>\n\t\t\t\t\t</md-field>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\">\n\t\t\t\t\t<md-button\n\t\t\t\t\t\tclass=\"md-icon-button md-primary\"\n\t\t\t\t\t\t:disabled=\"disableConfig(item)\"\n\t\t\t\t\t\t@click=\"configureColor(item)\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<md-icon>settings</md-icon>\n\t\t\t\t\t</md-button>\n\t\t\t\t</md-table-cell>\n\n\t\t\t\t<md-table-cell class=\"tableCell\">\n\t\t\t\t\t<md-button\n\t\t\t\t\t\tclass=\"md-icon-button md-accent\"\n\t\t\t\t\t\t@click=\"removeItem(item.id)\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<md-icon>delete</md-icon>\n\t\t\t\t\t</md-button>\n\t\t\t\t</md-table-cell>\n\t\t\t</md-table-row>\n\t\t</md-table>\n\t\t<!-- </div> -->\n\n\t\t<div class=\"fabs\" v-if=\"editMode\">\n\t\t\t<md-button\n\t\t\t\tclass=\"md-fab md-mini md-primary\"\n\t\t\t\ttitle=\"add controlPoint\"\n\t\t\t\t@click=\"addControlPoint\"\n\t\t\t>\n\t\t\t\t<md-icon>add</md-icon>\n\t\t\t</md-button>\n\n\t\t\t<md-button\n\t\t\t\tclass=\"md-fab md-mini md-accent\"\n\t\t\t\ttitle=\"cancel\"\n\t\t\t\t@click=\"cancel\"\n\t\t\t>\n\t\t\t\t<md-icon>close</md-icon>\n\t\t\t</md-button>\n\n\t\t\t<md-button\n\t\t\t\tclass=\"md-fab md-mini md-primary\"\n\t\t\t\ttitle=\"confirm\"\n\t\t\t\t@click=\"valid\"\n\t\t\t>\n\t\t\t\t<md-icon>check</md-icon>\n\t\t\t</md-button>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport {\n\t\tControlPointObj,\n\t\tControlEndpointDataType,\n\t\tgetConfig,\n\t\tControlEndpointType,\n\t} from \"spinal-env-viewer-plugin-control-endpoint-service\";\n\n\timport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\n\texport default {\n\t\tname: \"controlPointComponent\",\n\t\tprops: {\n\t\t\tdata: {\n\t\t\t\tdefault: [],\n\t\t\t},\n\t\t\teditMode: {\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t},\n\t\tdata() {\n\t\t\tthis.controlPointDataType = ControlEndpointDataType;\n\t\t\tthis.endpointTypes = ControlEndpointType;\n\n\t\t\t// this.endpointDataType = ControlEndpointType;\n\n\t\t\tthis.boolValues = {\n\t\t\t\t1: \"Yes\",\n\t\t\t\t0: \"No\",\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tsearched: [],\n\t\t\t\t// endpointTypes: [],\n\t\t\t};\n\t\t},\n\t\tmounted() {\n\t\t\tthis.searched = JSON.parse(JSON.stringify(this.data));\n\t\t\t// this.endpointTypes = Object.keys(InputDataEndpointType).filter(\n\t\t\t//   (el) => !isNaN(el)\n\t\t\t// );\n\n\t\t\t// this.dataTypesValues = Object.keys(ControlEndpointDataType);\n\t\t},\n\t\tmethods: {\n\t\t\tcreateControlPoint() {\n\t\t\t\tthis.$emit(\"create\");\n\t\t\t},\n\n\t\t\taddControlPoint() {\n\t\t\t\tconst controlPoint = Object.assign({}, ControlPointObj);\n\t\t\t\tcontrolPoint.id = Date.now();\n\n\t\t\t\tthis.searched = [...this.searched, controlPoint];\n\t\t\t},\n\n\t\t\tremoveItem(id) {\n\t\t\t\tthis.searched = this.searched.filter((el) => el.id !== id);\n\t\t\t},\n\n\t\t\tconfigureColor(item) {\n\t\t\t\tspinalPanelManagerService.openPanel(\"configurationDialog\", {\n\t\t\t\t\titem: JSON.parse(JSON.stringify(item)),\n\t\t\t\t\tcallback: (config) => {\n\t\t\t\t\t\titem.config = config;\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tcancel() {\n\t\t\t\tthis.searched = JSON.parse(JSON.stringify(this.data));\n\t\t\t\tthis.$emit(\"cancel\");\n\t\t\t},\n\n\t\t\tvalid() {\n\t\t\t\tconst validItems = this.getValidRow();\n\n\t\t\t\tif (validItems.length === 0) return alert(\"no control point valid\");\n\n\t\t\t\tif (validItems.length === this.searched.length) {\n\t\t\t\t\tthis.$emit(\"confirm\", validItems);\n\t\t\t\t} else if (validItems.length < this.searched.length) {\n\t\t\t\t\tconst diff = this.searched.length - validItems.length;\n\t\t\t\t\tconst valid = window.confirm(\n\t\t\t\t\t\t`${diff} control points is/are not valid and will be deleted, will you continue ?`\n\t\t\t\t\t);\n\n\t\t\t\t\tif (valid) {\n\t\t\t\t\t\tthis.$emit(\"confirm\", validItems);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tselectDataType(item) {\n\t\t\t\tconst config = getConfig(item.dataType);\n\t\t\t\tif (config) {\n\t\t\t\t\titem.config = config;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetValidRow() {\n\t\t\t\treturn this.searched.filter((item) =>\n\t\t\t\t\tthis.controlPointIsValid(item)\n\t\t\t\t);\n\n\t\t\t\t// const filtered = this.searched.filter((item) =>\n\t\t\t\t//   this.controlPointIsValid(item)\n\t\t\t\t// );\n\t\t\t\t// return filtered.map((el) => {\n\t\t\t\t//   if (!isNaN(el.type)) {\n\t\t\t\t//     el.type = InputDataEndpointType[el.type];\n\t\t\t\t//   }\n\t\t\t\t//   return el;\n\t\t\t\t// });\n\t\t\t},\n\n\t\t\tisNotValid() {\n\t\t\t\tconst found = this.searched.find((el) =>\n\t\t\t\t\tthis.controlPointIsValid(el)\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tcontrolPointIsValid(controlPoint) {\n\t\t\t\treturn (\n\t\t\t\t\tcontrolPoint.name.trim().length > 0 &&\n\t\t\t\t\tcontrolPoint.alias.trim().length > 0 &&\n\t\t\t\t\tcontrolPoint.dataType.trim().length\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tdisableConfig(item) {\n\t\t\t\treturn (\n\t\t\t\t\t[\n\t\t\t\t\t\tControlEndpointDataType.Float,\n\t\t\t\t\t\tControlEndpointDataType.Integer,\n\t\t\t\t\t\tControlEndpointDataType.Integer16,\n\t\t\t\t\t\tControlEndpointDataType.Real,\n\t\t\t\t\t\tControlEndpointDataType.Double,\n\t\t\t\t\t\tControlEndpointDataType.Long,\n\t\t\t\t\t\tControlEndpointDataType.Boolean,\n\t\t\t\t\t\tControlEndpointDataType.Enum,\n\t\t\t\t\t].indexOf(item.dataType) === -1\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\twatch: {\n\t\t\tdata() {\n\t\t\t\tthis.searched = JSON.parse(JSON.stringify(this.data));\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.control-point-table {\n\t\twidth: 100%;\n\t\theight: calc(100% - 10px);\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.control-point-table .fabs {\n\t\twidth: 100%;\n\t\theight: 50px;\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\n\t\t/* bottom: 5px;\n   right: 5px; */\n\t\t/* position: absolute; */\n\t\t/* background-color: red; */\n\t}\n\n\t.control-point-table .table {\n\t\t/* width: 100%; */\n\t\theight: calc(100% - 50px);\n\t\toverflow: hidden;\n\t}\n</style>\n\n<style>\n\t.control-point-table .table .md-content.md-table.md-theme-default {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: hidden;\n\t}\n\n\t.control-point-table\n\t\t.table\n\t\t.md-content.md-table-content.md-scrollbar.md-theme-default {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: auto;\n\t}\n\n\t.control-point-table .table .tableCell .md-field {\n\t\tmin-height: unset;\n\t}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-dialog\n\t\tclass=\"_controlPointdialog\"\n\t\t:md-active.sync=\"showDialog\"\n\t\t@md-closed=\"closeDialog(false)\"\n\t>\n\t\t<md-dialog-title class=\"_dialogTitle\"\n\t\t\t>Create Control Point</md-dialog-title\n\t\t>\n\n\t\t<md-dialog-content class=\"controlPointDialogContent\">\n\t\t\t<!-- <md-button class=\"md-fab md-mini md-primary md-fab-bottom-right\"\n                 @click=\"addControlPoint\">\n        <md-icon>add</md-icon>\n      </md-button> -->\n\n\t\t\t<md-field class=\"nameInput\">\n\t\t\t\t<label>Control point name</label>\n\t\t\t\t<md-input v-model=\"name\"></md-input>\n\t\t\t</md-field>\n\n\t\t\t<div class=\"table-container\">\n\t\t\t\t<control-point-component\n\t\t\t\t\tclass=\"table-component-content\"\n\t\t\t\t\t:data=\"endpoints\"\n\t\t\t\t\t:editMode=\"true\"\n\t\t\t\t\t@cancel=\"closeDialog(false)\"\n\t\t\t\t\t@confirm=\"createData\"\n\t\t\t\t>\n\t\t\t\t</control-point-component>\n\t\t\t</div>\n\t\t</md-dialog-content>\n\n\t\t<!-- <md-dialog-actions>\n         <md-button\n            class=\"md-accent\"\n            @click=\"closeDialog(false)\"\n         >Cancel</md-button>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(true)\"\n            :disabled=\"disabled()\"\n         >Save</md-button>\n      </md-dialog-actions> -->\n\t</md-dialog>\n</template>\n\n<script>\n\timport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\n\timport ControlPointComponent from \"../components/controlPoints.vue\";\n\n\texport default {\n\t\tname: \"createControlPoint\",\n\t\tprops: [\"onFinised\"],\n\t\tcomponents: {\n\t\t\t\"control-point-component\": ControlPointComponent,\n\t\t},\n\t\tdata() {\n\t\t\tthis.contextId = \"\";\n\t\t\tthis.groupId = \"\";\n\n\t\t\treturn {\n\t\t\t\tname: \"\",\n\t\t\t\tendpoints: [],\n\t\t\t\tshowDialog: true,\n\t\t\t};\n\t\t},\n\t\tmounted() {},\n\t\tmethods: {\n\t\t\topened(option) {\n\t\t\t\tthis.contextId = option.context.id;\n\t\t\t\tthis.groupId = option.selectedNode.id;\n\t\t\t},\n\n\t\t\tasync removed(option) {\n\t\t\t\tif (option.confirm) {\n\t\t\t\t\tspinalControlPointService.createControlPointProfil(\n\t\t\t\t\t\tthis.contextId,\n\t\t\t\t\t\tthis.groupId,\n\t\t\t\t\t\t{ name: this.name, endpoints: option.data }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.showDialog = false;\n\t\t\t},\n\n\t\t\tcloseDialog(closeResult) {\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised({ confirm: closeResult });\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdisabled() {\n\t\t\t\treturn !(\n\t\t\t\t\tthis.name &&\n\t\t\t\t\tthis.name.trim().length > 0 &&\n\t\t\t\t\tthis.endpoints.length > 0\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tcreateData(data) {\n\t\t\t\tif (this.name.trim().length === 0) return alert(\"name is required\");\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised({ confirm: true, data });\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t._controlPointdialog {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t._controlPointdialog ._dialogTitle {\n\t\ttext-align: center;\n\t}\n\n\t._controlPointdialog .controlPointDialogContent {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t._controlPointdialog .controlPointDialogContent .nameInput {\n\t\twidth: 100%;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\t/* height: 60px; */\n\t}\n\n\t._controlPointdialog .controlPointDialogContent .table-container {\n\t\twidth: 100%;\n\t\theight: calc(100% - 60px);\n\t}\n\n\t._controlPointdialog\n\t\t.controlPointDialogContent\n\t\t.table-container\n\t\t.table-component-content {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n\n<style>\n\t._controlPointdialog .md-dialog-container {\n\t\tmax-width: 100%;\n\t\tmax-height: 100%;\n\t}\n\n\t._controlPointdialog .controlPointDialogContent .md-field {\n\t\tmargin: unset;\n\t}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"config_container\">\n    <div class=\"values md-layout md-gutter\">\n      <div class=\"md-layout-item md-size-33\">\n        <span class=\"md-caption\">Min</span>\n        <md-field md-inline>\n          <md-input type=\"number\"\n                    @change=\"calculateAverage\"\n                    v-model=\"config.min.value\"></md-input>\n        </md-field>\n        <span class=\"md-caption\">Color</span>\n        <div class=\"colorContainer\">\n          <div class=\"current-color\"\n               :style=\"'background-color: ' + config.min.color\"\n               @click=\"togglePicker('min')\"></div>\n          <chrome-picker class=\"colorSelect\"\n                         v-model=\"config.min.color\"\n                         v-if=\"display.min\"\n                         @input=\"updateMinColor\" />\n        </div>\n      </div>\n\n      <div class=\"md-layout-item md-size-33\">\n        <span class=\"md-caption\">Average</span>\n        <md-field md-inline>\n          <md-input type=\"number\"\n                    disabled\n                    v-model=\"config.average.value\"></md-input>\n        </md-field>\n        <span class=\"md-caption\">Color</span>\n        <div class=\"colorContainer\">\n          <div class=\"current-color\"\n               :style=\"'background-color: ' + config.average.color\"\n               @click=\"togglePicker('average')\"></div>\n          <chrome-picker class=\"colorSelect\"\n                         v-model=\"config.average.color\"\n                         v-if=\"display.average\"\n                         @input=\"updateAverageColor\" />\n        </div>\n      </div>\n\n      <div class=\"md-layout-item md-size-33\">\n        <span class=\"md-caption\">Max</span>\n        <md-field md-inline>\n          <md-input type=\"number\"\n                    @change=\"calculateAverage\"\n                    v-model=\"config.max.value\"></md-input>\n        </md-field>\n        <span class=\"md-caption\">Color</span>\n        <div class=\"colorContainer\">\n          <div class=\"current-color\"\n               :style=\"'background-color: ' + config.max.color\"\n               @click=\"togglePicker('max')\"></div>\n          <chrome-picker class=\"colorSelect\"\n                         v-model=\"config.max.color\"\n                         v-if=\"display.max\"\n                         @input=\"updateMaxColor\" />\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"colorGradient\">\n      <div v-for=\"(g,index) in gradient\"\n           :key=\"index\"\n           v-tooltip=\"getColorValue(index)\"\n           :style=\"'background-color: #' + g.toHex()\">\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Chrome } from \"vue-color\";\nimport { color } from \"../../../utilities/color\";\n\nexport default {\n  name: \"NumberConfigTemplate\",\n  components: { \"chrome-picker\": Chrome },\n  props: {\n    config: {},\n  },\n  data() {\n    return {\n      display: {\n        min: false,\n        average: false,\n        max: false,\n      },\n      gradient: [],\n    };\n  },\n  mounted() {\n    this.gradient = color.getGradientColor(\n      this.config.min,\n      this.config.average,\n      this.config.max\n    );\n  },\n  methods: {\n    updateMinColor(val) {\n      this.config.min.color = val.hex;\n      this.gradient = color.getGradientColor(\n        this.config.min,\n        this.config.average,\n        this.config.max\n      );\n    },\n    updateMaxColor(val) {\n      this.config.max.color = val.hex;\n      this.gradient = color.getGradientColor(\n        this.config.min,\n        this.config.average,\n        this.config.max\n      );\n    },\n    updateAverageColor(val) {\n      this.config.average.color = val.hex;\n      this.gradient = color.getGradientColor(\n        this.config.min,\n        this.config.average,\n        this.config.max\n      );\n    },\n    calculateAverage() {\n      let max = parseInt(this.config.max.value);\n      let min = parseInt(this.config.min.value);\n      //   if (!isNaN(max) && !isNaN(min) && this.average)\n      this.config.average.value = (max + min) / 2;\n    },\n\n    togglePicker(val) {\n      this.display[val] = !this.display[val];\n    },\n\n    getColorValue(index) {\n      let max = parseInt(this.config.max.value);\n      let min = parseInt(this.config.min.value);\n\n      if (!isNaN(max) && !isNaN(min)) {\n        let begin = ((max - min) * index) / 10;\n        let end = ((max - min) * (index + 1)) / 10;\n        return `${begin + min} - ${end + min}`;\n      }\n\n      return \"-\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.config_container {\n  width: 90%;\n  height: 100%;\n  margin: auto;\n}\n\n.config_container .values {\n  height: 60%;\n}\n\n.config_container .colorSelect {\n  width: 100%;\n}\n\n.config_container .colorContainer {\n  width: 100%;\n  height: 30px;\n}\n\n.config_container .colorContainer .current-color {\n  width: 100%;\n  height: 80%;\n}\n\n.config_container .colorContainer .current-color:hover {\n  cursor: pointer;\n}\n\n.config_container .colorGradient {\n  width: 100%;\n  height: 20px;\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  margin-top: 100px;\n}\n\n.config_container .colorGradient div {\n  flex-grow: 1;\n  position: relative;\n  text-align: center;\n  color: black;\n}\n\n.config_container .colorGradient div:hover {\n  cursor: pointer;\n}\n\n.colorGradient div:after {\n  content: attr(title);\n  position: absolute;\n  bottom: -15px;\n  font-family: monospace;\n  font-size: 12px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"config_container\">\n    <div class=\"values md-layout md-gutter\">\n      <div class=\"md-layout-item md-size-50\">\n        <span class=\"md-caption\">False</span>\n        <div class=\"colorContainer\">\n          <div class=\"current-color\"\n               :style=\"'background-color: ' + config.min.color\"\n               @click=\"togglePicker('min')\"></div>\n          <chrome-picker class=\"colorSelect\"\n                         v-model=\"config.min.color\"\n                         v-if=\"display.min\"\n                         @input=\"updateMinColor\" />\n        </div>\n      </div>\n\n      <div class=\"md-layout-item md-size-50\">\n        <span class=\"md-caption\">True</span>\n        <div class=\"colorContainer\">\n          <div class=\"current-color\"\n               :style=\"'background-color: ' + config.max.color\"\n               @click=\"togglePicker('max')\"></div>\n          <chrome-picker class=\"colorSelect\"\n                         v-model=\"config.max.color\"\n                         v-if=\"display.max\"\n                         @input=\"updateMaxColor\" />\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"colorGradient\">\n      <div v-for=\"(g,index) in gradient\"\n           :key=\"index\"\n           v-tooltip=\"getColorValue(index)\"\n           :style=\"'background-color: #' + g.toHex()\">\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Chrome } from \"vue-color\";\nimport { color } from \"../../../utilities/color\";\n\nexport default {\n  name: \"NumberConfigTemplate\",\n  components: { \"chrome-picker\": Chrome },\n  props: {\n    config: {},\n  },\n  data() {\n    return {\n      display: {\n        min: false,\n        average: false,\n        max: false,\n      },\n      gradient: [],\n    };\n  },\n  mounted() {\n    this.gradient = color.getGradientColor(\n      this.config.min,\n      this.config.average,\n      this.config.max\n    );\n  },\n  methods: {\n    updateMinColor(val) {\n      this.config.min.color = val.hex;\n      this.gradient = color.getGradientColor(\n        this.config.min,\n        this.config.average,\n        this.config.max\n      );\n    },\n    updateMaxColor(val) {\n      this.config.max.color = val.hex;\n      this.gradient = color.getGradientColor(\n        this.config.min,\n        this.config.average,\n        this.config.max\n      );\n    },\n    updateAverageColor(val) {\n      this.config.average.color = val.hex;\n      this.gradient = color.getGradientColor(\n        this.config.min,\n        this.config.average,\n        this.config.max\n      );\n    },\n    calculateAverage() {\n      let max = parseInt(this.config.max.value);\n      let min = parseInt(this.config.min.value);\n      //   if (!isNaN(max) && !isNaN(min) && this.average)\n      this.config.average.value = (max + min) / 2;\n    },\n\n    togglePicker(val) {\n      this.display[val] = !this.display[val];\n    },\n\n    getColorValue(index) {\n      let max = parseInt(this.config.max.value);\n      let min = parseInt(this.config.min.value);\n\n      if (!isNaN(max) && !isNaN(min)) {\n        let begin = ((max - min) * index) / 10;\n        let end = ((max - min) * (index + 1)) / 10;\n        return `${begin + min} - ${end + min}`;\n      }\n\n      return \"-\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.config_container {\n  width: 90%;\n  height: 100%;\n  margin: auto;\n}\n\n.config_container .values {\n  height: 60%;\n}\n\n.config_container {\n  width: 90%;\n  height: 100%;\n  margin: auto;\n}\n\n.config_container .values {\n  height: 60%;\n}\n\n.config_container .colorSelect {\n  width: 100%;\n}\n\n.config_container .colorContainer {\n  width: 100%;\n  height: 30px;\n}\n\n.config_container .colorContainer .current-color {\n  width: 100%;\n  height: 80%;\n}\n\n.config_container .colorContainer .current-color:hover {\n  cursor: pointer;\n}\n\n.config_container .colorGradient {\n  width: 100%;\n  height: 20px;\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  margin-top: 100px;\n}\n\n.config_container .colorGradient div {\n  flex-grow: 1;\n  position: relative;\n  text-align: center;\n  color: black;\n}\n\n.config_container .colorGradient div:hover {\n  cursor: pointer;\n}\n\n.colorGradient div:after {\n  content: attr(title);\n  position: absolute;\n  bottom: -15px;\n  font-family: monospace;\n  font-size: 12px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"config_container\">\n\n    <md-content class=\"colors md-scrollbar\">\n      <div class=\"md-layout md-gutter item\"\n           v-for=\"item in enumeration\"\n           :key=\"item.id\">\n        <div class=\"md-layout-item md-size-45\">\n          <md-field md-inline>\n            <md-input v-model=\"item.name\"\n                      placeholder=\"name\"></md-input>\n          </md-field>\n        </div>\n\n        <div class=\"md-layout-item md-size-45\">\n          <!-- <span class=\"md-caption\">Color</span> -->\n          <div class=\"colorContainer\">\n            <div class=\"current-color\"\n                 :style=\"'background-color: ' + item.color\"\n                 @click=\"togglePicker(item.id)\"></div>\n            <chrome-picker v-if=\"display[item.id]\"\n                           class=\"colorSelect\"\n                           v-model=\"item.color\"\n                           @input=\"(val) => updateColor(item,val)\" />\n          </div>\n        </div>\n      </div>\n    </md-content>\n\n    <md-button class=\"md-fab md-mini md-primary md-fab-bottom-right\"\n               @click=\"addColor\">\n      <md-icon>add</md-icon>\n    </md-button>\n  </div>\n</template>\n\n<script>\nimport { Chrome } from \"vue-color\";\n\nexport default {\n  name: \"enumConfigTemplate\",\n  components: { \"chrome-picker\": Chrome },\n  props: {\n    config: {},\n  },\n  data() {\n    return {\n      enumeration: [],\n      display: {},\n    };\n  },\n  mounted() {\n    this.enumeration = JSON.parse(JSON.stringify(this.config.enumeration));\n  },\n  methods: {\n    updateColor(item, val) {\n      item.color = val.hex;\n    },\n    addColor() {\n      this.enumeration = [\n        ...this.enumeration,\n        { name: \"\", color: \"#000000\", id: Date.now() },\n      ];\n    },\n    togglePicker(val) {\n      this.display = Object.assign({}, this.display, {\n        [val]: !this.display[val],\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.config_container {\n  width: 90%;\n  height: 100%;\n  margin: auto;\n}\n\n.config_container .colors {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.config_container .colors .item {\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.config_container .colorContainer {\n  width: 100%;\n  height: 30px;\n}\n\n.config_container .colorSelect {\n  width: 100%;\n}\n\n.config_container .colorContainer .current-color {\n  width: 100%;\n  height: 80%;\n}\n\n.config_container .colorContainer .current-color:hover {\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"config_dialog_content\">\n    <md-dialog-title class=\"_dialogTitle\">Configuration</md-dialog-title>\n\n    <md-dialog-content>\n\n      <number-config-template v-if=\"isNumberConfig()\"\n                              :config=\"config\"\n                              @valid=\"confirmConfig\"></number-config-template>\n\n      <boolean-config-template v-else-if=\"isBoolConfig()\"\n                               :config=\"config\"\n                               @valid=\"confirmConfig\"></boolean-config-template>\n\n      <enum-config-template v-else-if=\"isEnumConfig()\"\n                            :config=\"config\"\n                            ref=\"enum-config\"></enum-config-template>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Cancel</md-button>\n      <md-button class=\"md-primary\"\n                 :disabled=\"disableOkBtn()\"\n                 @click=\"closeDialog(true)\">OK</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport NumberConfigTemplate from \"../components/config-components/numberConfig.vue\";\nimport BooleanConfigTemplate from \"../components/config-components/booleanConfig.vue\";\nimport EnumConfigTemplate from \"../components/config-components/enumConfig.vue\";\n\nimport { ControlEndpointDataType } from \"spinal-env-viewer-plugin-control-endpoint-service\";\n\nexport default {\n  name: \"configurationDialog\",\n  components: {\n    \"number-config-template\": NumberConfigTemplate,\n    \"boolean-config-template\": BooleanConfigTemplate,\n    \"enum-config-template\": EnumConfigTemplate,\n  },\n  props: [\"onFinised\"],\n  data() {\n    return {\n      config: {},\n      item: {},\n      showDialog: true,\n      callback: undefined,\n    };\n  },\n  mounted() {},\n  methods: {\n    opened(option) {\n      this.item = option.item;\n      this.config = JSON.parse(JSON.stringify(this.item.config));\n\n      if (option.callback) {\n        this.callback = option.callback;\n      }\n    },\n\n    async removed(option) {\n      if (option.confirm && typeof this.callback === \"function\") {\n        if (this.isEnumConfig()) {\n          this.config.enumeration = this.getConfigEnum();\n        }\n        this.callback(JSON.parse(JSON.stringify(this.config)));\n      }\n\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ confirm: closeResult });\n      }\n    },\n\n    isNumberConfig() {\n      return (\n        [\n          ControlEndpointDataType.Float,\n          ControlEndpointDataType.Integer,\n          ControlEndpointDataType.Integer16,\n          ControlEndpointDataType.Real,\n          ControlEndpointDataType.Double,\n          ControlEndpointDataType.Long,\n        ].indexOf(this.item.dataType) !== -1\n      );\n    },\n\n    isBoolConfig() {\n      return this.item.dataType === ControlEndpointDataType.Boolean;\n    },\n\n    isEnumConfig() {\n      return this.item.dataType === ControlEndpointDataType.Enum;\n    },\n\n    confirmConfig(config) {\n      this.config = Object.assign(config);\n    },\n\n    numberConfigIsValid(config) {\n      return (\n        (\"\" + config.min.value).trim().length > 0 &&\n        (\"\" + config.min.color).trim().length > 0 &&\n        (\"\" + config.average.value).trim().length > 0 &&\n        (\"\" + config.average.color).trim().length > 0 &&\n        (\"\" + config.max.value).trim().length > 0 &&\n        (\"\" + config.max.color).trim().length > 0\n      );\n    },\n\n    booleanConfigIsValid(config) {\n      return (\n        (\"\" + config.min.value).trim().length > 0 &&\n        (\"\" + config.min.color).trim().length > 0 &&\n        (\"\" + config.max.value).trim().length > 0 &&\n        (\"\" + config.max.color).trim().length > 0\n      );\n    },\n\n    enumConfigIsValid(config) {\n      const found = config.find(\n        (el) => el.name.trim().length === 0 || el.color.trim().length === 0\n      );\n\n      return typeof found === \"undefined\";\n    },\n\n    disableOkBtn() {\n      if (this.isNumberConfig()) {\n        return !this.numberConfigIsValid(this.config);\n      } else if (this.isBoolConfig()) {\n        return !this.booleanConfigIsValid(this.config);\n      } else if (this.isEnumConfig()) {\n        return !this.enumConfigIsValid(this.config.enumeration);\n      }\n    },\n\n    getConfigEnum() {\n      const enumRef = this.$refs[\"enum-config\"];\n      if (enumRef) {\n        return enumRef.enumeration.filter(\n          (el) => el.name.trim().length > 0 && el.color.trim().length > 0\n        );\n        // return JSON.parse(JSON.stringify(enumRef.enumeration));\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.config_dialog_content {\n  width: 50%;\n  height: 60%;\n}\n\n.config_dialog_content ._dialogTitle {\n  text-align: center;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"subContent\">\n      <div class=\"title\">\n         <div>{{title}}</div>\n         <!-- <div class=\"md-layout-item md-size-10 mdIcon\">\n        <md-button class=\"md-icon-button\"\n                   @click=\"createEvent\"\n                   :disabled=\"disableBtn\">\n          <md-icon>control_point</md-icon>\n        </md-button>\n      </div> -->\n      </div>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n\n.subContent .title {\n   width: 100%;\n   height: 10%;\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n\n.subContent .container {\n   width: 100%;\n   height: 90%;\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-dialog\n\t\tclass=\"mdDialogContainer\"\n\t\t:md-active.sync=\"showDialog\"\n\t\t@md-closed=\"closeDialog(false)\"\n\t>\n\t\t<md-dialog-title class=\"dialogTitle\">\n\t\t\tSelect Controlpoint\n\t\t</md-dialog-title>\n\t\t<md-dialog-content>\n\t\t\t<div class=\"content\" v-if=\"state === STATES.normal\">\n\t\t\t\t<div class=\"section\">\n\t\t\t\t\t<link-template\n\t\t\t\t\t\t:title=\"'Contexts'\"\n\t\t\t\t\t\t:data=\"data\"\n\t\t\t\t\t\t:itemSelected=\"contextSelected\"\n\t\t\t\t\t\t@create=\"createContext\"\n\t\t\t\t\t\t@select=\"selectContext\"\n\t\t\t\t\t\t:disableBtn=\"false\"\n\t\t\t\t\t></link-template>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"section\">\n\t\t\t\t\t<link-template\n\t\t\t\t\t\t:title=\"'Categories'\"\n\t\t\t\t\t\t:data=\"categories\"\n\t\t\t\t\t\t:itemSelected=\"categorySelected\"\n\t\t\t\t\t\t@create=\"createCategory\"\n\t\t\t\t\t\t@select=\"selectCategory\"\n\t\t\t\t\t\t:disableBtn=\"!contextSelected\"\n\t\t\t\t\t></link-template>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"section\">\n\t\t\t\t\t<link-template\n\t\t\t\t\t\t:title=\"'Groups'\"\n\t\t\t\t\t\t:data=\"groups\"\n\t\t\t\t\t\t:itemSelected=\"groupSelected\"\n\t\t\t\t\t\t@create=\"createGroup\"\n\t\t\t\t\t\t@select=\"selectGroup\"\n\t\t\t\t\t\t:disableBtn=\"!categorySelected\"\n\t\t\t\t\t></link-template>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"section\">\n\t\t\t\t\t<link-template\n\t\t\t\t\t\t:title=\"'Control Points'\"\n\t\t\t\t\t\t:data=\"controlPoints\"\n\t\t\t\t\t\t:itemSelected=\"controlPointSelected\"\n\t\t\t\t\t\t@create=\"createGroup\"\n\t\t\t\t\t\t@select=\"selectControlPoint\"\n\t\t\t\t\t\t:disableBtn=\"!categorySelected\"\n\t\t\t\t\t></link-template>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"states\" v-else>\n\t\t\t\t<md-progress-spinner\n\t\t\t\t\tmd-mode=\"indeterminate\"\n\t\t\t\t\tv-if=\"state === STATES.loading\"\n\t\t\t\t></md-progress-spinner>\n\n\t\t\t\t<md-icon class=\"md-size-5x\" v-else-if=\"state === STATES.error\"\n\t\t\t\t\t>close</md-icon\n\t\t\t\t>\n\t\t\t\t<md-icon class=\"md-size-5x\" v-else-if=\"state === STATES.success\"\n\t\t\t\t\t>check</md-icon\n\t\t\t\t>\n\t\t\t</div>\n\t\t</md-dialog-content>\n\t\t<md-dialog-actions>\n\t\t\t<md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n\t\t\t\t>Close</md-button\n\t\t\t>\n\t\t\t<md-button class=\"md-primary\" :disabled=\"disabled\" @click=\"link\"\n\t\t\t\t>Save</md-button\n\t\t\t>\n\t\t</md-dialog-actions>\n\t</md-dialog>\n</template>\n\n<script>\n\timport attributeService from \"spinal-env-viewer-plugin-attribute-manager/src/services/index\";\n\n\timport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\timport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\n\timport LinkToGroupTemplate from \"../components/linkTogroupTemplate.vue\";\n\timport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\n\n\timport EventBus from \"spinal-env-viewer-room-manager/js/event\";\n\n\texport default {\n\t\tname: \"dialogComponent\",\n\t\tcomponents: {\n\t\t\t\"link-template\": LinkToGroupTemplate,\n\t\t},\n\t\tprops: [\"onFinised\"],\n\t\tdata() {\n\t\t\tthis.contextId;\n\t\t\tthis.nodeId;\n\t\t\tthis.STATES = {\n\t\t\t\tnormal: \"normal\",\n\t\t\t\tloading: \"loading\",\n\t\t\t\tsuccess: \"success\",\n\t\t\t\terror: \"error\",\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tshowDialog: true,\n\t\t\t\tdata: [],\n\t\t\t\tgroups: [],\n\t\t\t\tcategories: [],\n\t\t\t\tcontrolPoints: [],\n\t\t\t\tcontextSelected: undefined,\n\t\t\t\tcategorySelected: undefined,\n\t\t\t\tgroupSelected: undefined,\n\t\t\t\tcontrolPointSelected: undefined,\n\t\t\t\titems: [],\n\t\t\t\ttype: undefined,\n\t\t\t\tcallback: undefined,\n\t\t\t\tstate: this.STATES.normal,\n\t\t\t};\n\t\t},\n\n\t\tmounted() {\n\t\t\tEventBus.$on(\"itemCreated\", (id) => {\n\t\t\t\tthis.getAllData();\n\t\t\t});\n\t\t},\n\n\t\tmethods: {\n\t\t\tasync opened({ contextId, nodeId, type, callback }) {\n\t\t\t\t// this.items = option.itemSelected;\n\t\t\t\tthis.contextId = contextId;\n\t\t\t\tthis.nodeId = nodeId;\n\n\t\t\t\tthis.type = type;\n\t\t\t\tthis.callback = callback;\n\t\t\t\tthis.state = this.STATES.loading;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.getAllData();\n\t\t\t\t\tthis.state = this.STATES.normal;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.state = this.STATES.error;\n\t\t\t\t}\n\n\t\t\t\t// console.log(this.data);\n\t\t\t},\n\n\t\t\tasync link() {\n\t\t\t\tthis.state = this.STATES.loading;\n\t\t\t\ttry {\n\t\t\t\t\tawait spinalControlPointService.linkControlPointToGroup(\n\t\t\t\t\t\tthis.nodeId,\n\t\t\t\t\t\tthis.contextSelected,\n\t\t\t\t\t\tthis.controlPointSelected\n\t\t\t\t\t);\n\n\t\t\t\t\tif (typeof this.callback !== \"undefined\") {\n\t\t\t\t\t\tconst context = this.data.find(\n\t\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst category = this.categories.find(\n\t\t\t\t\t\t\t(el) => el.id === this.categorySelected\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst group = this.groups.find(\n\t\t\t\t\t\t\t(el) => el.id === this.groupSelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.callback(context, category, group);\n\t\t\t\t\t}\n\t\t\t\t\tthis.state = this.STATES.success;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.state = this.STATES.error;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync removed(option) {\n\t\t\t\t// if (option) {\n\t\t\t\t// \t// this.items.forEach((el) => {\n\t\t\t\t// \t//   attributeService.linkItem(\n\t\t\t\t// \t//     this.contextSelected,\n\t\t\t\t// \t//     this.groupSelected,\n\t\t\t\t// \t//     el.id\n\t\t\t\t// \t//   );\n\t\t\t\t// \t// });\n\t\t\t\t// }\n\t\t\t\tthis.showDialog = false;\n\t\t\t},\n\n\t\t\tcloseDialog(closeResult) {\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised(closeResult);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAllData() {\n\t\t\t\treturn attributeService\n\t\t\t\t\t.getAllGroupContext(spinalControlPointService.CONTROL_POINT_TYPE)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tthis.data = res;\n\t\t\t\t\t\tthis.updateCategory();\n\t\t\t\t\t\tthis.updateGroups();\n\t\t\t\t\t\tthis.updateControlPoints();\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// getCategories() {\n\t\t\t//   this.categorySelected = undefined;\n\n\t\t\t//   if (this.contextSelected) {\n\t\t\t//     let val = this.data.find(el => el.id === this.contextSelected);\n\t\t\t//     if (val) return val.category;\n\t\t\t//   }\n\t\t\t//   return [];\n\t\t\t// },\n\t\t\tgetGroups() {\n\t\t\t\tthis.groupSelected = undefined;\n\n\t\t\t\tif (this.contextSelected && this.categorySelected) {\n\t\t\t\t\tlet context = this.data.find(\n\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t);\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tlet category = context.category.find(\n\t\t\t\t\t\t\t(el) => el.id == this.categorySelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (category) return category.groups;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t},\n\n\t\t\t// disabled() {\n\t\t\t// \treturn !(\n\t\t\t// \t\tthis.contextSelected &&\n\t\t\t// \t\tthis.categorySelected &&\n\t\t\t// \t\tthis.groupSelected &&\n\t\t\t// \t\tthis.controlPointSelected &&\n\t\t\t// \t\tthis.state === this.STATES.normal\n\t\t\t// \t);\n\t\t\t// },\n\n\t\t\tcreateContext() {\n\t\t\t\tspinalPanelManagerService.openPanel(\"createGroupContextDialog\", {\n\t\t\t\t\ttitle: \"Create a Grouping Context\",\n\t\t\t\t\ttypePreselected: spinalControlPointService.CONTROL_POINT_TYPE,\n\t\t\t\t\tcallback: (id) => (this.contextSelected = id),\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tcreateCategory() {\n\t\t\t\tspinalPanelManagerService.openPanel(\"createCategoryDialog\", {\n\t\t\t\t\ttitle: \"add Category\",\n\t\t\t\t\tcontextId: this.contextSelected,\n\t\t\t\t\tselectedNode: SpinalGraphService.getInfo(this.contextSelected),\n\t\t\t\t\tcallback: (id) => (this.categorySelected = id),\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tcreateGroup() {\n\t\t\t\tspinalPanelManagerService.openPanel(\"createGroupDialog\", {\n\t\t\t\t\ttitle: \"add Group\",\n\t\t\t\t\tcontextId: this.contextSelected,\n\t\t\t\t\tselectedNode: SpinalGraphService.getInfo(this.categorySelected),\n\t\t\t\t\tcallback: (id) => (this.groupSelected = id),\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t//////////////////////////////////////////////////////////////////\n\t\t\t// Updates\n\t\t\t//////////////////////////////////////////////////////////////////\n\n\t\t\tupdateCategory() {\n\t\t\t\t// this.categorySelected = undefined;\n\t\t\t\tthis.categories = [];\n\t\t\t\tif (this.contextSelected) {\n\t\t\t\t\tlet val = this.data.find((el) => el.id === this.contextSelected);\n\t\t\t\t\tif (val) this.categories = val.category;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tupdateGroups() {\n\t\t\t\t// this.groupSelected = undefined;\n\t\t\t\tthis.groups = [];\n\t\t\t\tif (this.contextSelected && this.categorySelected) {\n\t\t\t\t\tlet context = this.data.find(\n\t\t\t\t\t\t(el) => el.id === this.contextSelected\n\t\t\t\t\t);\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tlet category = context.category.find(\n\t\t\t\t\t\t\t(el) => el.id == this.categorySelected\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (category) this.groups = category.groups;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync updateControlPoints() {\n\t\t\t\tthis.controlPoints = [];\n\t\t\t\tif (\n\t\t\t\t\tthis.contextSelected &&\n\t\t\t\t\tthis.categorySelected &&\n\t\t\t\t\tthis.groupSelected\n\t\t\t\t) {\n\t\t\t\t\tconst res = await spinalControlPointService.getControlPoint(\n\t\t\t\t\t\tthis.groupSelected\n\t\t\t\t\t);\n\t\t\t\t\tthis.controlPoints = res.map((el) => el.get());\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t//////////////////////////////////////////////////////////////////\n\t\t\t// Select\n\t\t\t//////////////////////////////////////////////////////////////////\n\n\t\t\tselectContext(id) {\n\t\t\t\tif (this.contextSelected === id) {\n\t\t\t\t\tthis.contextSelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.contextSelected = id;\n\t\t\t},\n\n\t\t\tselectCategory(id) {\n\t\t\t\tif (this.categorySelected === id) {\n\t\t\t\t\tthis.categorySelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.categorySelected = id;\n\t\t\t},\n\n\t\t\tselectGroup(id) {\n\t\t\t\tif (this.groupSelected === id) {\n\t\t\t\t\tthis.groupSelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.groupSelected = id;\n\t\t\t},\n\n\t\t\tselectControlPoint(id) {\n\t\t\t\tif (this.controlPointSelected === id) {\n\t\t\t\t\tthis.controlPointSelected = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.controlPointSelected = id;\n\t\t\t},\n\t\t},\n\t\tcomputed: {\n\t\t\tdisabled() {\n\t\t\t\treturn !(\n\t\t\t\t\tthis.contextSelected &&\n\t\t\t\t\tthis.categorySelected &&\n\t\t\t\t\tthis.groupSelected &&\n\t\t\t\t\tthis.controlPointSelected &&\n\t\t\t\t\tthis.state === this.STATES.normal\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tsuccess() {\n\t\t\t\treturn this.state === this.STATES.success;\n\t\t\t},\n\t\t\terror() {\n\t\t\t\treturn this.state === this.STATES.error;\n\t\t\t},\n\t\t},\n\t\twatch: {\n\t\t\tcontextSelected() {\n\t\t\t\tthis.categorySelected = undefined;\n\t\t\t\tthis.groupSelected = undefined;\n\n\t\t\t\tthis.updateCategory();\n\t\t\t\tthis.updateGroups();\n\t\t\t\tthis.updateControlPoints();\n\t\t\t},\n\n\t\t\tcategorySelected() {\n\t\t\t\tthis.groupSelected = undefined;\n\n\t\t\t\tthis.updateGroups();\n\t\t\t\tthis.updateControlPoints();\n\t\t\t},\n\n\t\t\tgroupSelected() {\n\t\t\t\tthis.controlPointSelected = undefined;\n\t\t\t\tthis.updateControlPoints();\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.mdDialogContainer {\n\t\twidth: 100%;\n\t\theight: 600px;\n\t}\n\n\t.mdDialogContainer .dialogTitle {\n\t\ttext-align: center;\n\t}\n\n\t.mdDialogContainer .content {\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: stretch;\n\t}\n\n\t.md-dialog-container .states {\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t}\n\n\t.mdDialogContainer .content .section {\n\t\twidth: 24%;\n\t\tborder: 1px solid grey;\n\t\tborder-radius: 4% 4% 0 0;\n\t\tpadding: 15px;\n\t}\n\n\t/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n\t.mdDialogContainer .md-dialog-container {\n\t\tmax-width: 100%;\n\t\tmax-height: 100%;\n\t}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<md-dialog\n\t\tclass=\"mdDialogContainer\"\n\t\t:md-active.sync=\"showDialog\"\n\t\t@md-closed=\"closeDialog(false)\"\n\t>\n\t\t<md-dialog-title class=\"dialogTitle\">\n\t\t\tLink Controlpoint To\n\t\t</md-dialog-title>\n\n\t\t<md-dialog-content class=\"content\">\n\t\t\t<md-field>\n\t\t\t\t<label for=\"type\">Link controlpoint to all</label>\n\t\t\t\t<md-select v-model=\"type\" name=\"type\" id=\"type\">\n\t\t\t\t\t<md-option v-for=\"t in types\" :key=\"t\" :value=\"t\">\n\t\t\t\t\t\t{{ t }}\n\t\t\t\t\t</md-option>\n\t\t\t\t</md-select>\n\t\t\t</md-field>\n\t\t</md-dialog-content>\n\n\t\t<md-dialog-actions>\n\t\t\t<md-button class=\"md-primary\" @click=\"closeDialog(false)\">\n\t\t\t\tCancel\n\t\t\t</md-button>\n\n\t\t\t<md-button\n\t\t\t\tclass=\"md-primary\"\n\t\t\t\t:disabled=\"disabled()\"\n\t\t\t\t@click=\"closeDialog(true)\"\n\t\t\t>\n\t\t\t\tSave\n\t\t\t</md-button>\n\t\t</md-dialog-actions>\n\t</md-dialog>\n</template>\n\n<script>\n\timport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\timport { GEOGRAPHIC_TYPES_ORDER } from \"spinal-env-viewer-context-geographic-service/build/constants\";\n\n\texport default {\n\t\tname: \"dialogComponent\",\n\n\t\tprops: [\"onFinised\"],\n\t\tdata() {\n\t\t\tthis.contextId;\n\t\t\tthis.nodeId;\n\n\t\t\treturn {\n\t\t\t\tshowDialog: true,\n\t\t\t\ttypes: [],\n\t\t\t\ttype: \"\",\n\t\t\t\tcallback: undefined,\n\t\t\t};\n\t\t},\n\n\t\tmounted() {},\n\n\t\tmethods: {\n\t\t\tasync opened({ type, callback }) {\n\t\t\t\t// this.contextId = contextId;\n\n\t\t\t\t// this.nodeId = nodeId;\n\n\t\t\t\tthis.callback = callback;\n\t\t\t\tthis.type = type;\n\t\t\t\tthis.types = this.getTypes(type);\n\t\t\t},\n\n\t\t\tasync removed(option) {\n\t\t\t\tif (option && typeof this.callback !== \"undefined\") {\n\t\t\t\t\tthis.callback(this.type);\n\t\t\t\t}\n\t\t\t\tthis.showDialog = false;\n\t\t\t},\n\n\t\t\tcloseDialog(closeResult) {\n\t\t\t\tif (typeof this.onFinised === \"function\") {\n\t\t\t\t\tthis.onFinised(closeResult);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetTypes(type) {\n\t\t\t\t// const types = [];\n\t\t\t\t// await SpinalGraphService.findInContext(\n\t\t\t\t// \tcontextId,\n\t\t\t\t// \tnodeId,\n\t\t\t\t// \t(node) => {\n\t\t\t\t// \t\tconst type = node.getType.get();\n\t\t\t\t// \t\tif (types.indexOf(type) !== -1) types.push(type);\n\t\t\t\t// \t\treturn true;\n\t\t\t\t// \t}\n\t\t\t\t// );\n\n\t\t\t\t// return types;\n\n\t\t\t\tconst index = GEOGRAPHIC_TYPES_ORDER.indexOf(type);\n\n\t\t\t\tif (index === -1) return GEOGRAPHIC_TYPES_ORDER;\n\n\t\t\t\treturn GEOGRAPHIC_TYPES_ORDER.slice(index);\n\t\t\t},\n\n\t\t\tdisabled() {\n\t\t\t\treturn this.type.length === 0;\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.mdDialogContainer {\n\t\twidth: 300px;\n\t\theight: 250px;\n\t}\n\n\t.mdDialogContainer .dialogTitle {\n\t\ttext-align: center;\n\t}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"control_points_container\">\n    <md-button v-if=\"!editMode\"\n               @click=\"activeEditMode\"\n               class=\"md-fab md-mini md-plain md-primary md-fab-bottom-right\">\n      <md-icon>edit</md-icon>\n    </md-button>\n\n    <control-point-vue :editMode=\"editMode\"\n                       :data=\"data\"\n                       @cancel=\"disabledEditMode\"\n                       @confirm=\"confirm\"></control-point-vue>\n  </div>\n</template>\n\n<script>\nimport ControlPointsVue from \"../components/controlPoints.vue\";\nimport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\nimport { EventBus } from \"../../utilities/event\";\n\nexport default {\n  name: \"editControlPointPanel\",\n  components: {\n    \"control-point-vue\": ControlPointsVue,\n  },\n  data() {\n    this.contextId;\n    this.nodeId;\n    return {\n      editMode: false,\n      data: [],\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.contextId = option.context.id;\n      this.nodeId = option.selectedNode.id;\n      const res = await spinalControlPointService.getControlPointProfil(\n        this.contextId,\n        this.nodeId\n      );\n      this.editMode = false;\n      this.setData(res);\n    },\n\n    closed() {},\n\n    async confirm(validItems) {\n      return spinalControlPointService\n        .editControlPointProfil(this.contextId, this.nodeId, validItems)\n        .then((res) => {\n          this.setData(res);\n          this.disabledEditMode();\n          EventBus.$emit(\"update-controlPoint\", {\n            contextId: this.contextId,\n            controlPointId: this.nodeId,\n            items: res.endpoints.get(),\n          });\n        });\n    },\n\n    cancel() {},\n\n    setData(res) {\n      if (res.endpoints) {\n        this.data = res.endpoints.get();\n      }\n    },\n\n    activeEditMode() {\n      this.editMode = true;\n    },\n\n    disabledEditMode() {\n      this.editMode = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.control_points_container {\n  width: 100%;\n  height: calc(100% - 15px);\n  /* position: relative; */\n  /* background: red; */\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <!-- <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"_dialogTitle\">Unlink Control Point to group\n    </md-dialog-title> -->\n\n  <!-- <md-dialog-content class=\"_unLinkDialogContent\"> -->\n  <div class=\"_unLinkDialogContent\">\n    <div class=\"content\"\n         v-if=\"state === PAGES.loaded\">\n      <div class=\"state\"\n           v-if=\"controlEndpoints.length === 0\">\n        No controlPoints linked\n      </div>\n\n      <md-list class=\"list_content md-scrollbar\"\n               v-else>\n        <md-list-item v-for=\"item in controlEndpoints\"\n                      :key=\"item.id\">\n          <span class=\"md-list-item-text\">{{item.name}}</span>\n\n          <md-button class=\"md-icon-button md-list-action\"\n                     @click=\"unLinkControlPoint(item.id)\">\n            <md-icon class=\"md-accent\">link_off</md-icon>\n          </md-button>\n        </md-list-item>\n      </md-list>\n\n    </div>\n\n    <div class=\"state\"\n         v-else>\n      <md-progress-spinner v-if=\"state === PAGES.loading\"\n                           md-mode=\"indeterminate\"></md-progress-spinner>\n\n      <md-icon class=\"md-size-5x\"\n               v-else>error</md-icon>\n    </div>\n  </div>\n  <!-- </md-dialog-content> -->\n\n  <!-- <md-dialog-actions>\n      <md-button class=\"md-accent\"\n                 @click=\"closeDialog(false)\">close</md-button>\n    </md-dialog-actions> \n  </md-dialog>-->\n</template>\n\n<script>\nimport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\nexport default {\n  name: \"unLinkControlPointPanel\",\n  props: [\"onFinised\"],\n  data() {\n    this.PAGES = {\n      loaded: 0,\n      loading: 1,\n      error: 2,\n    };\n    this.groupId;\n    return {\n      showDialog: true,\n      state: this.PAGES.loading,\n      controlEndpoints: [],\n    };\n  },\n  mounted() {},\n\n  methods: {\n    opened({ id, name }) {\n      this.state = this.PAGES.loading;\n      this.groupId = id;\n\n      this.getControlPointLinked(id)\n        .then((result) => {\n          this.setTitle(name);\n          this.controlEndpoints = result.map((el) => el.get());\n          this.state = this.PAGES.loaded;\n        })\n        .catch((err) => {\n          console.error(err);\n          this.state = this.PAGES.error;\n        });\n    },\n\n    closed() {},\n\n    // closeDialog(closeResult) {\n    //   if (typeof this.onFinised === \"function\") {\n    //     this.onFinised(closeResult);\n    //   }\n    // },\n\n    getControlPointLinked(groupId) {\n      return spinalControlPointService.getElementLinked(groupId);\n    },\n\n    unLinkControlPoint(controlPointId) {\n      this.state = this.PAGES.loading;\n      return spinalControlPointService\n        .unLinkControlPointToGroup(this.groupId, controlPointId)\n        .then(() => {\n          this.controlEndpoints = this.controlEndpoints.filter(\n            (el) => el.id !== controlPointId\n          );\n          this.state = this.PAGES.loaded;\n        });\n    },\n\n    setTitle(title) {\n      spinalPanelManagerService.panels.UnLinkControlpointPanel.panel.setTitle(\n        `Unlink Control Point to group : ${title}`\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n._unLinkDialogContent {\n  width: 100%;\n  height: calc(100% - 30px);\n}\n\n._unLinkDialogContent .content {\n  width: 100%;\n  height: 100%;\n}\n\n._unLinkDialogContent .content .list_content {\n  max-height: calc(100% - 15px);\n  overflow: auto;\n}\n\n._unLinkDialogContent .state {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5em;\n}\n</style>\n\n<style>\n._unLinkDialogContent .md-list-item-content {\n  width: calc(100% - 50px);\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"_legends\">\n    <div class=\"closeBtn\"\n         v-tooltip=\"'close ' + title\"\n         @click=\"closeLegend\">X</div>\n\n    <div class=\"md-subheading legend_title\"\n         v-tooltip=\"title\">{{title}}</div>\n\n    <!--\n    <div class=\"selects md-layout\">\n      <div class=\"md-layout-item md-size-45\">\n        <md-field>\n          <md-select v-model=\"controlPointSelected\"\n                     @md-selected=\"selectControlPoint\"\n                     name=\"controlPoint\"\n                     id=\"controlPoint\"\n                     placeholder=\"Control Points\">\n            <md-option v-for=\"controlPoint in controlPoints\"\n                       :key=\"controlPoint.id\"\n                       :value=\"controlPoint.id\">{{controlPoint.name}}\n            </md-option>\n          </md-select>\n        </md-field>\n      </div>\n\n      <div class=\"md-layout-item md-size-45\">\n        <md-field>\n          <md-select :disabled=\"disabledEndpointsSelected()\"\n                     @md-selected=\"selectEndpointType\"\n                     v-model=\"endpointTypeSelected\"\n                     name=\"endpoint types\"\n                     id=\"endpoint types\"\n                     placeholder=\"Endpoint type\">\n            <md-option v-for=\"profil in endpointProfils\"\n                       :key=\"profil.id\"\n                       :value=\"JSON.stringify(profil)\">{{profil.name}}\n            </md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n    </div>\n\n    -->\n\n    <md-menu class=\"selects\"\n             md-size=\"small\"\n             :mdCloseOnClick=\"true\">\n\n      <md-button class=\"btn-trigger\"\n                 md-menu-trigger>\n\n        <md-icon class=\"menu_icon legendIcon\">\n          menu\n        </md-icon>\n\n        <!-- <md-icon class=\"menu_icon legendIcon\">keyboard_arrow_down</md-icon> -->\n\n      </md-button>\n\n      <md-menu-content>\n        <md-menu-item v-for=\"profil in endpointProfils\"\n                      :key=\"profil.id\"\n                      @click=\"selectEndpointType(profil)\">\n\n          <!-- <md-icon class=\"legendIcon\"\n                   v-if=\"getIcon(heatmap.name.get())\">\n            {{getIcon(heatmap.name.get())}}</md-icon> -->\n\n          <!-- <md-icon v-if=\"!getIcon(heatmap.name.get())\"\n                   :md-src=\"getSvg(heatmap.name.get())\"></md-icon> -->\n          {{profil.title}}\n        </md-menu-item>\n\n      </md-menu-content>\n    </md-menu>\n\n    <div class=\"colors\">\n\n      <div class=\"boxContainer\"\n           v-for=\"(g,index) in this.gradient\"\n           :key=\"index\">\n        <div class=\"boxColor\"\n             :style=\"{'background-color': g.color}\"></div>\n        <div class=\"boxValue\"\n             v-tooltip=\"g.value + ''\">{{g.value}}</div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { color } from \"../../utilities/color\";\nimport utilities from \"../../utilities/utitlities\";\n\nexport default {\n  name: \"heatmap-legend\",\n  props: {\n    controlPoints: {},\n    id: {},\n    // endpoints: {\n    //   default: [],\n    // },\n    // gradient: {\n    //   default: [],\n    // },\n  },\n  mounted() {\n    const info = SpinalGraphService.getInfo(this.id);\n    if (info) this.title = info.name.get();\n\n    this.updateData();\n\n    // if (this.controlPoints && this.controlPoints.length > 0) {\n    //   this.endpointProfils = this.formatProfil(this.controlPoints);\n\n    //   this.selectEndpointType(this.endpointProfils[0]);\n    //   // this.controlPointSelected = this.controlPoints[0].id;\n    //   // this.selectControlPoint(this.controlPointSelected, true);\n    // }\n  },\n\n  data() {\n    this.bindProcessMap = new Map();\n    this.bimObjectsColored = [];\n\n    return {\n      title: \"\",\n      controlPointSelected: undefined,\n      endpointTypeSelected: undefined,\n      endpointProfils: [],\n      gradient: [],\n    };\n  },\n\n  methods: {\n    // selectControlPoint(id, continues = false) {\n    //   const found = this.controlPoints.find((el) => el.id === id);\n    //   this.endpointProfils = found.endpointProfils;\n    //   this.endpointTypeSelected = JSON.stringify(this.endpointProfils[0]);\n\n    //   if (continues) {\n    //     this.selectEndpointType(this.endpointTypeSelected);\n    //   }\n    // },\n\n    selectEndpointType(profil) {\n      // const profil = JSON.parse(argProfil);\n      if (profil) {\n        // console.log(\"profil\", profil);\n        this.endpointTypeSelected = profil.id;\n        this.controlPointSelected = profil.contextId;\n\n        this.gradient = this.getColorsGradient(profil.config);\n        this.colorHeatmap(profil);\n      } else {\n        this.gradient = [];\n      }\n    },\n\n    getColorsGradient(config) {\n      if (config.enumeration) {\n        return color.getEnumGradientColor(config.enumeration);\n      }\n\n      let _colors = color.getGradientColor(\n        config.min,\n        config.average,\n        config.max\n      );\n\n      return _colors.map((el, index) => {\n        return {\n          color: `#${el.toHex()}`,\n          value: this.getValue(index, config.max.value, config.min.value),\n        };\n      });\n    },\n\n    getValue(index, max, min) {\n      if (isNaN(parseInt(min)) && isNaN(parseInt(max)))\n        return index ? \"True\" : \"False\";\n      return Number(min) + ((Number(max) - Number(min)) * Number(index)) / 10;\n    },\n\n    getColor(endpointValue, config) {\n      if (config.enumeration) {\n        return color.getEnumColor(endpointValue, config.enumeration);\n      }\n\n      let gradient = color.getGradientColor(\n        config.min,\n        config.average,\n        config.max\n      );\n\n      return color.getColor(\n        endpointValue,\n        config.min.value,\n        config.max.value,\n        gradient\n      );\n\n      // return color.getColor(\n      //   endpointValue,\n      //   config.min.value,\n      //   config.max.value,\n      //   this.gradient\n      // );\n\n      // let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(c);\n      // return result\n      //   ? {\n      //       r: parseInt(result[1], 16),\n      //       g: parseInt(result[2], 16),\n      //       b: parseInt(result[3], 16),\n      //     }\n      //   : null;\n    },\n\n    async colorHeatmap(profil) {\n      this.unBindAll();\n\n      const res = await this.getEndpointToBind(profil.id);\n      if (typeof res === \"undefined\") return;\n\n      this.bimObjectsColored.push(...res.map((el) => el.ids).flat());\n\n      res.forEach((element) => {\n        let bindProcess = element.endpoint.currentValue.bind(() => {\n          const value = element.endpoint.currentValue.get();\n          // const config = element.endpoint.config.get();\n\n          let color = this.getColor(value, profil.config);\n          let vector = utilities.convertColorToTHREE_Vector(color);\n\n          element.ids.forEach(({ model, ids }) => {\n            ids.forEach((id) => {\n              model.setThemingColor(id, vector, true);\n            });\n            // model.setThemingColor(ids, vector, true);\n          });\n\n          window.spinal.ForgeViewer.viewer.impl.invalidate(true);\n\n          // let model = window.spinal.BimObjectService.getModelByBimfile(\n          //   element.room.bimFileId\n          // );\n\n          // model.setThemingColor(element.room.dbid, vector, true);\n        });\n\n        this.bindProcessMap.set(element.endpoint, bindProcess);\n      });\n    },\n\n    restoreColor() {\n      const vector = new THREE.Vector4(0, 0, 0, 0);\n\n      this.bimObjectsColored.forEach(({ model, ids }) => {\n        ids.forEach((dbid) => model.setThemingColor(dbid, vector, true));\n      });\n\n      window.spinal.ForgeViewer.viewer.impl.invalidate(true);\n    },\n\n    getEndpointToBind(endpointId) {\n      const controlPoint = this.controlPoints.find(\n        (el) => el.id === this.controlPointSelected\n      );\n\n      if (controlPoint) {\n        const promises = controlPoint.rooms.map(async (el) => {\n          const endpoint = el.endpoints.find(\n            // (e) => e.type.get() === endpointType\n            (e) => e.id.get() == endpointId\n          );\n\n          return {\n            endpoint,\n            ids: await utilities.getReferenceObject(el.id),\n          };\n        });\n\n        return Promise.all(promises);\n      }\n    },\n\n    unBindAll() {\n      this.bindProcessMap.forEach((value, key) => {\n        key.currentValue.unbind(value);\n        this.bindProcessMap.delete(key);\n      });\n    },\n\n    disabledEndpointsSelected() {\n      return typeof this.controlPointSelected === \"undefined\";\n    },\n\n    formatProfil(liste) {\n      const profils = [];\n      for (const context of liste) {\n        const items = context.endpointProfils.map((element) => {\n          const el = JSON.parse(JSON.stringify(element));\n          el.title = `${context.name} / ${el.name}`;\n          el.contextId = context.id;\n          return el;\n        });\n        profils.push(...items);\n      }\n\n      return profils;\n    },\n\n    updateData(elementSelected) {\n      if (this.controlPoints && this.controlPoints.length > 0) {\n        this.endpointProfils = this.formatProfil(this.controlPoints);\n        if (typeof elementSelected === \"undefined\") {\n          elementSelected = this.endpointProfils[0];\n        }\n\n        this.selectEndpointType(elementSelected);\n      }\n    },\n\n    closeLegend() {\n      this.$emit(\"close\", this.id);\n    },\n  },\n\n  beforeDestroy() {\n    this.unBindAll();\n    this.restoreColor();\n  },\n\n  watch: {\n    controlPoints() {\n      const context = this.controlPoints.find(\n        (el) => el.id === this.controlPointSelected\n      );\n      let found;\n\n      if (context) {\n        found = context.endpointProfils.find(\n          (el) => el.id === this.endpointTypeSelected\n        );\n      }\n      this.updateData(found);\n    },\n  },\n};\n</script>\n\n<style scoped>\n._legends {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n\n._legends .closeBtn {\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  background: red;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 100%;\n  z-index: 99999999;\n  top: -16px;\n  right: -14px;\n  cursor: pointer;\n}\n\n._legends .legend_title {\n  height: 20px;\n  width: 60px;\n  color: #448aff;\n  font-size: 15px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n._legends .selects {\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n}\n\n._legends .selects .btn-trigger {\n  min-width: unset;\n}\n\n._legends .colors {\n  /* width: 100%; */\n  height: calc(100% - 70px);\n  margin: auto;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column-reverse;\n}\n\n._legends .colors .boxContainer {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: row;\n  position: relative;\n}\n\n._legends .colors .boxContainer .boxColor {\n  width: calc(20%);\n  /* width: calc(100%); */\n  background-color: red;\n}\n\n._legends .colors .boxContainer .boxValue {\n  width: calc(80%);\n  align-self: flex-end;\n  justify-self: flex-end;\n  max-height: 30px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  font-size: 12px;\n  padding-left: 4px;\n  position: absolute;\n  bottom: -10px;\n  left: 10px;\n}\n</style>\n\n<style>\n._legends .selects .md-field {\n  min-height: unset;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"_container\">\n    <md-content class=\"md-scrollbar heatmap_legends_container\"\n                v-if=\"legendLength > 0\">\n\n      <div class=\"legend\"\n           v-for=\"(key) in Object.keys(data)\"\n           :key=\"key\">\n        <heatmap-legend :id=\"key\"\n                        :controlPoints=\"data[key]\"\n                        :ref=\"key\"\n                        @close=\"closeLegend\"></heatmap-legend>\n      </div>\n    </md-content>\n  </div>\n\n</template>\n\n<script>\nimport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\nimport HeatmapLegend from \"../components/heatmap.vue\";\nimport { EventBus } from \"../../utilities/event\";\nimport { itemColoredMap } from \"../../utilities/itemsColored\";\nexport default {\n  name: \"heatmapPanel\",\n  components: {\n    \"heatmap-legend\": HeatmapLegend,\n  },\n  data() {\n    this.button;\n    return {\n      legendLength: 0,\n      data: {},\n    };\n  },\n  mounted() {\n    this.openEvent();\n    this.getUpdateEvent();\n  },\n  methods: {\n    // async opened(option) {\n    //   const groupId = option.selectedNode.id;\n    //   if (this.data[groupId]) {\n    //     this.destroyLegend(groupId);\n    //     const res = Object.assign({}, this.data);\n    //     delete res[groupId];\n    //     this.data = Object.assign({}, res);\n    //     return;\n    //   }\n\n    //   const data = await this.getAllData(groupId);\n    //   this.data = Object.assign({}, this.data, { [groupId]: data });\n    // },\n\n    async getAllData(groupId) {\n      const data = await spinalControlPointService.getDataFormated(groupId);\n      return data;\n    },\n\n    closeLegend(groupId) {\n      if (this.data[groupId]) {\n        this.destroyLegend(groupId);\n        const res = Object.assign({}, this.data);\n        delete res[groupId];\n        this.data = Object.assign({}, res);\n        this.legendLength = Object.keys(this.data).length;\n        itemColoredMap.delete(groupId);\n        if (this.button) this.button.fontColor = \"#FFFFFF\";\n        return;\n      }\n    },\n\n    destroyLegend(id) {\n      if (typeof this.$refs[id] !== \"undefined\") {\n        this.$refs[id][0].$destroy();\n      }\n    },\n\n    closed() {},\n\n    openEvent() {\n      EventBus.$on(\"heatmapPanel\", async (option) => {\n        const groupId = option.selectedNode.id;\n        this.button = option.button;\n\n        if (this.data[groupId]) {\n          this.destroyLegend(groupId);\n          const res = Object.assign({}, this.data);\n          delete res[groupId];\n          this.data = Object.assign({}, res);\n          this.legendLength = Object.keys(this.data).length;\n\n          return;\n        }\n\n        const data = await this.getAllData(groupId);\n\n        if (data.length === 0) {\n          alert(\"No controlpoint Linked\");\n          if (this.button) this.button.fontColor = \"#FFFFFF\";\n          return;\n        }\n\n        this.data = Object.assign({}, this.data, { [groupId]: data });\n        this.legendLength = Object.keys(this.data).length;\n      });\n    },\n\n    getUpdateEvent() {\n      EventBus.$on(\"update-controlPoint\", (option) => {\n        Object.keys(this.data).map(async (groupId) => {\n          const data = await this.getAllData(groupId);\n          this.data[groupId] = data;\n        });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n._container {\n  padding-top: 30px;\n  cursor: all-scroll;\n}\n\n._container .heatmap_legends_container {\n  /* width: 100%;\n  height: calc(100% - 15px);\n  display: flex;\n  flex-direction: column;\n  align-items: center; */\n  /* background: red; */\n  /* width: 200px; */\n  max-width: 200px;\n  height: calc(40%);\n  background: #393939 !important;\n  border: 1px solid black;\n  overflow-x: auto;\n  position: absolute;\n  left: 0px;\n  top: calc(20%);\n  padding: 10px;\n  display: flex;\n  justify-content: space-around;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n._container .heatmap_legends_container .legend {\n  width: 60px;\n  height: calc(98% - 20px);\n  color: white;\n  padding: 5px;\n  display: inline-block;\n  /* margin-right: 20px; */\n  font-weight: bold;\n  margin: 10px 10px 10px 0;\n  border: 1px solid gray;\n}\n\n._container .heatmap_legends_container:last-child {\n  margin-right: 0px;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-control-endpoint.84a1d0a6.css.map"}