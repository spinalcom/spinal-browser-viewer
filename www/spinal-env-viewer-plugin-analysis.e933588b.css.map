{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqNA;;;;AAGA;;;;;;AAKA;;;;;;AAKA","sources":["cfa237f2e933588b","node_modules/spinal-env-viewer-plugin-analysis/src/vues/dialogs/createContextDialog.vue"],"sourcesContent":["@import \"d74621c08c658191\";\n@import \"c863bd98f2e595f7\";\n@import \"148c07946ecf3837\";\n@import \"478ec4b488ee5b36\";\n@import \"57983792faef8985\";\n@import \"28382e75017d3a04\";\n@import \"62e7e9e9b7659939\";\n@import \"b07c956eca1191c4\";\n@import \"068e7c3f24cda757\";\n@import \"67ea40e000ec34ae\";\n@import \"51b1549ce9dfb254\";\n@import \"444735fb8ec80916\";\n@import \"b66b5fa1dc5f1508\";\n@import \"94202946bf344fc8\";\n@import \"92bf69b30a05abfc\";\n@import \"6edabc5537d596f5\";\n@import \"3669e275aaab746d\";\n@import \"6ab95f25c4ab0ba1\";\n@import \"67d070aa414c4824\";\n@import \"7bc75037d4395e2d\";\n@import \"e209077c5c2d1a7c\";\n@import \"8d9281d5c03e1267\";\n@import \"5a25bbd98a865a2d\";\n@import \"fdadd5a300b6cc1b\";\n@import \"25861d4c2a425820\";\n@import \"ad3442a7bd3f3b11\";\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"mdDialog\">\n    <md-dialog-title class=\"mdDialogTitle\">Create Analytic context\n    </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n\n      <md-steppers :md-active-step.sync=\"stepper.active\"\n                   @md-changed=\"changeStep\"\n                   md-linear\n                   class=\"mySteppers\">\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.context\"\n                 md-label=\"Context\"\n                 :md-done.sync=\"stepper.first\">\n          <md-content class=\"contents\">\n            <md-field>\n              <label>Context name</label>\n              <md-input v-model=\"inputValue\"\n                        ref=\"nameTextField\"></md-input>\n            </md-field>\n          </md-content>\n\n        </md-step>\n\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.entities\"\n                 md-label=\"Entities\"\n                 :md-done.sync=\"stepper.second\">\n\n          <sortable-list :items=\"entities\"\n                         ref=\"draggableComponent\"\n                         @addEntity=\"addEntity\"\n                         @delete=\"deleteItem\"\n                         @addAllStandardEntities=\"addAllStandardEntities\"></sortable-list>\n\n        </md-step>\n\n      </md-steppers>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 v-if=\"stepper.active === this.STEPPERS_DATA.context\"\n                 :disabled=\"!(inputValue.trim().length > 0)\"\n                 @click=\"PassToSecondStep\">Next</md-button>\n\n      <md-button v-if=\"stepper.active === this.STEPPERS_DATA.entities\"\n                 :disabled=\"disabledButton()\"\n                 class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n\n  </md-dialog>\n</template>\n\n<script>\n\nimport { spinalAnalyticService , ENTITY_TYPES } from \"spinal-model-analysis\";\n\nimport SortableList from \"./components/sortable-list.vue\";\n\nexport default {\n  name: \"createAnalyticContextDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"sortable-list\": SortableList,\n  },\n  data() {  \n    this.STEPPERS_DATA = {\n      context: \"first\",\n      entities: \"second\",\n    };\n    return {\n      showDialog: true,\n      inputValue: \"\",\n      entities: [], \n      stepper: {\n        active: this.STEPPERS_DATA.context,\n        first: false,\n        second: false,\n      },\n    };\n  },\n  methods: {\n    opened(option) {\n      this.autoFocusNameInput();\n    },\n\n    async removed(res) {\n      if (res.closeResult){\n        const context = await spinalAnalyticService.createContext(res.inputValue.trim());\n        for (const entity of res.entities){\n          console.log(\"entity :\",entity);\n          const newEntity = {\n            name : entity.name,\n            standard_name: entity.standard_name,\n            entityType: entity.entityType,\n            description:\"\"\n          }\n          const entityInfo = await spinalAnalyticService.addEntity(newEntity,context.id.get());\n        }\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        const entities = this.getEntities();\n        this.onFinised({\n          closeResult,\n          inputValue: this.inputValue,\n          entities,\n        });\n      }\n    },\n\n    getEntities() {\n      if (this.$refs.draggableComponent) {\n        const entities = this.$refs.draggableComponent.itemsSorted;\n        return entities.map((el, index) => {\n          el.order = index;\n          return el;\n        });\n      }\n    },\n\n    disabledButton() {\n      const contextCondition = this.inputValue.trim().length === 0;\n      const stepsCondition = this.entities.length === 0;\n      return contextCondition || stepsCondition;\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n\n    changeStep(stepId) {\n      if (stepId === this.STEPPERS_DATA.context) {\n        this.stepper.active = stepId;\n        this.stepper.first = false;\n      }\n    },\n\n    PassToSecondStep() {\n      this.stepper.first = true;\n      this.stepper.active = this.STEPPERS_DATA.entities;\n    },\n\n    addEntity(res) {\n      this.entities = [...this.entities, res];\n    },\n\n    deleteItem(order) {\n      this.entities = this.entities.filter((el) => el.order !== order);\n    },\n\n    addAllStandardEntities(){\n      this.entities = [];\n      this.entities = [\n        {name: \"Building\", standard_name: \"Building\", entityType: ENTITY_TYPES.BUILDING, description: \"\",order:0},\n        {name: \"Floor\", standard_name: \"Floor\", entityType: ENTITY_TYPES.FLOOR, description: \"\",order:1},\n        {name: \"Room\", standard_name: \"Room\", entityType: ENTITY_TYPES.ROOM, description: \"\",order:2},\n        {name: \"Equipment\", standard_name: \"Equipment\", entityType: ENTITY_TYPES.EQUIPMENT, description: \"\",order:3},\n        {name: \"Floor Group\", standard_name: \"Floor Group\", entityType: ENTITY_TYPES.FLOOR_GROUP, description: \"\",order:4},\n        {name: \"Room Group\", standard_name: \"Room Group\", entityType: ENTITY_TYPES.ROOM_GROUP, description: \"\",order:5},\n        {name: \"Equipment Group\", standard_name: \"Equipment Group\", entityType: ENTITY_TYPES.EQUIPMENT_GROUP, description: \"\",order:6},\n      ]\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* .dialogForm { \n   display: flex; \n  flex-direction: column; \n } */\n\n.mdDialog {\n  width: 500px;\n  height: 550px;\n}\n\n.mdDialog .mdDialogTitle {\n  text-align: center;\n}\n\n.mdDialog .mdDialogContainer {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.mdDialog .mdDialogContainer .mdStep {\n  height: 350px;\n  overflow: hidden;\n  padding: 10px 0px;\n}\n\n.mdDialog .mdDialogContainer .mdStep .contents {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  overflow: auto;\n}\n\n/* .mdDialog .mdDialogContainer .contents.contextName {\n  display: flex;\n  align-items: center;\n}\n\n.mdDialog .mdDialogContainer .actions {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: flex-end;\n} */\n</style>\n\n<style>\n.mdDialog .mdDialogContainer .mdStep .md-stepper-content.md-active {\n  width: 100%;\n  height: 100%;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-analysis.e933588b.css.map"}