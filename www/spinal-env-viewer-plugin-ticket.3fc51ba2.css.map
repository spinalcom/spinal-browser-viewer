{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmNA;;;;AAGA;;;;;;AAKA;;;;;;AAKA","sources":["37adaa2b3fc51ba2","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/createContextDialog.vue"],"sourcesContent":["@import \"ec23cd9471433ea7\";\n@import \"8530e3c175fed1ca\";\n@import \"5f053d09ba51d621\";\n@import \"db00786fafe2ffeb\";\n@import \"dd6626a3ec179159\";\n@import \"e32cab50b13120b9\";\n@import \"05679fb281ab8df8\";\n@import \"5b9447213df98e1f\";\n@import \"8712d35490407953\";\n@import \"d86470ec3662f01c\";\n@import \"4f01116e6df52ed6\";\n@import \"c6b5ab8ea3effb4e\";\n@import \"7fdfafc4a4725e05\";\n@import \"1200b52209b4365d\";\n@import \"d2825bebd43b09bb\";\n@import \"c7e6a88e894fad3f\";\n@import \"d6d5a470d365f71d\";\n@import \"a9f8d819b5207099\";\n@import \"6efb851d1ca4f046\";\n@import \"bfb2a2aec28ac30f\";\n@import \"e34acadfb6c035aa\";\n@import \"689be589fac2dfd9\";\n@import \"36009312805ab746\";\n@import \"25243d993e259d01\";\n@import \"16d9e17f02af9ee3\";\n@import \"895af689cf4ad2c1\";\n@import \"3697c6152e053ae6\";\n@import \"f4d62f02bd1d44c3\";\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"mdDialog\">\n    <md-dialog-title class=\"mdDialogTitle\">Create Ticket context\n    </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n\n      <md-steppers :md-active-step.sync=\"stepper.active\"\n                   @md-changed=\"changeStep\"\n                   md-linear\n                   class=\"mySteppers\">\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.context\"\n                 md-label=\"Context\"\n                 :md-done.sync=\"stepper.first\">\n          <md-content class=\"contents\">\n            <md-field>\n              <label>Context name</label>\n              <md-input v-model=\"inputValue\"\n                        ref=\"nameTextField\"></md-input>\n            </md-field>\n          </md-content>\n\n        </md-step>\n\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.steps\"\n                 md-label=\"Steps\"\n                 :md-done.sync=\"stepper.second\">\n\n          <sortable-list :items=\"steps\"\n                         ref=\"draggableComponent\"\n                         @addStep=\"addStep\"\n                         @delete=\"deleteItem\"></sortable-list>\n\n        </md-step>\n\n      </md-steppers>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 v-if=\"stepper.active === this.STEPPERS_DATA.context\"\n                 :disabled=\"!(inputValue.trim().length > 0)\"\n                 @click=\"PassToSecondStep\">Next</md-button>\n\n      <md-button v-if=\"stepper.active === this.STEPPERS_DATA.steps\"\n                 :disabled=\"disabledButton()\"\n                 class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n\n    <!-- <form class=\"dialogForm\"\n          @submit.prevent=\"closeDialog(true)\">\n      <md-dialog-content>\n        <md-field>\n          <label>Context name</label>\n          <md-input v-model=\"inputValue\"overflow: hidden ;\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n\n        <md-button class=\"md-primary\"\n                   type=\"submit\"\n                   :disabled=\"!(inputValue.trim().length > 0)\">Save</md-button>\n      </md-dialog-actions>\n    </form> -->\n  </md-dialog>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\n\nimport SortableList from \"./components/sortable-list.vue\";\nimport EventBus from \"../../extensions/Event\";\n\nexport default {\n  name: \"createTicketContextDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"sortable-list\": SortableList,\n  },\n  data() {\n    this.STEPPERS_DATA = {\n      context: \"first\",\n      steps: \"second\",\n    };\n    return {\n      showDialog: true,\n      inputValue: \"\",\n      steps: [],\n      stepper: {\n        active: this.STEPPERS_DATA.context,\n        first: false,\n        second: false,\n      },\n    };\n  },\n  methods: {\n    opened(option) {\n      this.autoFocusNameInput();\n    },\n\n    async removed(res) {\n      const value = res.inputValue.trim();\n\n      if (res.closeResult && value.length > 0) {\n        const context = await serviceTicketPersonalized.createContext(\n          value,\n          res.steps\n        );\n        EventBus.$emit(\"ticketContextCreated\", context.getId().get());\n      }\n\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        const steps = this.getSteps();\n        this.onFinised({\n          closeResult,\n          inputValue: this.inputValue,\n          steps,\n        });\n      }\n    },\n\n    getSteps() {\n      if (this.$refs.draggableComponent) {\n        const steps = this.$refs.draggableComponent.itemsSorted;\n        return steps.map((el, index) => {\n          el.order = index;\n          return el;\n        });\n      }\n    },\n\n    disabledButton() {\n      const contextCondition = this.inputValue.trim().length === 0;\n      const stepsCondition = this.steps.length === 0;\n      return contextCondition || stepsCondition;\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n\n    changeStep(stepId) {\n      if (stepId === this.STEPPERS_DATA.context) {\n        this.stepper.active = stepId;\n        this.stepper.first = false;\n      }\n    },\n\n    PassToSecondStep() {\n      this.stepper.first = true;\n      this.stepper.active = this.STEPPERS_DATA.steps;\n    },\n\n    addStep(res) {\n      this.steps = [...this.steps, res];\n    },\n\n    deleteItem(order) {\n      this.steps = this.steps.filter((el) => el.order !== order);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* .dialogForm { \n   display: flex; \n  flex-direction: column; \n } */\n\n.mdDialog {\n  width: 450px;\n  height: 500px;\n}\n\n.mdDialog .mdDialogTitle {\n  text-align: center;\n}\n\n.mdDialog .mdDialogContainer {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.mdDialog .mdDialogContainer .mdStep {\n  height: 300px;\n  overflow: hidden;\n  padding: 10px 0px;\n}\n\n.mdDialog .mdDialogContainer .mdStep .contents {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  overflow: auto;\n}\n\n/* .mdDialog .mdDialogContainer .contents.contextName {\n  display: flex;\n  align-items: center;\n}\n\n.mdDialog .mdDialogContainer .actions {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: flex-end;\n} */\n</style>\n\n<style>\n.mdDialog .mdDialogContainer .mdStep .md-stepper-content.md-active {\n  width: 100%;\n  height: 100%;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-ticket.3fc51ba2.css.map"}