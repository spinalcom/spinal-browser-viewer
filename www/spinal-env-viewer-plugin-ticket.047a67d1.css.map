{"mappings":"A;;;;;A;;;;A;;;;;A;;;;;;;;A;;;;;;A;;;;;;;A;;;;;;;A;;;;;;;;A;;;;;;;;;A;;;;;;;;A;;;;;;;;A;;;;A;;;;;A;;;;;AEmsources":["node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/components/popover.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/components/sortable-list.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/createContextDialog.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/createProcessDialog.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/createStepDialog.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/components/attachment.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/createTicket.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/components/linkerTemplate.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/components/selectProcess.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/components/tickets.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/dialogs/selectProcessDialog.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/components/listItem.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/ticketManager.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/components/log.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/components/logsTemplate.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/ticketDetailPanel.vue","node_modules/spinal-env-viewer-plugin-ticket/src/vue/panels/manageTicketPanel.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover offset=\"16\"\n             :auto-hide=\"false\"\n             :open=\"show\">\n\n    <md-button class=\"tooltip-target md-fab md-mini md-primary\">\n      <md-icon>add</md-icon>\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n          <md-field>\n            <label>Step name</label>\n            <md-input v-model=\"name\"></md-input>\n          </md-field>\n\n          <div>\n            <slider-picker class=\"colorPicker\"\n                           v-model=\"color\" />\n          </div>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <!-- <a class=\"btn\"\n             v-close-popover>Close</a>\n          <a class=\"btn\"\n             :disabled=\"disabled()\"\n             @click=\"addStep\"\n             v-close-popover>ADD</a> -->\n\n          <md-button class=\"btn md-dense md-primary\"\n                     v-close-popover>Close</md-button>\n\n          <md-button class=\"btn md-dense md-primary\"\n                     :disabled=\"disabled()\"\n                     @click=\"addStep\"\n                     v-close-popover>ADD</md-button>\n\n        </div>\n      </div>\n\n    </template>\n  </v-popover>\n</template>\n\n<script>\nimport { Slider } from \"vue-color\";\n\nexport default {\n  name: \"addItemsPopover\",\n  components: {\n    \"slider-picker\": Slider,\n  },\n  data() {\n    return {\n      name: \"\",\n      color: \"#000000\",\n      show: false,\n    };\n  },\n  methods: {\n    OpenAttribute() {\n      this.show = !this.show;\n    },\n    addStep() {\n      const color =\n        typeof this.color === \"string\" ? this.color : this.color.hex;\n\n      this.$emit(\"addStep\", { name: this.name, color });\n      this.name = \"\";\n      this.color = \"#000000\";\n    },\n    disabled() {\n      return this.name.trim().length === 0 || !this.color;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.popoverContainer {\n  width: 200px;\n  height: 200px;\n}\n\n.popoverContainer ._popoverContent {\n  height: 150px;\n}\n\n.popoverContainer ._popoverContent .colorPicker {\n  width: 100%;\n  height: 100px;\n}\n\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"myContainer md-scrollbar\">\n\n    <draggable v-if=\"itemsSorted.length > 0\"\n               group=\"steps\"\n               @start=\"drag=true\"\n               @end=\"drag=false\"\n               v-model=\"itemsSorted\">\n      <div class=\"listeItemDraggable\"\n           v-for=\"element in itemsSorted\"\n           :key=\"element.order\">\n        <div class=\"left\">\n          <div class=\"color\"\n               :style=\"{'background-color' : element.color}\"></div>\n          <div class=\"name\">\n            {{element.name}}\n          </div>\n        </div>\n\n        <div class=\"right\">\n          <md-button class=\"md-icon-button md-dense md-accent\"\n                     @click=\"deleteItem(element.order)\">\n            <md-icon>delete_forever</md-icon>\n          </md-button>\n        </div>\n\n      </div>\n    </draggable>\n\n    <div v-else\n         class=\"empty\">\n      No step created\n    </div>\n\n    <div class=\"myFabs\">\n      <popover @addStep=\"addStep\"></popover>\n    </div>\n\n  </md-content>\n</template>\n\n<script>\nimport draggable from \"vuedraggable\";\nimport popover from \"./popover.vue\";\nexport default {\n  name: \"Sortable-List\",\n  components: { popover, draggable },\n  props: {\n    items: { default: [] },\n  },\n  data() {\n    return {\n      itemsSorted: [],\n    };\n  },\n  mounted() {\n    this.itemsSorted = this.items;\n  },\n  methods: {\n    addStep(res) {\n      res[\"order\"] = this.items.length;\n      this.$emit(\"addStep\", res);\n    },\n    deleteItem(order) {\n      this.$emit(\"delete\", order);\n    },\n  },\n  watch: {\n    items() {\n      this.itemsSorted = this.items;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.myContainer {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  position: relative;\n}\n\n.myContainer .myFabs {\n  width: 50px;\n  position: absolute;\n  bottom: 0px;\n  right: 10px;\n}\n\n.myContainer .empty {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.listeItemDraggable {\n  width: 100%;\n  height: 50px;\n  /* background: grey; */\n  border: 1px dashed grey;\n  color: #ffffff;\n  margin-bottom: 5px;\n  display: flex;\n}\n\n.listeItemDraggable .left {\n  flex: 1 1 80%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  font-size: 1.5em;\n}\n\n.listeItemDraggable .right {\n  flex: 1 1 20%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.listeItemDraggable .left .name {\n  margin-left: 10px;\n}\n\n.listeItemDraggable .left .color {\n  height: 100%;\n  width: 10px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\"\n             class=\"mdDialog\">\n    <md-dialog-title class=\"mdDialogTitle\">Create Ticket context\n    </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n\n      <md-steppers :md-active-step.sync=\"stepper.active\"\n                   @md-changed=\"changeStep\"\n                   md-linear\n                   class=\"mySteppers\">\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.context\"\n                 md-label=\"Context\"\n                 :md-done.sync=\"stepper.first\">\n          <md-content class=\"contents\">\n            <md-field>\n              <label>Context name</label>\n              <md-input v-model=\"inputValue\"\n                        ref=\"nameTextField\"></md-input>\n            </md-field>\n          </md-content>\n\n        </md-step>\n\n        <md-step class=\"mdStep\"\n                 :id=\"STEPPERS_DATA.steps\"\n                 md-label=\"Steps\"\n                 :md-done.sync=\"stepper.second\">\n\n          <sortable-list :items=\"steps\"\n                         ref=\"draggableComponent\"\n                         @addStep=\"addStep\"\n                         @delete=\"deleteItem\"></sortable-list>\n\n        </md-step>\n\n      </md-steppers>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 v-if=\"stepper.active === this.STEPPERS_DATA.context\"\n                 :disabled=\"!(inputValue.trim().length > 0)\"\n                 @click=\"PassToSecondStep\">Next</md-button>\n\n      <md-button v-if=\"stepper.active === this.STEPPERS_DATA.steps\"\n                 :disabled=\"disabledButton()\"\n                 class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n\n    <!-- <form class=\"dialogForm\"\n          @submit.prevent=\"closeDialog(true)\">\n      <md-dialog-content>\n        <md-field>\n          <label>Context name</label>\n          <md-input v-model=\"inputValue\"overflow: hidden ;\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n\n        <md-button class=\"md-primary\"\n                   type=\"submit\"\n                   :disabled=\"!(inputValue.trim().length > 0)\">Save</md-button>\n      </md-dialog-actions>\n    </form> -->\n  </md-dialog>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\n\nimport SortableList from \"./components/sortable-list.vue\";\nimport EventBus from \"../../extensions/Event\";\n\nexport default {\n  name: \"createTicketContextDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"sortable-list\": SortableList,\n  },\n  data() {\n    this.STEPPERS_DATA = {\n      context: \"first\",\n      steps: \"second\",\n    };\n    return {\n      showDialog: true,\n      inputValue: \"\",\n      steps: [],\n      stepper: {\n        active: this.STEPPERS_DATA.context,\n        first: false,\n        second: false,\n      },\n    };\n  },\n  methods: {\n    opened(option) {\n      this.autoFocusNameInput();\n    },\n\n    async removed(res) {\n      const value = res.inputValue.trim();\n\n      if (res.closeResult && value.length > 0) {\n        const context = await serviceTicketPersonalized.createContext(\n          value,\n          res.steps\n        );\n        EventBus.$emit(\"ticketContextCreated\", context.getId().get());\n      }\n\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        const steps = this.getSteps();\n        this.onFinised({\n          closeResult,\n          inputValue: this.inputValue,\n          steps,\n        });\n      }\n    },\n\n    getSteps() {\n      if (this.$refs.draggableComponent) {\n        const steps = this.$refs.draggableComponent.itemsSorted;\n        return steps.map((el, index) => {\n          el.order = index;\n          return el;\n        });\n      }\n    },\n\n    disabledButton() {\n      const contextCondition = this.inputValue.trim().length === 0;\n      const stepsCondition = this.steps.length === 0;\n      return contextCondition || stepsCondition;\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n\n    changeStep(stepId) {\n      if (stepId === this.STEPPERS_DATA.context) {\n        this.stepper.active = stepId;\n        this.stepper.first = false;\n      }\n    },\n\n    PassToSecondStep() {\n      this.stepper.first = true;\n      this.stepper.active = this.STEPPERS_DATA.steps;\n    },\n\n    addStep(res) {\n      this.steps = [...this.steps, res];\n    },\n\n    deleteItem(order) {\n      this.steps = this.steps.filter((el) => el.order !== order);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* .dialogForm { \n   display: flex; \n  flex-direction: column; \n } */\n\n.mdDialog {\n  width: 450px;\n  height: 500px;\n}\n\n.mdDialog .mdDialogTitle {\n  text-align: center;\n}\n\n.mdDialog .mdDialogContainer {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.mdDialog .mdDialogContainer .mdStep {\n  height: 300px;\n  overflow: hidden;\n  padding: 10px 0px;\n}\n\n.mdDialog .mdDialogContainer .mdStep .contents {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  overflow: auto;\n}\n\n/* .mdDialog .mdDialogContainer .contents.contextName {\n  display: flex;\n  align-items: center;\n}\n\n.mdDialog .mdDialogContainer .actions {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: flex-end;\n} */\n</style>\n\n<style>\n.mdDialog .mdDialogContainer .mdStep .md-stepper-content.md-active {\n  width: 100%;\n  height: 100%;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <form class=\"dialogForm\"\n          @submit.prevent=\"closeDialog(true)\">\n      <md-dialog-title>Create Process Context</md-dialog-title>\n      <md-dialog-content>\n        <md-field>\n          <label>Process name</label>\n          <md-input ref=\"nameTextField\"\n                    v-model=\"process.name\"></md-input>\n        </md-field>\n\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   type=\"submit\"\n                   :disabled=\"!(process.name.trim().length > 0)\">Save\n        </md-button>\n      </md-dialog-actions>\n\n    </form>\n\n  </md-dialog>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\nimport EventBus from \"../../extensions/Event\";\n\nexport default {\n  name: \"createProcessDialog\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      contextId: undefined,\n      process: {\n        name: \"\",\n      },\n    };\n  },\n  methods: {\n    opened(option) {\n      this.autoFocusNameInput();\n      this.contextId = option.contextId;\n    },\n\n    async removed(res) {\n      if (res.closeResult && res.process.name.length > 0 && this.contextId) {\n        const process = await serviceTicketPersonalized.createProcess(\n          res.process,\n          this.contextId\n        );\n        EventBus.$emit(\"ticketProcessCreated\", process);\n      }\n\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, process: this.process });\n      }\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dialogForm {\n  display: flex;\n  flex-direction: column;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             class=\"stepDialogContainer\"\n             @md-closed=\"closeDialog(false)\">\n    <form class=\"dialogForm\"\n          @submit.prevent=\"closeDialog(true)\">\n      <md-dialog-title>Create Ticket Step</md-dialog-title>\n      <md-dialog-content>\n        <md-field>\n          <label>Step name</label>\n          <md-input ref=\"nameTextField\"\n                    v-model=\"step.name\"></md-input>\n        </md-field>\n\n        <!-- <md-field>\n          <label>Step Order</label>\n          <md-input v-model=\"step.order\"\n                    type=\"number\"></md-input>\n          <span class=\"md-helper-text md-primary\">The first step index is\n            0</span>\n        </md-field> -->\n\n        <div class=\"order_div md-layout md-gutter\">\n          <span class=\"md-layout-item md-size-20 md-caption insert_div\">Insert\n            it</span>\n\n          <div class=\"md-layout-item md-size-30\">\n            <md-field>\n              <md-select v-model=\"place\"\n                         name=\"Place\"\n                         id=\"Place\"\n                         placeholder=\"Place\">\n                <!-- <md-option disabled\n                           :value=\"-1\">Place</md-option> -->\n                <md-option :value=\"PLACEMENT.before\">Before</md-option>\n                <md-option :value=\"PLACEMENT.after\">After</md-option>\n              </md-select>\n            </md-field>\n          </div>\n\n          <div class=\"md-layout-item md-size-50\">\n            <md-field>\n              <md-select v-model=\"orderSelected\"\n                         name=\"step\"\n                         id=\"step\"\n                         placeholder=\"Steps\">\n                <!-- <md-option disabled\n                           :value=\"-1\">Steps</md-option> -->\n                <md-option v-for=\"s in steps\"\n                           :key=\"s.order\"\n                           :value=\"s.order\">{{s.name}}</md-option>\n\n              </md-select>\n            </md-field>\n          </div>\n\n        </div>\n\n        <chrome-picker class=\"stepChromePicker\"\n                       v-model=\"step.color\" />\n\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   type=\"submit\"\n                   :disabled=\"disabled()\">Save\n        </md-button>\n      </md-dialog-actions>\n\n    </form>\n\n  </md-dialog>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\nimport { Chrome } from \"vue-color\";\n\nexport default {\n  name: \"createStepDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"chrome-picker\": Chrome,\n  },\n  data() {\n    this.PLACEMENT = {\n      before: 0,\n      after: 1,\n    };\n    return {\n      showDialog: true,\n      processId: undefined,\n      contextId: undefined,\n      place: undefined,\n      orderSelected: undefined,\n      steps: [],\n      step: {\n        name: \"\",\n        color: \"#000000\",\n        order: 0,\n      },\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.autoFocusNameInput();\n      this.processId = option.processId;\n      this.contextId = option.contextId;\n      this.steps = await this.getSteps(this.processId, this.contextId);\n    },\n\n    async removed(res) {\n      if (\n        res.closeResult &&\n        res.step.name.length > 0 &&\n        this.processId &&\n        this.contextId\n      ) {\n        serviceTicketPersonalized.insertStep(\n          this.contextId,\n          this.processId,\n          res.step\n        );\n\n        // serviceTicketPersonalized.addStep(\n        //   res.step.name,\n        //   res.step.color,\n        //   res.step.order,\n        //   this.processId,\n        //   this.contextId\n        // );\n      }\n\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.step.color =\n          typeof this.step.color === \"string\"\n            ? this.step.color\n            : this.step.color.hex;\n\n        this.step.order = this.orderSelected + this.place;\n\n        this.onFinised({ closeResult, step: this.step });\n      }\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n\n    disabled() {\n      return !(\n        this.step.name.trim().length > 0 &&\n        typeof this.place !== \"undefined\" &&\n        typeof this.orderSelected !== \"undefined\"\n      );\n    },\n\n    getSteps(processId, contextId) {\n      return serviceTicketPersonalized\n        .getStepsFromProcess(processId, contextId)\n        .then((result) => {\n          return result.map((el) => el.get()).filter((el) => el.order !== -1);\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.stepDialogContainer {\n  width: 450px;\n}\n\n.stepChromePicker {\n  width: 100%;\n}\n\n.dialogForm {\n  display: flex;\n  flex-direction: column;\n}\n\n.dialogForm .insert_div {\n  display: flex;\n  align-items: center;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"content\">\n      <div\n         class=\"md-caption name\"\n         v-tooltip=\"file.name\"\n      >{{file.name}}</div>\n\n      <div\n         class=\"md-caption delete\"\n         @click=\"remove\"\n      >X</div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"attachment\",\n   props: [\"file\"],\n   data() {\n      return {};\n   },\n   methods: {\n      remove() {\n         this.$emit(\"remove\", this.file);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.content {\n   width: 95%;\n   margin: auto;\n   display: flex;\n   font-weight: bold;\n   justify-content: space-between;\n   align-items: center;\n}\n\n.content .name {\n   width: calc(100% - 30px);\n   display: block;\n   white-space: nowrap;\n   overflow: hidden;\n   text-overflow: ellipsis;\n}\n\n.content .delete {\n   width: 30px;\n   text-align: center;\n   color: #ff0000;\n}\n\n.content .delete:hover {\n   cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"mdDialogTitle\">Create Ticket\n    </md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContent\">\n      <div class=\"normalContent\"\n           v-if=\"pageSelected === PAGES.normal\">\n        <div class=\"content details\">\n\n          <div>\n            <hr class=\"hr-text\"\n                data-content=\"Details\">\n          </div>\n\n          <div class=\"left\">\n\n            <div class=\"detail\"\n                 v-if=\"commonTicketInfo\">\n              <div class=\"label\">Title</div>\n              <div class=\"value\"\n                   v-tooltip=\"commonTicketInfo.name\">{{commonTicketInfo.name}}\n              </div>\n            </div>\n\n            <div class=\"detail\"\n                 v-else-if=\"!commonTicketInfo\">\n              <md-field>\n                <label>Ticket name</label>\n                <md-input v-model=\"ticket.name\"></md-input>\n              </md-field>\n            </div>\n\n            <div class=\"detail\"\n                 v-if=\"nodeInfo\">\n              <div class=\"label\">Element</div>\n              <div class=\"value\"\n                   v-tooltip=\"nodeInfo.name\">{{nodeInfo.name}}</div>\n            </div>\n\n          </div>\n\n        </div>\n\n        <div class=\"content priority\">\n\n          <div>\n            <hr class=\"hr-text\"\n                data-content=\"Priority\">\n          </div>\n\n          <div class=\"priorityRadio\">\n            <md-radio v-model=\"ticket.priority\"\n                      :value=\"PRIORITY_DATA.occasionally\"\n                      class=\"md-primary\">Occasionally</md-radio>\n\n            <md-radio v-model=\"ticket.priority\"\n                      :value=\"PRIORITY_DATA.normal\"\n                      class=\"md-primary\">Normal</md-radio>\n\n            <md-radio v-model=\"ticket.priority\"\n                      :value=\"PRIORITY_DATA.urgent\"\n                      class=\"md-primary\">Urgent</md-radio>\n          </div>\n\n        </div>\n\n        <div class=\"content notes\">\n          <hr class=\"hr-text\"\n              data-content=\"Notes\">\n\n          <div class=\"pj\">\n\n            <md-button class=\"md-dense md-primary\"\n                       @click=\"addPJ\">\n              <md-icon>attach_file</md-icon>\n              ADD\n            </md-button>\n\n            <md-content class=\"pjDiv md-scrollbar\"\n                        v-if=\"ticket.pj.length > 0\">\n\n              <attachment-component v-for=\"(file,index) in ticket.pj\"\n                                    :key=\"index\"\n                                    :file=\"file\"\n                                    @remove=\"removePJ\">{{file.name}}\n              </attachment-component>\n            </md-content>\n\n            <md-content class=\"pjDiv empty\"\n                        v-else>\n              No Attachment added\n            </md-content>\n\n          </div>\n\n          <md-field>\n            <label>Message</label>\n            <md-textarea v-model=\"ticket.description\"></md-textarea>\n          </md-field>\n\n        </div>\n      </div>\n\n      <div class=\"responseContent\"\n           v-else>\n        <md-progress-spinner md-mode=\"indeterminate\"\n                             v-if=\"pageSelected === PAGES.loading\">\n        </md-progress-spinner>\n\n        <md-icon v-else\n                 class=\"md-size-5x\">{{icon}}</md-icon>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"createTicket\"\n                 :disabled=\"!(ticket.name.trim().length > 0)\">Save</md-button>\n    </md-dialog-actions>\n\n  </md-dialog>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\nimport { TICKET_PRIORITIES } from \"spinal-service-ticket/dist/Constants\";\nimport AttachmentComponent from \"./components/attachment.vue\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { spinalIO } from \"../../extensions/spinalIO\";\nimport { TICKET_EVENTS } from \"../../extensions/ticketsEvents\";\nimport EventBus from \"../../extensions/Event\";\n\nexport default {\n  name: \"createTicketDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"attachment-component\": AttachmentComponent,\n  },\n  data() {\n    this.PRIORITY_DATA = TICKET_PRIORITIES;\n    this.PAGES = {\n      normal: 0,\n      loading: 1,\n      success: 2,\n      error: 3,\n    };\n\n    return {\n      pageSelected: this.PAGES.normal,\n      showDialog: true,\n      contextId: undefined,\n      processId: undefined,\n      commonTicket: undefined,\n      nodeInfo: undefined,\n      commonTicketInfo: undefined,\n      ticket: {\n        name: \"\",\n        // elementSelected: null,\n        description: \"\",\n        pj: [],\n        priority: this.PRIORITY_DATA.occasionally,\n        user: {},\n      },\n      messages: {\n        note: \"\",\n        pj: [],\n      },\n    };\n  },\n  methods: {\n    async opened(option) {\n      // this.autoFocusNameInput();\n      this.contextId = option.contextId;\n      this.processId = option.processId;\n      this.nodeInfo = option.selectedNode.info.get();\n\n      if (option.incidentId) {\n        this.commonTicketInfo = SpinalGraphService.getInfo(\n          option.incidentId\n        ).get();\n      }\n      // this.ticket.elementSelected = new Ptr(option.selectedNode);\n      const user = await spinalIO.getUserConnected();\n      // console.log(\"user\", user);\n      this.ticket.user.username = user.name;\n      this.ticket.userId = user.id;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n    async removed(res) {\n      if (res.closeResult) {\n        // this.ticket.urls = this.ticket.urls.split(\"\\n\");\n        // this.ticket.images = new Ptr(this.ticket.images);\n      }\n\n      this.showDialog = false;\n    },\n\n    createTicket() {\n      // console.log(this.ticket);\n      this.pageSelected = this.PAGES.loading;\n      serviceTicketPersonalized\n        .addTicket(\n          this.ticket,\n          this.processId,\n          this.contextId,\n          this.nodeInfo.id\n        )\n        .then((ticketId) => {\n          const node = SpinalGraphService.getRealNode(ticketId);\n          if (node) {\n            EventBus.$emit(TICKET_EVENTS.created, node.info.get());\n            this.pageSelected = this.PAGES.success;\n            //  this.addNote(node);\n          }\n        })\n        .catch(() => (this.pageSelected = this.PAGES.error));\n    },\n\n    autoFocusNameInput() {\n      setTimeout(() => {\n        this.$refs[\"nameTextField\"].$el.focus();\n      }, 200);\n    },\n\n    addPJ() {\n      const maxSize = 25000000;\n      const input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.multiple = true;\n      input.click();\n      input.addEventListener(\n        \"change\",\n        (event) => {\n          const files = event.target.files;\n          let filelist = [];\n          for (const file of files) {\n            filelist.push(file);\n          }\n          filelist.push(...this.ticket.pj);\n          const sizes = filelist.map((el) => el.size);\n          const filesSize = sizes.reduce((a, b) => a + b);\n          if (filesSize > maxSize) {\n            alert(\n              \"The selected file(s) is too large. The maximum size must not exceed 25 MB\"\n            );\n            return;\n          }\n          this.ticket.pj = filelist;\n        },\n        false\n      );\n    },\n\n    removePJ(file) {\n      this.ticket.pj = this.ticket.pj.filter((el) => el.name !== file.name);\n    },\n  },\n  computed: {\n    icon() {\n      switch (this.pageSelected) {\n        case this.PAGES.success:\n          return \"check\";\n        case this.PAGES.error:\n          return \"error_outline\";\n      }\n    },\n  },\n  watch: {\n    commonTicketInfo() {\n      if (this.commonTicketInfo && this.commonTicketInfo.name)\n        this.ticket.name = this.commonTicketInfo.name;\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.mdDialogContainer {\n  width: 450px;\n  height: 600px;\n  // display: flex;\n}\n\n.mdDialogContainer .mdDialogTitle {\n  text-align: center;\n  // margin: 0px !important;\n}\n\n.mdDialogContainer .mdDialogContent {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding: 0 24px 0 24px !important;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent,\n.mdDialogContainer .mdDialogContent .responseContent {\n  width: 100%;\n  height: 100%;\n}\n\n.mdDialogContainer .mdDialogContent .responseContent {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.details {\n  width: 100%;\n  height: 25%;\n  display: flex;\n  flex-direction: column;\n  // justify-content: space-between;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.details .left,\n.mdDialogContainer .mdDialogContent .normalContent .content.details .right {\n  width: 100%;\n  height: 100%;\n  align-items: center;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.details .detail {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.mdDialogContainer\n  .mdDialogContent\n  .normalContent\n  .content.details\n  .detail\n  .label {\n  width: 30%;\n  // color: #818078;\n}\n\n.mdDialogContainer\n  .mdDialogContent\n  .normalContent\n  .content.details\n  .detail\n  .value {\n  width: 69%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  color: #818078;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.priority {\n  width: 100%;\n  height: 20%;\n  display: flex;\n  flex-direction: column;\n  // justify-content: center;\n}\n\n.mdDialogContainer\n  .mdDialogContent\n  .normalContent\n  .content.priority\n  .priorityRadio {\n  height: calc(100%);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.notes {\n  width: 100%;\n  height: 55%;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.notes .pj {\n  width: 100%;\n  height: 30%;\n  margin-top: 10px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.mdDialogContainer .mdDialogContent .normalContent .content.notes .pj .pjDiv {\n  width: 60%;\n  border: 1px dashed gray;\n  background: transparent;\n  overflow: auto;\n}\n\n.mdDialogContainer\n  .mdDialogContent\n  .normalContent\n  .content.notes\n  .pj\n  .pjDiv.empty {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hr-text {\n  line-height: 1em;\n  position: relative;\n  outline: 0;\n  border: 0;\n  color: white;\n  text-align: center;\n  height: 1.5em;\n  &:before {\n    content: \"\";\n    background: #818078;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    width: 100%;\n    height: 1px;\n  }\n  &:after {\n    content: attr(data-content);\n    position: relative;\n    display: inline-block;\n    color: white;\n\n    padding: 0 0.5em;\n    line-height: 1.5em;\n    color: #818078;\n    text-transform: uppercase;\n    font-size: 1em;\n    background: #424242;\n  }\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\nThis file is part of SpinalCore.\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n   <div class=\"subContent\">\n      <md-list class=\"title\">\n\n         <!--<md-list-item> \n          <div class=\"md-list-item-text\">\n          <span>{{title}}</span>\n          <span class=\"md-caption\"\n                v-if=\"subTitle\">{{subTitle}}</span>\n        </div>\n\n        <div class=\"md-layout-item md-size-10 mdIcon\">\n          <md-button class=\"md-icon-button\"\n                     @click=\"createEvent\"\n                     v-if=\"showBtn\">\n            <md-icon>control_point</md-icon>\n          </md-button>\n        </div> \n        </md-list-item>-->\n         <md-list-item>\n            <span class=\"md-list-item-text\">{{title}}</span>\n            <md-button\n               class=\"md-icon-button\"\n               @click=\"createEvent\"\n               v-if=\"showBtn\"\n            >\n               <md-icon>control_point</md-icon>\n            </md-button>\n         </md-list-item>\n\n      </md-list>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"showBtn\", \"subTitle\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n.subContent .title {\n   width: 100%;\n   /* height: 10%; */\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n.subContent .container {\n   width: 100%;\n   height: calc(100% - 50px);\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <div class=\"select_container\">\n    <!-- <div class=\"dialogTitle\">Select Ticket Process</div> -->\n    <div class=\"content\">\n      <div class=\"section\">\n        <link-template :title=\"'Select Context'\"\n                       :data=\"data\"\n                       :itemSelected=\"contextId\"\n                       @create=\"createContext\"\n                       @select=\"selectContext\"\n                       :showBtn=\"true\"></link-template>\n      </div>\n\n      <div class=\"section\">\n        <link-template :title=\"'Select Process'\"\n                       :data=\"processes\"\n                       :itemSelected=\"processId\"\n                       @create=\"createProcess\"\n                       @select=\"selectProcess\"\n                       :showBtn=\"contextId && contextId.length > 0\">\n        </link-template>\n\n      </div>\n\n      <div class=\"section\">\n        <link-template :title=\"'Select Common Incident'\"\n                       :subTitle=\"'(optional) it will be the ticket name'\"\n                       :data=\"incidents\"\n                       :itemSelected=\"incidentId\"\n                       @select=\"selectIncident\"\n                       @create=\"createCommonIncident\"\n                       :showBtn=\"showCreatBtn()\"></link-template>\n\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport linkerTemplateVue from \"./linkerTemplate.vue\";\n\nexport default {\n  name: \"selectProcess\",\n  props: {\n    data: {},\n    contextId: {},\n    processes: {},\n    processId: {},\n    incidents: {},\n    incidentId: {},\n  },\n  components: {\n    \"link-template\": linkerTemplateVue,\n  },\n  methods: {\n    showCreatBtn() {\n      return (\n        this.contextId &&\n        this.contextId.length > 0 &&\n        this.processId &&\n        this.processId.length > 0\n      );\n    },\n\n    selectContext(id) {\n      this.$emit(\"selectContext\", id);\n    },\n\n    selectProcess(id) {\n      this.$emit(\"selectProcess\", id);\n    },\n\n    selectIncident(id) {\n      this.$emit(\"selectIncident\", id);\n    },\n\n    createCommonIncident() {\n      this.$emit(\"createCommonIncident\");\n    },\n\n    createContext() {\n      this.$emit(\"createContext\");\n    },\n\n    createProcess() {\n      this.$emit(\"createProcess\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n.select_container {\n  width: 100%;\n  height: 100%;\n}\n/* .select_container .dialogTitle {\n  height: 50px;\n  text-align: center;\n} */\n.select_container .content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.select_container .content .section {\n  width: 33%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\"table_container\">\n      <md-table\n         class=\"mdTable\"\n         v-model=\"searched\"\n         md-sort=\"name\"\n      >\n\n         <md-table-toolbar\n            class=\"myToolbar\"\n            md-elevation=\"0\"\n         >\n            <div class=\"md-toolbar-section-start\">\n               <h1 class=\"md-title\">Tickets</h1>\n            </div>\n\n            <div class=\"filters md-toolbar-section-end\">\n               <!-- <div class=\"_fields\">\n            <md-field>\n              <label for=\"movies\">Steps</label>\n              <md-select v-model=\"selectedMovies\"\n                         name=\"movies\"\n                         id=\"movies\"\n                         multiple>\n                <md-option value=\"fight-club\">Fight Club</md-option>\n                <md-option value=\"godfather\">Godfather</md-option>\n                <md-option value=\"godfather-ii\">Godfather II</md-option>\n                <md-option value=\"godfather-iii\">Godfather III</md-option>\n                <md-option value=\"godfellas\">Godfellas</md-option>\n                <md-option value=\"pulp-fiction\">Pulp Fiction</md-option>\n                <md-option value=\"scarface\">Scarface</md-option>\n              </md-select>\n            </md-field>\n          </div> -->\n\n               <div class=\"_fields\">\n                  <md-field md-clearable>\n                     <md-input\n                        placeholder=\"Search by name...\"\n                        v-model=\"searchByName\"\n                        @input=\"searchOnTable\"\n                     />\n                  </md-field>\n               </div>\n\n            </div>\n\n         </md-table-toolbar>\n\n         <md-table-empty-state\n            md-label=\"No Ticket found\"\n            :md-description=\"`No ticket found for this query.`\"\n         >\n         </md-table-empty-state>\n\n         <!-- @mouseover=\"selectOnMaquette(item)\" -->\n         <md-table-row\n            slot=\"md-table-row\"\n            slot-scope=\"{ item }\"\n            @dblclick=\"isolateOnMaquette(item)\"\n            @mouseleave=\"deselectOnMaquette\"\n         >\n            <md-table-cell\n               class=\"tableName\"\n               md-label=\"Name\"\n               md-sort-by=\"name\"\n            >\n               {{ item.name }}\n\n            </md-table-cell>\n\n            <md-table-cell\n               md-label=\"State\"\n               class=\"ticketName\"\n            >\n               <div\n                  class=\"color\"\n                  :style=\"{'background-color' : item.step.color}\"\n               ></div>\n               <div class=\"name\">{{ item.step.name }}</div>\n\n            </md-table-cell>\n\n            <md-table-cell\n               md-label=\"Creation Date\"\n               md-sort-by=\"creationDate\"\n            >\n               {{ item.creationDate | formatCreationDate }}\n            </md-table-cell>\n\n            <md-table-cell\n               md-label=\"Priority\"\n               md-sort-by=\"priority\"\n            >\n               {{ item.priority | displayPriority }}</md-table-cell>\n\n            <md-table-cell md-label=\"Username\">\n               {{item.user | userName}}\n            </md-table-cell>\n\n            <md-table-cell md-label=\"\">\n               <md-menu\n                  md-size=\"small\"\n                  class=\"ticket_menu\"\n               >\n                  <md-button\n                     class=\"md-icon-button\"\n                     md-menu-trigger\n                  >\n                     <md-icon>more_vert</md-icon>\n                  </md-button>\n\n                  <md-menu-content class=\"ticket_menu_content\">\n                     <md-menu-item\n                        v-if=\"item.step.order >= 0\"\n                        @click=\"passToNextStep(item)\"\n                     >\n                        <md-icon>skip_next</md-icon>\n                        <span>Pass to next step</span>\n                     </md-menu-item>\n\n                     <md-menu-item\n                        v-if=\"item.step.order > 0\"\n                        @click=\"backToPreviousStep(item)\"\n                     >\n                        <md-icon>skip_previous</md-icon>\n                        <span>Back to previous step</span>\n                     </md-menu-item>\n\n                     <md-menu-item @click=\"sendMessage(item)\">\n                        <md-icon>comment</md-icon>\n                        <span>Add comment</span>\n                     </md-menu-item>\n\n                     <md-menu-item\n                        v-if=\"!isArchived(item)\"\n                        @click=\"archiveTicket(item)\"\n                     >\n                        <md-icon>archive</md-icon>\n                        <span>Archive</span>\n                     </md-menu-item>\n\n                     <md-menu-item\n                        v-if=\"isArchived(item)\"\n                        @click=\"unarchiveTicket(item)\"\n                     >\n                        <md-icon>unarchive</md-icon>\n                        <span>Unarchive</span>\n                     </md-menu-item>\n\n                     <md-menu-item @click=\"seeDetails(item)\">\n                        <md-icon>assignment_late</md-icon>\n                        <span>See Details</span>\n                     </md-menu-item>\n\n                     <!-- <md-menu-item @click=\"seeLogs(item)\">\n                <md-icon>receipt_long</md-icon>\n                <span>See Logs</span>\n              </md-menu-item> -->\n\n                  </md-menu-content>\n\n               </md-menu>\n            </md-table-cell>\n\n         </md-table-row>\n      </md-table>\n   </md-content>\n</template>\n\n<script>\nimport { TICKET_PRIORITIES } from \"spinal-service-ticket/dist/Constants\";\n\nconst {\n   spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport { spinalIO } from \"../../../extensions/spinalIO\";\n\nimport moment from \"moment\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\n\nimport { TICKET_EVENTS } from \"../../../extensions/ticketsEvents\";\nimport EventBUS from \"../../../extensions/Event\";\nimport { SelectElementOnMaquette } from \"../../../buttons/standard_buttons/selectElement\";\nimport { IsolateElementOnMaquette } from \"../../../buttons/standard_buttons/isolate\";\nimport { ARCHIVED_STEP } from \"spinal-service-ticket/dist/Constants\";\n\nconst selectBtn = new SelectElementOnMaquette();\nconst isolateBtn = new IsolateElementOnMaquette();\n\nexport default {\n   name: \"ticketsVue\",\n   props: {\n      data: {},\n   },\n   data() {\n      return {\n         selected: [],\n         // tickets: [],\n         searched: [],\n         searchByName: \"\",\n      };\n   },\n   mounted() {\n      EventBUS.$on(TICKET_EVENTS.created, (data) => this.$emit(\"reload\", data));\n      EventBUS.$on(TICKET_EVENTS.changeStep, (data) =>\n         this.$emit(\"reload\", data)\n      );\n\n      this.searched = this.data;\n   },\n   methods: {\n      onSelect(items) {\n         this.selected = items;\n      },\n\n      searchOnTable() {\n         this.searched = this.data.filter((el) =>\n            el.name.toLowerCase().includes(this.searchByName.toLowerCase())\n         );\n\n         // console.log(\"this.searchByName\", this.searchByName);\n      },\n\n      async passToNextStep(item) {\n         const user = await spinalIO.getUserConnected();\n\n         const contextId = item.contextId\n            ? item.contextId\n            : this.getItemContext(item.id).id.get();\n\n         const processId = item.step.processId;\n         const ticketId = item.id;\n\n         serviceTicketPersonalized\n            .moveTicketToNextStep(contextId, processId, ticketId, user)\n            .then((step) => {\n               const info = SpinalGraphService.getInfo(ticketId).get();\n               EventBUS.$emit(TICKET_EVENTS.changeStep, {\n                  ticket: info,\n                  step: step,\n               });\n            });\n      },\n\n      async backToPreviousStep(item) {\n         const user = await spinalIO.getUserConnected();\n\n         const contextId = item.contextId\n            ? item.contextId\n            : this.getItemContext(item.id).id.get();\n\n         const processId = item.step.processId;\n         const ticketId = item.id;\n         serviceTicketPersonalized\n            .moveTicketToPreviousStep(contextId, processId, ticketId, user)\n            .then((step) => {\n               const info = SpinalGraphService.getInfo(ticketId).get();\n               EventBUS.$emit(TICKET_EVENTS.changeStep, {\n                  ticket: info,\n                  step: step,\n               });\n            });\n      },\n\n      sendMessage(item) {\n         let obj = {\n            selectedNode: SpinalGraphService.getRealNode(item.id),\n         };\n         spinalPanelManagerService.openPanel(\"panel-notes\", obj);\n      },\n\n      seeDetails(item) {\n         const context = SpinalGraphService.getInfo(item.contextId);\n         const params = {\n            selectedNode: SpinalGraphService.getInfo(item.id).get(),\n            context: context\n               ? context.get()\n               : this.getItemContext(item.id).get(),\n         };\n\n         spinalPanelManagerService.openPanel(\"ticketDetailDialog\", params);\n      },\n\n      getItemContext(id) {\n         const realNode = SpinalGraphService.getRealNode(id);\n         const contextId = realNode.contextIds._attribute_names[0];\n         return SpinalGraphService.getInfo(contextId);\n      },\n\n      seeLogs(item) {},\n\n      selectOnMaquette(item) {\n         const params = {\n            selectedNode: SpinalGraphService.getInfo(item.id),\n            context: item.contextId\n               ? SpinalGraphService.getInfo(item.contextId)\n               : this.getItemContext(item.id),\n         };\n\n         selectBtn.action(params);\n      },\n\n      isolateOnMaquette(item) {\n         const params = {\n            selectedNode: SpinalGraphService.getInfo(item.id),\n            context: item.contextId\n               ? SpinalGraphService.getInfo(item.contextId)\n               : this.getItemContext(item.id),\n         };\n\n         isolateBtn.action(params);\n      },\n\n      deselectOnMaquette() {\n         window.spinal.ForgeViewer.viewer.select();\n      },\n\n      async archiveTicket(item) {\n         const contextId = item.contextId\n            ? item.contextId\n            : this.getItemContext(item.id).id.get();\n\n         const user = await spinalIO.getUserConnected();\n\n         serviceTicketPersonalized\n            .ArchiveTickets(contextId, item.step.processId, item.id, user)\n            .then((step) => {\n               const info = SpinalGraphService.getInfo(item.id).get();\n               EventBUS.$emit(TICKET_EVENTS.changeStep, {\n                  ticket: info,\n                  step: step,\n               });\n            });\n      },\n\n      async unarchiveTicket(item) {\n         const contextId = item.contextId\n            ? item.contextId\n            : this.getItemContext(item.id).id.get();\n\n         const user = await spinalIO.getUserConnected();\n         serviceTicketPersonalized\n            .unarchiveTicket(contextId, item.step.processId, item.id, user)\n            .then((step) => {\n               const info = SpinalGraphService.getInfo(item.id).get();\n               EventBUS.$emit(TICKET_EVENTS.changeStep, {\n                  ticket: info,\n                  step: step,\n               });\n            });\n      },\n\n      isArchived(item) {\n         return item.step.order === ARCHIVED_STEP.order;\n      },\n   },\n\n   filters: {\n      formatCreationDate: function (date) {\n         return moment(date).fromNow();\n      },\n\n      displayPriority: function (priority) {\n         for (const key in TICKET_PRIORITIES) {\n            if (TICKET_PRIORITIES.hasOwnProperty(key)) {\n               const value = TICKET_PRIORITIES[key];\n               if (value === priority) return key;\n            }\n         }\n      },\n\n      userName: function (user) {\n         if (user && user.name) {\n            return user.name;\n         } else if (user && user.username) {\n            return user.username;\n         }\n         return \"unknow\";\n      },\n   },\n   watch: {\n      data() {\n         // console.log(\"update Data\");\n         if (this.data) {\n            this.searched = this.data;\n         }\n      },\n   },\n};\n</script>\n\n<style scoped>\n.table_container {\n   width: 100%;\n   height: 100%;\n   /* overflow: auto; */\n}\n\n.table_container .mdTable {\n   width: 100%;\n   height: calc(100% - 7px);\n}\n\n.table_container .mdTable .tableName {\n   cursor: pointer;\n}\n\n.table_container .mdTable .myToolbar {\n   padding: 0px !important;\n}\n\n.table_container .mdTable .myToolbar .filters {\n   /* width: 99%; */\n   justify-content: space-between;\n}\n\n.table_container .mdTable .myToolbar .filters ._fields {\n   width: 98%;\n}\n\n.table_container .mdTable .ticketName .color {\n   width: 5px;\n   height: 50px;\n   margin-right: 10px;\n}\n\n.table_container .mdTable .ticketName .name {\n   display: flex;\n   align-items: center;\n}\n</style>\n\n<style>\n.md-table-cell.ticketName .md-table-cell-container {\n   display: flex;\n}\n\n.md-table-cell\n   .md-table-cell-container\n   .md-menu.ticket_menu\n   .md-button\n   .md-ripple {\n   padding: 0px !important;\n}\n\n.ticket_menu_content .md-menu-content-container .md-list-item-content {\n   justify-content: flex-start;\n}\n</style>\n\n<style>\n.table_container .mdTable .myToolbar .filters ._fields .md-input {\n   padding: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-dialog\n      class=\"ticketMdDialogContainer\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title class=\"dialogTitle\">Select Ticket Process</md-dialog-title>\n      <md-dialog-content class=\"selectProcessClass\">\n\n         <!-- <div class=\"cont\"\n           v-if=\"loading === PAGE_STATES.success\"> -->\n         <!-- <md-tabs class=\"md-transparent\"\n                 md-alignment=\"fixed\"\n                 @md-changed=\"changeActiveTab\">\n\n          <md-tab :id=\"tabs.linked\"\n                  md-label=\"Linked Tickets\">\n            <div class=\"my_content\">\n              <tickets-vue class=\"tickets_class\"\n                           :data=\"tickets\"\n                           @reload=\"reloadData\"></tickets-vue>\n            </div>\n\n          </md-tab> -->\n\n         <!-- <md-tab :id=\"tabs.create\"\n                  md-label=\"Create new Ticket\"> -->\n         <div\n            class=\"my_content\"\n            v-if=\"loading === PAGE_STATES.success\"\n         >\n            <select-process\n               :data=\"data\"\n               :contextId=\"contextId\"\n               :processes=\"processes\"\n               :processId=\"processId\"\n               :incidents=\"incidents\"\n               :incidentId=\"incidentId\"\n               @selectContext=\"selectContext\"\n               @selectProcess=\"selectProcess\"\n               @selectIncident=\"selectIncident\"\n               @createCommonIncident=\"createCommonIncident\"\n               @createContext=\"createContext\"\n               @createProcess=\"createProcess\"\n            >\n            </select-process>\n         </div>\n\n         <!-- </md-tab>\n\n        </md-tabs> -->\n         <!-- </div> -->\n         <div\n            class=\"cont loading\"\n            v-else-if=\"loading === PAGE_STATES.loading\"\n         >\n            loading...\n         </div>\n\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n\n         <md-button\n            class=\"md-primary\"\n            :disabled=\"!(contextId && processId)\"\n            @click=\"closeDialog(true)\"\n         >Save</md-button>\n      </md-dialog-actions>\n\n   </md-dialog>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n// import linkerTemplateVue from \"./components/linkerTemplate.vue\";\n\nimport selectProcessVue from \"./components/selectProcess.vue\";\n\nimport EventBus from \"../../extensions/Event\";\n\nimport ticketsVue from \"../panels/components/tickets.vue\";\n\nexport default {\n   name: \"selectProcessDialog\",\n   props: [\"onFinised\"],\n   components: {\n      // \"link-template\": linkerTemplateVue,\n      \"select-process\": selectProcessVue,\n      // \"tickets-vue\": ticketsVue,\n   },\n   data() {\n      this.PAGE_STATES = {\n         success: 0,\n         loading: 1,\n      };\n      this.tabs = {\n         create: \"createNewTicketTab\",\n         linked: \"linkedTicketTab\",\n      };\n      return {\n         showDialog: true,\n         contextId: undefined,\n         processId: undefined,\n         incidentId: undefined,\n         selectedNode: undefined,\n         data: [],\n         processes: [],\n         incidents: [],\n         // tickets: [],\n         selectedTab: this.tabs.linked,\n         loading: this.PAGE_STATES.loading,\n      };\n   },\n   mounted() {\n      EventBus.$on(\"commonIncidentCreated\", async (id) => {\n         this.data = await this.getAllData();\n         this.updateIncidents();\n         this.incidentId = id;\n      });\n\n      EventBus.$on(\"ticketContextCreated\", async (context) => {\n         this.data = await this.getAllData();\n         this.contextId = context;\n      });\n\n      EventBus.$on(\"ticketProcessCreated\", async (process) => {\n         this.data = await this.getAllData();\n         this.updateProcesses();\n         this.processId = process;\n      });\n   },\n   methods: {\n      async opened(option) {\n         this.loading = this.PAGE_STATES.loading;\n         this.selectedNode = option.selectedNode;\n         const nodeId = option.selectedNode.getId().get();\n\n         this.data = await this.getAllData();\n         // this.tickets = await this.getNodeTickets(nodeId);\n\n         this.loading = this.PAGE_STATES.success;\n      },\n\n      async removed(res) {\n         if (res.closeResult && this.contextId && this.processId) {\n            spinalPanelManagerService.openPanel(\"createTicketDialog\", {\n               contextId: this.contextId,\n               processId: this.processId,\n               incidentId: this.incidentId,\n               selectedNode: this.selectedNode,\n            });\n         }\n\n         this.showDialog = false;\n      },\n\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised({ closeResult, process: this.process });\n         }\n      },\n\n      selectContext(id) {\n         this.contextId = id;\n      },\n\n      selectProcess(id) {\n         this.processId = id;\n      },\n\n      selectIncident(id) {\n         this.incidentId = id;\n      },\n\n      getAllData() {\n         const contexts = serviceTicketPersonalized.getContexts();\n         let promises = contexts.map(async (context) => {\n            const processes = await serviceTicketPersonalized.getAllProcess(\n               context.id\n            );\n            const promises = processes.map(async (argProcess) => {\n               const process = argProcess.get();\n               process[\n                  \"commonIncident\"\n               ] = await serviceTicketPersonalized.getCommonIncident(\n                  process.id\n               );\n               return process;\n            });\n\n            context[\"processes\"] = await Promise.all(promises);\n            return context;\n         });\n         return Promise.all(promises);\n      },\n\n      // getIcidents() {\n      //   this.incidentId = undefined;\n\n      //   if (this.contextId && this.processId) {\n      //     let context = this.data.find((el) => el.id === this.contextId);\n      //     if (context) {\n      //       let process = context.processes.find((el) => el.id == this.processId);\n      //       if (category) return process.commonIncident;\n      //     }\n      //   }\n      //   return [];\n      // },\n\n      updateProcesses() {\n         // this.categorySelected = undefined;\n         this.processes = [];\n         if (this.contextId) {\n            let val = this.data.find((el) => el.id === this.contextId);\n            if (val) this.processes = val.processes;\n         }\n      },\n\n      updateIncidents() {\n         this.incidents = [];\n         if (this.contextId && this.processId) {\n            let context = this.data.find((el) => el.id === this.contextId);\n            if (context) {\n               let process = context.processes.find(\n                  (el) => el.id == this.processId\n               );\n               if (process) this.incidents = process.commonIncident;\n            }\n         }\n      },\n\n      createCommonIncident() {\n         let params = this.processes.find((el) => el.id == this.processId);\n         // params[\"callback\"] = (id) => (this.incidentId = id);\n\n         spinalPanelManagerService.openPanel(\n            \"createCommonIncidentDialog\",\n            params\n         );\n      },\n\n      createContext() {\n         spinalPanelManagerService.openPanel(\"createTicketContextDialog\");\n      },\n\n      createProcess() {\n         const params = { contextId: this.contextId };\n         spinalPanelManagerService.openPanel(\"createProcessDialog\", params);\n      },\n\n      // getNodeTickets(nodeId) {\n      //   return serviceTicketPersonalized\n      //     .getTicketsFromNode(nodeId)\n      //     .then((tickets) => {\n      //       const promises = tickets.map(async (ticket) => {\n      //         ticket[\"step\"] = await this.getStep(ticket.stepId);\n      //         return ticket;\n      //       });\n\n      //       return Promise.all(promises);\n      //     });\n      // },\n\n      // getStep(id) {\n      //   const info = SpinalGraphService.getInfo(id);\n      //   if (info) return Promise.resolve(info.get());\n\n      //   return SpinalGraphService.getNodeAsync(id).then((result) => {\n      //     return result.get();\n      //   });\n      // },\n\n      async reloadData() {\n         const id = this.selectedNode.getId().get();\n         this.tickets = await this.getNodeTickets(id);\n      },\n\n      changeActiveTab(tabId) {\n         this.selectedTab = tabId;\n      },\n   },\n   watch: {\n      contextId() {\n         this.processId = undefined;\n         this.incidentId = undefined;\n\n         this.updateProcesses();\n         // this.updateProcesses();\n      },\n      processId() {\n         this.incidentId = undefined;\n         this.updateIncidents();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.ticketMdDialogContainer {\n   width: 900px;\n   height: 500px;\n}\n\n.ticketMdDialogContainer .dialogTitle {\n   text-align: center;\n}\n\n.ticketMdDialogContainer .selectProcessClass {\n   padding: 0 20px 10px 20px;\n}\n\n.ticketMdDialogContainer .selectProcessClass .my_content {\n   width: 100%;\n   height: 100%;\n}\n\n/* .ticketMdDialogContainer .selectProcessClass .cont {\n  width: 100%;\n  height: 100%;\n} */\n</style>\n\n\n<style>\n.ticketMdDialogContainer .md-dialog-container {\n   max-width: 100%;\n   max-height: 100%;\n}\n/*\n.ticketMdDialogContainer\n  .selectProcessClass\n  .md-tabs.md-transparent.md-alignment-fixed.md-theme-default {\n  width: 100%;\n  height: 100%;\n}\n\n.ticketMdDialogContainer\n  .selectProcessClass\n  .md-tabs.md-transparent.md-alignment-fixed.md-theme-default\n  .md-tabs-navigation.md-elevation-0 {\n  height: 50px;\n}\n\n.ticketMdDialogContainer\n  .selectProcessClass\n  .md-tabs.md-transparent.md-alignment-fixed.md-theme-default\n  .md-content.md-tabs-content.md-theme-default {\n  height: calc(100% - 50px) !important;\n}\n\n.ticketMdDialogContainer\n  .selectProcessClass\n  .md-tabs.md-transparent.md-alignment-fixed.md-theme-default\n  .md-content.md-tabs-content.md-theme-default\n  .md-tabs-container {\n  height: 100%;\n}\n\n.ticketMdDialogContainer\n  .selectProcessClass\n  .md-tabs.md-transparent.md-alignment-fixed.md-theme-default\n  .md-content.md-tabs-content.md-theme-default\n  .md-tabs-container\n  .md-tab {\n  height: 100%;\n}\n\n.ticketMdDialogContainer\n  .selectProcessClass\n  .md-tabs.md-transparent.md-alignment-fixed.md-theme-default\n  .md-content.md-tabs-content.md-theme-default\n  .md-tabs-container\n  .md-tab\n  .my_content {\n  max-width: 100%;\n  height: 100%;\n}*/\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"t_container md-srollbar\">\n    <md-list class=\"myList\">\n      <slot></slot>\n      <md-list-item v-for=\"item in data\"\n                    :key=\"item.id\"\n                    @click=\"select(item.id)\">\n        <div class=\"color\"\n             v-if=\"item.color\"\n             :style=\"{'background-color' : item.color}\"></div>\n        <span class=\"md-list-item-text\">{{item.name}}</span>\n        <md-icon>keyboard_arrow_right</md-icon>\n      </md-list-item>\n    </md-list>\n  </md-content>\n</template>\n\n<script>\nexport default {\n  name: \"contextsVue\",\n  props: {\n    data: {},\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    select(id) {\n      this.$emit(\"select\", id);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.t_container {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.t_container .myList .color {\n  width: 5px;\n  height: 50px;\n  margin-right: 10px;\n}\n</style>\n\n<style>\n.t_container .myList .md-ripple {\n  width: unset !important;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"ticket_container\">\n    <div class=\"breadcrumb\" v-if=\"contextSelected\">\n      <!-- <div class=\"breadcrumbItem\"\n           v-for=\"(breadcrumb,index) in breadcrumbs\"\n           :key=\"breadcrumb.id\"\n           @click=\"selectBreadcrumb(index,breadcrumb)\">\n        {{breadcrumb.name}}\n      </div> -->\n\n      <md-button @click=\"goBack\">\n        <md-icon>arrow_back</md-icon>\n        Back\n      </md-button>\n    </div>\n\n    <div class=\"data-content\">\n      <list-item\n        v-if=\"pageDisplayed === PAGES.contexts\"\n        :data=\"data\"\n        @select=\"selectContext\"\n      ></list-item>\n\n      <list-item\n        v-else-if=\"pageDisplayed === PAGES.processes\"\n        :data=\"processes\"\n        @select=\"selectProcess\"\n      ></list-item>\n\n      <list-item\n        v-else-if=\"pageDisplayed === PAGES.steps\"\n        :data=\"steps\"\n        @select=\"selectStep\"\n      >\n        <md-list-item @click=\"selectAllTickets\">\n          <div class=\"stepsColor\"></div>\n          <span class=\"md-list-item-text\">All</span>\n          <md-icon>keyboard_arrow_right</md-icon>\n        </md-list-item>\n      </list-item>\n\n      <tickets-vue\n        v-else-if=\"pageDisplayed === PAGES.tickets\"\n        :data=\"tickets\"\n        @reload=\"reloadData\"\n      ></tickets-vue>\n    </div>\n  </md-content>\n</template>\n\n<script>\nimport { utilities } from './service/utilities';\nimport ListItem from './components/listItem.vue';\n// import processesVue from \"./components/processes.vue\";\n// import stepsVue from \"./components/steps.vue\";\nimport ticketsVue from './components/tickets.vue';\n\nexport default {\n  name: 'ticketManagerPanel',\n  components: {\n    'list-item': ListItem,\n    // \"contexts-vue\": contextsVue,\n    // \"processes-vue\": processesVue,\n    // \"steps-vue\": stepsVue,\n    'tickets-vue': ticketsVue,\n  },\n  data() {\n    this.PAGES = {\n      contexts: 0,\n      processes: 1,\n      steps: 2,\n      tickets: 3,\n    };\n    return {\n      data: [],\n      pageDisplayed: this.PAGES.contexts,\n      contextSelected: undefined,\n      processSelected: undefined,\n      stepSelected: undefined,\n      processes: [],\n      steps: [],\n      tickets: [],\n    };\n  },\n  async mounted() {\n    await this.updateData();\n  },\n  methods: {\n    async opened(params) {\n      await this.updateData();\n      this.getContextId(params);\n      this.getProcessId(params);\n      this.getStepId(params);\n    },\n    selectContext(contextId) {\n      this.contextSelected = contextId;\n      this.pageDisplayed = this.PAGES.processes;\n    },\n    selectProcess(processId) {\n      this.processSelected = processId;\n      this.pageDisplayed = this.PAGES.steps;\n    },\n    selectStep(stepId) {\n      this.stepSelected = stepId;\n      this.pageDisplayed = this.PAGES.tickets;\n    },\n    selectAllTickets() {\n      this.pageDisplayed = this.PAGES.tickets;\n      this.formatAllTickets();\n    },\n    formatAllTickets() {\n      const res = [];\n      for (const step of this.steps) {\n        res.push(...this._formatTickets(step));\n      }\n      this.tickets = res;\n    },\n    async updateData() {\n      this.data = await utilities.getAllData();\n    },\n    updateProcesses() {\n      const find = this.data.find((el) => el.id === this.contextSelected);\n      if (find) {\n        this.processes = find.processes;\n      }\n    },\n    updateSteps() {\n      const find = this.processes.find((el) => el.id === this.processSelected);\n      if (find) {\n        this.steps = find.steps;\n      }\n    },\n    updateTickets() {\n      if (this.stepSelected) {\n        const find = this.steps.find((el) => el.id === this.stepSelected);\n        if (find) {\n          // this.breadcrumbs.push(find);\n          this.tickets = this._formatTickets(find);\n        }\n      } else {\n        this.formatAllTickets();\n      }\n    },\n    resetProcesses() {\n      this.contextSelected = undefined;\n      this.processes = [];\n    },\n    resetSteps() {\n      this.processSelected = undefined;\n      this.steps = [];\n    },\n    resetTickets() {\n      this.tickets = [];\n      this.stepSelected = undefined;\n    },\n    goBack() {\n      switch (this.pageDisplayed) {\n        case this.PAGES.processes:\n          this.pageDisplayed = this.PAGES.contexts;\n          this.resetProcesses();\n          break;\n        case this.PAGES.steps:\n          this.pageDisplayed = this.PAGES.processes;\n          this.resetSteps();\n          break;\n        case this.PAGES.tickets:\n          this.pageDisplayed = this.PAGES.steps;\n          this.resetTickets();\n          break;\n        default:\n          break;\n      }\n    },\n    _formatTickets(step) {\n      return step.tickets.map((el) => {\n        el['step'] = step;\n        el['contextId'] = this.contextSelected;\n        return el;\n      });\n    },\n    async reloadData() {\n      await this.updateData();\n    },\n    getContextId(params) {\n      this.selectContext(params.context.id);\n    },\n    getProcessId(params) {\n      if (params.context.id === params.selectedNode.id) return;\n      let nodeId =\n        typeof params.selectedNode.processId === 'undefined'\n          ? params.selectedNode.id\n          : params.selectedNode.processId;\n      this.selectProcess(nodeId);\n    },\n    getStepId(params) {\n      if (typeof params.selectedNode.processId !== 'undefined')\n        this.selectStep(params.selectedNode.id);\n    },\n  },\n  watch: {\n    contextSelected() {\n      if (this.contextSelected) this.updateProcesses();\n    },\n    processSelected() {\n      if (this.processSelected) this.updateSteps();\n    },\n    stepSelected() {\n      if (this.stepSelected) this.updateTickets();\n    },\n    data() {\n      this.updateProcesses();\n      this.updateSteps();\n      this.updateTickets();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.ticket_container {\n  width: 100%;\n  height: calc(100% - 15px);\n}\n\n.ticket_container .breadcrumb {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  align-items: center;\n}\n\n.ticket_container .data-content {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n\n.stepsColor {\n  width: 5px;\n  height: 50px;\n  margin-right: 10px;\n  background-color: white;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <!-- <div class=\"logs\">\n    <div class=\"date\">{{log.creationDate | formatDate}}</div>\n    <div class=\"username\">{{username.length > 0 ? username : \"unknown\"}}</div>\n    <div class=\"content\">{{texte}}</div>\n  </div> -->\n\n   <md-table-row>\n      <md-table-cell>{{log.creationDate | formatDate}}</md-table-cell>\n      <md-table-cell>{{username.length > 0 ? username : \"unknown\"}}\n      </md-table-cell>\n      <md-table-cell>{{texte}}</md-table-cell>\n   </md-table-row>\n</template>\n\n<script>\nimport { LOGS_EVENTS } from \"spinal-service-ticket/dist/Constants\";\nimport moment from \"moment\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nexport default {\n   name: \"logVue\",\n   props: [\"log\"],\n   data() {\n      return {\n         texte: \"\",\n         username: \"\",\n      };\n   },\n   mounted() {\n      this.formatEvent();\n   },\n   methods: {\n      async formatEvent() {\n         // this.username =\n         //    this.log.user && this.log.user.name ? this.log.user.name : \"\";\n\n         if (this.log.user && this.log.user.name) {\n            this.username = this.log.user.name;\n         } else if (this.log.user && this.log.user.username) {\n            this.username = this.log.user.username;\n         } else {\n            this.username = \"\";\n         }\n\n         if (this.log.event == LOGS_EVENTS.creation) {\n            this.texte = \"created\";\n         } else if (this.log.event == LOGS_EVENTS.archived) {\n            this.texte = \"archived\";\n         } else if (this.log.event == LOGS_EVENTS.unarchive) {\n            this.texte = \"unarchived\";\n         } else {\n            const promises = this.log.steps.map((el) =>\n               SpinalGraphService.getNodeAsync(el)\n            );\n\n            Promise.all(promises).then((result) => {\n               const step1 = result[0].name.get();\n               const step2 = result[1].name.get();\n               // const pre = this.log.event == LOGS_EVENTS.moveToNext ? true : false;\n               // // this.log.event == LOGS_EVENTS.moveToNext\n               // //   ? \"moving forward\"\n               // //   : \"move back\";\n\n               // this.texte = pre\n               //   ? `Passed from ${step1} to ${step2}`\n               //   : `Backward from ${step1} to ${step2}`;\n\n               this.texte = `moved from ${step1} to ${step2}`;\n            });\n         }\n      },\n   },\n   filters: {\n      formatDate(data) {\n         // return moment(parseInt(data)).format(\"MMM Do YYYY\");\n         return moment(data).fromNow();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.logs {\n   width: 100%;\n   height: 50px;\n   display: flex;\n   justify-content: space-between;\n}\n\n.logs .date {\n   width: 30%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   /* color: #448aff; */\n}\n\n.logs .username {\n   width: 30%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   /* color: #448aff; */\n}\n\n.logs .content {\n   width: 39%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   /* color: #448aff; */\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"logs_container md-scrollbar\">\n\n    <md-table class=\"logs_table md-scrollbar\">\n      <md-table-row>\n        <md-table-head>Date</md-table-head>\n        <md-table-head>User</md-table-head>\n        <md-table-head>Action</md-table-head>\n      </md-table-row>\n\n      <log-vue v-for=\"(log,index) of logs\"\n               :key=\"index\"\n               :log=\"log\"></log-vue>\n\n    </md-table>\n\n  </md-content>\n</template>\n\n<script>\nimport logVue from \"./log.vue\";\n\nexport default {\n  name: \"logsTemplate\",\n  props: {\n    logs: {},\n  },\n  components: {\n    \"log-vue\": logVue,\n  },\n  data() {\n    return {};\n  },\n  methods: {},\n};\n</script>\n\n<style scoped>\n.logs_container {\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  overflow: auto;\n}\n\n.logs_container .logs_table {\n  background-color: transparent;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <!-- <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"mdDialogTitle\">Detail Ticket</md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContent\"\n                       v-if=\"ticket\"> -->\n  <div class=\"mdDialogContainer\">\n    <div class=\"mdDialogContent\"\n         v-if=\"ticket && !isLoading\">\n      <div class=\"ticketDetail\">\n        <md-content class=\"details md-scrollbar\">\n          <div class=\"detail\">\n            <div class=\"label\">Name</div>\n            <div class=\"value\">{{ticket.name}}</div>\n          </div>\n\n          <div class=\"detail\">\n            <div class=\"label\">Actual Step</div>\n            <div class=\"value\">{{formatStepId}}</div>\n          </div>\n\n          <div class=\"detail\">\n            <div class=\"label\">Priority</div>\n            <div class=\"value\">{{ticket.priority | formatPriority}}</div>\n          </div>\n\n          <div class=\"detail\"\n               v-if=\"ticket.user\">\n            <div class=\"label\">Created By</div>\n            <div class=\"value\">{{ticket.user.name}}</div>\n          </div>\n\n          <div class=\"detail\">\n            <div class=\"label\">Date creation</div>\n            <div class=\"value\">{{ticket.creationDate | formatDate}}</div>\n          </div>\n        </md-content>\n\n        <div class=\"ticketActions\">\n          <md-list class=\"actionList\">\n            <md-list-item class=\"actions\">\n              <div class=\"maquette_icons\">\n\n                <md-button class=\"md-icon-button md-primary\"\n                           @click=\"selectOnMaquette\"\n                           title=\"Select on 3D Model\">\n                  <md-icon>find_in_page</md-icon>\n                </md-button>\n\n                <md-button class=\"md-icon-button md-primary\"\n                           @click=\"zoomOnMaquette\"\n                           title=\"Zoom on 3D Model\">\n                  <md-icon>zoom_in</md-icon>\n                </md-button>\n\n                <md-button class=\"md-icon-button md-primary\"\n                           @click=\"isolateOnMaquette\"\n                           title=\"Isolate on 3D Model\">\n                  <md-icon>settings_overscan</md-icon>\n                </md-button>\n\n              </div>\n            </md-list-item>\n\n            <md-list-item class=\"actions\"\n                          @click=\"passToNext\">\n              <md-icon>skip_next</md-icon>\n              <span class=\"md-list-item-text\">Pass to next step</span>\n            </md-list-item>\n\n            <md-list-item class=\"actions\"\n                          @click=\"backToPrevious\">\n              <md-icon>skip_previous</md-icon>\n              <span class=\"md-list-item-text\">Back to previous step</span>\n            </md-list-item>\n\n          </md-list>\n        </div>\n      </div>\n\n      <div class=\"content\">\n        <div class=\"ticketsNotes\">\n          <div class=\"title\">Comments</div>\n          <md-content class=\"events md-scrollbar\">\n\n            <message-component :nodeInfo=\"nodeInfo\"></message-component>\n          </md-content>\n        </div>\n        <div class=\"ticketsLogs\">\n          <div class=\"title\">Events</div>\n          <md-content class=\"events\">\n            <logs-template :logs=\"logs\"></logs-template>\n          </md-content>\n        </div>\n      </div>\n    </div>\n\n    <div v-else-if=\"isLoading\"\n         class=\"loading\">\n      <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n    </div>\n  </div>\n  <!-- </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      \n    </md-dialog-actions> -->\n\n  <!-- </md-dialog> -->\n</template>\n\n<script>\nimport { TICKET_PRIORITIES } from \"spinal-service-ticket/dist/Constants\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\nimport { spinalIO } from \"../../extensions/spinalIO\";\nimport messageComponentVue from \"spinal-env-viewer-plugin-documentation/view/notes/components/messageComponent.vue\";\n\n// import attachmentVue from \"./components/attachment.vue\";\nimport logsTemplateVue from \"./components/logsTemplate.vue\";\n// import messageVue from \"spinal-env-viewer-plugin-documentation/view/notes/components/message.vue\";\nimport moment from \"moment\";\n\nimport { TICKET_EVENTS } from \"../../extensions/ticketsEvents\";\nimport EventBUS from \"../../extensions/Event\";\n\nimport { IsolateElementOnMaquette } from \"../../buttons/standard_buttons/isolate\";\nimport { SelectElementOnMaquette } from \"../../buttons/standard_buttons/selectElement\";\nimport { ZoomElementOnMaquette } from \"../../buttons/standard_buttons/zoom\";\n\nexport default {\n  name: \"ticketDetailDialog\",\n  // props: [\"onFinised\"],\n  components: {\n    \"logs-template\": logsTemplateVue,\n    \"message-component\": messageComponentVue,\n    // \"attachment-component\": attachmentVue,\n  },\n  data() {\n    this.params = undefined;\n\n    return {\n      showDialog: true,\n      nodeInfo: undefined,\n      ticket: {},\n      step: {},\n      logs: [],\n      isLoading: false,\n      messages: [],\n      formatStepId: \"\",\n      note: {\n        messageUser: \"\",\n        pj: [],\n      },\n    };\n  },\n\n  mounted() {\n    EventBUS.$on(TICKET_EVENTS.changeStep, async (data) => {\n      if (data.ticket.id === this.ticket.id && data.step) {\n        this.step = data.step;\n        this.logs = await this.getLogs(this.ticket.id);\n      }\n    });\n  },\n\n  methods: {\n    async opened(option) {\n      this.isLoading = true;\n\n      this.ticket = option.selectedNode;\n      this.nodeInfo = {\n        selectedNode: SpinalGraphService.getRealNode(option.selectedNode.id),\n      };\n\n      await Promise.all([\n        this.getStep(option.selectedNode.stepId),\n        this.getLogs(option.selectedNode.id),\n      ]).then((values) => {\n        const contextId = this.ticket.contextId\n          ? this.ticket.contextId\n          : this.getItemContext(this.ticket.id).id;\n\n        this.step = values[0];\n        this.logs = values[1];\n\n        this.params = {\n          selectedNode: SpinalGraphService.getInfo(this.ticket.id),\n          context: SpinalGraphService.getInfo(contextId),\n        };\n\n        this.isLoading = false;\n\n        // this.messages = values[2];\n      });\n    },\n\n    async removed(res) {\n      // if (res.closeResult) {\n      // }\n      // this.showDialog = false;\n    },\n\n    closed() {},\n\n    getStep(id) {\n      const info = SpinalGraphService.getInfo(id);\n      if (info) return Promise.resolve(info.get());\n\n      return SpinalGraphService.getNodeAsync(id).then((result) => {\n        return result.get();\n      });\n    },\n\n    getLogs(id) {\n      return serviceTicketPersonalized.getLogs(id);\n    },\n\n    async passToNext() {\n      const user = await spinalIO.getUserConnected();\n\n      const contextId = this.ticket.contextId\n        ? this.ticket.contextId\n        : this.getItemContext(this.ticket.id).id;\n\n      const processId = this.step.processId;\n      const ticketId = this.ticket.id;\n\n      serviceTicketPersonalized\n        .moveTicketToNextStep(contextId, processId, ticketId, user)\n        .then(async (nextStep) => {\n          this.ticket = SpinalGraphService.getInfo(ticketId).get();\n          // this.step = nextStep;\n          EventBUS.$emit(TICKET_EVENTS.changeStep, {\n            ticket: this.ticket,\n            step: nextStep,\n          });\n        });\n    },\n\n    async backToPrevious() {\n      const user = await spinalIO.getUserConnected();\n\n      const contextId = this.ticket.contextId\n        ? this.ticket.contextId\n        : this.getItemContext(this.ticket.id).id;\n\n      const processId = this.step.processId;\n      const ticketId = this.ticket.id;\n\n      serviceTicketPersonalized\n        .moveTicketToPreviousStep(contextId, processId, ticketId, user)\n        .then((previousStep) => {\n          this.ticket = SpinalGraphService.getInfo(ticketId).get();\n          // this.step = previousStep;\n          EventBUS.$emit(TICKET_EVENTS.changeStep, {\n            ticket: this.ticket,\n            step: previousStep,\n          });\n        });\n    },\n\n    getItemContext(id) {\n      const realNode = SpinalGraphService.getRealNode(id);\n      const contextId = realNode.contextIds._attribute_names[0];\n      return SpinalGraphService.getInfo(contextId).get();\n    },\n\n    selectOnMaquette() {\n      const button = new SelectElementOnMaquette();\n      button.action(this.params);\n    },\n\n    zoomOnMaquette() {\n      const button = new ZoomElementOnMaquette();\n      button.action(this.params);\n    },\n\n    isolateOnMaquette() {\n      const button = new IsolateElementOnMaquette();\n      button.action(this.params);\n    },\n  },\n  watch: {\n    step() {\n      this.formatStepId = this.step && this.step.name ? this.step.name : \"\";\n    },\n  },\n  computed: {\n    // formatStepId(stepId) {\n    //   return this.step && this.step.name ? this.step.name : \"\";\n    // },\n  },\n  filters: {\n    formatDate(date) {\n      return moment(parseInt(date)).format(\"LL\");\n    },\n\n    formatPriority(priority) {\n      for (const key of Object.keys(TICKET_PRIORITIES)) {\n        if (TICKET_PRIORITIES[key] == priority) return key;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 100%;\n  height: calc(100% - 15px);\n}\n\n.mdDialogContainer .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.mdDialogContainer .mdDialogContent {\n  width: calc(100% - 48px);\n  height: 100%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.mdDialogContainer .mdDialogContent .ticketDetail {\n  width: 100%;\n  height: calc(40% - 10px);\n  display: flex;\n  justify-content: space-between;\n}\n\n.mdDialogContainer .mdDialogContent .ticketDetail .ticketActions {\n  width: 49%;\n  height: 100%;\n  background: transparent !important;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.mdDialogContainer .mdDialogContent .ticketDetail .ticketActions .actionList {\n  width: 70%;\n  display: flex;\n  justify-content: center;\n  background: transparent !important;\n}\n\n.mdDialogContainer\n  .mdDialogContent\n  .ticketDetail\n  .ticketActions\n  .actionList\n  .actions {\n  border: 1px solid grey;\n  margin-bottom: 10px;\n}\n\n.mdDialogContainer\n  .mdDialogContent\n  .ticketDetail\n  .ticketActions\n  .actionList\n  .maquette_icons {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n}\n\n.mdDialogContainer .mdDialogContent .ticketDetail .details {\n  width: 49%;\n  height: 100%;\n  padding-right: 10px;\n  overflow: auto;\n  background: transparent !important;\n}\n\n.mdDialogContainer .mdDialogContent .ticketDetail .details .detail {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.mdDialogContainer .mdDialogContent .ticketDetail .details .detail .value {\n  color: #448aff;\n  text-transform: capitalize;\n}\n\n.mdDialogContainer .mdDialogContent .content {\n  width: 100%;\n  height: 60%;\n  display: flex;\n  justify-content: space-between;\n}\n\n.mdDialogContainer .mdDialogContent .content .ticketsNotes,\n.mdDialogContainer .mdDialogContent .content .ticketsLogs {\n  width: 49%;\n  height: calc(100% - 5px);\n  border: 1px solid grey;\n}\n\n.mdDialogContainer .mdDialogContent .content .ticketsNotes .title,\n.mdDialogContainer .mdDialogContent .content .ticketsLogs .title {\n  width: 100%;\n  height: 50px;\n  border-bottom: 1px solid grey;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.mdDialogContainer .mdDialogContent .content .ticketsNotes .events,\n.mdDialogContainer .mdDialogContent .content .ticketsLogs .events {\n  width: 100%;\n  height: calc(100% - 60px);\n  padding-bottom: 5px;\n  overflow: auto;\n  background: transparent !important;\n}\n\n.mdDialogContainer .mdDialogContent .content .ticketsNotes .events {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n</style>\n\n<style>\n.mdDialogContainer\n  .mdDialogContent\n  .ticketDetail\n  .ticketActions\n  .actionList\n  .maquette_icons\n  .md-button\n  .md-ripple {\n  padding: 0px !important;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"my_content\"\n       v-if=\"!isLoading\">\n    <md-button class=\"md-fab md-mini md-primary md-fab-bottom-right\"\n               title=\"create ticket\"\n               @click=\"createTicket\">\n      <md-icon>add</md-icon>\n    </md-button>\n\n    <tickets-vue class=\"tickets_class\"\n                 :data=\"tickets\"\n                 @reload=\"reloadData\"></tickets-vue>\n  </div>\n\n  <div class=\"loading\"\n       v-else>\n    <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n  </div>\n</template>\n\n<script>\nimport { serviceTicketPersonalized } from \"spinal-service-ticket\";\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport EventBus from \"../../extensions/Event\";\nimport ticketsVue from \"./components/tickets.vue\";\n\nexport default {\n  name: \"manageTicketPanel\",\n  components: {\n    \"tickets-vue\": ticketsVue,\n  },\n  data() {\n    return {\n      tickets: [],\n      selectedNode: undefined,\n      isLoading: false,\n    };\n  },\n  methods: {\n    async opened(option) {\n      // console.log(\"option\", option);\n      this.isLoading = true;\n      this.selectedNode = option.selectedNode;\n      SpinalGraphService._addNode(option.selectedNode);\n      const nodeId = option.selectedNode.getId().get();\n\n      this.tickets = await this.getNodeTickets(nodeId);\n      this.isLoading = false;\n    },\n\n    closed() {},\n\n    getNodeTickets(nodeId) {\n      return serviceTicketPersonalized\n        .getTicketsFromNode(nodeId)\n        .then((tickets) => {\n          // console.log(tickets);\n          const promises = tickets.map(async (ticket) => {\n            ticket.step = await this.getStep(ticket);\n            return ticket;\n          });\n\n          return Promise.all(promises).then((result) => {\n            return result.filter((el) => el.step);\n          });\n        });\n    },\n\n    async getStep(ticketInfo) {\n      const stepId = ticketInfo.stepId;\n\n      const info = SpinalGraphService.getInfo(stepId);\n      if (info) return info.get();\n\n      const parents = await SpinalGraphService.getParents(ticketInfo.id, []);\n      // console.log(parents);\n\n      const found = parents.find((el) => el.id.get() === stepId);\n      if (found) return found.get();\n\n      // //  return SpinalGraphService.getNodeAsync(id).then((result) => {\n      // //     return result.get();\n      // //  });\n    },\n\n    async reloadData() {\n      const id = this.selectedNode.getId().get();\n      this.tickets = await this.getNodeTickets(id);\n    },\n\n    createTicket() {\n      spinalPanelManagerService.openPanel(\"selectProcessDialog\", {\n        selectedNode: this.selectedNode,\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.my_content {\n  width: 100%;\n  height: calc(100% - 15px);\n}\n\n.loading {\n  width: 100%;\n  height: calc(100% - 15px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-ticket.047a67d1.css.map"}