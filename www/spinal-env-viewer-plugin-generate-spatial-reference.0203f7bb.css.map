{"mappings":"A;;;;A;;;;;A;;;;A;;;;A;;;;;A;;;;;A;;;;;A;;;;;A;;;;;;;;;;;A;;;;A;;;;A;;;;A;;;;;;A;;;;A;;;;;A;;;;;;A;;;;;A;;;;A;;;;;A;;;;;A;;;;;;;;A;;;;A;;;;;A;;;;A;;;;;;A;;;;;A;;;;;;;A;;;;A;;;;A;;;;;A;;;;;;;A;;;;A;;;;;A;;;;;;A;;;;;A;;;;;A;;;;;A;;;;;A;;;;A;;;;A;;;;;;A;;;;;A;;;;;;A;;;;A;;;;A;;;;;;;A;;;;A;;;;A;;;;;A;;;;A;;;;;A;;;;;;;;;A;;;;;;;;;;A;;;;;;A;;;;;A;;;;A;;;;;;A;;;;;;A;;;;;A;;;;A;;;;A;;;;;;;A;;;;;;A;;;;;A;;;;;;A;;;;A;;;;A;;;;;;;A;;;;;;;;A;;;;;;;A;;;;A;;;;A;;;;;A;;;;;A;;;;A;;;;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;A;;;;;A;;;;;;;A;;;;;;;A;;;;;A;;;;A;;;;;A;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;A;;;;A;;;;;;;A;;;;;A;;;;;A;;;;A;;;;;;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/BasicSelectModel.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/showTestList.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/AdvancedSelect/DialogAddCat.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/AdvancedSelect/AdvencedSelectModel.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/BtnGroupViewInViewer.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/SpinalRoomNew.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/SpinalTableRoomUpdateDetails.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/SpinalTableRoomUpdate.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/SpatialDiffSettings.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/SelectModelModal.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/groupConfig/GroupConfig.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/SelectedGroup/AddAGroup.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/SelectedGroup/BimGroupsItemContent.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/SelectedGroup/BimGroupsItemEditOffset.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/SelectedGroup/BimGroupsItemEdit.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/SelectedGroup/SelectedGroup.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/ProjectObjectInContext.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/AssingView/AssignDataViewRoomName.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/AssingView/AssingDataViewList.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/AssingView/AssingDataView.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/ProjectBimObj/AssingView/AssingView.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/SpinalDiffFloorViewer.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/diffViewer/SpinalDiffViewer.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/CmdRunViewer/CmdRunViewerGeo.vue","node_modules/spinal-env-viewer-plugin-generate-spatial-reference/src/views/CmdRunViewer/CmdRunViewerProjection.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <v-card>\n    <v-card-text>\n      <md-field>\n        <label for=\"modelselect\"\n          >Selection of the model that contains the architecture</label\n        >\n        <md-select\n          id=\"modelselect\"\n          v-model=\"selectedModel\"\n          name=\"modelselect\"\n          md-dense\n        >\n          <md-option v-for=\"bimfile in bimfiles\" :value=\"bimfile\">\n            {{ bimfile }}\n          </md-option>\n        </md-select>\n      </md-field>\n      <md-field>\n        <label for=\"building select\">select the building</label>\n        <md-select\n          id=\"building select\"\n          v-model=\"buildingSelectedValue\"\n          name=\"building select\"\n          md-dense\n          class=\"building-select\"\n        >\n          <md-option\n            v-for=\"building in buildings\"\n            :key=\"building.value\"\n            :value=\"building.value\"\n          >\n            {{ building.label }}\n          </md-option>\n        </md-select>\n        <md-button\n          class=\"md-icon-button\"\n          md-dense\n          @click=\"\n            newBuildingValue = '';\n            openDialogNewBuilding = true;\n          \"\n        >\n          <md-icon>add</md-icon>\n        </md-button>\n      </md-field>\n    </v-card-text>\n    <v-card-actions>\n      <v-spacer />\n      <v-btn\n        color=\"green darken-1\"\n        flat\n        :disabled=\"btnDisabledCompu\"\n        @click=\"onContinue\"\n      >\n        {{ btnLabel }}\n      </v-btn>\n    </v-card-actions>\n    <md-dialog-prompt\n      :md-active.sync=\"openDialogNewBuilding\"\n      v-model=\"newBuildingValue\"\n      :md-title=\"title\"\n      md-input-maxlength=\"30\"\n      md-input-placeholder=\"Type the building name...\"\n      md-confirm-text=\"Done\"\n      @md-confirm=\"onAcceptNewBuilding(newBuildingValue)\"\n    />\n  </v-card>\n</template>\n\n<script>\nimport {\n  getContextSpatial,\n  getGraph,\n  waitGetServerId,\n} from 'spinal-spatial-referential';\nimport geoService from 'spinal-env-viewer-context-geographic-service';\n\nexport default {\n  name: 'Basicselectmodel',\n  props: {\n    bimfiles: { require: true, type: Array, default: () => [] },\n    btnLabel: { type: String, default: () => 'Continue' },\n    btnDisabled: { type: Boolean, default: () => false },\n  },\n  data() {\n    return {\n      addLevel: false,\n      selectedModel: null,\n      newBuildingValue: '',\n      manualAssingment: new Map(),\n      openDialogNewBuilding: false,\n      buildings: [],\n      buildingSelectedValue: null,\n    };\n  },\n  computed: {\n    btnDisabledCompu() {\n      return (\n        this.btnDisabled ||\n        this.selectedModel === null ||\n        !this.buildingSelectedValue\n      );\n    },\n  },\n  mounted() {\n    return this.getBuildings();\n  },\n  methods: {\n    onModelSelected(value) {\n      this.selectedModel = value;\n    },\n    async getBuildings() {\n      const graph = getGraph();\n      const contextGeo = await getContextSpatial(graph);\n      const buildings = await contextGeo.getChildrenInContext(contextGeo);\n      this.buildings = buildings.map((itm) => {\n        return {\n          label: itm.info.name.get(),\n          value: itm._server_id,\n        };\n      });\n      if (this.buildings.length === 1)\n        this.buildingSelectedValue = this.buildings[0].value;\n    },\n    async onAcceptNewBuilding(buildingName) {\n      const graph = getGraph();\n      const contextGeo = await getContextSpatial(graph);\n      const node = await geoService.addBuilding(\n        contextGeo.info.id.get(),\n        contextGeo.info.id.get(),\n        buildingName\n      );\n      await waitGetServerId(node);\n      return this.getBuildings();\n    },\n    onContinue() {\n      this.$emit('continue', {\n        buildingServId: this.buildingSelectedValue,\n        selectedModel: this.selectedModel,\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.building-select {\n  align-items: flex-end;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-card dense>\n    <v-toolbar dark dense>\n      <v-btn icon>\n        <v-icon @click=\"backBtn\"> arrow_back </v-icon>\n      </v-btn>\n\n      <v-toolbar-title v-if=\"itemSelected !== null && openSearch === false\">\n        {{ itemSelected.name }}\n      </v-toolbar-title>\n      <v-spacer />\n      <v-toolbar-title v-if=\"openSearch === true\">\n        <v-text-field\n          v-model=\"searchQuery\"\n          style=\"height: 42px\"\n          placeholder=\"Search\"\n          solo\n          label=\"Search\"\n        />\n      </v-toolbar-title>\n      <v-btn icon @click=\"openSearch = !openSearch\">\n        <v-icon> search </v-icon>\n      </v-btn>\n    </v-toolbar>\n    <v-card-text v-if=\"itemSelected === null\">\n      <v-list two-line subheader dense class=\"showTestListContainer\" dark>\n        <v-list-tile\n          v-for=\"item in itemsCompu\"\n          :key=\"item.dbId\"\n          @click=\"onClick(item)\"\n          @mouseenter=\"onMouseEnter(item)\"\n        >\n          <v-list-tile-content>\n            <v-list-tile-title v-text=\"item.name\" />\n            <v-list-tile-sub-title v-text=\"item.dbId\" />\n          </v-list-tile-content>\n          <v-list-tile-action class=\"action-btn\">\n            <BtnTooltip\n              icon=\"arrow_forward_ios\"\n              tooltip=\"See properties\"\n              @clicked=\"onClickDetails(item)\"\n            />\n          </v-list-tile-action>\n        </v-list-tile>\n      </v-list>\n      <div style=\"text-align: center\">\n        <v-pagination v-model=\"page\" :length=\"pageLen\" />\n      </div>\n    </v-card-text>\n    <v-card-text v-else>\n      <v-data-table\n        :headers=\"header\"\n        :items=\"itemSelected.properties\"\n        :rows-per-page-items=\"rowsPerPage\"\n        :pagination.sync=\"pagination\"\n        class=\"elevation-1\"\n      >\n        <template v-slot:items=\"props\">\n          <td>{{ props.item.displayName }}</td>\n          <td>{{ props.item.displayValue }}</td>\n          <td>{{ props.item.displayCategory }}</td>\n          <td>{{ props.item.attributeName }}</td>\n          <td>{{ props.item.type }}</td>\n          <td>{{ props.item.units }}</td>\n          <td>{{ props.item.hidden }}</td>\n          <td>{{ props.item.precision }}</td>\n        </template>\n      </v-data-table>\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nimport {\n  getParamFromDbIds,\n  selectDbId,\n  fitToViewtDbIds,\n} from '../services/dbIdUtils';\nimport { getModelByName } from '../services/getObjFromRvtModel';\nimport BtnTooltip from '../viewUtils/BtnTooltip.vue';\n\nconst NBR_ITEMS = 15;\nexport default {\n  name: 'ShowTestList',\n  components: { BtnTooltip },\n  props: {\n    items: { require: true, type: Array, default: () => [] },\n    modelName: { require: true, type: String, default: () => '' },\n  },\n  data() {\n    return {\n      itemsParam: [],\n      itemSelected: null,\n      openSearch: false,\n      searchQuery: '',\n      privPage: 1,\n      header: [\n        { text: 'displayName', value: 'displayName' },\n        { text: 'displayValue', value: 'displayValue' },\n        { text: 'displayCategory', value: 'displayCategory' },\n        { text: 'attributeName', value: 'attributeName' },\n        { text: 'type', value: 'type' },\n        { text: 'units', value: 'units' },\n        { text: 'hidden', value: 'hidden' },\n        { text: 'precision', value: 'precision' },\n      ],\n      rowsPerPage: [\n        10,\n        25,\n        50,\n        100,\n        { text: '$vuetify.dataIterator.rowsPerPageAll', value: -1 },\n      ],\n      pagination: {\n        descending: true,\n        page: 1,\n        rowsPerPage: 25, // -1 for All,\n        sortBy: '',\n        totalItems: 0,\n      },\n    };\n  },\n  computed: {\n    selectedProps() {\n      const res = this.itemSelected.properties.map((e) => {\n        return {\n          displayName: String(e.displayName),\n          displayValue: String(e.displayValue),\n          displayCategory: String(e.displayCategory),\n          attributeName: String(e.attributeName),\n          type: String(e.type),\n          units: String(e.units),\n          hidden: String(e.hidden),\n          precision: String(e.precision),\n        };\n      });\n      return res;\n    },\n    tmpItemsCompu() {\n      if (this.openSearch === true && this.searchQuery !== '') {\n        let query = '';\n        try {\n          query = RegExp.escape(this.searchQuery);\n        } catch (e) {\n          query = this.searchQuery;\n        }\n        const reg = new RegExp(query, 'i');\n        return this.itemsParam.filter((item) => {\n          return reg.test(item.name) || reg.test(item.dbId);\n        });\n      }\n      return this.itemsParam;\n    },\n    itemsCompu() {\n      const idx = (this.page - 1) * NBR_ITEMS;\n      return this.tmpItemsCompu.slice(idx, idx + NBR_ITEMS);\n    },\n    pageLen() {\n      return Math.ceil(this.tmpItemsCompu.length / NBR_ITEMS);\n    },\n    page: {\n      get() {\n        if (this.pageLen < this.privPage) return this.pageLen;\n        return this.privPage;\n      },\n      set(value) {\n        this.privPage = value;\n      },\n    },\n  },\n  async mounted() {\n    if (this.items.length === 0) return;\n    this.model = getModelByName(this.modelName);\n    this.itemsParam = await getParamFromDbIds(this.model, this.items);\n  },\n  methods: {\n    backBtn() {\n      if (this.itemSelected) return (this.itemSelected = null);\n      this.$emit('close');\n    },\n    onClick(value) {\n      fitToViewtDbIds([value.dbId], this.model);\n    },\n    onMouseEnter(value) {\n      selectDbId([value.dbId], this.model);\n    },\n    onClickDetails(value) {\n      this.itemSelected = value;\n    },\n    getProps() {\n      if (this.itemSelected.properties.length === 0) return [];\n      const res = [];\n      for (const key in this.itemSelected.properties[0]) {\n        if (this.itemSelected.properties[0].hasOwnProperty(key)) {\n          res.push(key);\n        }\n      }\n      return res;\n    },\n  },\n};\n</script>\n\n<style>\n.showTestListContainer,\n.showTestListContainer * {\n  text-decoration: none !important;\n  color: white;\n}\n</style>\n<style scoped>\n.action-btn {\n  flex-wrap: wrap;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-dialog v-model=\"openDialogCompu\" persistent lazy>\n    <v-card class=\"spinal-model-gen-context-dialog-edit-cat\">\n      <!-- <v-card-title>\n        <span class=\"headline\"></span>\n      </v-card-title> -->\n\n      <v-card-text>\n        <v-container grid-list-md>\n          <v-layout wrap>\n            <v-flex xs12 sm6>\n              <h4>Attribut name</h4>\n              <md-field>\n                <md-select\n                  id=\"selectKeyFlagType\"\n                  v-model=\"selectKeyFlagTypeComp\"\n                  name=\"selectKeyFlagType\"\n                  md-dense\n                >\n                  <md-option v-for=\"item in items\" :value=\"item.name\">\n                    {{ item.name }}\n                  </md-option>\n                </md-select>\n              </md-field>\n\n              <!-- <v-select v-model=\"selectKeyFlagType\"\n                        :items=\"items\"\n                        return-object\n                        item-text=\"name\"\n                        item-value=\"value\" /> -->\n              <div>\n                <v-text-field v-model=\"resultKey\" label=\"Nom\" />\n                <v-text-field\n                  v-if=\"haveKeyFlag\"\n                  v-model=\"resultKeyFlag\"\n                  class=\"input-regex-fleg\"\n                  label=\"indicateur(s)\"\n                />\n              </div>\n            </v-flex>\n            <v-flex xs12 sm6>\n              <h4>Attribut value</h4>\n\n              <md-field>\n                <md-select\n                  id=\"selectValFlagType\"\n                  v-model=\"selectValFlagTypeComp\"\n                  name=\"selectValFlagType\"\n                  md-dense\n                >\n                  <md-option v-for=\"item in items\" :value=\"item.name\">\n                    {{ item.name }}\n                  </md-option>\n                </md-select>\n              </md-field>\n\n              <!-- <v-select v-model=\"selectValFlagType\"\n                        :items=\"items\"\n                        return-object\n                        item-text=\"name\"\n                        item-value=\"value\" /> -->\n\n              <div>\n                <v-text-field v-model=\"resultValue\" label=\"Valeur\" />\n                <v-text-field\n                  v-if=\"haveValFlag\"\n                  v-model=\"resultValFlag\"\n                  class=\"input-regex-fleg\"\n                  label=\"indicateur(s)\"\n                />\n              </div>\n            </v-flex>\n          </v-layout>\n        </v-container>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer />\n        <v-btn color=\"blue darken-1\" flat @click=\"close\"> Cancel </v-btn>\n        <v-btn color=\"blue darken-1\" flat :disabled=\"btnValid\" @click=\"save\">\n          Save\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nexport default {\n  name: 'DialogAddCat',\n  props: [\n    'keyData',\n    'keyType',\n    'keyFlag',\n    'val',\n    'valType',\n    'valFlag',\n    'openDialog',\n  ],\n  data() {\n    return {\n      items: [\n        { name: 'Equal', value: 'e' },\n        { name: 'Contains', value: 'c' },\n        { name: 'Advanced (Regular expression)', value: 'r' },\n      ],\n      result_key: null,\n      result_keyFlag: null,\n      result_keyType: null,\n      result_val: null,\n      result_valFlag: null,\n      result_valType: null,\n    };\n  },\n  computed: {\n    selectValFlagTypeComp: {\n      get() {\n        return this.selectValFlagType.name;\n      },\n      set(value) {\n        for (const item of this.items) {\n          if (item.name === value) {\n            this.selectValFlagType = item;\n          }\n        }\n      },\n    },\n    selectKeyFlagTypeComp: {\n      get() {\n        return this.selectKeyFlagType.name;\n      },\n      set(value) {\n        for (const item of this.items) {\n          if (item.name === value) {\n            this.selectKeyFlagType = item;\n          }\n        }\n      },\n    },\n    haveValFlag() {\n      return this.selectValFlagType.value === 'r';\n    },\n    haveKeyFlag() {\n      return this.selectKeyFlagType.value === 'r';\n    },\n    openDialogCompu: {\n      get() {\n        return this.openDialog;\n      },\n      set(value) {\n        if (value) {\n          this.$emit('close');\n        }\n      },\n    },\n    btnValid() {\n      return this.resultValue === '' && this.selectKeyFlagType === '';\n    },\n    selectKeyFlagType: {\n      get() {\n        if (this.result_keyType) {\n          for (const type of this.items) {\n            if (this.result_keyType === type.value) return type;\n          }\n        }\n        if (this.keyType) {\n          for (const type of this.items) {\n            if (this.keyType === type.value) return type;\n          }\n        }\n        return { name: 'Egale', value: 'e' };\n      },\n      set(value) {\n        this.result_keyType = value.value;\n      },\n    },\n    resultKey: {\n      get() {\n        if (this.result_key) return this.result_key;\n        if (this.keyData) return this.keyData;\n        return '';\n      },\n      set(value) {\n        this.result_key = value;\n      },\n    },\n    resultKeyFlag: {\n      get() {\n        if (this.result_keyFlag) return this.result_keyFlag;\n        if (this.keyFlag) return this.keyFlag;\n        return '';\n      },\n      set(value) {\n        this.result_keyFlag = value;\n      },\n    },\n    selectValFlagType: {\n      get() {\n        if (this.result_valType) {\n          for (const type of this.items) {\n            if (this.result_valType === type.value) return type;\n          }\n        }\n        if (this.valType) {\n          for (const type of this.items) {\n            if (this.valType === type.value) return type;\n          }\n        }\n        return { name: 'Egale', value: 'e' };\n      },\n      set(value) {\n        this.result_valType = value.value;\n      },\n    },\n    resultValue: {\n      get() {\n        if (this.result_key) return this.result_val;\n        if (this.val) return this.val;\n        return '';\n      },\n      set(value) {\n        this.result_val = value;\n      },\n    },\n    resultValFlag: {\n      get() {\n        if (this.result_valFlag) return this.result_valFlag;\n        if (this.valFlag) return this.valFlag;\n        return '';\n      },\n      set(value) {\n        this.result_valFlag = value;\n      },\n    },\n  },\n  watch: {\n    openDialog(value) {\n      if (value) {\n        this.result_key = null;\n        this.result_keyFlag = null;\n        this.result_keyType = null;\n        this.result_val = null;\n        this.result_valFlag = null;\n        this.result_valType = null;\n      }\n    },\n  },\n  methods: {\n    close() {\n      this.$emit('cancel');\n    },\n    save() {\n      const res = {\n        key: this.resultKey,\n        keyFlag: this.resultKeyFlag.trim(),\n        keyType: this.selectKeyFlagType.value,\n        val: this.resultValue.trim(),\n        valFlag: this.resultValFlag,\n        valType: this.selectValFlagType.value,\n      };\n      this.$emit('save', res);\n    },\n  },\n};\n</script>\n\n<style>\n.spinal-model-gen-context-dialog-edit-cat {\n  z-index: 99999;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <div>\n    <v-stepper\n      v-show=\"!showTestList\"\n      v-model=\"e1\"\n      class=\"advenced-select-model-container spinal-scrollbar\"\n      vertical\n    >\n      <v-stepper-step step=\"1\"> Basic parameters </v-stepper-step>\n      <v-stepper-content step=\"1\">\n        <Basicselectmodel\n          :bimfiles=\"bimfiles\"\n          :btn-label=\"btnLabel\"\n          @continue=\"onBasicSelect\"\n        >\n        </Basicselectmodel>\n      </v-stepper-content>\n\n      <v-stepper-step step=\"2\"> Levels </v-stepper-step>\n      <v-stepper-content step=\"2\">\n        <AdvenceSettings\n          :model-name=\"basic.selectedModel\"\n          :revit-cat=\"['Revit Level']\"\n          @seeList=\"seeTestList\"\n          @continue=\"onLevelSelect\"\n          @cancel=\"onCancel\"\n        />\n      </v-stepper-content>\n\n      <v-stepper-step step=\"3\"> Rooms </v-stepper-step>\n      <v-stepper-content step=\"3\">\n        <AdvenceSettings\n          :model-name=\"basic.selectedModel\"\n          :revit-cat=\"['Revit Pièces', 'Revit Rooms']\"\n          @seeList=\"seeTestList\"\n          @continue=\"onRoomSelect\"\n          @cancel=\"onCancel\"\n        >\n          <v-checkbox\n            v-model=\"isRoomRefOK\"\n            :label=\"`Use Rooms 3D as Reference.`\"\n          />\n          <template v-if=\"isRoomRefOK\">\n            <v-text-field\n              v-model=\"floorRoomNbr\"\n              label=\"Attribut name of the Room's number in the Level.\"\n            />\n            <v-text-field\n              v-model=\"floorRoomName\"\n              label=\"Attribut name to rename the Room\"\n              placeholder=\"Optional\"\n            />\n            <v-text-field\n              v-model=\"floorLevelName\"\n              label=\"Attribut name to rename the Level\"\n              placeholder=\"Optional\"\n            />\n          </template>\n        </AdvenceSettings>\n      </v-stepper-content>\n      <template v-if=\"!isRoomRefOK\">\n        <v-stepper-step step=\"4\">\n          Floors*\n          <small>Optional</small>\n        </v-stepper-step>\n        <v-stepper-content step=\"4\">\n          <AdvenceSettings\n            :model-name=\"basic.selectedModel\"\n            :revit-cat=\"['Revit Sols', 'Revit Floors']\"\n            @seeList=\"seeTestList\"\n            @continue=\"onFloorSelect\"\n            @cancel=\"onCancel\"\n          >\n            <v-text-field\n              v-model=\"floorRoomNbr\"\n              label=\"Attribut name of the Room's number in the Level.\"\n            />\n            <v-text-field\n              v-model=\"floorRoomName\"\n              label=\"Attribut name to rename the Room\"\n              placeholder=\"Optional\"\n            />\n            <v-text-field\n              v-model=\"floorLevelName\"\n              label=\"Attribut name to rename the Level\"\n              placeholder=\"Optional\"\n            />\n          </AdvenceSettings>\n        </v-stepper-content>\n      </template>\n\n      <v-stepper-step :step=\"structureStep\"> Structures </v-stepper-step>\n      <v-stepper-content :step=\"structureStep\">\n        <AdvenceSettingStructure\n          :model-name=\"basic.selectedModel\"\n          @seeList=\"seeTestList\"\n          @continue=\"onStructureSelect\"\n          @cancel=\"onCancel\"\n        />\n      </v-stepper-content>\n      <v-stepper-step :step=\"structureStep + 1\"> Confirm </v-stepper-step>\n      <v-stepper-content :step=\"structureStep + 1\">\n        <v-btn\n          color=\"red darken-1\"\n          flat\n          :disabled=\"btnDisabled\"\n          @click=\"onCancel\"\n        >\n          Cancel\n        </v-btn>\n        <v-btn color=\"primary\" :disabled=\"btnDisabled\" @click=\"onGenerate\">\n          Generate\n        </v-btn>\n      </v-stepper-content>\n    </v-stepper>\n    <div v-if=\"showTestList\" class=\"test-popover spinal-scrollbar\">\n      <ShowTestList\n        :items=\"testItems\"\n        :model-name=\"basic.selectedModel\"\n        @close=\"showTestList = false\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Basicselectmodel from '../BasicSelectModel.vue';\nimport ShowTestList from '../showTestList.vue';\nimport AdvenceSettings from './AdvenceSettings.vue';\nimport AdvenceSettingStructure from './AdvenceSettingStructure.vue';\n\nAdvenceSettings;\nimport {\n  getObjFromRvtModel,\n  getModelByName,\n} from '../../services/getObjFromRvtModel';\n\nexport default {\n  name: 'AdvencedSelectModel',\n  components: {\n    Basicselectmodel,\n    AdvenceSettings,\n    AdvenceSettingStructure,\n    ShowTestList,\n  },\n  props: {\n    bimfiles: { require: true, type: Array, default: () => [] },\n    btnLabel: { type: String, default: () => 'Continue' },\n    btnDisabled: { type: Boolean, default: () => false },\n    configNames: { require: true, type: Array, default: () => [] },\n  },\n  data() {\n    return {\n      firstname: 'test',\n      configName: 'default',\n      advenced: [],\n      e1: 1,\n      isRoomRefOK: true,\n      showTestList: false,\n      basic: {},\n      levelSelect: [],\n      roomSelect: [],\n      floorSelect: [],\n      structureSelect: [],\n      testItems: [],\n      floorRoomNbr: 'Number',\n      floorRoomName: '',\n      floorLevelName: '',\n    };\n  },\n  computed: {\n    structureStep() {\n      return this.isRoomRefOK ? 4 : 5;\n    },\n  },\n  methods: {\n    onCancel() {\n      this.e1 = this.e1 - 1;\n    },\n    onBasicSelect(value) {\n      this.e1 = this.e1 + 1;\n      this.basic = value;\n    },\n    onLevelSelect(value) {\n      this.levelSelect = value;\n      this.e1 = this.e1 + 1;\n    },\n    onRoomSelect(value) {\n      this.roomSelect = value;\n      this.e1 = this.e1 + 1;\n    },\n    onFloorSelect(value) {\n      this.floorSelect = value;\n      this.e1 = this.e1 + 1;\n    },\n    onStructureSelect(value) {\n      this.structureSelect = value;\n      this.e1 = this.e1 + 1;\n    },\n    onGenerate() {\n      const cfg = {\n        configName: this.configName,\n        basic: this.basic,\n        levelSelect: this.createData(this.levelSelect),\n        roomSelect: this.createData(this.roomSelect),\n        structureSelect: this.createData(this.structureSelect),\n      };\n      if (this.isRoomRefOK === false) {\n        Object.assign(cfg, { floorSelect: this.createData(this.floorSelect) });\n      }\n      if (this.floorRoomNbr) {\n        Object.assign(cfg, { floorRoomNbr: this.floorRoomNbr });\n      }\n      if (this.floorRoomName) {\n        Object.assign(cfg, { floorRoomName: this.floorRoomName });\n      }\n      if (this.floorLevelName) {\n        Object.assign(cfg, { floorLevelName: this.floorLevelName });\n      }\n\n      this.$emit('onGenerate', cfg);\n    },\n    createData(lstObj) {\n      const res = [];\n      for (const d of lstObj) {\n        const obj = {\n          key: d.key.toString(),\n          value: d.value.toString(),\n        };\n        if (d.isCat === true) Object.assign(obj, { isCat: true });\n        res.push(obj);\n      }\n      return res;\n    },\n    async seeTestList(dataRegexp) {\n      const model = getModelByName(this.basic.selectedModel);\n      this.testItems = await getObjFromRvtModel(model, dataRegexp);\n      this.showTestList = true;\n    },\n  },\n};\n</script>\n\n<style>\n.advenced-select-model-container {\n  height: 100%;\n  overflow-y: auto;\n}\n.spinal-scrollbar::-webkit-scrollbar {\n  width: 5px;\n  height: 5px;\n}\n.spinal-scrollbar::-webkit-scrollbar-thumb {\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  background: rgba(169, 169, 169, 0.9);\n}\n.spinal-scrollbar::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n</style>\n<style scoped>\n.test-popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow-y: auto;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"BtnGroupViewInViewer\">\n    <fieldset>\n      <legend>Structures:</legend>\n      <v-btn\n        circle\n        icon\n        @click=\"onClickSelect($event)\"\n        @click.shift=\"onShiftClickSelect()\"\n      >\n        <v-icon>devices</v-icon>\n      </v-btn>\n      <v-btn circle icon @click=\"onClickFit()\">\n        <v-icon>zoom_in</v-icon>\n      </v-btn>\n      <v-btn\n        circle\n        icon\n        @click=\"onClickIsolate($event)\"\n        @click.shift=\"onShiftClickIsolate()\"\n      >\n        <v-icon>settings_overscan</v-icon>\n      </v-btn>\n    </fieldset>\n    <template v-if=\"type === 'floor'\">\n      <fieldset>\n        <legend>Rooms:</legend>\n        <v-btn\n          circle\n          icon\n          @click=\"onClickSelect($event, true)\"\n          @click.shift=\"onShiftClickSelect(true)\"\n        >\n          <v-icon>devices</v-icon>\n        </v-btn>\n        <v-btn circle icon @click=\"onClickFit(true)\">\n          <v-icon>zoom_in</v-icon>\n        </v-btn>\n        <v-btn\n          circle\n          icon\n          @click=\"onClickIsolate($event, true)\"\n          @click.shift=\"onShiftClickIsolate(true)\"\n        >\n          <v-icon>settings_overscan</v-icon>\n        </v-btn>\n      </fieldset>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { getViewer } from 'spinal-spatial-referential';\n\nexport default {\n  name: 'BtnGroupViewInViewer',\n  props: ['data', 'type'],\n  data() {\n    return {};\n  },\n  methods: {\n    getAttrDbId(arr) {\n      for (const attr of arr) {\n        if (attr.label === 'dbId') return attr.value;\n      }\n    },\n    getDbId(target) {\n      console.log('BtnGroupViewInViewer data', this.data);\n      const dbIds = [];\n      if (this.type === 'floor') {\n        if (!target) {\n          for (const extId in this.data.structures) {\n            if (Object.hasOwnProperty.call(this.data.structures, extId)) {\n              dbIds.push(this.data.structures[extId].properties.dbId);\n            }\n          }\n        } else {\n          for (const extId in this.data.children) {\n            if (\n              this.data.children.hasOwnProperty.call(this.data.children, extId)\n            ) {\n              const room = this.data.children[extId];\n              for (const child of room.children) {\n                dbIds.push(child.dbId);\n              }\n            }\n          }\n        }\n      } else if (this.type === 'roomNew') {\n        const roomDbId = this.getAttrDbId(this.data.attr);\n        if (this.data.children) {\n          for (const roomRef of this.data.children) {\n            const roomRefDbId = this.getAttrDbId(this.data.attr);\n            if (roomRefDbId) dbIds.push(roomRefDbId);\n          }\n        }\n        if (roomDbId) dbIds.push(roomDbId);\n      } else if (this.type === 'roomUpdate') {\n        const FAData = this.data.FAData;\n        const roomData = this.data.roomData;\n        const roomArchi = FAData.floorArchi.children[roomData.externalId];\n        if (roomArchi) {\n          dbIds.push(roomArchi.properties.dbId);\n          for (const child of roomArchi.children) {\n            dbIds.push(child.dbId);\n          }\n        }\n      }\n      return dbIds;\n    },\n    getAggregateDbId(data, targetArray, key) {\n      for (const itm of data) {\n        for (const dbId of itm[key]) {\n          targetArray.push(dbId);\n        }\n      }\n    },\n    onClickSelect(event, targetRoom) {\n      if (event.shiftKey === true) return;\n      const dbIds = this.getDbId(targetRoom);\n      if (dbIds.length === 0) return;\n      const viewer = getViewer();\n      viewer.select(dbIds);\n    },\n    onClickFit(targetRoom) {\n      const dbIds = this.getDbId(targetRoom);\n      if (dbIds.length === 0) return;\n      const viewer = getViewer();\n      viewer.fitToView(dbIds);\n    },\n    onClickIsolate(event, targetRoom) {\n      if (event.shiftKey === true) return;\n      const dbIds = this.getDbId(targetRoom);\n      if (dbIds.length === 0) return;\n      const viewer = getViewer();\n      viewer.isolate(dbIds);\n    },\n    onShiftClickSelect(targetRoom) {\n      const dbIds = this.getDbId(targetRoom);\n      if (dbIds.length === 0) return;\n      const viewer = getViewer();\n      const aggr = viewer.getAggregateSelection();\n      this.getAggregateDbId(aggr, dbIds, 'selection');\n      viewer.select(dbIds);\n    },\n    onShiftClickIsolate(targetRoom) {\n      const dbIds = this.getDbId(targetRoom);\n      if (dbIds.length === 0) return;\n      const viewer = getViewer();\n      const aggr = viewer.getAggregateIsolation();\n      this.getAggregateDbId(aggr, dbIds, 'ids');\n      viewer.isolate(dbIds);\n    },\n  },\n};\n</script>\n<style scoped></style>\n<style>\n.BtnGroupViewInViewer .v-btn {\n  margin: 2px 0;\n}\n.BtnGroupViewInViewer .v-btn:last-child {\n  margin-right: 2px;\n}\n.BtnGroupViewInViewer .v-btn:first-of-type {\n  margin-left: 2px;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-layout justify-space-between pa-3>\n    <v-flex xs4 spinal-scrollbar style=\"overflow: auto\">\n      <v-treeview\n        :items=\"tableData\"\n        :active.sync=\"selectedC\"\n        hoverable\n        :open-all=\"true\"\n        return-object\n        activatable\n      ></v-treeview>\n    </v-flex>\n    <v-divider vertical></v-divider>\n    <v-flex d-flex text-xs-center>\n      <v-scroll-y-transition mode=\"out-in\">\n        <div\n          v-if=\"selectedC.length === 0\"\n          class=\"title grey--text text--lighten-1 font-weight-light\"\n          style=\"align-self: center\"\n        >\n          Select an item\n        </div>\n        <v-card v-else class=\"mx-auto\" flat>\n          <div class=\"spinal-diff-room-new-container\">\n            <div>\n              {{ name }}\n            </div>\n            <BtnGroupViewInViewer\n              type=\"roomNew\"\n              :data=\"selectedComp\"\n            ></BtnGroupViewInViewer>\n          </div>\n          <v-card-text>\n            <slot></slot>\n            <v-data-table\n              :headers=\"diffInfoHeader\"\n              :items=\"selectedComp.attr\"\n              class=\"elevation-1\"\n            >\n              <template v-slot:items=\"props\">\n                <td>{{ props.item.label }}</td>\n                <td>{{ props.item.value }}</td>\n                <td>{{ props.item.unit }}</td>\n              </template>\n            </v-data-table>\n          </v-card-text>\n        </v-card>\n      </v-scroll-y-transition>\n    </v-flex>\n  </v-layout>\n</template>\n\n<script>\nimport BtnGroupViewInViewer from './BtnGroupViewInViewer.vue';\n\nexport default {\n  name: 'SpinalRoomNew',\n  props: ['tableData', 'value'],\n  components: {\n    BtnGroupViewInViewer,\n  },\n  data() {\n    return {\n      diffInfoHeader: [\n        { text: 'Name', align: 'left', value: 'name' },\n        { text: 'Value', value: 'value' },\n        { text: 'Unit', value: 'unit' },\n      ],\n    };\n  },\n  computed: {\n    name() {\n      let name = '';\n      if (this.selectedComp)\n        for (const attr of this.selectedComp.attr) {\n          if (attr.label === 'name') name += attr.value;\n          if (attr.label === 'number')\n            name = attr.value.toString() + '-' + name;\n        }\n      return name;\n    },\n    selectedComp() {\n      return this.value[0];\n    },\n    selectedC: {\n      get() {\n        return this.value;\n      },\n      set(value) {\n        this.$emit('input', value);\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n.spinal-diff-room-new-container {\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n}\n.spinal-diff-room-new-container div:first-child {\n  flex-grow: 1;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <v-card class=\"mx-auto\" flat>\n    <div class=\"update-basic-info\">\n      <p>name: {{ name }}</p>\n      <p>dbId: {{ value.dbId }}</p>\n      <p>externalId: {{ value.externalId }}</p>\n    </div>\n    <v-card-text>\n      <v-expansion-panel popout>\n        <v-expansion-panel-content\n          ripple\n          lazy\n          :disabled=\"value.diff.diffInfo.length === 0\"\n        >\n          <template v-slot:header>\n            <div>Diff info ({{ value.diff.diffInfo.length }})</div>\n          </template>\n          <v-data-table\n            :headers=\"diffInfoHeader\"\n            :items=\"value.diff.diffInfo\"\n            class=\"elevation-1\"\n          >\n            <template v-slot:items=\"props\">\n              <td>{{ props.item.label }}</td>\n              <td>\n                <v-edit-dialog :return-value.sync=\"props.item.archiValue\" lazy>\n                  {{ props.item.archiValue }}\n                  <template v-slot:input>\n                    <v-text-field\n                      v-model=\"props.item.archiValue\"\n                      label=\"Edit\"\n                      single-line\n                    ></v-text-field>\n                  </template>\n                </v-edit-dialog>\n              </td>\n              <td>{{ props.item.nodeValue }}</td>\n              <td>{{ props.item.unit }}</td>\n            </template>\n          </v-data-table>\n        </v-expansion-panel-content>\n        <v-expansion-panel-content\n          ripple\n          lazy\n          :disabled=\"value.diff.diffAttr.length === 0\"\n        >\n          <template v-slot:header>\n            <div>Diff Attributes ({{ value.diff.diffAttr.length }})</div>\n          </template>\n          <v-data-table\n            :headers=\"diffInfoHeader\"\n            :items=\"value.diff.diffAttr\"\n            class=\"elevation-1\"\n          >\n            <template v-slot:items=\"props\">\n              <td>{{ props.item.label }}</td>\n              <td>\n                <v-edit-dialog :return-value.sync=\"props.item.archiValue\" lazy>\n                  {{ props.item.archiValue }}\n                  <template v-slot:input>\n                    <v-text-field\n                      v-model=\"props.item.archiValue\"\n                      label=\"Edit\"\n                      single-line\n                    ></v-text-field>\n                  </template>\n                </v-edit-dialog>\n              </td>\n              <td>{{ props.item.nodeValue }}</td>\n              <td>{{ props.item.unit }}</td>\n            </template>\n          </v-data-table>\n        </v-expansion-panel-content>\n      </v-expansion-panel>\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nexport default {\n  name: 'SpinalTableRoomUpdateDetails',\n  props: ['value'],\n  data() {\n    return {\n      diffInfoHeader: [\n        { text: 'Name', align: 'left', value: 'name' },\n        { text: 'New Value', value: 'new' },\n        { text: 'Old value', value: 'old' },\n        { text: 'Unit', value: 'unit' },\n      ],\n    };\n  },\n  computed: {\n    name() {\n      let name = '';\n      if (this.value && this.value.diff && this.value.diff.diffAttr)\n        for (const attr of this.value.diff.diffAttr) {\n          if (attr.label === 'name') name += attr.archiValue;\n          if (attr.label === 'number')\n            name = attr.archiValue.toString() + '-' + name;\n        }\n      return name === '' ? this.value.name : name;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.update-basic-info {\n  text-align: left;\n  padding: 0 16px;\n}\n.update-basic-info > p {\n  margin-bottom: 0;\n  user-select: text;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-expansion-panel-content ripple lazy :disabled=\"dataTable.length === 0\">\n    <template v-slot:header>\n      <div>Room to be updated ({{ dataTable.length }})</div>\n    </template>\n\n    <v-layout justify-space-between pa-3>\n      <v-flex xs4 spinal-scrollbar style=\"overflow: auto\">\n        <v-treeview\n          :items=\"dataTable\"\n          :active.sync=\"selected\"\n          hoverable\n          :open-all=\"true\"\n          return-object\n          activatable\n        ></v-treeview>\n      </v-flex>\n      <v-divider vertical></v-divider>\n      <v-flex d-flex text-xs-center>\n        <v-scroll-y-transition mode=\"out-in\">\n          <div\n            v-if=\"selected.length === 0\"\n            class=\"title grey--text text--lighten-1 font-weight-light\"\n            style=\"align-self: center\"\n          >\n            Select an item\n          </div>\n          <SpinalTableRoomUpdateDetails\n            v-else\n            :value=\"selectedComp\"\n          ></SpinalTableRoomUpdateDetails>\n        </v-scroll-y-transition>\n      </v-flex>\n    </v-layout>\n  </v-expansion-panel-content>\n</template>\n\n<script>\nimport SpinalTableRoomUpdateDetails from './SpinalTableRoomUpdateDetails.vue';\nexport default {\n  name: 'SpinalTableRoomUpdate',\n  props: ['value'],\n  components: { SpinalTableRoomUpdateDetails },\n  data() {\n    return {\n      selected: [],\n      dataTable: [],\n    };\n  },\n  computed: {\n    selectedComp() {\n      return this.selected[0];\n    },\n  },\n  mounted() {\n    this.update();\n  },\n  watch: {\n    value() {\n      this.update();\n    },\n  },\n  methods: {\n    update() {\n      this.dataTable = [];\n      this.selected = [];\n      if (this.value)\n        for (const { roomArchi, diff } of this.value) {\n          const room = getProps(roomArchi.properties, diff);\n          this.dataTable.push(room);\n        }\n    },\n  },\n};\n\nfunction getProps(properties, diff) {\n  const props = {\n    name: '',\n    id: properties.externalId,\n    dbId: properties.dbId,\n    externalId: properties.externalId,\n    diff,\n  };\n  for (const attr of properties.properties) {\n    if (attr.name === 'name') props.name += attr.value;\n    if (attr.name === 'number')\n      props.name = attr.value.toString() + '-' + props.name;\n  }\n  return props;\n}\n</script>\n\n<style scoped>\n.update-basic-info {\n  text-align: left;\n  padding: 0 16px;\n}\n.update-basic-info > p {\n  margin-bottom: 0;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"spatial-diff-settings\">\n    <div class=\"spatial-diff-settings-header\">\n      <v-btn dark :icon=\"true\" round @click=\"$emit('back')\">\n        <v-icon>arrow_back</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn elevation=\"2\" icon @click=\"update\">\n        <v-icon>refresh</v-icon>\n      </v-btn>\n    </div>\n    <div class=\"spatial-diff-settings-body spinal-scrollbar\">\n      <v-card v-if=\"modeView === ''\">\n        <v-card-title>\n          <div>\n            <h6 class=\"headline mb-0\">Select an item in the sidebar</h6>\n          </div>\n        </v-card-title>\n      </v-card>\n      <v-card v-if=\"modeView === 'floor'\">\n        <v-card-title>\n          <div class=\"spatial-diff-settings-title-container\">\n            <h6 class=\"headline mb-0\">{{ getFloorName(FAData) }}</h6>\n            <div>{{\n              getModificationType(FAData.floorArchi.properties.modificationType)\n            }}</div>\n          </div>\n          <BtnGroupViewInViewer\n            type=\"floor\"\n            :data=\"FAData.floorArchi\"\n          ></BtnGroupViewInViewer>\n        </v-card-title>\n        <v-card-text>\n          <md-field>\n            <label>Manual assingment selection</label>\n            <md-select\n              v-model=\"manualAssingmentSelection\"\n              md-dense\n              class=\"spinal-md-select\"\n            >\n              <md-option\n                v-for=\"item in manualAssingmentChoice\"\n                :key=\"item.value\"\n                :value=\"item.value\"\n              >\n                {{ item.label }}\n              </md-option>\n            </md-select>\n            <v-btn\n              elevation=\"2\"\n              :disabled=\"\n                manualAssingmentSelection === manualAssingmentSelectionTmp\n              \"\n              icon\n              @click=\"\n                validateAssingment(FAData.floorArchi.properties.externalId)\n              \"\n            >\n              <v-icon>check</v-icon>\n            </v-btn>\n          </md-field>\n          <v-expansion-panel popout>\n            <template v-if=\"FAData.diff\">\n              <!-- diff info -->\n              <SpinalTableDiffInfo\n                :diffInfo=\"FAData.diff.diffInfo.diffInfo\"\n                :diffInfoHeader=\"diffInfoHeader\"\n                :title=\"'Diff Info'\"\n              ></SpinalTableDiffInfo>\n              <!-- diff attr -->\n              <SpinalTableDiffInfo\n                :diffInfo=\"FAData.diff.diffInfo.diffAttr\"\n                :diffInfoHeader=\"diffInfoHeader\"\n                :title=\"'Diff Attributes'\"\n              ></SpinalTableDiffInfo>\n              <!-- diff room del-->\n              <SpinalTableDel\n                :title=\"'Room to be removed'\"\n                :value=\"FAData.diff.diffRoom.delRooms\"\n              ></SpinalTableDel>\n              <!-- diff room new -->\n              <SpinalTableRoomNew\n                :value=\"FAData.diff.diffRoom.newRooms\"\n              ></SpinalTableRoomNew>\n              <!-- diff room update -->\n              <SpinalTableRoomUpdate\n                :value=\"FAData.diff.diffRoom.updateRooms\"\n              ></SpinalTableRoomUpdate>\n              <!-- diff structures del -->\n              <SpinalTableDel\n                :title=\"'Reference Structures to be removed'\"\n                :value=\"FAData.diff.diffRef.delBimObj\"\n              ></SpinalTableDel>\n              <!-- diff structures new -->\n              <SpinalTableStructNew\n                :value=\"FAData.diff.diffRef.newBimObj\"\n              ></SpinalTableStructNew>\n            </template>\n          </v-expansion-panel>\n        </v-card-text>\n      </v-card>\n      <v-card v-if=\"modeView === 'roomupdate'\">\n        <v-card-title>\n          <div class=\"spatial-diff-settings-title-container\">\n            <h6 class=\"headline mb-0\">{{ compuName }}</h6>\n            <div>{{ getModificationType(roomData.modificationType) }}</div>\n          </div>\n          <BtnGroupViewInViewer\n            type=\"roomUpdate\"\n            :data=\"{ roomData, FAData }\"\n          ></BtnGroupViewInViewer>\n        </v-card-title>\n        <v-card-text>\n          <md-field>\n            <label>Manual assingment selection</label>\n            <md-select\n              v-model=\"manualAssingmentSelection\"\n              md-dense\n              class=\"spinal-md-select\"\n            >\n              <md-option\n                v-for=\"item in manualAssingmentChoice\"\n                :key=\"item.value\"\n                :value=\"item.value\"\n              >\n                {{ item.label }}\n              </md-option>\n            </md-select>\n            <v-btn\n              elevation=\"2\"\n              :disabled=\"\n                manualAssingmentSelection === manualAssingmentSelectionTmp\n              \"\n              icon\n              @click=\"validateAssingment(roomData.externalId)\"\n            >\n              <v-icon>check</v-icon>\n            </v-btn>\n          </md-field>\n          <SpinalTableRoomUpdateDetails\n            :value=\"roomData\"\n          ></SpinalTableRoomUpdateDetails>\n        </v-card-text>\n      </v-card>\n      <v-card v-if=\"modeView === 'roomdelete'\">\n        <v-card-text class=\"spinal-diff-room-delete-container\">\n          <v-data-table\n            hide-headers\n            hide-actions\n            :items=\"[\n              { label: 'Name', value: roomData.name },\n              { label: 'Node ID', value: roomData.nodeId },\n              { label: 'Server ID', value: roomData.serverId },\n            ]\"\n            class=\"elevation-1\"\n          >\n            <template v-slot:items=\"props\">\n              <td>{{ props.item.label }}</td>\n              <td>{{ props.item.value }}</td>\n            </template>\n          </v-data-table>\n        </v-card-text>\n      </v-card>\n      <v-card v-if=\"modeView === 'roomnew'\">\n        <SpinalRoomNew :tableData=\"roomData\" v-model=\"selected\">\n          <md-field v-if=\"roomData[0] === selected[0]\">\n            <label>Manual assingment selection</label>\n            <md-select\n              v-model=\"manualAssingmentSelection\"\n              md-dense\n              class=\"spinal-md-select\"\n            >\n              <md-option\n                v-for=\"item in manualAssingmentChoice\"\n                :key=\"item.value\"\n                :value=\"item.value\"\n              >\n                {{ item.label }}\n              </md-option>\n            </md-select>\n            <v-btn\n              elevation=\"2\"\n              :disabled=\"\n                manualAssingmentSelection === manualAssingmentSelectionTmp\n              \"\n              icon\n              @click=\"validateAssingment(selected[0].id)\"\n            >\n              <v-icon>check</v-icon>\n            </v-btn>\n          </md-field>\n        </SpinalRoomNew>\n      </v-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { EModificationType, getGraph } from 'spinal-spatial-referential';\nimport {\n  diffFloorWithContextGeo,\n  getContextSpatial,\n  floorArchiHasChildren,\n} from 'spinal-spatial-referential';\nimport { eventBus } from './eventbus';\nimport SpinalTableDiffInfo from './SpinalTableDiffInfo.vue';\nimport SpinalTableDel from './SpinalTableDel.vue';\nimport SpinalTableRoomNew from './SpinalTableRoomNew.vue';\nimport SpinalTableRoomUpdate from './SpinalTableRoomUpdate.vue';\nimport SpinalTableStructNew from './SpinalTableStructNew.vue';\nimport SpinalTableRoomUpdateDetails from './SpinalTableRoomUpdateDetails.vue';\nimport SpinalRoomNew from './SpinalRoomNew.vue';\nimport { parseUnit } from 'spinal-spatial-referential';\nimport BtnGroupViewInViewer from './BtnGroupViewInViewer.vue';\n\nexport default {\n  name: 'SpatialDiffSettings',\n  props: ['archiData', 'buildingServerId', 'bimFileId'],\n  components: {\n    SpinalTableDiffInfo,\n    SpinalTableDel,\n    SpinalTableRoomNew,\n    SpinalTableRoomUpdate,\n    SpinalTableStructNew,\n    SpinalTableRoomUpdateDetails,\n    SpinalRoomNew,\n    BtnGroupViewInViewer,\n  },\n  data() {\n    this.manualAssingment = new Map();\n    return {\n      modeView: '',\n      FAData: null,\n      roomData: null,\n      manualAssingmentChoice: [],\n      manualAssingmentSelection: 0,\n      manualAssingmentSelectionTmp: 0,\n      diffInfoHeader: [\n        { text: 'Label', align: 'left', value: 'name' },\n        { text: 'New Value', value: 'new' },\n        { text: 'Old value', value: 'old' },\n        { text: 'Unit', value: 'unit' },\n      ],\n      selected: [],\n    };\n  },\n  computed: {\n    compuName() {\n      let name = '';\n      if (this.roomData && this.roomData.diff && this.roomData.diff.diffAttr)\n        for (const attr of this.roomData.diff.diffAttr) {\n          if (attr.label === 'name') name += attr.archiValue;\n          if (attr.label === 'number')\n            name = attr.archiValue.toString() + '-' + name;\n        }\n      return name === '' ? this.roomData.name : name;\n    },\n  },\n  mounted() {\n    spinal.spinalPanelManagerService.openPanel('SpinalDiffViewer');\n    eventBus.$on('selectFloor', this.onSelectFloor);\n    eventBus.$on('selectRoom', this.onSelectRoom);\n    return this.update();\n  },\n  beforDestroy() {\n    eventBus.$off('selectFloor', this.onSelectFloor);\n    eventBus.$off('selectRoom', this.onSelectRoom);\n\n    spinal.spinalPanelManagerService.closePanel('SpinalDiffViewer');\n  },\n  methods: {\n    validateAssingment(extId) {\n      if (this.manualAssingmentSelection === 0) {\n        this.manualAssingment.delete(extId);\n      } else {\n        this.manualAssingment.set(extId, this.manualAssingmentSelection);\n      }\n      return this.update();\n    },\n    getModificationType(modificationType) {\n      if (modificationType & EModificationType.update) return 'update';\n      if (modificationType & EModificationType.delete) return 'delete';\n      if (modificationType & EModificationType.create) return 'new';\n      return 'nothing to do';\n    },\n    getFloorName(FAData) {\n      if (FAData.diff) {\n        if (FAData.diff.diffInfo && FAData.diff.diffInfo.diffInfo) {\n          for (const { label, archiValue } of FAData.diff.diffInfo.diffInfo) {\n            if (label === 'name') return archiValue;\n          }\n        }\n      }\n      for (const { name, value } of FAData.floorArchi.properties.properties) {\n        if (name === 'name') return value;\n      }\n    },\n\n    async onSelectFloor(FAData) {\n      this.modeView = 'floor';\n      this.roomData = null;\n      this.FAData = FAData;\n      const graph = getGraph();\n      const contextGeo = await getContextSpatial(graph);\n      this.manualAssingmentSelection = 0;\n      this.manualAssingmentSelectionTmp = 0;\n      this.manualAssingmentChoice = [{ label: 'none', value: 0 }];\n      const buildings = await contextGeo.getChildrenInContext(contextGeo);\n      const buildingsFloors = await Promise.all(\n        buildings.map((building) => {\n          if (building._server_id === this.buildingServerId)\n            return building.getChildrenInContext(contextGeo);\n        })\n      );\n      const servId = this.manualAssingment.get(\n        FAData.floorArchi.properties.externalId\n      );\n      for (const buildingFloor of buildingsFloors) {\n        if (buildingFloor) {\n          for (const floorNode of buildingFloor) {\n            const data = {\n              label: floorNode.info.name.get(),\n              value: floorNode._server_id,\n            };\n            if (servId === floorNode._server_id) {\n              this.manualAssingmentSelection = data.value;\n              this.manualAssingmentSelectionTmp = data.value;\n            }\n            this.manualAssingmentChoice.push(data);\n          }\n        }\n      }\n    },\n    async onSelectRoom({ FAData, RAData, type }) {\n      this.roomData = null;\n      this.modeView = 'room' + type;\n      this.selected = [];\n      this.FAData = FAData;\n      if (type === 'update') {\n        this.onSelectRoomSetAssing(FAData, RAData.roomArchi.properties);\n        this.roomData = this.getProps(RAData.roomArchi.properties, RAData.diff);\n      } else if (type === 'new') {\n        this.onSelectRoomSetAssing(FAData, RAData.properties);\n        const room = this.getPropsNew(RAData.properties);\n        room.children = [];\n        for (const structure of RAData.children) {\n          const struct = this.getPropsNew(structure);\n          room.children.push(struct);\n        }\n        this.roomData = [room];\n      } else {\n        const node = FileSystem._objects[RAData];\n        this.roomData = {\n          name: node.info.name.get(),\n          nodeId: node.info.id.get(),\n          serverId: RAData,\n        };\n      }\n    },\n    getPropsNew(properties) {\n      const props = {\n        name: '',\n        id: properties.externalId,\n        attr: [\n          { label: 'dbId', value: properties.dbId, unit: '' },\n          {\n            label: 'externalId',\n            value: properties.externalId,\n            unit: '',\n          },\n        ],\n      };\n      for (const attr of properties.properties) {\n        if (attr.name === 'name') props.name += attr.value;\n        if (attr.name === 'level') continue;\n        if (attr.name === 'number')\n          props.name = attr.value.toString() + '-' + props.name;\n        props.attr.push({\n          label: attr.name,\n          value: attr.value,\n          unit: parseUnit(attr.dataTypeContext),\n        });\n      }\n      return props;\n    },\n    getProps(properties, diff) {\n      const props = {\n        name: '',\n        id: properties.externalId,\n        dbId: properties.dbId,\n        externalId: properties.externalId,\n        modificationType: properties.modificationType,\n        diff,\n      };\n      for (const attr of properties.properties) {\n        if (attr.name === 'name') props.name += attr.value;\n        if (attr.name === 'number')\n          props.name = attr.value.toString() + '-' + props.name;\n      }\n      return props;\n    },\n    async onSelectRoomSetAssing(FAData, RADataProperties) {\n      const graph = getGraph();\n      const contextGeo = await getContextSpatial(graph);\n      this.manualAssingmentSelection = 0;\n      this.manualAssingmentSelectionTmp = 0;\n      this.manualAssingmentChoice = [{ label: 'none', value: 0 }];\n      const buildings = await contextGeo.getChildrenInContext(contextGeo);\n      const buildingsFloors = await Promise.all(\n        buildings.map(async (building) => {\n          if (building._server_id === this.buildingServerId) {\n            const floors = await building.getChildrenInContext(contextGeo);\n            for (const floor of floors) {\n              if (\n                floor._server_id ===\n                FAData.floorArchi.properties.spinalnodeServerId\n              ) {\n                return floor.getChildrenInContext(contextGeo);\n              }\n            }\n          }\n        })\n      );\n      let roomServId = this.manualAssingment.get(RADataProperties.externalId);\n      for (const buildingRoom of buildingsFloors) {\n        if (buildingRoom) {\n          for (const roomNode of buildingRoom) {\n            if (!roomNode) continue;\n            const data = {\n              label: roomNode.info.name.get(),\n              value: roomNode._server_id,\n            };\n            if (roomServId === roomNode._server_id) {\n              this.manualAssingmentSelection = data.value;\n              this.manualAssingmentSelectionTmp = data.value;\n            }\n            this.manualAssingmentChoice.push(data);\n          }\n        }\n      }\n    },\n    async update() {\n      if (!this.buildingServerId) return;\n      this.modeView = '';\n      this.roomData = null;\n      const graph = getGraph();\n      const contextGeo = await getContextSpatial(graph);\n      const archiData = [];\n      for (const extId in this.archiData) {\n        if (Object.hasOwnProperty.call(this.archiData, extId)) {\n          const floorArchi = this.archiData[extId];\n          if (floorArchiHasChildren(floorArchi)) {\n            const diff = await diffFloorWithContextGeo(\n              floorArchi,\n              contextGeo,\n              this.buildingServerId,\n              this.manualAssingment\n            );\n            archiData.push({ diff, floorArchi });\n          }\n        }\n      }\n      spinal.spinalPanelManagerService.openPanel('SpinalDiffViewer', {\n        archiData,\n        manualAssingment: this.manualAssingment,\n        buildingServerId: this.buildingServerId,\n        bimFileId: this.bimFileId,\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.spatial-diff-settings {\n  height: 100%;\n  position: relative;\n}\n.spatial-diff-settings-header {\n  background-color: #222;\n  display: flex;\n}\n\n.spatial-diff-settings-body {\n  position: relative;\n  overflow: auto;\n  height: calc(100% - 50px);\n  user-select: text;\n}\n.spinal-md-select {\n  align-items: flex-end;\n}\n.spatial-diff-settings-title-container {\n  flex-grow: 1;\n  margin-right: 16px;\n}\n.plugin-graph-viewer {\n  position: relative;\n}\n.spinal-diff-room-delete-container {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app dark class=\"gen-spatial-body\">\n    <div class=\"gen-spatial-container\">\n      <v-tabs v-show=\"hideDiffSettings\" v-model=\"active\">\n        <v-tab ripple> Basic </v-tab>\n        <v-tab ripple> Advanced </v-tab>\n        <v-tab ripple> Scripts </v-tab>\n        <v-tab-item class=\"spinal-modal-gen-spatial-tab-item\">\n          <Basicselectmodel\n            v-if=\"active === 0\"\n            :bimfiles=\"bimfiles\"\n            :btn-disabled=\"spin\"\n            @continue=\"generate\"\n          >\n          </Basicselectmodel>\n        </v-tab-item>\n        <v-tab-item>\n          <AdvencedSelectModel\n            v-if=\"active === 1\"\n            :bimfiles=\"bimfiles\"\n            :btn-disabled=\"spin\"\n            @onGenerate=\"advancedGenerate\"\n          />\n        </v-tab-item>\n        <v-tab-item>\n          <v-card>\n            <v-card-text>\n              <md-list>\n                <template v-for=\"(item, index) in scripts\">\n                  <template v-if=\"item.divider\">\n                    <md-divider\n                      v-if=\"index !== 0\"\n                      :key=\"`${item.title}-divider`\"\n                    ></md-divider>\n                    <md-subheader :key=\"item.title\">{{\n                      item.title\n                    }}</md-subheader>\n                  </template>\n                  <md-list-item\n                    v-else\n                    :key=\"item.title\"\n                    :disabled=\"spin\"\n                    @click=\"launchFct(item.fct)\"\n                  >\n                    <span class=\"md-list-item-text\">{{ item.title }}</span>\n                  </md-list-item>\n                </template>\n              </md-list>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n      </v-tabs>\n      <SpatialDiffSettings\n        v-if=\"!hideDiffSettings\"\n        @back=\"hideDiffSettings = true\"\n        :archiData=\"archiData\"\n        :buildingServerId=\"buildingServId\"\n        :bimFileId=\"bimFileId\"\n      ></SpatialDiffSettings>\n      <md-dialog :md-active.sync=\"showDialog\">\n        <md-dialog-title>Choose which bimFile to update</md-dialog-title>\n        <md-dialog-content>\n          <md-field>\n            <md-select v-model=\"selectedModelModal\" multiple>\n              <md-option\n                v-for=\"bimFileName in bimfiles\"\n                :key=\"bimFileName\"\n                :value=\"bimFileName\"\n                >{{ bimFileName }}</md-option\n              >\n            </md-select>\n          </md-field>\n        </md-dialog-content>\n        <md-dialog-actions>\n          <md-button class=\"md-primary\" @click=\"showDialog = false\"\n            >Close</md-button\n          >\n          <md-button class=\"md-primary\" @click=\"updateDbIdsConfirm\"\n            >confirm</md-button\n          >\n        </md-dialog-actions>\n      </md-dialog>\n      <v-progress-linear\n        v-if=\"spin\"\n        style=\"margin: 0\"\n        class=\"spinal-modal-progress-bar\"\n        :indeterminate=\"true\"\n        color=\"primary\"\n      />\n      <md-snackbar\n        :md-position=\"'center'\"\n        :md-active.sync=\"showSnackbar\"\n        :md-duration=\"durationSnakebar\"\n        md-persistent\n      >\n        <span>{{ msgSnackbar }}</span>\n        <md-button class=\"md-primary\" @click=\"showSnackbar = false\"\n          >close</md-button\n        >\n      </md-snackbar>\n    </div>\n  </v-app>\n</template>\n\n<script>\nimport Basicselectmodel from './BasicSelectModel.vue';\nimport AdvencedSelectModel from './AdvancedSelect/AdvencedSelectModel.vue';\nimport SpatialDiffSettings from './diffViewer/SpatialDiffSettings.vue';\nimport {\n  getGraph,\n  getArchi,\n  transformArchi,\n  updateDbIds,\n  updateRoomDbId,\n  loadBimFile,\n  setLevelInContextGeo,\n  setAreaInContextGeo,\n  setCenterPosInContextGeo,\n  addNodeGraphService,\n  getViewer,\n  loadConfig,\n} from 'spinal-spatial-referential';\nexport default {\n  name: 'DialogGenerateContext',\n  components: { Basicselectmodel, AdvencedSelectModel, SpatialDiffSettings },\n  data: function () {\n    return {\n      models: [],\n      configName: 'default',\n      spin: false,\n      active: 0,\n      hideDiffSettings: true,\n      archiData: null,\n      buildingServId: NaN,\n      selectedModel: null,\n      selectedModelModal: null,\n      showDialog: false,\n      showSnackbar: false,\n      msgSnackbar: '',\n      durationSnakebar: Infinity,\n      scripts: [\n        { divider: true, title: 'Script before update' },\n        { title: 'Update dbids from externalIds', fct: this.updateDbIds },\n        {\n          title: \"Update Room's dbid attribute information\",\n          fct: this.updateRoomDbId,\n        },\n        { divider: true, title: 'Script after update' },\n        {\n          title: 'Set level attribute in context spatial',\n          fct: this.setLevelInContextGeo,\n        },\n        {\n          title: 'Set area attribute in context spatial',\n          fct: this.setAreaInContextGeo,\n        },\n        {\n          title: 'Set center postion attribute in context spatial',\n          fct: this.setCenterPosInContextGeo,\n        },\n      ],\n    };\n  },\n  computed: {\n    bimfiles() {\n      return this.models.map((child) => {\n        return child.info.name.get();\n      });\n    },\n    bimFileId() {\n      const bimFile = this.getBimFile();\n      if (bimFile) return bimFile.info.id.get();\n      return '';\n    },\n  },\n  async mounted() {\n    // this.manager = new SM.default.SpatialManager();\n    const graph = getGraph();\n\n    let context = await graph.getContext('BimFileContext');\n    if (!context) return;\n    addNodeGraphService(context);\n\n    const children = await context.getChildrenInContext(context);\n    for (const child of children) {\n      addNodeGraphService(child);\n      this.models.push(child);\n    }\n  },\n  methods: {\n    updateDbIds() {\n      this.showDialog = true;\n    },\n    async updateDbIdsConfirm() {\n      this.showDialog = false;\n      this.spin = true;\n      const viewer = getViewer();\n      try {\n        for (let i = 0; i < this.models.length; i++) {\n          const bimFileNode = this.models[i];\n          if (this.selectedModelModal.includes(bimFileNode.info.name.get())) {\n            const model = await loadBimFile(bimFileNode, viewer);\n            await updateDbIds(bimFileNode.info.id.get(), model);\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.spin = false;\n      }\n    },\n\n    updateRoomDbId() {\n      const graph = getGraph();\n      return updateRoomDbId(graph);\n    },\n    setLevelInContextGeo() {\n      const graph = getGraph();\n      return setLevelInContextGeo(graph);\n    },\n    setAreaInContextGeo() {\n      const graph = getGraph();\n      return setAreaInContextGeo(graph);\n    },\n    setCenterPosInContextGeo() {\n      const graph = getGraph();\n      return setCenterPosInContextGeo(graph, this.callbackScript);\n    },\n    callbackScript(msg) {\n      if (!msg || msg === 'done') {\n        this.durationSnakebar = 4000;\n      } else {\n        this.showSnackbar = true;\n        this.durationSnakebar = Infinity;\n      }\n      this.msgSnackbar = msg;\n    },\n    async launchFct(fct) {\n      this.spin = true;\n      try {\n        await fct();\n        console.log('done');\n      } catch (error) {\n        console.error(error);\n      } finally {\n        this.spin = false;\n      }\n    },\n    getBimFile() {\n      for (let i = 0; i < this.models.length; i++) {\n        if (this.models[i].info.name.get() === this.selectedModel) {\n          return this.models[i];\n        }\n      }\n    },\n    async generate(opt) {\n      this.spin = true;\n      const graph = getGraph();\n      try {\n        this.selectedModel = opt.selectedModel;\n        const bimFile = this.getBimFile();\n        const viewer = getViewer();\n        console.log('start load bimfile');\n        const archi = await getArchi(graph, this.configName, bimFile, viewer);\n        transformArchi(archi);\n        console.log('get Archi Done', archi);\n        this.archiData = archi;\n        this.hideDiffSettings = false;\n        this.buildingServId = opt.buildingServId;\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.spin = false;\n      }\n    },\n    async advancedGenerate(cfg) {\n      const graph = getGraph();\n      const spatialConfig = await loadConfig(graph);\n      spatialConfig.saveConfig(cfg);\n      await this.generate(cfg.basic);\n    },\n    opened() {\n      this.dialog = true;\n    },\n    removed() {},\n    close() {},\n    closeDialog() {},\n  },\n};\n</script>\n\n<style scoped>\n.gen-spatial-body {\n  height: calc(100% - 17px);\n  position: relative;\n}\n.spinal-modal-progress-bar {\n  margin: 0;\n  z-index: 1;\n  position: absolute;\n  bottom: 2px;\n}\n.spinal-modal-gen-spatial-tab,\n.spinal-modal-progress-bar {\n  background: #707070aa;\n}\n.spinal-modal-gen-spatial-btn-footer {\n  background: #222222aa;\n}\n.spinal-modal-gen-spatial-tab-item {\n  max-height: calc(100vh - 325px);\n  overflow-y: auto;\n}\n</style>\n<style>\n.gen-spatial-body > .application--wrap {\n  min-height: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n}\n.gen-spatial-body * {\n  box-sizing: border-box;\n}\n.gen-spatial-container {\n  height: 100%;\n  position: relative;\n}\n.gen-spatial-container > .v-tabs {\n  height: 100%;\n  position: relative;\n}\n.gen-spatial-container > .v-tabs > .v-window {\n  height: calc(100% - 50px);\n  position: relative;\n  overflow: auto;\n}\n\n.gen-spatial-container > .v-tabs > .v-window::-webkit-scrollbar {\n  width: 5px;\n  height: 5px;\n}\n.gen-spatial-container > .v-tabs > .v-window::-webkit-scrollbar-thumb {\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  background: rgba(169, 169, 169, 0.9);\n}\n.gen-spatial-container > .v-tabs > .v-window::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n\n.spinal-modal-gen-spatial-tab-item > .v-window__container {\n  height: 100%;\n  position: relative;\n}\n.gen-spatial-container\n  > .v-tabs\n  > .v-window\n  > .v-window__container\n  > .v-window-item {\n  height: 100%;\n  position: relative;\n}\n.gen-spatial-container > .v-tabs > .v-tabs__bar {\n  background-color: #2e2e2e;\n}\n.gen-spatial-container .v-window > .v-window__container {\n  height: 100%;\n}\n\n/* .gen-spatial-body > .v-menu__content {\n  top: 52px !important;\n} */\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"geolocate-group-config-container\">\n    <v-toolbar class=\"geolocate-group-config-header\" color=\"black\" dark dense>\n      <v-spacer></v-spacer>\n      <AddAGroupConfig @addAGroupConfig=\"addAGroupConfig\"></AddAGroupConfig>\n      <v-btn icon round @click=\"$emit('save')\" color=\"warning\">\n        <v-icon>save</v-icon>\n      </v-btn>\n      <v-btn\n        icon\n        round\n        @click=\"generate\"\n        color=\"success\"\n        :disabled=\"selected.length === 0\"\n      >\n        <v-icon>check</v-icon>\n      </v-btn>\n    </v-toolbar>\n    <div class=\"geolocate-group-config-main\">\n      <md-card class=\"geolocate-group-config-card\">\n        <div class=\"geolocate-group-config-card-content spinal-scrollbar\">\n          <md-list>\n            <md-list-item v-if=\"groupConfigs.length === 0\">\n              <span class=\"md-list-item-text\" style=\"white-space: normal\">\n                No Items in list, add items with the \"+\" button\n              </span>\n            </md-list-item>\n            <md-list-item\n              v-for=\"groupConfig in groupConfigs\"\n              :key=\"groupConfig.uid\"\n              @click=\"$emit('selectGroup', groupConfig)\"\n            >\n              <md-checkbox\n                class=\"geolocate-group-config-card-item-checkbox\"\n                v-model=\"selected\"\n                :value=\"groupConfig.uid\"\n              />\n              <div class=\"md-list-item-text\">\n                <span>{{ groupConfig.name }}</span>\n                <span>{{ countChild(groupConfig) }}</span>\n              </div>\n              <groupConfigItemBtn\n                :uid=\"groupConfig.uid\"\n                @deleteGroup=\"itemDelete = groupConfig\"\n                @showEdit=\"itmEdit = groupConfig\"\n              ></groupConfigItemBtn>\n              <v-progress-linear\n                class=\"geolocate-group-config-card-item-progressbar\"\n                v-if=\"groupConfig.progress != 100\"\n                v-model=\"groupConfig.progress\"\n              ></v-progress-linear>\n            </md-list-item>\n          </md-list>\n        </div>\n      </md-card>\n    </div>\n    <md-dialog-confirm\n      v-if=\"itemDelete\"\n      :md-active.sync=\"showConfirmDelete\"\n      md-title=\"Confirm delete\"\n      md-confirm-text=\"Confirm\"\n      md-cancel-text=\"Cancel\"\n      @md-cancel=\"showConfirmDelete = false\"\n      @md-confirm=\"deleteGroup\"\n    />\n    <md-dialog-prompt\n      v-if=\"itmEdit\"\n      :md-active.sync=\"showEditPrompt\"\n      v-model=\"itmEdit.name\"\n      md-title=\"Edit Name\"\n      md-input-maxlength=\"30\"\n      md-input-placeholder=\"name...\"\n      md-confirm-text=\"Edit\"\n      @md-confirm=\"$emit('savableCfg')\"\n    />\n  </div>\n</template>\n\n<script>\nimport AddAGroupConfig from './AddAGroupConfig.vue';\nimport GroupConfigItemBtn from './GroupConfigItemBtn.vue';\n\nexport default {\n  name: 'groupConfig',\n  components: { AddAGroupConfig, GroupConfigItemBtn },\n  props: ['groupConfigs'],\n  data() {\n    return { show: true, selected: [], itmEdit: null, itemDelete: null };\n  },\n  computed: {\n    showEditPrompt: {\n      get() {\n        return !!this.itmEdit;\n      },\n      set(value) {\n        if (value === false) this.itmEdit = null;\n      },\n    },\n    showConfirmDelete: {\n      get() {\n        return !!this.itemDelete;\n      },\n      set(value) {\n        if (value === false) this.itemDelete = null;\n      },\n    },\n  },\n  methods: {\n    countChild(groupConfig) {\n      if (groupConfig.isLoaded === true) {\n        return 'count : ' + groupConfig.countChild();\n      } else {\n        return '';\n      }\n    },\n    addAGroupConfig(target) {\n      this.$emit('addAGroupConfig', target);\n    },\n    generate() {\n      this.$emit('generate', this.selected);\n    },\n    deleteGroup(uid) {\n      this.$emit('deleteGroup', this.itemDelete.uid);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.geolocate-group-config-container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.geolocate-group-config-header {\n  position: relative;\n  overflow: auto;\n}\n.geolocate-group-config-main {\n  height: calc(100% - 48px);\n  position: relative;\n  overflow: auto;\n}\n.geolocate-group-config-card,\n.geolocate-group-config-card-content {\n  height: 100%;\n}\n.geolocate-group-config-card-item-checkbox:first-child {\n  margin-right: 16px;\n}\n.geolocate-group-config-card-item-progressbar {\n  z-index: 1;\n  position: absolute;\n  bottom: 0;\n  margin: 0;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-dialog v-model=\"show\" attach=\"body\">\n    <template v-slot:activator=\"{ on }\">\n      <v-btn color=\"indigo\" dark small fab v-on=\"on\">\n        <v-icon dark> add </v-icon>\n      </v-btn>\n    </template>\n    <v-card>\n      <v-card-title class=\"headline\"> Add Selection or a Group </v-card-title>\n      <v-card-text>\n        <v-radio-group v-model=\"radioSelection\">\n          <v-radio label=\"Add Selection from 3D Model\" value=\"3d\"></v-radio>\n          <v-radio label=\"Add a Group\" value=\"group\"> </v-radio>\n        </v-radio-group>\n        <v-text-field\n          v-if=\"radioSelection === 'group'\"\n          v-model=\"groupName\"\n          :counter=\"30\"\n          label=\"Group name\"\n          required\n        ></v-text-field>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"red darken-1\" flat @click=\"show = false\"> Cancel </v-btn>\n        <v-btn\n          color=\"green darken-1\"\n          flat\n          :disabled=\"canConfirm\"\n          @click=\"onConfirm\"\n        >\n          Confirm\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nexport default {\n  name: 'AddAGroup',\n  props: {},\n  data() {\n    return {\n      groupName: '',\n      show: false,\n      radioSelection: '3d',\n    };\n  },\n  computed: {\n    canConfirm() {\n      if (this.radioSelection === '3d') return false;\n      return this.groupName.length === 0 || this.groupName.length >= 30;\n    },\n  },\n  watch: {\n    show() {\n      if (this.show === false) this.groupName = '';\n    },\n  },\n  methods: {\n    onClick() {\n      this.$refs['dialog-add-a-group'].showModal();\n    },\n    onConfirm() {\n      if (this.radioSelection === '3d') {\n        this.$emit('addSelection');\n      } else {\n        this.$emit('addAGroup', this.groupName);\n      }\n      this.show = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dialog-add-a-group {\n  z-index: 99;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"spinal-bim-groups-item-content\">\n    <v-list class=\"spinal-list-scrollbar\" dense>\n      <v-list-tile v-for=\"itm in pageData\" :key=\"itm.id\" class=\"dbid-list-item\">\n        <v-list-tile-content>\n          <v-list-tile-title>{{ itm.name }}</v-list-tile-title>\n          <v-list-tile-sub-title>{{ itm.dbId }}</v-list-tile-sub-title>\n        </v-list-tile-content>\n        <v-list-tile-action class=\"dbid-list-item-action-btn\">\n          <v-btn icon ripple @click=\"deleteItem(itm)\">\n            <v-icon color=\"red\"> clear </v-icon>\n          </v-btn>\n          <v-btn icon ripple @click=\"seeItem(itm)\">\n            <v-icon color=\"green\"> visibility </v-icon>\n          </v-btn>\n        </v-list-tile-action>\n      </v-list-tile>\n\n      <v-list-tile v-if=\"item.length === 0\">\n        <v-list-tile-content>\n          <v-list-tile-title>No Item in this group</v-list-tile-title>\n        </v-list-tile-content>\n      </v-list-tile>\n    </v-list>\n\n    <v-pagination v-if=\"totalPage > 1\" v-model=\"page\" :length=\"totalPage\" />\n  </div>\n</template>\n\n<script>\nfunction itemValidator(item) {\n  return Array.isArray(item);\n}\n\nexport default {\n  name: 'BimGroupsItemContent',\n  props: {\n    index: {\n      required: true,\n      type: Number,\n    },\n    item: {\n      required: true,\n      type: Array,\n      validator: itemValidator,\n    },\n  },\n  data() {\n    return { page: 1, nbPerPage: 10 };\n  },\n  computed: {\n    pageData() {\n      const idx = (this.page - 1) * this.nbPerPage;\n      return this.item.slice(idx, idx + this.nbPerPage);\n    },\n    totalPage() {\n      return Math.ceil(this.item.length / this.nbPerPage);\n    },\n  },\n  methods: {\n    seeItem(item) {\n      this.$emit('seeItem', this.index, item);\n    },\n    deleteItem(item) {\n      this.$emit('deleteItem', this.index, item);\n    },\n  },\n};\n</script>\n<style scoped>\n.dbid-list-item-action-btn {\n  flex-direction: row;\n}\n.spinal-bim-groups-item-content {\n  text-align: center;\n  width: 100%;\n}\n</style>\n<style>\n.spinal-bim-groups-item-content .v-list__tile {\n  padding-left: 26px;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <v-container class=\"bim-groups-item-edit-offset\" fluid grid-list-lg>\n    <v-layout col align-center justify-center align-content-center wrap>\n      <input\n        type=\"color\"\n        class=\"bim-groups-item-edit-offset-color\"\n        name=\"color\"\n        v-tooltip=\"'Preview color'\"\n        v-model=\"color\"\n      />\n\n      <v-btn-toggle v-model=\"toggleView\" mandatory>\n        <v-btn\n          v-tooltip=\"'Disable preview'\"\n          :disabled=\"disabledPreview\"\n          flat\n          @click=\"$emit('onChangePreview', 0)\"\n        >\n          <v-icon>visibility_off</v-icon>\n        </v-btn>\n        <v-btn\n          v-tooltip=\"'Preview only the 1st Object'\"\n          flat\n          :disabled=\"disabledPreview\"\n          @click=\"$emit('onChangePreview', 1)\"\n        >\n          <v-icon>hdr_strong</v-icon>\n        </v-btn>\n        <v-btn\n          v-tooltip=\"'Preview all Objects'\"\n          flat\n          :disabled=\"disabledPreview\"\n          @click=\"$emit('onChangePreview', 2)\"\n        >\n          <v-icon>grain</v-icon>\n        </v-btn>\n      </v-btn-toggle>\n    </v-layout>\n    <v-layout row wrap>\n      <v-flex xs9>\n        <v-slider\n          v-model=\"_r\"\n          :step=\"0.1\"\n          :max=\"50\"\n          :min=\"-50\"\n          label=\"R\"\n        ></v-slider>\n      </v-flex>\n\n      <v-flex xs3>\n        <v-text-field v-model=\"_r\" class=\"mt-0\" type=\"number\"></v-text-field>\n      </v-flex>\n\n      <v-flex xs9>\n        <v-slider v-model=\"_t\" :step=\"1\" :max=\"360\" label=\"T\"></v-slider>\n      </v-flex>\n\n      <v-flex xs3>\n        <v-text-field v-model=\"_t\" class=\"mt-0\" type=\"number\"></v-text-field>\n      </v-flex>\n\n      <v-flex xs9>\n        <v-slider\n          v-model=\"_z\"\n          :step=\"0.1\"\n          :max=\"50\"\n          :min=\"-50\"\n          label=\"Z\"\n        ></v-slider>\n      </v-flex>\n\n      <v-flex xs3>\n        <v-text-field v-model=\"_z\" class=\"mt-0\" type=\"number\"></v-text-field>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nfunction rtzValidator(item) {\n  return (\n    typeof item.r === 'number' &&\n    typeof item.t === 'number' &&\n    typeof item.z === 'number'\n  );\n}\n\nimport throttle from 'lodash.throttle';\nimport { getColorPreview, setColorPreview } from 'spinal-spatial-referential';\nexport default {\n  name: 'BimGroupsItemEditOffset',\n  props: {\n    offset: { required: true, type: Object, validator: rtzValidator },\n    disabledPreview: { required: true, type: Boolean, default: () => false },\n  },\n  data() {\n    return {\n      toggleView: 0,\n      tmp: { r: 0, t: 0, z: 0 },\n    };\n  },\n  computed: {\n    color: {\n      get() {\n        return getColorPreview();\n      },\n      set(value) {\n        setColorPreview(value);\n      },\n    },\n    _r: {\n      get() {\n        return this.offset.r;\n      },\n      set(value) {\n        this.tmp.r = value;\n        return this.onChangeTrottle();\n      },\n    },\n    _t: {\n      get() {\n        return this.offset.t;\n      },\n      set(value) {\n        this.tmp.t = value;\n        return this.onChangeTrottle();\n      },\n    },\n    _z: {\n      get() {\n        return this.offset.z;\n      },\n      set(value) {\n        this.tmp.z = value;\n        return this.onChangeTrottle();\n      },\n    },\n  },\n  watch: {\n    offset() {\n      this.tmp.r = this.offset.r;\n      this.tmp.t = this.offset.t;\n      this.tmp.z = this.offset.z;\n    },\n  },\n  mounted() {\n    this.onChangeTrottle = throttle(this.onChange.bind(this), 500, {\n      leading: false,\n    });\n  },\n  methods: {\n    onChange() {\n      this.$emit('onChange', {\n        r: parseFloat(this.tmp.r),\n        t: parseInt(this.tmp.t, 10),\n        z: parseFloat(this.tmp.z),\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.bim-groups-item-edit-offset,\n.bim-groups-item-edit-offset * {\n  padding-bottom: 0 !important;\n  padding-top: 0 !important;\n}\n.bim-groups-item-edit-offset-color {\n  height: 36px;\n  width: 34px;\n  margin-right: 8px;\n  cursor: pointer;\n  border-radius: 3px;\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <transition name=\"bim-groups-item-edit-transi\">\n    <div v-if=\"itemToEdit !== null\" class=\"bim-groups-item-edit\">\n      <v-toolbar card color=\"black\" dark>\n        <v-toolbar-title>Edit</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-btn\n          v-tooltip=\"'Cancel'\"\n          dark\n          fab\n          small\n          color=\"red darken-2\"\n          @click=\"onCancel\"\n        >\n          <v-icon>cancel</v-icon>\n        </v-btn>\n        <v-btn\n          v-tooltip=\"'Save'\"\n          dark\n          fab\n          small\n          color=\"blue darken-2\"\n          @click=\"onValid\"\n        >\n          <v-icon>done</v-icon>\n        </v-btn>\n      </v-toolbar>\n      <v-card class=\"bim-groups-item-edit-container spinal-scrollbar\">\n        <v-card-text>\n          <div class=\"bim-groups-edit-name\">\n            <v-text-field v-model=\"name\" label=\"Name\"></v-text-field>\n          </div>\n          <v-expansion-panel class=\"bim-groups-edit-content\">\n            <v-expansion-panel-content>\n              <template v-slot:header>\n                <div>Edit items' calculation point</div>\n              </template>\n              <v-card>\n                <v-card-text>\n                  <BimGroupsItemEditOffset\n                    :offset=\"offset\"\n                    :disabled-preview=\"disabledPreview\"\n                    :mode=\"previewMode\"\n                    @onChange=\"updateOffset\"\n                    @onChangePreview=\"onChangePreview\"\n                  >\n                  </BimGroupsItemEditOffset>\n                </v-card-text>\n              </v-card>\n            </v-expansion-panel-content>\n          </v-expansion-panel>\n        </v-card-text>\n      </v-card>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport BimGroupsItemEditOffset from './BimGroupsItemEditOffset.vue';\nimport {\n  previewItem,\n  stopPreview,\n  getViewer,\n} from 'spinal-spatial-referential';\n\nfunction itemToEditValidator(item) {\n  return (\n    item === null ||\n    (item.offset &&\n      typeof item.offset.r === 'number' &&\n      typeof item.offset.t === 'number' &&\n      typeof item.offset.z === 'number')\n  );\n}\n\nexport default {\n  name: 'BimGroupsItemEdit',\n  components: { BimGroupsItemEditOffset },\n  props: {\n    itemToEdit: { required: true, validator: itemToEditValidator },\n  },\n  data() {\n    return {\n      name: '',\n      offset: { r: 0, t: 0, z: 0 },\n      uid: 0,\n      previewMode: 0,\n    };\n  },\n  conputed: {\n    disabledPreview() {\n      if (this.itemToEdit && Array.isArray(this.itemToEdit.data)) {\n        return this.itemToEdit.data.length === 0;\n      }\n      return false;\n    },\n  },\n  watch: {\n    itemToEdit() {\n      if (this.itemToEdit) {\n        this.name = this.itemToEdit.name;\n        this.offset.r = this.itemToEdit.offset.r;\n        this.offset.t = this.itemToEdit.offset.t;\n        this.offset.z = this.itemToEdit.offset.z;\n        this.uid = this.itemToEdit.uid;\n        this.previewMode = 0;\n      }\n    },\n  },\n  mounted() {},\n  methods: {\n    updateOffset(offset) {\n      console.log(offset);\n      if (isNaN(offset.r) || isNaN(offset.t) || isNaN(offset.z)) return;\n      this.offset.r = offset.r;\n      this.offset.t = offset.t;\n      this.offset.z = offset.z;\n      this.preview();\n    },\n    onChangePreview(mode) {\n      this.previewMode = mode;\n      this.preview();\n    },\n    preview() {\n      const viewer = getViewer();\n      previewItem(this.itemToEdit, this.offset, this.previewMode, viewer);\n    },\n\n    onCancel() {\n      const viewer = getViewer();\n      stopPreview(viewer);\n      this.$emit('close');\n    },\n    onValid() {\n      const viewer = getViewer();\n      stopPreview(viewer);\n      this.$emit('close', {\n        name: this.name,\n        offset: this.offset,\n        uid: this.uid,\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.bim-groups-item-edit {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  background-color: rgb(34, 34, 34);\n  opacity: 1;\n  z-index: 2;\n}\n.bim-groups-item-edit-container {\n  position: relative;\n  height: calc(100% - 56px);\n  overflow: auto;\n}\n\n.bim-groups-edit-name {\n  padding-left: 12px;\n  padding-right: 12px;\n}\n\n.bim-groups-item-edit-transi-enter-active {\n  transition: all 0.5s cubic-bezier(0.55, 0, 0.1, 1);\n}\n.bim-groups-item-edit-transi-enter,\n.bim-groups-item-edit-transi-leave-to {\n  opacity: 0;\n  transform: translateX(-1em);\n  min-width: unset;\n}\n.bim-groups-item-edit-transi-enter-to,\n.bim-groups-item-edit-transi-leave-to {\n  opacity: 1;\n  transform: translateX(0);\n  min-width: unset;\n}\n</style>\n\n<style>\n.bim-groups-edit-content .v-expansion-panel__header {\n  flex-direction: row-reverse;\n  padding: 0 5px 0 0;\n}\n.bim-groups-edit-content .v-expansion-panel__header:hover {\n  background-color: rgba(25, 25, 25, 0.2);\n}\n.bim-groups-edit-content\n  .v-expansion-panel__header\n  .v-expansion-panel__header__icon {\n  margin: 0 5px;\n}\n.bim-groups-edit-content .v-expansion-panel__header .bim-groups-item-header {\n  flex-direction: row;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <div class=\"geolocate-selected-groupe-container\">\n    <v-toolbar\n      class=\"geolocate-selected-groupe-header\"\n      color=\"black\"\n      dark\n      dense\n    >\n      <v-btn icon @click=\"$emit('back')\"><v-icon>arrow_back</v-icon></v-btn>\n      {{ name }}\n      <v-spacer></v-spacer>\n      <v-btn\n        icon\n        round\n        @click=\"$emit('save', [uid])\"\n        color=\"warning\"\n        :disabled=\"canSave\"\n      >\n        <v-icon>save</v-icon>\n      </v-btn>\n\n      <AddAGroup\n        @addAGroup=\"addAGroup\"\n        @addSelection=\"addSelection\"\n      ></AddAGroup>\n      <v-btn\n        icon\n        :disabled=\"list.length == 0\"\n        color=\"success\"\n        @click=\"generate\"\n      >\n        <v-icon>check</v-icon>\n      </v-btn>\n    </v-toolbar>\n    <div class=\"geolocate-selected-groupe-main\">\n      <md-card class=\"geolocate-groupe-card\">\n        <div class=\"geolocate-groupe-card-content spinal-scrollbar\">\n          <v-list class=\"spinal-project-item-main-list\">\n            <v-list-tile v-if=\"list.length === 0\">\n              <v-list-tile-content>\n                No Items in list, add items with the \"+\" button\n              </v-list-tile-content>\n            </v-list-tile>\n            <template v-for=\"(item, i) in list\">\n              <v-list-group\n                v-if=\"isProjectionGroup(item)\"\n                :key=\"item.uid\"\n                class=\"spinal-project-item-group-item\"\n                no-action\n              >\n                <template v-slot:activator>\n                  <v-list-tile class=\"spinal-project-item-group-item-container\">\n                    <div class=\"spinal-project-item-group-item-arrow-container\">\n                      <v-btn ripple @click.stop=\"up(i)\" :disabled=\"canUp(i)\">\n                        <v-icon> expand_less </v-icon>\n                      </v-btn>\n                      <v-btn\n                        ripple\n                        @click.stop=\"down(i)\"\n                        :disabled=\"canDown(i)\"\n                      >\n                        <v-icon> expand_more </v-icon>\n                      </v-btn>\n                    </div>\n                    <v-list-tile-content>\n                      <v-list-tile-title\n                        class=\"spinal-project-item-group-item-title-container\"\n                      >\n                        <span\n                          v-tooltip=\"item.name\"\n                          class=\"spinal-project-item-group-item-title\"\n                        >\n                          ({{ item.computedData.length }}) {{ item.name }}\n                        </span>\n                      </v-list-tile-title>\n                    </v-list-tile-content>\n                    <v-list-tile-action>\n                      <BimGroupsListHeaderBouttons\n                        :index=\"i\"\n                        @addViewerSelection=\"addViewerSelection\"\n                        @showInViewer=\"showInViewer\"\n                        @showEdit=\"showEdit\"\n                        @deleteGroup=\"deleteGroup\"\n                      >\n                      </BimGroupsListHeaderBouttons>\n                    </v-list-tile-action>\n                  </v-list-tile>\n                </template>\n                <div class=\"spinal-project-item-group-item-content\">\n                  <v-list-tile-content>\n                    <BimGroupsItemContent\n                      :index=\"i\"\n                      :item=\"item.computedData\"\n                      @seeItem=\"showInViewer\"\n                      @deleteItem=\"deleteItemIngroup\"\n                    >\n                    </BimGroupsItemContent>\n                  </v-list-tile-content>\n                </div>\n              </v-list-group>\n\n              <v-list-tile\n                v-else\n                :key=\"item.uid\"\n                class=\"spinal-project-item-group-item-container\"\n              >\n                <div class=\"spinal-project-item-group-item-arrow-container\">\n                  <v-btn ripple @click=\"up(i)\" :disabled=\"canUp(i)\">\n                    <v-icon> expand_less </v-icon>\n                  </v-btn>\n                  <v-btn ripple @click=\"down(i)\" :disabled=\"canDown(i)\">\n                    <v-icon> expand_more </v-icon>\n                  </v-btn>\n                </div>\n\n                <v-list-tile-content\n                  class=\"spinal-project-item-group-item-title-container\"\n                >\n                  <span\n                    v-tooltip=\"item.name\"\n                    class=\"spinal-project-item-group-item-title\"\n                  >\n                    {{ item.name }}\n                  </span>\n                </v-list-tile-content>\n                <v-list-tile-action>\n                  <BimGroupsListHeaderBouttons\n                    :index=\"i\"\n                    :is-item-group=\"false\"\n                    @addViewerSelection=\"addViewerSelection\"\n                    @showInViewer=\"showInViewer\"\n                    @showEdit=\"showEdit\"\n                    @deleteGroup=\"deleteGroup\"\n                  >\n                  </BimGroupsListHeaderBouttons>\n                </v-list-tile-action>\n              </v-list-tile>\n            </template>\n          </v-list>\n        </div>\n      </md-card>\n    </div>\n    <BimGroupsItemEdit\n      :item-to-edit=\"itemToEdit\"\n      @close=\"onCloseEdit\"\n    ></BimGroupsItemEdit>\n  </div>\n</template>\n\n<script>\nimport AddAGroup from './AddAGroup.vue';\nimport BimGroupsListHeaderBouttons from './BimGroupsListHeaderBouttons.vue';\nimport BimGroupsItemContent from './BimGroupsItemContent.vue';\nimport BimGroupsItemEdit from './BimGroupsItemEdit.vue';\nimport {\n  isProjectionGroup,\n  addToProjectionGroup,\n  addSelectionToList,\n  addViewerSelection,\n  getViewer,\n} from 'spinal-spatial-referential';\nexport default {\n  name: 'SelectedGroup',\n  props: ['name', 'uid', 'list', 'canSave'],\n  components: {\n    AddAGroup,\n    BimGroupsListHeaderBouttons,\n    BimGroupsItemContent,\n    BimGroupsItemEdit,\n  },\n  data() {\n    return {\n      itemToEdit: null,\n    };\n  },\n  computed: {},\n  methods: {\n    up(idx) {\n      const itm = this.list[idx];\n      this.list.splice(idx, 1);\n      this.list.splice(idx - 1, 0, itm);\n      this.$emit('savableCfg');\n    },\n    down(idx) {\n      const itm = this.list[idx];\n      this.list.splice(idx, 1);\n      this.list.splice(idx + 1, 0, itm);\n      this.$emit('savableCfg');\n    },\n    canUp(idx) {\n      return idx === 0;\n    },\n    canDown(idx) {\n      return idx === this.list.length - 1;\n    },\n    generate() {\n      this.$emit('generate', [this.uid]);\n    },\n    addSelection() {\n      this.$emit('savableCfg');\n      return addSelectionToList(this.list, getViewer());\n    },\n    addAGroup(groupeName) {\n      this.$emit('savableCfg');\n      addToProjectionGroup(this.list, groupeName);\n    },\n    isProjectionGroup: isProjectionGroup,\n    addViewerSelection(idx) {\n      this.$emit('savableCfg');\n      return addViewerSelection(idx, this.list, getViewer());\n    },\n    showInViewer(index, itm) {\n      const item = this.list[index];\n      const viewer = getViewer();\n      if (isProjectionGroup(item)) {\n        if (typeof itm === 'undefined') item.selectAll(viewer);\n        else item.selectItem(itm, viewer);\n      } else {\n        item.selectItem(viewer);\n      }\n    },\n    deleteItemIngroup(index, itm) {\n      const item = this.list[index];\n      if (isProjectionGroup(item)) {\n        this.$emit('savableCfg');\n        item.deleteItem(itm);\n      }\n    },\n    deleteGroup(index) {\n      this.$emit('savableCfg');\n      this.list.splice(index, 1);\n    },\n    showEdit(index) {\n      const item = this.list[index];\n      this.itemToEdit = item;\n    },\n    onCloseEdit(editItem) {\n      if (editItem) {\n        for (const item of this.list) {\n          if (item.uid === editItem.uid) {\n            item.name = editItem.name;\n            item.offset.r = editItem.offset.r;\n            item.offset.t = editItem.offset.t;\n            item.offset.z = editItem.offset.z;\n            this.$emit('savableCfg');\n            break;\n          }\n        }\n      }\n      this.itemToEdit = null;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.geolocate-selected-groupe-container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.geolocate-selected-groupe-header {\n  position: relative;\n  overflow: auto;\n}\n.geolocate-selected-groupe-main {\n  height: calc(100% - 48px);\n  position: relative;\n  overflow: auto;\n}\n.geolocate-groupe-card,\n.geolocate-groupe-card-content {\n  height: 100%;\n}\n.spinal-project-item-group-item-title-container {\n  position: relative;\n}\n.spinal-project-item-group-item-title {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n  overflow: hidden;\n}\n.spinal-project-item-group-item-arrow-container {\n  position: absolute;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  height: 48px;\n}\n.spinal-project-item-group-item-arrow-container > button {\n  margin: 0;\n  padding: 0;\n  height: 24px;\n  min-width: unset;\n}\n</style>\n\n<style>\n.spinal-project-item-group-item-content > .v-list__tile {\n  padding-left: unset !important;\n}\n.spinal-project-item-group-item\n  .spinal-project-item-group-item-container\n  > .v-list__tile {\n  padding-right: 0;\n}\n.spinal-project-item-group-item-container > .v-list__tile {\n  padding-right: 0;\n  padding-left: 32px;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app dark class=\"geolocate-bimObj-body\">\n    <div class=\"geolocate-bimObj-container\">\n      <GroupeConfig\n        v-if=\"selectedGroup === undefined\"\n        :groupConfigs=\"groupConfigs\"\n        @addAGroupConfig=\"addAGroupConfig\"\n        @selectGroup=\"onselectedGroup\"\n        @generate=\"generate\"\n        @save=\"onSave\"\n        @deleteGroup=\"deleteGroup\"\n      ></GroupeConfig>\n      <SelectedGroup\n        v-else\n        :name=\"selectedGroup.name\"\n        :uid=\"selectedGroup.uid\"\n        :list=\"selectedGroup.data\"\n        :can-save=\"cleanCfg\"\n        @save=\"onSave\"\n        @savableCfg=\"cleanCfg = false\"\n        @back=\"selectedGroup = undefined\"\n        @generate=\"generate\"\n      ></SelectedGroup>\n      <v-progress-linear\n        class=\"geolocate-bimObj-progressbar\"\n        v-if=\"progress != 100\"\n        v-model=\"progress\"\n      ></v-progress-linear>\n    </div>\n    <md-snackbar\n      :md-position=\"'center'\"\n      :md-active.sync=\"showSnackbar\"\n      md-persistent\n      class=\"md-accent\"\n    >\n      <span>{{ msgSnackbar }}</span>\n      <md-button class=\"md-primary\" @click=\"showSnackbar = false\"\n        >close</md-button\n      >\n    </md-snackbar>\n  </v-app>\n</template>\n\n<script>\nimport {\n  getProjectionConfig,\n  getRealNode,\n  removeConfigFromContext,\n  createConfigNodeAndProjGroup,\n  getIntersects,\n  mergeIntersectRes,\n  createCmdNotFound,\n  createCmdProjection,\n  saveCmdsProjectionGeo,\n  addNodeGraphService,\n  waitPathSendToHub,\n  getRoomRefByFloor,\n  mergeRoomRef,\n  getRefFloorZMinMax,\n} from 'spinal-spatial-referential';\nimport GroupeConfig from './groupConfig/GroupConfig.vue';\nimport SelectedGroup from './SelectedGroup/SelectedGroup.vue';\n\nexport default {\n  name: 'ProjectObjectInContext',\n  components: { GroupeConfig, SelectedGroup },\n  data() {\n    return {\n      contextId: '',\n      groupConfigs: [],\n      selectedGroup: undefined,\n      cleanCfg: true,\n      progress: 100,\n      errorMode: true,\n      msgSnackbar: '',\n      showSnackbar: false,\n    };\n  },\n  mounted() {},\n  methods: {\n    async addAGroupConfig(groupName) {\n      const context = getRealNode(this.contextId);\n      const cfgGroup = await createConfigNodeAndProjGroup(context, groupName);\n      this.groupConfigs.push(cfgGroup);\n    },\n    async onselectedGroup(select) {\n      this.progress = 0;\n      try {\n        await select.loadConfigNode();\n        this.selectedGroup = select;\n        this.progress = 100;\n      } catch (error) {\n        console.error(error);\n        this.showSnackbar = true;\n        this.msgSnackbar = error.message;\n        this.progress = 100;\n      }\n    },\n    async onSave(configUidToGens) {\n      try {\n        const context = getRealNode(this.contextId);\n        if (!configUidToGens)\n          configUidToGens = this.groupConfigs.map((it) => it.uid);\n        this.progress = 0;\n        for (let idx = 0; idx < configUidToGens.length; idx++) {\n          const group = this.getConfigByUid(configUidToGens[idx]);\n          if (!group) {\n            console.error(\n              `${configUidToGens[idx]} skipped no config found with this uid`\n            );\n            continue;\n          }\n          await group.saveToContext(context);\n          this.progress = (configUidToGens.length / (idx + 1)) * 100;\n        }\n        this.cleanCfg = true;\n      } catch (error) {\n        this.showSnackbar = true;\n        this.msgSnackbar = error.message;\n        console.error(error);\n      } finally {\n        this.progress = 100;\n      }\n    },\n    getConfigByUid(configUidToGen) {\n      for (const cfg of this.groupConfigs) {\n        if (cfg.uid === configUidToGen) return cfg;\n      }\n    },\n    async generate(configUidToGens) {\n      await this.onSave(configUidToGens);\n      this.progress = 0;\n      try {\n        const roomRef = await getRoomRefByFloor();\n        this.progress = 25;\n        const floorsZData = await getRefFloorZMinMax(roomRef);\n        const mergedRoomRef = mergeRoomRef(roomRef);\n        const intersectRes = {\n          selection: [],\n          intersects: [],\n        };\n        for (let idx = 0; idx < configUidToGens.length; idx++) {\n          const configToGen = this.getConfigByUid(configUidToGens[idx]);\n          if (!configToGen) {\n            console.error(\n              `${configUidToGens[idx]} skipped no config found with this uid`\n            );\n            continue;\n          }\n          const intersectResTmp = await getIntersects(\n            configToGen,\n            mergedRoomRef\n          );\n          // merge intersectRes\n          mergeIntersectRes(intersectRes, intersectResTmp);\n          this.progress = (configUidToGens.length / (idx + 1)) * 66;\n          console.log(\n            'raycasting %d% => %d/%d',\n            (configUidToGens.length / (idx + 1)) * 100,\n            idx + 1,\n            configUidToGens.length\n          );\n        }\n        console.log('raycasting', intersectRes);\n        const cmdNotFounds = await createCmdNotFound(intersectRes);\n        console.log('cmdNotFounds', cmdNotFounds);\n        this.progress = 80;\n        const cmdProject = await createCmdProjection(\n          intersectRes.intersects,\n          this.contextId,\n          floorsZData\n        );\n        console.log('cmdProject', cmdProject);\n        this.progress = 90;\n        const cmd = cmdNotFounds.concat(cmdProject);\n        const {\n          node,\n          context: contextCmd,\n          data,\n        } = await saveCmdsProjectionGeo(cmd);\n        addNodeGraphService(node);\n        await waitPathSendToHub(data);\n        console.log('done', cmd);\n        spinal.spinalPanelManagerService.openPanel('CmdRunViewer', {\n          dataCmd: cmd,\n          node,\n          contextId: contextCmd.info.id.get(),\n        });\n      } catch (error) {\n        console.error(error);\n      } finally {\n        this.progress = 100;\n      }\n    },\n    deleteGroup(uid) {\n      const index = this.groupConfigs.findIndex((itm) => itm.uid === uid);\n      if (index !== -1) {\n        const itm = this.groupConfigs[index];\n        this.groupConfigs.splice(index, 1);\n        const context = getRealNode(this.contextId);\n        return removeConfigFromContext(context, itm.uid);\n      }\n    },\n    async getConfig() {\n      this.progress = 0;\n      const context = getRealNode(this.contextId);\n      this.groupConfigs = await getProjectionConfig(context);\n      this.progress = 100;\n    },\n    async opened(contextId) {\n      this.contextId = contextId;\n      return this.getConfig();\n    },\n    removed() {},\n    close() {},\n    closeDialog() {},\n  },\n};\n</script>\n\n<style scoped>\n.geolocate-bimObj-body {\n  height: calc(100% - 17px);\n  position: relative;\n}\n.geolocate-bimObj-container {\n  height: 100%;\n}\n.geolocate-bimObj-progressbar {\n  z-index: 1;\n  position: absolute;\n  bottom: 0;\n  margin: 0;\n}\n</style>\n\n<style>\n.geolocate-bimObj-body > .application--wrap {\n  min-height: 100%;\n  height: 100%;\n}\n.geolocate-bimObj-body * {\n  box-sizing: border-box;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-list-tile-sub-title v-if=\"validId\" class=\"AssignDataViewRoomName\">\n    <span\n      style=\"color: #00e300\"\n      v-if=\"validCompuText === nodeName\"\n      @click.stop=\"$emit('roomSelect', nodeName)\"\n    >\n      {{ nodeName }}\n    </span>\n    <template v-else>\n      <span\n        style=\"color: #00e300\"\n        @click.stop=\"$emit('roomSelect', validCompuText)\"\n      >\n        {{ validCompuText }}\n      </span>\n      <span style=\"color: red\">\n        <s @click.stop=\"$emit('roomSelect', nodeName)\">{{ nodeName }}</s>\n      </span>\n    </template>\n  </v-list-tile-sub-title>\n  <v-list-tile-sub-title\n    class=\"AssignDataViewRoomName\"\n    v-else\n    @click.stop=\"$emit('roomSelect', nodeName)\"\n  >\n    <span style=\"color: #00e300\">\n      {{ nodeName }}\n    </span>\n  </v-list-tile-sub-title>\n</template>\n\n<script>\nimport { getRealNode } from 'spinal-spatial-referential';\n\nexport default {\n  name: 'AssignDataViewRoomName',\n  data() {\n    return {};\n  },\n  props: ['nodeName', 'validId'],\n  computed: {\n    validCompuText() {\n      const node = getRealNode(this.validId);\n      if (node) return node.info.name.get();\n      return this.validId;\n    },\n  },\n};\n</script>\n<style scoped>\n.AssignDataViewRoomName:hover {\n  background-color: #363636;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-list two-line dense class=\"AssingDataViewList-container spinal-scrollbar\">\n    <v-list-tile\n      v-for=\"item in currArr\"\n      :key=\"item.externalId\"\n      class=\"assingDataitem\"\n      ripple\n      @click=\"showItem(item)\"\n    >\n      <v-list-tile-action>\n        <v-btn icon ripple @click.stop=\"searchRoomRef(item)\">\n          <v-icon>view_compact</v-icon>\n        </v-btn>\n      </v-list-tile-action>\n\n      <v-list-tile-content>\n        <v-list-tile-title>{{ item.name }}</v-list-tile-title>\n        <AssignDataViewRoomName\n          :validId=\"item.validId\"\n          :nodeName=\"item.PName\"\n          @roomSelect=\"onRoomClick\"\n        ></AssignDataViewRoomName>\n      </v-list-tile-content>\n\n      <v-list-tile-action>\n        <v-btn\n          icon\n          ripple\n          :disabled=\"!roomSelected\"\n          @click.stop=\"onValid(item)\"\n        >\n          <v-icon>check</v-icon>\n        </v-btn>\n      </v-list-tile-action>\n    </v-list-tile>\n    <v-divider></v-divider>\n    <v-subheader> Done </v-subheader>\n    <v-list-tile\n      v-for=\"item in doneArr\"\n      ripple\n      @click=\"showItem(item)\"\n      class=\"assingDataitem\"\n      :key=\"item.externalId\"\n    >\n      <v-list-tile-content>\n        <v-list-tile-title>{{ item.name }}</v-list-tile-title>\n        <AssignDataViewRoomName\n          :validId=\"item.validId\"\n          :nodeName=\"item.PName\"\n          @roomSelect=\"onRoomClick\"\n        ></AssignDataViewRoomName>\n      </v-list-tile-content>\n      <v-list-tile-action>\n        <v-btn icon ripple @click.stop=\"onCancel(item)\">\n          <v-icon>cancel</v-icon>\n        </v-btn>\n      </v-list-tile-action>\n    </v-list-tile>\n  </v-list>\n</template>\n<script>\nimport AssignDataViewRoomName from './AssignDataViewRoomName.vue';\nimport {\n  viewDataAssignInViewer,\n  getRoomRef,\n  getContextSpatial,\n  getModelByBimFileIdLoaded,\n  getGraph,\n  getViewer,\n} from 'spinal-spatial-referential';\n\nexport default {\n  name: 'AssingDataViewList',\n  props: ['items', 'roomSelected'],\n  components: { AssignDataViewRoomName },\n  data() {\n    return {\n      currArr: [],\n      doneArr: [],\n    };\n  },\n  mounted() {\n    this.updateData();\n  },\n  watch: {\n    items() {\n      this.updateData();\n    },\n  },\n  methods: {\n    updateData() {\n      if (!this.items) return;\n      this.currArr = [];\n      this.doneArr = [];\n      for (const item of this.items) {\n        if (item.validId) this.doneArr.push(item);\n        else this.currArr.push(item);\n      }\n    },\n    onValid(item) {\n      item.validId = this.roomSelected;\n      this.updateData();\n    },\n    async searchRoomRef(item) {\n      const modelDbid = getModelByBimFileIdLoaded(item.bimFileId);\n      if (modelDbid) {\n        const graph = getGraph();\n        const contextGeo = await getContextSpatial(graph);\n        const aggrData = await getRoomRef(contextGeo);\n        for (const { model, dbId } of aggrData) {\n          if (model === modelDbid) {\n            dbId.add(item.dbid);\n            break;\n          }\n        }\n        const data = aggrData.map((itm) => {\n          return {\n            model: itm.model,\n            selection: Array.from(itm.dbId),\n          };\n        });\n        const viewer = getViewer();\n        viewer.impl.visibilityManager.aggregateIsolate(data);\n        viewer.fitToView([item.dbid], modelDbid);\n        viewer.select([item.dbid], modelDbid);\n      }\n    },\n    showItem(item) {\n      viewDataAssignInViewer(\n        item.dbid,\n        item.bimFileId,\n        this.roomSelected,\n        item.validId,\n        item.PNId\n      );\n    },\n    onCancel(item) {\n      item.validId = '';\n      this.updateData();\n    },\n    onRoomClick(itemId) {\n      this.$emit('roomSelect', itemId);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.assingDataSelected {\n  background-color: #365bab !important;\n}\n.assingDataitem * {\n  color: #fff !important;\n  text-decoration: none !important;\n}\n.AssingDataViewList-container {\n  height: 100%;\n  overflow: auto;\n}\n</style>\n\n<style>\n.AssingDataViewList-container .v-list__tile__action {\n  min-width: 36px;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <v-tabs class=\"AssingDataView-vtabs\" v-model=\"active\" dark fixed-tabs grow>\n    <v-tab ripple> Warnings ({{ warnLen }})</v-tab>\n    <v-tab ripple> Error ({{ errLen }})</v-tab>\n    <v-tab-item class=\"AssingDataView-tab-container\">\n      <AssingDataViewList\n        :roomSelected=\"roomSelected\"\n        :items=\"warnArr\"\n        @roomSelect=\"onRoomSelect\"\n      ></AssingDataViewList>\n    </v-tab-item>\n    <v-tab-item class=\"AssingDataView-tab-container\">\n      <AssingDataViewList\n        :roomSelected=\"roomSelected\"\n        :items=\"errorArr\"\n        @roomSelect=\"onRoomSelect\"\n      ></AssingDataViewList\n    ></v-tab-item>\n  </v-tabs>\n</template>\n\n<script>\nimport {\n  getDataAssing,\n  createCmdProjectionForManualAssing,\n  saveCmdsProjectionGeo,\n  addNodeGraphService,\n  waitPathSendToHub,\n} from 'spinal-spatial-referential';\nimport { debounce } from 'lodash';\nimport AssingDataViewList from './AssingDataViewList.vue';\n\nexport default {\n  name: 'AssingDataView',\n  components: { AssingDataViewList },\n  data() {\n    return {\n      active: 0,\n      warnArr: [],\n      errorArr: [],\n    };\n  },\n  props: ['contextId', 'selectedNodeId', 'roomSelected'],\n  computed: {\n    warnLen() {\n      return this.warnArr.reduce((acc, item) => {\n        if (!item.validId) acc += 1;\n        return acc;\n      }, 0);\n    },\n    errLen() {\n      return this.errorArr.reduce((acc, item) => {\n        if (!item.validId) acc += 1;\n        return acc;\n      }, 0);\n    },\n  },\n  mounted() {\n    return this.update();\n  },\n  created() {\n    this.update = debounce(this._updateData, 100);\n  },\n  watch: {\n    contextId() {\n      this.update();\n    },\n    selectedNodeId() {\n      this.update();\n    },\n  },\n  methods: {\n    async _updateData() {\n      if (!this.contextId || !this.selectedNodeId) return;\n      const data = await getDataAssing({\n        contextId: this.contextId,\n        selectedNodeId: this.selectedNodeId,\n      });\n      this.errorArr = data.error;\n      this.warnArr = data.warn;\n      if (this.warnArr.length === 0 && this.errorArr.length) this.active = 1;\n    },\n    onRoomSelect(roomId) {\n      this.$emit('roomSelect', roomId);\n    },\n    async generate() {\n      const { cmd, cmdMiss } = await createCmdProjectionForManualAssing(\n        this.warnArr,\n        this.errorArr\n      );\n      const cmds = cmd.concat(cmdMiss);\n      const {\n        node,\n        context: contextCmd,\n        data,\n      } = await saveCmdsProjectionGeo(cmds);\n      addNodeGraphService(node);\n      await waitPathSendToHub(data);\n      console.log('done', cmd);\n      spinal.spinalPanelManagerService.openPanel('CmdRunViewer', {\n        dataCmd: cmd,\n        node,\n        contextId: contextCmd.info.id.get(),\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.AssingDataView-vtabs {\n  height: 100%;\n}\n</style>\n\n<style>\n.AssingDataView-vtabs *:hover {\n  text-decoration: none !important;\n}\n.AssingDataView-vtabs .v-window {\n  height: calc(100% - 48px);\n  position: relative;\n}\n.AssingDataView-vtabs .v-window .v-window__container,\n.AssingDataView-vtabs .AssingDataView-tab-container {\n  height: 100%;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app dark class=\"manual-assign-projection-body\">\n    <v-toolbar dense dark>\n      <v-btn\n        v-tooltip=\"'import floor to search bar'\"\n        icon\n        @click=\"importFloorToSearch\"\n      >\n        <v-icon>image_search</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn icon @click=\"generate\">\n        <v-icon>check</v-icon>\n      </v-btn>\n    </v-toolbar>\n    <div class=\"manual-assign-projection-container\">\n      <div class=\"manual-assign-projection-spatial-container\">\n        <v-text-field\n          v-model=\"search\"\n          label=\"search\"\n          dark\n          flat\n          hide-details\n          clearable\n          clear-icon=\"clear\"\n        ></v-text-field>\n        <div\n          class=\"manual-assign-projection-treeview-container spinal-scrollbar\"\n        >\n          <v-treeview\n            v-if=\"spatial.length > 0\"\n            ref=\"assingTree\"\n            :items=\"spatial\"\n            activatable\n            active-class=\"manual-assign-projection-treeview-item-active\"\n            :active.sync=\"selectedSpatial\"\n            open-all\n            :search=\"search\"\n            return-object\n            transition\n          >\n          </v-treeview>\n        </div>\n      </div>\n      <div class=\"manual-assign-projection-list-container spinal-scrollbar\">\n        <AssingDataView\n          ref=\"assingDataView\"\n          :roomSelected=\"selectedSpatialIdCompu\"\n          :contextId=\"contextId\"\n          :selectedNodeId=\"selectedNodeId\"\n          @roomSelect=\"onRoomSelect\"\n        ></AssingDataView>\n      </div>\n    </div>\n  </v-app>\n</template>\n\n<script>\nimport {\n  getSpatialTree,\n  getRoomNodeFromSelectFloor,\n} from 'spinal-spatial-referential';\nimport AssingDataView from './AssingDataView.vue';\n\nexport default {\n  name: 'AssingView',\n  components: { AssingDataView },\n  data() {\n    return {\n      search: '',\n      contextId: '',\n      selectedNodeId: '',\n      spatial: [],\n      selectedSpatial: [],\n    };\n  },\n  computed: {\n    selectedSpatialIdCompu() {\n      if (this.selectedSpatial[0] && this.selectedSpatial[0].type === 'room')\n        return this.selectedSpatial[0].id;\n      return '';\n    },\n  },\n  async mounted() {\n    this.spatial = await getSpatialTree();\n  },\n  methods: {\n    onRoomSelect(name) {\n      console.log('onRoomSelect', name);\n      this.search = name;\n    },\n    async importFloorToSearch() {\n      const roomNode = await getRoomNodeFromSelectFloor();\n      if (roomNode) {\n        this.search = roomNode.info.name.get();\n      }\n    },\n    async generate() {\n      this.$refs.assingDataView.generate();\n    },\n    async opened({ contextId, selectedNodeId }) {\n      this.contextId = contextId;\n      this.selectedNodeId = selectedNodeId;\n    },\n    removed() {},\n    close() {},\n    closeDialog() {},\n  },\n};\n</script>\n\n<style scoped>\n.manual-assign-projection-body {\n  height: calc(100% - 17px);\n  position: relative;\n}\n.manual-assign-projection-container {\n  position: relative;\n  height: calc(100% - 48px);\n  display: flex;\n  flex-direction: row;\n}\n.manual-assign-projection-container > div {\n  width: 50%;\n  height: 100%;\n  overflow: auto;\n  min-width: 200px;\n}\n.manual-assign-projection-treeview-container {\n  height: calc(100% - 48px);\n  overflow: auto;\n}\n.manual-assign-projection-spatial-container {\n  margin: 0 8px;\n}\n</style>\n\n<style>\n.manual-assign-projection-body > .application--wrap {\n  min-height: 100%;\n  height: 100%;\n}\n.manual-assign-projection-body * {\n  box-sizing: border-box;\n}\n.manual-assign-projection-treeview-item-active {\n  background-color: #e3db00 !important;\n  color: black;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <v-list dark two-line>\n    <v-subheader v-if=\"archiData === undefined\"> loading... </v-subheader>\n    <v-subheader v-else-if=\"archiData.length === 0\"> no data </v-subheader>\n    <v-list-group\n      v-else\n      v-for=\"FAData in archiData\"\n      :key=\"FAData.floorArchi.properties.externalId\"\n      no-action\n      :lazy=\"true\"\n    >\n      <template v-slot:activator>\n        <v-list-tile\n          ripple\n          class=\"spinal-item-tile\"\n          :class=\"getColor(FAData.floorArchi.properties.modificationType)\"\n          @click=\"onSelectFloor(FAData)\"\n        >\n          <v-list-tile-action>\n            <v-btn\n              @click.stop=\"\n                onClickCheckbox(FAData.floorArchi.properties.externalId)\n              \"\n              ripple\n              circle\n              dense\n              icon\n            >\n              <v-icon\n                v-if=\"isInSkipList(FAData.floorArchi.properties.externalId)\"\n                >check_box_outline_blank</v-icon\n              >\n              <v-icon v-else>check_box</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title class=\"spinal-list-tile-title\">{{\n              getName(FAData)\n            }}</v-list-tile-title>\n            <v-list-tile-sub-title class=\"spinal-list-tile-title\">\n              {{ getFloorSummData(FAData) }}\n            </v-list-tile-sub-title>\n            <v-list-tile-sub-title class=\"spinal-list-tile-title\">\n              {{ getFloorSummRoom(FAData) }}\n            </v-list-tile-sub-title>\n            <v-list-tile-sub-title class=\"spinal-list-tile-title\">\n              {{ getFloorSummStruct(FAData) }}\n            </v-list-tile-sub-title>\n          </v-list-tile-content>\n        </v-list-tile>\n      </template>\n      <template v-if=\"FAData.diff\">\n        <v-list-tile\n          ripple\n          class=\"spinal-item-tile spinal-subitem-tile spinal-item-tile-delete\"\n          v-for=\"serverId in FAData.diff.diffRoom.delRooms\"\n          @click=\"onSelectRoom(FAData, serverId, 'delete')\"\n          :key=\"serverId\"\n        >\n          <v-list-tile-action>\n            <v-btn\n              @click.stop=\"onClickCheckbox(serverId)\"\n              ripple\n              circle\n              dense\n              icon\n              :disabled=\"isInSkipList(FAData.floorArchi.properties.externalId)\"\n            >\n              <v-icon\n                v-if=\"\n                  isInSkipList(\n                    serverId,\n                    FAData.floorArchi.properties.externalId\n                  )\n                \"\n                >check_box_outline_blank</v-icon\n              >\n              <v-icon v-else>check_box</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n          <v-list-tile-content>\n            <v-list-tile-title class=\"spinal-list-tile-title\">{{\n              getRoomNameNode(serverId)\n            }}</v-list-tile-title>\n            <v-list-tile-sub-title class=\"spinal-list-tile-title\">\n              server id : {{ serverId }}\n            </v-list-tile-sub-title>\n          </v-list-tile-content>\n        </v-list-tile>\n        <v-list-tile\n          class=\"spinal-item-tile spinal-subitem-tile\"\n          v-for=\"subItem in FAData.diff.diffRoom.newRooms\"\n          @click=\"onSelectRoom(FAData, subItem, 'new')\"\n          :key=\"subItem.properties.externalId\"\n          :class=\"getColor(subItem.properties.modificationType)\"\n        >\n          <v-list-tile-action>\n            <v-btn\n              @click.stop=\"onClickCheckbox(subItem.properties.externalId)\"\n              ripple\n              circle\n              dense\n              icon\n              :disabled=\"isInSkipList(FAData.floorArchi.properties.externalId)\"\n            >\n              <v-icon\n                v-if=\"\n                  isInSkipList(\n                    subItem.properties.externalId,\n                    FAData.floorArchi.properties.externalId\n                  )\n                \"\n                >check_box_outline_blank</v-icon\n              >\n              <v-icon v-else>check_box</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title class=\"spinal-list-tile-title\">{{\n              getRoomNameArchi(subItem)\n            }}</v-list-tile-title>\n          </v-list-tile-content>\n        </v-list-tile>\n\n        <v-list-tile\n          ripple\n          class=\"spinal-item-tile spinal-subitem-tile\"\n          v-for=\"subItem in FAData.diff.diffRoom.updateRooms\"\n          :class=\"getColor(subItem.roomArchi.properties.modificationType)\"\n          :key=\"subItem.roomArchi.properties.externalId\"\n          @click=\"onSelectRoom(FAData, subItem, 'update')\"\n        >\n          <v-list-tile-action>\n            <v-btn\n              @click.stop=\"\n                onClickCheckbox(subItem.roomArchi.properties.externalId)\n              \"\n              :disabled=\"isInSkipList(FAData.floorArchi.properties.externalId)\"\n              ripple\n              circle\n              dense\n              icon\n            >\n              <v-icon\n                v-if=\"\n                  isInSkipList(\n                    subItem.roomArchi.properties.externalId,\n                    FAData.floorArchi.properties.externalId\n                  )\n                \"\n                >check_box_outline_blank</v-icon\n              >\n              <v-icon v-else>check_box</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title class=\"spinal-list-tile-title\">{{\n              getRoomName(subItem)\n            }}</v-list-tile-title>\n            <v-list-tile-sub-title class=\"spinal-list-tile-title\">\n              {{ getSumData(subItem.diff) }}\n            </v-list-tile-sub-title>\n          </v-list-tile-content>\n        </v-list-tile>\n      </template>\n    </v-list-group>\n  </v-list>\n</template>\n\n<script>\nimport { EModificationType } from 'spinal-spatial-referential';\nimport { FileSystem } from 'spinal-core-connectorjs';\nimport { SpinalNode } from 'spinal-model-graph';\nimport { eventBus } from './eventbus';\n\nexport default {\n  name: 'SpinalDiffFloorViewer',\n  props: ['archiData', 'value'],\n  data() {\n    return {\n      selectedItem: null,\n    };\n  },\n  methods: {\n    getIcon(modificationType) {\n      if (modificationType & EModificationType.update) return 'update';\n      if (modificationType & EModificationType.create) return 'new-box';\n      return 'delete';\n    },\n    getColor(modificationType) {\n      if (modificationType & EModificationType.update)\n        return { 'spinal-item-tile-update': true };\n      if (modificationType & EModificationType.create)\n        return { 'spinal-item-tile-create': true };\n      if (modificationType & EModificationType.delete)\n        return { 'spinal-item-tile-delete': true };\n    },\n    getName(FAData) {\n      if (FAData.diff) {\n        if (FAData.diff.diffInfo && FAData.diff.diffInfo.diffInfo) {\n          for (const { label, archiValue } of FAData.diff.diffInfo.diffInfo) {\n            if (label === 'name') return archiValue;\n          }\n        }\n      }\n      for (const { name, value } of FAData.floorArchi.properties.properties) {\n        if (name === 'name') return value;\n      }\n    },\n    getRoomName(RAData) {\n      if (RAData.diff) {\n        if (RAData.diff.diffInfo && RAData.diff.diffInfo.diffInfo) {\n          for (const { label, archiValue } of RAData.diff.diffInfo.diffInfo) {\n            if (label === 'name') return archiValue;\n          }\n        }\n      }\n      return this.getRoomNameArchi(RAData.roomArchi);\n    },\n    getRoomNameArchi(roomArchi) {\n      let resName, resNumber;\n      for (const { name, value } of roomArchi.properties.properties) {\n        if (name === 'name') resName = value;\n        if (name === 'number') resNumber = value;\n      }\n      if (resNumber && resName) return `${resNumber}-${resName}`;\n      return 'unamed';\n    },\n    getRoomNameNode(server_id) {\n      const node = FileSystem._objects[server_id];\n      if (node instanceof SpinalNode && node.info.name) {\n        return node.info.name.get();\n      }\n      return server_id;\n    },\n    getFloorSummData(FAData) {\n      if (FAData.diff) {\n        return this.getSumData(FAData.diff.diffInfo);\n      }\n      return '';\n    },\n    getSumData(diffInfo) {\n      if (!diffInfo) return '';\n      const tmp = [];\n      if (diffInfo.diffAttr.length > 0) {\n        tmp.push(`${diffInfo.diffAttr.length} attribute(s)`);\n      }\n      if (diffInfo.diffInfo.length > 0) {\n        tmp.push(`${diffInfo.diffInfo.length} nodeinfo(s)`);\n      }\n      if (tmp.length === 0) return '';\n      return tmp.join(', ');\n    },\n    getFloorSummRoom(FAData) {\n      if (FAData.diff) {\n        const tmp = [];\n        if (FAData.diff.diffRoom.delRooms.length > 0) {\n          tmp.push(`${FAData.diff.diffRoom.delRooms.length} Delete`);\n        }\n        if (FAData.diff.diffRoom.newRooms.length > 0) {\n          tmp.push(`${FAData.diff.diffRoom.newRooms.length} New`);\n        }\n        if (FAData.diff.diffRoom.updateRooms.length > 0) {\n          tmp.push(`${FAData.diff.diffRoom.updateRooms.length} Update`);\n        }\n        if (tmp.length === 0) return '';\n        return 'Rooms: ' + tmp.join(', ');\n      }\n      return '';\n    },\n    getFloorSummStruct(FAData) {\n      if (FAData.diff) {\n        const tmp = [];\n        if (FAData.diff.diffRef.delBimObj.length > 0) {\n          tmp.push(`${FAData.diff.diffRef.delBimObj.length} Delete`);\n        }\n        if (FAData.diff.diffRef.newBimObj.length > 0) {\n          tmp.push(`${FAData.diff.diffRef.newBimObj.length} New`);\n        }\n        if (tmp.length === 0) return '';\n        return 'Structure reference: ' + tmp.join(', ');\n      }\n      return '';\n    },\n    onSelectFloor(FAData) {\n      eventBus.$emit('selectFloor', FAData);\n    },\n    onSelectRoom(FAData, RAData, type) {\n      eventBus.$emit('selectRoom', { FAData, RAData, type });\n    },\n    onClickCheckbox(id, type) {\n      const idx = this.value.findIndex((itm) => itm.id === id);\n      if (idx === -1) {\n        this.$emit('pushSkip', { id, type });\n      } else {\n        this.$emit('rmAtSkip', idx);\n      }\n    },\n    isInSkipList(id, parentId) {\n      const fct = (itm) => itm.id === id;\n      if (parentId)\n        return (\n          this.value.some((itm) => itm.id === parentId) || this.value.some(fct)\n        );\n      return this.value.some(fct);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.spinal-list-tile-title {\n  color: white;\n}\n.spinal-item-tile {\n  position: relative;\n}\n</style>\n<style>\n.spinal-subitem-tile > a {\n  padding-left: 24px !important;\n}\n.spinal-item-tile .v-list__tile__action {\n  min-width: 32px;\n}\n.spinal-item-tile > a {\n  text-decoration: none !important;\n  padding: 0px 8px;\n}\n.spinal-item-tile .v-list__tile__action > button i {\n  color: #fff;\n}\n.spinal-item-tile.spinal-item-tile-update .v-list__tile__action > button i {\n  color: #71b3ff;\n}\n.spinal-item-tile.spinal-item-tile-create .v-list__tile__action > button i {\n  color: #49c750;\n}\n.spinal-item-tile.spinal-item-tile-delete .v-list__tile__action > button i {\n  color: #ff9090;\n}\n.SpinalDiffViewer-content\n  .v-list__group__header\n  .v-list__group__header__append-icon {\n  padding: 0px 8px;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <div class=\"SpinalDiffViewer-container\">\n    <div class=\"SpinalDiffViewer-header\">\n      <v-btn dark @click=\"closeDialog\" round :icon=\"true\">\n        <v-icon>close</v-icon>\n      </v-btn>\n\n      <v-spacer></v-spacer>\n      <v-btn dark @click=\"generate\" round :icon=\"true\">\n        <v-icon>check</v-icon>\n      </v-btn>\n    </div>\n    <div class=\"SpinalDiffViewer-content spinal-scrollbar\">\n      <SpinalDiffFloorViewer\n        :archiData=\"archiData\"\n        v-model=\"skipList\"\n        @pushSkip=\"pushSkip\"\n        @rmAtSkip=\"rmAtSkip\"\n      ></SpinalDiffFloorViewer>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SpinalDiffFloorViewer from './SpinalDiffFloorViewer.vue';\nimport {\n  generateCmdGeo,\n  saveCmdsGenerateGeo,\n  addNodeGraphService,\n  waitPathSendToHub,\n} from 'spinal-spatial-referential';\nconst SpinalDiffViewer = {\n  name: 'SpinalDiffViewer',\n  props: ['onFinised'],\n  components: { SpinalDiffFloorViewer },\n  data() {\n    this.manualAssingment = null;\n    return {\n      showDialog: true,\n      contextServerid: 0,\n      archiData: undefined,\n      skipList: [],\n      loading: false,\n    };\n  },\n  methods: {\n    opened(option) {\n      if (option) {\n        this.archiData = option.archiData;\n        this.manualAssingment = option.manualAssingment;\n        this.buildingServerId = option.buildingServerId;\n        this.bimFileId = option.bimFileId;\n      }\n    },\n    removed(option) {\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') this.onFinised();\n    },\n    pushSkip(itm) {\n      this.skipList.push(itm);\n    },\n    rmAtSkip(idx) {\n      this.skipList.splice(idx, 1);\n    },\n    async generate() {\n      this.loading = true;\n      try {\n        const cmds = await generateCmdGeo(\n          this.archiData,\n          this.skipList,\n          this.buildingServerId,\n          this.bimFileId\n        );\n        const { node, context, data } = await saveCmdsGenerateGeo(cmds);\n        addNodeGraphService(node);\n        await waitPathSendToHub(data);\n        spinal.spinalPanelManagerService.openPanel('CmdRunViewer', {\n          dataCmd: cmds,\n          node,\n          contextId: context.info.id.get(),\n        });\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.loading = false;\n      }\n    },\n  },\n};\n\nexport default SpinalDiffViewer;\n</script>\n\n<style scoped>\n.SpinalDiffViewer-container {\n  background-color: #424242;\n  height: 100%;\n  width: 100%;\n  position: relative;\n}\n.SpinalDiffViewer-header {\n  background-color: #222;\n  display: flex;\n}\n.SpinalDiffViewer-content {\n  height: calc(100% - 60px);\n  overflow: auto;\n}\n</style>\n\n<style>\n.plugin-graph-viewer {\n  position: relative;\n}\n.plugin-graph-viewer > .spinal-modal-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 10;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-progress-bar\n      class=\"command-run-progress-bar\"\n      v-for=\"index in cmdLen.length\"\n      :key=\"index\"\n      md-mode=\"determinate\"\n      :md-value=\"getProgress(index)\"\n    ></md-progress-bar>\n  </div>\n</template>\n\n<script>\nimport {\n  getCmdServId,\n  decodeCmds,\n  consumeCmdGeo,\n} from 'spinal-spatial-referential';\nimport Axios from 'axios';\n\nexport default {\n  name: 'CmdRunViewerGeo',\n  props: [],\n  data() {\n    return {\n      cmdLen: [],\n      indexCmd: 0,\n      idxInCmd: 0,\n      status: 0,\n    };\n  },\n  watch: {\n    status(value) {\n      this.$emit('status', value);\n    },\n  },\n  methods: {\n    async setUp(node, contextId) {\n      this.indexCmd = 0;\n      this.idxInCmd = 0;\n      this.status = 0;\n      this.nodeId = node.info.id.get();\n      this.contextId = contextId;\n      const servId = getCmdServId(node);\n      const getData = await Axios.get(`/sceen/_?u=${servId}`, {\n        responseType: 'blob',\n      });\n      const arrayBuffer = await getData.data.arrayBuffer();\n      this.dataCmd = decodeCmds(arrayBuffer);\n      this.cmdLen = this.dataCmd.map((it) => it.length);\n      console.log('this.dataCmd', this.dataCmd, this.cmdLen);\n    },\n    async start() {\n      try {\n        this.status = 1;\n        console.log('dataCmdRes', this.dataCmd);\n        await consumeCmdGeo(\n          this.dataCmd,\n          this.nodeId,\n          this.contextId,\n          this.progress\n        );\n        this.status = 2;\n        console.log('doing 2nd pass');\n        await consumeCmdGeo(\n          this.dataCmd,\n          this.nodeId,\n          this.contextId,\n          this.progress\n        );\n        this.status = 3;\n      } catch (error) {\n        this.status = 4;\n        throw error;\n      }\n    },\n    progress(indexCmd, idxInCmd) {\n      this.indexCmd = indexCmd;\n      this.idxInCmd = idxInCmd;\n      console.log(\n        `${indexCmd + 1}/${this.cmdLen.length} => ${idxInCmd}/${\n          this.cmdLen[indexCmd]\n        }`\n      );\n    },\n\n    getProgress(index) {\n      if (this.status === 3) return 100;\n      if (this.status === 1 || this.status === 2) {\n        if (this.indexCmd < index) return 0;\n        if (this.indexCmd > index) return 100;\n        return (this.idxInCmd / this.cmdLen[index]) * 100;\n      }\n      return 0;\n    },\n  },\n};\n</script>\n<style scoped>\n.command-run-progress-bar {\n  margin: 2px 0;\n}\n</style>\n","<!--\nCopyright 2023 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-progress-bar\n      class=\"command-run-progress-bar\"\n      md-mode=\"determinate\"\n      :md-value=\"progress\"\n    ></md-progress-bar>\n  </div>\n</template>\n\n<script>\nimport {\n  getCmdServId,\n  decodeCmds,\n  consumeCmdProjection,\n} from 'spinal-spatial-referential';\nimport Axios from 'axios';\n\nexport default {\n  name: 'CmdRunViewerProjection',\n  props: [],\n  data() {\n    return {\n      progress: 0,\n      nodeId: '',\n      contextId: '',\n    };\n  },\n  methods: {\n    async setUp(node, contextId) {\n      this.$emit('status', 0);\n      this.progress = 0;\n      this.nodeId = node.info.id.get();\n      this.contextId = contextId;\n      const servId = getCmdServId(node);\n      const getData = await Axios.get(`/sceen/_?u=${servId}`, {\n        responseType: 'blob',\n      });\n      const arrayBuffer = await getData.data.arrayBuffer();\n      this.dataCmd = decodeCmds(arrayBuffer);\n      console.log('this.dataCmd', this.dataCmd);\n    },\n    async start() {\n      try {\n        this.$emit('status', 1);\n        this.progress = 0;\n        console.log('dataCmdRes', this.dataCmd);\n        await consumeCmdProjection(\n          this.dataCmd,\n          this.nodeId,\n          this.contextId,\n          this.onProgress\n        );\n        this.$emit('status', 2);\n        console.log('doing 2nd pass');\n        await consumeCmdProjection(\n          this.dataCmd,\n          this.nodeId,\n          this.contextId,\n          this.onProgress\n        );\n        this.$emit('status', 3);\n      } catch (error) {\n        this.$emit('status', 4);\n        throw error;\n      }\n    },\n    onProgress(percent) {\n      console.log('onProgress => %d %', percent);\n      this.progress = percent;\n    },\n  },\n};\n</script>\n<style scoped>\n.command-run-progress-bar {\n  margin: 2px 0;\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-generate-spatial-reference.0203f7bb.css.map"}