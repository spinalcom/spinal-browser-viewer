{"mappings":"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","sources":["src/assets/Autodesk.ADN.Viewing.Extension.Color.js"],"sourcesContent":["/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n///////////////////////////////////////////////////////////////////////////////\n// Autodesk.ADN.Viewing.Extension.Color\n//\n///////////////////////////////////////////////////////////////////////////////\nAutodeskNamespace(\"Autodesk.ADN.Viewing.Extension\");\nAutodesk.ADN.Viewing.Extension.Color = function (viewer, options) {\n  Autodesk.Viewing.Extension.call(this, viewer, options);\n\n  // var overlayName = \"temperary-colored-overlay\";\n  var _self = this;\n  _self.viewer = viewer;\n  _self.materials = {};\n  var promise = null;\n\n  function initialize() {\n    if (promise == null)\n      promise = new Promise(res => {\n        _self.viewer.addEventListener(\n          Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n          function onObjectTreeLoadEvent() {\n            _self.viewer.removeEventListener(\n              Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n              onObjectTreeLoadEvent\n            );\n            res();\n          }\n        );\n      });\n    return promise;\n  }\n  _self.load = function () {\n    initialize();\n    console.log(\"Autodesk.ADN.Viewing.Extension.Color loaded\");\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Generate GUID\n    //\n    ///////////////////////////////////////////////////////////////////////////\n    function newGuid() {\n      var d = new Date().getTime();\n      var guid = \"xxxx-xxxx-xxxx-xxxx-xxxx\".replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == \"x\" ? r : (r & 0x7) | 0x8).toString(16);\n      });\n      return guid;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // add new material\n    //\n    ///////////////////////////////////////////////////////////////////////////\n    function addMaterial(color, id) {\n      _self.materials[id] = new THREE.MeshPhongMaterial({ color: color });\n      // viewer.impl.matman().addMaterial(newGuid(), material);\n\n      _self.viewer.impl.createOverlayScene(\n        id,\n        _self.materials[id],\n        _self.materials[id]\n      );\n      return _self.materials[id];\n    }\n\n    function cutHex(h) {\n      return h.charAt(0) == \"#\" ? h.substring(1, 7) : h;\n    }\n    ///////////////////////////////////////////////////////////////////////////\n    // Set color for nodes\n    // objectIds should be an array of dbId\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n    Autodesk.Viewing.Viewer3D.prototype.setColorMaterial = function (\n      objectIds,\n      color\n    ) {\n      initialize()\n        .then(() => {\n          for (var i = 0; i < objectIds.length; i++) {\n            var dbid = objectIds[i];\n\n            if (_self.materials[dbid]) {\n              _self.materials[dbid].color.setHex(parseInt(cutHex(color), 16));\n              _self.viewer.impl.invalidate(false, false, true);\n            } else {\n              var material = addMaterial(color, dbid);\n              // from dbid to node, to fragid\n\n              let it = _self.viewer.model.getData().instanceTree;\n              it.enumNodeFragments(\n                dbid,\n                function (fragId) {\n                  var renderProxy = _self.viewer.impl.getRenderProxy(\n                    _self.viewer.model,\n                    fragId\n                  );\n                  renderProxy[dbid] = new THREE.Mesh(\n                    renderProxy.geometry,\n                    material\n                  );\n\n                  renderProxy[dbid].matrix.copy(renderProxy.matrixWorld);\n                  renderProxy[dbid].matrixWorldNeedsUpdate = true;\n                  renderProxy[dbid].matrixAutoUpdate = false;\n                  renderProxy[dbid].frustumCulled = false;\n\n                  _self.viewer.impl.addOverlay(dbid, renderProxy[dbid]);\n                  _self.viewer.impl.invalidate(true);\n                },\n                false\n              );\n            }\n          }\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    };\n\n    Autodesk.Viewing.Viewer3D.prototype.restoreColorMaterial = function (\n      objectIds\n    ) {\n      for (var i = 0; i < objectIds.length; i++) {\n        var dbid = objectIds[i];\n\n        // from dbid to node, to fragid\n        var it = _self.viewer.model.getData().instanceTree;\n\n        if (_self.materials[dbid]) delete _self.materials[dbid];\n\n        it.enumNodeFragments(\n          dbid,\n          function (fragId) {\n            var renderProxy = _self.viewer.impl.getRenderProxy(\n              _self.viewer.model,\n              fragId\n            );\n\n            if (renderProxy[dbid]) {\n              // remove all overlays with same name\n              _self.viewer.impl.clearOverlay(dbid);\n              //_self.viewer.impl.removeOverlay(id, renderProxy[id]);\n              delete renderProxy[dbid];\n\n              // refresh the sence\n              _self.viewer.impl.invalidate(true);\n            }\n          },\n          true\n        );\n      }\n    };\n\n    Autodesk.Viewing.Viewer3D.prototype.colorAllMaterials = function (objects) {\n      for (var i = 0; i < objects.length; i++) {\n        this.setColorMaterial(objects[i].ids, objects[i].color, objects[i].id);\n      }\n    };\n\n    Autodesk.Viewing.Viewer3D.prototype.restoreAllMaterialColor = function (\n      objects\n    ) {\n      for (var i = 0; i < objects.length; i++) {\n        this.restoreColorMaterial(objects[i].ids, objects[i].id);\n      }\n    };\n\n    _self.unload = function () {\n      console.log(\"Autodesk.ADN.Viewing.Extension.Color unloaded\");\n      return true;\n    };\n\n    return true;\n  };\n};\nAutodesk.ADN.Viewing.Extension.Color.prototype = Object.create(\n  Autodesk.Viewing.Extension.prototype\n);\nAutodesk.ADN.Viewing.Extension.Color.prototype.constructor =\n  Autodesk.ADN.Viewing.Extension.Color;\nAutodesk.Viewing.theExtensionManager.registerExtension(\n  \"Autodesk.ADN.Viewing.Extension.Color\",\n  Autodesk.ADN.Viewing.Extension.Color\n);\n"],"names":[],"version":3,"file":"index.46216112.js.map"}