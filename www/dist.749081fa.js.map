{"mappings":"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","sources":["node_modules/spinal-env-viewer-plugin-forge/dist/index.js","node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","node_modules/spinal-env-viewer-plugin-forge/dist/BimObjectService.js","node_modules/spinal-env-viewer-plugin-forge/dist/Constants.js","node_modules/spinal-env-viewer-context-geographic-service/build/constants.js","node_modules/spinal-env-viewer-context-geographic-service/src/constants.ts","node_modules/spinal-env-viewer-plugin-forge/dist/utils.js","node_modules/spinal-env-viewer-plugin-forge/dist/SceneHelper.js","node_modules/spinal-env-viewer-plugin-forge/dist/interfaces/SceneAlignMethod.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexports.__esModule = true;\nexports.SpinalForgeViewer = void 0;\nvar SpinalForgeViewer_1 = require(\"./SpinalForgeViewer\");\nexports.SpinalForgeViewer = SpinalForgeViewer_1.SpinalForgeViewer;\nvar g_win = typeof window === \"undefined\" ? global : window;\nif (typeof g_win.spinal === \"undefined\") {\n    g_win.spinal = {};\n}\nif (typeof g_win.spinal.SpinalForgeViewer === \"undefined\") {\n    g_win.spinal.SpinalForgeViewer = new SpinalForgeViewer_1.SpinalForgeViewer();\n    g_win.spinal.BimObjectService = g_win.spinal.SpinalForgeViewer.bimObjectService;\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nexports.SpinalForgeViewer = void 0;\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar BimObjectService_1 = require(\"./BimObjectService\");\nvar Constants_1 = require(\"./Constants\");\nvar utils_1 = require(\"./utils\");\nvar SceneHelper_1 = require(\"./SceneHelper\");\nvar axios_1 = require(\"axios\");\nvar SceneAlignMethod_1 = require(\"./interfaces/SceneAlignMethod\");\nvar THREE = require('three');\nvar SpinalForgeViewer = /** @class */ (function () {\n    function SpinalForgeViewer() {\n        this.bimObjectService = new BimObjectService_1.BimObjectService();\n        this.overlayName = 'spinal-material-overlay';\n    }\n    SpinalForgeViewer.prototype.initialize = function (viewerManager) {\n        var _this = this;\n        if (typeof this.initialized === 'undefined')\n            this.initialized = new Promise(function (resolve) {\n                _this.viewerManager = viewerManager;\n                var addEventListen = function () {\n                    _this.viewerManager.viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, function (event) {\n                        if (typeof event.selections !== 'undefined' &&\n                            event.selections.length > 0) {\n                            _this.viewerManager.setCurrentModel(event.selections[0].model);\n                            _this.bimObjectService.setCurrentModel(event.selections[0].model);\n                        }\n                    });\n                    clearInterval(inter);\n                    resolve(true);\n                };\n                var inter = setInterval(addEventListen, 200);\n            });\n        return this.initialized;\n    };\n    SpinalForgeViewer.prototype.isInitialize = function () {\n        return typeof this.initialized !== 'undefined';\n    };\n    SpinalForgeViewer.prototype.waitForInitialization = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var interval = setInterval(function () {\n                if (typeof _this.initialized !== 'undefined') {\n                    clearInterval(interval);\n                    _this.initialized.then(function () { return resolve(true); });\n                }\n            }, 200);\n        });\n    };\n    SpinalForgeViewer.prototype.getScene = function (modelId) {\n        return this.scenes.filter(function (scene) {\n            return scene.modelIds.indexOf(modelId) !== -1;\n        });\n    };\n    SpinalForgeViewer.prototype.getSVFListFromBimFile = function (bimFileId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var bimFileRNode, elem1, elem, res, i, thumbnail;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        bimFileRNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(bimFileId);\n                        return [4 /*yield*/, (0, utils_1.loadModelPtr)(bimFileRNode.element.ptr)];\n                    case 1:\n                        elem1 = _a.sent();\n                        return [4 /*yield*/, (0, utils_1.loadModelPtr)(elem1.currentVersion)];\n                    case 2:\n                        elem = _a.sent();\n                        res = [];\n                        if (elem.hasOwnProperty('items')) {\n                            for (i = 0; i < elem.items.length; i++) {\n                                if (elem.items[i].path.get().indexOf('svf') !== -1) {\n                                    thumbnail = elem.items[i].thumbnail\n                                        ? elem.items[i].thumbnail.get()\n                                        : elem.items[i].path.get() + '.png';\n                                    res.push({\n                                        path: elem.items[i].path.get(),\n                                        name: elem.items[i].name.get(),\n                                        thumbnail: thumbnail\n                                    });\n                                }\n                            }\n                        }\n                        return [2 /*return*/, res];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.getBimFileDefautPath = function (bimFileId) {\n        var bimFileRNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(bimFileId);\n        if (bimFileRNode && bimFileRNode.info.defaultItem) {\n            return bimFileRNode.info.defaultItem.get();\n        }\n    };\n    SpinalForgeViewer.prototype.setBimFileDefautPath = function (bimFileId, path) {\n        var bimFileRNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(bimFileId);\n        if (bimFileRNode) {\n            if (bimFileRNode.info.defaultItem) {\n                return bimFileRNode.info.defaultItem.set(path);\n            }\n            else {\n                return bimFileRNode.info.add_attr('defaultItem', path);\n            }\n        }\n    };\n    SpinalForgeViewer.prototype.getSVF = function (element, nodeId, name) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var elem1, elem, bimFileRNode, defaultPath, i, thumbnail, i, thumbnail;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, (0, utils_1.loadModelPtr)(element.ptr)];\n                    case 1:\n                        elem1 = _c.sent();\n                        return [4 /*yield*/, (0, utils_1.loadModelPtr)(elem1.currentVersion)];\n                    case 2:\n                        elem = _c.sent();\n                        if (elem.hasOwnProperty('items')) {\n                            bimFileRNode = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(nodeId);\n                            if (bimFileRNode && bimFileRNode.info.defaultItem) {\n                                defaultPath = bimFileRNode.info.defaultItem.get();\n                                for (i = 0; i < elem.items.length; i++) {\n                                    if (elem.items[i].path.get().indexOf('svf') !== -1 &&\n                                        defaultPath === elem.items[i].path.get()) {\n                                        thumbnail = elem.items[i].thumbnail\n                                            ? elem.items[i].thumbnail.get()\n                                            : elem.items[i].path.get() + '.png';\n                                        return [2 /*return*/, {\n                                                version: elem.versionId,\n                                                path: elem.items[i].path.get(),\n                                                id: nodeId,\n                                                name: name,\n                                                thumbnail: thumbnail,\n                                                aecPath: (_a = elem.aecPath) === null || _a === void 0 ? void 0 : _a.get()\n                                            }];\n                                    }\n                                }\n                            }\n                            for (i = 0; i < elem.items.length; i++) {\n                                if (elem.items[i].path.get().indexOf('svf') !== -1) {\n                                    thumbnail = elem.items[i].thumbnail\n                                        ? elem.items[i].thumbnail.get()\n                                        : elem.items[i].path.get() + '.png';\n                                    return [2 /*return*/, {\n                                            version: elem.versionId,\n                                            path: elem.items[i].path.get(),\n                                            id: nodeId,\n                                            name: name,\n                                            thumbnail: thumbnail,\n                                            aecPath: (_b = elem.aecPath) === null || _b === void 0 ? void 0 : _b.get()\n                                        }];\n                                }\n                            }\n                        }\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.getAecModelData = function (aecPath) {\n        return axios_1[\"default\"].get(aecPath).then(function (a) {\n            return a.data;\n        });\n    };\n    SpinalForgeViewer.prototype.get1stGlobalOffset = function () {\n        var _a;\n        if (!this.globalOffset) {\n            this.globalOffset =\n                (_a = this.viewerManager.viewer.model) === null || _a === void 0 ? void 0 : _a.getData().globalOffset;\n        }\n        return this.globalOffset;\n    };\n    SpinalForgeViewer.prototype.addOffsetFromAEC = function (aecPath) {\n        return __awaiter(this, void 0, void 0, function () {\n            var globalOffset, aecModelData, tf, refPoint, MaxDistSqr, distSqr;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        globalOffset = this.get1stGlobalOffset();\n                        return [4 /*yield*/, this.getAecModelData(aecPath)];\n                    case 1:\n                        aecModelData = _a.sent();\n                        if (aecModelData) {\n                            tf = aecModelData && aecModelData.refPointTransformation;\n                            refPoint = tf\n                                ? { x: tf[9], y: tf[10], z: 0 }\n                                : { x: 0, y: 0, z: 0 };\n                            MaxDistSqr = 4.0e6;\n                            distSqr = globalOffset &&\n                                THREE.Vector3.prototype.distanceToSquared.call(refPoint, globalOffset);\n                            if (!globalOffset || distSqr > MaxDistSqr) {\n                                // @ts-ignore\n                                return [2 /*return*/, new THREE.Vector3().copy(refPoint)];\n                            }\n                        }\n                        return [2 /*return*/, globalOffset];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.getOption = function (options, svfVersionFile) {\n        for (var i = 0; i < options.length; i++) {\n            if (options[i].urn.get().includes(svfVersionFile.path)) {\n                var opt = options[i].get();\n                opt.modelNameOverride = svfVersionFile.name;\n                return opt;\n            }\n        }\n        return {\n            modelNameOverride: svfVersionFile.name\n        };\n    };\n    SpinalForgeViewer.prototype.addDbIdToOption = function (option) {\n        if (option.hasOwnProperty('dbIds') && option.dbIds.length > 0) {\n            option.ids = option.dbIds;\n        }\n    };\n    SpinalForgeViewer.prototype.loadBimFile = function (bimFile, scene, options) {\n        if (options === void 0) { options = []; }\n        return __awaiter(this, void 0, void 0, function () {\n            var is1stModel, svfVersionFile, option, _a, path, model;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        is1stModel = !this.viewerManager.viewer.model;\n                        return [4 /*yield*/, this.getSVF(bimFile.element, bimFile.id.get(), bimFile.name.get())];\n                    case 1:\n                        svfVersionFile = _b.sent();\n                        option = null;\n                        if (!(typeof scene.sceneAlignMethod === 'undefined')) return [3 /*break*/, 2];\n                        // old scene handle\n                        option = this.getOption(options, svfVersionFile);\n                        if (option.loadOption &&\n                            option.loadOption.hasOwnProperty('globalOffset')) {\n                            if (!this.globalOffset)\n                                this.globalOffset = option.loadOption.globalOffset;\n                            option.globalOffset = this.globalOffset;\n                        }\n                        return [3 /*break*/, 5];\n                    case 2:\n                        option = this.getOption(options, svfVersionFile);\n                        if (!(scene.sceneAlignMethod.get() === SceneAlignMethod_1.SceneAlignMethod.OriginToOrigin)) return [3 /*break*/, 3];\n                        option.globalOffset = this.get1stGlobalOffset();\n                        return [3 /*break*/, 5];\n                    case 3:\n                        if (!(scene.sceneAlignMethod.get() === SceneAlignMethod_1.SceneAlignMethod.ShareCoordinates &&\n                            svfVersionFile.aecPath)) return [3 /*break*/, 5];\n                        option.applyRefPoint = true;\n                        _a = option;\n                        return [4 /*yield*/, this.addOffsetFromAEC(svfVersionFile.aecPath)];\n                    case 4:\n                        _a.globalOffset = _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        this.addDbIdToOption(option);\n                        path = this.getNormalisePath(svfVersionFile.path);\n                        return [4 /*yield*/, this.viewerManager.loadModel(path, option, is1stModel)];\n                    case 6:\n                        model = _b.sent();\n                        this.bimObjectService.addModel(bimFile.id.get(), model, svfVersionFile.version, scene, bimFile.name.get());\n                        return [2 /*return*/, { bimFileId: bimFile.id.get(), model: model }];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.load1stThenAll = function (tasks, callback) {\n        return __awaiter(this, void 0, void 0, function () {\n            var results, idx, proms;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        results = [];\n                        idx = 0;\n                        if (!(tasks.length > 0 && !this.viewerManager.viewer.model)) return [3 /*break*/, 2];\n                        idx = 1;\n                        return [4 /*yield*/, callback(tasks[0]).then(function (res) {\n                                results.push(res);\n                            })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        proms = [];\n                        for (; idx < tasks.length; idx++) {\n                            proms.push(callback(tasks[idx]).then(function (res) {\n                                results.push(res);\n                            }));\n                        }\n                        return [2 /*return*/, Promise.all(proms).then(function () { return results; })];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.loadModelFromNode = function (nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var node, scene_1, children, option_1, data, scenes, res, _i, scenes_1, scene, r, e_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 9, , 10]);\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.getNodeAsync(nodeId)];\n                    case 1:\n                        node = _a.sent();\n                        if (!(node.type.get() === Constants_1.SCENE_TYPE)) return [3 /*break*/, 3];\n                        scene_1 = node;\n                        return [4 /*yield*/, SceneHelper_1.SceneHelper.getBimFilesFromScene(nodeId)];\n                    case 2:\n                        children = _a.sent();\n                        option_1 = typeof node.options !== 'undefined' ? node.options : [];\n                        data = children.map(function (child) {\n                            return { child: child, scene: scene_1, option: option_1 };\n                        });\n                        return [2 /*return*/, this.load1stThenAll(data, function (_a) {\n                                var child = _a.child, scene = _a.scene, option = _a.option;\n                                return _this.loadBimFile(child, scene, option);\n                            })];\n                    case 3: return [4 /*yield*/, SceneHelper_1.SceneHelper.getSceneFromNode(nodeId)];\n                    case 4:\n                        scenes = _a.sent();\n                        res = [];\n                        _i = 0, scenes_1 = scenes;\n                        _a.label = 5;\n                    case 5:\n                        if (!(_i < scenes_1.length)) return [3 /*break*/, 8];\n                        scene = scenes_1[_i];\n                        return [4 /*yield*/, this.loadModelFromNode(scene.id.get())];\n                    case 6:\n                        r = _a.sent();\n                        res.push.apply(res, r);\n                        _a.label = 7;\n                    case 7:\n                        _i++;\n                        return [3 /*break*/, 5];\n                    case 8: return [2 /*return*/, res];\n                    case 9:\n                        e_1 = _a.sent();\n                        console.error(e_1);\n                        return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.getNormalisePath = function (path) {\n        var res = path;\n        if (!/https?:\\/\\//.test(path))\n            res = window.location.origin + path;\n        return res;\n    };\n    /**\n     * return the model associated to the bimfile\n     * @param bimFileId\n     * @param dbId\n     */\n    SpinalForgeViewer.prototype.getModel = function (bimObject) {\n        return this.bimObjectService.getModel(bimObject.dbid.get(), bimObject.bimFileId.get());\n    };\n    SpinalForgeViewer.prototype.loadModelFromBimFile = function (bimFile) {\n        return __awaiter(this, void 0, void 0, function () {\n            var svfVersionFile, path, is1stModelLoaded, model;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getSVF(bimFile.element, bimFile.id.get(), bimFile.name.get())];\n                    case 1:\n                        svfVersionFile = _a.sent();\n                        path = this.getNormalisePath(svfVersionFile.path);\n                        is1stModelLoaded = !spinal.SpinalForgeViewer.viewerManager.viewer.model;\n                        return [4 /*yield*/, this.viewerManager.loadModel(path, {}, is1stModelLoaded)];\n                    case 2:\n                        model = _a.sent();\n                        return [4 /*yield*/, this.bimObjectService._addModel(bimFile.id.get(), model, svfVersionFile.name)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, { model: model }];\n                }\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.addMaterial = function (color) {\n        // @ts-ignore\n        var material = new THREE.MeshPhongMaterial({\n            color: color\n        });\n        this.viewerManager.viewer.impl.createOverlayScene(this.overlayName, material, material);\n        return material;\n    };\n    SpinalForgeViewer.prototype.setModelColorMaterial = function (model, color, ids) {\n        var material = this.addMaterial(color);\n        for (var i = 0; i < ids.length; i++) {\n            var dbid = ids[i];\n            //from dbid to node, to fragid\n            var it = model.getData().instanceTree;\n            it.enumNodeFragments(dbid, function (fragId) {\n                var renderProxy = this.viewerManager.viewer.impl.getRenderProxy(model, fragId);\n                // @ts-ignore\n                renderProxy.meshProxy = new THREE.Mesh(renderProxy.geometry, material);\n                renderProxy.meshProxy.matrix.copy(renderProxy.matrixWorld);\n                renderProxy.meshProxy.matrixWorldNeedsUpdate = true;\n                renderProxy.meshProxy.matrixAutoUpdate = false;\n                renderProxy.meshProxy.frustumCulled = false;\n                this.viewerManager.viewer.impl.addOverlay(this.overlayName, renderProxy.meshProxy);\n                this.viewerManager.viewer.impl.invalidate(true);\n            }.bind(this), false);\n        }\n    };\n    SpinalForgeViewer.prototype.setColorMaterial = function (aggregateSelection, color) {\n        for (var i = 0; i < aggregateSelection.length; i++) {\n            var model = aggregateSelection[i].model;\n            var ids = aggregateSelection[i].selection;\n            this.setModelColorMaterial(model, color, ids);\n        }\n    };\n    SpinalForgeViewer.prototype.restoreColorMaterial = function (aggregateSelection) {\n        for (var i = 0; i < aggregateSelection.length; i++) {\n            var model = aggregateSelection[1].model;\n            var ids = aggregateSelection[1].selection;\n            this.restoreModelColorMaterial(model, ids);\n        }\n    };\n    SpinalForgeViewer.prototype.restoreModelColorMaterial = function (model, ids) {\n        for (var i = 0; i < ids.length; i++) {\n            var dbid = ids[i];\n            //from dbid to node, to fragid\n            var it = model.getData().instanceTree;\n            it.enumNodeFragments(dbid, function (fragId) {\n                var renderProxy = this.viewerManager.viewer.impl.getRenderProxy(model, fragId);\n                if (renderProxy.meshProxy) {\n                    //remove all overlays with same name\n                    this.viewerManager.viewer.impl.clearOverlay(this.overlayName);\n                    //viewer.impl.removeOverlay(overlayName, renderProxy.meshProxy);\n                    delete renderProxy.meshProxy;\n                    //refresh the scene\n                    this.viewerManager.viewer.impl.invalidate(true);\n                }\n            }, true);\n        }\n    };\n    return SpinalForgeViewer;\n}());\nexports.SpinalForgeViewer = SpinalForgeViewer;\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nexports.BimObjectService = void 0;\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar Constants_1 = require(\"./Constants\");\n/**\n * @export\n * @class BimObjectService\n */\nvar BimObjectService = /** @class */ (function () {\n    function BimObjectService() {\n        /**\n         * @type {{ [modelId: number]: { bimFileId: string, version: number, scene: any } }}\n         * @memberof BimObjectService\n         */\n        this.mappingModelIdBimFileId = {};\n        /**\n         * @type {{ [bimFileId: string]: { modelId: number, version: number, modelScene: { model: Model, scene: any }[] } }}\n         * @memberof BimObjectService\n         */\n        this.mappingBimFileIdModelId = {};\n        /**\n         * @type {{ [name: string]: Model }}\n         * @memberof BimObjectService\n         */\n        this.mappingNameByModel = {};\n    }\n    /**\n     * @param {Model} model\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.setCurrentModel = function (model) {\n        this.currentModel = model;\n    };\n    /**\n     * Return the node where to attach BIMObject\n     * @param {string} bimFileId id of the BIMFile\n     * @returns {Promise<SpinalNodeRef>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.getBimFileContext = function (bimFileId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var children, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(bimFileId, [Constants_1.BIM_CONTEXT_RELATION_NAME])];\n                    case 1:\n                        children = _a.sent();\n                        if (children.length > 0)\n                            return [2 /*return*/, children[0]];\n                        else\n                            return [2 /*return*/, undefined];\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _a.sent();\n                        console.error('BimObjectService.getBimFileContext', e_1);\n                        throw e_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @param {string} bimFileId\n     * @returns {Promise<boolean>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.createBIMFileContext = function (bimFileId) {\n        var contextId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({ name: \"BIMContext\" }, undefined);\n        return spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(bimFileId, contextId, Constants_1.BIM_CONTEXT_RELATION_NAME, Constants_1.BIM_CONTEXT_RELATION_TYPE);\n    };\n    /**\n     * create a BIMObject for the corresponding dbid and model\n     * @param {number} dbid\n     * @param {string} name\n     * @param {Model} [model=this.currentModel]\n     * @returns {Promise<BimObjectRef>} the BIMObjectRef has been created\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.createBIMObject = function (dbid, name, model) {\n        if (model === void 0) { model = this.currentModel; }\n        return __awaiter(this, void 0, void 0, function () {\n            var bimObject, externalId, modelMeta, bimId, node, n, e_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 10, , 11]);\n                        return [4 /*yield*/, this.getBIMObject(dbid, model)];\n                    case 1:\n                        bimObject = _a.sent();\n                        //BIMObject already exist\n                        if (typeof bimObject !== \"undefined\")\n                            return [2 /*return*/, bimObject];\n                        return [4 /*yield*/, BimObjectService.getExternalId(dbid, model)];\n                    case 2:\n                        externalId = _a.sent();\n                        modelMeta = this.mappingModelIdBimFileId[model.id];\n                        bimId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({\n                            type: Constants_1.BIM_OBJECT_TYPE,\n                            bimFileId: modelMeta.bimFileId,\n                            version: modelMeta.version,\n                            externalId: externalId,\n                            dbid: dbid,\n                            name: name\n                        }, undefined);\n                        return [4 /*yield*/, this.getBimFileContext(modelMeta.bimFileId)];\n                    case 3:\n                        node = _a.sent();\n                        if (!(typeof node !== \"undefined\")) return [3 /*break*/, 5];\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(node.id, bimId, Constants_1.BIM_OBJECT_RELATION_NAME, Constants_1.BIM_OBJECT_RELATION_TYPE)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/, spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(bimId)];\n                    case 5: return [4 /*yield*/, this.createBIMFileContext(modelMeta.bimFileId)];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.getBimFileContext(modelMeta.bimFileId)];\n                    case 7:\n                        n = _a.sent();\n                        if (!(typeof n !== \"undefined\")) return [3 /*break*/, 9];\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(n.id, bimId, Constants_1.BIM_OBJECT_RELATION_NAME, Constants_1.BIM_OBJECT_RELATION_TYPE)];\n                    case 8:\n                        _a.sent();\n                        return [2 /*return*/, (spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(bimId))];\n                    case 9: return [3 /*break*/, 11];\n                    case 10:\n                        e_2 = _a.sent();\n                        console.error('createBIMObject', e_2);\n                        throw e_2;\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Return the BIMObject corresponding dbid and the model\n     * @param {number} dbId\n     * @param {Model} [model=this.currentModel]\n     * @returns {Promise<BimObjectRef>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.getBIMObject = function (dbId, model) {\n        if (model === void 0) { model = this.currentModel; }\n        return __awaiter(this, void 0, void 0, function () {\n            var externalId_1, modelMeta, n, node, children, child, e_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 6, , 7]);\n                        return [4 /*yield*/, BimObjectService.getExternalId(dbId, model)];\n                    case 1:\n                        externalId_1 = _a.sent();\n                        modelMeta = this.mappingModelIdBimFileId[model.id];\n                        return [4 /*yield*/, this.getBimFileContext(modelMeta.bimFileId)];\n                    case 2:\n                        n = _a.sent();\n                        if (!(typeof n !== \"undefined\")) return [3 /*break*/, 4];\n                        node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(n.id.get());\n                        return [4 /*yield*/, node.getChildren([Constants_1.BIM_OBJECT_RELATION_NAME])];\n                    case 3:\n                        children = _a.sent();\n                        child = children.find(function (node) {\n                            return node.info.externalId.get() === externalId_1;\n                        });\n                        if (child) {\n                            // @ts-ignore\n                            spinal_env_viewer_graph_service_1.SpinalGraphService._addNode(child);\n                            return [2 /*return*/, (spinal_env_viewer_graph_service_1.SpinalGraphService.getInfo(child.info.id.get()))];\n                        }\n                        return [3 /*break*/, 5];\n                    case 4: return [2 /*return*/, (undefined)];\n                    case 5: return [3 /*break*/, 7];\n                    case 6:\n                        e_3 = _a.sent();\n                        console.error('getBIMObject', e_3);\n                        throw (e_3);\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Return the external id for the given dbid\n     * @static\n     * @param {number} dbId\n     * @param {Model} model\n     * @returns {Promise<string>} external id for the given dbid\n     * @memberof BimObjectService\n     */\n    BimObjectService.getExternalId = function (dbId, model) {\n        return new Promise(function (resolve, reject) {\n            model.getProperties(dbId, function (props) {\n                resolve(props.externalId);\n            }, reject);\n        });\n    };\n    /**\n     * Return the dbid corresponding to the external id\n     * @param externalId\n     * @param bimFileId {String} id of the BIMFile\n     * @returns {number} dbid of the given external id\n     */\n    BimObjectService.prototype.getDbIdFromExternalId = function (externalId, bimFileId) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var modelMeta = _this.mappingBimFileIdModelId[bimFileId];\n            var model = modelMeta.modelScene[0].model;\n            model.getExternalIdMapping(function (res) {\n                resolve(res[externalId]);\n            }, reject);\n        });\n    };\n    /**\n     * @param {string} externalId\n     * @param {Model} model\n     * @returns {Promise<number>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.getDdIdFromExternalIdFromModel = function (externalId, model) {\n        return new Promise(function (resolve, reject) {\n            model.getExternalIdMapping(function (res) {\n                resolve(res[externalId]);\n            }, reject);\n        });\n    };\n    /**\n     * @param {string[]} externalIds\n     * @param {Model} model\n     * @returns {Promise<number[]>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.getDdIdsFromExternalIds = function (externalIds, model) {\n        return new Promise(function (resolve, reject) {\n            model.getExternalIdMapping(function (mapping) {\n                var res = [];\n                for (var i = 0; i < externalIds.length; i++) {\n                    res.push(mapping[externalIds[i]]);\n                }\n                resolve(res);\n            }, reject);\n        });\n    };\n    /**\n     * Add a BIMObject to a node\n     * @param {string} contextId context id where the BIMObject supposed to be\n     * @param {string} parentId id of the node where the BIMObject will be add\n     * @param {number} dbId\n     * @param {string} name\n     * @param {Model} [model=this.currentModel]\n     * @returns {Promise<SpinalNodeRef>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.addBIMObject = function (contextId, parentId, dbId, name, model) {\n        if (model === void 0) { model = this.currentModel; }\n        return __awaiter(this, void 0, void 0, function () {\n            var bimObject, node_1, parent_1, context_1, child, node, parent_2, context, e_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 6, , 7]);\n                        return [4 /*yield*/, this.getBIMObject(dbId, model)];\n                    case 1:\n                        bimObject = _a.sent();\n                        if (!(typeof bimObject !== \"undefined\")) return [3 /*break*/, 3];\n                        node_1 = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(bimObject.id.get());\n                        parent_1 = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(parentId);\n                        context_1 = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(contextId);\n                        return [4 /*yield*/, parent_1.addChildInContext(node_1, Constants_1.BIM_OBJECT_RELATION_NAME, Constants_1.BIM_NODE_RELATION_TYPE, context_1)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, bimObject];\n                    case 3: return [4 /*yield*/, this.createBIMObject(dbId, name, model)];\n                    case 4:\n                        child = _a.sent();\n                        node = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(child.id.get());\n                        parent_2 = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(parentId);\n                        context = spinal_env_viewer_graph_service_1.SpinalGraphService.getRealNode(contextId);\n                        return [4 /*yield*/, parent_2.addChildInContext(node, Constants_1.BIM_OBJECT_RELATION_NAME, Constants_1.BIM_NODE_RELATION_TYPE, context)];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, child];\n                    case 6:\n                        e_4 = _a.sent();\n                        console.error(e_4);\n                        throw e_4;\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Remove a BIMObject from a parent\n     * @param {string} parentId\n     * @param {string} bimObjectId\n     * @returns {Promise<boolean>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.removeBIMObject = function (parentId, bimObjectId) {\n        // @ts-ignore\n        return spinal_env_viewer_graph_service_1.SpinalGraphService.removeChild(parentId, bimObjectId, Constants_1.BIM_NODE_RELATION_NAME, Constants_1.BIM_NODE_RELATION_TYPE);\n    };\n    /**\n     * Delete a BIMObject from graph\n     * @param {number} dbId\n     * @param {Model} [model=this.currentModel]\n     * @returns {Promise<void>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.deleteBImObject = function (dbId, model) {\n        if (model === void 0) { model = this.currentModel; }\n        return __awaiter(this, void 0, void 0, function () {\n            var modelId, modelMetaData, bimObject, e_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        modelId = model.id;\n                        modelMetaData = this.mappingModelIdBimFileId[modelId];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.getBIMObject(dbId, model)];\n                    case 2:\n                        bimObject = _a.sent();\n                        delete this.mappingModelIdBimFileId[modelId];\n                        delete this.mappingBimFileIdModelId[modelMetaData.bimFileId];\n                        return [2 /*return*/, spinal_env_viewer_graph_service_1.SpinalGraphService.removeFromGraph(bimObject.id.get())];\n                    case 3:\n                        e_5 = _a.sent();\n                        console.error('deleteBImObject', e_5);\n                        throw e_5;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Add a reference object to a node\n     * @param {string} parentId\n     * @param {number} dbId\n     * @param {string} name\n     * @param {Model} [model=this.currentModel]\n     * @returns {Promise<BimObjectRef>}\n     * @memberof BimObjectService\n     */\n    BimObjectService.prototype.addReferenceObject = function (parentId, dbId, name, model) {\n        if (model === void 0) { model = this.currentModel; }\n        return __awaiter(this, void 0, void 0, function () {\n            var child, BIMObj;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getBIMObject(dbId, model)];\n                    case 1:\n                        child = _a.sent();\n                        if (!(typeof child === \"undefined\")) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.createBIMObject(dbId, name, model)];\n                    case 2:\n                        BIMObj = _a.sent();\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(parentId, BIMObj.id.get(), Constants_1.REFERENCE_OBJECT_RELATION_NAME, Constants_1.REFERENCE_OBJECT_RELATION_TYPE)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, BIMObj];\n                    case 4: return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.addChild(parentId, child.id.get(), Constants_1.REFERENCE_OBJECT_RELATION_NAME, Constants_1.REFERENCE_OBJECT_RELATION_TYPE)];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, child];\n                }\n            });\n        });\n    };\n    /**\n     *\n     * @param parentId\n     * @param dbid\n     * @param model\n     */\n    BimObjectService.prototype.removeReferenceObject = function (parentId, dbid, model) {\n        if (model === void 0) { model = this.currentModel; }\n        return __awaiter(this, void 0, void 0, function () {\n            var child;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getBIMObject(dbid, model)];\n                    case 1:\n                        child = _a.sent();\n                        return [2 /*return*/, spinal_env_viewer_graph_service_1.SpinalGraphService.removeChild(parentId, child.id.get(), Constants_1.REFERENCE_OBJECT_RELATION_NAME, Constants_1.REFERENCE_OBJECT_RELATION_TYPE)];\n                }\n            });\n        });\n    };\n    /**\n     * notify the service that a new model has been load into the viewer\n     * @param bimFileId {String} id of the BIMFile\n     * @param version {number} version of the bimFile\n     * @param model {Model} model loaded into the viewer\n     * @param scene {any} scene loaded\n     * @param name\n     */\n    BimObjectService.prototype.addModel = function (bimFileId, model, version, scene, name) {\n        // @ts-ignore\n        var modelId = model.id;\n        this.mappingModelIdBimFileId[modelId] = { bimFileId: bimFileId, version: version, scene: scene };\n        this.mappingNameByModel[name] = model;\n        var mapping = this.mappingBimFileIdModelId[bimFileId];\n        if (typeof mapping === \"undefined\") {\n            mapping = {\n                modelId: modelId,\n                version: version,\n                modelScene: [{ model: model, scene: scene }]\n            };\n        }\n        else\n            mapping.modelScene.push({ model: model, scene: scene });\n        this.mappingBimFileIdModelId[bimFileId] = mapping;\n    };\n    BimObjectService.prototype._addModel = function (bimFileId, model, name) {\n        // @ts-ignore\n        var modelId = model.id;\n        this.mappingModelIdBimFileId[modelId] = { bimFileId: bimFileId, version: 0, scene: undefined };\n        this.mappingNameByModel[name] = model;\n    };\n    /**\n     * Get the model corresponding to the dbid and the bimfile\n     * @param dbId {number} dbId of the BIMObject\n     * @param bimFileId {string} id of the BIMfile\n     */\n    BimObjectService.prototype.getModel = function (dbId, bimFileId) {\n        var mapping = this.mappingBimFileIdModelId[bimFileId];\n        if (typeof mapping !== \"undefined\")\n            for (var i = 0; i < mapping.modelScene.length; i++) {\n                if (mapping.modelScene[i].scene.hasOwnProperty('options') && mapping.modelScene[i].scene['options'].dbIds.contains(dbId))\n                    return mapping.modelScene[i].model;\n            }\n        return undefined;\n    };\n    BimObjectService.prototype.getModelByBimfile = function (bimFileId) {\n        var mapping = this.mappingBimFileIdModelId[bimFileId];\n        //one bimFile is not supposed to be load multipe time\n        if (typeof mapping !== \"undefined\")\n            return mapping.modelScene[0].model;\n        return undefined;\n    };\n    /**\n     * Get a model corresponding to the name use with caution\n     * @param name\n     */\n    BimObjectService.prototype.getModelByName = function (name) {\n        return this.mappingNameByModel[name];\n    };\n    /**\n     * @static\n     * @type {number}\n     * @memberof BimObjectService\n     */\n    BimObjectService.num = 0;\n    return BimObjectService;\n}());\nexports.BimObjectService = BimObjectService;\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexports.__esModule = true;\nexports.REFERENCE_OBJECT_RELATION_TYPE = exports.BIM_OBJECT_RELATION_TYPE = exports.BIM_NODE_RELATION_TYPE = exports.BIM_OBJECT_VERSION_RELATION_TYPE = exports.REFERENCE_OBJECT_RELATION_NAME = exports.BIM_OBJECT_VERSION_RELATION_NAME = exports.BIM_OBJECT_RELATION_NAME = exports.BIM_NODE_RELATION_NAME = exports.BIM_CONTEXT_RELATION_TYPE = exports.BIM_CONTEXT_RELATION_NAME = exports.BIM_OBJECT_TYPE = exports.PART_RELATION_TYPE = exports.SCENE_RELATION_TYPE = exports.PART_RELATION_NAME = exports.SCENE_TYPE = exports.SCENE_RELATION_NAME = void 0;\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar constants_js_1 = require(\"spinal-env-viewer-context-geographic-service/build/constants.js\");\nexports.SCENE_RELATION_NAME = 'hasScene';\nexports.SCENE_TYPE = \"scene\";\nexports.PART_RELATION_NAME = 'hasParts';\nexports.SCENE_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.PART_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_OBJECT_TYPE = constants_js_1.EQUIPMENT_TYPE;\nexports.BIM_CONTEXT_RELATION_NAME = \"hasBimContext\";\nexports.BIM_CONTEXT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_NODE_RELATION_NAME = \"hasBimNode\";\nexports.BIM_OBJECT_RELATION_NAME = constants_js_1.EQUIPMENT_RELATION;\nexports.BIM_OBJECT_VERSION_RELATION_NAME = \"hasBimVersion\";\nexports.REFERENCE_OBJECT_RELATION_NAME = constants_js_1.REFERENCE_RELATION;\nexports.BIM_OBJECT_VERSION_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_NODE_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_OBJECT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.REFERENCE_OBJECT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.REFERENCE_ROOM_RELATION = exports.ROOM_REFERENCE_CONTEXT = exports.ZONE_REFERENCE_CONTEXT = exports.FLOOR_REFERENCE_CONTEXT = exports.BUILDING_REFERENCE_CONTEXT = exports.SITE_REFERENCE_CONTEXT = exports.REFERENCE_RELATION = exports.REFERENCE_TYPE = exports.MAP_RELATION_TYPE = exports.MAP_TYPE_RELATION = exports.GEOGRAPHIC_RELATIONS_ORDER = exports.EQUIPMENT_RELATION = exports.GEOGRAPHIC_RELATIONS = exports.ROOM_RELATION = exports.ZONE_RELATION = exports.FLOOR_RELATION = exports.BUILDING_RELATION = exports.SITE_RELATION = exports.GEOGRAPHIC_TYPES_ORDER = exports.EQUIPMENT_TYPE = exports.GEOGRAPHIC_TYPES = exports.ROOM_TYPE = exports.ZONE_TYPE = exports.FLOOR_TYPE = exports.BUILDING_TYPE = exports.SITE_TYPE = exports.CONTEXT_TYPE = void 0;\nconst CONTEXT_TYPE = 'geographicContext';\nexports.CONTEXT_TYPE = CONTEXT_TYPE;\nconst SITE_TYPE = 'geographicSite';\nexports.SITE_TYPE = SITE_TYPE;\nconst BUILDING_TYPE = 'geographicBuilding';\nexports.BUILDING_TYPE = BUILDING_TYPE;\nconst FLOOR_TYPE = 'geographicFloor';\nexports.FLOOR_TYPE = FLOOR_TYPE;\nconst ZONE_TYPE = 'geographicZone';\nexports.ZONE_TYPE = ZONE_TYPE;\nconst ROOM_TYPE = 'geographicRoom';\nexports.ROOM_TYPE = ROOM_TYPE;\nconst EQUIPMENT_TYPE = 'BIMObject';\nexports.EQUIPMENT_TYPE = EQUIPMENT_TYPE;\nconst REFERENCE_TYPE = 'geographicReference';\nexports.REFERENCE_TYPE = REFERENCE_TYPE;\nconst SITE_RELATION = 'hasGeographicSite';\nexports.SITE_RELATION = SITE_RELATION;\nconst BUILDING_RELATION = 'hasGeographicBuilding';\nexports.BUILDING_RELATION = BUILDING_RELATION;\nconst FLOOR_RELATION = 'hasGeographicFloor';\nexports.FLOOR_RELATION = FLOOR_RELATION;\nconst ZONE_RELATION = 'hasGeographicZone';\nexports.ZONE_RELATION = ZONE_RELATION;\nconst ROOM_RELATION = 'hasGeographicRoom';\nexports.ROOM_RELATION = ROOM_RELATION;\nconst EQUIPMENT_RELATION = 'hasBimObject';\nexports.EQUIPMENT_RELATION = EQUIPMENT_RELATION;\nconst REFERENCE_RELATION = 'hasReferenceObject';\nexports.REFERENCE_RELATION = REFERENCE_RELATION;\nconst REFERENCE_ROOM_RELATION = 'hasReferenceObject.ROOM';\nexports.REFERENCE_ROOM_RELATION = REFERENCE_ROOM_RELATION;\nconst SITE_REFERENCE_CONTEXT = '.SiteContext';\nexports.SITE_REFERENCE_CONTEXT = SITE_REFERENCE_CONTEXT;\nconst BUILDING_REFERENCE_CONTEXT = '.BuildingContext';\nexports.BUILDING_REFERENCE_CONTEXT = BUILDING_REFERENCE_CONTEXT;\nconst FLOOR_REFERENCE_CONTEXT = '.FloorContext';\nexports.FLOOR_REFERENCE_CONTEXT = FLOOR_REFERENCE_CONTEXT;\nconst ZONE_REFERENCE_CONTEXT = '.ZoneContext';\nexports.ZONE_REFERENCE_CONTEXT = ZONE_REFERENCE_CONTEXT;\nconst ROOM_REFERENCE_CONTEXT = '.RoomContext';\nexports.ROOM_REFERENCE_CONTEXT = ROOM_REFERENCE_CONTEXT;\nconst GEOGRAPHIC_TYPES = Object.freeze([\n    SITE_TYPE,\n    BUILDING_TYPE,\n    FLOOR_TYPE,\n    ZONE_TYPE,\n    ROOM_TYPE,\n]);\nexports.GEOGRAPHIC_TYPES = GEOGRAPHIC_TYPES;\nconst GEOGRAPHIC_TYPES_ORDER = Object.freeze([\n    CONTEXT_TYPE,\n    SITE_TYPE,\n    BUILDING_TYPE,\n    FLOOR_TYPE,\n    ZONE_TYPE,\n    ROOM_TYPE,\n    EQUIPMENT_TYPE,\n]);\nexports.GEOGRAPHIC_TYPES_ORDER = GEOGRAPHIC_TYPES_ORDER;\nconst GEOGRAPHIC_RELATIONS = Object.freeze([\n    SITE_RELATION,\n    BUILDING_RELATION,\n    FLOOR_RELATION,\n    ZONE_RELATION,\n    ROOM_RELATION,\n    EQUIPMENT_RELATION,\n]);\nexports.GEOGRAPHIC_RELATIONS = GEOGRAPHIC_RELATIONS;\nconst GEOGRAPHIC_RELATIONS_ORDER = Object.freeze([\n    SITE_RELATION,\n    BUILDING_RELATION,\n    FLOOR_RELATION,\n    ZONE_RELATION,\n    ROOM_RELATION,\n    EQUIPMENT_RELATION,\n]);\nexports.GEOGRAPHIC_RELATIONS_ORDER = GEOGRAPHIC_RELATIONS_ORDER;\nconst MAP_TYPE_RELATION = Object.freeze(new Map([\n    [SITE_TYPE, SITE_RELATION],\n    [BUILDING_TYPE, BUILDING_RELATION],\n    [FLOOR_TYPE, FLOOR_RELATION],\n    [ZONE_TYPE, ZONE_RELATION],\n    [ROOM_TYPE, ROOM_RELATION],\n    [EQUIPMENT_TYPE, EQUIPMENT_RELATION],\n]));\nexports.MAP_TYPE_RELATION = MAP_TYPE_RELATION;\nconst MAP_RELATION_TYPE = Object.freeze(new Map([\n    [SITE_RELATION, SITE_TYPE],\n    [BUILDING_RELATION, BUILDING_TYPE],\n    [FLOOR_RELATION, FLOOR_TYPE],\n    [ZONE_RELATION, ZONE_TYPE],\n    [ROOM_RELATION, ROOM_TYPE],\n    [EQUIPMENT_RELATION, EQUIPMENT_TYPE],\n]));\nexports.MAP_RELATION_TYPE = MAP_RELATION_TYPE;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst CONTEXT_TYPE = 'geographicContext';\nconst SITE_TYPE = 'geographicSite';\nconst BUILDING_TYPE = 'geographicBuilding';\nconst FLOOR_TYPE = 'geographicFloor';\nconst ZONE_TYPE = 'geographicZone';\nconst ROOM_TYPE = 'geographicRoom';\nconst EQUIPMENT_TYPE = 'BIMObject';\nconst REFERENCE_TYPE = 'geographicReference';\n\nconst SITE_RELATION = 'hasGeographicSite';\nconst BUILDING_RELATION = 'hasGeographicBuilding';\nconst FLOOR_RELATION = 'hasGeographicFloor';\nconst ZONE_RELATION = 'hasGeographicZone';\nconst ROOM_RELATION = 'hasGeographicRoom';\nconst EQUIPMENT_RELATION = 'hasBimObject';\nconst REFERENCE_RELATION = 'hasReferenceObject';\nconst REFERENCE_ROOM_RELATION = 'hasReferenceObject.ROOM';\n\nconst SITE_REFERENCE_CONTEXT = '.SiteContext';\nconst BUILDING_REFERENCE_CONTEXT = '.BuildingContext';\nconst FLOOR_REFERENCE_CONTEXT = '.FloorContext';\nconst ZONE_REFERENCE_CONTEXT = '.ZoneContext';\nconst ROOM_REFERENCE_CONTEXT = '.RoomContext';\n\nconst GEOGRAPHIC_TYPES = Object.freeze([\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n]) as string[];\n\nconst GEOGRAPHIC_TYPES_ORDER = Object.freeze([\n  CONTEXT_TYPE,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n]) as string[];\n\nconst GEOGRAPHIC_RELATIONS = Object.freeze([\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n]) as string[];\n\nconst GEOGRAPHIC_RELATIONS_ORDER = Object.freeze([\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n]) as string[];\n\nconst MAP_TYPE_RELATION = Object.freeze(\n  new Map([\n    [SITE_TYPE, SITE_RELATION],\n    [BUILDING_TYPE, BUILDING_RELATION],\n    [FLOOR_TYPE, FLOOR_RELATION],\n    [ZONE_TYPE, ZONE_RELATION],\n    [ROOM_TYPE, ROOM_RELATION],\n    [EQUIPMENT_TYPE, EQUIPMENT_RELATION],\n  ])\n) as Map<string, string>;\n\nconst MAP_RELATION_TYPE = Object.freeze(\n  new Map([\n    [SITE_RELATION, SITE_TYPE],\n    [BUILDING_RELATION, BUILDING_TYPE],\n    [FLOOR_RELATION, FLOOR_TYPE],\n    [ZONE_RELATION, ZONE_TYPE],\n    [ROOM_RELATION, ROOM_TYPE],\n    [EQUIPMENT_RELATION, EQUIPMENT_TYPE],\n  ])\n) as Map<string, string>;\n\nexport {\n  CONTEXT_TYPE,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  GEOGRAPHIC_TYPES,\n  EQUIPMENT_TYPE,\n  GEOGRAPHIC_TYPES_ORDER,\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  GEOGRAPHIC_RELATIONS,\n  EQUIPMENT_RELATION,\n  GEOGRAPHIC_RELATIONS_ORDER,\n  MAP_TYPE_RELATION,\n  MAP_RELATION_TYPE,\n  REFERENCE_TYPE,\n  REFERENCE_RELATION,\n  SITE_REFERENCE_CONTEXT,\n  BUILDING_REFERENCE_CONTEXT,\n  FLOOR_REFERENCE_CONTEXT,\n  ZONE_REFERENCE_CONTEXT,\n  ROOM_REFERENCE_CONTEXT,\n  REFERENCE_ROOM_RELATION\n};\n","\"use strict\";\nexports.__esModule = true;\nexports.loadModelPtr = void 0;\nvar spinal_core_connectorjs_type_1 = require(\"spinal-core-connectorjs_type\");\nvar mapModelDictionary = new Map();\nfunction loadModelPtr(model) {\n    if (model instanceof spinal_core_connectorjs_type_1.File) {\n        return loadModelPtr(model._ptr);\n    }\n    if (!(model instanceof spinal_core_connectorjs_type_1.Ptr)) {\n        throw new Error('loadModelPtr must take Ptr as parameter');\n    }\n    if (!model.data.value && model.data.model) {\n        return Promise.resolve(model.data.model);\n    }\n    else if (!model.data.value) {\n        throw new Error('Trying to load a Ptr to 0');\n    }\n    if (mapModelDictionary.has(model.data.value)) {\n        return mapModelDictionary.get(model.data.value);\n    }\n    if (typeof spinal_core_connectorjs_type_1.FileSystem._objects[model.data.value] !== 'undefined') {\n        var promise_1 = Promise.resolve(spinal_core_connectorjs_type_1.FileSystem._objects[model.data.value]);\n        mapModelDictionary.set(model.data.value, promise_1);\n        return promise_1;\n    }\n    var promise = new Promise(function (resolve, reject) {\n        model.load(function (m) {\n            if (!m) {\n                mapModelDictionary[\"delete\"](model.data.value);\n                reject(new Error('Error in load Ptr'));\n            }\n            else {\n                resolve(m);\n            }\n        });\n    });\n    mapModelDictionary.set(model.data.value, promise);\n    return promise;\n}\nexports.loadModelPtr = loadModelPtr;\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nexports.SceneHelper = void 0;\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar Constants_1 = require(\"./Constants\");\nvar SceneHelper = /** @class */ (function () {\n    function SceneHelper() {\n    }\n    SceneHelper.initialize = function () {\n        if (typeof SceneHelper.initialized !== \"undefined\" && SceneHelper.initialized !== null) {\n            return SceneHelper.initialized;\n        }\n        SceneHelper.initialized = new Promise(function (resolve, reject) {\n            SceneHelper.context = spinal_env_viewer_graph_service_1.SpinalGraphService.getContext(SceneHelper.contextName);\n            if (typeof SceneHelper.context === \"undefined\") {\n                return spinal_env_viewer_graph_service_1.SpinalGraphService.addContext(SceneHelper.contextName, SceneHelper.type)\n                    .then(function (context) {\n                    SceneHelper.context = context;\n                    SceneHelper.contextId = context.getId().get();\n                    resolve(true);\n                })[\"catch\"](reject);\n            }\n            resolve(true);\n        });\n        return SceneHelper.initialized;\n    };\n    SceneHelper.createScene = function (name, description, autoLoad) {\n        return SceneHelper.initialize().then(function () {\n            var sceneId = spinal_env_viewer_graph_service_1.SpinalGraphService.createNode({\n                name: name,\n                description: description,\n                autoLoad: autoLoad,\n                type: Constants_1.SCENE_TYPE\n            }, undefined);\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(SceneHelper.contextId, sceneId, SceneHelper.contextId, Constants_1.SCENE_RELATION_NAME, Constants_1.SCENE_RELATION_TYPE);\n        });\n    };\n    SceneHelper.addModelToScene = function (sceneId, bimFileId) {\n        return SceneHelper.initialize().then(function () {\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(sceneId, bimFileId, SceneHelper.contextId, Constants_1.PART_RELATION_NAME, Constants_1.PART_RELATION_TYPE);\n        });\n    };\n    SceneHelper.getBimFilesFromScene = function (sceneId) {\n        return SceneHelper.initialize().then(function () {\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(sceneId, [Constants_1.PART_RELATION_NAME]);\n        });\n    };\n    SceneHelper.getSceneFromNode = function (nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, SceneHelper.initialize()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, spinal_env_viewer_graph_service_1.SpinalGraphService.getChildren(nodeId, [Constants_1.SCENE_RELATION_NAME])];\n                }\n            });\n        });\n    };\n    SceneHelper.addSceneToNode = function (nodeId, sceneId) {\n        return SceneHelper.initialize().then(function () {\n            return spinal_env_viewer_graph_service_1.SpinalGraphService.addChildInContext(nodeId, sceneId, SceneHelper.contextId, Constants_1.SCENE_RELATION_NAME, Constants_1.SCENE_RELATION_TYPE);\n        });\n    };\n    SceneHelper.contextName = \"Scenes\";\n    SceneHelper.type = \"SpinalService\";\n    return SceneHelper;\n}());\nexports.SceneHelper = SceneHelper;\n","\"use strict\";\n/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexports.__esModule = true;\nexports.SceneAlignMethod = void 0;\nvar SceneAlignMethod;\n(function (SceneAlignMethod) {\n    SceneAlignMethod[SceneAlignMethod[\"CenterToCenter\"] = 0] = \"CenterToCenter\";\n    SceneAlignMethod[SceneAlignMethod[\"OriginToOrigin\"] = 1] = \"OriginToOrigin\";\n    SceneAlignMethod[SceneAlignMethod[\"ShareCoordinates\"] = 2] = \"ShareCoordinates\";\n})(SceneAlignMethod = exports.SceneAlignMethod || (exports.SceneAlignMethod = {}));\n"],"names":[],"version":3,"file":"dist.749081fa.js.map"}