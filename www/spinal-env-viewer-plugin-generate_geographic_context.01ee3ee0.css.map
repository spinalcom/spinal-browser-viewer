{"mappings":"A;;;;A;;;;A;;;;A;;;;A;;;;A;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/level.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/layout.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/launch.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/panel.vue"],"sourcesContent":["<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div id=\"div-level\">\n    <md-icon v-show=\"showWarning && level.type === ''\"\n             class=\"md-accent\">warning</md-icon>\n\n    <md-field id=\"level-field\">\n      <label>Level</label>\n\n      <md-select v-model=\"level.type\">\n        <md-option v-for=\"(type, indexType) in availableTypes\"\n                   :key=\"indexType\"\n                   :value=\"type\">\n          {{type}}\n        </md-option>\n      </md-select>\n    </md-field>\n\n    <md-icon v-show=\"showWarning && level.param === ''\"\n             class=\"md-accent\">warning</md-icon>\n\n    <md-field id=\"param-field\">\n      <label v-if=\"level.option === constants.LEVEL_OPTION_BY_KEY\">Key</label>\n\n      <label v-else-if=\"level.option === constants.LEVEL_OPTION_FIXED\">Fixed Value</label>\n\n      <md-input v-model=\"level.param\" />\n    </md-field>\n\n    <md-button class=\"md-icon-button\"\n               @click=\"$emit('removeLevel')\">\n      <md-icon>remove</md-icon>\n    </md-button>\n  </div>\n</template>\n\n<script>\nimport * as constants from \"../js/constants\";\n\nexport default {\n  name: \"level\",\n  props: {\n    level: {\n      type: Object,\n      required: true\n    },\n    availableTypes: {\n      type: Array,\n      required: true\n    },\n    showWarning: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data() {\n    this.constants = constants;\n    return {};\n  },\n  watch: {\n    level: {\n      deep: true,\n      handler() {\n        this.$emit(\"levelChanged\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#div-level {\n  display: flex;\n}\n\n#level-field,\n#param-field {\n  margin-right: 20px;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <level v-for=\"(level, index) in levels\"\n           :key=\"index\"\n           :level=\"level\"\n           :available-types=\"getAvailableTypes(index)\"\n           :show-warning=\"showWarnings\"\n           @levelChanged=\"() => $emit('levelChanged')\"\n           @removeLevel=\"removeLevel(index)\" />\n\n    <md-button @click=\"addLevel(constants.LEVEL_OPTION_BY_KEY)\"\n               class=\"md-raised button-add-level\">\n      NORMAL\n    </md-button>\n\n    <md-button @click=\"addLevel(constants.LEVEL_OPTION_FIXED)\"\n               class=\"md-raised button-add-level\">\n      FIXED\n    </md-button>\n  </div>\n</template>\n\n<script>\nimport * as constants from \"../js/constants\";\n\nimport level from \"./level.vue\";\n\nexport default {\n  name: \"layout\",\n  props: {\n    levels: {\n      type: Array,\n      required: true\n    },\n    showWarnings: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    level\n  },\n  data() {\n    this.constants = constants;\n    return {};\n  },\n  methods: {\n    /**\n     * Adds an empty level with the given option to the layout.\n     * @param {string} option Option of the level\n     */\n    addLevel(option) {\n      this.levels.push({ type: \"\", param: \"\", option: option });\n      this.$emit(\"levelChanged\");\n    },\n    /**\n     * Removes a level from the layout.\n     * @param {number} index Index of the level in the layout\n     */\n    removeLevel(index) {\n      this.levels.splice(index, 1);\n      this.$emit(\"levelChanged\");\n    },\n    /**\n     * Determines the index of the lowest type a level can be.\n     * @param {number} index The index of the level\n     * @returns {number} The index of the minimum type\n     */\n    getMinTypeIndex(indexLevel) {\n      let i = indexLevel;\n\n      do {\n        i--;\n      } while (\n        i >= 0 &&\n        !constants.GEOGRAPHIC_TYPES.includes(this.levels[i].type)\n      );\n\n      if (i < 0) {\n        return 0;\n      } else {\n        const minType = this.levels[i].type;\n        const minTypeIndex = constants.GEOGRAPHIC_TYPES.indexOf(minType) + 1;\n\n        return minTypeIndex;\n      }\n    },\n    /**\n     * Determines the index of the highest type a level can be.\n     * @param {number} index The index of the level\n     * @returns {number} The index of the maximum type\n     */\n    getMaxTypeIndex(indexLevel) {\n      let i = indexLevel;\n\n      do {\n        i++;\n      } while (\n        i < this.levels.length &&\n        !constants.GEOGRAPHIC_TYPES.includes(this.levels[i].type)\n      );\n\n      if (i === this.levels.length) {\n        return constants.GEOGRAPHIC_TYPES.length;\n      } else {\n        const maxType = this.levels[i].type;\n        const maxTypeIndex = constants.GEOGRAPHIC_TYPES.indexOf(maxType);\n\n        return maxTypeIndex;\n      }\n    },\n    /**\n     * Determines all the types a level can be given its position in the layout.\n     * @param {number} index The index of the level\n     * @returns {Array<string>} An array of the available types for the level\n     */\n    getAvailableTypes(index) {\n      const minTypeIndex = this.getMinTypeIndex(index);\n      const maxTypeIndex = this.getMaxTypeIndex(index);\n      const available = [];\n\n      for (let i = minTypeIndex; i < maxTypeIndex; i++) {\n        available.push(constants.GEOGRAPHIC_TYPES[i]);\n      }\n\n      return available.concat(constants.ZONE_TYPE);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.button-add-level {\n  width: 45%;\n}\n</style>\n","<template>\n  <div id=\"launch-step\">\n    <div v-if=\"!showLoad\">\n      <md-button class=\"md-raised md-primary\"\n                 @click=\"loadProps\">\n        VERIFY OBJECTS\n      </md-button>\n\n      <div v-if=\"propsLoaded\">\n        <md-button @click=\"selectValid\">\n          {{valid.length}} VALID OBJECTS\n        </md-button><br />\n\n        <md-button @click=\"selectInvalid\">\n          {{invalid.length}} INVALID OBJECTS\n        </md-button><br />\n\n        <md-checkbox v-model=\"defineRef\">\n          Define reference objects\n        </md-checkbox>\n\n        <md-button v-if=\"valid.length !== 0\"\n                   class=\"md-raised md-primary\"\n                   @click=\"generateContext\">\n          LAUNCH CONTEXT GENERATION\n        </md-button>\n      </div>\n    </div>\n\n    <md-progress-bar v-else\n                     id=\"progress-bar\"\n                     :md-value=\"progression.value\" />\n  </div>\n</template>\n\n<script>\nimport * as constants from \"../js/constants\";\nimport hasProperties from \"../js/hasProperties\";\nimport generateGeoContext from \"../js_build/generateGeographicContext\";\n\n\n\nexport default {\n  name: \"launch\",\n  props: {\n    update: {\n      type: String,\n      required: true\n    },\n    context: {\n      // Allows for null value\n      validator: value => typeof value === \"object\"\n    },\n    config: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.viewer = window.spinal.ForgeViewer.viewer;\n    return {\n      layout: null,\n      valid: [],\n      invalid: [],\n      propsLoaded: false,\n      defineRef: false,\n      showLoad: false,\n      progression: { value: 0 }\n    };\n  },\n  watch: {\n    update() {\n      if (this.update == \"opened\") {\n        this.propsLoaded = false;\n        this.defineRef = false;\n        this.showLoad = false;\n        this.progression = { value: 0 };\n      } else if (this.update == \"configChanged\") {\n        this.propsLoaded = false;\n      }\n    }\n  },\n  methods: {\n    /**\n     * @typedef {Object} Layout An object containing all the informations of the layout\n     * @property {Array<string>} types The types of the levels\n     * @property {Array<string>} keys The keys of the levels\n     * @property {Array<string>} relations The relation names associated to the types\n     *\n     * Creates the layout from raw input of the user in the layout step.\n     * @returns {Layout} The loaded layout\n     */\n    getLayout() {\n      let layout = { types: [], keys: [], relations: [] };\n\n      for (let level of this.config.levels) {\n        if (level.type === \"\" || level.param === \"\") {\n          this.$emit(\"layoutError\", \"Incomplete layout\");\n          return null;\n        }\n\n        layout.types.push(constants.MAP_TYPES.get(level.type));\n        layout.keys.push(level.param);\n        layout.relations.push(constants.MAP_RELATIONS.get(level.type));\n      }\n\n      layout.relations.push(constants.EQUIPMENT_RELATION);\n      return layout;\n    },\n\n    /**\n     * Loads the valid and invalid props from the referential and the layout.\n     */\n    async loadProps() {\n      console.log(\"load Props\")\n      this.propsLoaded = false;\n      this.layout = this.getLayout();\n\n      if (this.layout === null) {\n        this.propsLoaded = false;\n        return;\n      }\n\n      const keys = [];\n\n      for (let level of this.config.levels) {\n        if (level.option !== constants.LEVEL_OPTION_FIXED) {\n          keys.push(level.param);\n        }\n      }\n\n      const res = await hasProperties(this.config.referential, keys);\n\n      this.valid = res.valid;\n      this.invalid = res.invalid;\n      this.propsLoaded = true;\n    },\n\n    /**\n     * Selects the valid objects.\n     */\n    selectValid() {\n      const model = window.spinal.BimObjectService.currentModel;\n      const dbIds = [];\n\n      for (let prop of this.valid) {\n        dbIds.push(prop.dbId);\n      }\n\n      this.viewer.select(dbIds, model);\n    },\n    /**\n     * Selects the invalid objects.\n     */\n    selectInvalid() {\n      const model = window.spinal.BimObjectService.currentModel;\n\n      this.viewer.select(this.invalid, model);\n    },\n    /**\n     * Generates the geographic context from the loaded layout and objects.\n     */\n    async generateContext() {\n      this.showLoad = true;\n\n      try {\n        for (let [index, level] of this.config.levels.entries()) {\n          if (level.option !== constants.LEVEL_OPTION_FIXED) {\n            continue;\n          }\n\n          for (let prop of this.valid) {\n            prop.properties.splice(index, 0, { value: level.param });\n          }\n        }\n\n        await generateGeoContext(\n          this.context,\n          this.layout,\n          this.valid,\n          this.progression,\n          this.defineRef\n        );\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.showLoad = false;\n        this.progression.value = 0;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#launch-step {\n  text-align: center;\n}\n\n#progress-bar {\n  height: 20px;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <!-- Only starts creating the component after everything is loaded -->\n  <div v-if=\"context !== null && config !== null\">\n    <h3 id=\"context-name\">\n      {{this.context.name.get()}}\n    </h3>\n\n    <md-steppers id=\"steppers\"\n                 md-vertical\n                 :md-active-step.sync=\"activeStep\">\n      <md-step id=\"ref\"\n               md-label=\"Choose referential\">\n        <referential-selection :update=\"update\"\n                               :config=\"config\"\n                               @configChanged=\"configChanged\" />\n      </md-step>\n\n      <md-step id=\"layout\"\n               md-label=\"Create layout\"\n               :md-error=\"layoutError\">\n        <layout :levels=\"config.levels\"\n                :show-warnings=\"layoutError !== null\"\n                @levelChanged=\"configChanged\" />\n      </md-step>\n\n      <md-step id=\"launch\"\n               md-label=\"Launch the generation\">\n        <launch :update=\"update\"\n                :context=\"context\"\n                :config=\"config\"\n                @layoutError=\"e => layoutError = e\" />\n      </md-step>\n    </md-steppers>\n  </div>\n</template>\n\n<script>\nimport referentialSelection from \"./referentialSelection.vue\";\nimport layout from \"./layout.vue\";\nimport launch from \"./launch.vue\";\n\nimport { loadConfig, saveConfig } from \"../js/panelConfig\";\n\nexport default {\n  name: \"dialogCreateGeographicContext\",\n  components: {\n    referentialSelection,\n    layout,\n    launch\n  },\n  data() {\n    return {\n      showDialog: true,\n      update: \"\",\n      context: null,\n      config: null,\n      activeStep: \"\",\n      layoutError: null\n    };\n  },\n  watch: {\n    layoutError(newValue, oldValue) {\n      if (oldValue === \"layout\") {\n        this.layoutError = null;\n      }\n    }\n  },\n  methods: {\n    async opened(option) {\n      // Using Strings (object, wrapper for strings) because otherwise the\n      // watchers won't trigger if the update is the same twice in a row\n      this.update = new String(\"opened\");\n      this.context = option.context;\n      this.config = await loadConfig(this.context);\n      this.activeStep = \"ref\";\n      this.layoutError = null;\n    },\n    removed() {},\n    closed() {\n      this.update = new String(\"closed\");\n    },\n    /**\n     * Called every time the config changes. Updates update and saves the current config.\n     */\n    async configChanged() {\n      this.update = new String(\"configChanged\");\n      await saveConfig(this.context, this.config);\n    }\n  }\n};\n</script>\n\n<style>\ndiv#steppers {\n  background-color: unset;\n}\n\n#steppers * {\n  box-sizing: border-box;\n}\n</style>\n\n<style scoped>\n#context-name {\n  text-align: center;\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-generate_geographic_context.01ee3ee0.css.map"}