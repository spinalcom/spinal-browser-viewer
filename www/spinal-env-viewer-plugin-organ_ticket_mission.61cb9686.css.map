{"mappings":"A;;;;;;A;;;;;;A;;;;;;A;;;;;;A;;;;;;A;;;;;;;A;;;;;;A;;;;;;A;;;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;A;;;;;A;;;;;A","sources":["node_modules/spinal-env-viewer-plugin-organ_ticket_mission/src/views/SetUpSelectedOrgan.vue","node_modules/spinal-env-viewer-plugin-organ_ticket_mission/src/views/SetUpContextEquip.vue","node_modules/spinal-env-viewer-plugin-organ_ticket_mission/src/views/LinkAndManageContextTicketMission.vue"],"sourcesContent":["<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-card class=\"spinal-setup-organ-body\">\n    <set-up-toolbar\n      title=\"Setup Context's equipment to send to Mission\"\n      @back=\"back\"\n      @save=\"save\"\n    />\n\n    <v-card-text class=\"spinal-setup-organ-container\">\n      <form action=\"none\">\n        <md-field>\n          <label for=\"Select Spatial Context\">select the Organ</label>\n          <md-select\n            id=\"modelselect\"\n            v-model=\"selectedOrgan\"\n            name=\"modelselect\"\n            md-dense\n          >\n            <md-option\n              v-for=\"organCfg in organsCfg\"\n              :key=\"organCfg.id\"\n              :value=\"organCfg.id\"\n            >\n              {{ organCfg.name }}\n            </md-option>\n          </md-select>\n        </md-field>\n        <template v-if=\"selectedOrgan\">\n          <md-field>\n            <label for=\"Select Spatial Context\"\n              >Select the Spatial Context</label\n            >\n            <md-select\n              id=\"modelselect\"\n              v-model=\"selectedSpatialContext\"\n              name=\"modelselect\"\n              md-dense\n            >\n              <md-optgroup\n                v-if=\"spatialContexts.length > 0\"\n                label=\"Spatial contexts\"\n              >\n                <md-option\n                  v-for=\"context in spatialContexts\"\n                  :key=\"context.id\"\n                  :value=\"context.id\"\n                >\n                  {{ context.name }}\n                </md-option>\n              </md-optgroup>\n\n              <md-optgroup v-if=\"contexts.length > 0\" label=\"Other contexts\">\n                <md-option\n                  v-for=\"context in contexts\"\n                  :key=\"context.id\"\n                  :value=\"context.id\"\n                >\n                  {{ context.name }}\n                </md-option>\n              </md-optgroup>\n            </md-select>\n          </md-field>\n          <v-text-field\n            v-model=\"apiLogin\"\n            placeholder=\"Api Login\"\n            autocomplete=\"off\"\n            label=\"Mission Api Login\"\n          />\n\n          <v-text-field\n            v-model=\"apiPassword\"\n            autocomplete=\"off\"\n            placeholder=\"Api Password\"\n            label=\"Mission Api Password\"\n            :append-icon=\"showApiPassword ? 'visibility' : 'visibility_off'\"\n            :type=\"showApiPassword ? 'text' : 'password'\"\n            @click:append=\"showApiPassword = !showApiPassword\"\n          />\n\n          <v-text-field\n            v-model=\"appelant\"\n            placeholder=\"Api Appelant\"\n            autocomplete=\"off\"\n            label=\"Mission Api Appelant\"\n          />\n\n          <v-text-field\n            v-model=\"prefixBuilding\"\n            placeholder=\"Mission Prefix Building\"\n            autocomplete=\"off\"\n            label=\"Mission Prefix Building\"\n          />\n\n          <v-text-field\n            v-model=\"pullInterval\"\n            placeholder=\"Interval to pull data from Mission\"\n            type=\"number\"\n            label=\"Interval to pull data from Mission in ms\"\n          />\n          <VueCtkDateTimePicker\n            v-model=\"lastSyncCompu\"\n            :dark=\"true\"\n            :max-date=\"today\"\n            label=\"Last Synchonization\"\n          />\n        </template>\n      </form>\n    </v-card-text>\n    <v-text-field v-model=\"appelant\" placeholder=\"appelant\" label=\"appelant\" />\n  </v-card>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SpinalNodePointer,\n} from \"spinal-env-viewer-graph-service\";\nimport { FileSystem } from \"spinal-core-connectorjs_type\";\nimport moment from \"moment\";\nimport spinalEnvViewerContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\nimport SetUpToolbar from \"./SetUpToolbar.vue\";\n\nconst CONTEXT_GEO_TYPE =\n  spinalEnvViewerContextGeographicService.constants.CONTEXT_TYPE;\nexport default {\n  name: \"SetUpSelectedOrgan\",\n  components: { SetUpToolbar },\n  props: {\n    contextId: { required: true, type: String },\n  },\n  data: function () {\n    const today = new Date();\n    return {\n      spin: false,\n      today: today.toISOString(),\n      selectedOrgan: null,\n      spatialContexts: [],\n      contexts: [],\n      selectedSpatialContext: null,\n      appelant: \"\",\n      apiLogin: \"\",\n      apiPassword: \"\",\n      showApiPassword: false,\n      pullInterval: 5 * 60 * 1000, // 5 min\n      prefixBuilding: \"\",\n      lastSync: NaN,\n      organsCfg: [],\n      // selectedContextId: \"\"\n    };\n  },\n  computed: {\n    lastSyncCompu: {\n      get() {\n        if (!this.lastSync) {\n          return null;\n        } else {\n          return new Date(this.lastSync).toISOString();\n        }\n      },\n      set(value) {\n        this.lastSync = moment.utc(value, \"YYYY-MM-DD HH:mm:ss\");\n      },\n    },\n  },\n  watch: {\n    async selectedOrgan() {\n      const selectedFile = FileSystem._objects[this.selectedOrgan];\n      // eslint-disable-next-line no-undef\n      const node = await spinal.spinalSystem.loadModelPtr(selectedFile);\n      this.appelant = node.mission.appelant.get();\n      this.apiLogin = node.mission.apiLogin.get();\n      this.apiPassword = node.mission.apiPassword.get();\n      this.pullInterval = node.mission.pullInterval.get();\n      this.prefixBuilding = node.mission.prefixBuilding.get();\n      this.lastSync = node.mission.lastSync.get();\n      this.selectedSpatialContext = node.spatialContextID.get();\n    },\n  },\n  async mounted() {\n    // eslint-disable-next-line no-undef\n    const files = await spinal.spinalSystem.load(\"/etc/Organs/ticket\");\n    const organ = await this.getLinkedOrgan();\n    for (let idx = 0; idx < files.length; idx++) {\n      const file = files[idx];\n      this.organsCfg.push({\n        name: file.name.get(),\n        id: file._server_id,\n        ptr: file._ptr.data.value,\n      });\n      if (organ && organ._server_id === file._ptr.data.value) {\n        this.selectedOrgan = file._server_id;\n      }\n    }\n\n    const graph = await window.spinal.spinalSystem.getModel();\n    const children = await graph.getChildren();\n    this.contexts = children.reduce((acc, itm) => {\n      if (itm.info.type.get() === CONTEXT_GEO_TYPE) {\n        this.spatialContexts.push({\n          id: itm.info.id.get(),\n          name: itm.info.name.get(),\n        });\n        return acc;\n      }\n      acc.push({\n        id: itm.info.id.get(),\n        name: itm.info.name.get(),\n      });\n      return acc;\n    }, []);\n  },\n  methods: {\n    async getLinkedOrgan() {\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (!node.element) {\n        return null;\n      }\n      const element = await node.element.load();\n      if (element.contextId && this.contextId === element.contextId.get()) {\n        return element;\n      }\n      return null;\n    },\n\n    saveSetting() {\n      console.log(\"SaveSetting\", this);\n    },\n    back() {\n      this.$emit(\"close\");\n    },\n    async save() {\n      const selectedFile = FileSystem._objects[this.selectedOrgan];\n      // eslint-disable-next-line no-undef\n      const organCfgModel = await spinal.spinalSystem.loadModelPtr(\n        selectedFile\n      );\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (node.element === undefined) {\n        node.add_attr(\"element\", new SpinalNodePointer(organCfgModel));\n      } else if (node.element.ptr.data !== organCfgModel._server_id) {\n        node.element.setElement(organCfgModel);\n      }\n\n      // eslint-disable-next-line no-undef\n      organCfgModel.digitalTwinPath.set(spinal.spinalSystem.getPath());\n      organCfgModel.contextId.set(this.contextId);\n      organCfgModel.spatialContextID.set(this.selectedSpatialContext);\n      organCfgModel.mission.appelant.set(this.appelant);\n      organCfgModel.mission.apiLogin.set(this.apiLogin);\n      organCfgModel.mission.apiPassword.set(this.apiPassword);\n      organCfgModel.mission.pullInterval.set(this.pullInterval);\n      organCfgModel.mission.lastSync.set(this.lastSync);\n      organCfgModel.mission.prefixBuilding.set(this.prefixBuilding);\n      organCfgModel.restart.set(true);\n      this.$emit(\"close\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n.spinal-setup-organ-body {\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n}\n\n.spinal-setup-organ-container {\n  height: calc(100% - 50px);\n  position: relative;\n  overflow: auto;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-card class=\"spinal-setup-equip-body\">\n    <set-up-toolbar\n      :title=\"'Setup Context\\'s equipment to send to Mission'\"\n      @back=\"back\"\n      @save=\"save\"\n    />\n    <v-card-text class=\"spinal-setup-equip-container\">\n      <form action=\"none\">\n        <md-field>\n          <label for=\"Select Equipment Context(s)\"\n            >Select Equipment Context(s) to send to Mission</label\n          >\n          <md-select\n            v-model=\"contexts\"\n            name=\"Equipment Context Select\"\n            md-dense\n            multiple\n          >\n            <md-option\n              v-for=\"equipContext in equipContexts\"\n              :key=\"equipContext.id\"\n              :value=\"equipContext.id\"\n            >\n              {{ equipContext.name }}\n            </md-option>\n          </md-select>\n        </md-field>\n      </form>\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { FileSystem } from \"spinal-core-connectorjs_type\";\nimport SetUpToolbar from \"./SetUpToolbar.vue\";\nexport default {\n  name: \"SetUpContextEquip\",\n  components: { SetUpToolbar },\n  props: {\n    serverId: { required: true, type: Number },\n  },\n  data: function () {\n    return {\n      equipContexts: [],\n      contexts: [],\n    };\n  },\n  async mounted() {\n    const cfg = this.getConfig();\n    const graph = SpinalGraphService.getGraph();\n    const contexts = await graph.getChildren();\n    this.equipContexts = contexts.reduce((acc, context) => {\n      if (context.info.type.get() === \"BIMObjectGroupContext\") {\n        acc.push({\n          id: context.info.id.get(),\n          name: context.info.name.get(),\n        });\n      }\n      return acc;\n    }, []);\n    this.contexts = [];\n    if (!cfg.mission.contextsEquip) cfg.mission.add_attr(\"contextsEquip\", []);\n    for (let idx = 0; idx < cfg.mission.contextsEquip.length; idx++) {\n      this.contexts.push(cfg.mission.contextsEquip[idx].get());\n    }\n  },\n  methods: {\n    back() {\n      this.$emit(\"close\");\n    },\n    async save() {\n      const cfg = this.getConfig();\n      if (!cfg.mission.contextsEquip) cfg.mission.add_attr(\"contextsEquip\", []);\n      cfg.mission.contextsEquip.set(this.contexts);\n      cfg.mission.organStatus.set(4);\n      this.$emit(\"close\");\n    },\n    getConfig() {\n      return FileSystem._objects[this.serverId];\n    },\n  },\n};\n</script>\n\n<style scoped>\n.spinal-setup-equip-body {\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n}\n\n.spinal-setup-equip-container {\n  height: calc(100% - 50px);\n  position: relative;\n  overflow: auto;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app dark class=\"LinkAndManageContextTicketMission-body\">\n    <SetUpContextEquip\n      v-if=\"openSetupEquip\"\n      :server-id=\"serverId\"\n      @close=\"openSetupEquip = false\"\n    />\n    <setUpSelectedOrgan\n      v-else-if=\"openSetup\"\n      :context-id=\"contextId\"\n      @close=\"onCloseSetup()\"\n    />\n    <v-card v-else class=\"LinkAndManageContextTicketMission-card\">\n      <v-toolbar class=\"LinkAndManageContextTicketMission-toolbar\" dense dark>\n        <v-toolbar-title> Status : {{ statusCompu }} </v-toolbar-title>\n        <v-spacer />\n        <v-btn icon @click=\"openSetup = true\">\n          <v-icon>settings</v-icon>\n        </v-btn>\n\n        <v-speed-dial v-model=\"fabBtn\" direction=\"left\" :open-on-hover=\"false\">\n          <template #activator>\n            <v-btn v-model=\"fabBtn\" color=\"blue\" small fab>\n              <v-icon>more_vert</v-icon>\n              <v-icon>close</v-icon>\n            </v-btn>\n          </template>\n\n          <v-btn\n            v-tooltip=\"runStopCompu\"\n            fab\n            :disabled=\"disableBtn\"\n            small\n            :color=\"runStopColorCompu\"\n            @click=\"runOrStop\"\n          >\n            <v-icon>{{ runStopIconCompu }}</v-icon>\n          </v-btn>\n\n          <v-btn\n            v-tooltip=\"'Restart Organ'\"\n            fab\n            :disabled=\"linked === false || restart === true\"\n            small\n            color=\"red\"\n            @click=\"restartOrgan\"\n          >\n            <v-icon>refresh</v-icon>\n          </v-btn>\n\n          <v-btn\n            v-tooltip=\"'Synchonize Spatial context to Mission'\"\n            fab\n            :disabled=\"disableBtn\"\n            small\n            color=\"blue\"\n            @click=\"syncSpatialBtn\"\n          >\n            <v-icon>location_city</v-icon>\n          </v-btn>\n          <v-btn\n            v-tooltip=\"'Synchonize Mission\\'s Process with this context'\"\n            fab\n            :disabled=\"disableBtn\"\n            small\n            color=\"blue\"\n            @click=\"syncProcessMission\"\n          >\n            <v-icon>assignment_returned</v-icon>\n          </v-btn>\n\n          <v-btn\n            v-tooltip=\"'Synchonize Spatial Equipment'\"\n            fab\n            :disabled=\"disableBtn\"\n            small\n            color=\"blue\"\n            @click=\"openSetupEquip = true\"\n          >\n            <v-icon>device_hub</v-icon>\n          </v-btn>\n        </v-speed-dial>\n      </v-toolbar>\n      <v-card-text class=\"LinkAndManageContextTicketMission-card-container\">\n        <md-empty-state\n          :md-icon=\"statusIconCompu\"\n          :md-label=\"statusCompu\"\n          md-description=\"\"\n        >\n          <md-button\n            v-if=\"linked === false\"\n            class=\"md-primary md-raised\"\n            @click=\"openSetup = true\"\n          >\n            Click here for Setup\n          </md-button>\n        </md-empty-state>\n      </v-card-text>\n    </v-card>\n    <v-progress-linear\n      v-if=\"spin\"\n      style=\"margin: 0\"\n      class=\"spinal-modal-progress-bar\"\n      :indeterminate=\"true\"\n      color=\"primary\"\n    />\n  </v-app>\n</template>\n\n<script>\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nimport SetUpSelectedOrgan from './SetUpSelectedOrgan.vue';\nimport SetUpContextEquip from './SetUpContextEquip.vue';\nexport default {\n  name: 'LinkAndManageContextTicketMission',\n  components: { SetUpSelectedOrgan, SetUpContextEquip },\n  data: function () {\n    return {\n      openSetup: false,\n      openSetupEquip: false,\n      contextId: '',\n      linked: false,\n      status: -1,\n      serverId: 0,\n      restart: false,\n      fabBtn: false,\n    };\n  },\n  computed: {\n    statusCompu() {\n      if (this.linked === false) return 'Not linked';\n      if (this.restart === true) return 'Restarting';\n      switch (this.status) {\n        case 0:\n          return 'Stand By';\n        case 1:\n          return 'Sync spatial';\n        case 2:\n          return 'Sync process';\n        case 3:\n          return 'Running';\n        case 4:\n          return 'Sync Equipments';\n        default:\n          return 'Stand By';\n      }\n    },\n    statusIconCompu() {\n      if (this.linked === false) return 'settings';\n      if (this.restart === true) return 'refresh';\n      switch (this.status) {\n        case 0:\n          return 'done';\n        case 1:\n          return 'location_city';\n        case 2:\n          return 'assignment_returned';\n        case 3:\n          return 'play_arrow';\n        case 4:\n          return 'device_hub';\n        default:\n          return 'done';\n      }\n    },\n\n    spin() {\n      if (this.restart === true || this.status === 1 || this.status === 2) {\n        return true;\n      }\n      return false;\n    },\n    disableBtn() {\n      if (this.linked === true && this.spin === false) {\n        return false;\n      }\n      return true;\n    },\n    runStopCompu() {\n      if (this.linked === true && this.status === 3) return 'Stop';\n      return 'Run';\n    },\n    runStopIconCompu() {\n      if (this.linked === true && this.status === 3) return 'pause';\n      return 'play_arrow';\n    },\n    runStopColorCompu() {\n      if (this.linked === true && this.status === 3) return 'red';\n      return 'green';\n    },\n  },\n  mounted() {},\n  methods: {\n    async getLinkedOrgan() {\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (!node.element) {\n        return null;\n      }\n      const element = await node.element.load();\n      if (element.contextId && this.contextId === element.contextId.get()) {\n        if (this.unbindFct) this.unbindFct();\n        const unbind = element.bind(() => {\n          if (this) {\n            this.status = element.mission.organStatus.get();\n            console.log('this.status', this.status);\n            this.linked = true;\n            this.serverId = element._server_id;\n            this.restart = element.restart.get();\n          }\n        });\n        this.unbindFct = () => {\n          element.unbind(unbind);\n        };\n        return element;\n      }\n      return null;\n    },\n    async runOrStop() {\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (!node.element) {\n        return null;\n      }\n      const element = await node.element.load();\n      element.mission.organStatus.set(this.status === 3 ? 0 : 3);\n    },\n    async restartOrgan() {\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (!node.element) {\n        return null;\n      }\n      const element = await node.element.load();\n      element.restart.set(true);\n    },\n    async syncSpatialBtn() {\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (!node.element) {\n        return null;\n      }\n      const element = await node.element.load();\n      element.mission.organStatus.set(1);\n    },\n    async syncProcessMission() {\n      const node = SpinalGraphService.getRealNode(this.contextId);\n      if (!node.element) {\n        return null;\n      }\n      const element = await node.element.load();\n      element.mission.organStatus.set(2);\n    },\n    syncEquipMission() {},\n    start() {},\n    async onCloseSetup() {\n      this.openSetup = false;\n      await this.getLinkedOrgan();\n    },\n    async opened(data) {\n      console.log('opened', data);\n      this.contextId = data;\n      this.status = -1;\n      this.linked = false;\n      this.serverId = 0;\n      this.restart = false;\n      await this.getLinkedOrgan();\n    },\n    removed() {},\n    close() {},\n    closeDialog() {},\n  },\n};\n</script>\n\n<style scoped>\n.LinkAndManageContextTicketMission-body {\n  height: calc(100% - 17px);\n  position: relative;\n  overflow: auto;\n}\n.spinal-modal-progress-bar {\n  margin: 0;\n  z-index: 1;\n  position: absolute;\n  bottom: 2px;\n}\n.LinkAndManageContextTicketMission-card {\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n}\n.LinkAndManageContextTicketMission-card-container {\n  height: calc(100% - 50px);\n  position: relative;\n  overflow: auto;\n}\n</style>\n<style>\n.LinkAndManageContextTicketMission-body > .application--wrap {\n  height: 100%;\n  min-height: unset;\n  position: relative;\n}\n.LinkAndManageContextTicketMission-body,\n.LinkAndManageContextTicketMission-body * {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.LinkAndManageContextTicketMission-body .v-btn--floating .v-btn__content {\n  height: unset;\n}\n\n.LinkAndManageContextTicketMission-body\n  .v-btn--floating\n  .v-btn__content\n  > :not(:only-child):first-child,\n.v-btn--floating .v-btn__content > :not(:only-child):last-child {\n  top: unset;\n}\n\n.LinkAndManageContextTicketMission-toolbar .v-speed-dial__list > div {\n  background: #212121;\n  height: 48px;\n}\n\n.LinkAndManageContextTicketMission-toolbar > .v-toolbar__content {\n  padding-right: 0;\n}\n\n.LinkAndManageContextTicketMission-body *::-webkit-scrollbar {\n  width: 5px;\n  height: 5px;\n}\n.LinkAndManageContextTicketMission-body *::-webkit-scrollbar-thumb {\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  background: rgba(169, 169, 169, 0.9);\n}\n.LinkAndManageContextTicketMission-body *::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-organ_ticket_mission.61cb9686.css.map"}