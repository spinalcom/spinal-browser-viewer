{"mappings":"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AGO,MAAM,oBAAoB,CAAA,GAAA,gCAAI;IACjC,YAAY,IAAI,EAAE,IAAI,CAAC;QACnB,KAAK;QACL,IAAI,CAAC,SAAS;YAAC;YAAM,MAAM,IAAI,CAAA,GAAA,8BAAE,EAAE,IAAI,CAAA,GAAA,8BAAE,EAAE;QAAM;IACrD;AACJ;AAGA,CAAA,GAAA,qCAAS,EAAE,gBAAgB;IAAC;CAAY;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,G,a;Y,O;gB,a,I;Y;Y,I;gB,mB,S,M;oB,I,a;gB;gB,oB,S,M;oB,I,a;gB;gB,a,S,M;oB,O,I,Y;gB;Y;Q,G;Y,G,mB;gB,I,G;a;Y,I,G;Y,G,qB;gB,G,Y;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,O,I;4B,U,S,G;gC,I,a;4B;4B,Y;wB;oB;iB,E;gB,I,G;gB,G,Y;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,W;wB,I;4B,a,I;wB;wB,O;4B,O,I;4B,U,S,G;gC,I,I;4B;4B,Y;wB;oB;iB,E;a,E;Y,I,G;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;gB,I,G;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADVxC,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAG5B,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,E,kB,E,G,Q;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,a;Q;I;I,S;Q,Q,M;Y,Q,I,kB;Q;Q,M,S,M;Y,I,O,a,C,G,+C,E,W,I,C,a;Y,I,C,a;QAOf;Q,a,W;Y,I,O,I,C,c,YAIA,IAAA,CAAA,UAAA;gBAAA;gBAAA,YAAA,IAAA,CAAA;YAAA;QAEA;QAEA,kBAAA,SAAA;YACA,OAAA,mBAAA,mBAAA;QACA;QAEA,YAAA,KAAA;YACA,IAAA,CAAA,OAAA,KAAA,CAAA,EAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,G,a;Y,O;gB,a,I;Y;Y,I;gB,mB,S,M;oB,I,a;gB;gB,oB,S,M;oB,I,a;gB;gB,a,S,M;oB,O,I,Y;gB;Y;Q,G;Y,G,mB;gB,I,G;a;Y,I,G;Y,G,qB;gB,G,Y;oB,G,S;wB,I,G;qB;oB,I,G;oB,G,Y;wB,O;4B,O,I;4B,U,S,G;gC,I,c;4B;4B,Y;wB;oB;iB,E;a,E;Y,I,G;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;gB,I,G;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAzCA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA6B;IAC3C,OAAO,kBAAkB,QAAQ,oBAA6B;IAC9D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,mBAA0B;IACxD,QAAQ,mBAA2B,QAAQ;IAC3C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A,I,gB;I,M;I,O;Q;K;I,Y;Q,iB,C,G,sC;I;I;Q,I,C;Q,O;Y,Y;Y,a;Y,gB;Y,iB;Y,S,E;Y,S,E;Q;I;I,S;Q,M,Q,E,M,E;Y,I,C,mB;Y,I,C,U,M,I,C;Q;Q,M,S,M;Y,I,O,a;gB,M,O,C,G,+C,E,Y,I,C;gB,I,K,Y,qB,C,G,yD,I,M,K,e,qB,C,G,yD;gB,C,G,+C,E,S,I,C,kB,I,C,gB,qB,C,G,yD;Y;Y,I,C,a;Q;Q,a,W;Y,I,O,I,C,c,Y,I,C,U;gB;gB,Y,I,C;Y;Q;Q,e,O;Y,I,C,iB;Y,I,C,U,E;Y,I,C,kB;Y,I,Q,I,C,Q,K,C,K,G,M;Y,I,O,I,C,U,M;Q;Q,c,O;YA4Cf,IAAA,CAAA,iBAAA;QACA;QACA;YACA,MAAA,c,C,G,+C,E,mB;YAEA,MAAA,UAAA,YAAA,IAAA,CAAA,UAAA,QAAA,KAAA;Y,M,U,Q,I,O;gBAEA,IAAA,kBAAA,MAAA,CAAA,GAAA,+CAAA,EAAA,qBACA,GAAA,IACA,GAAA;gBAEA,GAAA,UAAA,gBAAA,IAAA,CAAA,UAAA,QAAA;gBACA,OAAA;YACA;YACA,OAAA,QAAA,IAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;;;AC/EA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAsC;IACpD,OAAO,kBAAkB,QAAQ,oBAAsC;IACvE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAmC;IACjE,QAAQ,oBAAoC,QAAQ;IACpD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;Q;Q;Q;K;I,S;Q;Y,I,C,M;Q;Q,Y,E;Y,I,C,M,U;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,I,G,I,G,I;a;S;Q,I,G;Q,G,c;Y,a;Q,G;Y,G,W,I,G,I,M,S,I,E,K;gB,O,G,gB;oB,Y;wB;4B,M;4B,S;4B,O,K;4B,Y;wB;qB;oB,K;oB,a;oB,O;wB,Y,K,O,I;oB;oB,I;wB,S,S,M;4B,O,I,W,K;wB;oB;gB,G;oB,G,Q;wB,a;oB,G;wB,I,G,I,G,K;qB;iB;Y,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,G,a;Y,a;Y,O;gB,a,I;Y;Y,I;gB,mB,S,M;oB,I,a;gB;gB,oB,S,M;oB,I,a;gB;gB,a,S,M;oB,O,I,Y;gB;Y;Q,G;Y,G,mB;gB,I,G;a;Y,I,G;Y,G,qB;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,S;4B,Q,I;4B,gB,I;4B,c;wB;wB,I;4B,U,I;wB;oB;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,S;4B,Q,I;4B,gB,I;4B,c;wB;wB,I;4B,U,I;wB;oB;iB,E;a;Y,I,G;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;gB,I,G;gB,G,a;oB,a;oB,O;wB,Y,C,I;oB;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA4B;IAC1C,OAAO,kBAAkB,QAAQ,oBAA4B;IAC7D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAyB;IACvD,QAAQ,oBAA0B,QAAQ;IAC1C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A,I,E,kB,E,G,Q;A,I,gB;I,M;I,O;Q;K;I,Y;Q,iB,C,G,sC;I;I;Q,I,C;Q,O;Y,Y;Y,a;Y,gB;Y,iB;Y,gB;Y,kB;Y,S,E;Y,S,E;Y,S,E;Y,W,E;Q;I;I,S;Q,M,Q,M;Y,Q,I,kB;Y,sD;Y,Q,I,yB,O;Y,Q,I,8B,C,G,+C,E,mB;Y;;;;U,G,I,C,e,O;Y;;;;;;;;;c,G,I,C,U,M,I,C;Q;Q,M,S,M;Y,I,O,a;gB,M,c,I,C;gB,M,sB,M,C,G,+C,E,Y,Y,G,O;oB;oB;iB;gB,K,I,S,oB;oB,Q,I,iB;oB,Q,I,6B,I,C;oB,8D;oB;6F,G,C,G,+C,E,S,M,G,O,I,C,kB,e,C,G,yD;gB;Y;;;;;U,G;Y,I,C,a;Q;Q,a,W;YAwEf,IAAA,OAAA,IAAA,CAAA,cAAA,YACA,IAAA,CAAA,UAAA;gBAAA;gBAAA,YAAA,IAAA,CAAA;YAAA;QAEA;QAEA,eAAA,OAAA;YACA,IAAA,CAAA,iBAAA;YACA,IAAA,CAAA,mBAAA;Y,I,C,iB;YAEA,IAAA,CAAA,YAAA,EAAA;YACA,IAAA,CAAA,UAAA,EAAA;YACA,IAAA,CAAA,UAAA,EAAA;YACA,IAAA,CAAA,kBAAA;YACA,IAAA,QAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,MAAA;YACA,IAAA,OACA,IAAA,CAAA,UAAA,MAAA;QAEA;QACA,MAAA,cAAA,OAAA;YACA,IAAA,CAAA,iBAAA;YACA,IAAA,UAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,MAAA,IAAA,CAAA;YACA,IAAA,SAAA;gBACA,QAAA,IAAA,IAAA,CAAA,gBAAA;gBACA,IAAA,cAAA,MAAA,CAAA,GAAA,+CAAA,EAAA,qBACA,IAAA,CAAA,gBACA,QAAA;gBAEA,IAAA,CAAA,UAAA,YAAA,IAAA,CAAA,UAAA,QAAA;YACA;QACA;QACA,MAAA,cAAA,OAAA;YACA,IAAA,CAAA,iBAAA;YACA,IAAA,UAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,MAAA,IAAA,CAAA;YACA,IAAA,SAAA;gBACA,QAAA,IAAA,IAAA,CAAA,gBAAA;gBACA,IAAA,gBAAA,MAAA,CAAA,GAAA,+CAAA,EAAA,qBACA,IAAA,CAAA,gBACA,QAAA;gBAEA,IAAA,CAAA,YAAA,cAAA,IAAA,CAAA,UAAA,QAAA;YACA;QACA;QACA,gBAAA,OAAA;YACA,QAAA,IAAA;YACA,IAAA,CAAA,mBAAA;QACA;QACA;YACA,MAAA,cAAA,CAAA,GAAA,+CAAA,EAAA,mBAAA;YACA,MAAA,UAAA,YAAA,IAAA,CAAA,UAAA,QAAA,KAAA;YACA,MAAA,UAAA,QAAA,IAAA,OAAA;gBACA,IAAA,kBAAA,MAAA,CAAA,GAAA,+CAAA,EAAA,qB,G,IAEA,GAAA;gBAEA,GAAA,UAAA,gBAAA,IAAA,CAAA,UAAA,QAAA;gBACA,OAAA;YACA;YACA,OAAA,QAAA,IAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,G,a;Y,a;Y,O;gB,a,I;Y;Y,I;gB,mB,S,M;oB,I,a;gB;gB,oB,S,M;oB,I,a;gB;gB,a,S,M;oB,O,I,Y;gB;Y;Q,G;Y,G,mB;gB,I,G;a;Y,I,G;Y,G,qB;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,S;4B,Q,I;4B,gB,I;4B,c;wB;wB,I;4B,U,I;wB;oB;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,S;4B,Q,I;4B,gB,I;4B,c;wB;wB,I;4B,U,I;wB;oB;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,S;4B,Q,I;4B,gB,I;4B,c;wB;wB,I;4B,U,I;wB;oB;iB,E;gB,I,G;gB,G,O;oB,a;gB,G;oB,G,iB;wB,O;4B,S;4B,Q,I;4B,gB,I;4B,c;wB;wB,I;4B,U,I;wB;oB;iB,E;a;Y,I,G;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;gB,I,G;gB,G,a;oB,a;oB,O;wB,Y,C,I;oB;oB,I;wB,S,S,M;4B,O,I,Y;wB;oB;gB,G;oB,I,G;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAtJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAwC;IACtD,OAAO,kBAAkB,QAAQ,oBAAwC;IACzE,OAAO,WAAW;IAG5B,QAAQ,oBAAsC,QAAQ;IACtD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,M,E,yB,E,G,Q;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,e,E;Y,sB;Q;I;I,S;Q,M,Q,E,Y,E,O,E,K,E;Y,I,C,gB,M,I,C,oB,a,G;Q;Q,M,qB,M;Y,M,gB,M,C,G,sE,E,oC;Y,O,I,C,uB;Q;Q,wB,a;Y,M,S,c,I,C;gB,O,O,U,I,C;oB,S,O,C,E,O,K,C,E,S,K,C;oB,O;gB;Y;Y,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BACZ,IAAI,CAAC,SAAS;wBACd,IAAI,CAAC,YAAY;oBACnB;gBACF;gBAEA,YAAY,GAAG,EAAE;oBACf,IAAI,IAAI,CAAC,WAAW,MAClB,IAAI,CAAC,WAAW;yBAEhB,IAAI,CAAC,UAAU;gBAEnB;gBAEA;;SAEC,GACD,UAAU,WAAW,EAAE;oBACrB,IAAI,CAAC,WAAW;gBAClB;YACF;YACA,IAAI,sBAAsB,IAAI;YAC9B,0BAA0B,cAAc,IAAI,MAAM;QACpD;IACF;AACF;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,Y;gB,G,S;oB,O;wB,O;oB;gB,G;oB,I,G;iB;gB,I,G;gB,G,a;oB,O;wB,Q;wB,M;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,uB;wB;wB,Y;oB;gB,G,I,G,I,e,S,Y;oB,O,G,a;wB,K,a;wB,O;4B,S,a;wB;oB,G;wB,I,G,I,G,a;qB;gB,I;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,C,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AJ/GA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;AKLA,MAAM,EACF,gBAAgB,EACjB,GAAG,QAAQ;AACZ,MAAM,EACJ,yBAAyB,EAC1B,GAAG,QAAQ;AACd,MAAM,EAAE,eAAe,EAAE,GAAG,QAAQ;AAElC,MAAM,wBAAwB;IAC5B,aAAc;QACZ,KAAK,CAAC,qBACJ,oCAAoC;YAClC,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACJ;IAEA,QAAQ,MAAM,EAAE;QACZ,MAAM,mBAAmB,OAAO,aAAa,KAAK;QAClD,IAAG,qBAAqB,qBAAqB,OAAO,QAAQ,QAAQ;QACpE,OAAO,QAAQ,QAAQ;IAC3B;IAEA,OAAO,MAAM,EAAE;QAET,0BAA0B,UAAU,qBAAqB;IAE/D;AACF;AAEA,OAAO,UAAU;;;AChCnB,MAAM,EACF,gBAAgB,EACjB,GAAG,QAAQ;AACZ,MAAM,EACJ,yBAAyB,EAC1B,GAAG,QAAQ;AACd,MAAM,EAAE,eAAe,EAAE,GAAG,QAAQ;AAEpC,MAAM,sBAAsB;IACxB,aAAc;QACZ,KAAK,CAAC,yBACJ,0CAA0C;YACxC,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACJ;IAEA,QAAQ,MAAM,EAAE;QACZ;;qCAE6B,GAC7B,OAAO,QAAQ,QAAQ;IAC3B;IAEA,OAAO,MAAM,EAAE;QAET,0BAA0B,UAAU,uBAAuB;IAEjE;AACJ;AAEE,OAAO,UAAU;;;AC3BnB;AACA;AAPA,MAAM,EAAE,gBAAgB,EAAE,GAAG,QAAQ;AAErC,MAAM,EACJ,yBAAyB,EAC1B,GAAG,QAAQ;AAKZ,MAAM,6BAA6B;IACjC,aAAc;QACZ,KAAK,CACH,gCACA,4CACA;YACE,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IAEJ;IAEA,QAAQ,MAAM,EAAE;QACd,MAAM,cAAc,OAAO,QAAQ,KAAK;QAExC,MAAM,iBAAiB,CAAA,GAAA,6DAAkB,EAAE,UAAU;QAErD,IAAI,CAAC,gBAAgB,OAAO,QAAQ,QAAQ;QAE5C,MAAM,OAAO,OAAO,aAAa,KAAK;QAEtC,OAAO,QAAQ,QAAQ,CAAA,GAAA,iCAAqB,EAAE,QAAQ;IACtD,oDAAoD;IACpD,6DAA6D;IAC7D,qDAAqD;IACrD,0CAA0C;IAE1C,IAAI;IAEJ,4CAA4C;IAC5C,4CAA4C;IAC5C,kEAAkE;IAClE,IAAI;IAEJ,8BAA8B;IAChC;IAEA,OAAO,MAAM,EAAE;QACb,0BAA0B,UAAU,yBAAyB;IAC7D,mEAAmE;IACrE;AACF;AAEA,OAAO,UAAU","sources":["node_modules/spinal-env-viewer-plugin-upload/index.js","node_modules/spinal-env-viewer-plugin-upload/registerDialog.js","node_modules/spinal-env-viewer-plugin-upload/src/vue/uploadFile.vue","node_modules/spinal-env-viewer-plugin-upload/src/model/profilModel.js","node_modules/spinal-env-viewer-plugin-upload/src/vue/createContext.vue","node_modules/spinal-env-viewer-plugin-upload/src/vue/linkProfil.vue","node_modules/spinal-env-viewer-plugin-upload/src/vue/linkTogroupTemplate.vue","node_modules/spinal-env-viewer-plugin-upload/src/vue/linkGroup.vue","node_modules/spinal-env-viewer-plugin-upload/src/vue/selectControlEndpoint.vue","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-plugin-upload/src/button/uploadExcel.js","node_modules/spinal-env-viewer-plugin-upload/src/button/contextUpload.js","node_modules/spinal-env-viewer-plugin-upload/src/button/linkEndpointToProfil.js"],"sourcesContent":["import \"./registerDialog\";\nimport {spinalContextMenuService} from \"spinal-env-viewer-context-menu-service\";\nimport UploadExcelFile from \"./src/button/uploadExcel\"\nimport ContextUpload from \"./src/button/contextUpload\"\nimport LinkEndpointToProfil from \"./src/button/linkEndpointToProfil\";\n// import LinkGroupToEndpoint from \"./src/button/linkGroupToEndpoint\";\n\nconst sidebarName = \"GraphManagerSideBar\";\nconst topbarName = \"GraphManagerTopBar\"\n\n\nspinalContextMenuService.registerApp(sidebarName, new UploadExcelFile(), [3]);\nspinalContextMenuService.registerApp(topbarName, new ContextUpload(), [3]);\nspinalContextMenuService.registerApp(sidebarName, new LinkEndpointToProfil(), [3]);\n// spinalContextMenuService.registerApp(sidebarName, new LinkGroupToEndpoint(), [3]);\n\n\n","import vue from \"vue\";\nimport UploadVue from \"./src/vue/uploadFile.vue\";\nimport CreateContext from \"./src/vue/createContext.vue\";\nimport LinkProfil from \"./src/vue/linkProfil.vue\";\nimport LinkGroup from \"./src/vue/linkGroup.vue\";\nimport SelectControlEndpoint from \"./src/vue/selectControlEndpoint.vue\";\n\nconst {\n  SpinalMountExtention,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst dialogs = [\n  {\n    name: \"UploadExcelDialog\",\n    vueMountComponent: vue.extend(UploadVue),\n    parentContainer: document.body,\n  },\n  {\n    name: \"ContextUploadDialog\",\n    vueMountComponent: vue.extend(CreateContext),\n    parentContainer: document.body,\n  },\n  {\n    name: \"LinkProfilDialog\",\n    vueMountComponent: vue.extend(LinkProfil),\n    parentContainer: document.body,\n  },\n  {\n    name: \"LinkGroupDialog\",\n    vueMountComponent: vue.extend(LinkGroup),\n    parentContainer: document.body,\n  },\n  {\n    name: \"selectControlEndpoint\",\n    vueMountComponent: vue.extend(SelectControlEndpoint),\n    parentContainer: document.body,\n  },\n];\n\nfor (let index = 0; index < dialogs.length; index++) {\n  SpinalMountExtention.mount(dialogs[index]);\n}\n","<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Add a simulation file</md-dialog-title>\n      <md-dialog-content>\n<md-field>\n        <label>Profil name</label>\n        <md-input v-model=\"profilName\"></md-input>\n      </md-field>\n\n      <md-field>\n        <label>Upload</label>\n        <md-file v-model=\"f\" @md-change=\"changeFile\"/>\n      </md-field>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport { SpinalGraphService, SPINAL_RELATION_LST_PTR_TYPE } from 'spinal-env-viewer-graph-service';\nimport {ProfilModel} from \"../model/profilModel\"\nvar {SpinalExcelManager} = require('spinal-env-viewer-plugin-excel-manager-service');\n\nexport default {\n  name: \"uploadComponent\",\n  props: [\"onFinised\"],\n  data() {\n    this.contextId;\n    return {\n      showDialog: true, \n      f: undefined, \n      file: undefined,\n      profilName: \"\"\n    };\n  },\n  methods: {\n    opened(option) {\n      console.log(\"voici l'option\",option); \n      this.contextId = option.context.id.get()\n    },\n    async removed(option) {\n      if(option.closeResult){\n\n        const valueExcel = await this.getDataFromExcel(this.file);\n        console.log(\"conversion du fichier excel\",valueExcel);\n        const sheetNames = Object.keys(valueExcel);\n        const sheetValues = sheetNames.map(el => {\n          return valueExcel[el].map(element => {\n            const valueKey = Object.keys(element)[1];\n\n            return {\n              date : new Date(element[\"DATE / HEURE\"]).getTime(),\n              value : element[valueKey]\n            }\n            \n          })\n        })\n        const values = sheetValues.flat().filter(el => {\n          return (!isNaN(el.date) && typeof el.date == \"number\") && (!isNaN(el.value) && typeof el.value == \"number\") \n        })\n\n        const profilModel = new ProfilModel(this.profilName, values);\n        const nodeId = SpinalGraphService.createNode({name: this.profilName, type: \"uploadProfil\"}, profilModel);\n        SpinalGraphService.addChildInContext(this.contextId, nodeId, this.contextId, \"hasUploadProfil\", SPINAL_RELATION_LST_PTR_TYPE)\n        \n       \n       \n       \n       // const values = sheetValues.\n\n\n        // const valueKey = Object.keys(valueExcel)[1];\n        // const date = new Date(element[\"DATE / HEURE\"]).getTime();\n        // const value = element[valueKey];\n\n        // const value = Object.keys(valueExcel).map()\n\n        \n        // console.log(\"value\",value,this.profilName);\n        // sauvegarder le fichier excel et le convertir en object\n      }\n      this.showDialog = false \n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n  getDataFromExcel(excelLink){\n    return SpinalExcelManager.convertExcelToJson(excelLink);\n  },\n\n  changeFile(files){\n    this.file = files[0];\n  }\n  }\n};\n</script>","import { spinalCore, Model, Ptr, Lst, Choice } from 'spinal-core-connectorjs_type';\n\n\nexport class ProfilModel extends Model{\n    constructor(name, data){\n        super();\n        this.add_attr({name, data: new Ptr(new Lst(data))})\n    }\n}\n\n\nspinalCore.register_models([ProfilModel])","<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Add a simulation context</md-dialog-title>\n      <md-dialog-content>\n      <md-field>\n        <label>Context name</label>\n        <md-input v-model=\"contextName\"></md-input>\n      </md-field>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nvar {SpinalExcelManager} = require('spinal-env-viewer-plugin-excel-manager-service');\n\n\nexport default {\n  name: \"createContext\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true, \n      contextName: \"\"\n    };\n  },\n  methods: {\n    opened(option) {\n      console.log(\"voici l'option\",option)\n    },\n    async removed(option) {\n      if(option.closeResult){\n        SpinalGraphService.addContext(this.contextName, \"uploadFileContext\")\n      }\n      this.showDialog = false \n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n  getDataFromExcel(excelLink){\n    return SpinalExcelManager.convertExcelToJson(excelLink);\n  },\n\n  changeFile(files){\n    this.file = files[0];\n  }\n  }\n};\n</script>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog class=\"dialogApp\"\n               :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Link an endpoint to a profil</md-dialog-title>\n      <md-dialog-content class=\"content\">\n        <div class=\"section\">\n          <link-template :title=\"'Context'\"\n                         :data=\"context\"\n                         :itemSelected=\"contextSelected\"\n                         @select=\"selectContext\"\n                         :disableBtn=\"true\"></link-template>\n        </div>\n\n        <div class=\"section\">\n          <link-template :title=\"'Profil'\"\n                         :data=\"profils\"\n                         :itemSelected=\"profilSelected\"\n                         @select=\"selectProfil\"\n                         :disableBtn=\"true\"></link-template>\n        </div>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\"\n                   :disabled=\"!profilSelected\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\n\nimport linkTemplate from \"./linkTogroupTemplate.vue\";\n\nexport default {\n  name: \"createContext\",\n  props: [\"onFinised\"],\n  components: { \"link-template\": linkTemplate },\n  data() {\n    this.endpointSelected;\n    return {\n      showDialog: true,\n      contextName: \"\",\n      profilSelected: \"\",\n      contextSelected: \"\",\n      context: [],\n      profils: [],\n    };\n  },\n  methods: {\n    async opened({ nodeId }) {\n      this.endpointSelected = nodeId;\n      this.context = await this.getData();\n    },\n    async removed(option) {\n      if (option.closeResult) {\n        const node = SpinalGraphService.getRealNode(this.endpointSelected);\n        if (node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n          await node.removeRelation(\n            \"endpointHasProfil\",\n            SPINAL_RELATION_PTR_LST_TYPE\n          );\n        SpinalGraphService.addChild(\n          this.endpointSelected,\n          this.profilSelected,\n          \"endpointHasProfil\",\n          SPINAL_RELATION_PTR_LST_TYPE\n        );\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n    selectContext(element) {\n      this.profilSelected = undefined;\n      this.profils = [];\n      this.contextSelected = element;\n      let found = this.context.find((el) => el.id == element);\n      if (found) this.profils = found.profils;\n    },\n    selectProfil(element) {\n      this.profilSelected = element;\n    },\n    getData() {\n      const contextNode =\n        SpinalGraphService.getContextWithType(\"uploadFileContext\");\n      const context = contextNode.map((element) => element.info.get());\n      const promise = context.map(async (el) => {\n        let contextChildren = await SpinalGraphService.getChildrenInContext(\n          el.id,\n          el.id\n        );\n        el.profils = contextChildren.map((element) => element.get());\n        return el;\n      });\n      return Promise.all(promise);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dialogApp {\n  width: 50%;\n  height: 100%;\n}\n.dialogApp .content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.dialogApp .content .section {\n  width: 50%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"subContent\">\n      <div class=\"title\">\n         <div>{{title}}</div>\n         <!-- <div class=\"md-layout-item md-size-10 mdIcon\">\n        <md-button class=\"md-icon-button\"\n                   @click=\"createEvent\"\n                   :disabled=\"disableBtn\">\n          <md-icon>control_point</md-icon>\n        </md-button>\n      </div> -->\n      </div>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n\n.subContent .title {\n   width: 100%;\n   height: 10%;\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n\n.subContent .container {\n   width: 100%;\n   height: 90%;\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog\n      class=\"dialogApp\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n    >\n      <md-dialog-title>Link an endpoint to a profil</md-dialog-title>\n      <md-dialog-content class=\"content\">\n        <div class=\"section\">\n          <link-template\n            :title=\"'Context'\"\n            :data=\"context\"\n            :itemSelected=\"contextSelected\"\n            @select=\"selectContext\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n\n        <div class=\"section\">\n          <link-template\n            :title=\"'Profil'\"\n            :data=\"profils\"\n            :itemSelected=\"profilSelected\"\n            @select=\"selectProfil\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n        <div class=\"section\">\n          <link-template\n            :title=\"'Device'\"\n            :data=\"devices\"\n            :itemSelected=\"deviceSelected\"\n            @select=\"selectDevice\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n        <div class=\"section\">\n          <link-template\n            :title=\"'Endpoint'\"\n            :data=\"endpoints\"\n            :itemSelected=\"endpointSelected\"\n            @select=\"selectEndpoint\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n          >Close</md-button\n        >\n        <md-button\n          class=\"md-primary\"\n          @click=\"closeDialog(true)\"\n          :disabled=\"!endpointSelected\"\n          >Save</md-button\n        >\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE\n} from \"spinal-env-viewer-graph-service\";\nvar {\n  SpinalExcelManager\n} = require(\"spinal-env-viewer-plugin-excel-manager-service\");\nimport linkTemplate from \"./linkTogroupTemplate.vue\";\n\nexport default {\n  name: \"createContext\",\n  props: [\"onFinised\"],\n  components: { \"link-template\": linkTemplate },\n  data() {\n    this.selectedNode;\n    return {\n      showDialog: true,\n      contextName: \"\",\n      profilSelected: \"\",\n      contextSelected: \"\",\n      deviceSelected: \"\",\n      endpointSelected: \"\",\n      context: [],\n      profils: [],\n      devices: [],\n      endpoints: []\n    };\n  },\n  methods: {\n    async opened(option) {\n      console.log(\"voici l'option\", option);\n      //this.endpointSelected = option.selectedNode.id.get()\n      console.log(\"this is selctedNode: \", option.selectedNode);\n      console.log(\n        \"this is the context name: \",\n        SpinalGraphService.getContextWithType(\"BIMObjectGroupContext\")\n      );\n      /* const currentNode = option.selectedNode;\n      const currentNodeChildren = await SpinalGraphService.getChildren(currentNode.id.get(), \"groupHasBIMObject\");\n      for(let child of currentNodeChildren){\n          console.log(child.name.get());\n        } */\n      this.selectedNode = option.selectedNode;\n      /*    const currentNodeChildren = await SpinalGraphService.getChildren(currentNode.id.get(), \"groupHasBIMObject\");\n            for(let child of currentNodeChildren){\n                console.log(\"this is child\",child);\n                console.log(\"this thisEndpointSelected\", this.endpointSelected);\n                //const node = SpinalGraphService.getRealNode(child.id.get());\n                /* if(node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n                await node.removeRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE) \n                //SpinalGraphService.addChild(child.id.get(), this.endpointSelected, \"hasEndPoint\", SPINAL_RELATION_PTR_LST_TYPE)\n\n            } */\n      this.context = await this.getData();\n    },\n    async removed(option) {\n      if (option.closeResult) {\n        const currentNode = this.selectedNode;\n        const currentNodeChildren = await SpinalGraphService.getChildren(\n          currentNode.id.get(),\n          [\"groupHasBIMObject\", \"groupHasgeographicRoom\"]\n        );\n        for (let child of currentNodeChildren) {\n          console.log(\"this is child\", child);\n          console.log(\"this thisEndpointSelected\", this.endpointSelected);\n          //const node = SpinalGraphService.getRealNode(child.id.get());\n          /* if(node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n                await node.removeRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE) */\n\n          SpinalGraphService.addChild(\n            child.id.get(),\n            this.endpointSelected,\n            \"hasEndPoint\",\n            SPINAL_RELATION_PTR_LST_TYPE\n          );\n        }\n        /* if(option.closeResult){\n            const node = SpinalGraphService.getRealNode(this.endpointSelected);\n            if(node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n            await node.removeRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE)\n            SpinalGraphService.addChild(this.endpointSelected, this.profilSelected, \"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE)\n        } */\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n    selectContext(element) {\n      this.profilSelected = undefined;\n      this.endpointSelected = undefined;\n      this.deviceSelected = undefined;\n      this.endpoints = [];\n      this.profils = [];\n      this.devices = [];\n      this.contextSelected = element;\n      let found = this.context.find(el => el.id == element);\n      if (found) {\n        this.profils = found.profils;\n      }\n    },\n    async selectProfil(element) {\n      this.profilSelected = element;\n      let context = this.context.find(el => el.id == this.contextSelected);\n      if (context) {\n        console.log(this.profilSelected, context);\n        let deviceFound = await SpinalGraphService.getChildrenInContext(\n          this.profilSelected,\n          context.id\n        );\n        this.devices = deviceFound.map(element => element.get());\n      }\n    },\n    async selectDevice(element) {\n      this.deviceSelected = element;\n      let context = this.context.find(el => el.id == this.contextSelected);\n      if (context) {\n        console.log(this.deviceSelected, context);\n        let endpointFound = await SpinalGraphService.getChildrenInContext(\n          this.deviceSelected,\n          context.id\n        );\n        this.endpoints = endpointFound.map(element => element.get());\n      }\n    },\n    selectEndpoint(element) {\n      console.log(element);\n      this.endpointSelected = element;\n    },\n    getData() {\n      const contextNode = SpinalGraphService.getContextWithType(\"Network\");\n      const context = contextNode.map(element => element.info.get());\n      const promise = context.map(async el => {\n        let contextChildren = await SpinalGraphService.getChildrenInContext(\n          el.id,\n          el.id\n        );\n        el.profils = contextChildren.map(element => element.get());\n        return el;\n      });\n      return Promise.all(promise);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.dialogApp {\n  width: 50%;\n  height: 100%;\n}\n.dialogApp .content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.dialogApp .content .section {\n  width: 50%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n<template>\n  <md-dialog class=\"dialogApp\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title>Link an endpoint to a profil</md-dialog-title>\n\n    <md-dialog-content class=\"content\">\n      <md-field>\n        <label for=\"movie\">Select ControlPoints</label>\n        <md-select v-model=\"controlPointSelected\"\n                   name=\"controlPoints\"\n                   id=\"controlPoints\">\n          <md-option v-for=\"controlPoint in controlPoints\"\n                     :key=\"controlPoint.id\"\n                     :value=\"controlPoint.id\">{{controlPoint.name}}</md-option>\n        </md-select>\n      </md-field>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"!controlPointSelected\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { spinalControlPointService } from \"spinal-env-viewer-plugin-control-endpoint-service\";\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nexport default {\n  name: \"selectControlPoint\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      controlPoints: [],\n      controlPointSelected: undefined,\n    };\n  },\n  methods: {\n    async opened({ selectedNode, context, graph }) {\n      this.controlPoints = await this.getControlEndpoints(\n        selectedNode.id.get()\n      );\n    },\n\n    async getControlEndpoints(nodeId) {\n      const controlPoints =\n        await spinalControlPointService.getControlEndpointLinkedToGroupItem(\n          nodeId\n        );\n\n      return this.formatControlEndpoints(controlPoints);\n    },\n\n    formatControlEndpoints(controlPoints) {\n      const format = controlPoints.map((profil) => {\n        return profil.endpoints.map((endpoint) => {\n          endpoint.name = `${profil.name}/${endpoint.name}`;\n          return endpoint;\n        });\n      });\n\n      return format.flat();\n    },\n\n    async removed(option) {\n      if (option.closeResult) {\n        spinalPanelManagerService.openPanel(\"LinkProfilDialog\", {\n          nodeId: this.controlPointSelected,\n        });\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n  },\n};\n</script>","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","const {\n    SpinalContextApp\n  } = require(\"spinal-env-viewer-context-menu-service\");\n  const {\n    spinalPanelManagerService\n  } = require(\"spinal-env-viewer-panel-manager-service\");\nconst { SpinalBmsDevice } = require(\"spinal-model-bmsnetwork\");\n  \n  class UploadExcelFile extends SpinalContextApp {\n    constructor() {\n      super(\"Upload Excel file\",\n        \"This button upload an excel file\", {\n          icon: \"file_upload\",\n          icon_type: \"in\",\n          backgroundColor: \"#FF0000\",\n          fontColor: \"#FFFFFF\"\n        });\n    }\n  \n    isShown(option) {\n        const selectedNodeType = option.selectedNode.type.get();\n        if(selectedNodeType === \"uploadFileContext\") return Promise.resolve(true);\n        return Promise.resolve(-1);\n    }\n  \n    action(option) {\n      \n          spinalPanelManagerService.openPanel('UploadExcelDialog', option);\n      \n    }\n  }\n  \n  module.exports = UploadExcelFile;","const {\n    SpinalContextApp\n  } = require(\"spinal-env-viewer-context-menu-service\");\n  const {\n    spinalPanelManagerService\n  } = require(\"spinal-env-viewer-panel-manager-service\");\nconst { SpinalBmsDevice } = require(\"spinal-model-bmsnetwork\");\n  \nclass ContextUpload extends SpinalContextApp {\n    constructor() {\n      super(\"Create upload context\",\n        \"This button create a context to upload\", {\n          icon: \"navigation\",\n          icon_type: \"in\",\n          backgroundColor: \"#FF0000\",\n          fontColor: \"#FFFFFF\"\n        });\n    }\n  \n    isShown(option) {\n        /* const selectedNodeType = option.selectedNode.type.get();\n        if(selectedNodeType === SpinalBmsDevice.nodeTypeName) return Promise.resolve(true);\n        return Promise.resolve(-1);  */\n        return Promise.resolve(true);\n    }\n  \n    action(option) {\n      \n          spinalPanelManagerService.openPanel('ContextUploadDialog', option);\n      \n    }\n}\n  \n  module.exports = ContextUpload;","const { SpinalContextApp } = require(\"spinal-env-viewer-context-menu-service\");\n\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\nimport { GEOGRAPHIC_TYPES_ORDER } from \"spinal-env-viewer-context-geographic-service/build/constants\";\n\nclass LinkEndpointToProfil extends SpinalContextApp {\n  constructor() {\n    super(\n      \"Link an endpoint to a profil\",\n      \"This button link an endpoint to a profil\",\n      {\n        icon: \"share\",\n        icon_type: \"in\",\n        backgroundColor: \"#FF0000\",\n        fontColor: \"#FFFFFF\",\n      }\n    );\n  }\n\n  isShown(option) {\n    const contextType = option.context.type.get();\n\n    const isGroupContext = groupManagerService.isContext(contextType);\n\n    if (!isGroupContext) return Promise.resolve(-1);\n\n    const type = option.selectedNode.type.get();\n\n    return Promise.resolve(GEOGRAPHIC_TYPES_ORDER.indexOf(type));\n    // if(GEOGRAPHIC_TYPES_ORDER.indexOf(type) !== -1) {\n    //   const isCategory = groupManagerService.isCategory(type);\n    // const isGroup = groupManagerService.isGroup(type);\n    // const isContext = type === contextType;\n\n    // }\n\n    // if (isCategory || isGroup || isContext) {\n    //   const type = getGroupType(contextType);\n    //   return Promise.resolve(GEOGRAPHIC_TYPES_ORDER.indexOf(type));\n    // }\n\n    // return Promise.resolve(-1);\n  }\n\n  action(option) {\n    spinalPanelManagerService.openPanel(\"selectControlEndpoint\", option);\n    // spinalPanelManagerService.openPanel(\"LinkProfilDialog\", option);\n  }\n}\n\nmodule.exports = LinkEndpointToProfil;\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-upload.569cee3c.js.map"}