{"mappings":";;;;A;;;;;A;;;;;;A;;;;;A;;;;A;;;;A;;;;;;A;;;;;;A;;;;A;;;;;;;A;;;;A;;;;;;A;;;;A;;;;;A;;;;;;A;;;;;;A;;;;;;A;;;;A;;;;A;;;;;;A;;;;A;;;;;A;;;;;;A;;;;;A;;;;;;;;;;A;;;;;;;;A;;;;A;;;;;;;;A;;;;A;;;;;;;;A;;;;;;;A;;;;;;;A;;;;;A;;;;A;;;;A;;;;;;;;A;;;;;;;;;A;;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-device_profile/vue/addDevices.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/addDeviceProfiles.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/itemList.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/ItemDetail.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/monitoringDetails.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/itemSupervision.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/globalSupervision.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/links/linkToGroupTemplate.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/links/LinkComponent.vue","node_modules/spinal-env-viewer-plugin-device_profile/vue/ShowBacnetValue.vue"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app>\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog\" max-width=\"1200\">\n        <v-card :dark=\"true\">\n\n          <div>\n            <md-table\n              v-model=\"users\"\n              md-sort=\"name\"\n              md-sort-order=\"asc\"\n              md-card\n              md-fixed-header\n              @md-selected=\"onSelect\"\n            >\n            \n              <md-table-toolbar max-width=\"1200\">\n                <h1 class=\"md-title\">Item List</h1>\n\n                <md-button class=\"buttonExport\" @click=\"exportJSON\">Export JSON</md-button>\n                \n                <!-- <md-button class=\"md-dense md-raised md-primary\" @click=\"importBOGFile\">Import BOG file</md-button> -->\n                <md-button class=\"buttonImportBOG\" @click=\"importBOGFile\">Import BOG file</md-button> \n\n                <md-button class=\"md-icon-button md-raised md-accent\" @click=\"clearItemList\">\n                  <md-icon>delete_forever</md-icon>\n                </md-button>\n              </md-table-toolbar>\n\n\n              <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"single\">\n                <md-table-cell md-label=\"Item name\" md-sort-by=\"Item name\">{{\n                  item.name\n                }}</md-table-cell>\n                <md-table-cell md-label=\"Maitre\" md-sort-by=\"Maitre\">{{\n                  item.maitre\n                }}</md-table-cell>\n                <md-table-cell md-label=\"Item Type\" md-sort-by=\"Item Type\">{{\n                  item.itemType\n                }}</md-table-cell>\n\n                <md-table-cell md-label=\"Monitoring\">\n                  <!-- <md-checkbox class=\"md-primary\" @change=\"onChangeMonitoring\">{{item.monitoring}}</md-checkbox> -->\n                  <!-- <md-checkbox class=\"md-primary\" v-model=\"item.monitoring\" >{{item.monitoring}}</md-checkbox> -->\n                  <!-- <md-checkbox class=\"md-primary\" v-model=\"item.monitoring\" ></md-checkbox> -->\n                  <md-button class=\"md-icon-button\" @click=\"onMonitoring(item)\">\n                    <md-icon>menu</md-icon>\n                  </md-button>\n\n                </md-table-cell>\n\n                <md-table-cell md-label=\"BIM Naming Convention\" md-edit=true md-sort-by=\"BIM Naming Convention\">{{\n                  item.namingConvention\n                }}</md-table-cell>\n\n\n                <md-table-cell md-label=\"Details\">\n                  <md-button class=\"md-icon-button\" @click =\"onDetails(item)\" > \n                    <md-icon>arrow_right_alt</md-icon>\n                  </md-button>\n                </md-table-cell>\n\n              </md-table-row>\n            </md-table>\n          </div>\n          <v-card-actions>\n            <v-btn color=\"red darken-1\" flat @click=\"onCancel\">Annuler</v-btn>\n            <v-spacer></v-spacer>\n            \n      <md-button class=\"md-icon-button md-dense md-raised md-primary\" flat @click=\"onAdd\">\n        <md-icon>add</md-icon>\n      </md-button>\n\n      <v-btn color=\"green darken-1\" flat @click=\"onSave\">Save</v-btn>\n\n          </v-card-actions>\n\n          <md-dialog class=\"test\" :md-active.sync=\"dialog2\">\n            <md-dialog-title>Add Item</md-dialog-title>\n            <md-content> Fill in this form to add an Item</md-content>\n\n\n            <md-field :class=\"requiredClass1\">\n              <label>Item Name...</label>\n              <md-input v-model=\"item_added.name\" required></md-input>\n              <span class=\"md-helper-text\">Ex: L_1</span>\n              <span class=\"md-error\"> Required </span>\n            </md-field>\n\n            <md-field :class=\"requiredClass2\">\n              <label>Item Type...</label>\n              <md-input v-model=\"item_added.type\" required></md-input>\n              <span class=\"md-helper-text\">Ex: Lamp</span>\n              <span class=\"md-error\"> Required </span>\n            </md-field>\n\n            <md-checkbox v-model=\"item_added.maitre\">Maitre</md-checkbox>\n\n            <md-field>\n              <label>BIM Naming Convention...</label>\n              <md-input v-model=\"item_added.namingConvention\"></md-input>\n              <span class=\"md-helper-text\">Ex: L_1</span>\n            </md-field>\n\n            <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"red darken-1\" flat @click=\"onCancelDialog\">Annuler </v-btn>\n\n            <v-btn color=\"green darken-1\" flat @click=\"onSaveDialog\">Valider </v-btn>\n          </v-card-actions>\n\n          </md-dialog>\n\n          <md-dialog-alert\n      :md-active.sync=\"dialog3\"\n      md-title=\"Error : invalid item !\"\n      md-content=\"This item already exists in this profile.\" />\n\n      <md-dialog class=\"dialogImportBogFile\" :md-active.sync=\"dialogImportBogFile\">\n        <md-dialog-title>Import BOG File</md-dialog-title>\n        <md-content> Import xml file from BOG</md-content>\n        <md-field>\n          <label>xml file</label>\n          <md-file v-model=\"single\" @change=\"getFile\"/>\n          <!-- <input type=\"file\" name=\"xmlFile\" id=\"single\" @change=\"getFile\"> -->\n        </md-field>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red darken-1\" flat @click=\"onCancelDialogImport\">Annuler </v-btn>\n          <v-btn color=\"green darken-1\" flat @click=\"onSaveDialogImport\">Valider </v-btn>\n        </v-card-actions>\n      </md-dialog>\n        </v-card>\n      </v-dialog>\n    </v-layout>\n  </v-app>\n</template>\n\n<script>\nimport { SpinalNode } from \"spinal-model-graph\";\nimport { SpinalGraphService, SPINAL_RELATION_PTR_LST_TYPE } from \"spinal-env-viewer-graph-service\";\nimport { PART_RELATION_NAME, PART_RELATION_TYPE, DEVICE_RELATION_NAME, DEVICE_RELATION_TYPE, DEVICE_TYPE, DEVICE_PROFILES_TYPE } from \"../constants\";\n\nimport { DeviceHelper } from \"../build/DeviceHelper\";\nimport { FileExplorer } from '../FileExplorer';\nimport { resolve } from 'dns';\n\nconst {\n  spinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst xml2js = require('xml2js');\nconst fs = require('fs');\n\nexport default {\n  name: \"DialogItemList\",\n\n  data: () => ({\n    users: [],\n    parentId: null,\n    parentNode: null,\n    selected: {},\n    dialog: null,\n    dialog2: false,\n    other: null,\n    dialog3: false,\n    dialogMonitoring: false,\n    dialogImportBogFile: false,\n    monitoringItem: [],\n    value: [],\n    invalidFieldName: true,\n    invalidFieldType: true,\n    item_added: {\n      name: null,\n      maitre: false,\n      type: null,\n      monitoring: false,\n      namingConvention: \"\"\n    },\n    outputsMonitoring: [],\n    single: null,\n    tempBlob: null,\n    parsedBOGTab: null,\n  }),\n  computed: {\n    requiredClass1 (){\n      return {\n        \n        'md-invalid': !(this.invalidFieldName)\n      }\n    },\n    requiredClass2 (){\n      return {\n        'md-invalid': !(this.invalidFieldType)\n      }\n    }\n  },\n  methods: {\n    initialize: async function (option) {\n      this.parentId = await option.selectedNode.id;\n      console.log(option.selectedNode.id);\n      this.parentNode = await option.selectedNode;\n      //changement ici\n      this.users = await DeviceHelper.listItemInTab(this.parentNode);\n    },\n    onMouse: function(item){\n      if(item != null){\n        this.selected = item;\n      }\n    },\n    onSelect: function(item){\n      if(item != null){\n        this.selected = item;\n      }\n    },\n    onAdd: async function () {\n      this.dialog = false;\n      this.dialog2 = true;\n      this.item_added.name = null;\n      this.item_added.type = null;\n      this.item_added.maitre = false;\n      this.item_added.namingConvention = \"\";\n    },\n    onDetails:  async function(item) {\n      this.onSelect(item);   \n      // console.log(\"clicked\", item);\n\n      var paramSent = new Object();\n      const graphOfSelectedNode = await SpinalGraphService.getGraph(this.selected.nodeId);\n      var tempNode = await SpinalGraphService.getRealNode(this.selected.nodeId);\n\n      tempNode.id = tempNode.info.id;\n      paramSent.graph = graphOfSelectedNode;\n      paramSent.selectedNode = tempNode;\n\n      console.log(paramSent);\n\n      spinalPanelManagerService.openPanel(\"DialogItemDetail\", paramSent);\n    },\n    opened: function (option) {\n      this.initialize(option);\n      this.dialog = true;\n    },\n    removed: function () {},\n    closeDialog() {\n      this.dialog = false;\n    },\n    onCancel: function () {\n      this.dialog = false;\n    },\n    onCheckField: async function(){\n\n      if(this.item_added.name == null || this.item_added.name == \"\" || this.item_added.name == undefined){\n        this.invalidFieldName = false;\n      }\n      else{\n        this.invalidFieldName = true;\n      }\n\n      if(this.item_added.type == null || this.item_added.type == \"\" || this.item_added.type == undefined){\n        this.invalidFieldType = false;\n      }\n      else{\n        this.invalidFieldType = true;\n      }\n      \n      return ((this.invalidFieldName) && (this.invalidFieldType));\n      \n    },\n    onCheckUsers: async function(){\n      for (var elt in this.users){\n        if(this.item_added.name == this.users[elt].name && this.item_added.type == this.users[elt].itemType && this.item_added.maitre == this.users[elt].maitre){\n          return true;\n        }\n      }\n      return false;\n    },\n    clearItemList: async function(){\n      await DeviceHelper.clearItems(this.parentId);\n      await DeviceHelper.clearLinks(this.parentId, \"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE);\n      this.users = [];\n    },\n    importBOGFile: async function(){\n      console.log(\"import BOG file function\");\n      await DeviceHelper.clearLinks(this.parentId, \"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE);\n      this.single = null;\n      this.dialog = false;\n      this.dialogImportBogFile = true;\n\n    },\n    onCancelDialog: function () {\n      this.dialog2 = false;\n      this.dialog = true;\n    },\n    onSaveDialog: async function () {\n\n      if(await this.onCheckField()){\n        if(await this.onCheckUsers()){\n          this.dialog3 = true;\n        }\n        else{\n          this.users.push(await DeviceHelper.generateItem(this.parentId, this.item_added.name, this.item_added.maitre, this.item_added.type, this.item_added.namingConvention, \"hasItem\"));\n          this.dialog2 = false;\n          this.dialog = true;\n        }\n        \n      }\n      else{\n        console.log(\"fill the required fields please\");\n      }\n    },\n    onSaveDialogImport: async function(){\n      var realParentNode = SpinalGraphService.getRealNode(this.parentId);\n      let bogTab;\n      if(realParentNode.hasRelation(\"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE)){\n        const childOfTab = await realParentNode.getChildren(\"hasTempTab\");\n        bogTab = childOfTab[0].info.tab;\n        await DeviceHelper.clearItems(this.parentId);\n        //changement ici\n        this.users = await DeviceHelper.generateItemFromBOG(this.parentId, bogTab);\n        await DeviceHelper.clearLinks(this.parentId, \"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE);\n        this.dialogImportBogFile = false;\n        this.dialog = true;\n      }\n      else{\n        this.dialogImportBogFile = false;\n        this.dialog = true;\n      }\n      \n    },\n    onCancelDialogImport: async function(){\n      await DeviceHelper.clearLinks(this.parentId, \"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE);\n      this.dialogImportBogFile = false;\n      this.dialog = true;\n    },\n     getFile: async function(event){\n      return new Promise((resolve, reject) => {\n        this.single = event.target.files;\n        const reader = new FileReader();\n        \n        var testId = this.parentId;\n\n        reader.onload = async function(e) {\n          this.parsedBOGTab = await FileExplorer.parseBOGFile(e.target.result);\n\n               DeviceHelper.initialize()\n      .then(async result => {\n      const generatedNodeId = SpinalGraphService.createNode({\n          tab: this.parsedBOGTab,\n          name: 'tempTab',\n          type: \"tempTab\",\n        }, undefined);\n        var generatedNode = await SpinalGraphService.addChildInContext(testId, generatedNodeId, DeviceHelper.contextId,\n          \"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE);\n      })\n        }\n        reader.readAsText(event.target.files[0]);\n      })\n    },\n    exportJSON: async function(){\n      await DeviceHelper.clearLinks(this.parentId, \"hasTempTab\", SPINAL_RELATION_PTR_LST_TYPE);\n      await DeviceHelper.exportJSONItemList(this.parentId);\n    },\n    onSave: async function(){\n      let deviceNode = (await SpinalGraphService.getParents(this.parentId, \"hasItemList\"))[0];\n      let monitoringNode = (await SpinalGraphService.getChildren(deviceNode.id.get(), \"hasMonitoringNode\"))[0];\n      let intervalTimeNode1 = (await SpinalGraphService.getChildren(monitoringNode.id.get(), \"hasIntervalTimeNode\"))[0];\n      let tabToSend = [];\n      for(let elt in this.users){\n        if(this.users[elt].monitoring == true){\n          tabToSend.push(this.users[elt].nodeId);\n        }\n      }\n      let tabIds = await DeviceHelper.getListOutputByItem(tabToSend);\n\n      for(let elt2 in tabIds){\n      let outputsId = tabIds[elt2].outputs;\n      await DeviceHelper.generateMonitoringLinks(intervalTimeNode1.id.get(), outputsId);\n      }\n      this.dialog = false;\n    },\n    \n    onSelect: function(item){\n      if(item != null){\n        this.selected = item;\n      }\n    },\n    onMonitoring: async function(item){\n      this.onSelect(item);\n      console.log(item);\n      let paramSent = new Object() ;\n      let realNode = SpinalGraphService.getRealNode(item.nodeId);\n      paramSent.selectedNode = realNode;\n      paramSent.selectedNode.id = realNode.info.id;\n      paramSent.ACCESS_FROM = \"Item_List_Panel\";\n      spinalPanelManagerService.openPanel(\"DialogMonitoringDetails\", paramSent);\n    },\n    onCancelDialogMonitoring: function(){\n      this.dialog = true;\n      this.dialogMonitoring = false;\n    },\n    onSaveDialogMonitoring: function(){\n      this.dialog = true;\n      this.dialogMonitoring = false;\n    }\n    \n  },\n};\n</script>\n\n<style scoped>\n.test{\n  padding-left: 10px;\n  padding-right: 10px;\n}\n.md-dialog-title{\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n}\n.md-table-row{\n  justify-content: center;\n  align-items: center;\n}\n.buttonExport{\n  background-color: green;\n}\n.buttonImportBOG{\n  background-color: dodgerblue;\n}\n\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app>\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog\" max-width=\"1200\">\n        <v-card :dark=\"true\">\n          <v-card-title class=\"headline\">{{ selected }} Item Details</v-card-title>\n\n          \n\n          \n            <div class=\"infos\">\n\n              <md-field class=\"infos-details\">\n                <label>BIM Naming Convention</label>\n                <md-input v-model=\"namingConvention\"></md-input>\n              </md-field>\n              <v-spacer></v-spacer>\n              <div class=\"infos-details2\">\n                <md-content> Master  </md-content>\n                <md-checkbox class=\"checkbox\" v-model=\"maitre\"></md-checkbox>\n              </div>\n            </div>\n            \n            \n            <md-tabs>\n              <md-tab id=\"tab-input\" md-label=\"Input\">\n                <div class=\"tableaux\">\n                  <div class=\"bloc-table\">\n                    <md-toolbar :md-elevation=\"1\">\n                      <span class=\"md-title\">\n                        Linked BacnetValues (Input)\n                      </span>\n                      <v-spacer></v-spacer>\n                        <md-button class=\"md-icon-button md-raised md-accent\" flat @click=\"onClickInputUnlink\">\n                          <md-icon>link_off</md-icon>\n                        </md-button>\n\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"selectedInputs\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectinPutSelection\"\n                    >\n                      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"multiple\"\n                        md-auto-select>\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n\n                  <div class=\"bloc-table\">\n                    <md-toolbar :md-elevation=\"1\">\n                      <span class=\"md-title\">Available BacnetValues</span>\n                      <v-spacer></v-spacer>\n                      <md-field md-clearable @md-clear=\"onClear\" class=\"md-toolbar-section-end\">\n                                              <v-spacer></v-spacer>\n\n                        <md-input\n                          class=\"search\"\n                          placeholder=\"Search...\"\n                          v-model=\"inputSearch\"\n                          @input=\"inputSearchOnTable\"\n                        />\n                      </md-field>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"inputTab\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectInput\"\n                    >\n                      <md-table-row\n                        slot=\"md-table-row\"\n                        slot-scope=\"{ item }\"\n                        md-selectable=\"single\"\n                        md-auto-select\n                      >\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n                </div>\n              </md-tab>\n\n              <md-tab id=\"tab-output\" md-label=\"Output\">\n                <div class=\"tableaux\">\n                  <div class=\"bloc-table\">\n                    <md-toolbar>\n                      <span class=\"md-title\">\n                        Linked BacnetValues (Output)\n                      </span>\n                      <v-spacer></v-spacer>\n                      <md-button class=\"md-icon-button md-raised md-accent\" flat @click=\"onClickOutputUnlink\">\n                        <md-icon>link_off</md-icon>\n                      </md-button>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"selectedOutputs\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectOutputSelection\"\n                    >\n                      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"multiple\" md-auto-select>\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n\n                  <div class=\"bloc-table\">\n                    <md-toolbar>\n                      <span class=\"md-title\">Available BacnetValues</span>\n                                              <v-spacer></v-spacer>\n\n                      <md-field md-clearable class=\"md-toolbar-section-end\">\n                        <md-input\n                          class=\"search\"\n                          placeholder=\"Search...\"\n                          v-model=\"outputSearch\"\n                          @input=\"outputSearchOnTable\"\n                        />\n                      </md-field>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"outputTab\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectOutput\"\n                    >\n                      <md-table-row\n                        slot=\"md-table-row\"\n                        slot-scope=\"{ item }\"\n                        md-selectable=\"single\"\n                        md-auto-select\n                      >\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n                </div>\n              </md-tab>\n            </md-tabs>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn color=\"red darken-1\" flat @click=\"onCancel\"\n                >Annuler\n              </v-btn>\n\n              <v-btn color=\"green darken-1\" flat @click=\"onSave\"\n                >Valider\n              </v-btn>\n            </v-card-actions>\n          \n        </v-card>\n      </v-dialog>\n    </v-layout>\n  </v-app>\n</template>\n\n<script>\nimport {\n  SpinalContext,\n  SpinalGraphService,\n  SpinalNode,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\n\nimport { DeviceHelper } from \"../build/DeviceHelper\";\n\nexport default {\n  name: \"DialogItemDetail\",\n\n  data: () => ({\n    users: [],\n    namingConvention: null,\n    maitre: false,\n    selected: null,\n    parentId: null,\n    parentNode: null,\n    dialog: null,\n    dialog2: false,\n    value: [],\n    ioTab: [],\n    inputTab: [],\n    selectedInputs: [{}],\n    selectedSelectedInputs: [],\n    selectedSelectedOutputs: [],\n    outputTab: [],\n    selectedOutputs: [{}],\n    inputSearch: \"\",\n    outputSearch: \"\",\n    searched: [],\n    saveInputTab: [],\n    saveOutputTab: [],\n    inputsId: null,\n    outputsId: null,\n    backupInput: [],\n    backupOutput: [],\n  }),\n  methods: {\n    initialize: async function (option) {\n      this.initializeData();\n      this.parentId = await option.selectedNode.id;\n      this.selected = (await SpinalGraphService.getNodeAsync(this.parentId)).name._data;\n\n      // this.parentNode = await SpinalGraphService.getRealNode(option.selectedNode.id);\n      if((await SpinalGraphService.getChildren(this.parentId, \"hasInputs\")) != undefined ){\n        this.inputsId = (await SpinalGraphService.getChildren(this.parentId, \"hasInputs\"))[0].id._data;\n      }\n\n      if((await SpinalGraphService.getChildren(this.parentId, \"hasOutputs\")) != undefined){\n        this.outputsId = (await SpinalGraphService.getChildren(this.parentId, \"hasOutputs\"))[0].id._data;\n      }\n      \n      this.ioTab = await DeviceHelper.itemDetailInputOutput(\n        option.selectedNode\n      );\n      await this.arrangeTabs();\n\n      this.namingConvention = (await DeviceHelper.itemDetailInfos(option.selectedNode)).namingConvention;\n      this.maitre = (await DeviceHelper.itemDetailInfos(option.selectedNode)).maitre;\n\n      // console.log(\"input, output, selected Inputs, selected Outputs\");\n      // console.log(this.inputTab);\n      // console.log(this.outputTab);\n      // console.log(this.selectedInputs);\n      // console.log(this.selectedOutputs);\n      // console.log(\"end logs\");\n    },\n    arrangeTabs: async function () {\n      // inputs\n      for (var elt in this.ioTab.NetworkValue) {\n        this.chooseBetweenTables(this.ioTab.NetworkValue[elt], this.inputsId, this.inputTab, this.selectedInputs, this.backupInput);\n      }\n      for (var elt in this.ioTab.AnalogInput) {\n        this.chooseBetweenTables(this.ioTab.AnalogInput[elt], this.inputsId, this.inputTab, this.selectedInputs, this.backupInput);\n      }\n      for (var elt in this.ioTab.BinaryInput) {\n        this.chooseBetweenTables(this.ioTab.BinaryInput[elt], this.inputsId, this.inputTab, this.selectedInputs, this.backupInput);\n      }\n      for (var elt in this.ioTab.MultiStateInput) {\n        this.chooseBetweenTables(this.ioTab.MultiStateInput[elt], this.inputsId, this.inputTab, this.selectedInputs, this.backupInput);\n      }\n      // outputs\n      for (var elt in this.ioTab.BinaryValue) {\n        this.chooseBetweenTables(this.ioTab.BinaryValue[elt], this.outputsId, this.outputTab, this.selectedOutputs, this.backupOutput);\n      }\n      for (var elt in this.ioTab.AnalogValue) {\n        this.chooseBetweenTables(this.ioTab.AnalogValue[elt], this.outputsId, this.outputTab, this.selectedOutputs, this.backupOutput);\n      }\n      for (var elt in this.ioTab.MultiStateValue) {\n        this.chooseBetweenTables(this.ioTab.MultiStateValue[elt], this.outputsId, this.outputTab, this.selectedOutputs, this.backupOutput);\n      }\n      for (var elt in this.ioTab.AnalogOutput) {\n        this.chooseBetweenTables(this.ioTab.AnalogOutput[elt], this.outputsId, this.outputTab, this.selectedOutputs, this.backupOutput);\n      }\n\n      this.saveInputTab = this.inputTab;\n      this.saveOutputTab = this.outputTab;\n\n      // this.backupInput = this.inputTab;\n      // this.backupOutput = this.outputTab;\n    },\n    chooseBetweenTables: function(elementToAdd, nodeId, entryTab, selectedTab, backup = 0){\n\n      var selectedIds = [];\n      selectedIds = SpinalGraphService.getChildrenIds(nodeId);\n      \n      backup.push(elementToAdd);\n\n      if ((selectedIds.filter(elt => (elt == elementToAdd.nodeId))).length == 0 ){\n        entryTab.push(elementToAdd);\n      }\n      else{\n        selectedTab.push(elementToAdd);\n      }\n\n    }\n    ,\n    initializeData: function(){\n      this.users = [];\n      this.namingConvention = null;\n      this.maitre = false;\n      this.selected = null;\n      this.parentId = null;\n      this.parentNode = null;\n      this.value = [];\n      this.ioTab = [];\n      this.inputTab = [];\n      this.selectedInputs = [];\n      this.selectedOutputs = [];\n      this.selectedSelectedInputs = [];\n      this.selectedSelectedOutputs = [];\n      this.inputSearch = \"\";\n      this.outputSearch = \"\";\n      this.searched = [];\n      this.saveInputTab = [];\n      this.saveOutputTab = [];\n      this.inputsId = null;\n      this.outputsId = null;\n      this.backupInput = [];\n      this.backupOutput = [];\n    },\n    opened: function (option) {\n      this.initialize(option);\n      this.dialog = true;\n    },\n    removed: function () {},\n    closeDialog() {\n      this.dialog = false;\n    },\n    onCancel: function () {\n      this.dialog = false;\n    },\n    onSave: async function () {\n      await DeviceHelper.modifyConventionAndMasterInfos(this.parentId, this.namingConvention, this.maitre);\n      await DeviceHelper.addSelectedInputOutput(\n        this.parentId,\n        this.selectedInputs,\n        this.selectedOutputs\n      );\n      this.dialog = false;\n    },\n    onSelectInput: async function(items) {\n      //this.inputSearch = [];\n      \n         this.passElementBetweenTables(items, this.inputTab, this.selectedInputs, this.saveInputTab, 0);\n         this.inputSearchOnTable();\n    },\n    onSelectOutput: async function(items) {\n       this.passElementBetweenTables(items, this.outputTab, this.selectedOutputs,this.saveOutputTab, 0);\n    },\n    onSelectinPutSelection(items){\n      this.selectedSelectedInputs = items;\n    },\n    onSelectOutputSelection(items){\n      this.selectedSelectedOutputs = items;\n    },\n    onClickInputUnlink: async function(){\n      //const temp = this.selectedSelectedInputs;\n      //await this.constructSaveTab(this.saveInputTab);\n      const temp = this.selectedSelectedInputs;\n      for(var elt in temp){\n         this.passElementBetweenTables(temp[elt], this.selectedInputs, this.inputTab, this.saveInputTab, 1);\n      }\n    },\n    onClickOutputUnlink: async function(){\n      const temp = this.selectedSelectedOutputs;\n      for (var elt in temp){\n         this.passElementBetweenTables(temp[elt], this.selectedOutputs, this.outputTab, this.saveOutputTab, 1);\n      }\n    },\n    passElementBetweenTables: function(element, tabIn, tabOut, savedTab, sens){\n      // sens = 0 : Available -> Linked (savedTab reduces)\n      // sens = 1 : Linked -> Available (savedTab grows)\n      // tabIn = await Array.from(new Set(tabIn));\n      var index =  tabIn.findIndex((elt)=> (elt == element || elt.nodeId == element.nodeId));\n      if(index > -1){\n        var iIndex =  tabOut.findIndex((elt)=> (elt == element || elt.nodeId == element.nodeId));\n        if(iIndex > -1){\n           tabIn.splice(index,1);\n        }\n        else{\n           tabOut.push(tabIn[index]);\n           tabIn.splice(index, 1);\n        }\n      }\n      else{\n      }\n      index = -1;\n      // await this.constructSaveTab(this.backupInput, this.saveInputTab, this.selectedInputs);\n    },\n    constructSaveTab:  function(backup, savedTab, tabSelected){\n\n      savedTab = backup; \n      for (var elt in tabSelected){\n        var index =  savedTab.findIndex((obj) => (obj == tabSelected[elt]));\n        if(index > -1){\n           savedTab.splice(index, 1);\n        }\n      }\n    },\n    inputSearchOnTable:  function() {\n      var lowerSearch = this.inputSearch.toString().toLowerCase();\n      var tempTab = [];\n\n      for (let elt in this.backupInput) {\n        if (\n          this.backupInput[elt].title\n            .toString()\n            .toLowerCase()\n            .includes(lowerSearch) ||\n          this.backupInput[elt].name\n            .toString()\n            .toLowerCase()\n            .includes(lowerSearch) ||\n          this.backupInput[elt].idx\n            .toString()\n            .toLowerCase()\n            .includes(lowerSearch)\n        ) {\n          tempTab.push(this.backupInput[elt]);\n        }\n      }\n      for (let elt2 in this.selectedInputs){\n        var index = tempTab.findIndex((obj) => (obj == this.selectedInputs[elt2]));\n        if(index > -1){\n           tempTab.splice(index, 1);\n        }\n      }\n      this.inputTab = tempTab;\n    },\n    onClear: async function(){\n      // this.inputTab = this.saveInputTab;\n    },\n    outputSearchOnTable: async function() {\n      var lowerSearch = this.outputSearch.toString().toLowerCase();\n      var tempTab = [];\n\n      for (let elt in this.backupOutput) {\n        if (\n          this.backupOutput[elt].title\n            .toString()\n            .toLowerCase()\n            .includes(lowerSearch) ||\n          this.backupOutput[elt].name\n            .toString()\n            .toLowerCase()\n            .includes(lowerSearch) ||\n          this.backupOutput[elt].idx\n            .toString()\n            .toLowerCase()\n            .includes(lowerSearch)\n        ) {\n          tempTab.push(this.backupOutput[elt]);\n        }\n      }\n      for (let elt2 in this.selectedOutputs){\n        var index = tempTab.findIndex((obj) => (obj == this.selectedOutputs[elt2]));\n        if(index > -1){\n          await tempTab.splice(index, 1);\n        }\n      }\n      this.outputTab = tempTab;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.tableaux {\n  display: flex;\n  flex-direction: row;\n  place-content: baseline space-evenly;\n}\n.bloc-table {\n  display: flex;\n  flex-direction: column;\n  place-content: center start;\n}\n.search {\n  max-width: 100px;\n}\n.infos{\n  display: flex;\n  justify-content: space-around;\n  padding-left: 30%;\n  padding-right: 35%;\n}\n.infos-details{\n  max-width: 35%;\n}\n.infos-details2{\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.checkbox{\n  padding-left: 8px;\n}\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app>\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog\" max-width=\"1200\">\n        <v-card :dark=\"true\">\n          <div>\n            <md-table\n              v-model=\"users\"\n              md-sort=\"name\"\n              md-sort-order=\"asc\"\n              md-card\n              md-fixed-header\n              @md-selected=\"onSelect\"\n            >\n              <md-table-toolbar max-width=\"1200\">\n                <h1 class=\"md-title\">Endpoints Monitoring Configuration</h1>\n                <md-button class=\"md-icon-button md-raised md-accent\" @click=\"clearMonitoringConfiguration\">\n                  <md-icon>delete_forever</md-icon>\n                </md-button>\n              </md-table-toolbar>\n\n              <md-table-row\n                slot=\"md-table-row\"\n                slot-scope=\"{ item }\"\n                md-selectable=\"single\"\n              >\n                <md-table-cell\n                  md-label=\"Generic Name\"\n                  md-sort-by=\"Generic Name\"\n                >\n                  {{ item.generic_name }}\n                </md-table-cell>\n\n                <md-table-cell md-label=\"Name\" md-sort-by=\"Name\">\n                  {{ item.name }}\n                </md-table-cell>\n\n                <md-table-cell md-label=\"Item Name\">\n                  {{ item.item_name }}\n                </md-table-cell>\n\n                <!-- <md-table-cell md-label=\"Interval Time\"> -->\n                <md-table-cell md-label=\"Interval Time\">\n                  <md-field>\n                    <md-select v-model=\"item.intervalTime\">\n                      <li v-for=\"item in intervalTimeList\" :key=\"item.value\">\n                        <md-option :value=\"item.value\">{{\n                          item.value\n                        }}</md-option>\n                      </li>\n                      <div class=\"div-add-interval-time\">\n                        <md-field>\n                          <!-- <label>Type here!</label> -->\n                          <md-input\n                            v-model=\"newIntervalTime\"\n                            placeholder=\"Add Interval Time in ms\"\n                          ></md-input>\n                          <!-- <span class=\"md-helper-text\">Add Interval Time in ms</span> -->\n                        </md-field>\n                        <!-- <v-spacer></v-spacer> -->\n                        <md-button\n                          class=\"md-icon-button md-dense md-raised md-primary\"\n                          flat\n                          @click=\"onAddIntervalTime\"\n                        >\n                          <md-icon>add</md-icon>\n                        </md-button>\n                      </div>\n                    </md-select>\n                  </md-field>\n                </md-table-cell>\n\n                <md-table-cell md-label=\"Disable Monitoring\">\n                  <md-button class=\"md-icon-button\" @click=\"onDisableMonitoring(item)\">\n                    <md-icon>delete</md-icon>\n                  </md-button>                \n                </md-table-cell>\n\n              </md-table-row>\n            </md-table>\n          </div>\n\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"red darken-1\" flat @click=\"onCancel\">Annuler </v-btn>\n            <v-btn color=\"green darken-1\" flat @click=\"onSave\">Valider </v-btn>\n          </v-card-actions>\n          <!-- <v-card-actions>\n            <v-btn color=\"red darken-1\">Annuler</v-btn>\n            <v-spacer></v-spacer>\n            \n              <v-btn color=\"red darken-1\" @click=\"onSave\">Save</v-btn>\n\n          </v-card-actions> -->\n        </v-card>\n      </v-dialog>\n    </v-layout>\n  </v-app>\n</template>\n\n<script>\nimport { SpinalNode } from \"spinal-model-graph\";\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\nimport {\n  PART_RELATION_NAME,\n  PART_RELATION_TYPE,\n  DEVICE_RELATION_NAME,\n  DEVICE_RELATION_TYPE,\n  DEVICE_TYPE,\n  DEVICE_PROFILES_TYPE,\n} from \"../constants\";\n\nimport { DeviceHelper } from \"../build/DeviceHelper\";\nimport { FileExplorer } from \"../FileExplorer\";\nimport { resolve } from \"dns\";\n\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst xml2js = require(\"xml2js\");\nconst fs = require(\"fs\");\n\nexport default {\n  name: \"DialogMonitoringDetails\",\n\n  data: () => ({\n    users: [{}],\n    savedUsers: [],\n    intervalTimeList: [],\n    parentId: null,\n    parentNode: null,\n    newIntervalTime: null,\n    dialog: null,\n    monitoringNodeId: null,\n    selected: {},\n    other: null,\n    single: null,\n  }),\n  computed: {},\n  methods: {\n    initialize: async function (option) {\n      // 1 : access from ItemList Panel =>\n      if (option.ACCESS_FROM == \"Item_List_Panel\") {\n        console.log(option);\n        this.parentId = await option.selectedNode.id;\n        this.parentNode = await option.selectedNode;\n        this.users = await DeviceHelper.getLinkedOutputBacnetValues_FromItemId(\n          option.selectedNode.id\n        );\n        this.savedUsers = await DeviceHelper.getLinkedOutputBacnetValues_FromItemId(\n          option.selectedNode.id\n        );\n        console.log(\"savedusers\", this.savedUsers);\n        let itemListNode = (\n          await SpinalGraphService.getParents(this.parentId, \"hasItem\")\n        )[0];\n        console.log(itemListNode);\n        let deviceNode = (\n          await SpinalGraphService.getParents(\n            itemListNode.id.get(),\n            \"hasItemList\"\n          )\n        )[0];\n        let monitoringNode = (\n          await SpinalGraphService.getChildren(\n            deviceNode.id.get(),\n            \"hasMonitoringNode\"\n          )\n        )[0];\n        this.monitoringNodeId = monitoringNode.id.get();\n        this.intervalTimeList = await DeviceHelper.getIntervalTimeList(\n          monitoringNode.id.get()\n        );\n      } else if (option.ACCESS_FROM == \"Button_Monitoring_Configuration\") {\n        console.log(\"ok\");\n        this.parentId = option.selectedNode.id;\n        this.parentNode = option.selectedNode;\n        this.users = await DeviceHelper.getLinkedOutputBacnetValues_FromMonitoringNodeId(\n          option.selectedNode.id\n        );\n        this.savedUsers = await DeviceHelper.getLinkedOutputBacnetValues_FromMonitoringNodeId(\n          option.selectedNode.id\n        );\n        console.log(\"savedusers\", this.savedUsers);\n        this.monitoringNodeId = option.selectedNode.id;\n        this.intervalTimeList = await DeviceHelper.getIntervalTimeList(\n          option.selectedNode.id\n        );\n      }\n\n      // this.users = await DeviceHelper.listItemInTab(this.parentNode);\n    },\n    opened: function (option) {\n      this.users = [];\n      this.initialize(option);\n      this.dialog = true;\n    },\n    removed: function () {},\n    closeDialog() {\n      this.dialog = false;\n    },\n    onCancel: function () {\n      this.dialog = false;\n    },\n    onSave: async function () {\n      console.log(this.users);\n      await DeviceHelper.generateMonitoringLinks(\n        this.users,\n        this.intervalTimeList,\n        this.savedUsers\n      );\n      this.dialog = false;\n    },\n    onSelect: function (item) {\n      if(item != null){\n        this.selected = item;\n      }\n    },\n    onAddIntervalTime: async function () {\n      for (let elt in this.intervalTimeList) {\n        if (this.intervalTimeList[elt].value == this.newIntervalTime) {\n          this.newIntervalTime = null;\n          return 0;\n        }\n      }\n      let tempTab = await DeviceHelper.addIntervalTimeNode(\n        this.monitoringNodeId,\n        this.newIntervalTime\n      );\n      this.intervalTimeList.push(tempTab);\n      this.newIntervalTime = null;\n    },\n    clearMonitoringConfiguration: async function(){\n      console.log(this.users);\n      for(let elt in this.users){\n        // let parent = await SpinalGraphService.getParents(this.users[elt].nodeId, \"hasIntervalTime\");\n        // if(parent.length !=0){\n        //   await DeviceHelper.clearLinksOneByOne(parent[0].id.get(), this.users[elt].nodeId, \"hasIntervalTime\", SPINAL_RELATION_PTR_LST_TYPE);\n        // }\n        this.users[elt].intervalTime = null;\n      }\n    },\n    onDisableMonitoring: async function(item){\n      this.onSelect(item);\n      item.intervalTime = null;\n    }\n  },\n};\n</script>\n\n<style scoped>\n.md-table-row {\n  justify-content: center;\n  align-items: center;\n}\n.div-add-interval-time {\n  display: flex;\n  flex-direction: row;\n  /* place-content: baseline space-evenly; */\n  align-items: center;\n}\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app>\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog\" max-width=\"1200\">\n        <v-card :dark=\"true\">\n          <v-card-title class=\"headline\">{{ selected }} Item Supervision</v-card-title>\n            <md-tabs>\n              <md-tab id=\"tab-input\" md-label=\"Measure\">\n                <div class=\"tableaux\">\n                  <div class=\"bloc-table\">\n                    <md-toolbar :md-elevation=\"1\">\n                      <span class=\"md-title\">\n                        Linked Measures\n                      </span>\n                      <v-spacer></v-spacer>\n                        <md-button class=\"md-icon-button md-raised md-accent\" flat @click=\"onClickMeasuresUnlink\">\n                          <md-icon>link_off</md-icon>\n                        </md-button>\n\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"MeasuresTab\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectLinkedMeasure\"\n                    >\n                      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"multiple\"\n                        md-auto-select>\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n\n                  <div class=\"bloc-table\">\n                    <md-toolbar :md-elevation=\"1\">\n                      <span class=\"md-title\">Available BacnetValues</span>\n                      <v-spacer></v-spacer>\n                      <!-- <md-field md-clearable @md-clear=\"onClear\" class=\"md-toolbar-section-end\"> -->\n                      <md-field md-clearable class=\"md-toolbar-section-end\">\n                                              <v-spacer></v-spacer>\n\n                        <md-input\n                          class=\"search\"\n                          placeholder=\"Search...\"\n                          v-model=\"searched\"\n                          @input=\"onSearch\"\n                        />\n                      </md-field>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"users\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectAvailableMeasure\"\n                    >\n                      <md-table-row\n                        slot=\"md-table-row\"\n                        slot-scope=\"{ item }\"\n                        md-selectable=\"single\"\n                        md-auto-select\n                      >\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n                </div>\n              </md-tab>\n\n              <md-tab id=\"tab-output\" md-label=\"Alarms\">\n                <div class=\"tableaux\">\n                  <div class=\"bloc-table\">\n                    <md-toolbar>\n                      <span class=\"md-title\">\n                        Linked Alarms\n                      </span>\n                      <v-spacer></v-spacer>\n                      <md-button class=\"md-icon-button md-raised md-accent\" flat @click=\"onClickAlarmsUnlink\">\n                        <md-icon>link_off</md-icon>\n                      </md-button>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"alarmsTab\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectLinkedAlarm\"\n                    >\n                      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"multiple\" md-auto-select>\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n\n                  <div class=\"bloc-table\">\n                    <md-toolbar>\n                      <span class=\"md-title\">Available BacnetValues</span>\n                                              <v-spacer></v-spacer>\n\n                      <md-field md-clearable class=\"md-toolbar-section-end\">\n                        <md-input\n                          class=\"search\"\n                          placeholder=\"Search...\"\n                          v-model=\"searched\"\n                          @input=\"onSearch\"\n                        />\n                      </md-field>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"users\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectAlarm\"\n                    >\n                      <md-table-row\n                        slot=\"md-table-row\"\n                        slot-scope=\"{ item }\"\n                        md-selectable=\"single\"\n                        md-auto-select\n                      >\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n                </div>\n              </md-tab>\n\n              <md-tab id=\"tab-commands\" md-label=\"Commands\">\n                <div class=\"tableaux\">\n                  <div class=\"bloc-table\">\n                    <md-toolbar :md-elevation=\"1\">\n                      <span class=\"md-title\">\n                        Linked Commands\n                      </span>\n                      <v-spacer></v-spacer>\n                        <md-button class=\"md-icon-button md-raised md-accent\" flat @click=\"onClickCommandsUnlink\">\n                          <md-icon>link_off</md-icon>\n                        </md-button>\n\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"commandsTab\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectLinkedCommand\"\n                    >\n                      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\" md-selectable=\"multiple\"\n                        md-auto-select>\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n\n                  <div class=\"bloc-table\">\n                    <md-toolbar :md-elevation=\"1\">\n                      <span class=\"md-title\">Available BacnetValues</span>\n                      <v-spacer></v-spacer>\n                      <!-- <md-field md-clearable @md-clear=\"onClear\" class=\"md-toolbar-section-end\"> -->\n                      <md-field md-clearable class=\"md-toolbar-section-end\">\n                                              <v-spacer></v-spacer>\n                        <md-input\n                          class=\"search\"\n                          placeholder=\"Search...\"\n                          v-model=\"searched\"\n                          @input=\"onSearch\"\n                        />\n                      </md-field>\n                    </md-toolbar>\n\n                    <md-table\n                      v-model=\"users\"\n                      md-sort=\"title\"\n                      md-sort-order=\"asc\"\n                      md-card\n                      md-fixed-header\n                      @md-selected=\"onSelectCommand\"\n                    >\n                      <md-table-row\n                        slot=\"md-table-row\"\n                        slot-scope=\"{ item }\"\n                        md-selectable=\"single\"\n                        md-auto-select\n                      >\n                        <md-table-cell\n                          md-label=\"Network Values\"\n                          md-sort-by=\"title\"\n                          >{{ item.title }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"Name\" md-sort-by=\"name\"\n                          >{{ item.name }}\n                        </md-table-cell>\n                        <md-table-cell md-label=\"IDX\" md-sort-by=\"idx\"\n                          >{{ item.idx }}\n                        </md-table-cell>\n                      </md-table-row>\n                    </md-table>\n                  </div>\n                </div>\n              </md-tab>\n\n            </md-tabs>\n\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn color=\"red darken-1\" flat @click=\"onCancel\"\n                >Annuler\n              </v-btn>\n\n              <v-btn color=\"green darken-1\" flat @click=\"onSave\"\n                >Valider\n              </v-btn>\n            </v-card-actions>\n          \n        </v-card>\n      </v-dialog>\n    </v-layout>\n  </v-app>\n</template>\n\n<script>\nimport {\n  SpinalContext,\n  SpinalGraphService,\n  SpinalNode,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\n\nimport { DeviceHelper } from \"../build/DeviceHelper\";\n\nexport default {\n  name: \"DialogItemSupervision\",\n\n  data: () => ({\n    users: [],\n    selected: null,\n    parentId: null,\n    parentNode: null,\n    dialog: null,\n    dialog2: false,\n    value: [],\n    ioTab: [],\n    inputTab: [],\n    selectedInputs: [{}],\n    selectedSelectedInputs: [],\n    selectedSelectedOutputs: [],\n    outputTab: [],\n    selectedOutputs: [{}],\n    inputSearch: \"\",\n    outputSearch: \"\",\n    saveInputTab: [],\n    saveOutputTab: [],\n    inputsId: null,\n    outputsId: null,\n    backupInput: [],\n    backupOutput: [],\n\n    supervisionId: null,\n    MeasuresId: null,\n    commandsId: null,\n    alarmsId: null,\n    savedEntries: [],\n    MeasuresTab: [],\n    commandsTab: [],\n    alarmsTab: [],\n    searched: [],\n    backupTab: [],\n    selectedLinkedMeasures: [],\n    constMeasure: [],\n    constAlarms: [],\n    constCommands: []\n    // globalNotMonitoredMeasuresId: null,\n    // globalNotMonitoredAlarmsIdId: null\n\n  }),\n  methods: {\n    initialize: async function (option) {\n      console.log(option);\n       this.initializeData();\n       console.log(option.selectedNode.id.get());\n       console.log(\"test\");\n       let realNode = SpinalGraphService.getRealNode(option.selectedNode.id.get());\n       console.log(\"realnode\");\n       console.log(realNode);\n\n      this.parentId = option.selectedNode.id._data;\n      this.selected = option.selectedNode.name.get();\n\n      let superv = await SpinalGraphService.getChildren(this.parentId, \"hasSupervisionNode\");\n      // console.log(\"supervision node : \");\n      console.log(superv);\n\n      \n      console.log(this.parentId);\n      // let supervisionId = (await SpinalGraphService.getChildren(this.parentId, \"hasSupervisionNode\"))[0].id.get();\n      let supervisionId = superv[0].id.get();\n      \n      // console.log(\"supervisionId \" +supervisionId);\n      this.supervisionId = supervisionId;\n      \n\n      // this.supervisionId = (await SpinalGraphService.getChildren(this.parentId, \"hasSupervisionNode\"))[0].id.get();\n      // console.log(this.supervisionId);\n      // let Measures = await SpinalGraphService.getChildren(this.supervisionId, \"hasMeasures\");\n      // console.log(Measures);\n\n      // récupération de la liste des inputs / outputs\n      this.savedEntries = await DeviceHelper.itemSupervisionInputOutput(\n        option.selectedNode.id.get()\n      );\n      // this.savedEntries = await DeviceHelper.itemSupervisionInputOutput(\n      //   this.parentId\n      // );\n      this.users = this.savedEntries;\n\n      // enlèvement des noeuds Measures déjà liés à cet item\n      this.MeasuresId = (await SpinalGraphService.getChildren(supervisionId, \"hasMeasures\"))[0].id.get();\n      // enlèvement des noeuds alarms déjà liés à cet item\n      this.alarmsId = (await SpinalGraphService.getChildren(supervisionId, \"hasAlarms\"))[0].id.get();\n      // console.log(this.alarmsId);\n\n      // enlèvement des noeuds commands déjà liés à cet item\n      this.commandsId = (await SpinalGraphService.getChildren(supervisionId, \"hasCommands\"))[0].id.get();\n      // console.log(this.commandsId);\n\n      this.constMeasure = await DeviceHelper.getItemSupervisionLinks(this.MeasuresId, \"hasMeasure\");\n      for(let eltMes of this.constMeasure) this.passElementBetweenTables(eltMes, this.users, this.MeasuresTab, 0);\n\n      this.constAlarms = await DeviceHelper.getItemSupervisionLinks(this.alarmsId, \"hasAlarm\");\n      for(let eltAl of this.constAlarms) this.passElementBetweenTables(eltAl, this.users, this.alarmsTab, 0);\n\n      this.constCommands = await DeviceHelper.getItemSupervisionLinks(this.commandsId, \"hasCommand\");\n      for(let eltCom of this.constCommands) this.passElementBetweenTables(eltCom, this.users, this.commandsTab, 0);\n\n\n\n      console.log(this.users);\n      // await this.arrangeTabs();\n\n      this.backupTab = this.users;\n    },\n    //a changer\n    initializeData: function(){\n      this.users = [];\n      this.selected = null;\n      this.parentId = null;\n      this.parentNode = null;\n      this.value = [];\n      this.ioTab = [];\n      this.inputTab = [];\n      this.selectedInputs = [];\n      this.selectedOutputs = [];\n      this.selectedSelectedInputs = [];\n      this.selectedSelectedOutputs = [];\n      this.inputSearch = \"\";\n      this.outputSearch = \"\";\n      this.searched = [];\n      this.saveInputTab = [];\n      this.saveOutputTab = [];\n      this.inputsId = null;\n      this.outputsId = null;\n      this.backupInput = [];\n      this.backupOutput = [];\n      this.supervisionId = null;\n      this.MeasuresId = null;\n      this.commandsId = null;\n      this.alarmsId = null;\n      this.savedEntries = [];\n      this.MeasuresTab = [];\n      this.commandsTab = [];\n      this.alarmsTab = [];\n      this.searched = [];\n      this.backupTab = [];\n      this.selectedLinkedMeasures = [];\n      this.constMeasure = [];\n      this.constAlarms = [];\n      this.constCommands = [];\n      // this.globalNotMonitoredMeasuresId = null;\n      // this.globalNotMonitoredAlarmsIdId = null;\n    },\n    opened: function (option) {\n      this.initialize(option);\n      this.dialog = true;\n    },\n    removed: function () {},\n    closeDialog() {\n      this.dialog = false;\n    },\n    onCancel: function () {\n      this.dialog = false;\n    },\n    compareTabs: function(tabToCompare, tabReference){\n      // cette fonction compare deux tableaux pour la sauvegarde : elle ressort un objet json \n      // contenant une liste de liens à effacer et une liste de liens à ajouter. Les autres resteront inchangés\n      let returnTab = {\n        elementsToAdd : [],\n        elementsToDelete : []\n      };\n      for(let ref of tabReference){\n        let indexRef = tabToCompare.findIndex(elt => elt.nodeId == ref.nodeId);\n        if(indexRef == -1) returnTab.elementsToDelete.push(ref.nodeId);\n      }\n      for(let comp of tabToCompare){\n        let indexComp = tabReference.findIndex(elt => elt.nodeId == comp.nodeId);\n        if(indexComp == -1) returnTab.elementsToAdd.push(comp.nodeId);\n      }\n      return returnTab;\n    },\n    // a changer\n    onSave: async function () {\n\n      // récupération global Measure & alarms non monitorés pour ajouter liaison\n      let itemListNode = await SpinalGraphService.getParents(this.parentId, \"hasItem\");\n      let deviceProfileNode = await SpinalGraphService.getParents(itemListNode[0].id.get(), \"hasItemList\");\n      let globalSupervisionNode = await SpinalGraphService.getChildren(deviceProfileNode[0].id.get(), \"hasGlobalSupervision\");\n      let globalMeasuresNode = await SpinalGraphService.getChildren(globalSupervisionNode[0].id.get(), \"hasGlobalMeasures\");\n      let globalAlarmsNode = await SpinalGraphService.getChildren(globalSupervisionNode[0].id.get(), \"hasGlobalAlarms\");\n      let globalCommandsNode = await SpinalGraphService.getChildren(globalSupervisionNode[0].id.get(), \"hasGlobalCommands\");\n      let globalMeasuresIntervalTime = await SpinalGraphService.getChildren(globalMeasuresNode[0].id.get(), \"hasIntervalTimeNode\");\n      let globalAlarmsIntervalTime = await SpinalGraphService.getChildren(globalAlarmsNode[0].id.get(), \"hasIntervalTimeNode\");\n      let indexOfNotMonitoredMesure = globalMeasuresIntervalTime.findIndex(elt => elt.name.get() == \"Not Monitored\");\n      let indexOfNotMonitoredAlarm = globalAlarmsIntervalTime.findIndex(elt => elt.name.get() == \"Not Monitored\");\n\n\n      let measures = this.compareTabs(this.MeasuresTab, this.constMeasure);\n      let alarms = this.compareTabs(this.alarmsTab, this.constAlarms);\n      console.log(\"this.alarmsTab\");\n      console.log(this.alarmsTab);\n      console.log(\"const alarm\");\n      console.log(this.constAlarms);\n      console.log(\"alarms\");\n      console.log(alarms);\n      console.log(\"this.alarmsId\");\n      console.log(this.alarmsId)\n      let commands = this.compareTabs(this.commandsTab, this.constCommands);\n      // elements to Add\n      for(let addMes of measures.elementsToAdd){\n         await DeviceHelper.generateSupervisionLinks(this.MeasuresId, addMes, \"hasMeasure\", globalMeasuresIntervalTime[indexOfNotMonitoredMesure].id.get(), \"hasIntervalTime\");\n      }\n      console.log(\"sortie boucle Measures\");\n      for(let addAl of alarms.elementsToAdd){\n        console.log(\"entrée boucle for alarms to add\");\n        console.log(addAl);\n        // await DeviceHelper.generateSupervisionLinks(this.alarmsId, addAl, \"hasAlarm\");\n         await DeviceHelper.generateSupervisionLinks(this.alarmsId, addAl, \"hasAlarm\", globalAlarmsIntervalTime[indexOfNotMonitoredAlarm].id.get(), \"hasIntervalTime\");\n      }\n      for(let addCom of commands.elementsToAdd){\n        console.log(\"entrée boucle for commands to add\");\n        console.log(addCom);\n        await DeviceHelper.generateSupervisionLinks(this.commandsId, addCom, \"hasCommand\", globalCommandsNode[0].id.get(), \"hasGlobalCommand\");\n        // await DeviceHelper.generateSupervisionLinks(this.commandsId, addCom, \"hasCommand\");\n      }\n      console.log(\"sortie boucle commands to add\");\n      // elements to Delete\n      for(let delMes of measures.elementsToDelete){\n        let parentIntervalTime = await SpinalGraphService.getParents(delMes, \"hasIntervalTime\");\n        let parentSupervisionMeasures = await SpinalGraphService.getParents(delMes, \"hasMeasure\");\n        if(parentIntervalTime.length != 0){\n          await DeviceHelper.clearLinksOneByOne(parentIntervalTime[0].id.get(), delMes, \"hasIntervalTime\", SPINAL_RELATION_PTR_LST_TYPE);\n        }\n        if(parentSupervisionMeasures.length != 0){\n          await DeviceHelper.clearLinksOneByOne(parentSupervisionMeasures[0].id.get(), delMes, \"hasMeasure\", SPINAL_RELATION_PTR_LST_TYPE);\n        }\n      }\n      for(let delAl of alarms.elementsToDelete){\n        let parentIntervalTime = await SpinalGraphService.getParents(delAl, \"hasIntervalTime\");\n        let parentSupervisionAlarms = await SpinalGraphService.getParents(delAl, \"hasAlarm\");\n        if(parentIntervalTime.length != 0){\n          await DeviceHelper.clearLinksOneByOne(parentIntervalTime[0].id.get(), delAl, \"hasIntervalTime\", SPINAL_RELATION_PTR_LST_TYPE);\n        }\n        if(parentSupervisionAlarms.length != 0){\n          await DeviceHelper.clearLinksOneByOne(parentSupervisionAlarms[0].id.get(), delAl, \"hasAlarm\", SPINAL_RELATION_PTR_LST_TYPE);\n        }\n      }\n      for(let delCom of commands.elementsToDelete){\n        let parentGlobalCommands = await SpinalGraphService.getParents(delCom, \"hasGlobalCommand\");\n        if(parentGlobalCommands.length != 0){\n          await DeviceHelper.clearLinksOneByOne(parentGlobalCommands[0].id.get(), delCom, \"hasGlobalCommand\", SPINAL_RELATION_PTR_LST_TYPE);\n        }\n        let parentCommands = await SpinalGraphService.getParents(delCom, \"hasCommand\");\n        if(parentCommands.length !=0){\n          await DeviceHelper.clearLinksOneByOne(parentSupervisionAlarms[0].id.get(), delCom, \"hasCommand\", SPINAL_RELATION_PTR_LST_TYPE);\n        }\n      }\n      this.dialog = false;\n    },\n    onSelectAvailableMeasure: async function(items){\n      this.passElementBetweenTables(items, this.users, this.MeasuresTab, 0);\n    },\n    onSelectCommand: async function(items){\n      this.passElementBetweenTables(items, this.users, this.commandsTab, 0);\n    },\n    onSelectAlarm: async function(items){\n      this.passElementBetweenTables(items, this.users, this.alarmsTab, 0);\n    },\n    passElementBetweenTables: function(element, tabIn, tabOut, sens){\n        // sens = 0 : Available -> Linked (savedTab reduces)\n        // sens = 1 : Linked -> Available (savedTab grows)\n        if(element != undefined){\n          const tempElt = element;\n          var index =  tabIn.findIndex((elt)=> (elt == tempElt || elt.nodeId == tempElt.nodeId) );\n\n          if(index > -1){\n            var iIndex =  tabOut.findIndex((elt)=> (elt == tempElt || elt.nodeId == tempElt.nodeId));\n            if(iIndex > -1){\n              tabIn.splice(index,1);\n            }\n            else{\n              tabOut.push(tabIn[index]);\n              tabIn.splice(index, 1);\n            }\n          }\n          else{\n          }\n          let backupIndex = this.backupTab.findIndex(elt => (elt == tempElt || elt.nodeId == tempElt.nodeId));\n          if(backupIndex > -1 && sens ==0){\n            this.backupTab.splice(backupIndex, 1);\n          }\n          else if(backupIndex <= -1 && sens ==1){\n            this.backupTab.push(tempElt);\n          }\n          index = -1;\n          backupIndex = -1;\n        }\n        \n      },\n    onSearch: async function(){\n      var lowerSearch = this.searched.toString().toLowerCase();\n      this.users = this.backupTab.filter((elt) => (elt.title.toString().toLowerCase().includes(lowerSearch)) || (elt.name.toString().toLowerCase().includes(lowerSearch)));\n    },\n    onSelectLinkedMeasure: function(items){\n      // this.selectedLinkedMeasures.push(items);\n      this.selectedLinkedMeasures = items;\n      console.log(this.selectedLinkedMeasures);\n    },\n    onSelectLinkedAlarm: function(items){\n      // this.selectedLinkedMeasures.push(items);\n      this.selectedLinkedAlarms = items;\n      console.log(this.selectedLinkedAlarms);\n    },\n    onSelectLinkedCommand: function(items){\n      // this.selectedLinkedMeasures.push(items);\n      this.selectedLinkedCommands = items;\n      console.log(this.selectedLinkedCommands);\n    },\n    onClickMeasuresUnlink: function(items){\n      console.log(\"je suis dans la fonction\");\n       const temp = this.selectedLinkedMeasures;\n      for (let elt in temp){\n         this.passElementBetweenTables(temp[elt], this.MeasuresTab, this.users, 1);\n        //  this.selectedLinkedMeasures.splice(elt, 1);\n      }\n      this.selectedLinkedMeasures = [];\n    },\n    onClickAlarmsUnlink: function(items){\n      console.log(\"je suis dans la fonction\");\n       const temp = this.selectedLinkedAlarms;\n      for (let elt in temp){\n         this.passElementBetweenTables(temp[elt], this.alarmsTab, this.users, 1);\n      }\n      this.selectedLinkedAlarms = [];\n    },\n    onClickCommandsUnlink: function(items){\n      console.log(\"je suis dans la fonction\");\n       const temp = this.selectedLinkedCommands;\n      for (let elt in temp){\n         this.passElementBetweenTables(temp[elt], this.commandsTab, this.users, 1);\n        //  this.selectedLinkedCommands.splice(elt, 1);\n      }\n      this.selectedLinkedCommands = [];\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.tableaux {\n  display: flex;\n  flex-direction: row;\n  place-content: baseline space-evenly;\n}\n.bloc-table {\n  display: flex;\n  flex-direction: column;\n  place-content: center start;\n}\n.search {\n  max-width: 100px;\n}\n.infos-details{\n  max-width: 35%;\n}\n.infos-details2{\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.checkbox{\n  padding-left: 8px;\n}\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-app>\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog\" max-width=\"1200\">\n        <v-card :dark=\"true\">\n          <!-- <v-card-title class=\"headline\">Endpoints Supervision Configuration</v-card-title> -->\n          <md-tabs>\n            <md-tab id=\"tab-measures\" md-label=\"Measures\" flat @click=\"test()\">\n              <md-table\n                v-model=\"users.measures\"\n                md-sort=\"name\"\n                md-sort-order=\"asc\"\n                md-card\n                md-fixed-header\n                @md-selected=\"onSelect\"\n              >\n                <md-table-toolbar max-width=\"1200\">\n                  <h1 class=\"md-title\">Measures Supervision Configuration</h1>\n                  <md-button class=\"md-icon-button md-raised md-accent\" @click=\"clearMeasuresSupervisionConfiguration()\">\n                    <md-icon>delete_forever</md-icon>\n                  </md-button>\n                </md-table-toolbar>\n\n                <md-table-row\n                  slot=\"md-table-row\"\n                  slot-scope=\"{ item }\"\n                  md-selectable=\"single\"\n                >\n                  <md-table-cell\n                    md-label=\"Generic Name\"\n                    md-sort-by=\"Generic Name\"\n                  >\n                    {{ item.generic_name }}\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Name\" md-sort-by=\"Name\">\n                    {{ item.name }}\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Item Name\">\n                    {{ item.item_name }}\n                  </md-table-cell>\n\n                  <!-- <md-table-cell md-label=\"Interval Time\"> -->\n                  <md-table-cell md-label=\"Interval Time\">\n                    <md-field>\n                      <md-select v-model=\"item.intervalTime\">\n                        <li v-for=\"item in intervalTimeList.measures\" :key=\"item.value\">\n                          <md-option :value=\"item.value\">{{\n                            item.value\n                          }}</md-option>\n                        </li>\n                        <div class=\"div-add-interval-time\">\n                          <md-field>\n                            <!-- <label>Type here!</label> -->\n                            <md-input\n                              v-model=\"newIntervalTime\"\n                              placeholder=\"Add Interval Time in ms\"\n                            ></md-input>\n                            <!-- <span class=\"md-helper-text\">Add Interval Time in ms</span> -->\n                          </md-field>\n                          <!-- <v-spacer></v-spacer> -->\n                          <!-- <md-button\n                            class=\"md-icon-button md-dense md-raised md-primary\"\n                            flat\n                            @click=\"onAddIntervalTime(this.intervalTimeList.measures, this.globalMeasuresId)\"\n                          > -->\n                          <md-button\n                            class=\"md-icon-button md-dense md-raised md-primary\"\n                            flat\n                            @click=\"onAddIntervalTimeMeasures()\"\n                          >\n                            <md-icon>add</md-icon>\n                          </md-button>\n                        </div>\n                      </md-select>\n                    </md-field>\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Disable Monitoring\">\n                    <md-button class=\"md-icon-button\" @click=\"onDisableMonitoring(item)\">\n                      <md-icon>delete</md-icon>\n                    </md-button>                \n                  </md-table-cell>\n\n                </md-table-row>\n              </md-table>\n            </md-tab>\n            <md-tab id=\"tab-alarms\" md-label=\"Alarms\">\n              <md-table\n                v-model=\"users.alarms\"\n                md-sort=\"name\"\n                md-sort-order=\"asc\"\n                md-card\n                md-fixed-header\n                @md-selected=\"onSelect\"\n              >\n                <md-table-toolbar max-width=\"1200\">\n                  <h1 class=\"md-title\">Alarms Supervision Configuration</h1>\n                  <md-button class=\"md-icon-button md-raised md-accent\" @click=\"clearAlarmsSupervisionConfiguration()\">\n                    <md-icon>delete_forever</md-icon>\n                  </md-button>\n                </md-table-toolbar>\n\n                <md-table-row\n                  slot=\"md-table-row\"\n                  slot-scope=\"{ item }\"\n                  md-selectable=\"single\"\n                >\n                  <md-table-cell\n                    md-label=\"Generic Name\"\n                    md-sort-by=\"Generic Name\"\n                  >\n                    {{ item.generic_name }}\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Name\" md-sort-by=\"Name\">\n                    {{ item.name }}\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Item Name\">\n                    {{ item.item_name }}\n                  </md-table-cell>\n\n                  <!-- <md-table-cell md-label=\"Interval Time\"> -->\n                  <md-table-cell md-label=\"Interval Time\">\n                    <md-field>\n                      <md-select v-model=\"item.intervalTime\">\n                        <li v-for=\"item in intervalTimeList.alarms\" :key=\"item.value\">\n                          <md-option :value=\"item.value\">{{\n                            item.value\n                          }}</md-option>\n                        </li>\n                        <div class=\"div-add-interval-time\">\n                          <md-field>\n                            <!-- <label>Type here!</label> -->\n                            <md-input\n                              v-model=\"newIntervalTime\"\n                              placeholder=\"Add Interval Time in ms\"\n                            ></md-input>\n                            <!-- <span class=\"md-helper-text\">Add Interval Time in ms</span> -->\n                          </md-field>\n                          <!-- <v-spacer></v-spacer> -->\n                          <!-- <md-button\n                            class=\"md-icon-button md-dense md-raised md-primary\"\n                            flat\n                            @click=\"onAddIntervalTime(this.intervalTimeList.alarms, this.globalAlarmsId)\"\n                          > -->\n                          <md-button\n                            class=\"md-icon-button md-dense md-raised md-primary\"\n                            flat\n                            @click=\"onAddIntervalTimeAlarms()\"\n                          >\n                            <md-icon>add</md-icon>\n                          </md-button>\n                        </div>\n                      </md-select>\n                    </md-field>\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Disable Monitoring\">\n                    <md-button class=\"md-icon-button\" @click=\"onDisableMonitoring(item)\">\n                      <md-icon>delete</md-icon>\n                    </md-button>                \n                  </md-table-cell>\n\n                </md-table-row>\n              </md-table>\n              \n            </md-tab>\n            <md-tab id=\"tab-commands\" md-label=\"Commands\">\n              <md-table\n                v-model=\"users.commands\"\n                md-sort=\"name\"\n                md-sort-order=\"asc\"\n                md-card\n                md-fixed-header\n                @md-selected=\"onSelect\"\n              >\n                <md-table-toolbar max-width=\"1200\">\n                  <h1 class=\"md-title\">Commands Supervision Panel</h1>\n                </md-table-toolbar>\n\n                <md-table-row\n                  slot=\"md-table-row\"\n                  slot-scope=\"{ item }\"\n                  md-selectable=\"single\"\n                >\n                  <md-table-cell\n                    md-label=\"Generic Name\"\n                    md-sort-by=\"Generic Name\"\n                  >\n                    {{ item.generic_name }}\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Name\" md-sort-by=\"Name\">\n                    {{ item.name }}\n                  </md-table-cell>\n\n                  <md-table-cell md-label=\"Item Name\">\n                    {{ item.item_name }}\n                  </md-table-cell>\n\n                </md-table-row>\n              </md-table>\n              \n            </md-tab>\n            <div>\n              \n            </div>\n          </md-tabs>\n\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"red darken-1\" flat @click=\"onCancel\">Annuler </v-btn>\n            <v-btn color=\"green darken-1\" flat @click=\"onSave\">Valider </v-btn>\n          </v-card-actions>\n          <!-- <v-card-actions>\n            <v-btn color=\"red darken-1\">Annuler</v-btn>\n            <v-spacer></v-spacer>\n            \n              <v-btn color=\"red darken-1\" @click=\"onSave\">Save</v-btn>\n\n          </v-card-actions> -->\n        </v-card>\n      </v-dialog>\n    </v-layout>\n  </v-app>\n</template>\n\n<script>\nimport { SpinalNode } from \"spinal-model-graph\";\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\nimport {\n  PART_RELATION_NAME,\n  PART_RELATION_TYPE,\n  DEVICE_RELATION_NAME,\n  DEVICE_RELATION_TYPE,\n  DEVICE_TYPE,\n  DEVICE_PROFILES_TYPE,\n} from \"../constants\";\n\nimport { DeviceHelper } from \"../build/DeviceHelper\";\nimport { FileExplorer } from \"../FileExplorer\";\nimport { resolve } from \"dns\";\n\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst xml2js = require(\"xml2js\");\nconst fs = require(\"fs\");\n\nexport default {\n  name: \"DialogGlobalSupervision\",\n\n  data: () => ({\n    // users: [{}],\n    // usersMeasures: [{}],\n    // usersAlarms: [{}],\n    users: {\n      measures: [{}],\n      alarms: [{}],\n      commands: [{}]\n    },\n    savedUsers: {\n      measures: [{}],\n      alarms: [{}]\n    },\n    // intervalTimeList: [],\n    intervalTimeList: {\n      measures: [],\n      alarms: []\n    },\n    parentId: null,\n    parentNode: null,\n    newIntervalTime: null,\n    dialog: null,\n    monitoringNodeId: null,\n    selected: {},\n    other: null,\n    single: null,\n    globalAlarmsId: null,\n    globalMeasuresId: null\n  }),\n  computed: {},\n  methods: {\n    initialize: async function (option) {\n\n      this.parentId = option.selectedNode.id.get();\n      this.parentNode = option.selectedNode;\n      this.intervalTimeList = await DeviceHelper.getIntervalTimeList(this.parentId);\n      this.users = await DeviceHelper.getGlobalSupervisionConfiguration(this.parentId);\n      // this.savedUsers = await DeviceHelper.getGlobalSupervisionConfiguration(this.parentId);\n      this.globalMeasuresId = (await SpinalGraphService.getChildren(this.parentId, \"hasGlobalMeasures\"))[0].id.get();\n      this.globalAlarmsId = (await SpinalGraphService.getChildren(this.parentId, \"hasGlobalAlarms\"))[0].id.get();\n      this.globalCommandsId = (await SpinalGraphService.getChildren(this.parentId, \"hasGlobalCommands\"))[0].id.get();\n      // this.users = this.savedUsers;\n      // this.globalAlarmsId = await\n      // this.globalMeasuresId = \n\n      // 1 : access from ItemList Panel =>\n      // if (option.ACCESS_FROM == \"Item_List_Panel\") {\n      //   console.log(option);\n      //   this.parentId = await option.selectedNode.id;\n      //   this.parentNode = await option.selectedNode;\n      //   this.users = await DeviceHelper.getLinkedOutputBacnetValues_FromItemId(\n      //     option.selectedNode.id\n      //   );\n      //   this.savedUsers = await DeviceHelper.getLinkedOutputBacnetValues_FromItemId(\n      //     option.selectedNode.id\n      //   );\n      //   console.log(\"savedusers\", this.savedUsers);\n      //   let itemListNode = (\n      //     await SpinalGraphService.getParents(this.parentId, \"hasItem\")\n      //   )[0];\n      //   console.log(itemListNode);\n      //   let deviceNode = (\n      //     await SpinalGraphService.getParents(\n      //       itemListNode.id.get(),\n      //       \"hasItemList\"\n      //     )\n      //   )[0];\n      //   let monitoringNode = (\n      //     await SpinalGraphService.getChildren(\n      //       deviceNode.id.get(),\n      //       \"hasMonitoringNode\"\n      //     )\n      //   )[0];\n      //   this.monitoringNodeId = monitoringNode.id.get();\n      //   this.intervalTimeList = await DeviceHelper.getIntervalTimeList(\n      //     monitoringNode.id.get()\n      //   );\n      // } else if (option.ACCESS_FROM == \"Button_Monitoring_Configuration\") {\n      //   console.log(\"ok\");\n      //   this.parentId = option.selectedNode.id;\n      //   this.parentNode = option.selectedNode;\n      //   this.users = await DeviceHelper.getLinkedOutputBacnetValues_FromMonitoringNodeId(\n      //     option.selectedNode.id\n      //   );\n      //   this.savedUsers = await DeviceHelper.getLinkedOutputBacnetValues_FromMonitoringNodeId(\n      //     option.selectedNode.id\n      //   );\n      //   console.log(\"savedusers\", this.savedUsers);\n      //   this.monitoringNodeId = option.selectedNode.id;\n        // this.intervalTimeList = await DeviceHelper.getIntervalTimeList(\n        //   option.selectedNode.id\n        // );\n      // }\n\n      // this.users = await DeviceHelper.listItemInTab(this.parentNode);\n    },\n    opened: function (option) {\n      // this.users = [];\n      this.initialize(option);\n      this.dialog = true;\n    },\n    removed: function () {},\n    closeDialog() {\n      this.dialog = false;\n    },\n    onCancel: function () {\n      this.dialog = false;\n    },\n    test: function(){\n      console.log(\"clicked\");\n    },\n    onSave: async function () {\n      const savedUsers = await DeviceHelper.getGlobalSupervisionConfiguration(this.parentId);\n      console.log(this.savedUsers);\n      await DeviceHelper.generateGlobalSupervisionLinks(this.users.measures, this.intervalTimeList.measures, savedUsers.measures);\n\n\n      //   this.users,\n      //   this.intervalTimeList,\n      //   this.savedUsers\n      // );\n      // this.dialog = false;\n    },\n    onSelect: function (item) {\n      if(item != null){\n        this.selected = item;\n      }\n    },\n    // onAddIntervalTime: async function () {\n    //   for (let elt in this.intervalTimeList) {\n    //     if (this.intervalTimeList[elt].value == this.newIntervalTime) {\n    //       this.newIntervalTime = null;\n    //       return 0;\n    //     }\n    //   }\n    //   let tempTab = await DeviceHelper.addIntervalTimeNode(\n    //     this.monitoringNodeId,\n    //     this.newIntervalTime\n    //   );\n    //   this.intervalTimeList.push(tempTab);\n    //   this.newIntervalTime = null;\n    // },\n    onAddIntervalTime: async function (intervalTimeList, idOfGlobal) {\n      for (let elt in intervalTimeList) {\n        if (intervalTimeList[elt].value == this.newIntervalTime) {\n          this.newIntervalTime = null;\n          return 0;\n        }\n      }\n      let tempTab = await DeviceHelper.addIntervalTimeNode(/*intervalTimeList,*/ this.newIntervalTime, idOfGlobal);\n      intervalTimeList.push(tempTab);\n      this.newIntervalTime = null;\n    },\n    onAddIntervalTimeMeasures: async function(){\n      await this.onAddIntervalTime(this.intervalTimeList.measures, this.globalMeasuresId);\n    },\n    onAddIntervalTimeAlarms: async function(){\n      await this.onAddIntervalTime(this.intervalTimeList.alarms, this.globalAlarmsId);\n    },\n    clearMeasuresSupervisionConfiguration: function(){\n      for (let elt of this.users.measures){\n        elt.intervalTime = 0;\n      }\n    },\n    // clearAlarmsSupervisionConfiguration: function(){\n    //   for (let elt of this.users.alarms){\n    //     elt.intervalTime = 0;\n    //   }\n    // },\n    clearCommandsSupervisionConfiguration: function(){\n      console.log(\"clearCommandsSupervisionConfiguration to implement\");\n    },\n    clearMonitoringConfiguration: async function(){\n      console.log(this.users);\n      for(let elt in this.users){\n        // let parent = await SpinalGraphService.getParents(this.users[elt].nodeId, \"hasIntervalTime\");\n        // if(parent.length !=0){\n        //   await DeviceHelper.clearLinksOneByOne(parent[0].id.get(), this.users[elt].nodeId, \"hasIntervalTime\", SPINAL_RELATION_PTR_LST_TYPE);\n        // }\n        this.users[elt].intervalTime = 0;\n      }\n    },\n    onDisableMonitoring: async function(item){\n      this.onSelect(item);\n      item.intervalTime = 0;\n    }\n  },\n};\n</script>\n\n<style scoped>\n.md-table-row {\n  justify-content: center;\n  align-items: center;\n}\n.div-add-interval-time {\n  display: flex;\n  flex-direction: row;\n  /* place-content: baseline space-evenly; */\n  align-items: center;\n}\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<div class=\"subContent\">\n\t\t<div class=\"title\">\n\t\t\t<div>{{ title }}</div>\n\t\t\t<!-- <div class=\"md-layout-item md-size-10 mdIcon\">\n        <md-button class=\"md-icon-button\"\n                   @click=\"createEvent\"\n                   :disabled=\"disableBtn\">\n          <md-icon>control_point</md-icon>\n        </md-button>\n      </div> -->\n\t\t</div>\n\n\t\t<md-content class=\"container md-scrollbar\">\n\t\t\t<md-list>\n\t\t\t\t<md-list-item\n\t\t\t\t\tclass=\"list-item\"\n\t\t\t\t\tv-for=\"(item, index) in data\"\n\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t@click=\"selectItem(item.id)\"\n\t\t\t\t\t:class=\"{ selected: item.id === itemSelected }\"\n\t\t\t\t\tv-tooltip=\"item.name\"\n\t\t\t\t>\n\t\t\t\t\t<span class=\"md-list-item-text\">{{ item.name }}</span>\n\t\t\t\t</md-list-item>\n\t\t\t</md-list>\n\t\t</md-content>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: \"linkToGroupTemplate\",\n\t\tprops: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n\t\tmethods: {\n\t\t\tcreateEvent() {\n\t\t\t\tthis.$emit(\"create\");\n\t\t\t},\n\t\t\tselectItem(id) {\n\t\t\t\tthis.$emit(\"select\", id);\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.subContent {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t.subContent .title {\n\t\twidth: 100%;\n\t\theight: 10%;\n\t\t/* text-align: center; */\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0 15px 0 15px;\n\t\tborder-bottom: 1px dashed grey;\n\t}\n\n\t.subContent .container {\n\t\twidth: 100%;\n\t\theight: 90%;\n\t\tpadding: 0px !important;\n\t\t/* border: 1px solid red; */\n\t\toverflow: hidden;\n\t\toverflow-y: auto;\n\t}\n\n\t.subContent .container .list-item {\n\t\tborder-bottom: 1px solid grey;\n\t}\n\n\t.subContent .container .list-item .md-list-item-text {\n\t\twidth: 100%;\n\t\tdisplay: block;\n\t\toverflow: hidden;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t}\n\n\t.subContent .container .list-item.selected {\n\t\tbackground-color: #448aff;\n\t}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\t<div class=\"selection_container\">\n\t\t<div :class=\"isAutomate ? 'section' : 'middle'\">\n\t\t\t<link-template\n\t\t\t\t:title=\"context_title\"\n\t\t\t\t:data=\"data\"\n\t\t\t\t:itemSelected=\"contextSelected\"\n\t\t\t\t@select=\"selectContext\"\n\t\t\t></link-template>\n\t\t</div>\n\n\t\t<div :class=\"isAutomate ? 'section' : 'middle'\">\n\t\t\t<link-template\n\t\t\t\t:title=\"category_title\"\n\t\t\t\t:data=\"profils\"\n\t\t\t\t:itemSelected=\"profilSelected\"\n\t\t\t\t@select=\"selectProfil\"\n\t\t\t></link-template>\n\t\t</div>\n\n\t\t<div class=\"section\" v-if=\"isAutomate\">\n\t\t\t<link-template\n\t\t\t\t:title=\"group_title\"\n\t\t\t\t:data=\"devices\"\n\t\t\t\t:itemSelected=\"deviceSelected\"\n\t\t\t\t@select=\"selectDevice\"\n\t\t\t></link-template>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport LinkToGroupTemplate from \"./linkToGroupTemplate.vue\";\n\n\texport default {\n\t\tname: \"selectionComponent\",\n\t\tprops: {\n\t\t\tcontext_title: {},\n\t\t\tcategory_title: {},\n\t\t\tgroup_title: {},\n\t\t\tdata: {},\n\t\t\tprofils: {},\n\t\t\tdevices: {},\n\t\t\tcontextSelected: {},\n\t\t\tprofilSelected: {},\n\t\t\tdeviceSelected: {},\n\t\t\tisAutomate: {\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: true,\n\t\t\t},\n\t\t},\n\t\tcomponents: { \"link-template\": LinkToGroupTemplate },\n\t\tmethods: {\n\t\t\tselectContext(res) {\n\t\t\t\tthis.$emit(\"selectContext\", res);\n\t\t\t},\n\n\t\t\tselectProfil(res) {\n\t\t\t\tthis.$emit(\"selectProfil\", res);\n\t\t\t},\n\n\t\t\tselectDevice(res) {\n\t\t\t\tthis.$emit(\"selectDevice\", res);\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.selection_container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: stretch;\n\t}\n\n\t.selection_container .section {\n\t\twidth: 33%;\n\t\tborder: 1px solid grey;\n\t\tborder-radius: 4% 4% 0 0;\n\t\tpadding: 15px;\n\t}\n\n\t.selection_container .middle {\n\t\twidth: 49%;\n\t\tborder: 1px solid grey;\n\t\tborder-radius: 4% 4% 0 0;\n\t\tpadding: 15px;\n\t}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n   <md-dialog\n      class=\"mdDialogContainer\"\n      :md-active.sync=\"DialogGetFromDiscovery\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title class=\"dialogTitle\">Get bacnetValues from discovery</md-dialog-title>\n\n      <md-dialog-content class=\"content\">\n          <link-component\n            v-if=\"pageSelected === PAGES.selection\"\n            :context_title=\"'Contexts'\"\n            :category_title=\"'Subnetworks'\"\n            :group_title=\"'Bms devices'\"\n            :data=\"data\"\n            :profils=\"networks\"\n            :devices=\"devices\"\n            :contextSelected=\"contextSelected\"\n            :profilSelected=\"networkSelected\"\n            :deviceSelected=\"deviceSelected\"\n            :isAutomate=\"isAutomate\"\n            @selectContext=\"selectContext\"\n            @selectProfil=\"selectNetwork\"\n            @selectDevice=\"selectDevice\"\n         ></link-component> \n\n         <!-- <configuration-template\n            v-else-if=\"pageSelected === PAGES.configuration\"\n            :properties=\"configuration\"\n            :bimData=\"configuration.bimData\"\n            :bmsData=\"configuration.bmsData\"\n         ></configuration-template> -->\n\n         <!-- <confirm-link\n            v-else-if=\"pageSelected === PAGES.result\"\n            :data=\"result\"\n         ></confirm-link> -->\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.loading\"\n         >\n            <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.error\"\n         >\n            <md-icon class=\"md-size-5x\">error_outline</md-icon>\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.success\"\n         >\n            <md-icon class=\"md-size-5x\">done</md-icon>\n         </div>\n\n         \n\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n\n\n\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(true)\"\n         >Discover</md-button>\n      </md-dialog-actions>\n\n   </md-dialog>\n\n</template>\n\n<script>\nimport { bimObjectManagerService } from \"spinal-env-viewer-bim-manager-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n// import linkAutomateToBmsDeviceUtilities from \"../../../js/link_utilities/linkAutomateToBmsDevice\";\nimport {\n   AttributesUtilities,\n   LinkBmsDeviceService,\n} from \"spinal-env-viewer-plugin-network-tree-service\";\nimport networkService from \"spinal-env-viewer-plugin-network-tree/src/js/network/networkService\";\nimport LinkComponent from \"./links/LinkComponent.vue\";\n//import ConfirmLinkToGTB from \"./confirmLinkToGTB.vue\";\nimport ConfigurationTemplate from \"../../spinal-env-viewer-plugin-network-tree/src/vue/components/links/configuration.vue\";\nimport bmsDataFunction from \"../../spinal-env-viewer-plugin-network-tree/src/js/personalized_functions/replace_by.js\";\nimport bimDataFunction from \"../../spinal-env-viewer-plugin-network-tree/src/js/personalized_functions/replace-by.js\";\n// import { SpinalForgeViewer } from \"spinal-env-viewer-plugin-forge\";\nimport { DeviceHelper } from \"../build/DeviceHelper\";\n\nconst lodash = require(\"lodash\");\n\n\n\n  export default {\n    name: \"Test\",\n\n    components:{\n       \"link-component\" : LinkComponent\n    },\n    \n    props: [\"onFinised\"],\n    \n    data () {\n\n       this.PAGES = {\n         selection: 0,\n         configuration: 1,\n         result: 2,\n         creation: 3,\n         loading: 4,\n         success: 5,\n         error: 6,\n      };\n\n      this.contextId;\n      this.nodeId;\n      \n\n      return {\n        DialogGetFromDiscovery: true,\n        data: [],\n        networks: [],\n        devices: [],\n        contextSelected: undefined,\n        networkSelected: undefined,\n        deviceSelected: undefined,\n        pageSelected: this.PAGES.selection,\n      }\n    },\n    methods: {\n      \n      onSave: function () {\n\n      },\n    \n      onCancel: function () {\n        this.DialogGetFromDiscovery = false;\n      },\n      \n      removed: function (save) {\n         if(save){\n            //DeviceHelper.generateBacNetValuesFromDiscovery(this.deviceSelected, this.nodeId, this.contextId );\n            new Promise(async resolve => {\n\n               //await DeviceHelper.generateBacNetValues(nodeId, result);\n               await DeviceHelper.generateBacNetValuesFromDiscovery(this.nodeId, this.contextId, this.deviceSelected, this.networkSelected, this.contextSelected);\n               await DeviceHelper.generateItem_list(this.nodeId);\n               await DeviceHelper.generateSupervisionGraph(this.nodeId);\n\n               }).catch(err => console.log(err));  \n         }\n         //console.log(\"save : \", save);\n         this.DialogGetFromDiscovery = false;\n\n      },\n      \n      closeDialog( closeResult ) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised(closeResult);\n         }\n\n      },\n\n      opened(option) {\n         //this.DialogGetFromDiscovery = true;\n         this.pageSelected = this.PAGES.loading,\n         this.contextId = option.contextId;\n         this.nodeId = option.nodeId;\n         this.isAutomate = option.isAutomate;\n         this.getAllData();\n         \n      },\n\n\n\n      getAllData() {\n         return networkService\n            .getDeviceContextTreeStructure()\n            .then((result) => {\n               this.data = result;\n               this.updateNetworks();\n               this.pageSelected = this.PAGES.selection;\n            });\n      },\n\n      _getBmsDevices() {\n         if (typeof this.deviceSelected !== \"undefined\") {\n            return this.devices.filter((el) => el.id === this.deviceSelected);\n         } else if (typeof this.networkSelected !== \"undefined\") {\n            const found = this.networks.find(\n               (el) => el.id === this.networkSelected\n            );\n            return found && found.devices ? found.devices : [];\n         } else if (typeof this.contextSelected !== \"undefined\") {\n            const devices = [];\n            const found = this.data.find(\n               (el) => el.id === this.contextSelected\n            );\n            if (found && found.networks) {\n               for (const network of found.networks) {\n                  if (network.devices) {\n                     devices.push(...network.devices);\n                  }\n               }\n            }\n            return devices;\n         }\n      },\n\n \n\n      /* Selection */\n      selectContext(id) {\n         this.contextSelected = id;\n      },\n      selectNetwork(id) {\n         this.networkSelected = id;\n      },\n      selectDevice(id) {\n         this.deviceSelected = id;\n      },\n      /* Update */\n      updateNetworks() {\n         this.networks = [];\n         if (this.contextSelected) {\n            let val = this.data.find((el) => el.id === this.contextSelected);\n            if (val) this.networks = val.networks;\n         }\n      },\n      updateDevices() {\n         this.devices = [];\n         if (this.networkSelected) {\n            let val = this.networks.find(\n               (el) => el.id === this.networkSelected\n            );\n            if (val) this.devices = val.devices;\n         }\n      },\n      \n  },\n\n  watch: {\n      async contextSelected() {\n         await this.updateNetworks();\n         this.networkSelected = undefined;\n      },\n      async networkSelected() {\n         this.updateDevices();\n         this.deviceSelected = undefined;\n      },\n   }\n  }\n</script>\n\n<style scoped>\n\n.mdDialogContainer {\n   width: 60%;\n   height: 600px;\n}\n.mdDialogContainer .dialogTitle {\n   text-align: center;\n}\n.mdDialogContainer .content {\n   padding: 0 10px 24px 24px;\n}\n.mdDialogContainer .content .state {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n.mdDialogContainer .content .progress-bar {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n}\n.mdDialogContainer .content .progress-bar .percent-number {\n   font-size: 1.8em;\n   margin: 10px 0;\n}\n.mdDialogContainer .content .progress-bar .percent-bar {\n   width: 90%;\n}\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n   max-width: 100%;\n   max-height: 100%;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-device_profile.c61e5568.css.map"}