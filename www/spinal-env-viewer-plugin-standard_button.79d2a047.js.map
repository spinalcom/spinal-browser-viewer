{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;AAOA,yBAAyB,GACzB;AAKA,yBAAyB,GACzB;AAKA,yBAAyB,GACzB,+DAA+D;AAE/D,6FAA6F;AAG7F,+BAA+B,GAC/B;AAKA,uBAAuB,GACvB;AAKA,oCAAoC;AACpC;AAIA,8CAA8C;AAE9C;AAKA,kCAAkC;AAClC,gEAAgE;AAEhE,0FAA0F;AAE1F;AApDA,MAAM,EACL,wBAAwB,EACxB,GAAG,QAAQ;AAMZ,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,mCAAmB,AAAD,KAAK;IAAC;CAAE;AAM1F,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,mCAAmB,AAAD,KAAK;IAAC;CAAE;AAY1F,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,qDAA4B,AAAD,KAAK;IAAC;CAAG;AAMpG,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,6CAAwB,AAAD,KAAK;IAAC;CAAG;AAMhG,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,yCAAsB,AAAD,KAAK;IAAC;CAAG;AAM9F,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,2DAA+B,AAAD,KAAK;IAAC;CAAG;AASvG,yBAAyB,WAAW,CAAC,uBAAuB,IAAI,CAAA,GAAA,yBAAe,AAAD,KAAK;IAAC;CAAE;;;;AC/EtF;;AACA;;AACA;;AACA;;AACA;;AAGA,MAAM,EACJ,oBAAoB,EACrB,GAAG,QAAQ;AAEZ,MAAM,UAAU;IACd;QACE,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAG,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,8BAAqB,AAAD;QAClD,iBAAiB,SAAS,IAAI;IAChC;IAAG;QACD,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAG,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,8BAAqB,AAAD;QAClD,iBAAiB,SAAS,IAAI;IAChC;IAAG;QACD,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAG,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,gCAAuB,AAAD;QACpD,iBAAiB,SAAS,IAAI;IAChC;IACA;QACE,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAG,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,8BAAwB,AAAD;QACrD,iBAAiB,SAAS,IAAI;IAChC;CACD;AAED,IAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,MAAM,EAAE,QAC1C,qBAAqB,KAAK,CAAC,OAAO,CAAC,MAAM;;;;;AChC3C,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA8B,MAAM;IAClD,OAAO,eAAe,GAAG,QAAQ,oBAA8B,eAAe;IAC9E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA2B,OAAO;IAChE,QAAQ,oBAA4B,OAAO,CAAC;IAC5C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,c;Y,iB;Y,c;Y,gB;Y,e;Y,e;Y,a;gB;gB;a;Y,mB,E;Y,mB,E;Y,c;Y,W;Y,M;Q;I;I,S;Q,Q,M;Y,Q,G,C,a;Y,I,C,I,G,O,Y,C,I,C,G;Y,I,C,Y,G,O,Y;Y,I,C,e,G,O,O;Q;Q,S,M;Y,I,O,W,K,M;gB,Q,G,C,a;gB,I,C,O;gB,I,C,U,G;Y;Y,I,C,U,G;Q;Q;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;Y,K,e;Q;Q;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;Y,K,W,G,I,C,C;gB,I,C,W,C,U,I,C,C;oB,M,sB,I,C,c,C;oB,K,M,S,oB,M,e;gB;Y;Q;Q;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;Y,K,W,G,I,C,C;gB,I,C,W,C,U,I,C,C;oB,M,sB,I,C,c,C;oB,K,M,S,oB,M,e;gB;Y;Y,K,e;Q;Q;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;Y,C,G,+C,A,E,mB,C,I,C,e,C,E,C,G,I,I,C,e,C,E,C,G,I,K,O,G,G,I,I,C,C;gB,M,Q,O,G,C,C,I,C,G,+C,A,E,W,C,E,E,C,G;gB,Q,G,C,W;gB,M,mB,I,C,c,C;gB,K,M,gB,iB,+D;gB,a,e;Y;Q;Q;Y,Q,G,C;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;Y,mB;Y,K,U,G,I,C,C;gB,Q,G,C,c;gB,K,M,K,Q,mC;gB,I,E,a,G,Q,C,I,C,e,C,E,C,G,K;oB,Q,G,C,mC,E,I,C,I,C,G;oB,qB;oB,K,M,K,E,gB,G,8C;oB,C,G,+C,A,E,O,C,E,I,C,E,C,G,I,I,C,Y,C,E,C,G,I,G,I,C,C;wB,I,K;4B,Q,G,C;4B,I,C,W,C,G,M;wB,O,Q,G,C;oB;gB;Y;Q;Q,M;Y,4F;Y,Q,G,C;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;Y,K,M,K,I,C,iB,C;gB,M,W,M,K,W,C;gB,K,M,S,S,I,C,W,C,M,O;gB,I;oB,Q,G,C,gC;oB,K,c,C,G,C,G,yD,A;gB,E,O,G;oB,I;wB,K,c,C,G,C,G,yD,A;oB,E,O,G;wB,Q,G,C;oB;gB;Y;Q;Q;Y,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;YAiIf,IAAA,YAAA,KAAA,gBAAA;YACA,IAAA,CAAA,iBAAA,GAAA;YACA,IAAA,CAAA,iBAAA,GAAA;YACA,QAAA,GAAA,CAAA;QACA;QAEA,MAAA,aAAA,KAAA;YACA,MAAA,MAAA,EAAA;YACA,OAAA,IAAA,CAAA,aAAA;gBACA,KAAA;oBACA,KAAA,MAAA,QAAA,MAAA;wBACA,MAAA,UAAA,MAAA,KAAA,UAAA;wBACA,IAAA,cAAA;wBACA,KAAA,MAAA,KAAA,QACA,IAAA,EAAA,IAAA,CAAA,EAAA,CAAA,GAAA,MAAA,IAAA,CAAA,YAAA,CAAA,EAAA,CAAA,GAAA,IAAA;4BACA,cAAA;4BACA;wBACA;wBAEA,IAAA,CAAA,aAAA,IAAA,IAAA,CAAA;oBACA;oBACA,OAAA;gBAEA,KAAA;oBACA,KAAA,MAAA,QAAA,MAAA;wBACA,MAAA,UAAA,MAAA,KAAA,UAAA;wBACA,IAAA,cAAA;wBACA,KAAA,MAAA,KAAA,QACA,IAAA,EAAA,IAAA,CAAA,EAAA,CAAA,GAAA,MAAA,IAAA,CAAA,YAAA,CAAA,EAAA,CAAA,GAAA,IAAA;4BACA,MAAA,mBAAA,EAAA,aAAA,IAAA,oCAAA;4BACA,IAAA,iBAAA,QAAA,CAAA,IAAA,CAAA,eAAA,CAAA,EAAA,CAAA,GAAA,KAAA;gCACA,cAAA;gCACA;4BACA;wBACA;wBAEA,IAAA,CAAA,aAAA,IAAA,IAAA,CAAA;oBACA;oBACA,OAAA;gBACA,KAAA;oBACA,KAAA,MAAA,QAAA,MAAA;wB,M,U,M,K,U;wBAEA,IAAA,cAAA;wBACA,KAAA,MAAA,KAAA,QACA,IAAA,EAAA,IAAA,CAAA,EAAA,CAAA,GAAA,MAAA,IAAA,CAAA,YAAA,CAAA,EAAA,CAAA,GAAA,IAAA;4BACA,MAAA,mBAAA,EAAA,aAAA,IAAA,oCAAA;4B,I,C,iB,Q,C,I,C,e,C,E,C,G,K;gCAEA,cAAA;gCACA;4BACA;wBACA;wBAEA,IAAA,CAAA,aAAA,IAAA,IAAA,CAAA;oBACA;oBACA,OAAA;gBACA;oBACA,OAAA;YACA;Q;QAGA,gBAAA,KAAA;YACA,IAAA,IAAA,CAAA,SAAA,IAAA,IAAA,OAAA;YACA,OAAA,MAAA,MAAA,CAAA,CAAA;gBACA,IAAA,IAAA,CAAA,YAAA,EACA,OAAA,KAAA,IAAA,CAAA,IAAA,CAAA,GAAA,MAAA,IAAA,CAAA,SAAA;qBACA,OAAA,KAAA,IAAA,CAAA,IAAA,CAAA,GAAA,GAAA,QAAA,CAAA,IAAA,CAAA,SAAA;YACA;QACA;QAEA;YACA,IAAA,IAAA,CAAA,YAAA,KAAA,gBAAA;gB,I,I,C,c,K,KAEA,IAAA,CAAA,UAAA;qBACA,IAAA,IAAA,CAAA,cAAA,KAAA,KACA,IAAA,CAAA,cAAA;qBACA,IAAA,IAAA,CAAA,cAAA,KAAA,KACA,IAAA,CAAA,qBAAA;qBACA,IAAA,IAAA,CAAA,cAAA,KAAA,KACA,IAAA,CAAA,qCAAA;YAEA,OAAA,IAAA,IAAA,CAAA,YAAA,KAAA,oBAAA;gBACA,IAAA,IAAA,CAAA,cAAA,KAAA,KACA,IAAA,CAAA,iCAAA;qBACA,IAAA,IAAA,CAAA,cAAA,KAAA,KACA,IAAA,CAAA,uBAAA;qBACA,IAAA,IAAA,CAAA,cAAA,KAAA,KACA,IAAA,CAAA,qBAAA;YAEA;QACA;QAEA,aAAA,CAAA,EAAA,IAAA,EAAA,CAAA;YACA,IAAA;gBACA,EAAA,WAAA,CAAA,MAAA,GAAA,CAAA,GAAA,yDAAA,AAAA;YACA,EAAA,OAAA,GAAA;gBACA,IAAA;oBACA,EAAA,WAAA,CAAA,MAAA,GAAA,CAAA,GAAA,yDAAA,AAAA;gBACA,EAAA,OAAA,GAAA;oBACA,QAAA,GAAA,CAAA;gBACA;YACA;QACA;QAEA,aAAA,WAAA;YACA,IAAA,OAAA,IAAA,CAAA,SAAA,KAAA,YACA,IAAA,CAAA,SAAA,CAAA;gBAAA;gBAAA,YAAA,IAAA,CAAA,UAAA;YAAA;QAEA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,G,a;Y,O;gB,a,I,U;Y;Y,I;gB,mB,S,M;oB,I,U,G;gB;gB,oB,S,M;oB,I,U,G;gB;gB,a,S,M;oB,O,I,W,C;gB;Y;Q,G;Y,G,mB;gB,I,E,C,sC,I,E,C,I,I;a;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,G,Y;oB,G,S;wB,O;4B,O;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,a;wB,O;4B,M;4B,Q;wB;wB,O;4B,O,I,Y;4B,U,S,G;gC,I,Y,G;4B;4B,Y;wB;oB,G,I,E,C,I,W,E,S,M;wB,O,G,a;4B,K;4B,O;gC,S;4B;wB,G;4B,I,E,C,mB,I,E,C,U;yB;oB,I;iB,E;gB,I,E,C;gB,I,Y,K,iB,G,O;oB,G,Y;wB,a;wB,O;4B,S;wB;wB,O;4B,O,I,c;4B,U,S,G;gC,I,c,G;4B;4B,Y;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,Y;wB,a;wB,O;4B,S;wB;wB,O;4B,O,I,c;4B,U,S,G;gC,I,c,G;4B;4B,Y;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,Y;wB,a;wB,O;4B,S;wB;wB,O;4B,O,I,c;4B,U,S,G;gC,I,c,G;4B;4B,Y;wB;oB,G;wB,I,E,C;wB,G,U;4B,I,E,C;yB;wB,I,E,C;qB;oB,I,E,C;oB,G,Y;wB,a;wB,O;4B,S;wB;wB,O;4B,O,I,c;4B,U,S,G;gC,I,c,G;4B;4B,Y;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,I,c,K,O,I,c,K,M,G,O;wB,G,Y;4B,G,S;gC,I,E,C;6B;4B,I,E,C;4B,G,Y;gC,O;oC,O,I,S;oC,U,S,G;wC,I,S,G;oC;oC,Y;gC;4B;yB,E;wB,I,E,C;wB,I,S,I,K,G,K;4B,I,E,C;yB,I,G,O;4B,G,Y;gC,O;oC,S;gC;gC,O;oC,O,I,Y;oC,U,S,G;wC,I,Y,G;oC;oC,Y;gC;4B,G;gC,I,E,C;6B;4B,I,E,C;4B,G,Y;gC,O;oC,S;gC;gC,O;oC,O,I,Y;oC,U,S,G;wC,I,Y,G;oC;oC,Y;gC;4B,G;gC,I,E,C;6B;yB,E;qB,E,K,I,E;oB,I,E,C;oB,G,O;wB,G,K;4B,I,E,C;yB;wB,I,E,C;wB,G,U;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,O;gC,Y,I,c,I,O,I,c,I;gC,S;4B;4B,O;gC,O,I,a;gC,U,S,G;oC,I,a,G;gC;gC,Y;4B;wB,G;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,O;gC,Y,I,c,I,O,I,c,I;gC,S;4B;4B,O;gC,O,I,a;gC,U,S,G;oC,I,a,G;gC;gC,Y;4B;wB,G;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,O;gC,Y,I,c,I,O,I,c,I;gC,S;4B;4B,O;gC,O,I,a;gC,U,S,G;oC,I,a,G;gC;gC,Y;4B;wB,G;4B,I,E,C;yB;qB,E;iB,E,K,I,E;gB,I,E,C;gB,I,Y,K,qB,G,O;oB,G,Y;wB,a;wB,O;4B,S;wB;wB,O;4B,O,I,c;4B,U,S,G;gC,I,c,G;4B;4B,Y;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,Y;wB,a;wB,O;4B,S;wB;wB,O;4B,O,I,c;4B,U,S,G;gC,I,c,G;4B;4B,Y;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,I,c,I,M,G,a;wB,I;4B,S,S,M;gC,O,I,e;4B;wB;oB,G;wB,I,E,C;qB,I,I,E;oB,I,E,C;oB,I,iB,C,M,G,I,G,O,I,E,C,I,iB,E,S,I;wB,O,G,e;4B,K;4B,O;gC,S;4B;4B,O;gC,O,I,iB;gC,U,S,G;oC,I,iB,G;gC;gC,Y;4B;wB,G;4B,I,E,C,I,E,C;yB;oB,I,K,I,E;iB,E,K,I,E;a,E;Y,I,E,C;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAhQA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,mBAA8B,MAAM;IAClD,OAAO,eAAe,GAAG,QAAQ,mBAA8B,eAAe;IAC9E,OAAO,QAAQ,GAAG;IAG5B,QAAQ,mBAA4B,OAAO,CAAC;IAC5C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,c;Y,M;Y,Y;Q;I;I,S;Q,Q,M;Y,I,C,I,G,O,Y,C,I,C,G;Y,I,C,U,G,I,C,I;Y,Q,G,C;Y,I,C,Y,G,O,Y;Q;Q,S,M;Y,I,O,W,K,M;gB,I,O,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;gB,K,I,C,I,C,G,C,I,C,U;gB,I,C,U,G;Y;Y,I,C,U,G;Q;Q,a,W;Y,I,O,I,C,S,K,Y,I,C,S,C;gB;gB,Y,I,C,U;Y;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,G,a;Y,O;gB,a,I,U;Y;Y,I;gB,mB,S,M;oB,I,U,G;gB;gB,oB,S,M;oB,I,U,G;gB;gB,a,S,M;oB,O,I,W,C;gB;Y;Q,G;Y,G,mB;gB,I,E,C,Y,I,E,C,I,I;a;Y,I,E,C;Y,G,qB;gB,G,Y;oB,G,Y;wB,O;4B,O,I,U;4B,U,S,G;gC,I,U,G;4B;4B,Y;wB;oB;iB,E;a,E;Y,I,E,C;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAgC,MAAM;IACpD,OAAO,eAAe,GAAG,QAAQ,oBAAgC,eAAe;IAChF,OAAO,QAAQ,GAAG;IAG5B,QAAQ,oBAA8B,OAAO,CAAC;IAC9C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,c;Y,Y;Q;I;I,S;Q,Q,M;Y,I,C,Y,G,O,Y;Y,I,C,M,G,O,M,C,W,C,M;Q;Q,S,M;Y,I,O,W,K,M;gB,I,W,C,G,+C,A,E,W,C,I,C,Y,C,E,C,G;gB,I,O,I;gB,S,I,C;oB;oB;oB;oB;oB;oB;iB,E,S,I;oB,I,K,I,C,I,C,G,O,a,O;gB,G,I,C,C;oB,K,M,C,c;oB,I,I,I,G,I,I,M,E,I,I,G,C,E,C,I,C,I,C,G,O,K,U,E,K,M,C,M,C;wB,G,C,E,C,I,C,I,C,G;qB;gB;gB,K,U,G;Y;Y,I,C,U,G;Q;Q,a,W;Y,I,O,I,C,S,K,Y,I,C,S,C;gB;gB,Y,I,C,U;Y;Q;I;A;A,I,U,O,kB,a,c,O,G;kBA6Bf,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,G,a;Y,O;gB,a,I,U;Y;Y,I;gB,mB,S,M;oB,I,U,G;gB;gB,oB,S,M;oB,I,U,G;gB;gB,a,S,M;oB,O,I,W,C;gB;Y;Q,G;Y,G,mB;gB,I,E,C;a;Y,I,E,C;Y,G,qB;gB,G,Y;oB,G,Y;wB,O;4B,O,I,U;4B,U,S,G;gC,I,U,G;4B;4B,Y;wB;oB;iB,E;a,E;Y,I,E,C;Y,G,qB;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,W,C;wB;oB;gB,G;oB,I,E,C;iB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AA5CA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA8B,MAAM;IAClD,OAAO,eAAe,GAAG,QAAQ,oBAA8B,eAAe;IAC9E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA2B,OAAO;IAChE,QAAQ,oBAA4B,OAAO,CAAC;IAC5C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;A,I,gB;I,M;I,O;Q;K;I,Y;Q,iB,C,G,gB,A;I;I;Q,O;Y,Y;Y,O;Y,c;Q;I;IAEf,SAAA;QACA,QAAA,MAAA;Y,I,O,Y,C,K,EAEA,IAAA,CAAA,KAAA,GAAA,OAAA,YAAA,CAAA,KAAA,CAAA,GAAA;YAEA,IAAA,CAAA,YAAA,GAAA,CAAA,GAAA,+CAAA,AAAA,EAAA,WAAA,CACA,OAAA,YAAA,CAAA,EAAA,CAAA,GAAA;QAEA;QACA,SAAA,MAAA;YACA,IAAA,OAAA,WAAA,KAAA,MAAA;gBACA,MAAA,QACA,OAAA,IAAA,CAAA,KAAA,KAAA,WAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA;gBACA,IAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,KAAA,EACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;qBAEA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,QAAA,CAAA;oBAAA,OAAA;gBAAA;YAEA;YACA,IAAA,CAAA,UAAA,GAAA;QACA;QACA,aAAA,WAAA;YACA,IAAA,OAAA,IAAA,CAAA,SAAA,KAAA,YACA,IAAA,CAAA,SAAA,CAAA;gBAAA;gBAAA,YAAA,IAAA,CAAA,UAAA;YAAA;QAEA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;Q,G;Y,G,iB;gB,O;oB,O,I,K;oB,U,S,G;wB,I,K,G;oB;oB,Y;gB;Y;S,E;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AA/CA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;ACLA;;;;;;;;;;;;;;;;;;;;;;CAsBC;AAED,MAAM,SAAS,OAAO,UAAU,cAAc,SAAS;AACvD,MAAM,4BAA4B,QAAQ;AAC1C,MAAM,iBAAiB,QAAQ;AAE/B,IAAI,OAAO,OAAO,MAAM,KAAK,aAAa,OAAO,MAAM,GAAG,CAAC;AAC3D,IAAI,OAAO,OAAO,MAAM,CAAC,yBAAyB,KAAK,aACrD,OAAO,MAAM,CAAC,yBAAyB,GAAG,IAAI;AAChD,MAAM,uBAAuB,QAAQ,oBACnC,OAAO,MAAM,CAAC,yBAAyB,EACvC;AAGF,OAAO,OAAO,GAAG;IACf,2BAA2B,OAAO,MAAM,CAAC,yBAAyB;IAClE;IACA;IACA,SAAQ,GAAG;QACT,IAAI,SAAS,CAAC,0BAA0B,GACtC,OAAO,MAAM,CAAC,yBAAyB;IAC3C;AACF;;;AC5CA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;;;;;CAKC,GACD,MAAM;IACJ;;;GAGC,GACD,aAAc;QACZ,IAAI,CAAC,MAAM,GAAG,CAAC;IACjB;IAEA;;;;;;GAMC,GACD,cAAc,SAAS,EAAE,cAAc,EAAE;QA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","sources":["node_modules/spinal-env-viewer-plugin-standard_button/index.js","node_modules/spinal-env-viewer-plugin-standard_button/registerDialogs.js","node_modules/spinal-env-viewer-plugin-standard_button/vue/deletePanel.vue","node_modules/spinal-env-viewer-plugin-standard_button/vue/renamePanel.vue","node_modules/spinal-env-viewer-plugin-standard_button/vue/researchPanel.vue","node_modules/spinal-env-viewer-plugin-standard_button/vue/colorDialog.vue","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-plugin-standard_button/js/deleteButton.js","node_modules/spinal-env-viewer-plugin-standard_button/js/renameButton.js","node_modules/spinal-env-viewer-plugin-standard_button/js/selectBIMObjectButton.js","node_modules/spinal-env-viewer-plugin-standard_button/js/utilities.js","node_modules/spinal-env-viewer-plugin-standard_button/js/fitToViewerButton.js","node_modules/spinal-env-viewer-plugin-standard_button/js/isolationButton.js","node_modules/spinal-env-viewer-plugin-standard_button/js/isolationReferenceButton.js","node_modules/spinal-env-viewer-plugin-standard_button/js/addColor.js","node_modules/spinal-env-viewer-bim-manager-service/dist/index.js","node_modules/spinal-env-viewer-bim-manager-service/src/index.ts","node_modules/spinal-env-viewer-bim-manager-service/dist/bimObjects/bimService.js","node_modules/spinal-env-viewer-bim-manager-service/src/bimObjects/bimService.ts","node_modules/@parcel/node-resolver-core/lib/_empty.js"],"sourcesContent":["/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport \"./registerDialogs\";\n\nconst {\n\tspinalContextMenuService\n} = require(\"spinal-env-viewer-context-menu-service\");\n\n\n/* \t\t\tDelete Button  \t\t\t\t*/\nimport { SpinalContextDelete } from './js/deleteButton.js';\n\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextDelete(), [3]);\n\n\n/* \t\t\tRename Button  \t\t\t\t*/\nimport { SpinalContextRename } from './js/renameButton.js';\n\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextRename(), [3]);\n\n\n/* \t\t\tSortChild Button\t\t\t*/\n//import { SpinalContextSortByName } from './js/sortButton.js';\n\n//spinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextSortByName());\n\n\n/* \t\t\tSelectBIMObject Button \t\t*/\nimport { SpinalContextSelectBIMObject } from './js/selectBIMObjectButton.js';\n\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextSelectBIMObject(), [31]);\n\n\n/* \t\t\tZoom Button  \t\t\t\t*/\nimport { SpinalContextFitToViewer } from './js/fitToViewerButton.js';\n\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextFitToViewer(), [31]);\n\n\n// \t\t\t\t/* \t\t\tIsolation Button  \t\t\t*/\nimport { SpinalContextIsolation } from './js/isolationButton.js';\n\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextIsolation(), [31]);\n\n// \t\t\t\t/* \t\t\tIsolation Reference Button  \t\t\t*/\n\nimport { SpinalContextIsolationReference } from './js/isolationReferenceButton.js';\n\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContextIsolationReference(), [31]);\n\n\n// \t\t\t\t/* \t\t\tResearch Button\t\t\t\t*/\n//import { SpinalContexResearch } from './js/researchButton.js';\n\n//spinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalContexResearch());\n\nimport { SpinalEditColor } from \"./js/addColor\";\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new SpinalEditColor(), [3]);\n","import vue from \"vue\";\nimport dialogDeleteComponent from \"./vue/deletePanel.vue\";\nimport dialogRenameComponent from \"./vue/renamePanel.vue\";\nimport dialogResearchComponent from \"./vue/researchPanel.vue\";\nimport EditColordialogComponent from \"./vue/colorDialog.vue\";\n\n\nconst {\n  SpinalMountExtention\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst dialogs = [\n  {\n    name: \"standardButtonDelete\",\n    vueMountComponent: vue.extend(dialogDeleteComponent),\n    parentContainer: document.body\n  }, {\n    name: \"standardButtonRename\",\n    vueMountComponent: vue.extend(dialogRenameComponent),\n    parentContainer: document.body\n  }, {\n    name: \"standardButtonResearch\",\n    vueMountComponent: vue.extend(dialogResearchComponent),\n    parentContainer: document.body\n  },\n  {\n    name: \"editColordialogComponent\",\n    vueMountComponent: vue.extend(EditColordialogComponent),\n    parentContainer: document.body\n  }\n];\n\nfor (let index = 0; index < dialogs.length; index++) {\n  SpinalMountExtention.mount(dialogs[index]);\n}","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n      <md-dialog-title\n        >Delete action on node selected : {{ name }}</md-dialog-title\n      >\n      <div class=\"DeleteMainBody\">\n        <md-field>\n          <label for=\"Select how you want the delete to operate\">\n            Select how you want the delete to operate\n          </label>\n          <md-select id=\"modeSelect\" name=\"modeSelect\" v-model=\"selectedMode\">\n            <md-option\n              v-for=\"option in modeOptions\"\n              :key=\"option\"\n              :value=\"option\"\n            >\n              {{ option }}\n            </md-option>\n          </md-select>\n        </md-field>\n        <div v-if=\"selectedMode === 'Delete nodes'\">\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"1\">\n            This node only\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"2\">\n            This node's children nodes\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"3\">\n            This node <strong> and </strong> children nodes\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"4\">\n            All nodes of similar type in the same context</md-radio\n          >\n\n          <div v-if=\"selectedOption === '4' || selectedOption === '2'\">\n            <md-field>\n              <label>Filter value : </label>\n              <md-input v-model=\"strFilter\"></md-input>\n            </md-field>\n            <b v-if=\"strFilter == ''\"> !! If the filter is empty, all nodes will be captured !! </b>\n            <div v-else>\n              <md-radio v-model=\"strictFilter\" :value=\"true\">\n                Strict filter (node name has to match exactly the filter value)\n              </md-radio>\n              <md-radio v-model=\"strictFilter\" :value=\"false\">\n                Not strict filter (node name should contain the filter\n                value)</md-radio\n              >\n            </div>\n          </div>\n\n          <div>\n            <p>--------------------</p>\n            <strong> Exclude if : </strong>\n            <md-radio\n              :disabled=\"selectedOption == '1' || selectedOption == '4'\"\n              v-model=\"excludeOption\"\n              value=\"1\"\n            >\n              Node has another parent\n            </md-radio>\n            <md-radio\n              :disabled=\"selectedOption == '1' || selectedOption == '4'\"\n              v-model=\"excludeOption\"\n              value=\"2\"\n            >\n              Node has another parent in the same context\n            </md-radio>\n            <md-radio\n              :disabled=\"selectedOption == '1' || selectedOption == '4'\"\n              v-model=\"excludeOption\"\n              value=\"3\"\n            >\n              Node has another parent in another context\n            </md-radio>\n          </div>\n        </div>\n\n        <div v-if=\"selectedMode === 'Delete relations'\">\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"1\">\n            Relation with parent in this context\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"2\">\n            Children relations\n          </md-radio>\n          <!-- <md-radio\n            disabled\n            class=\"md-primary\"\n            v-model=\"selectedOption\"\n            value=\"3\"\n          >\n            Parent relations (NYI)\n          </md-radio> -->\n          <md-button v-if=\"selectedOption == '2'\" @click=\"searchRelations()\">\n            Search relations\n          </md-button>\n          <div v-if=\"searchedRelations.length > 0\">\n            <md-checkbox\n              v-for=\"item in searchedRelations\"\n              :key=\"item\"\n              v-model=\"selectedRelations\"\n              :value=\"item\"\n              >{{ item }}</md-checkbox\n            >\n          </div>\n        </div>\n      </div>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n          >Cancel</md-button\n        >\n        <md-button class=\"md-primary\" @click=\"closeDialog(true)\"\n          >Accept</md-button\n        >\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SpinalNode,\n} from 'spinal-env-viewer-graph-service';\nexport default {\n  name: 'dialogComponent',\n  props: ['onFinised'],\n  data() {\n    return {\n      showDialog: true,\n      selectedNode: null,\n      selectedContext: null,\n      selectedMode: 'Delete nodes',\n      selectedOption: '1',\n      excludeOption: null,\n      relationNames: null,\n      modeOptions: ['Delete nodes', 'Delete relations'],\n      searchedRelations: [],\n      selectedRelations: [],\n      strictFilter: false,\n      strFilter: '',\n      name: '',\n    };\n  },\n  methods: {\n    opened(option) {\n      console.log('opened : ', option);\n      this.name = option.selectedNode.name.get();\n      this.selectedNode = option.selectedNode;\n      this.selectedContext = option.context;\n    },\n    removed(option) {\n      if (option.closeResult === true) {\n        console.log('closed : ', option);\n        this.routage();\n        this.showDialog = false;\n      }\n      this.showDialog = false;\n    },\n\n    deleteNode() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      node.removeFromGraph();\n    },\n\n    deleteChildren() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      node.getChildren().then((children) => {\n        this.applyFilter(children).then((filteredChildren) => {\n          const strFilteredChildren = this.applyStrFilter(filteredChildren);\n          for (const child of strFilteredChildren) {\n            child.removeFromGraph();\n          }\n        });\n      });\n    },\n\n    deleteNodeAndChildren() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      node.getChildren().then((children) => {\n        this.applyFilter(children).then((filteredChildren) => {\n          const strFilteredChildren = this.applyStrFilter(filteredChildren);\n          for (const child of strFilteredChildren) {\n            child.removeFromGraph();\n          }\n        });\n      });\n      node.removeFromGraph();\n    },\n\n    deleteAllNodesOfSameTypeInSameContext() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      SpinalGraphService.findInContextByType(\n        this.selectedContext.id.get(),\n        this.selectedContext.id.get(),\n        node.getType().get()\n      ).then((models) => {\n        const nodes = models.map((m) =>\n          SpinalGraphService.getRealNode(m.id.get())\n        );\n        console.log('nodes :', nodes);\n        const strFilteredNodes = this.applyStrFilter(nodes);\n        for (const filteredNode of strFilteredNodes) {\n          //let realNode = SpinalGraphService.getRealNode(node.id.get());\n          filteredNode.removeFromGraph();\n        }\n      });\n    },\n\n    deleteRelationWithParentInContext() {\n      console.log('deleteRelationWithParentInContext');\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      // look for parents\n      node.getParents().then((parents) => {\n        console.log('parents : ', parents);\n        for (const p of parents) {\n          // if parent is in the same context\n          if (p.getContextIds().includes(this.selectedContext.id.get())) {\n            console.log('Parent of same context found : ', p.info.name.get());\n            // look for relations\n            for (const r of p.getRelationNames()) {\n              // Verify if the node is a child of the parent\n              SpinalGraphService.isChild(\n                p.info.id.get(),\n                this.selectedNode.id.get(),\n                r\n              ).then((res) => {\n                if (res) {\n                  console.log('Attempting to remove');\n                  this.removeChild(p, node, r);\n                } else console.log('Child not found');\n              });\n            }\n          }\n        }\n      });\n    },\n\n    async deleteChildrenRelations() {\n      //here we should call removeChild , then if no childs are left we should remove the relation\n      console.log('deleteChildrenRelations');\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      for (const r of this.selectedRelations) {\n        const children = await node.getChildren(r);\n        for (const child of children) {\n          this.removeChild(node, child, r);\n        }\n        try {\n          console.log('Trying to remove relation : ', r);\n          node.removeRelation(r, SPINAL_RELATION_PTR_LST_TYPE);\n        } catch (e) {\n          try {\n            node.removeRelation(r, SPINAL_RELATION_LST_PTR_TYPE);\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }\n    },\n\n    searchRelations() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      let relations = node.getRelationNames();\n      this.searchedRelations = relations;\n      this.selectedRelations = relations;\n      console.log(relations);\n    },\n\n    async applyFilter(nodes) {\n      const res = [];\n      switch (this.excludeOption) {\n        case '1': // filter out the nodes that have a parent that is not the selected node\n          for (const node of nodes) {\n            const parents = await node.getParents();\n            let filteredOut = false;\n            for (const p of parents) {\n              if (p.info.id.get() != this.selectedNode.id.get()) {\n                filteredOut = true;\n                break;\n              }\n            }\n            if (!filteredOut) res.push(node);\n          }\n          return res;\n\n        case '2': // filter out the nodes that have another parent in the same context\n          for (const node of nodes) {\n            const parents = await node.getParents();\n            let filteredOut = false;\n            for (const p of parents) {\n              if (p.info.id.get() != this.selectedNode.id.get()) {\n                const parentContextIds = p.getContextIds(); // get the context ids of the parent\n                if (parentContextIds.includes(this.selectedContext.id.get())) {\n                  filteredOut = true;\n                  break;\n                }\n              }\n            }\n            if (!filteredOut) res.push(node);\n          }\n          return res;\n        case '3': //filter out the nodes that have another parent in another context\n          for (const node of nodes) {\n            const parents = await node.getParents();\n            let filteredOut = false;\n            for (const p of parents) {\n              if (p.info.id.get() != this.selectedNode.id.get()) {\n                const parentContextIds = p.getContextIds(); // get the context ids of the parent\n                if (!parentContextIds.includes(this.selectedContext.id.get())) {\n                  filteredOut = true;\n                  break;\n                }\n              }\n            }\n            if (!filteredOut) res.push(node);\n          }\n          return res;\n        default:\n          return nodes;\n      }\n    },\n\n    applyStrFilter(nodes) {\n      if (this.strFilter == '') return nodes;\n      return nodes.filter((node) => {\n        if (this.strictFilter) {\n          return node.info.name.get() == this.strFilter;\n        } else return node.info.name.get().includes(this.strFilter);\n      });\n    },\n\n    routage() {\n      if (this.selectedMode === 'Delete nodes') {\n        if (this.selectedOption === '1') {\n          this.deleteNode();\n        } else if (this.selectedOption === '2') {\n          this.deleteChildren();\n        } else if (this.selectedOption === '3') {\n          this.deleteNodeAndChildren();\n        } else if (this.selectedOption === '4') {\n          this.deleteAllNodesOfSameTypeInSameContext();\n        }\n      } else if (this.selectedMode === 'Delete relations') {\n        if (this.selectedOption === '1') {\n          this.deleteRelationWithParentInContext();\n        } else if (this.selectedOption === '2') {\n          this.deleteChildrenRelations();\n        } else if (this.selectedOption === '3') {\n          this.deleteParentRelations();\n        }\n      }\n    },\n\n    removeChild(p, node, r) {\n      try {\n        p.removeChild(node, r, SPINAL_RELATION_PTR_LST_TYPE);\n      } catch (e) {\n        try {\n          p.removeChild(node, r, SPINAL_RELATION_LST_PTR_TYPE);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.DeleteMainBody {\n  margin: 20px;\n}\n\n.md-radio {\n  display: flex;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Rename {{ name }}</md-dialog-title>\n      <md-dialog-content>\n        <md-field>\n          <md-input v-model=\"inputValue\"></md-input>\n        </md-field>\n      </md-dialog-content>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Cancel</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\">Accepte</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nexport default {\n  name: \"dialogComponent\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      selectedNode: null,\n      name: \"\",\n      inputValue: \"\"\n    };\n  },\n  methods: {\n    opened(option) {\n      this.name = option.selectedNode.name.get();\n      this.inputValue = this.name;\n      console.log(\"opened rename\");\n      this.selectedNode = option.selectedNode;\n    },\n    removed(option) {\n      if (option.closeResult === true) {\n        let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n\n        node.info.name.set(this.inputValue);\n        this.showDialog = false;\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    }\n  }\n};\n</script>","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Research element</md-dialog-title>\n      <md-dialog-content>\n        <md-field>\n          <md-input v-model=\"inputValue\"></md-input>\n        </md-field>\n      </md-dialog-content>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Cancel</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\">Accepte</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\nexport default {\n  name: \"dialogComponent\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      selectedNode: null,\n      inputValue: \"\"\n    };\n  },\n  methods: {\n    opened(option) {\n      this.selectedNode = option.selectedNode;\n      this.viewer = window.spinal.ForgeViewer.viewer;\n    },\n    removed(option) {\n      if (option.closeResult === true) {\n        let realNode = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n        let self = this;\n\n        realNode.find([\"hasGeographicSite\", \"hasGeographicBuilding\", \"hasGeographicFloor\", \"hasGeographicZone\", \"hasGeographicRoom\", \"hasBIMObject\"],\n          function(node) { if (node.info.type.get() === \"BIMObject\") return true; }).then(lst => {\n            self.viewer.clearSelection();\n\n            for (var i = 0; i < lst.length; i++) {\n              if (lst[i].info.name.get() === self.inputValue )\n                self.viewer.select([ lst[i].info.dbid.get() ]);\n            }\n        });\n\n        self.showDialog = false;\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    }\n  }\n};\n</script>","<template>\n  <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n    <md-dialog-title>Edit Color</md-dialog-title>\n\n    <md-dialog-content class=\"colorDialogContainer\">\n      <chrome-picker v-model=\"color\" />\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Cancel</md-button\n      >\n      <md-button class=\"md-primary\" @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { Chrome } from \"vue-color\";\n\nexport default {\n  name: \"editColordialogComponent\",\n  props: [\"onFinised\"],\n  components: {\n    \"chrome-picker\": Chrome,\n  },\n  data() {\n    return {\n      showDialog: true,\n      color: \"#000000\",\n      selectedNode: null,\n    };\n    \n  },\n  methods: {\n    opened(option) {\n      if (option.selectedNode.color) {\n        this.color = option.selectedNode.color.get();\n      }\n      this.selectedNode = SpinalGraphService.getRealNode(\n        option.selectedNode.id.get()\n      );\n    },\n    removed(option) {\n      if (option.closeResult === true) {\n        const color =\n          typeof this.color === \"string\" ? this.color : this.color.hex;\n        if (this.selectedNode.info.color) {\n          this.selectedNode.info.color.set(color);\n        } else {\n          this.selectedNode.info.add_attr({ color: color });\n        }\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.colorDialogContainer {\n}\n</style>","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n\tSpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\nconst {\n\tspinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nclass SpinalContextDelete extends SpinalContextApp {\n\tconstructor() {\n\t\tsuper(\"Delete button\", \"delete\", {\n\t\t\ticon: \"delete\",\n\t\t\ticon_type: \"in\",\n      backgroundColor: \"#FF0000\",\n      fontColor: \"#FFFFFF\"\n\t\t});\n\t}\n\n\tisShown() {\n        return (Promise.resolve(true));\n\t}\n\n\taction(option) {\n    spinalPanelManagerService.openPanel(\"standardButtonDelete\", option);\n\t}\n}\n\nexport { SpinalContextDelete };\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\n\nconst {\n  spinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\n\nclass SpinalContextRename extends SpinalContextApp {\n  constructor() {\n    super(\"Rename button\", \"rename\", {\n      icon: \"text_format\",\n      icon_type: \"in\",\n      backgroundColor: \"#FF0000\",\n      fontColor: \"#FFFFFF\"\n    });\n  }\n\n  isShown(option) {\n    // const type = option.selectedNode.type.get();\n    // if (type === \"SpinalService\" || type === \"scene\" || type ===\n    //   \"SpinalContext\" || type === \"BimFile\")\n    //   return (Promise.resolve(-1))\n    return (Promise.resolve(true));\n  }\n\n  action(option) {\n    spinalPanelManagerService.openPanel(\"standardButtonRename\", option);\n  }\n}\n\nexport {\n  SpinalContextRename\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\n\nimport {\n  utilities,\n  SELECTrelationList,\n  isShownParam\n} from \"./utilities\";\n\nclass SpinalContextSelectBIMObject extends SpinalContextApp {\n  constructor() {\n    super(\"select BIMObject button\", \"select BIMObject button\", {\n      icon: \"devices\",\n      icon_type: \"in\"\n    });\n  }\n\n  isShown(option) {\n    const type = option.selectedNode.type.get();\n    if (isShownParam.indexOf(type) > -1) { return (Promise.resolve(true)); }\n    return (Promise.resolve(-1));\n  }\n\n  action(option) {\n    let realNode = SpinalGraphService.getRealNode(option.selectedNode.id\n      .get());\n    this.viewer = window.spinal.ForgeViewer.viewer;\n    let self = this;\n    realNode.find(SELECTrelationList,\n      function (node) {\n        if (node.info.type.get() === \"BIMObject\") {\n          return true;\n        }\n      }).then(lst => {\n      self.viewer.clearSelection();\n      utilities.sortBIMObjectByModel(lst).then(lstByModel => {\n        for (let i = 0; i < lstByModel.length; i++) {\n          const element = lstByModel[i];\n          for (let j = 0; j < element.model.modelScene.length; j++) {\n            const scene = element.model.modelScene[j];\n            // console.log(\"hello select\", element.dbid, scene.model);\n            scene.model.selector.setSelection(element.dbid, scene.model, \"selectOnly\");\n          }\n        }\n      });\n    });\n  }\n}\n\nexport {\n  SpinalContextSelectBIMObject\n};\n","/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n// import {\n//   // ROOMS_CATEGORY_RELATION,\n//   // ROOMS_TO_ELEMENT_RELATION,\n//   // ROOMS_GROUP_RELATION,\n//   // EQUIPMENTS_CATEGORY_RELATION,\n//   // EQUIPMENTS_TO_ELEMENT_RELATION,\n//   // EQUIPMENTS_GROUP_RELATION,\n//   // ROOMS_GROUP_CONTEXT,\n//   // ROOMS_GROUP,\n//   // ROOMS_CATEGORY,\n//   // EQUIPMENTS_GROUP_CONTEXT,\n//   // EQUIPMENTS_CATEGORY,\n//   // EQUIPMENTS_GROUP\n\n//   groupService\n\n// } from 'spinal-env-viewer-room-manager/services/service';\n\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\nimport {\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n  REFERENCE_RELATION,\n} from \"spinal-env-viewer-context-geographic-service/build/constants\";\n\nimport { SpinalBmsEndpoint } from \"spinal-model-bmsnetwork\";\n\nimport { CONSTANTS } from \"spinal-env-viewer-plugin-network-tree-service\";\n\n\nconst SELECTrelationList = [\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n  REFERENCE_RELATION,\n  `${REFERENCE_RELATION}.ROOM`,\n  \"hasBIMObject\", // for old system\n  // groupService.constants.CONTEXT_TO_CATEGORY_RELATION,\n  // groupService.constants.CATEGORY_TO_GROUP_RELATION,\n  // groupService.constants.GROUP_TO_ROOMS_RELATION,\n  // groupService.constants.GROUP_TO_EQUIPMENTS_RELATION,\n  // groupService.constants.GROUP_TO_ENDPOINT_RELATION,\n  groupManagerService.constants.CONTEXT_TO_CATEGORY_RELATION,\n  groupManagerService.constants.CATEGORY_TO_GROUP_RELATION,\n  ...Object.values(groupManagerService.constants.OLD_RELATIONS_TYPES),\n  `groupHas${ROOM_TYPE}`,\n  `groupHas${EQUIPMENT_TYPE}`,\n  `groupHas${SITE_TYPE}`,\n  `groupHas${BUILDING_TYPE}`,\n  `groupHas${FLOOR_TYPE}`,\n  `groupHas${ZONE_TYPE}`,\n  `groupHas${SpinalBmsEndpoint.nodeTypeName}`,\n  // CONSTANTS.NETWORK_RELATION,\n  // CONSTANTS.NETWORK_BIMOJECT_RELATION\n];\n\nconst isShownParam = [\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n  // ...groupService.constants.CONTEXTS_TYPES,\n  // ...groupService.constants.GROUPS_TYPES,\n  // groupService.constants.CATEGORY_TYPE\n  ...Object.values(groupManagerService.constants.OLD_CONTEXTS_TYPES),\n  ...Object.values(groupManagerService.constants.OLD_GROUPS_TYPES),\n  groupManagerService.constants.CATEGORY_TYPE,\n  `${ROOM_TYPE}Group`,\n  `${EQUIPMENT_TYPE}Group`,\n  `${SITE_TYPE}Group`,\n  `${BUILDING_TYPE}Group`,\n  `${FLOOR_TYPE}Group`,\n  `${ZONE_TYPE}Group`,\n  `${ROOM_TYPE}GroupContext`,\n  `${EQUIPMENT_TYPE}GroupContext`,\n  `${SITE_TYPE}GroupContext`,\n  `${BUILDING_TYPE}GroupContext`,\n  `${FLOOR_TYPE}GroupContext`,\n  `${ZONE_TYPE}GroupContext`,\n  // CONSTANTS.CONTEXT_TYPE,\n  // CONSTANTS.NETWORK_TYPE,\n];\n\nconst utilities = {\n  async sortBIMObjectByModel(arrayOfBIMObject) {\n    let arrayModel = [];\n    for (const key in spinal.BimObjectService.mappingBimFileIdModelId) {\n      if (spinal.BimObjectService.mappingBimFileIdModelId.hasOwnProperty(key)) {\n        const element = spinal.BimObjectService.mappingBimFileIdModelId[key];\n        let obj = {\n          dbid: [],\n          model: element,\n        };\n        arrayModel.push(obj);\n      }\n    }\n    for (let i = 0; i < arrayOfBIMObject.length; i++) {\n      SpinalGraphService._addNode(arrayOfBIMObject[i]);\n      let bim = SpinalGraphService.getNode(arrayOfBIMObject[i].info.id.get());\n      try {\n        let spinalModel =\n          window.spinal.BimObjectService.mappingBimFileIdModelId[\n            bim.bimFileId.get()\n          ];\n        if (spinalModel) {\n          for (let j = 0; j < arrayModel.length; j++) {\n            const element = arrayModel[j];\n            if (element.model.modelId === spinalModel.modelId) {\n              element.dbid.push(bim.dbid.get());\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"skip node because bimFileId is not defined\", error);\n      }\n    }\n    return arrayModel;\n  },\n};\n\nmodule.exports = {\n  SELECTrelationList,\n  isShownParam,\n  utilities,\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService\n} from 'spinal-env-viewer-graph-service';\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\nimport {\n  SELECTrelationList,\n  utilities,\n  isShownParam\n} from \"./utilities\";\n\n\nclass SpinalContextFitToViewer extends SpinalContextApp {\n  constructor() {\n    super(\"fit button\", \"fit to viewer button\", {\n      icon: \"zoom_in\",\n      icon_type: \"in\"\n    });\n  }\n\n  isShown(option) {\n    const type = option.selectedNode.type.get();\n    if (isShownParam.indexOf(type) > -1)\n      return (Promise.resolve(true));\n    return (Promise.resolve(-1))\n  }\n\n  action(option) {\n    this.viewer = window.spinal.ForgeViewer.viewer\n    let self = this;\n    let realNode = SpinalGraphService.getRealNode(option.selectedNode.id\n      .get());\n    this.viewer = window.spinal.ForgeViewer.viewer\n\n    realNode.find(SELECTrelationList,\n      function(node) {\n        if (node.info.type.get() === \"BIMObject\") return true;\n      }).then(lst => {\n      utilities.sortBIMObjectByModel(lst).then(lstByModel => {\n        let arrayToFit = []\n        for (let i = 0; i < lstByModel.length; i++) {\n          const element = lstByModel[i];\n          let obj = {\n            model: element.model.modelScene[0].model,\n            selection: element.dbid\n          }\n          arrayToFit.push(obj);\n          obj.model.selector.setSelection(element.dbid, obj\n            .model,\n            \"selectOnly\")\n        }\n        self.viewer.fitToView(arrayToFit);\n      })\n    });\n  }\n}\n\n\nexport {\n  SpinalContextFitToViewer\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService\n} from 'spinal-env-viewer-graph-service';\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\n\nimport {\n  utilities,\n  SELECTrelationList,\n  isShownParam\n} from \"./utilities\";\n\nclass SpinalContextIsolation extends SpinalContextApp {\n  constructor() {\n    super(\"isolation button\", \"zoom button\", {\n      icon: \"settings_overscan\",\n      icon_type: \"in\"\n    });\n  }\n\n  isShown(option) {\n    const type = option.selectedNode.type.get();\n    if (isShownParam.indexOf(type) > -1)\n      return (Promise.resolve(true));\n    return (Promise.resolve(-1))\n  }\n\n  action(option) {\n    this.viewer = window.spinal.ForgeViewer.viewer\n    let self = this;\n    let boolSameNode = false\n    let modelResetIsolate = []\n    let aggregateIsolation = []\n    let realNode = SpinalGraphService.getRealNode(option.selectedNode.id\n      .get());\n    if (this.lastNode == undefined) {\n      this.lastNode = realNode\n    } else {\n      aggregateIsolation = this.viewer.getAggregateIsolation()\n      if (this.lastNode.info.id.get() == realNode.info.id.get() &&\n        aggregateIsolation.length) {\n        boolSameNode = true\n      } else {\n        this.lastNode = realNode\n      }\n    }\n    if (boolSameNode) {\n      for (let i = 0; i < aggregateIsolation.length; i++) {\n        const element = aggregateIsolation[i];\n        self.viewer.isolate(0, element.model)\n      }\n    } else {\n      this.viewer = window.spinal.ForgeViewer.viewer\n      realNode.find(SELECTrelationList,\n        function (node) {\n          if (node.info.type.get() === \"BIMObject\") return true;\n        }).then(lst => {\n          utilities.sortBIMObjectByModel(lst).then(lstByModel => {\n            for (let i = 0; i < lstByModel.length; i++) {\n              const element = lstByModel[i];\n              for (let j = 0; j < element.model.modelScene\n                .length; j++) {\n                const scene = element.model.modelScene[j];\n                if (element.dbid.length != 0) {\n                  self.viewer.isolate(element.dbid, scene.model)\n                } else {\n                  let rootId = scene.model.getRootId()\n                  scene.model.getObjectTree((tree) => {\n                    let dbidRoot = tree.nodeAccess.dbIdToIndex[\n                      rootId]\n                    self.viewer.isolate([dbidRoot], scene.model)\n                  })\n                }\n              }\n            }\n          })\n        });\n    }\n  }\n}\n\nexport {\n  SpinalContextIsolation\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService\n} from 'spinal-env-viewer-graph-service';\n\nconst {\n  SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\n\nimport {\n  utilities,\n  SELECTrelationList,\n  isShownParam\n} from \"spinal-env-viewer-plugin-standard_button/js/utilities\";\n\nimport { REFERENCE_RELATION } from \"spinal-env-viewer-context-geographic-service/build/constants\";\n\nclass SpinalContextIsolationReference extends SpinalContextApp {\n  constructor() {\n    super(\"Isolate only Reference Objects button\", \"zoom button\", {\n      icon: \"settings_overscan\",\n      icon_type: \"in\"\n    });\n  }\n\n  isShown(option) {\n    const type = option.selectedNode.type.get();\n    if (type == \"geographicFloor\") return (Promise.resolve(true));\n    return (Promise.resolve(-1))\n  }\n\n  action(option) {\n    this.viewer = window.spinal.ForgeViewer.viewer\n    let self = this;\n    let boolSameNode = false\n    let modelResetIsolate = []\n    let aggregateIsolation = []\n    let realNode = SpinalGraphService.getRealNode(option.selectedNode.id\n      .get());\n    if (this.lastNode == undefined) {\n      this.lastNode = realNode\n    } else {\n      aggregateIsolation = this.viewer.getAggregateIsolation()\n      if (this.lastNode.info.id.get() == realNode.info.id.get() &&\n        aggregateIsolation.length) {\n        boolSameNode = true\n      } else {\n        this.lastNode = realNode\n      }\n    }\n    if (boolSameNode) {\n      for (let i = 0; i < aggregateIsolation.length; i++) {\n        const element = aggregateIsolation[i];\n        self.viewer.isolate(0, element.model)\n      }\n    } else {\n      this.viewer = window.spinal.ForgeViewer.viewer\n      realNode.find(REFERENCE_RELATION,\n        function (node) {\n          if (node.info.type.get() === \"BIMObject\") return true;\n        }).then(lst => {\n          utilities.sortBIMObjectByModel(lst).then(lstByModel => {\n            for (let i = 0; i < lstByModel.length; i++) {\n              const element = lstByModel[i];\n              for (let j = 0; j < element.model.modelScene\n                .length; j++) {\n                const scene = element.model.modelScene[j];\n                if (element.dbid.length != 0) {\n                  self.viewer.isolate(element.dbid, scene.model)\n                } else {\n                  let rootId = scene.model.getRootId()\n                  scene.model.getObjectTree((tree) => {\n                    let dbidRoot = tree.nodeAccess.dbIdToIndex[\n                      rootId]\n                    self.viewer.isolate([dbidRoot], scene.model)\n                  })\n                }\n              }\n            }\n          })\n        });\n    }\n  }\n}\n\nexport {\n  SpinalContextIsolationReference\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n    SpinalContextApp\n} = require(\"spinal-env-viewer-context-menu-service\");\nconst {\n    spinalPanelManagerService\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nclass SpinalEditColor extends SpinalContextApp {\n    constructor() {\n        super(\"Edit color\", \"Edit color\", {\n            icon: \"color_lens\",\n            icon_type: \"in\",\n            backgroundColor: \"#FF0000\",\n            fontColor: \"#FFFFFF\"\n        });\n    }\n\n    isShown() {\n        return (Promise.resolve(true));\n    }\n\n    action(option) {\n        spinalPanelManagerService.openPanel(\"editColordialogComponent\", option);\n    }\n}\n\nexport { SpinalEditColor };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bimService_1 = require(\"./bimObjects/bimService\");\nexports.bimObjectManagerService = bimService_1.default;\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BimObjectManagerService {\n    constructor() { }\n    getAllBimObjectsProperties(model) {\n        return this.getBimObjectProperties([\n            {\n                model: model,\n                selection: this.getLeafDbIds(model).selection\n            }\n        ]);\n    }\n    getBimObjectProperties(argBimObjects) {\n        // let properties = [];\n        let bimOjects = Array.isArray(argBimObjects)\n            ? argBimObjects\n            : [argBimObjects];\n        let promises = bimOjects.map(el => {\n            return this._getProperties(el.model, el.selection);\n        });\n        return Promise.all(promises).then(res => {\n            return res;\n        });\n    }\n    getLeafDbIds(model, rootId) {\n        const tree = model.getInstanceTree();\n        const dbIds = [];\n        if (typeof rootId === \"undefined\") {\n            rootId = [tree.nodeAccess.rootId];\n        }\n        else {\n            rootId = Array.isArray(rootId) ? rootId : [rootId];\n        }\n        rootId.forEach(el => {\n            const queue = [el];\n            let hasChildren;\n            while (queue.length) {\n                let id = queue.pop();\n                hasChildren = false;\n                tree.enumNodeChildren(id, childId => {\n                    hasChildren = true;\n                    queue.push(childId);\n                });\n                if (!hasChildren) {\n                    dbIds.push(id);\n                }\n            }\n        });\n        return { model: model, selection: dbIds };\n    }\n    getBimObjectsByPropertiesName(model, properties) {\n        return this.getAllBimObjectsProperties(model).then(res => {\n            let result = [];\n            for (let i = 0; i < res.length; i++) {\n                const element = res[i];\n                for (let j = 0; j < element.properties.length; j++) {\n                    const property = element.properties[j];\n                    if (typeof this._getLabel(property, properties) !== \"undefined\") {\n                        result.push(property);\n                    }\n                    // }\n                }\n                return result;\n            }\n        });\n    }\n    getBimObjectsValidated(referential, regEx) {\n        return this.getBimObjectProperties(referential).then(res => {\n            return res.map(element => {\n                return {\n                    model: element.model,\n                    properties: element.properties.filter(el => {\n                        return this._isValid(el, regEx);\n                    })\n                };\n            });\n        });\n    }\n    getBimObjectsByName(model, bimObjectName, labelName) {\n        return new Promise(resolve => {\n            model.search(bimObjectName.trim(), (res) => __awaiter(this, void 0, void 0, function* () {\n                let properties = yield this.getBimObjectProperties([\n                    { model: model, selection: res }\n                ]);\n                resolve(properties);\n            }), () => {\n                resolve([]);\n            }, labelName);\n        });\n    }\n    ////////////////////////////////////////////////////////////////////////\n    //                             PRIVATES                               //\n    ////////////////////////////////////////////////////////////////////////\n    _getProperties(model, selection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let properties = selection.map(el => {\n                return new Promise(resolve => {\n                    model.getProperties(el, res => {\n                        // properties.push(res);\n                        resolve(res);\n                    }, err => {\n                        resolve(undefined);\n                    });\n                });\n            });\n            return {\n                model: model,\n                properties: yield Promise.all(properties)\n            };\n        });\n    }\n    _getAllDbIds(model) {\n        var instanceTree = model.getData().instanceTree;\n        var allDbIdsStr = Object.keys(instanceTree.nodeAccess.dbIdToIndex);\n        return allDbIdsStr.map(function (id) {\n            return parseInt(id);\n        });\n    }\n    _getLabel(bim, properties) {\n        for (let i = 0; i < properties.length; i++) {\n            const propertieValue = properties[i].value;\n            const propertyName = properties[i].name;\n            const found = bim.properties.find(el => {\n                return typeof propertieValue === \"undefined\" ||\n                    propertieValue.length === 0\n                    ? el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase()\n                    : el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase() &&\n                        propertieValue == el.displayValue;\n            });\n            if (typeof found === \"undefined\") {\n                return undefined;\n            }\n        }\n        return true;\n    }\n    _isValid(el, regEx) {\n        for (let i = 0; i < regEx.length; i++) {\n            let nameRegex = regEx[i].nameRegex;\n            let valueRegex = regEx[i].valueRegex;\n            let found = el.properties.find(res => {\n                if (typeof valueRegex === \"undefined\") {\n                    return nameRegex.test(res.displayName);\n                }\n                return (nameRegex.test(res.displayName) && valueRegex.test(res.displayValue));\n            });\n            if (typeof found === \"undefined\") {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.default = new BimObjectManagerService();\n//# sourceMappingURL=bimService.js.map",null,"\"use strict\";"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-standard_button.79d2a047.js.map"}