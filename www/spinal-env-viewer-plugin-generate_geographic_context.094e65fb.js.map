{"mappings":"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M,OAAO;IACb,MAAM,QAAQ;QAAC;KAAO;IACtB,MAAM,QAAQ,EAAE;IAEhB,MAAO,MAAM,OAAQ;QACnB,IAAI,KAAK,MAAM;QAEf,KAAK,iBAAiB,IAAI,CAAA;YACxB,MAAM,KAAK;YACX,MAAM,KAAK;QACb;IACF;IACA,OAAO;AACT;AAEA;;;;CAIC,GACD,SAAS,aAAa,MAAM;IAC1B,MAAM,OAAO;IACb,MAAM,QAAQ;QAAC;KAAO;IACtB,MAAM,QAAQ,EAAE;IAChB,IAAI;IAEJ,MAAO,MAAM,OAAQ;QACnB,IAAI,KAAK,MAAM;QAEf,cAAc;QAEd,KAAK,iBAAiB,IAAI,CAAA;YACxB,cAAc;YACd,MAAM,KAAK;QACb;QAEA,IAAI,CAAC,aACH,MAAM,KAAK;IAEf;IAEA,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS;IACP,MAAM,OAAO;IACb,MAAM,SAAS,KAAK;IAEpB,OAAO,YAAY;AACrB;AAEA;;;CAGC,GACD,SAAS;IACP,MAAM,OAAO;IACb,MAAM,SAAS,KAAK;IAEpB,OAAO,aAAa;AACtB;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,G,e;Y,a;Y,I;gB,U,I;Y;Y,O;gB,O,I,O;gB,U,S,G;oB,I,K,I,Q,e;gB;gB,Y;Y;Q,G;Y,I,G;S;Q,I,G;Q,G,O;Y,Y;gB;oB,M;oB,S;oB,O,C,I,O;oB,Y;gB;a;Q,G;Y,G,a;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;gB,I,G;gB,G,c;oB,O;wB,Y;oB;gB,G;oB,I,G;iB;a,E;Y,I,G;Y,G,a;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;gB,I,G;gB,G,c;oB,O;wB,Y;oB;gB,G;oB,I,G;iB;a,E;Y,I,G;Y,G,a;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;gB,I,G;gB,G,c;oB,O;wB,Y;oB;gB,G;oB,I,G;iB;a,E;Y,I,G;Y,G,K;gB,I,G,I,G,I,O,Y,U;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADxHA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,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,M;Q;I,G;Q,G,W;Y,Y;gB;oB,M;oB,S;oB,O,I,e,I,M,S;oB,Y;gB;a;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,Y;Y,O;gB,M;Y;Q,G;Y,G,S;gB,I,G;a;Y,I,G;Y,G,a;gB,O;oB,O,I,M;oB,U,S,G;wB,I,K,I,O,Q;oB;oB,Y;gB;Y,G,I,G,I,gB,S,I,E,S;gB,O,G,a;oB,K;oB,O;wB,S;oB;gB,G;oB,I,G,e,I,G,Q;iB;Y,I;S,E;Q,I,G;Q,G,W;Y,Y;gB;oB,M;oB,S;oB,O,I,e,I,M,U;oB,Y;gB;a;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,Y;Y,O;gB,M;Y;Q,G;Y,I,M,W,I,U,sB,G,S;gB,I,G;a,I,A,I,M,W,I,U,qB,G,S;gB,I,G;a,I,I;Y,I,G;Y,G,Y;gB,O;oB,O,I,M;oB,U,S,G;wB,I,K,I,O,S;oB;oB,Y;gB;Y;S,E;Q,I,G;Q,G,a;Y,a;Y,I;gB,S,S,M;oB,O,I,M;gB;Y;Q,G;Y,G,W;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,I,G,I,Q,S,K,E,K;Y,O,G,S;gB,K;gB,O;oB,S;oB,mB,I,kB;oB,gB,I;gB;gB,I;oB,gB;wB,O,I,M;oB;oB,e,S,M;wB,O,I,Y;oB;gB;Y;Q;Q,I,G;Q,G,a;Y,a;Y,I;gB,S,S,M;oB,O,I,S,I,U;gB;Y;Q,G;Y,I,G;S;Q,I,G;Q,G,a;Y,a;Y,I;gB,S,S,M;oB,O,I,S,I,U;gB;Y;Q,G;Y,I,G;S;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AFJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AGJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAyB;IACvC,OAAO,kBAAkB,QAAQ,oBAAyB;IAC1D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAsB;IACpD,QAAQ,oBAAuB,QAAQ;IACvC,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kB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I,K,G,C,O,S,I,I,C,C,K,A,C,K,G,M,E,I,G,K,K;Y,K,K,G;Y,I,K,K,W,G;Q;I,E,O,K;Q,K;Q,K;I,S;Q,I;Y,I,C,M,E,C,S,I,M,E,C,S;Q,S;Y,I,I,M;Q;I;I,O;A;A,S,gB,G;I,I,M,Q,M,O;A;A,S,mB,G,E,O,E,M,E,K,E,M,E,G,E,G;I,I;Q,I,O,G,C,I,C;Q,I,Q,K;I,E,O,O;Q,O;Q;I;I,I,K,M,Q;S,Q,Q,O,K,O;A;A,S,kB,E;I,O;Q,I,O,I,E,O;Q,O,I,Q,S,O,E,M;Y,I,M,G,M,M;Y,S,M,K;gB,mB,K,S,Q,O,Q,Q;Y;Y,S,O,G;gB,mB,K,S,Q,O,Q,S;Y;Y,M;Q;I;A;A,S,oB,E;I,O;Q,O,I,gB,G,M,I,E;I;A;A,S,gB,G;I,I,O;I,S,K,G,E,G;Q,O,I,Q,S,O,E,M;Y,I,U;gB,K;gB,K;gB,S;gB,Q;gB,M;Y;Y,I,M,O,K,O;iB;gB,Q,O;gB,O,K;Y;Q;I;I,S,O,G,E,G;Q,I;Y,I,S,G,C,I,C;Y,I,Q,O;Y,I,e,iB;Y,Q,Q,e,M,U,O,K,S,G;gB,I,c;oB,O,Q;oB;gB;gB,O,O,O,W,U;Y,G,S,G;gB,O,S;Y;Q,E,O,K;Y,O,S;Q;I;I,S,O,I,E,K;Q,O;Y,K;gB,M,Q;oB,O;oB,M;gB;gB;Y,K;gB,M,O;gB;Y;gB,M,Q;oB,O;oB,M;gB;gB;Q;Q,Q,M;Q,I,O,O,M,K,M;a,O;I;I,I,C,U;I,I,O,I,W,Y,I,C,S;A;A,I,O,W,c,O,e,gB,S,C,O,c,G;I,O,I;A;A,gB,U,O,S,G;I,O,I,C,Q,Q;A;A,gB,U,Q,S,G;I,O,I,C,Q,S;A;A,gB,U,S,S,G;I,O,I,C,Q,U;A;A,S,qB,K;I,O,I,Y;A;A,S,Y,K;I,I,C,U;A;A,S,e,Q;I,I;I,I,O,W,a;Q,I,O,e;Y,S,Q,C,O,c;Y,I,U,M,O,O,K;Q;Q,I,O,U;Y,S,Q,C,O,S;Y,I,U,M,O,O,K;Q;I;I,M,I,U;A;A,S,wB,K,E,S;I,I,O,C,G,U;I,S,K,G,E,K;Q,U;Q,Q,I,Q,S,O;Y,Q,K,C,I,C;Q;Q,O;Y,M;Y,O,U;Q;I;I,I,O,W,c,O,U,I,C,O,S,G;Q,O,I;I;I,K,O,S,K;Q,I,S;Y,U;Y,O;Q;Q,O,K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EAAE;QAE3C,IAAI,CAAC,KAAK,IAAI,QACZ,KAAK,IAAI,OAAO,IAAI;QAGtB,OAAO,KAAK,IAAI;QAChB,KAAK,KAAK;IACZ;IAEA,OAAO,SAAS;AAClB;kBAEe;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,O;Y,M;Q;I,G;Q,C,I,W,G,O;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;Y,I,G;Y,I,c,G,O;gB,G,a;oB,I;wB,S,I;oB;gB,G;oB,I,G,e,I,G,I,M,U;iB;gB,G;gB,I,G;gB,G,a;oB,I;wB,S,I;oB;gB,G;oB,I,G,e,I,G,I,Q,U;iB;gB,G;gB,I,G;gB,G,e;oB,O;wB,O,I;wB,U,S,G;4B,I,Y;wB;wB,Y;oB;gB,G;oB,I,G;iB;gB,I,G;gB,I,M,W,I,G,a;oB,a;oB,I;wB,S,I;oB;gB,G;oB,I,G;iB,I,I;a,E,K,I;S,E,K,G,mB;Y,O;gB,M;gB,Y,I,Y;Y;Q;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AJ7Ff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;AKLA;;;;;;;;;;;;;;;;;;;;;;CAsBC;;AAkFD,sDACE;AADF,gDAEE;AAFF,gDAGE;AAnFF;AAIA,MAAM,iBAAiB,OAAO,OAAO;IACnC,aAAa;IACb,aAAa,OAAO,OAAO,EAAE;IAC7B,QAAQ,OAAO,OAAO,EAAE;AAC1B;AAEA;;;CAGC,GACD,SAAS;IACP,OAAO,KAAK,MAAM,KAAK,UAAU;AACnC;AAEA;;;;CAIC,GACD,SAAS,WAAW,GAAG;IACrB,MAAM,MAAM,EAAE;IAEd,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,IAC9B,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;IAGlB,OAAO;AACT;AAEA;;;;CAIC,GACD,eAAe,WAAW,OAAO;IAC/B,MAAM,SAAS,CAAC;IAChB,IAAI;IACJ,IAAI;IAEJ,IAAI;QACF,cAAc,MAAM,CAAA,GAAA,+CAAiB,EAAE,YAAY,QAAQ,GAAG,OAAO;QACrE,cAAc,YAAY;IAC5B,EAAE,OAAO,GAAG;QACV,QAAQ,MAAM;QACd,OAAO;IACT;IAEA,IAAI,OAAO,gBAAgB,aACzB,OAAO;IAGT,OAAO,cAAc,YAAY,YAAY;IAC7C,OAAO,cAAc,WAAW,YAAY;IAC5C,OAAO,SAAS,WAAW,YAAY;IAEvC,OAAO;AACT;AAEA;;;;CAIC,GACD,eAAe,WAAW,OAAO,EAAE,MAAM;IACvC,IAAI;IAEJ,IAAI;QACF,cAAc,MAAM,CAAA,GAAA,+CAAiB,EAAE,YAAY,QAAQ,GAAG,OAAO;IACvE,EAAE,OAAO,GAAG;QACV,QAAQ,MAAM;QACd;IACF;IAEA,YAAY,SAAS,UAAU;AACjC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,A,I,Y,Q,I,W,O,G,O;Q,G,M;Y,O;gB,M;Y;Q,G;Y,I,G,W,I,G,I,C,Q,K,S;S;Q,I,G;Q,G,e;Y,O;gB,M;gB,e;gB,kB,I;Y;Y,I;gB,uB,S,M;oB,I,a;gB;gB,yB,S,M;oB,I,a;gB;Y;Q,G;Y,G,W;gB,O;oB,M;oB,Y;gB;Y,G;gB,G,yB;oB,O;wB,U,I;wB,U,I;oB;oB,I;wB,iB,I;oB;gB;a,E;Y,I,G;Y,G,W;gB,O;oB,M;oB,Y;oB,Y,I;gB;Y,G;gB,G,U;oB,O;wB,U,I,O;wB,iB,I,gB;oB;oB,I;wB,gB,I;oB;gB;a,E;Y,I,G;Y,G,W;gB,O;oB,M;oB,Y;gB;Y,G;gB,G,U;oB,O;wB,U,I;wB,W,I;wB,U,I;oB;oB,I;wB,e,S,C;4B,O,I,c;wB;oB;gB;a,E;S,E;K,E,K,I;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AXrGA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AYLA;AAGA;AAGA;;AAEA,MAAM,8BAA8B,CAAA,GAAA,mDAAe;IACjD,aAAc;QACZ,KAAK,CAAC,iCAAiC,kCAAkC;YACvE,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,WAAW;QACb;IACF;IAEA,QAAQ,MAAM,EAAE;QACd,MAAM,UAAU,OAAO;QAEvB,IACE,QAAQ,KAAK,UAAU,CAAA,GAAA,uDAAuB,EAAE,UAAU,cAE1D,OAAO,QAAQ,QAAQ;QAGzB,OAAO,QAAQ,QAAQ;IACzB;IAEA,OAAO,MAAM,EAAE;QACb,CAAA,GAAA,6DAAwB,EAAE,UAAU,+BAA+B;IACrE;AACF;kBAEe;;;A;AEnCf;;;;;;;;;;;;;;;;;;;;;;CAsBG,G,O,e,S,c;I,O;A;A,Q,0B,Q,yB,Q,yB,Q,0B,Q,6B,Q,yB,Q,qB,Q,iB,Q,oB,Q,oB,Q,6B,Q,qB,Q,uB,Q,gB,Q,gB,Q,iB,Q,oB,Q,gB,Q,yB,Q,iB,Q,mB,Q,Y,Q,Y,Q,a,Q,gB,Q,Y,Q,e,K;AAEH,MAAM,eAAe;AAmFnB,QAAA,eAAA;AAlFF,MAAM,YAAY;AAmFhB,QAAA,YAAA;AAlFF,MAAM,gBAAgB;AAmFpB,QAAA,gBAAA;AAlFF,MAAM,aAAa;AAmFjB,QAAA,aAAA;AAlFF,MAAM,YAAY;AAmFhB,QAAA,YAAA;AAlFF,MAAM,YAAY;AAmFhB,QAAA,YAAA;AAlFF,MAAM,iBAAiB;AAoFrB,QAAA,iBAAA;AAnFF,MAAM,iBAAiB;AA+FrB,QAAA,iBAAA;AA7FF,MAAM,gBAAgB;AAmFpB,QAAA,gBAAA;AAlFF,MAAM,oBAAoB;AAmFxB,QAAA,oBAAA;AAlFF,MAAM,iBAAiB;AAmFrB,QAAA,iBAAA;AAlFF,MAAM,gBAAgB;AAmFpB,QAAA,gBAAA;AAlFF,MAAM,gBAAgB;AAmFpB,QAAA,gBAAA;AAlFF,MAAM,qBAAqB;AAoFzB,QAAA,qBAAA;AAnFF,MAAM,qBAAqB;AAwFzB,QAAA,qBAAA;AAvFF,MAAM,0BAA0B;AA6F9B,QAAA,0BAAA;AA3FF,MAAM,yBAAyB;AAsF7B,QAAA,yBAAA;AArFF,MAAM,6BAA6B;AAsFjC,QAAA,6BAAA;AArFF,MAAM,0BAA0B;AAsF9B,QAAA,0BAAA;AArFF,MAAM,yBAAyB;AAsF7B,QAAA,yBAAA;AArFF,MAAM,yBAAyB;AAsF7B,QAAA,yBAAA;AApFF,MAAM,mBAAmB,OAAO,OAAO;IACrC;IACA;IACA;IACA;IACA;CACD;AA2DC,QAAA,mBAAA;AAzDF,MAAM,yBAAyB,OAAO,OAAO;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAmDC,QAAA,yBAAA;AAjDF,MAAM,uBAAuB,OAAO,OAAO;IACzC;IACA;IACA;IACA;IACA;IACA;CACD;AAgDC,QAAA,uBAAA;AA9CF,MAAM,6BAA6B,OAAO,OAAO;IAC/C;IACA;IACA;IACA;IACA;IACA;CACD;AAyCC,QAAA,6BAAA;AAvCF,MAAM,oBAAoB,OAAO,OAC/B,IAAI,IAAI;IACN;QAAC;QAAW;KAAc;IAC1B;QAAC;QAAe;KAAkB;IAClC;QAAC;QAAY;KAAe;IAC5B;QAAC;QAAW;KAAc;IAC1B;QAAC;QAAW;KAAc;IAC1B;QAAC;QAAgB;KAAmB;CACrC;AAgCD,QAAA,oBAAA;AA7BF,MAAM,oBAAoB,OAAO,OAC/B,IAAI,IAAI;IACN;QAAC;QAAe;KAAU;IAC1B;QAAC;QAAmB;KAAc;IAClC;QAAC;QAAgB;KAAW;IAC5B;QAAC;QAAe;KAAU;IAC1B;QAAC;QAAe;KAAU;IAC1B;QAAC;QAAoB;KAAe;CACrC;AAsBD,QAAA,oBAAA","sources":["node_modules/spinal-env-viewer-plugin-generate_geographic_context/index.js","node_modules/spinal-env-viewer-context-menu-service/index.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextMenuService.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextApp.js","node_modules/spinal-env-viewer-context-menu-service/constants.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/extention.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/panel.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/referentialSelection.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js/utilitiesDbIds.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/layout.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js/constants.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/level.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/vue/launch.vue","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js/hasProperties.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js_build/generateGeographicContext.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js/generateGeographicContext.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js/createTmpTree.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/js/panelConfig.js","node_modules/spinal-env-viewer-plugin-generate_geographic_context/src/app.js","node_modules/spinal-env-viewer-context-geographic-service/build/constants.js","node_modules/spinal-env-viewer-context-geographic-service/src/constants.ts"],"sourcesContent":["/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  spinalContextMenuService\n} from \"spinal-env-viewer-context-menu-service\";\nimport {\n  SpinalForgeExtention\n} from \"spinal-env-viewer-panel-manager-service_spinalforgeextention\";\n\nimport extention from \"./src/extention\";\nimport GenerateGeoContextApp from \"./src/app\";\n\nSpinalForgeExtention.registerExtention(\"generate_geographic_context\", extention);\nspinalContextMenuService.registerApp(\"GraphManagerSideBar\", new GenerateGeoContextApp(), [3]);\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalContextMenuService = require(\"./SpinalContextMenuService\");\nconst SpinalContextApp = require(\"./SpinalContextApp\");\nconst Constant = require('./constants');\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalContextMenuService === \"undefined\")\n  G_root.spinal.spinalContextMenuService = new SpinalContextMenuService();\n\nmodule.exports = {\n  constants: Constant,\n  spinalContextMenuService: G_root.spinal.spinalContextMenuService,\n  SpinalContextApp,\n  install(Vue) {\n    Vue.prototype.$spinalContextMenuService =\n      G_root.spinal.spinalContextMenuService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport * as Q from 'q';\nvar debounce = require('lodash.debounce');\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} apps key = hookname, value array of apps\n * @class SpinalContextMenuService\n */\nclass SpinalContextMenuService {\n  /**\n   *Creates an instance of SpinalContextMenuService.\n   * @memberof SpinalContextMenuService\n   */\n  constructor() {\n    this.apps = {};\n    this.promiseByAppProfileId = {};\n    this.appRdy = Q.defer();\n    this.debouncedRdy = debounce(\n      () => {\n        this.appRdy.resolve();\n        this.debouncedRdy = () => {};\n      },\n      1000,\n      { leading: false, trailing: true }\n    );\n  }\n\n  // waitRdy() {\n  //   this.appRdy.promise;\n  // }\n\n  /**\n   * Return true if user has access to this appProfile\n   * @param appProfileId\n   * @return {PromiseLike<boolean > | Promise<boolean>}\n   */\n  async hasUserRight(appProfileId) {\n    this.debouncedRdy();\n    await window.spinal.spinalSystem.init();\n    const path =\n      '/etc/UserProfileDir/' + window.spinal.spinalSystem.getUser().username;\n    const userProfile = await window.spinal.spinalSystem.load(path);\n    let res = false;\n    if (userProfile) {\n      for (let i = 0; i < userProfile.appProfiles.length && !res; i++) {\n        res = ((1 << userProfile.appProfiles[i]) & appProfileId) !== 0;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * method to register the Application to a hook\n   *\n   * @param {string} hookname the place where is application button is located\n   * @param {SpinalContextApp} spinalContextApp the application\n   * @param {number} appProfileId id of the group that can use the application\n   * button\n   * @memberof SpinalContextMenuService\n   */\n  registerApp(hookname, spinalContextApp, appProfileId) {\n    this.debouncedRdy();\n    if (typeof appProfileId === 'undefined') {\n      console.warn(\n        'Deprecated: The usage of this function without the third' +\n          ' parameter appProfileId is deprecated your button is lock for admin' +\n          ' only until you set the third parameter'\n      );\n      appProfileId = 1;\n    }\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      appsInHooks = this.apps[hookname] = [];\n    }\n\n    if (!this.promiseByAppProfileId.hasOwnProperty(appProfileId)) {\n      this.promiseByAppProfileId[appProfileId] =\n        this.hasUserRight(appProfileId);\n    }\n\n    this.promiseByAppProfileId[appProfileId].then((hasAccess) => {\n      // push the app if not exist ans user has access to the button\n      if (hasAccess && appsInHooks.indexOf(spinalContextApp) === -1) {\n        appsInHooks.push(spinalContextApp);\n      }\n    });\n  }\n\n  /**\n   * method to get the applications registered to a hookname\n   *\n   * @param {String} hookname\n   * @param {object} option\n   * @memberof SpinalContextMenuService\n   * @returns {Promise} resolve : [spinalContextApp, ...]; reject: Error\n   */\n  async getApps(hookname, option) {\n    await this.appRdy.promise;\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      return Promise.resolve([]);\n    }\n    let promises = appsInHooks.map(async function (e, idx) {\n      try {\n        const res = await e.isShown(option);\n        return res === -1 ? -1 : e;\n      } catch (error) {\n        console.error(error);\n        return -1;\n      }\n    });\n    try {\n      const appRes = await Promise.all(promises);\n      return appRes.filter((itm) => itm !== -1);\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = SpinalContextMenuService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Interface like class to define a Contextual Application button\n * @see https://material.io/tools/icons/?style=baseline for material icons\n *\n * @class SpinalContextApp\n * @property {string} label=notset short name to be shown in the application\n * @property {string} description description of what the Application button do\n * @property {object} buttonCfg Object configuration of the Application button\n * @property {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n * @property {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n * @property {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n * @property {string} buttonCfg.fontColor=#FFFFFF font color of the button\n * @property {objet} [badgeCfg] Object configuration of the Application button badge\n * @property {string} badgeCfg.label string shown in a badge; if empty it's not shown\n * @property {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n * @property {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n */\nclass SpinalContextApp {\n  /**\n   * Creates an instance of SpinalContextApp.\n   * @param {string} label=notset short name to be shown in the application\n   * @param {string} description description of what the Application button do\n   * @param {object} buttonCfg Object configuration of the Application button\n   * @param {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n   * @param {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n   * @param {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n   * @param {string} buttonCfg.fontColor=#FFFFFF font color of the button\n   * @param {objet} [badgeCfg] Object configuration of the Application button badge\n   * @param {string} badgeCfg.label string shown in a badge; if empty it's not shown\n   * @param {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n   * @param {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n   * @memberof SpinalContextApp\n   */\n  constructor(label, description, buttonCfg, badgeCfg = {}) {\n    this.label = label || \"notset\";\n    this.description = description || \"\";\n    this.buttonCfg = {\n      icon: buttonCfg.icon || \"tab\",\n      icon_type: buttonCfg.icon_type || \"in\",\n      backgroundColor: colorHash(buttonCfg.backgroundColor || \"#0000FF\"),\n      fontColor: colorHash(buttonCfg.fontColor || \"#FFFFFF\")\n    };\n\n    this.badgeCfg = {\n      label: badgeCfg.label || \"\",\n      backgroundColor: colorHash(badgeCfg.backgroundColor || \"#FF0000\"),\n      fontColor: colorHash(badgeCfg.fontColor || \"#FFFFFF\")\n    };\n  }\n\n  /**\n   * Method called by `SpinalContextMenuService.getApps`\n   * to filter the Application button to show in the context hook\n   *\n   * @param {object} option\n   * @memberof SpinalContextApp\n   * @returns {Promise} Resolve: not shown if === -1;\n   */\n  isShown(option) {}\n\n  /**\n   * Method to call on click of the application button\n   *\n   * @param {object} option {}\n   * @memberof SpinalContextApp\n   */\n  action(option) {}\n}\n\nmodule.exports = SpinalContextApp;\n\nfunction colorHash(color) {\n  if (color[0] === \"#\") return color;\n  return \"#\" + color;\n}\n","\n\nmodule.exports = {\n  ADMINISTRATEUR: 'ADMINISTRATEUR',\n  MAINTENEUR: 'MAINTENEUR',\n  INTEGRATEUR: 'INTEGRATEUR',\n  ASSET_MANAGEUR: 'ASSET MANAGER',\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","import Vue from \"vue\";\n\nimport {\n  SpinalForgeExtention\n} from \"spinal-env-viewer-panel-manager-service_spinalforgeextention\";\n\nimport panel from \"./vue/panel.vue\";\n\nconst extention = SpinalForgeExtention.createExtention({\n  name: \"generate_geographic_context\",\n  vueMountComponent: Vue.extend(panel),\n  panel: {\n    title: \"Generate a Geographic Context\",\n    classname: \"gen-geo-context\",\n    closeBehaviour: \"hide\"\n  },\n  style: {\n    left: \"405px\",\n    width: \"420px\",\n    height: \"80vh\"\n  },\n  onLoad() {},\n  onUnLoad() {}\n});\n\nexport default extention;\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <!-- Only starts creating the component after everything is loaded -->\n  <div v-if=\"context !== null && config !== null\">\n    <h3 id=\"context-name\">\n      {{this.context.name.get()}}\n    </h3>\n\n    <md-steppers id=\"steppers\"\n                 md-vertical\n                 :md-active-step.sync=\"activeStep\">\n      <md-step id=\"ref\"\n               md-label=\"Choose referential\">\n        <referential-selection :update=\"update\"\n                               :config=\"config\"\n                               @configChanged=\"configChanged\" />\n      </md-step>\n\n      <md-step id=\"layout\"\n               md-label=\"Create layout\"\n               :md-error=\"layoutError\">\n        <layout :levels=\"config.levels\"\n                :show-warnings=\"layoutError !== null\"\n                @levelChanged=\"configChanged\" />\n      </md-step>\n\n      <md-step id=\"launch\"\n               md-label=\"Launch the generation\">\n        <launch :update=\"update\"\n                :context=\"context\"\n                :config=\"config\"\n                @layoutError=\"e => layoutError = e\" />\n      </md-step>\n    </md-steppers>\n  </div>\n</template>\n\n<script>\nimport referentialSelection from \"./referentialSelection.vue\";\nimport layout from \"./layout.vue\";\nimport launch from \"./launch.vue\";\n\nimport { loadConfig, saveConfig } from \"../js/panelConfig\";\n\nexport default {\n  name: \"dialogCreateGeographicContext\",\n  components: {\n    referentialSelection,\n    layout,\n    launch\n  },\n  data() {\n    return {\n      showDialog: true,\n      update: \"\",\n      context: null,\n      config: null,\n      activeStep: \"\",\n      layoutError: null\n    };\n  },\n  watch: {\n    layoutError(newValue, oldValue) {\n      if (oldValue === \"layout\") {\n        this.layoutError = null;\n      }\n    }\n  },\n  methods: {\n    async opened(option) {\n      // Using Strings (object, wrapper for strings) because otherwise the\n      // watchers won't trigger if the update is the same twice in a row\n      this.update = new String(\"opened\");\n      this.context = option.context;\n      this.config = await loadConfig(this.context);\n      this.activeStep = \"ref\";\n      this.layoutError = null;\n    },\n    removed() {},\n    closed() {\n      this.update = new String(\"closed\");\n    },\n    /**\n     * Called every time the config changes. Updates update and saves the current config.\n     */\n    async configChanged() {\n      this.update = new String(\"configChanged\");\n      await saveConfig(this.context, this.config);\n    }\n  }\n};\n</script>\n\n<style>\ndiv#steppers {\n  background-color: unset;\n}\n\n#steppers * {\n  box-sizing: border-box;\n}\n</style>\n\n<style scoped>\n#context-name {\n  text-align: center;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-checkbox v-model=\"config.useAllDbIds\"\n                 @change=\"changeMode\"\n                 class=\"md-primary\">\n      Use whole digital twin\n    </md-checkbox>\n\n    <div v-show=\"!config.useAllDbIds\">\n      <md-button @click=\"addSelection\">\n        <md-icon>add</md-icon>\n        <md-tooltip md-delay=\"300\">Add selection to referential</md-tooltip>\n      </md-button>\n\n      <md-button @click=\"clearReferential\">\n        <md-icon>clear</md-icon>\n        <md-tooltip md-delay=\"300\">Clear referential</md-tooltip>\n      </md-button>\n\n      <md-button @click=\"showReferential\">\n        <md-icon>visibility</md-icon>\n        <md-tooltip md-delay=\"300\">Show referential</md-tooltip>\n      </md-button>\n\n      <p>{{config.referential.length}} objects selected</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAllLeafDbIds, getLeafDbIds } from \"../js/utilitiesDbIds\";\nexport default {\n  name: \"referentialSelection\",\n  props: {\n    update: {\n      type: String,\n      required: true\n    },\n    config: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.viewer = window.spinal.ForgeViewer.viewer;\n    this.allDbIds = getAllLeafDbIds();\n    return {};\n  },\n  watch: {\n    update: {\n      immediate: true,\n      handler() {\n        if (this.update != \"opened\") {\n          return;\n        }\n\n        if (this.config.useAllDbIds) {\n          this.config.referential = this.allDbIds.slice();\n        }\n      }\n    }\n  },\n  methods: {\n    /**\n     * Updates the referential when the mode changes.\n     */\n    changeMode(newValue) {\n      if (!newValue) {\n        this.clearReferential();\n      } else {\n        this.config.referential = this.allDbIds.slice();\n      }\n\n      this.$emit(\"configChanged\");\n    },\n    /**\n     * Adds the current selection to the referential. Discards all non-leaf dbIds.\n     */\n    addSelection() {\n      const aggregateSelection = this.viewer.getAggregateSelection();\n      if (aggregateSelection.length <= 0)\n        return;\n      const selection = aggregateSelection[0].selection;\n      for (let select of selection) {\n        let leafs = getLeafDbIds(select);\n\n        this.config.referential.push(...leafs);\n      }\n\n      this.config.referential = [...new Set(this.config.referential)];\n      this.$emit(\"configChanged\");\n    },\n\n    /**\n     * Empties the referential.\n     */\n    clearReferential() {\n      this.config.referential = [];\n      this.$emit(\"configChanged\");\n    },\n    /**\n     * Selects all the dbIds in the referential.\n     */\n    showReferential() {\n      const model = window.spinal.assimblyManagerService._getCurrentModel();\n      this.viewer.select(this.config.referential, model);\n    }\n  }\n};\n</script>\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Returns the instance tree of the forge viewer model.\n * @returns {Object} The instance tree of the forge viewer model\n */\nfunction getInstanceTree() {\n  const model = window.spinal.ForgeViewer.viewer.model;\n  const tree = model.getData().instanceTree;\n\n  return tree;\n}\n\n/**\n * Takes a dbId and returns its children.\n * @param {number} rootId Parent dbId\n * @returns {Array<number>} Children dbIds\n */\nfunction getDbIds(rootId) {\n  const tree = getInstanceTree();\n  const dbIds = [];\n\n  tree.enumNodeChildren(rootId, dbId => {\n    dbIds.push(dbId);\n  });\n\n  return dbIds;\n}\n\n/**\n * Recursively gets all children dbIds of the root dbId.\n * @param {number} rootId Root dbId\n * @returns {Array<number>} The children dbIds of the root dbId\n */\nfunction getDbIdsRec(rootId) {\n  const tree = getInstanceTree();\n  const queue = [rootId];\n  const dbIds = [];\n\n  while (queue.length) {\n    let id = queue.shift();\n\n    tree.enumNodeChildren(id, childId => {\n      queue.push(childId);\n      dbIds.push(childId);\n    });\n  }\n  return dbIds;\n}\n\n/**\n * Returns all leaf dbIds children of the root dbId.\n * @param {number} rootId Root dbId\n * @returns {Array<number>} The children dbIds of the root dbId that are leafs in the tree\n */\nfunction getLeafDbIds(rootId) {\n  const tree = getInstanceTree();\n  const queue = [rootId];\n  const dbIds = [];\n  let hasChildren;\n\n  while (queue.length) {\n    let id = queue.shift();\n\n    hasChildren = false;\n\n    tree.enumNodeChildren(id, childId => {\n      hasChildren = true;\n      queue.push(childId);\n    });\n\n    if (!hasChildren) {\n      dbIds.push(id);\n    }\n  }\n\n  return dbIds;\n}\n\n/**\n * Gets all the dbIds in the instance tree of the viewer.\n * @returns {Array<number>} All of the dbIds in the tree\n */\nfunction getAllDbIds() {\n  const tree = getInstanceTree();\n  const rootId = tree.getRootId();\n\n  return getDbIdsRec(rootId);\n}\n\n/**\n * Gets all the leaf dbIds in the instance tree of the viewer.\n * @returns {Array<number>} All of the leaf dbIds in the tree\n */\nfunction getAllLeafDbIds() {\n  const tree = getInstanceTree();\n  const rootId = tree.getRootId();\n\n  return getLeafDbIds(rootId);\n}\n\nexport {\n  getInstanceTree,\n  getDbIds,\n  getDbIdsRec,\n  getLeafDbIds,\n  getAllDbIds,\n  getAllLeafDbIds\n};\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <level v-for=\"(level, index) in levels\"\n           :key=\"index\"\n           :level=\"level\"\n           :available-types=\"getAvailableTypes(index)\"\n           :show-warning=\"showWarnings\"\n           @levelChanged=\"() => $emit('levelChanged')\"\n           @removeLevel=\"removeLevel(index)\" />\n\n    <md-button @click=\"addLevel(constants.LEVEL_OPTION_BY_KEY)\"\n               class=\"md-raised button-add-level\">\n      NORMAL\n    </md-button>\n\n    <md-button @click=\"addLevel(constants.LEVEL_OPTION_FIXED)\"\n               class=\"md-raised button-add-level\">\n      FIXED\n    </md-button>\n  </div>\n</template>\n\n<script>\nimport * as constants from \"../js/constants\";\n\nimport level from \"./level.vue\";\n\nexport default {\n  name: \"layout\",\n  props: {\n    levels: {\n      type: Array,\n      required: true\n    },\n    showWarnings: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    level\n  },\n  data() {\n    this.constants = constants;\n    return {};\n  },\n  methods: {\n    /**\n     * Adds an empty level with the given option to the layout.\n     * @param {string} option Option of the level\n     */\n    addLevel(option) {\n      this.levels.push({ type: \"\", param: \"\", option: option });\n      this.$emit(\"levelChanged\");\n    },\n    /**\n     * Removes a level from the layout.\n     * @param {number} index Index of the level in the layout\n     */\n    removeLevel(index) {\n      this.levels.splice(index, 1);\n      this.$emit(\"levelChanged\");\n    },\n    /**\n     * Determines the index of the lowest type a level can be.\n     * @param {number} index The index of the level\n     * @returns {number} The index of the minimum type\n     */\n    getMinTypeIndex(indexLevel) {\n      let i = indexLevel;\n\n      do {\n        i--;\n      } while (\n        i >= 0 &&\n        !constants.GEOGRAPHIC_TYPES.includes(this.levels[i].type)\n      );\n\n      if (i < 0) {\n        return 0;\n      } else {\n        const minType = this.levels[i].type;\n        const minTypeIndex = constants.GEOGRAPHIC_TYPES.indexOf(minType) + 1;\n\n        return minTypeIndex;\n      }\n    },\n    /**\n     * Determines the index of the highest type a level can be.\n     * @param {number} index The index of the level\n     * @returns {number} The index of the maximum type\n     */\n    getMaxTypeIndex(indexLevel) {\n      let i = indexLevel;\n\n      do {\n        i++;\n      } while (\n        i < this.levels.length &&\n        !constants.GEOGRAPHIC_TYPES.includes(this.levels[i].type)\n      );\n\n      if (i === this.levels.length) {\n        return constants.GEOGRAPHIC_TYPES.length;\n      } else {\n        const maxType = this.levels[i].type;\n        const maxTypeIndex = constants.GEOGRAPHIC_TYPES.indexOf(maxType);\n\n        return maxTypeIndex;\n      }\n    },\n    /**\n     * Determines all the types a level can be given its position in the layout.\n     * @param {number} index The index of the level\n     * @returns {Array<string>} An array of the available types for the level\n     */\n    getAvailableTypes(index) {\n      const minTypeIndex = this.getMinTypeIndex(index);\n      const maxTypeIndex = this.getMaxTypeIndex(index);\n      const available = [];\n\n      for (let i = minTypeIndex; i < maxTypeIndex; i++) {\n        available.push(constants.GEOGRAPHIC_TYPES[i]);\n      }\n\n      return available.concat(constants.ZONE_TYPE);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.button-add-level {\n  width: 45%;\n}\n</style>\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport ContextGeographicService from \"spinal-env-viewer-context-geographic-service\";\n\nconst geoConstants = ContextGeographicService.constants;\n\nconst {\n  EQUIPMENT_RELATION\n} = geoConstants;\n\n// Types that will be displayed\nconst SITE_TYPE = \"Site\";\nconst BUILDING_TYPE = \"Building\";\nconst FLOOR_TYPE = \"Floor\";\nconst ZONE_TYPE = \"Zone\";\nconst ROOM_TYPE = \"Room\";\n\nconst GEOGRAPHIC_TYPES = Object.freeze([\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ROOM_TYPE\n]);\n\nconst MAP_TYPES = Object.freeze(new Map([\n  [SITE_TYPE, geoConstants.SITE_TYPE],\n  [BUILDING_TYPE, geoConstants.BUILDING_TYPE],\n  [FLOOR_TYPE, geoConstants.FLOOR_TYPE],\n  [ZONE_TYPE, geoConstants.ZONE_TYPE],\n  [ROOM_TYPE, geoConstants.ROOM_TYPE]\n]));\n\nconst MAP_RELATIONS = Object.freeze(new Map([\n  [SITE_TYPE, geoConstants.SITE_RELATION],\n  [BUILDING_TYPE, geoConstants.BUILDING_RELATION],\n  [FLOOR_TYPE, geoConstants.FLOOR_RELATION],\n  [ZONE_TYPE, geoConstants.ZONE_RELATION],\n  [ROOM_TYPE, geoConstants.ROOM_RELATION]\n]));\n\nconst LEVEL_OPTION_BY_KEY = \"none\";\nconst LEVEL_OPTION_FIXED = \"fixed\";\n\nexport {\n  EQUIPMENT_RELATION,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  GEOGRAPHIC_TYPES,\n  MAP_TYPES,\n  MAP_RELATIONS,\n  LEVEL_OPTION_BY_KEY,\n  LEVEL_OPTION_FIXED\n};\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div id=\"div-level\">\n    <md-icon v-show=\"showWarning && level.type === ''\"\n             class=\"md-accent\">warning</md-icon>\n\n    <md-field id=\"level-field\">\n      <label>Level</label>\n\n      <md-select v-model=\"level.type\">\n        <md-option v-for=\"(type, indexType) in availableTypes\"\n                   :key=\"indexType\"\n                   :value=\"type\">\n          {{type}}\n        </md-option>\n      </md-select>\n    </md-field>\n\n    <md-icon v-show=\"showWarning && level.param === ''\"\n             class=\"md-accent\">warning</md-icon>\n\n    <md-field id=\"param-field\">\n      <label v-if=\"level.option === constants.LEVEL_OPTION_BY_KEY\">Key</label>\n\n      <label v-else-if=\"level.option === constants.LEVEL_OPTION_FIXED\">Fixed Value</label>\n\n      <md-input v-model=\"level.param\" />\n    </md-field>\n\n    <md-button class=\"md-icon-button\"\n               @click=\"$emit('removeLevel')\">\n      <md-icon>remove</md-icon>\n    </md-button>\n  </div>\n</template>\n\n<script>\nimport * as constants from \"../js/constants\";\n\nexport default {\n  name: \"level\",\n  props: {\n    level: {\n      type: Object,\n      required: true\n    },\n    availableTypes: {\n      type: Array,\n      required: true\n    },\n    showWarning: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data() {\n    this.constants = constants;\n    return {};\n  },\n  watch: {\n    level: {\n      deep: true,\n      handler() {\n        this.$emit(\"levelChanged\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#div-level {\n  display: flex;\n}\n\n#level-field,\n#param-field {\n  margin-right: 20px;\n}\n</style>\n","<template>\n  <div id=\"launch-step\">\n    <div v-if=\"!showLoad\">\n      <md-button class=\"md-raised md-primary\"\n                 @click=\"loadProps\">\n        VERIFY OBJECTS\n      </md-button>\n\n      <div v-if=\"propsLoaded\">\n        <md-button @click=\"selectValid\">\n          {{valid.length}} VALID OBJECTS\n        </md-button><br />\n\n        <md-button @click=\"selectInvalid\">\n          {{invalid.length}} INVALID OBJECTS\n        </md-button><br />\n\n        <md-checkbox v-model=\"defineRef\">\n          Define reference objects\n        </md-checkbox>\n\n        <md-button v-if=\"valid.length !== 0\"\n                   class=\"md-raised md-primary\"\n                   @click=\"generateContext\">\n          LAUNCH CONTEXT GENERATION\n        </md-button>\n      </div>\n    </div>\n\n    <md-progress-bar v-else\n                     id=\"progress-bar\"\n                     :md-value=\"progression.value\" />\n  </div>\n</template>\n\n<script>\nimport * as constants from \"../js/constants\";\nimport hasProperties from \"../js/hasProperties\";\nimport generateGeoContext from \"../js_build/generateGeographicContext\";\n\n\n\nexport default {\n  name: \"launch\",\n  props: {\n    update: {\n      type: String,\n      required: true\n    },\n    context: {\n      // Allows for null value\n      validator: value => typeof value === \"object\"\n    },\n    config: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.viewer = window.spinal.ForgeViewer.viewer;\n    return {\n      layout: null,\n      valid: [],\n      invalid: [],\n      propsLoaded: false,\n      defineRef: false,\n      showLoad: false,\n      progression: { value: 0 }\n    };\n  },\n  watch: {\n    update() {\n      if (this.update == \"opened\") {\n        this.propsLoaded = false;\n        this.defineRef = false;\n        this.showLoad = false;\n        this.progression = { value: 0 };\n      } else if (this.update == \"configChanged\") {\n        this.propsLoaded = false;\n      }\n    }\n  },\n  methods: {\n    /**\n     * @typedef {Object} Layout An object containing all the informations of the layout\n     * @property {Array<string>} types The types of the levels\n     * @property {Array<string>} keys The keys of the levels\n     * @property {Array<string>} relations The relation names associated to the types\n     *\n     * Creates the layout from raw input of the user in the layout step.\n     * @returns {Layout} The loaded layout\n     */\n    getLayout() {\n      let layout = { types: [], keys: [], relations: [] };\n\n      for (let level of this.config.levels) {\n        if (level.type === \"\" || level.param === \"\") {\n          this.$emit(\"layoutError\", \"Incomplete layout\");\n          return null;\n        }\n\n        layout.types.push(constants.MAP_TYPES.get(level.type));\n        layout.keys.push(level.param);\n        layout.relations.push(constants.MAP_RELATIONS.get(level.type));\n      }\n\n      layout.relations.push(constants.EQUIPMENT_RELATION);\n      return layout;\n    },\n\n    /**\n     * Loads the valid and invalid props from the referential and the layout.\n     */\n    async loadProps() {\n      console.log(\"load Props\")\n      this.propsLoaded = false;\n      this.layout = this.getLayout();\n\n      if (this.layout === null) {\n        this.propsLoaded = false;\n        return;\n      }\n\n      const keys = [];\n\n      for (let level of this.config.levels) {\n        if (level.option !== constants.LEVEL_OPTION_FIXED) {\n          keys.push(level.param);\n        }\n      }\n\n      const res = await hasProperties(this.config.referential, keys);\n\n      this.valid = res.valid;\n      this.invalid = res.invalid;\n      this.propsLoaded = true;\n    },\n\n    /**\n     * Selects the valid objects.\n     */\n    selectValid() {\n      const model = window.spinal.BimObjectService.currentModel;\n      const dbIds = [];\n\n      for (let prop of this.valid) {\n        dbIds.push(prop.dbId);\n      }\n\n      this.viewer.select(dbIds, model);\n    },\n    /**\n     * Selects the invalid objects.\n     */\n    selectInvalid() {\n      const model = window.spinal.BimObjectService.currentModel;\n\n      this.viewer.select(this.invalid, model);\n    },\n    /**\n     * Generates the geographic context from the loaded layout and objects.\n     */\n    async generateContext() {\n      this.showLoad = true;\n\n      try {\n        for (let [index, level] of this.config.levels.entries()) {\n          if (level.option !== constants.LEVEL_OPTION_FIXED) {\n            continue;\n          }\n\n          for (let prop of this.valid) {\n            prop.properties.splice(index, 0, { value: level.param });\n          }\n        }\n\n        await generateGeoContext(\n          this.context,\n          this.layout,\n          this.valid,\n          this.progression,\n          this.defineRef\n        );\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.showLoad = false;\n        this.progression.value = 0;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#launch-step {\n  text-align: center;\n}\n\n#progress-bar {\n  height: 20px;\n}\n</style>\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  serviceDocumentation\n} from \"spinal-env-viewer-plugin-documentation-service\";\n\n/**\n * Returns a promise that resolves when the properties from the dbId are loaded.\n * @param {Object} model Model of the viewer\n * @param {number} dbId DbId from which to load the properties\n * @returns {Promise<Object>} Promise containing the properties of the BIM object\n */\nfunction promiseGetPorperties(model, dbId) {\n  return new Promise(resolve => {\n    model.getProperties(dbId, resolve);\n  });\n}\n\n/**\n * Returns an array of all the properties of an array of dbIds.\n * @param {Array<number>} dbIds DbIds to load\n * @returns {Array<Object>} Array of loaded properties\n */\nfunction getProperties(dbIds) {\n  const model = window.spinal.ForgeViewer.viewer.model;\n  const props = [];\n\n  for (let dbId of dbIds) {\n    props.push(promiseGetPorperties(model, dbId));\n  }\n\n  return Promise.all(props);\n}\n\n/**\n * Takes the properties of a BIM object and the keys that it must have \n * and returns a simplified object or null if the object doesn't have it.\n * @param {Object} prop Properties of a BIM object\n * @param {number} prop.dbId DbId of the object\n * @param {string} prop.name Name of the object\n * @param {Array<Object>} prop.properties Properties of the object\n * @param {Array<string>} keys Keys that the object must have\n * @returns {Object | null} The simplified object or null if the object doesn't have it\n */\nfunction createSimplifiedProperty(prop, keys) {\n  const simpleProp = {};\n\n  simpleProp.properties = [];\n  for (let [index, key] of keys.entries()) {\n    for (let property of prop.properties) {\n      if (property.displayName === key) {\n        simpleProp.properties.push({\n          key: key,\n          value: property.displayValue.toString()\n        });\n        break;\n      }\n    }\n\n    if (typeof simpleProp.properties[index] === \"undefined\" ||\n      simpleProp.properties[index].value === \"\") {\n      return null;\n    }\n  }\n  simpleProp.dbId = prop.dbId;\n  simpleProp.name = prop.name;\n  return simpleProp;\n}\n\n/**\n * Adds documentation attributes to forge properties.\n * @param {Array<Object>} props Forge properties\n * @returns {Promise<>} An empty promise\n */\nasync function addBIMObjectProps(props) {\n  let BIMObjects = [];\n  const validProps = props.slice();\n\n  for (let prop of props) {\n    BIMObjects.push(\n      spinal.BimObjectService.getBIMObject(prop.dbId)\n    );\n  }\n\n  BIMObjects = await Promise.all(BIMObjects);\n\n  let i = 0;\n  while (i < BIMObjects.length) {\n    if (typeof BIMObjects[i] === \"undefined\") {\n      BIMObjects.splice(i, 1);\n      validProps.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  let attributes = [];\n\n  for (let i = 0; i < BIMObjects.length; i++) {\n    attributes.push(serviceDocumentation.getAllAttributes(BIMObjects[i]));\n  }\n\n  attributes = await Promise.all(attributes);\n\n  for (let i = 0; i < attributes.length; i++) {\n    let prop = validProps[i];\n\n    for (let attr of attributes[i]) {\n      let convert = {\n        displayName: attr.label.get(),\n        displayValue: attr.value.get()\n      };\n\n      prop.properties.push(convert);\n    }\n  }\n}\n\n/**\n * Takes an array of dbIds and some property keys and sort the dbIds\n * between those who have and those who don't have the keys.\n * @param {Array<number>} dbIds DbIds of the objects to test\n * @param {Array<string>} keys Keys that the objects must have to be valid\n * @returns {Object<valid, invalid>} An object containing the simplified properties of\n * the valid objects in its 'valid' property and the dbIds of the invalid objects in\n * its 'invalid' property.\n */\nasync function hasProperties(dbIds, keys) {\n  const props = await getProperties(dbIds);\n  const valid = [];\n  const invalid = [];\n\n  await addBIMObjectProps(props);\n\n  for (let i = 0; i < props.length; i++) {\n    let simplified = createSimplifiedProperty(props[i], keys);\n\n    if (simplified === null) {\n      invalid.push(dbIds[i]);\n    } else {\n      valid.push(simplified);\n    }\n  }\n\n  return {\n    valid,\n    invalid\n  };\n}\n\nexport default hasProperties;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _spinalEnvViewerGraphService = require(\"spinal-env-viewer-graph-service\");\n\nvar _createTmpTree = _interopRequireDefault(require(\"../js/createTmpTree\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }\n\nfunction _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(\"next\", arg); return; } settle(result.done ? \"return\" : \"normal\", arg); }, function (err) { resume(\"throw\", err); }); } catch (err) { settle(\"throw\", err); } } function settle(type, value) { switch (type) { case \"return\": front.resolve({ value: value, done: true }); break; case \"throw\": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== \"function\") { this.return = undefined; } }\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }\n\n_AsyncGenerator.prototype.next = function (arg) { return this._invoke(\"next\", arg); };\n\n_AsyncGenerator.prototype.throw = function (arg) { return this._invoke(\"throw\", arg); };\n\n_AsyncGenerator.prototype.return = function (arg) { return this._invoke(\"return\", arg); };\n\nfunction _awaitAsyncGenerator(value) { return new _AwaitValue(value); }\n\nfunction _AwaitValue(value) { this.wrapped = value; }\n\nfunction _asyncIterator(iterable) { var method; if (typeof Symbol !== \"undefined\") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === \"function\" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump(\"next\", value); }; if (typeof inner.throw === \"function\") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump(\"throw\", value); }; } if (typeof inner.return === \"function\") { iter.return = function (value) { return pump(\"return\", value); }; } return iter; }\n\nconst PROGRESS_BAR_SIZE_GET_PROPS = 10;\nconst PROGRESS_BAR_SIZE_CREATE_TREE = 10;\nconst PROGRESS_BAR_SIZE_CREATE_GRAPH = 80;\nconst MAX_NON_SYNCHRONIZED_NODES = 300;\n/**\n * Finds the children in the node with the given names.\n * @param {SpinalNode} parent Parent node from which to get the child\n * @param {Iterator<String>} nodeNames Iterator over the names of the nodes\n * @param {String} relationName Relation in which to search\n * @returns {Array<SpinalNode | null} An array of the children that were found and of undefined\n */\n\nfunction getChildrenByNames(_x7, _x8, _x9) {\n  return _getChildrenByNames.apply(this, arguments);\n}\n/**\n * Recursively builds the geographic context from the given layout and\n * the temporary tree made of maps (nodes) and arrays (leafs), yielding every it adds a node.\n * @param {SpinalContext} context Context to which the nodes must belong\n * @param {SpinalNode} parent Parent to which the children must be added\n * @param {Map<string> | Array<String>} children Children to add to the parent\n * @param {Object} layout Object containing the types of the nodes and names of the relations\n * @param {Number} depth Depth of the recursion; determines what node type and relation name to use\n * @yields {Promise<SpinalNode>} A promise of the last node that was added to the graph\n */\n\n\nfunction _getChildrenByNames() {\n  _getChildrenByNames = _asyncToGenerator(function* (parent, nodeNames, relationName) {\n    const children = yield _spinalEnvViewerGraphService.SpinalGraphService.getChildren(parent.id, relationName);\n    const found = [];\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = nodeNames[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        let name = _step4.value;\n        found.push(children.find(child => {\n          return child.name.get() === name;\n        }));\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    return found;\n  });\n  return _getChildrenByNames.apply(this, arguments);\n}\n\nfunction generateGeoContextRec(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _generateGeoContextRec.apply(this, arguments);\n}\n/**\n * Waits for the nodes to be in the FileSystem.\n * @param {Array<Promise>} promises Array of promises containing the nodes\n * @returns {Promise<nothing>} An empty promise\n */\n\n\nfunction _generateGeoContextRec() {\n  _generateGeoContextRec = _wrapAsyncGenerator(function* (context, parent, children, layout, depth, ref) {\n    console.log(children);\n\n    if (children instanceof Map) {\n      const foundChildren = yield _awaitAsyncGenerator(getChildrenByNames(parent, children.keys(), layout.relations[depth]));\n      const entries = children.entries();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = foundChildren[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          let child = _step2.value;\n\n          let _entries$next$value = _slicedToArray(entries.next().value, 2),\n              name = _entries$next$value[0],\n              value = _entries$next$value[1];\n\n          if (child === undefined) {\n            child = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n              name,\n              type: layout.types[depth]\n            });\n            yield _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parent.id.get(), child, context.id.get(), layout.relations[depth], _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n            child = _spinalEnvViewerGraphService.SpinalGraphService.getInfo(child);\n          }\n\n          yield* _asyncGeneratorDelegate(_asyncIterator(generateGeoContextRec(context, child, value, layout, depth + 1, ref)), _awaitAsyncGenerator);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    } else {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          let child = _step3.value;\n\n          // Will throw error if we try to add the same node twice\n          try {\n            if (ref) {\n              console.log(\"ref\", child, parent, context);\n              yield window.spinal.BimObjectService.addReferenceObject(parent.id.get(), child.dbId, child.name);\n            } else {\n              console.log(\"addMin\", child, parent, context);\n              yield window.spinal.BimObjectService.addBIMObject(context.id.get(), parent.id.get(), child.dbId, child.name);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  });\n  return _generateGeoContextRec.apply(this, arguments);\n}\n\nfunction waitForFileSystem(_x10) {\n  return _waitForFileSystem.apply(this, arguments);\n}\n/**\n * Generates a geographic context using the autodesk forge object tree.\n * @param {SpinalContext} context Context to fill\n * @param {Object} layout Object containing the types, keys and relation names necessary to generate the context\n * @param {Array<Object>} props Properties to use\n * @param {Object<value: Number>} progression Object containing the progression of the generation\n * @param {Boolean} ref True if the objects must be reference objects\n * @returns {SpinalContext} The geographic context\n */\n\n\nfunction _waitForFileSystem() {\n  _waitForFileSystem = _asyncToGenerator(function* (promises) {\n    let nodes = yield Promise.all(promises);\n    return new Promise(resolve => {\n      let inter = setInterval(() => {\n        nodes = nodes.filter(node => {\n          return FileSystem._objects[node._server_id] === undefined;\n        });\n\n        if (nodes.length === 0) {\n          clearInterval(inter);\n          resolve();\n        }\n      }, 500);\n    });\n  });\n  return _waitForFileSystem.apply(this, arguments);\n}\n\nfunction generateGeoContext(_x11, _x12, _x13, _x14, _x15) {\n  return _generateGeoContext.apply(this, arguments);\n}\n\nfunction _generateGeoContext() {\n  _generateGeoContext = _asyncToGenerator(function* (context, layout, props, progression, ref) {\n    progression.value = PROGRESS_BAR_SIZE_GET_PROPS;\n    const tmpTree = layout.types.length > 0 ? (0, _createTmpTree.default)(props) : props;\n    const incrProg = PROGRESS_BAR_SIZE_CREATE_GRAPH * MAX_NON_SYNCHRONIZED_NODES / props.length;\n    let promises = [];\n    progression.value += PROGRESS_BAR_SIZE_CREATE_TREE;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(generateGeoContextRec(context, context, tmpTree, layout, 0, ref)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        let promise = _value;\n        promises.push(promise);\n\n        if (promises.length === MAX_NON_SYNCHRONIZED_NODES) {\n          progression.value += incrProg; // eslint-disable-next-line no-await-in-loop\n\n          yield waitForFileSystem(promises);\n          promises = [];\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (promises.length !== 0) {\n      yield waitForFileSystem(promises);\n    }\n\n    progression.value = 100;\n  });\n  return _generateGeoContext.apply(this, arguments);\n}\n\nvar _default = generateGeoContext;\nexports.default = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SPINAL_RELATION_TYPE,\n  SpinalNode,\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\n\n\nimport createTmpTree from \"../js/createTmpTree\";\n\nconst PROGRESS_BAR_SIZE_GET_PROPS = 10;\nconst PROGRESS_BAR_SIZE_CREATE_TREE = 10;\nconst PROGRESS_BAR_SIZE_CREATE_GRAPH = 80;\nconst MAX_NON_SYNCHRONIZED_NODES = 300;\n\n/**\n * Finds the children in the node with the given names.\n * @param {SpinalNode} parent Parent node from which to get the child\n * @param {Iterator<String>} nodeNames Iterator over the names of the nodes\n * @param {String} relationName Relation in which to search\n * @returns {Array<SpinalNode | null} An array of the children that were found and of undefined\n */\nasync function getChildrenByNames(parent, nodeNames, relationName) {\n  const children = await SpinalGraphService.getChildren(parent.id, relationName);\n  const found = [];\n\n  for (let name of nodeNames) {\n    found.push(\n      children.find(\n        child => {\n          return child.name.get() === name\n        }\n      )\n    );\n  }\n\n  return found;\n}\n\n/**\n * Recursively builds the geographic context from the given layout and\n * the temporary tree made of maps (nodes) and arrays (leafs), yielding every it adds a node.\n * @param {SpinalContext} context Context to which the nodes must belong\n * @param {SpinalNode} parent Parent to which the children must be added\n * @param {Map<string> | Array<String>} children Children to add to the parent\n * @param {Object} layout Object containing the types of the nodes and names of the relations\n * @param {Number} depth Depth of the recursion; determines what node type and relation name to use\n * @yields {Promise<SpinalNode>} A promise of the last node that was added to the graph\n */\nasync function* generateGeoContextRec(context, parent, children, layout, depth, ref) {\n  console.log(children);\n  if (children instanceof Map) {\n    const foundChildren = await getChildrenByNames(parent, children.keys(), layout.relations[depth]);\n    const entries = children.entries();\n\n    for (let child of foundChildren) {\n      let [name, value] = entries.next().value;\n\n      if (child === undefined) {\n        child = SpinalGraphService.createNode({\n          name,\n          type: layout.types[depth]\n        });\n\n        yield SpinalGraphService.addChildInContext(\n          parent.id.get(),\n          child,\n          context.id.get(),\n          layout.relations[depth],\n          SPINAL_RELATION_TYPE\n        );\n\n        child = SpinalGraphService.getInfo(child);\n      }\n\n      yield* generateGeoContextRec(context, child, value, layout, depth + 1, ref);\n    }\n  } else {\n    for (let child of children) {\n      \n      // Will throw error if we try to add the same node twice\n      try {\n        if (ref) {\n          console.log( \"ref\", child, parent, context);\n          yield window.spinal.BimObjectService.addReferenceObject(parent.id.get(), child.dbId, child.name);\n        } else {\n          console.log( \"addMin\", child, parent, context);\n          yield window.spinal.BimObjectService.addBIMObject(context.id.get(), parent.id.get(), child.dbId, child.name);\n          \n        }\n      } catch (e) { console.error(e)}\n    }\n  }\n}\n\n/**\n * Waits for the nodes to be in the FileSystem.\n * @param {Array<Promise>} promises Array of promises containing the nodes\n * @returns {Promise<nothing>} An empty promise\n */\nasync function waitForFileSystem(promises) {\n  let nodes = await Promise.all(promises);\n\n  return new Promise(resolve => {\n    let inter = setInterval(() => {\n      nodes = nodes.filter(node => {\n        return FileSystem._objects[node._server_id] === undefined;\n      });\n\n      if (nodes.length === 0) {\n        clearInterval(inter);\n        resolve();\n      }\n    }, 500);\n  });\n}\n\n/**\n * Generates a geographic context using the autodesk forge object tree.\n * @param {SpinalContext} context Context to fill\n * @param {Object} layout Object containing the types, keys and relation names necessary to generate the context\n * @param {Array<Object>} props Properties to use\n * @param {Object<value: Number>} progression Object containing the progression of the generation\n * @param {Boolean} ref True if the objects must be reference objects\n * @returns {SpinalContext} The geographic context\n */\nasync function generateGeoContext(context, layout, props, progression, ref) {\n  progression.value = PROGRESS_BAR_SIZE_GET_PROPS;\n\n  const tmpTree = layout.types.length > 0 ? createTmpTree(props) : props;\n  const incrProg = PROGRESS_BAR_SIZE_CREATE_GRAPH * MAX_NON_SYNCHRONIZED_NODES / props.length;\n  let promises = [];\n\n  progression.value += PROGRESS_BAR_SIZE_CREATE_TREE;\n\n  for await (let promise of generateGeoContextRec(context, context, tmpTree, layout, 0, ref)) {\n    promises.push(promise);\n\n    if (promises.length === MAX_NON_SYNCHRONIZED_NODES) {\n      progression.value += incrProg;\n      // eslint-disable-next-line no-await-in-loop\n      await waitForFileSystem(promises);\n      promises = [];\n    }\n  }\n\n  if (promises.length !== 0) {\n    await waitForFileSystem(promises);\n  }\n\n  progression.value = 100;\n}\n\nexport default generateGeoContext;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Gets the values of the properties of the object.\n * @param {Object} prop Simplified infos of an object\n * @param {Array<Object>} prop.properties Array of the objects properties\n * @param {string} prop.properties[].value Value of the property\n * @returns {Array<string>} Array of the values of the properties of the object\n */\nfunction getCoordinates(prop) {\n  const coordinates = [];\n\n  for (let property of prop.properties) {\n    coordinates.push(property.value);\n  }\n\n  return coordinates;\n}\n\n/**\n * Sorts the nodes of the tree.\n * @param {Map} tree Temporary tree\n * @returns {Map} The sorted tree\n */\nfunction sortTree(tree) {\n  if (tree instanceof Array) {\n    return tree.sort();\n  }\n\n  for (let [key, value] of tree) {\n    tree[key] = sortTree(value);\n  }\n\n  return new Map([...tree.entries()].sort());\n}\n\n/**\n * Creates a temporary tree from properties.\n * @param {Array<Object>} props Properties to use to create the tree\n * @returns {Map} The root of the temporary tree\n */\nfunction createTmpTree(props) {\n  const root = new Map();\n\n  for (let prop of props) {\n    let coordinates = getCoordinates(prop);\n    let node = root;\n    let coord;\n\n    for (let i = 0; i < coordinates.length - 1; i++) {\n      coord = coordinates[i];\n\n      if (!node.has(coord)) {\n        node.set(coord, new Map());\n      }\n\n      node = node.get(coord);\n    }\n\n    coord = coordinates[coordinates.length - 1];\n\n    if (!node.has(coord)) {\n      node.set(coord, new Array());\n    }\n\n    node = node.get(coord);\n    node.push(prop);\n  }\n\n  return sortTree(root);\n}\n\nexport default createTmpTree;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\n\nconst DEFAULT_CONFIG = Object.freeze({\n  useAllDbIds: true,\n  referential: Object.freeze([]),\n  levels: Object.freeze([])\n});\n\n/**\n * Returns a clone of DEFAULT_CONFIG.\n * @returns {Object} The DEFAULT_CONFIG clone\n */\nfunction getDefaultConfig() {\n  return JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n}\n\n/**\n * Converts a list into an array.\n * @param {Lst} lst The list to convert\n * @returns {Array} The converted array\n */\nfunction lstToArray(lst) {\n  const arr = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    arr.push(lst[i].get());\n  }\n\n  return arr;\n}\n\n/**\n * Loads the config from the context. If there is none, returns the default config.\n * @param {SpinalContext} context Context from which to load the config\n * @returns {Object} The config\n */\nasync function loadConfig(context) {\n  const config = {};\n  let contextElem;\n  let modelConfig;\n\n  try {\n    contextElem = await SpinalGraphService.getRealNode(context.id.get()).getElement();\n    modelConfig = contextElem.config;\n  } catch (e) {\n    console.error(e);\n    return getDefaultConfig();\n  }\n\n  if (typeof modelConfig === \"undefined\") {\n    return getDefaultConfig();\n  }\n\n  config.useAllDbIds = modelConfig.useAllDbIds.get();\n  config.referential = lstToArray(modelConfig.referential);\n  config.levels = lstToArray(modelConfig.levels);\n\n  return config;\n}\n\n/**\n * Saves the config into the context.\n * @param {SpinalContext} context Context in which to save the config\n * @param {Object} config Config to save\n */\nasync function saveConfig(context, config) {\n  let contextElem;\n\n  try {\n    contextElem = await SpinalGraphService.getRealNode(context.id.get()).getElement();\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n\n  contextElem.mod_attr(\"config\", config);\n}\n\nexport {\n  getDefaultConfig,\n  loadConfig,\n  saveConfig\n};\n","import {\n  SpinalContextApp\n} from \"spinal-env-viewer-context-menu-service\";\nimport {\n  spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\nimport GeographicContextService from \"spinal-env-viewer-context-geographic-service\";\n\nclass GenerateGeoContextApp extends SpinalContextApp {\n  constructor() {\n    super(\"Generate a geographic context\", \"Generates a geographic context\", {\n      icon: \"build\",\n      icon_type: \"in\",\n      backgroundColor: \"rgba(0, 0, 0, 0)\",\n      fontColor: \"#FFFFFF\"\n    });\n  }\n\n  isShown(option) {\n    const context = option.selectedNode;\n\n    if (\n      context.type.get() === GeographicContextService.constants.CONTEXT_TYPE\n    ) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(-1);\n  }\n\n  action(option) {\n    spinalPanelManagerService.openPanel(\"generate_geographic_context\", option);\n  }\n}\n\nexport default GenerateGeoContextApp;\n","\"use strict\";\n/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.REFERENCE_ROOM_RELATION = exports.ROOM_REFERENCE_CONTEXT = exports.ZONE_REFERENCE_CONTEXT = exports.FLOOR_REFERENCE_CONTEXT = exports.BUILDING_REFERENCE_CONTEXT = exports.SITE_REFERENCE_CONTEXT = exports.REFERENCE_RELATION = exports.REFERENCE_TYPE = exports.MAP_RELATION_TYPE = exports.MAP_TYPE_RELATION = exports.GEOGRAPHIC_RELATIONS_ORDER = exports.EQUIPMENT_RELATION = exports.GEOGRAPHIC_RELATIONS = exports.ROOM_RELATION = exports.ZONE_RELATION = exports.FLOOR_RELATION = exports.BUILDING_RELATION = exports.SITE_RELATION = exports.GEOGRAPHIC_TYPES_ORDER = exports.EQUIPMENT_TYPE = exports.GEOGRAPHIC_TYPES = exports.ROOM_TYPE = exports.ZONE_TYPE = exports.FLOOR_TYPE = exports.BUILDING_TYPE = exports.SITE_TYPE = exports.CONTEXT_TYPE = void 0;\nconst CONTEXT_TYPE = 'geographicContext';\nexports.CONTEXT_TYPE = CONTEXT_TYPE;\nconst SITE_TYPE = 'geographicSite';\nexports.SITE_TYPE = SITE_TYPE;\nconst BUILDING_TYPE = 'geographicBuilding';\nexports.BUILDING_TYPE = BUILDING_TYPE;\nconst FLOOR_TYPE = 'geographicFloor';\nexports.FLOOR_TYPE = FLOOR_TYPE;\nconst ZONE_TYPE = 'geographicZone';\nexports.ZONE_TYPE = ZONE_TYPE;\nconst ROOM_TYPE = 'geographicRoom';\nexports.ROOM_TYPE = ROOM_TYPE;\nconst EQUIPMENT_TYPE = 'BIMObject';\nexports.EQUIPMENT_TYPE = EQUIPMENT_TYPE;\nconst REFERENCE_TYPE = 'geographicReference';\nexports.REFERENCE_TYPE = REFERENCE_TYPE;\nconst SITE_RELATION = 'hasGeographicSite';\nexports.SITE_RELATION = SITE_RELATION;\nconst BUILDING_RELATION = 'hasGeographicBuilding';\nexports.BUILDING_RELATION = BUILDING_RELATION;\nconst FLOOR_RELATION = 'hasGeographicFloor';\nexports.FLOOR_RELATION = FLOOR_RELATION;\nconst ZONE_RELATION = 'hasGeographicZone';\nexports.ZONE_RELATION = ZONE_RELATION;\nconst ROOM_RELATION = 'hasGeographicRoom';\nexports.ROOM_RELATION = ROOM_RELATION;\nconst EQUIPMENT_RELATION = 'hasBimObject';\nexports.EQUIPMENT_RELATION = EQUIPMENT_RELATION;\nconst REFERENCE_RELATION = 'hasReferenceObject';\nexports.REFERENCE_RELATION = REFERENCE_RELATION;\nconst REFERENCE_ROOM_RELATION = 'hasReferenceObject.ROOM';\nexports.REFERENCE_ROOM_RELATION = REFERENCE_ROOM_RELATION;\nconst SITE_REFERENCE_CONTEXT = '.SiteContext';\nexports.SITE_REFERENCE_CONTEXT = SITE_REFERENCE_CONTEXT;\nconst BUILDING_REFERENCE_CONTEXT = '.BuildingContext';\nexports.BUILDING_REFERENCE_CONTEXT = BUILDING_REFERENCE_CONTEXT;\nconst FLOOR_REFERENCE_CONTEXT = '.FloorContext';\nexports.FLOOR_REFERENCE_CONTEXT = FLOOR_REFERENCE_CONTEXT;\nconst ZONE_REFERENCE_CONTEXT = '.ZoneContext';\nexports.ZONE_REFERENCE_CONTEXT = ZONE_REFERENCE_CONTEXT;\nconst ROOM_REFERENCE_CONTEXT = '.RoomContext';\nexports.ROOM_REFERENCE_CONTEXT = ROOM_REFERENCE_CONTEXT;\nconst GEOGRAPHIC_TYPES = Object.freeze([\n    SITE_TYPE,\n    BUILDING_TYPE,\n    FLOOR_TYPE,\n    ZONE_TYPE,\n    ROOM_TYPE,\n]);\nexports.GEOGRAPHIC_TYPES = GEOGRAPHIC_TYPES;\nconst GEOGRAPHIC_TYPES_ORDER = Object.freeze([\n    CONTEXT_TYPE,\n    SITE_TYPE,\n    BUILDING_TYPE,\n    FLOOR_TYPE,\n    ZONE_TYPE,\n    ROOM_TYPE,\n    EQUIPMENT_TYPE,\n]);\nexports.GEOGRAPHIC_TYPES_ORDER = GEOGRAPHIC_TYPES_ORDER;\nconst GEOGRAPHIC_RELATIONS = Object.freeze([\n    SITE_RELATION,\n    BUILDING_RELATION,\n    FLOOR_RELATION,\n    ZONE_RELATION,\n    ROOM_RELATION,\n    EQUIPMENT_RELATION,\n]);\nexports.GEOGRAPHIC_RELATIONS = GEOGRAPHIC_RELATIONS;\nconst GEOGRAPHIC_RELATIONS_ORDER = Object.freeze([\n    SITE_RELATION,\n    BUILDING_RELATION,\n    FLOOR_RELATION,\n    ZONE_RELATION,\n    ROOM_RELATION,\n    EQUIPMENT_RELATION,\n]);\nexports.GEOGRAPHIC_RELATIONS_ORDER = GEOGRAPHIC_RELATIONS_ORDER;\nconst MAP_TYPE_RELATION = Object.freeze(new Map([\n    [SITE_TYPE, SITE_RELATION],\n    [BUILDING_TYPE, BUILDING_RELATION],\n    [FLOOR_TYPE, FLOOR_RELATION],\n    [ZONE_TYPE, ZONE_RELATION],\n    [ROOM_TYPE, ROOM_RELATION],\n    [EQUIPMENT_TYPE, EQUIPMENT_RELATION],\n]));\nexports.MAP_TYPE_RELATION = MAP_TYPE_RELATION;\nconst MAP_RELATION_TYPE = Object.freeze(new Map([\n    [SITE_RELATION, SITE_TYPE],\n    [BUILDING_RELATION, BUILDING_TYPE],\n    [FLOOR_RELATION, FLOOR_TYPE],\n    [ZONE_RELATION, ZONE_TYPE],\n    [ROOM_RELATION, ROOM_TYPE],\n    [EQUIPMENT_RELATION, EQUIPMENT_TYPE],\n]));\nexports.MAP_RELATION_TYPE = MAP_RELATION_TYPE;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst CONTEXT_TYPE = 'geographicContext';\nconst SITE_TYPE = 'geographicSite';\nconst BUILDING_TYPE = 'geographicBuilding';\nconst FLOOR_TYPE = 'geographicFloor';\nconst ZONE_TYPE = 'geographicZone';\nconst ROOM_TYPE = 'geographicRoom';\nconst EQUIPMENT_TYPE = 'BIMObject';\nconst REFERENCE_TYPE = 'geographicReference';\n\nconst SITE_RELATION = 'hasGeographicSite';\nconst BUILDING_RELATION = 'hasGeographicBuilding';\nconst FLOOR_RELATION = 'hasGeographicFloor';\nconst ZONE_RELATION = 'hasGeographicZone';\nconst ROOM_RELATION = 'hasGeographicRoom';\nconst EQUIPMENT_RELATION = 'hasBimObject';\nconst REFERENCE_RELATION = 'hasReferenceObject';\nconst REFERENCE_ROOM_RELATION = 'hasReferenceObject.ROOM';\n\nconst SITE_REFERENCE_CONTEXT = '.SiteContext';\nconst BUILDING_REFERENCE_CONTEXT = '.BuildingContext';\nconst FLOOR_REFERENCE_CONTEXT = '.FloorContext';\nconst ZONE_REFERENCE_CONTEXT = '.ZoneContext';\nconst ROOM_REFERENCE_CONTEXT = '.RoomContext';\n\nconst GEOGRAPHIC_TYPES = Object.freeze([\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n]) as string[];\n\nconst GEOGRAPHIC_TYPES_ORDER = Object.freeze([\n  CONTEXT_TYPE,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n]) as string[];\n\nconst GEOGRAPHIC_RELATIONS = Object.freeze([\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n]) as string[];\n\nconst GEOGRAPHIC_RELATIONS_ORDER = Object.freeze([\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n]) as string[];\n\nconst MAP_TYPE_RELATION = Object.freeze(\n  new Map([\n    [SITE_TYPE, SITE_RELATION],\n    [BUILDING_TYPE, BUILDING_RELATION],\n    [FLOOR_TYPE, FLOOR_RELATION],\n    [ZONE_TYPE, ZONE_RELATION],\n    [ROOM_TYPE, ROOM_RELATION],\n    [EQUIPMENT_TYPE, EQUIPMENT_RELATION],\n  ])\n) as Map<string, string>;\n\nconst MAP_RELATION_TYPE = Object.freeze(\n  new Map([\n    [SITE_RELATION, SITE_TYPE],\n    [BUILDING_RELATION, BUILDING_TYPE],\n    [FLOOR_RELATION, FLOOR_TYPE],\n    [ZONE_RELATION, ZONE_TYPE],\n    [ROOM_RELATION, ROOM_TYPE],\n    [EQUIPMENT_RELATION, EQUIPMENT_TYPE],\n  ])\n) as Map<string, string>;\n\nexport {\n  CONTEXT_TYPE,\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  GEOGRAPHIC_TYPES,\n  EQUIPMENT_TYPE,\n  GEOGRAPHIC_TYPES_ORDER,\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  GEOGRAPHIC_RELATIONS,\n  EQUIPMENT_RELATION,\n  GEOGRAPHIC_RELATIONS_ORDER,\n  MAP_TYPE_RELATION,\n  MAP_RELATION_TYPE,\n  REFERENCE_TYPE,\n  REFERENCE_RELATION,\n  SITE_REFERENCE_CONTEXT,\n  BUILDING_REFERENCE_CONTEXT,\n  FLOOR_REFERENCE_CONTEXT,\n  ZONE_REFERENCE_CONTEXT,\n  ROOM_REFERENCE_CONTEXT,\n  REFERENCE_ROOM_RELATION\n};\n"],"names":["PROGRESS_BAR_SIZE_GET_PROPS","PROGRESS_BAR_SIZE_CREATE_TREE","PROGRESS_BAR_SIZE_CREATE_GRAPH","MAX_NON_SYNCHRONIZED_NODES","getChildrenByNames","parent","nodeNames","relationName","children","SpinalGraphService","getChildren","id","found","name","push","find","child","get","generateGeoContextRec","context","layout","depth","ref","console","log","Map","foundChildren","keys","relations","entries","next","value","undefined","createNode","type","types","addChildInContext","SPINAL_RELATION_TYPE","getInfo","window","spinal","BimObjectService","addReferenceObject","dbId","addBIMObject","e","error","waitForFileSystem","promises","nodes","Promise","all","resolve","inter","setInterval","filter","node","FileSystem","_objects","_server_id","length","clearInterval","generateGeoContext","props","progression","tmpTree","incrProg","promise"],"version":3,"file":"spinal-env-viewer-plugin-generate_geographic_context.094e65fb.js.map"}