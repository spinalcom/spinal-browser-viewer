{"mappings":"A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-standard_button/vue/deletePanel.vue","node_modules/spinal-env-viewer-plugin-standard_button/vue/colorDialog.vue"],"sourcesContent":["<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n      <md-dialog-title\n        >Delete action on node selected : {{ name }}</md-dialog-title\n      >\n      <div class=\"DeleteMainBody\">\n        <md-field>\n          <label for=\"Select how you want the delete to operate\">\n            Select how you want the delete to operate\n          </label>\n          <md-select id=\"modeSelect\" name=\"modeSelect\" v-model=\"selectedMode\">\n            <md-option\n              v-for=\"option in modeOptions\"\n              :key=\"option\"\n              :value=\"option\"\n            >\n              {{ option }}\n            </md-option>\n          </md-select>\n        </md-field>\n        <div v-if=\"selectedMode === 'Delete nodes'\">\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"1\">\n            This node only\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"2\">\n            This node's children nodes\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"3\">\n            This node <strong> and </strong> children nodes\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"4\">\n            All nodes of similar type in the same context</md-radio\n          >\n\n          <div v-if=\"selectedOption === '4' || selectedOption === '2'\">\n            <md-field>\n              <label>Filter value : </label>\n              <md-input v-model=\"strFilter\"></md-input>\n            </md-field>\n            <b v-if=\"strFilter == ''\"> !! If the filter is empty, all nodes will be captured !! </b>\n            <div v-else>\n              <md-radio v-model=\"strictFilter\" :value=\"true\">\n                Strict filter (node name has to match exactly the filter value)\n              </md-radio>\n              <md-radio v-model=\"strictFilter\" :value=\"false\">\n                Not strict filter (node name should contain the filter\n                value)</md-radio\n              >\n            </div>\n          </div>\n\n          <div>\n            <p>--------------------</p>\n            <strong> Exclude if : </strong>\n            <md-radio\n              :disabled=\"selectedOption == '1' || selectedOption == '4'\"\n              v-model=\"excludeOption\"\n              value=\"1\"\n            >\n              Node has another parent\n            </md-radio>\n            <md-radio\n              :disabled=\"selectedOption == '1' || selectedOption == '4'\"\n              v-model=\"excludeOption\"\n              value=\"2\"\n            >\n              Node has another parent in the same context\n            </md-radio>\n            <md-radio\n              :disabled=\"selectedOption == '1' || selectedOption == '4'\"\n              v-model=\"excludeOption\"\n              value=\"3\"\n            >\n              Node has another parent in another context\n            </md-radio>\n          </div>\n        </div>\n\n        <div v-if=\"selectedMode === 'Delete relations'\">\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"1\">\n            Relation with parent in this context\n          </md-radio>\n          <md-radio class=\"md-primary\" v-model=\"selectedOption\" value=\"2\">\n            Children relations\n          </md-radio>\n          <!-- <md-radio\n            disabled\n            class=\"md-primary\"\n            v-model=\"selectedOption\"\n            value=\"3\"\n          >\n            Parent relations (NYI)\n          </md-radio> -->\n          <md-button v-if=\"selectedOption == '2'\" @click=\"searchRelations()\">\n            Search relations\n          </md-button>\n          <div v-if=\"searchedRelations.length > 0\">\n            <md-checkbox\n              v-for=\"item in searchedRelations\"\n              :key=\"item\"\n              v-model=\"selectedRelations\"\n              :value=\"item\"\n              >{{ item }}</md-checkbox\n            >\n          </div>\n        </div>\n      </div>\n      <md-dialog-actions>\n        <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n          >Cancel</md-button\n        >\n        <md-button class=\"md-primary\" @click=\"closeDialog(true)\"\n          >Accept</md-button\n        >\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SpinalNode,\n} from 'spinal-env-viewer-graph-service';\nexport default {\n  name: 'dialogComponent',\n  props: ['onFinised'],\n  data() {\n    return {\n      showDialog: true,\n      selectedNode: null,\n      selectedContext: null,\n      selectedMode: 'Delete nodes',\n      selectedOption: '1',\n      excludeOption: null,\n      relationNames: null,\n      modeOptions: ['Delete nodes', 'Delete relations'],\n      searchedRelations: [],\n      selectedRelations: [],\n      strictFilter: false,\n      strFilter: '',\n      name: '',\n    };\n  },\n  methods: {\n    opened(option) {\n      console.log('opened : ', option);\n      this.name = option.selectedNode.name.get();\n      this.selectedNode = option.selectedNode;\n      this.selectedContext = option.context;\n    },\n    removed(option) {\n      if (option.closeResult === true) {\n        console.log('closed : ', option);\n        this.routage();\n        this.showDialog = false;\n      }\n      this.showDialog = false;\n    },\n\n    deleteNode() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      node.removeFromGraph();\n    },\n\n    deleteChildren() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      node.getChildren().then((children) => {\n        this.applyFilter(children).then((filteredChildren) => {\n          const strFilteredChildren = this.applyStrFilter(filteredChildren);\n          for (const child of strFilteredChildren) {\n            child.removeFromGraph();\n          }\n        });\n      });\n    },\n\n    deleteNodeAndChildren() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      node.getChildren().then((children) => {\n        this.applyFilter(children).then((filteredChildren) => {\n          const strFilteredChildren = this.applyStrFilter(filteredChildren);\n          for (const child of strFilteredChildren) {\n            child.removeFromGraph();\n          }\n        });\n      });\n      node.removeFromGraph();\n    },\n\n    deleteAllNodesOfSameTypeInSameContext() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      SpinalGraphService.findInContextByType(\n        this.selectedContext.id.get(),\n        this.selectedContext.id.get(),\n        node.getType().get()\n      ).then((models) => {\n        const nodes = models.map((m) =>\n          SpinalGraphService.getRealNode(m.id.get())\n        );\n        console.log('nodes :', nodes);\n        const strFilteredNodes = this.applyStrFilter(nodes);\n        for (const filteredNode of strFilteredNodes) {\n          //let realNode = SpinalGraphService.getRealNode(node.id.get());\n          filteredNode.removeFromGraph();\n        }\n      });\n    },\n\n    deleteRelationWithParentInContext() {\n      console.log('deleteRelationWithParentInContext');\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      // look for parents\n      node.getParents().then((parents) => {\n        console.log('parents : ', parents);\n        for (const p of parents) {\n          // if parent is in the same context\n          if (p.getContextIds().includes(this.selectedContext.id.get())) {\n            console.log('Parent of same context found : ', p.info.name.get());\n            // look for relations\n            for (const r of p.getRelationNames()) {\n              // Verify if the node is a child of the parent\n              SpinalGraphService.isChild(\n                p.info.id.get(),\n                this.selectedNode.id.get(),\n                r\n              ).then((res) => {\n                if (res) {\n                  console.log('Attempting to remove');\n                  this.removeChild(p, node, r);\n                } else console.log('Child not found');\n              });\n            }\n          }\n        }\n      });\n    },\n\n    async deleteChildrenRelations() {\n      //here we should call removeChild , then if no childs are left we should remove the relation\n      console.log('deleteChildrenRelations');\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      for (const r of this.selectedRelations) {\n        const children = await node.getChildren(r);\n        for (const child of children) {\n          this.removeChild(node, child, r);\n        }\n        try {\n          console.log('Trying to remove relation : ', r);\n          node.removeRelation(r, SPINAL_RELATION_PTR_LST_TYPE);\n        } catch (e) {\n          try {\n            node.removeRelation(r, SPINAL_RELATION_LST_PTR_TYPE);\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }\n    },\n\n    searchRelations() {\n      let node = SpinalGraphService.getRealNode(this.selectedNode.id.get());\n      let relations = node.getRelationNames();\n      this.searchedRelations = relations;\n      this.selectedRelations = relations;\n      console.log(relations);\n    },\n\n    async applyFilter(nodes) {\n      const res = [];\n      switch (this.excludeOption) {\n        case '1': // filter out the nodes that have a parent that is not the selected node\n          for (const node of nodes) {\n            const parents = await node.getParents();\n            let filteredOut = false;\n            for (const p of parents) {\n              if (p.info.id.get() != this.selectedNode.id.get()) {\n                filteredOut = true;\n                break;\n              }\n            }\n            if (!filteredOut) res.push(node);\n          }\n          return res;\n\n        case '2': // filter out the nodes that have another parent in the same context\n          for (const node of nodes) {\n            const parents = await node.getParents();\n            let filteredOut = false;\n            for (const p of parents) {\n              if (p.info.id.get() != this.selectedNode.id.get()) {\n                const parentContextIds = p.getContextIds(); // get the context ids of the parent\n                if (parentContextIds.includes(this.selectedContext.id.get())) {\n                  filteredOut = true;\n                  break;\n                }\n              }\n            }\n            if (!filteredOut) res.push(node);\n          }\n          return res;\n        case '3': //filter out the nodes that have another parent in another context\n          for (const node of nodes) {\n            const parents = await node.getParents();\n            let filteredOut = false;\n            for (const p of parents) {\n              if (p.info.id.get() != this.selectedNode.id.get()) {\n                const parentContextIds = p.getContextIds(); // get the context ids of the parent\n                if (!parentContextIds.includes(this.selectedContext.id.get())) {\n                  filteredOut = true;\n                  break;\n                }\n              }\n            }\n            if (!filteredOut) res.push(node);\n          }\n          return res;\n        default:\n          return nodes;\n      }\n    },\n\n    applyStrFilter(nodes) {\n      if (this.strFilter == '') return nodes;\n      return nodes.filter((node) => {\n        if (this.strictFilter) {\n          return node.info.name.get() == this.strFilter;\n        } else return node.info.name.get().includes(this.strFilter);\n      });\n    },\n\n    routage() {\n      if (this.selectedMode === 'Delete nodes') {\n        if (this.selectedOption === '1') {\n          this.deleteNode();\n        } else if (this.selectedOption === '2') {\n          this.deleteChildren();\n        } else if (this.selectedOption === '3') {\n          this.deleteNodeAndChildren();\n        } else if (this.selectedOption === '4') {\n          this.deleteAllNodesOfSameTypeInSameContext();\n        }\n      } else if (this.selectedMode === 'Delete relations') {\n        if (this.selectedOption === '1') {\n          this.deleteRelationWithParentInContext();\n        } else if (this.selectedOption === '2') {\n          this.deleteChildrenRelations();\n        } else if (this.selectedOption === '3') {\n          this.deleteParentRelations();\n        }\n      }\n    },\n\n    removeChild(p, node, r) {\n      try {\n        p.removeChild(node, r, SPINAL_RELATION_PTR_LST_TYPE);\n      } catch (e) {\n        try {\n          p.removeChild(node, r, SPINAL_RELATION_LST_PTR_TYPE);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.DeleteMainBody {\n  margin: 20px;\n}\n\n.md-radio {\n  display: flex;\n}\n</style>\n","<template>\n  <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n    <md-dialog-title>Edit Color</md-dialog-title>\n\n    <md-dialog-content class=\"colorDialogContainer\">\n      <chrome-picker v-model=\"color\" />\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Cancel</md-button\n      >\n      <md-button class=\"md-primary\" @click=\"closeDialog(true)\">Save</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { Chrome } from \"vue-color\";\n\nexport default {\n  name: \"editColordialogComponent\",\n  props: [\"onFinised\"],\n  components: {\n    \"chrome-picker\": Chrome,\n  },\n  data() {\n    return {\n      showDialog: true,\n      color: \"#000000\",\n      selectedNode: null,\n    };\n    \n  },\n  methods: {\n    opened(option) {\n      if (option.selectedNode.color) {\n        this.color = option.selectedNode.color.get();\n      }\n      this.selectedNode = SpinalGraphService.getRealNode(\n        option.selectedNode.id.get()\n      );\n    },\n    removed(option) {\n      if (option.closeResult === true) {\n        const color =\n          typeof this.color === \"string\" ? this.color : this.color.hex;\n        if (this.selectedNode.info.color) {\n          this.selectedNode.info.color.set(color);\n        } else {\n          this.selectedNode.info.add_attr({ color: color });\n        }\n      }\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.colorDialogContainer {\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-standard_button.d13eeb45.css.map"}