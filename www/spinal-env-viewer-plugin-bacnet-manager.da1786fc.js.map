{"mappings":"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mB,a;gB,I,C,iB;gB,I,C,Q,C,G,yB,E;Y;Q;Q,W;Q,M;Y,I,O,I,C,mB,a;gB,I,C,iB,I,C,G,qC,E,I,C,O,I,C,S,I,C,S,I,C;gB,oC;gB,M,I,C,e;Y;Y,I,C,e;Y,I,C;Q;Q;Y,Q,I;Y,I,C,e,Q,I,I,C;Y,kD;Y,I,C,e;Q;Q;Y,I,C,qB,I,C,e,M,K;gB,Q,I,I,C,e,M;gB,I,C,Q,I,C,e,M;gB,I,I,C,U,C,G,yB,E,Y,I,C,U,I,C,e,Q;qB,I,I,C,U,C,G,yB,E,S,I,C,iB;Y,6C;Y,6B;Y,wC;Y,0D;Y,e;Y,0B;Y,qC;Y,e;Y,8B;YAsFf,yCAAA;YACA,eAAA;Y,2B;YAEA,sCAAA;YACA,eAAA;YACA,0BAAA;Y,qC;YAEA,eAAA;Y,wB;YAEA,mCAAA;YACA,0BAAA;Y,qC;YAEA,eAAA;YAEA,cAAA;YACA,eAAA;YACA,IAAA;YACA,4DAAA;YACA;QACA;Q,e,M;YAGA,MAAA,WAAA,CAAA,GAAA,+CAAA,EAAA,YAAA;YACA,OAAA,SAAA;QACA;QAEA,gBAAA,OAAA;YACA,IAAA,QAAA,MACA,QAAA,KAAA,IAAA,IAAA,CAAA,QAAA;iBAEA,QAAA,SAAA;gBAAA,MAAA,IAAA,CAAA,QAAA;YAAA;YAGA,IAAA,QAAA,MACA,QAAA,KAAA,IAAA,IAAA,CAAA,QAAA;iBAEA,QAAA,SAAA;gBAAA,MAAA,IAAA,CAAA,QAAA;YAAA;QAEA;QAEA,gBAAA,OAAA;YACA,IAAA,QAAA,MACA,QAAA,KAAA,IAAA,IAAA,CAAA,QAAA;iBAEA,QAAA,SAAA;gBAAA,MAAA,IAAA,CAAA,QAAA;YAAA;YAGA,IAAA,QAAA,MACA,QAAA,KAAA,IAAA,IAAA,CAAA,QAAA;iBAEA,QAAA,SAAA;gBAAA,MAAA,IAAA,CAAA,QAAA;YAAA;Q;Q,c,O;YAKA,IAAA,CAAA,WAAA;QACA;QAEA;YACA,IAAA,IAAA,CAAA,gBAAA;gBACA,IAAA,CAAA,eAAA;gBACA,IAAA,CAAA,eAAA,SAAA,KAAA;oBACA,IAAA,CAAA,iBAAA;oB,I,C,Q,C,G,yB,E;gBAEA;Y,OAEA,IAAA,CAAA,QAAA,CAAA,GAAA,yBAAA,EAAA;Q;IAGA;IACA,OAAA;QACA,wBAAA;Y,I,C;QAEA;QACA,mBAAA;YACA,IAAA,CAAA;QACA;QACA,gBAAA;YACA,IAAA,CAAA;Q;QAGA,eAAA;YACA,IAAA,CAAA;QACA;I;IAEA;QACA,IAAA,CAAA,eAAA,OAAA,IAAA,CAAA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kB,S,wC;;;;;AC/LA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA6B;IAC3D,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q,S,C;Q,O,C;Q,U,C;Q,S,C;I;I;Q,I,C,S,C,G,iB;Q,O;Y,O;Y,M,C,G,iB,E;Q;I;I,S;Q;Y,I,I,C,Q,K,O,W,G,O;Y,I,I,C,Q,c;gB,I,I,C,Q,Q,W,G,O;gB,I,I,C,Q,K,W,G,O;Y,O;gB,I,I,C,Q,I,W,G,O;Y;Y,O;Q;Q,U,K;Y,I,C,M,U;Q;Q;Y,I,C,M;Q;Q;Y,I,C,M;Q;I;I,O;Q;Y,I,C,O,I,C;Y,O,I,C;gB,K,C,G,iB,E;oB,I,C,Q;oB;gB,K,C,G,iB,E;oB,I,C,Q;oB;gB,K,C,G,iB,E;oB,I,C,Q;oB;gB,K,C,G,iB,E;oB,I,C,Q;oB;gB;oB;Y;Q,uB;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;;;4CChBF;AAAN,MAAM,SAAS,OAAO,OAAO;IAClC,SAAS;IACT,aAAa;IACb,YAAY;IACZ,SAAS;IACT,UAAU;IACV,SAAS;AACX;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,A,I,S,I,O,a,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,I,G,I,G,I,S,U,iB,I,G,I,Q,U;a;S;Q,I,G;Q,G,Y;Y,a;Y,I;gB,e,I;Y;Y,a,I,G;gB;oB,K;oB,I,S,G;wB,I,O,I;wB,O,G,gB;4B,O;gC,iB;gC,kB;4B;wB,G;4B,G,iB;gC,O;oC,Y;oC,c;gC;4B,G;gC,I,G,I,G,K;6B;4B,I,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,I,G,K;6B;4B,I,G;4B,G,iB;gC,O;oC,Y;gC;4B,G;gC,I,G,I,G,K;6B;yB,E;oB;gB;a,E,M,O;Y,O;gB,O,I;gB,U,S,G;oB,I,U;gB;gB,Y;Y;Q;K,E,K,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,I,G,I,G,I;S;Q,I,G;Q,G,O;Y,a;Q,G;Y,I,S,I,O,U,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,I;gB;Y,G;gB,I,G;a,I,A,I,S,I,O,U,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a,I,A,I,S,I,O,c,G,O;gB,a;Y,G;gB,G,O;oB,G,uB;wB,O;4B,W;wB;oB;iB,E;gB,I,G;gB,G,O;oB,G,a;wB,a;wB,I;4B,S,I;wB;oB,G;wB,I,G;qB;iB,E;a,I,I;S,E;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADNA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAoC;IAClD,OAAO,kBAAkB,QAAQ,oBAAoC;IACrE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAiC;IAC/D,QAAQ,oBAAkC,QAAQ;IAClD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q,S,C;I;I;Q,O,C;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,Q;wB,U,S,G;4B,I,K,I,S,Q;wB;wB,Y;oB;gB;a,E;S,E;Q,I,G;Q,G,O;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,Q;wB,U,S,G;4B,I,K,I,S,W;wB;wB,Y;oB;gB;gB,I,G;gB,G,Q;oB,a;gB,G;oB,I,G;iB;a,E;S,E;Q,I,G;Q,G,O;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,Q;wB,U,S,G;4B,I,K,I,S,Q;wB;wB,Y;oB;gB;gB,I,G;gB,G,Q;oB,a;gB,G;oB,I,G;iB;a,E;S,E;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAkC;IAChD,OAAO,kBAAkB,QAAQ,oBAAkC;IACnE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA+B;IAC7D,QAAQ,oBAAgC,QAAQ;IAChD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;;A,I,gB;I,M;I,O;Q,S,C;I;I,Y;Q,uB,C,G,4B;I;I;Q,O;Y,W;Q;I;I,S;Q;Y,M,K,I,C,Q,I;Y,I,C,Q,M;mB,I,C,Q;gB;oB,I;oB,S;oB,U;gB;a;Q;Q;Y,I,C,Q,M;gB;oB,I;oB,S;oB,U;gB;a;Q;Q,Y,E;Y,I,C,Q,M,I,C,Q,I,O,C,K,G,O;Q;Q;Y,I,Q,S,c;Y,M,O;Y,M,S;Y,M;Y,M,iB,U,O;gB,I,C,Y;gB,I;oB,M,O,M,O,K,C,E;oB,M,W,M,C,G,wD,E,mB;oB,M,M,E;oB,I,M,O,S,I,O,e,K,U,M;wB,M,O,Q,C,I,C,I,C;4B,O;gC,S,I,C,kB;gC,U,I,C,mB;4B;wB;wB,I,Q;oB;oBA4Cf,IAAA,CAAA,QAAA,MAAA,IAAA,IAAA,CAAA,IAAA;wBACA,GAAA,KAAA;wB,O;oBAEA;oBACA,IAAA,CAAA,YAAA;gBACA,EAAA,OAAA,OAAA;oBACA,IAAA,CAAA,YAAA;gBACA;YACA,GACA;QAEA;QAEA,mBAAA,OAAA;YACA,MAAA,UAAA;YACA,MAAA,MAAA,OAAA,KAAA,SAAA,KAAA,CAAA;gBACA,OAAA,GAAA,kBAAA;YACA;YAEA,IAAA,KAAA,OAAA,OAAA,CAAA,IAAA;QACA,4BAAA;QACA,4CAAA;Q,I;QAEA;QAEA,oBAAA,OAAA;Y,M,W;YAEA,MAAA,MAAA,OAAA,KAAA,SAAA,KAAA,CAAA;gBACA,OAAA,GAAA,QAAA,KAAA,IAAA,kBAAA;YACA;YAEA,IAAA,KAAA,OAAA,OAAA,CAAA,IAAA;QAEA,iBAAA;QACA,kBAAA;QACA,iBAAA;QACA,iBAAA;Q,kB;QAEA,iBAAA;QACA,kBAAA;QACA,KAAA;QACA,4BAAA;Q,4C;QAEA,IAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;;;AC5GA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA4B;IAC1C,OAAO,kBAAkB,QAAQ,oBAA4B;IAC7D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAyB;IACvD,QAAQ,oBAA0B,QAAQ;IAC1C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q,M,C;I;I;Q,O,C;I;I,S;Q;Y,I,C,M,U,I,C,K;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,K;wB,U,S,G;4B,I,K,I,M,W;wB;wB,Y;oB;gB;a,E;S,E;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,Y;gB,a;Y,G;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I,K;wB,U,S,G;4B,I,K,I,M,Y;wB;wB,Y;oB;gB;a,E;S,E;Q,I,G;Q,G,O;Y,a;Q,G;Y,I,K,K,G,a;gB,Y;oB;wB,M;wB,S;wB,O;wB,Y;oB;iB;gB,a;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;a,E,K,I;S,E;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,A,C,I,Y,G,O;Q,a;I,G;Q,G,Y;Y,a;Q,G;Y,G,S;gB,I,G;a;Y,I,G;Y,G,Y;gB,O;oB,O,I,Q;oB,U,S,G;wB,I,K,I,S,Q;oB;oB,Y;gB;Y;S,E;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,O;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,O;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S;Q,I,G;Q,G,c;Y,a;Q,G,I,G,I,Q,K,S,I;Y,O,G,uB;gB,K,K;gB,O;oB,Q;gB;gB,I;oB,U,I;gB;Y;Q,I;K,E,K,G,O;Q,a;I,G;Q,G,uB;Y,O;gB,W;Y;Q;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,e;Y,O;gB,e;Y;Q,G;Y,G,W;gB,O;oB,M;oB,Y;oB,kB;gB;Y,G;gB,G,O;oB,a;gB,G;oB,G,O;wB,a;oB,G;wB,G,O;4B,a;4B,O;gC,U,I,Q;4B;wB,G;4B,G,Y;gC,a;gC,O;oC,S;gC;gC,O;oC,O,I,Q;oC,U,S,G;wC,I,K,I,S,gB;oC;oC,Y;gC;4B,G;gC,I,G;6B;yB,E;wB,I,G;wB,G,O;4B,a;4B,O;gC,U,C,I,Q;4B;wB,G;4B,G,Y;gC,a;gC,O;oC,S;gC;gC,O;oC,O,I,Q;oC,U,S,G;wC,I,K,I,S,gB;oC;oC,Y;gC;4B,G;gC,I,G;6B;yB,E;qB;oB,I,G;oB,G,O;wB,a;oB,G;wB,I,Q,e,G,sB;4B,O;gC,W,I;4B;wB,K,G,oB;4B,O;gC,W,I;4B;wB;qB,E;iB;a;Y,I,G;Y,G,W;gB,O;oB,M;oB,Y;oB,kB;gB;Y,G;gB,G,O;oB,a;gB,G;oB,G,kB;wB,O;4B,W,I;4B,S,I;4B,Y,I;4B,W,I;wB;wB,I;4B,Y,I;4B,U,I;4B,Q,I;wB;oB;iB,E;a;Y,I,G;Y,G,W;gB,O;oB,M;oB,Y;oB,kB;gB;Y,G;gB,G,O;oB,a;gB,G;oB,G,O;wB,a;oB,G;wB,I,U,I,O,W,G,uB;4B,O;gC,W;4B;wB,K,A,I,U,I,O,U,G,W;4B,a;wB,G;4B,I,G;yB,I,G,a;4B,O;gC,Y,I,S,W;4B;4B,I;gC,S,I;4B;wB,G;4B,I,G;yB;qB,E;iB;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AJJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AMJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,mBAAqC;IACnD,OAAO,kBAAkB,QAAQ,mBAAqC;IACtE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAkC;IAChE,QAAQ,kBAAmC,QAAQ;IACnD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;A;;A;A,M,E,yB,E,G,Q;A,I,gB;I,M;I,Y;Q,qB,C,G,gC;I;I;Q,I,C,Q;Y,W;Y,S;Y,U;Y,S;Y,O;Q;Q,I,C;Q,I,C;Q,I,C;Q,I,C;Q,I,C;Q,O;Y,S,E;Y,c,I,C,M;Q;I;I;Q,C,G,qD,E,G,0C,K;I;I,S;Q,M,Q,E,O,E,K,E,Y,E;Y,I,C,e,I,C,M;Y,I,C,c,a;Y,C,G,0B,E;Y,I;gB,M,C,Q,U,G;oB,a;oB,Q;iB;gB,I,C,U;gB,I,C,Q;gB,I,C,e;gB,M,C,G,0B,E,K,O,W;gB,M,E,O,E,S,E,G,M,I,C,c,W;gB,I,C,U;gB,M,I,C,c;gB,Q,I,C,G,0B;gB,I,C,e,I,C,M;Y,E,O,O;gB,Q,M;gB,I,C,e,I,C,M;Y;Q;Q,W;Q,M,e,S,E,E;Y,O,C,G,yB,E,c,W,I,K,C;gB,M,Y,I,I,E;gB,M,W,Q,I,O;oB,M,M,G;oB,M,U,M,C,G,yB,E,wB,I;oB,I,S;wB,M,E,E,E,G;wB,I,W;wB,U,I;oB;oBAiEf,OAAA;gBACA;gBAEA,OAAA,QAAA,IAAA,U,K,C;oBAEA,OAAA;wBACA;wBACA,WAAA,MAAA,KAAA;oB;gBAEA,GACA,MAAA,CAAA,OAAA;YACA;QACA;QAEA,eAAA,SAAA;YACA,MAAA,WAAA,UAAA,IAAA,CAAA,KAAA,CAAA,GAAA,0BAAA,EAAA,WAAA;YACA,OAAA,QAAA,QAAA;QACA;QAEA,sIAAA;QACA,MAAA;YACA,sCAAA;YAEA,qCAAA;YACA,gCAAA;YACA,wCAAA;YACA,eAAA;YACA,6BAAA;Y,M;YAEA,MAAA;YACA,MAAA,aAAA,IAAA,CAAA,QACA,IAAA,CAAA,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,CAAA,EAAA,GAAA,WACA,OAAA,CAAA,KAAA,CAAA,CAAA,IACA,IAAA,CAAA;gBACA,OAAA;oBACA,MAAA,QAAA,MAAA,IAAA;oBACA,MAAA,CAAA,GAAA,yBAAA,EAAA,eAAA;gBACA;YACA;YAEA,MAAA,CAAA,GAAA,yBAAA,EAAA,aAAA,YAAA;Q,kC;QAIA,+CAAA;QACA,2CAAA;QAEA,sEAAA;Q,oB;QAEA,IAAA;QACA;QAEA,MAAA;YACA,MAAA,aAAA,IAAA,CAAA,Q,I,C,K,I,C,K,C,G,G,G,I,C,K,C,G,G,C,E,G,WAEA,OAAA,CAAA,KAAA,CAAA,CAAA,IACA,IAAA,CAAA;gB,O;oBAEA,MAAA,QAAA,MAAA,IAAA;oB,M,C,G,yB,E,e;gBAEA;YACA;YAEA,MAAA,CAAA,GAAA,yBAAA,EAAA,aAAA,YAAA;QAEA,sCAAA;QAEA,qCAAA;Q,gC;QAEA,wCAAA;QACA,eAAA;QACA,+BAAA;QACA,MAAA;QACA,MAAA;QAEA,kCAAA;QACA,yEAAA;QACA,2BAAA;QAEA,kCAAA;QACA,2CAAA;QACA,qEAAA;Q,oB;QAEA,IAAA;QAEA,uCAAA;QACA,gCAAA;QACA,wCAAA;QACA,eAAA;QACA,qCAAA;QACA,MAAA;QACA,IAAA;QACA;QAEA,MAAA;YACA,qCAAA;YACA,gCAAA;YACA,wCAAA;Y,e;YAEA,4BAAA;YACA,MAAA;YACA,MAAA;YAEA,MAAA,aAAA,IAAA,CAAA,QACA,IAAA,CAAA,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,CAAA,EAAA,GAAA,W,O,C,K,C,C;YAGA,MAAA,WAAA,SAAA,EAAA;gBACA,MAAA,OAAA,WAAA,OAAA,GAAA;gBACA,MAAA,IAAA,CAAA,aAAA,MAAA,CAAA,MAAA,IAAA;YACA;QAEA,uCAAA;QACA,gCAAA;QACA,wCAAA;QACA,eAAA;QACA,kCAAA;QACA,MAAA;QACA,IAAA;QACA;QAEA,kBAAA,KAAA;Y,I,C,Q,Q,C;gBAEA,MAAA,WAAA,OAAA;gB,M,C,I,G,I,C,K,C,S;gBAEA,IAAA,K,I,iB;YAGA;QAEA,sCAAA;QACA,iBAAA;QACA,gCAAA;QACA,8CAAA;Q,yC;QAEA,gBAAA;QACA,qCAAA;QACA,OAAA;QACA,cAAA;QACA,IAAA;QACA;QAEA,eAAA,KAAA;YACA,0BAAA,OAAA,mBAAA,MAAA,SACA,CAAA,4BAAA,EAAA,MAAA,CAAA;QAEA;QAEA,cAAA,KAAA,EAAA,QAAA;Y,M,W,M,I,C,K,S;YAEA,OAAA,QAAA,IAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;;;AC5OA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA6B;IAC3D,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A;A,I,gB;I,M;I,O;Q,Q;Y,U;Q;Q,+B;Q,6B;Q,U;Y,M;Y,U;Q;I;I;Q,O;Y,gB;Y,O;Q;I;I,M;Q,I,C,Q,M,C,G,yB,E,S,I,C,O;Q,I,I,C,S,I,C,M,gB,I,C,iB,I,C,M,e;I;I,S;Q,M;Y,I,C,Q,M,C,G,0B,E,gB,I,C,O,I,I,C,U,I,C;Y,O,I,C;Q,mC;Q,qC;Q,oE;Q,0C;Q,qE;Q,qD;Q,I;Q;Q;Y,O,C,G,0B,E,e,I,C,O,I,I,C,U,I,C;Q,+C;Q,mC;Q,I;Q,mD;Q;Q,M;Y,M,I,C;Y,O,I,Q,C;gB,W;oB,I,C,Q,M,I,C;oB,Q,I,C;gB,G;Y;Q,6D;Q,kD;Q,4C;Q,6B;Q,oC;Q,qB;Q,c;QAyDf,MAAA;QACA;QAEA,kBAAA,KAAA;YACA,IAAA,CAAA,iBAAA;QACA;QAEA,sIAAA;Q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CAAC,QAAQ;IACf;AACF;AAEO,MAAM,eAAe,IAAI;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,Y;gB;oB,M;oB,S;oB,O,I,O;oB,Y;gB;a;Y,a;Q,G;Y,I,G,W,I,G,I,O,Q;S;Q,I,G;Q,G,O;Y,a;Y,O,I;Q,G;Y,I,G,W,I,G,I,S;S;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,a;gB,Y;oB;wB,M;wB,S;wB,O;wB,Y;oB;iB;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;a,E;Y,I,G;Y,G,a;gB,Y;oB;wB,M;wB,S;wB,O;wB,Y;oB;iB;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;a,E;Y,I,G;Y,G,a;gB,Y;oB;wB,M;wB,S;wB,O;wB,Y;oB;iB;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,I;gB;Y,G;gB,G,W;oB,I,G;iB;a,E;Y,I,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,e;wB,a;wB,O;4B,O,I;4B,U,S,G;gC,I,iB;4B;4B,Y;wB;oB,G;wB,I,G;qB;iB,E;a;S,E;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADlGhC,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,I,iB,I,M,Y,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,G,a;wB,Y;4B;gC,M;gC,S;gC,O;gC,Y;4B;yB;wB,a;wB,I;4B,S,I;wB;oB,G;wB,G,W;4B,a;wB,G;4B,I,G;yB;qB,E;oB,I,G;oB,G,a;wB,Y;4B;gC,M;gC,S;gC,O;gC,Y;4B;yB;wB,a;wB,I;4B,S,I;wB;oB,G;wB,G,W;4B,a;wB,G;4B,I,G;yB;qB,E;oB,I,G;oB,G,a;wB,Y;4B;gC,M;gC,S;gC,O;gC,Y;4B;yB;wB,a;wB,I;4B,S,I;wB;oB,G;wB,G,W;4B,a;wB,G;4B,I,G;yB;qB,E;oB,I,G;oB,G,a;wB,a;wB,I;4B,S,S,M;gC,O,I,iB;4B;wB;oB,G;wB,I,G;qB;oB,I,G;oB,G,a;wB,a;wB,I;4B,S,S,M;gC,O,I,iB;4B;wB;oB,G;wB,I,G;qB;iB,E;a;Y,I,G;Y,G,O;gB,a;Y,G,I,G,I,S,S,M;gB,O,G,qB;oB,K,O;oB,K,O;oB,U;oB,O;wB,U;wB,Y,O;wB,W,I;wB,S,I;oB;gB;Y,I;S,I,A,I,iB,I,M,U,G,O;Y,a;Q,G;Y,G,uB;gB,O;oB,W;gB;Y;S,E,K,A,I,iB,I,M,Q,G,O;Y,a;Q,G;Y,G,W;gB,a;Y,G;gB,I,G;a;S,E,K,I;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AGJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAwC;IACtD,OAAO,kBAAkB,QAAQ,oBAAwC;IACzE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAqC;IACnE,QAAQ,oBAAsC,QAAQ;IACtD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,Y,C;I;Q,I,C;Q,O;Y,Q;Y,Q;Q;I;IAFf,SAAA;Q,M,Q,E,S,E,M,E;YAEA,IAAA,CAAA,YAAA;YACA,IAAA,CAAA,SAAA;YACA,IAAA,CAAA,SAAA,MAAA,IAAA,CAAA,cAAA;QAEA,8CAAA;Q;QAGA,WAAA;QAEA,eAAA,OAAA;YACA,IAAA,CAAA,MAAA,QAAA,UAAA,UAAA;gBAAA;aAAA;YAEA,MAAA,WAAA,QAAA,IAAA,CAAA;gBACA,MAAA,WAAA,CAAA,GAAA,+CAAA,EAAA,YAAA;gBACA,OAAA,SAAA;YACA;YAEA,OAAA,QAAA,IAAA;QACA;QAEA,cAAA,KAAA;Y,M,Q,I;QAEA;IACA;A;AAGA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G,I,G,I,Q,S,K;Q,O,G,O;Y,K,M,G;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,I,G,I,G,M,K;a;Y,I,G;Y,G,O;gB,a;Y,G;gB,G,a;oB,a;oB,I;wB,S,S,M;4B,O,I,a;wB;oB;gB,G;oB,I,G;iB;a,E;S;I,I;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AA1CA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;ACLA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAM,EAAE,oBAAoB,EAAE,GAAG,QAAQ;AAGzC,MAAM,UAAU;IAAC;QACd,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,gCAA4B;QAC1D,iBAAiB,SAAS;IAC7B;IACA;QACG,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,qCAAuB;QACrD,iBAAiB,SAAS;IAC7B;IACA;QACG,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,2BAAa;QAC3C,iBAAiB,SAAS;IAC7B;IACA;QACG,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,qCAA0B;QACxD,iBAAiB,SAAS;IAC7B;IACA;QACG,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,oCAAsB;QACpD,iBAAiB,SAAS;IAC7B;IACA;QACG,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,uCAA4B;QAC1D,iBAAiB,SAAS;IAC7B;IACA;QACG,MAAM;QACN,mBAAmB,CAAA,GAAA,mBAAE,EAAE,OAAO,CAAA,GAAA,iCAAmB;QACjD,iBAAiB,SAAS;IAC7B;CACC;AAGD,IAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,QACzC,qBAAqB,MAAM,OAAO,CAAC,MAAM;;;;;ACnD5C,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAG5B,QAAQ,mBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Y,Y;Y,O;Y,O;Y,e;Y,c;Y,S;Q;I;I,S;Q,Q,M;Q,uB;Q;Q,S,M;Y,I,O,e,O,W,S,G,C,G,+C,E,W,O,W,Q,C,G,uB;YAYf,IAAA,CAAA,aAAA;QACA;QACA,aAAA,WAAA;YACA,IAAA,OAAA,IAAA,CAAA,cAAA,YACA,IAAA,CAAA,UAAA;gBAAA;gBAAA,YAAA,IAAA,CAAA,WAAA;YAAA;QAEA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,I,G;S;Q,I,G;Q,G,qB;Y,G,Y;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,O,I;wB,U,S,G;4B,I,a;wB;wB,Y;oB;gB;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,C,C,I,W,O,S,C;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAtCA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAqC;IACnD,OAAO,kBAAkB,QAAQ,oBAAqC;IACtE,OAAO,WAAW;IAG5B,QAAQ,oBAAmC,QAAQ;IACnD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,U;Y,Y;Y,Y;Q;I;I,S;Q,Q,M;Y,I,O,Y,O,a,I,C,a,O;Y,I,C,W,O;Q;Q,S,M;Y,I,O,e,O,c,Q,O,I,C,a,Y,I,C,S,O;Y,I,C,a;Q;Q,a,W;Y,I,O,I,C,c,Y,I,C,U;gB;gB,Y,I,C;Y;QAkBf;QAEA;YACA,OAAA,IAAA,CAAA,aAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,I,G;S;Q,I,G;Q,G,qB;Y,G,Y;gB,G,S;oB,I,G;iB;gB,I,G;gB,G,Y;oB,O;wB,Q;oB;oB,O;wB,O,I;wB,U,S,G;4B,I,a;wB;wB,Y;oB;gB;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AA1CA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAA2B;IACzC,OAAO,kBAAkB,QAAQ,oBAA2B;IAC5D,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAwB;IACtD,QAAQ,oBAAyB,QAAQ;IACzC,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;;A,I,gB;I,M;I,O;Q;K;I,Y;Q,gB,C,G,8B;I;I;Q,2B;Q,O;Y,W;Y,iB,E;Y,Y;Q;I;I,S;Q,Q,M;Y,2B;Y,+C;Y,M;Y,I,C,Y,O,Q,G;Y,I,C;Q;Q,S,M;Y,O;Y,I,C,a;Q;Q,a,W;Y,I,O,I,C,c,Y,I,C,U;gB;Y;Q;Q,M;Y,qB;Y,M,a,O,a;Y,I,C,kB,M,C,G,kC,E,U;Q,mC;Q,yE;Q,sB;Q,kC;Q,kC;Q,uC;Q,W;Q,sC;Q,M;Q;Q,mB,S;Y,C,G,kC,E,e,W,I,C,W,K,C;gB,I,C,K,C,U,C,W;Y,G,M;gB,I,C,K,C,U,C,W;Y;Q;Q,qB,S;Y,C,G,kC,E,kB,W,I,C,W,K;gB,I,C,K,C,U,C,W;YAsDf,GACA,MAAA,CAAA;gBACA,IAAA,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Q,I;Y,S,I;Q;I,G;Q,G,W;Y,I,G;S;K,E,K,A,I,W,I,W,G,a;Q,Y;Y;gB,M;gB,S;gB,O;gB,Y;Y;S;Q,a;Q,I;Y,S,I;Q;I,G;Q,G,W;Y,I,G;S;K,E,K,G,a;Q,G,uB;Y,O;gB,e;gB,a;gB,W;Y;Q;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,G,Y;gB,O;oB,W;oB,iB;oB,mB;gB;gB,a,I,G;oB;wB,K;wB,I,S,G;4B,I,O,I;4B,O,G,gB,C,G;gC,G,iB;oC,O;wC,Y;oC;gC,G;oC,I,G,I,G,K;iC;gC,I,G;gC,G,iB;oC,O;wC,Y;oC;gC,G;oC,I,G,I,G,K;iC;gC,I,G;gC,G,iB;oC,O;wC,Y;oC;gC,G;oC,G,gB;wC,K,K;wC,O;4C,a,K;4C,a,I;wC;wC,I;4C,O,I;4C,U,I;wC;oC;iC,E;6B,E;wB;oB;iB;gB,O;oB,O,I;oB,U,S,G;wB,I,kB;oB;oB,Y;gB;Y,G;gB,G,oB;oB,G,M;wB,a;oB,G;wB,I,G;qB;iB;gB,I,G;gB,G,wB;oB,O;wB,Y;oB;gB;a,E;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AFJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AGJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,mBAAqC;IACnD,OAAO,kBAAkB,QAAQ,mBAAqC;IACtE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAkC;IAChE,QAAQ,oBAAmC,QAAQ;IACnD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A,gE;A,sE;A;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,gC;I;I,O;Q;K;I;Q,I,C;Q,I,C;Q,I,C,Q;Y,W;Y,Q;Y,S;Y,S;Y,O;Y,U;Q;Q,8B;Q,gC;Q,O;Y,Y,I;Y,Y;Y,c,I,C,M;Y,S;Y,M,E;Y,S,E;Y,S,E;Y,iB;Y,gB;Y,gB;Q;I;I;I,wC;I,6C;I,oC;I,kD;I,S;I,M;I;I,S;Q,M,Q,M;Y,I,C,e,I,C,M;Y,I,C,e,O;Y,I,C,a,M,I,C,c,I,C,c,O;Y,I,C,a,K;gB,I,C,e,I,C,M;Y;Q;Q,S,M;Y,I,C,a;Q;Q,M;YAkEf,IAAA,CAAA,eAAA,IAAA,CAAA,MAAA;YACA,qDAAA;YAEA,6DAAA;YACA,8BAAA;Y,e;YAEA,+BAAA;YACA,WAAA;Y,M;YAGA,MAAA,MAAA,IAAA,CAAA,WAAA,IAAA,CAAA,KAAA,GAAA;YACA,MAAA,cAAA,IAAA;YACA,IAAA,UAAA;YAEA,MAAA,CAAA,WAAA,IAAA,SAAA,EAAA;gB,M,K,I;gBAEA,IAAA;oBACA,MAAA,CAAA,GAAA,6DAAA,EAAA,sBACA,IAAA,CAAA,cACA,IACA,IAAA,CAAA;oBAGA,IAAA,CAAA,UAAA,KAAA,MACA,AAAA,MAAA,CAAA,cAAA,IAAA,MAAA,IAAA;gBAEA,EAAA,OAAA,OAAA;oBACA,QAAA,MAAA;oBACA,UAAA;gBACA;YACA;YAEA,IAAA,SAAA;gBACA,IAAA,CAAA,eAAA,IAAA,CAAA,MAAA;gBACA;YACA;YAEA,IAAA,CAAA,eAAA,IAAA,CAAA,MAAA;QACA;QAEA,aAAA,WAAA;Y,I,O,I,C,c,YAEA,IAAA,CAAA,UAAA;QAEA;QAEA;YACA,6BAAA;YACA,OAAA,CAAA,GAAA,+DAAA,EAAA,gCAAA,KACA,CAAA;gBACA,IAAA,CAAA,OAAA;gBACA,IAAA,CAAA;gBACA;YACA;QAEA;QAEA;YACA,OAAA,CAAA,IAAA,CAAA,kBAAA,IAAA,CAAA,iBAAA,IAAA,CAAA,MAAA;QACA;QAEA,cAAA,QAAA;YACA,MAAA,QAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,OAAA;Y,I,O,O,M;QAEA;QAEA,aAAA,GACA,eAAA,EAAA;Y,I,C,kB;QAEA;QAEA,cAAA,EAAA;YACA,IAAA,CAAA,iBAAA;Q;QAGA,cAAA,EAAA;YACA,IAAA,CAAA,iBAAA;Q;QAGA,UAAA,GACA;Y,I,C,a,E;YAEA,IAAA,IAAA,CAAA,iBAAA;gBACA,IAAA,MAAA,IAAA,CAAA,KAAA,KAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA;gBACA,IAAA,KAAA,IAAA,CAAA,UAAA,IAAA;YACA;QACA;Q;YAGA,IAAA,CAAA,UAAA,EAAA;YACA,IAAA,IAAA,CAAA,gBAAA;gBACA,IAAA,MAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA;gB,I,K,I,C,U,I;YAEA;QACA;QAEA,eAAA,SAAA,EAAA,MAAA;YACA,OAAA,CAAA,GAAA,+CAAA,EAAA,cAAA,QAAA,WAAA,CAAA;gBACA,IAAA,KAAA,UAAA,UAAA,CAAA,GAAA,sCAAA,EAAA,cAAA;oBACA,CAAA,GAAA,+CAAA,EAAA,SAAA;oBACA,OAAA;gB;gBAEA,OAAA;YACA,GAAA,KAAA,CAAA;gBACA,OAAA,OAAA,IAAA,CAAA,KAAA,GAAA;YACA;QACA;IACA;IACA,OAAA;QACA,MAAA;Y,M,I,C;YAEA,IAAA,CAAA,iBAAA;QACA;QACA,MAAA;YACA,IAAA,CAAA;Y,I,C,iB;QAEA;IACA;A;AAGA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;;;AC1MA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAgC;IAC9C,OAAO,kBAAkB,QAAQ,oBAAgC;IACjE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAA6B;IAC3D,QAAQ,oBAA8B,QAAQ;IAC9C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,O;Q,e,C;Q,gB,C;Q,a,C;Q,M,C;Q,S,C;Q,S,C;Q,iB,C;Q,gB,C;Q,gB,C;I;I,Y;Q,iB,C,G,sC;I;I,S;Q,e,G;Y,I,C,M,iB;Q;Q,c,G;Y,I,C,M,gB;Q;Q,c,G;Y,I,C,M,gB;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAsC;IACpD,OAAO,kBAAkB,QAAQ,oBAAsC;IACvE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAmC;IACjE,QAAQ,oBAAoC,QAAQ;IACpD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;Q;Q;Q;K;I,S;Q;Y,I,C,M;Q;Q,Y,E;Y,I,C,M,U;Q;I;A;A,I,U,O,kB,a,c,U;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,I,G,I,G,I;a;S;Q,I,G;Q,G,c;Y,a;Q,G;Y,G,W,I,G,I,M,S,I,E,K;gB,O,G,gB;oB,Y;wB;4B,M;4B,S;4B,O,K;4B,Y;wB;qB;oB,K;oB,a;oB,O;wB,Y,K,O,I;oB;oB,I;wB,S,S,M;4B,O,I,W,K;wB;oB;gB,G;oB,G,Q;wB,a;oB,G;wB,I,G,I,G,K;qB;iB;Y,I;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,iB;gB,O;oB,S,I;oB,Q,I;oB,gB,I;gB;gB,I;oB,U,I;gB;Y;S,E;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,iB;gB,O;oB,S,I;oB,Q,I;oB,gB,I;gB;gB,I;oB,U,I;gB;Y;S,E;Q,I,G;Q,G,O;Y,a;Q,G;Y,G,iB;gB,O;oB,S,I;oB,Q,I;oB,gB,I;gB;gB,I;oB,U,I;gB;Y;S,E;K;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,I,iB,I,M,Y,G,kB;gB,O;oB,iB;oB,kB;oB,e;oB,Q,I;oB,W,I;oB,W,I;oB,mB,I;oB,kB,I;oB,kB,I;gB;gB,I;oB,iB,I;oB,gB,I;oB,gB,I;gB;Y,K,A,I,iB,I,M,U,G,O;gB,a;Y,G;gB,G,uB;oB,O;wB,W;oB;gB;a,E,K,A,I,iB,I,M,U,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;a,E,K,A,I,iB,I,M,Q,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;a,E,K,A,I,iB,I,M,W,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,I,G,I,G,I,W;iB;gB,I,G;gB,G,mB;oB,a;oB,O;wB,W;wB,Y,I;oB;gB;a,E,K,I;S,E;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AGJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAuC;IACrD,OAAO,kBAAkB,QAAQ,oBAAuC;IACxE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAoC;IAClE,QAAQ,oBAAqC,QAAQ;IACrD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A,gE;A,sE;A;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,gC;I;I,O;Q;K;I;Q,I,C;Q,I,C;Q,I,C,Q;Y,W;Y,Q;Y,S;Y,S;Y,O;Y,U;Q;Q,8B;Q,gC;Q,O;Y,Y,I;Y,Y;Y,c,I,C,M;Y,S;Q;I;I;I,wC;I,6C;I,oC;I,kD;I,S;I,M;I;I,S;Q,M,Q,M;Y,I,C,e,I,C,M;Y,I,C,e,O;Y,I,C,a,M,I,C,c,I,C,c,O;Y,I,C,e,I,C,M;Q;Q,S,M;Y,I,C,a;Q;Q,M;Y,I,C,e,I,C,M;Y,M,M,I,C,W,I,C,K,G;Y,M,c,I;YA4Df,IAAA,UAAA;YAEA,MAAA,CAAA,WAAA,IAAA,SAAA,EAAA;gBACA,MAAA,KAAA,IAAA;gBACA,IAAA;oBACA,MAAA,CAAA,GAAA,6DAAA,EAAA,wBACA,IAAA,CAAA,c;oB,I,C,U,K,MAKA,AAAA,MAAA,CAAA,cAAA,IAAA,MAAA,IAAA;gBAEA,EAAA,OAAA,OAAA;oBACA,QAAA,MAAA;oB,U;gBAEA;Y;YAGA,IAAA,SAAA;gBACA,IAAA,CAAA,eAAA,IAAA,CAAA,MAAA;gBACA;YACA;YAEA,IAAA,CAAA,eAAA,IAAA,CAAA,MAAA;QACA;Q,a,W;YAGA,IAAA,OAAA,IAAA,CAAA,cAAA,YACA,IAAA,CAAA,UAAA;QAEA;QAEA;YACA,OAAA,CAAA,IAAA,CAAA;QACA;QAEA,cAAA,QAAA;YACA,MAAA,QAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,OAAA;YACA,IAAA,OAAA,OAAA,MAAA;QACA;QAEA,aAAA,GACA,eAAA,EAAA;YACA,IAAA,CAAA,kBAAA;QACA;QAEA,cAAA,EAAA;YACA,IAAA,CAAA,iBAAA;QACA;QAEA,cAAA,EAAA;YACA,IAAA,CAAA,iBAAA;QACA;QAEA,UAAA,GACA;Y,I,C,a,E;YAEA,IAAA,IAAA,CAAA,iBAAA;gBACA,IAAA,MAAA,IAAA,CAAA,KAAA,KAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA;gBACA,IAAA,KAAA,IAAA,CAAA,UAAA,IAAA;YACA;Q;QAGA;Y,I,C,U,E;YAEA,IAAA,IAAA,CAAA,gBAAA;gBACA,IAAA,MAAA,IAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA;gBACA,IAAA,KAAA,IAAA,CAAA,UAAA,IAAA;Y;QAEA;Q,e,S,E,M;YAGA,OAAA,CAAA,GAAA,+CAAA,EAAA,cAAA,QAAA,WAAA,CAAA;gBACA,IAAA,KAAA,UAAA,UAAA,CAAA,GAAA,sCAAA,EAAA,cAAA;oBACA,CAAA,GAAA,+CAAA,EAAA,SAAA;oB,O;gBAEA;gBACA,OAAA;YACA,GAAA,KAAA,CAAA;gBACA,OAAA,OAAA,IAAA,CAAA,KAAA,GAAA;YACA;QACA;IACA;I,O;QAEA,MAAA;YACA,MAAA,IAAA,CAAA;YACA,IAAA,CAAA,iBAAA;QACA;QACA,MAAA;YACA,IAAA,CAAA;YACA,IAAA,CAAA,iBAAA;QACA;I;AAEA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,I,iB,I,M,Y,G,O;gB,a;Y,G;gB,I,G;a,I,A,I,iB,I,M,U,G,O;gB,a;Y,G;gB,G,uB;oB,O;wB,W;oB;gB;a,E,K,A,I,iB,I,M,U,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;a,E,K,A,I,iB,I,M,Q,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;a,E,K,A,I,iB,I,M,W,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,I,G,I,G,I,W;iB;gB,I,G;gB,G,mB;oB,a;oB,O;wB,W;wB,Y,I;oB;gB;a,E,K,I;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,I,iB,I,M;gB;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AA5KA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAoC;IAClD,OAAO,kBAAkB,QAAQ,oBAAoC;IACrE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,oBAAiC;IAC/D,QAAQ,oBAAkC,QAAQ;IAClD,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,Q;Y,W;Y,e;Y,Q;Y,S;Y,S;Y,O;Q;Q,O;Y,Y;Q;I;I,S;Q,Q,M,G;Q,S,I;Y;Y,I,C,a;Q;Q,a,W;YAUf,IAAA,OAAA,IAAA,CAAA,cAAA,YACA,IAAA,CAAA,UAAA;QAEA;QAEA,eAAA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,G,M;gB,I,G;a;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAnCA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,YAAY,SAAS,OAAO;IACvC,OAAO,SAAS,QAAQ,oBAAiC;IAC/C,OAAO,kBAAkB,QAAQ,oBAAiC;IAClE,OAAO,WAAW;IAE5B,OAAO,eAAe,QAAQ,mBAA8B;IAC5D,QAAQ,oBAA+B,QAAQ;IAC/C,OAAO,YAAY;IACnB,OAAO,SAAS;AAClB;AACA;kBAEe;;;;;A;A;A;A;A;;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,Q;Y,W;Y,S;Y,U;Y,S;Y,O;Q;Q,I,C,W,C,G,mB;Q,O;Y,c,O,O,E,E,C,G,uB;Y,c,I,C,M;Y,Y;Y,O;Y,S;Y,O;Y,S;Q;I;I,S;Q,M,Q,M;Y,I,C,e,I,C,M;Y,M,E,Y,E,O,E,K,E,G;Y,I,C,U,C,G,+C,E,Y,Q;Y,I,C,Q;Y,I,U,M,I,C,c,Q,I,a;Y,I,C,Q,Q,I,C,K,C;oB,M,G;oB,U;oB,S,I,C,S;gB,C;Y,I,C,U,M,I,C,Y,Q,I,a;Y,0B;Y,sE;Y,W;Y,4C;Y,0B;Y,sB;Y,Q;Y,I;Y,I,C,e,I,C,M;Q;Q,S,I;Y;Y,I,C,a;Q;Q;Y,I,I,C,iB,I,C,M,W,O;Y,M,Q,I,C,a,K,C,K,G;Y,I,O,O;Y,O;Q;Q,M;Y,I,C,e,I,C,M;Y,M,U,I,C,a,O,C,K,G,S,I,C,K,G;Y,M,W;mB,I,C;a;Y,M,Q,M,I,C,U,I,C;Y,I,C,Y,U,S;Q;Q,a,Q,E,O,E,K;Y,Q,I;Y,M,Q,S;Y,I,S,I,C,Y;gB,4B;gB,M,W,C,G,+C,E,Y,M,K;gB,M,Q,I,C,G,yC,E,I,C,O,I,C,S,O,I,C,S,U;gBA0Ff,QAAA,IAAA,SAAA;gBACA,MAAA;gBACA,IAAA;gBAEA,MAAA,eAAA,MAAA,MAAA,KAAA;oBACA,OAAA,MAAA,MAAA;wBACA,KAAA;4B,Q,I;4BAEA,MAAA,UAAA,IAAA,CAAA,SAAA;4BACA,MAAA,WAAA;4BACA;wBACA,KAAA;4BACA,QAAA,IAAA;4BACA,kBAAA,MAAA,SAAA,KAAA;gCACA,MAAA,WAAA,MAAA,SAAA;4BACA;4BACA;wBACA,KAAA;wBACA,KAAA;4B,Q,I;4BAEA,MAAA,MAAA,OAAA;4B,M,S,O;4BAGA,MAAA,UAAA,IAAA,CAAA,QAAA,CAAA,MAAA,MAAA,MAAA;4BACA,MAAA,WAAA;4BAEA,IAAA,CAAA,YAAA,UAAA,SAAA;4BACA;wBAEA;4BACA;oBACA;gBAEA,yCAAA;gBACA,uCAAA;gBACA,4CAAA;gBACA,0BAAA;gB,2D;gBAGA,8CAAA;gB,uC;gBAEA,0CAAA;gBACA,0BAAA;gBAEA,2DAAA;gBACA,IAAA;gB;YAEA;QAGA;QAEA,aAAA,WAAA;YACA,IAAA,OAAA,IAAA,CAAA,cAAA,YACA,IAAA,CAAA,UAAA;Q;QAIA,MAAA,aAAA,SAAA,EAAA,MAAA;Y,M,O,C,G,+C,E,Q;YAGA,IAAA,KAAA,KAAA,UAAA,CAAA,GAAA,uCAAA,EAAA,cAAA;gBACA,MAAA,UAAA,MAAA,CAAA,GAAA,+CAAA,EAAA,WAAA,QAAA;oBACA,CAAA,GAAA,uCAAA,EAAA;iBACA;gB,M,Q,Q,KAEA,CAAA,KAAA,GAAA,KAAA,UAAA,CAAA,GAAA,yCAAA,EAAA;gB,+B;gBAGA,IAAA,OAAA,OAAA,CAAA,GAAA,+CAAA,EAAA,YAAA,MAAA,GAAA;YACA,OAAA;gB,M,W,M,C,G,+C,E,qBAEA,WACA;gBAEA,MAAA,WAAA,MAAA,IAAA,CAAA,WAAA;gBAEA,KAAA,MAAA,WAAA,SAAA;oBACA,MAAA,KAAA,QAAA,GAAA;oBACA,MAAA,UAAA,CAAA,GAAA,+CAAA,EAAA,eAAA;oB,I,Q,Q,c,IAEA,OAAA,CAAA,GAAA,+CAAA,EAAA,YAAA;gB;YAGA;QACA;QAEA,WAAA,OAAA;YACA,IAAA,SACA,OAAA,QAAA;QAEA;QAEA,MAAA,eAAA,SAAA,EAAA,EAAA;Y,M,O,C,G,+C,E,Q;YAEA,IAAA,KAAA,KAAA,UAAA,CAAA,GAAA,sCAAA,EAAA,cACA,OAAA;gBAAA;aAAA;YAEA,OAAA,CAAA,GAAA,+CAAA,EAAA,cAAA,IAAA,WAAA,CAAA;gBACA,IAAA,KAAA,UAAA,UAAA,CAAA,GAAA,sCAAA,EAAA,cAAA;oBACA,CAAA,GAAA,+CAAA,EAAA,SAAA;oBACA,OAAA;gBACA;gB,O;YAEA;QACA;Q,M,Y,M;YAGA,MAAA,WAAA,CAAA,GAAA,+CAAA,EAAA,YAAA;YACA,MAAA,UAAA,MAAA,SAAA,WAAA;gBACA,CAAA,GAAA,sCAAA,EAAA;aACA;YACA,MAAA,QAAA,QAAA,KACA,CAAA,KAAA,GAAA,UAAA,UAAA,CAAA,GAAA,uCAAA,EAAA;YAEA,IAAA,OAAA;gBACA,CAAA,GAAA,+CAAA,EAAA,SAAA;gBACA,OAAA,MAAA,QAAA;YACA;QACA;IAKA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,UAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I;I,I,K,I,M,M;I,O,G,a;Q,a;Q,O;Y,a,I;Q;Q,I;Y,mB,S,M;gB,I,a;Y;Y,oB,S,M;gB,I,a;Y;Y,a,S,M;gB,O,I,Y;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,G;S;Q,I,G;Q,G,qB;Y,a;Q,G;Y,I,iB,I,M,Y,G,O;gB,a;Y,G,I,G,I,c,S,I;gB,O,G,O;oB,K,K;oB,a;gB,G;oB,G,e;wB,a;wB,O;4B,O,K;4B,U,S,G;gC,I,K,M,W;4B;4B,Y;wB;oB;oB,I,G;oB,G,Q;wB,a;oB,G;wB,I,G,I,G,K;qB;iB,E;Y,I,K,A,I,iB,I,M,W,G,O;gB,a;Y,G,I,G,I,O,S,M;gB,O,G,O;oB,K,O;oB,a;gB,G;oB,G,O;wB,a;oB,G;wB,I,G,I,G,O,K;qB;oB,I,G;oB,O,Y,K,G,O;wB,a;oB,G;wB,G,O;4B,a;wB,G;4B,G,mB;gC,O;oC,W;oC,Y,O;gC;4B;yB,E;wB,I,G;wB,G,O;4B,a;wB,G;4B,I,G,I,G,O,Y;yB;qB,I,G,O;wB,a;oB,G;wB,G,O;4B,a;4B,O,O,Q;wB,G;4B,I,G,I,G,O,Q;yB;qB;iB;Y,I,K,A,I,iB,I,M,U,G,O;gB,a;Y,G;gB,G,uB;oB,O;wB,W;oB;gB;a,E,K,A,I,iB,I,M,U,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;a,E,K,A,I,iB,I,M,Q,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,G;iB;a,E,K,I;S;Q,I,G;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,Y;oB;gB;Y,G;gB,I,G;a;Y,I,G;Y,G,a;gB,a;gB,O;oB,Y,I;gB;gB,I;oB,S,I;gB;Y,G;gB,I,G;a;S,E;K,E;A;A,I,kB,E;A,Q,S;A,Q,kB;;;;;AAzOA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A;A,O,e,S,c;I,O;A;AELA,MAAA,eAAA,QAAA;AAES,QAAA,0BAFF,aAAA;;;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,I,E,S,O;gB,Q,O;Y,G,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,O,e,S,c;I,O;A;AEAP,MAAM;IACJ,aAAA,CAAe;IAEf,2BAA2B,KAAU,EAArC;QACE,OAAO,IAAI,CAAC,uBAAuB;YACjC;gBACE,OAAO;gBACP,WAAW,IAAI,CAAC,aAAa,OAAO;YACrC;SACF;IACH;IAEA,uBACE,aAEmD,EAHrD;QAKE,uBAAuB;QAEvB,IAAI,YAAY,MAAM,QAAQ,iBAC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","sources":["node_modules/spinal-env-viewer-plugin-bacnet-manager/src/index.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/index.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/bacnet/discoverBtn.js","node_modules/spinal-env-viewer-context-menu-service/index.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextMenuService.js","node_modules/spinal-env-viewer-context-menu-service/SpinalContextApp.js","node_modules/spinal-env-viewer-context-menu-service/constants.js","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/js/utilities.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/bacnet/locateBimObject.js","node_modules/spinal-env-viewer-plugin-standard_button/js/utilities.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/viewer/createNetworkContext.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/viewer/addOrgan.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/js/constants.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/viewer/linkProfil.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/viewer/unLinkProfil.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/bacnet/createBacnetValue.js","node_modules/@parcel/runtime-js/lib/runtime-df6f79664660b14d.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/bacnet/monitoring.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/buttons/bacnet/organBacnetMonitor.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/discoverNetworkPanel.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/discoverTable.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/js/stateEnum.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/broadcastTemplate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/unicastTemplate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/inputData.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/manageDevicesPanel.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/monitoring/devicemonitor.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/js/monitorState.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/panels/monitorConnectorPanel.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/index.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/createContext.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/modifyTimeInterval.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/addOrgan.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/service/index.js","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/addOrganBtn.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/linkToProfilDialog.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/links/LinkComponent.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/components/links/linkToGroupTemplate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/unLinkToProfilDialog.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/linkToBimAutomate.vue","node_modules/spinal-env-viewer-plugin-bacnet-manager/src/vue/dialogs/getBacnetValue.vue","node_modules/spinal-env-viewer-bim-manager-service/dist/index.js","node_modules/spinal-env-viewer-bim-manager-service/src/index.ts","node_modules/spinal-env-viewer-bim-manager-service/dist/bimObjects/bimService.js","node_modules/spinal-env-viewer-bim-manager-service/src/bimObjects/bimService.ts","node_modules/@parcel/node-resolver-core/lib/_empty.js"],"sourcesContent":["import \"./buttons\";\nimport \"./vue/panels\";\nimport \"./vue/dialogs\";","import discoverNetworkBtn from \"./bacnet/discoverBtn\";\n// import startBtn from \"./bacnet/resume\";\n// import stopBtn from \"./bacnet/stop\";\n\n// import editTimeIntervalBtn from \"./bacnet/editTimeInterval\";\n// import linkDeviceToBim from \"./viewer/linkDeviceToBim\";\nimport locateBimObject from \"./bacnet/locateBimObject\";\n\nimport createNetworkContext from \"./viewer/createNetworkContext\";\nimport addOrganBtn from \"./viewer/addOrgan\";\nimport linkProfilToBmsDevice from \"./viewer/linkProfil\";\nimport unLinkProfilToBmsDevice from \"./viewer/unLinkProfil\";\n\nimport createBacnetValue from \"./bacnet/createBacnetValue\";\nimport manageMonitoring from \"./bacnet/monitoring\";\nimport organBacnetMonitor from \"./bacnet/organBacnetMonitor\";\n\n\nexport {\n   discoverNetworkBtn,\n   createNetworkContext,\n   // startBtn,\n   // stopBtn,\n   // editTimeIntervalBtn,\n   addOrganBtn,\n   linkProfilToBmsDevice,\n   unLinkProfilToBmsDevice,\n   // linkDeviceToBim,\n   locateBimObject,\n\n   createBacnetValue,\n   manageMonitoring,\n   organBacnetMonitor\n}","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { BACNET_ORGAN_TYPE } from \"spinal-model-bacnet\";\nimport { SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\n\nimport utilities from \"../../js/utilities\";\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass DiscoverNetworkBtn extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Discover and Create BMS subnetwork\",\n         \"This button allows to discover network and create\", {\n         icon: \"network_check\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   async isShown(option) {\n      const  typeSelected = option.selectedNode.type.get();\n      const id = option.selectedNode.id.get();\n      const contextId = option.context.id.get();\n\n      if(typeSelected === BACNET_ORGAN_TYPE) return true;\n\n      if(typeSelected === SpinalBmsNetwork.nodeTypeName) {\n         const organ = await utilities.getOrgan(id, contextId);\n\n         return organ && organ.type.get() == BACNET_ORGAN_TYPE ? true : -1;\n      }\n      \n      \n      return -1;\n   }\n\n   action(option) {\n      spinalPanelManagerService.openPanel(\"discoverNetworkPanel\", option)\n   }\n\n}\n\nconst discoverNetworkBtn = new DiscoverNetworkBtn()\n\nspinalContextMenuService.registerApp(SIDEBAR, discoverNetworkBtn, [3]);\n\nexport default discoverNetworkBtn;","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalContextMenuService = require(\"./SpinalContextMenuService\");\nconst SpinalContextApp = require(\"./SpinalContextApp\");\nconst Constant = require('./constants');\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalContextMenuService === \"undefined\")\n  G_root.spinal.spinalContextMenuService = new SpinalContextMenuService();\n\nmodule.exports = {\n  constants: Constant,\n  spinalContextMenuService: G_root.spinal.spinalContextMenuService,\n  SpinalContextApp,\n  install(Vue) {\n    Vue.prototype.$spinalContextMenuService =\n      G_root.spinal.spinalContextMenuService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport * as Q from 'q';\nvar debounce = require('lodash.debounce');\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} apps key = hookname, value array of apps\n * @class SpinalContextMenuService\n */\nclass SpinalContextMenuService {\n  /**\n   *Creates an instance of SpinalContextMenuService.\n   * @memberof SpinalContextMenuService\n   */\n  constructor() {\n    this.apps = {};\n    this.promiseByAppProfileId = {};\n    this.appRdy = Q.defer();\n    this.debouncedRdy = debounce(\n      () => {\n        this.appRdy.resolve();\n        this.debouncedRdy = () => {};\n      },\n      1000,\n      { leading: false, trailing: true }\n    );\n  }\n\n  // waitRdy() {\n  //   this.appRdy.promise;\n  // }\n\n  /**\n   * Return true if user has access to this appProfile\n   * @param appProfileId\n   * @return {PromiseLike<boolean > | Promise<boolean>}\n   */\n  async hasUserRight(appProfileId) {\n    this.debouncedRdy();\n    await window.spinal.spinalSystem.init();\n    const path =\n      '/etc/UserProfileDir/' + window.spinal.spinalSystem.getUser().username;\n    const userProfile = await window.spinal.spinalSystem.load(path);\n    let res = false;\n    if (userProfile) {\n      for (let i = 0; i < userProfile.appProfiles.length && !res; i++) {\n        res = ((1 << userProfile.appProfiles[i]) & appProfileId) !== 0;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * method to register the Application to a hook\n   *\n   * @param {string} hookname the place where is application button is located\n   * @param {SpinalContextApp} spinalContextApp the application\n   * @param {number} appProfileId id of the group that can use the application\n   * button\n   * @memberof SpinalContextMenuService\n   */\n  registerApp(hookname, spinalContextApp, appProfileId) {\n    this.debouncedRdy();\n    if (typeof appProfileId === 'undefined') {\n      console.warn(\n        'Deprecated: The usage of this function without the third' +\n          ' parameter appProfileId is deprecated your button is lock for admin' +\n          ' only until you set the third parameter'\n      );\n      appProfileId = 1;\n    }\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      appsInHooks = this.apps[hookname] = [];\n    }\n\n    if (!this.promiseByAppProfileId.hasOwnProperty(appProfileId)) {\n      this.promiseByAppProfileId[appProfileId] =\n        this.hasUserRight(appProfileId);\n    }\n\n    this.promiseByAppProfileId[appProfileId].then((hasAccess) => {\n      // push the app if not exist ans user has access to the button\n      if (hasAccess && appsInHooks.indexOf(spinalContextApp) === -1) {\n        appsInHooks.push(spinalContextApp);\n      }\n    });\n  }\n\n  /**\n   * method to get the applications registered to a hookname\n   *\n   * @param {String} hookname\n   * @param {object} option\n   * @memberof SpinalContextMenuService\n   * @returns {Promise} resolve : [spinalContextApp, ...]; reject: Error\n   */\n  async getApps(hookname, option) {\n    await this.appRdy.promise;\n    // get the array of apps of the hook\n    let appsInHooks = this.apps[hookname];\n\n    // create the array if not exist\n    if (!(appsInHooks instanceof Array)) {\n      return Promise.resolve([]);\n    }\n    let promises = appsInHooks.map(async function (e, idx) {\n      try {\n        const res = await e.isShown(option);\n        return res === -1 ? -1 : e;\n      } catch (error) {\n        console.error(error);\n        return -1;\n      }\n    });\n    try {\n      const appRes = await Promise.all(promises);\n      return appRes.filter((itm) => itm !== -1);\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = SpinalContextMenuService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Interface like class to define a Contextual Application button\n * @see https://material.io/tools/icons/?style=baseline for material icons\n *\n * @class SpinalContextApp\n * @property {string} label=notset short name to be shown in the application\n * @property {string} description description of what the Application button do\n * @property {object} buttonCfg Object configuration of the Application button\n * @property {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n * @property {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n * @property {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n * @property {string} buttonCfg.fontColor=#FFFFFF font color of the button\n * @property {objet} [badgeCfg] Object configuration of the Application button badge\n * @property {string} badgeCfg.label string shown in a badge; if empty it's not shown\n * @property {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n * @property {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n */\nclass SpinalContextApp {\n  /**\n   * Creates an instance of SpinalContextApp.\n   * @param {string} label=notset short name to be shown in the application\n   * @param {string} description description of what the Application button do\n   * @param {object} buttonCfg Object configuration of the Application button\n   * @param {string} buttonCfg.icon=tab can be a font-awsome or material icon string\n   * @param {string} buttonCfg.icon_type=in Where to place the icon in the `md-icon`. Should be one of theses `class`, `in`, `src`\n   * @param {string} buttonCfg.backgroundColor=#0000FF backgroud color of the button\n   * @param {string} buttonCfg.fontColor=#FFFFFF font color of the button\n   * @param {objet} [badgeCfg] Object configuration of the Application button badge\n   * @param {string} badgeCfg.label string shown in a badge; if empty it's not shown\n   * @param {string} badgeCfg.backgroundColor=#FF0000 backgroud color of the badge\n   * @param {string} badgeCfg.fontColor=#FFFFFF font color of the badge\n   * @memberof SpinalContextApp\n   */\n  constructor(label, description, buttonCfg, badgeCfg = {}) {\n    this.label = label || \"notset\";\n    this.description = description || \"\";\n    this.buttonCfg = {\n      icon: buttonCfg.icon || \"tab\",\n      icon_type: buttonCfg.icon_type || \"in\",\n      backgroundColor: colorHash(buttonCfg.backgroundColor || \"#0000FF\"),\n      fontColor: colorHash(buttonCfg.fontColor || \"#FFFFFF\")\n    };\n\n    this.badgeCfg = {\n      label: badgeCfg.label || \"\",\n      backgroundColor: colorHash(badgeCfg.backgroundColor || \"#FF0000\"),\n      fontColor: colorHash(badgeCfg.fontColor || \"#FFFFFF\")\n    };\n  }\n\n  /**\n   * Method called by `SpinalContextMenuService.getApps`\n   * to filter the Application button to show in the context hook\n   *\n   * @param {object} option\n   * @memberof SpinalContextApp\n   * @returns {Promise} Resolve: not shown if === -1;\n   */\n  isShown(option) {}\n\n  /**\n   * Method to call on click of the application button\n   *\n   * @param {object} option {}\n   * @memberof SpinalContextApp\n   */\n  action(option) {}\n}\n\nmodule.exports = SpinalContextApp;\n\nfunction colorHash(color) {\n  if (color[0] === \"#\") return color;\n  return \"#\" + color;\n}\n","\n\nmodule.exports = {\n  ADMINISTRATEUR: 'ADMINISTRATEUR',\n  MAINTENEUR: 'MAINTENEUR',\n  INTEGRATEUR: 'INTEGRATEUR',\n  ASSET_MANAGEUR: 'ASSET MANAGER',\n};","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","import { SpinalBmsDevice, SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nimport { SpinalListenerModel } from \"spinal-model-bacnet\";\nimport {\n  SPINAL_RELATION_PTR_LST_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n} from \"spinal-model-graph\";\n\nconst bacnet = require(\"bacstack\");\n\nimport { DeviceProfileUtilities } from \"spinal-env-viewer-plugin-network-tree-service\";\n\nexport default class Utils {\n  static async getBmsDevices(contextId, id) {\n    const info = SpinalGraphService.getInfo(id);\n    if (info.type.get() === SpinalBmsDevice.nodeTypeName) {\n      return [info];\n    }\n\n    if (info.type.get() === SpinalBmsNetwork.nodeTypeName) {\n      return SpinalGraphService.getChildren(id, [SpinalBmsDevice.relationName]);\n    }\n\n    return SpinalGraphService.findInContext(id, contextId, (node) => {\n      if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n        SpinalGraphService._addNode(node);\n        return true;\n      }\n      return false;\n    });\n  }\n\n  static async getNetwork(id, contextId) {\n    const realNode = SpinalGraphService.getRealNode(id);\n    if (!realNode) return;\n    if (realNode.getType().get() === SpinalBmsNetwork.nodeTypeName)\n      return realNode;\n\n    return realNode\n      .getParents([SpinalBmsDevice.relationName])\n      .then((parents) => {\n        const found = parents.find((el) => {\n          if (el && el.contextIds) {\n            return el.contextIds[contextId];\n          }\n        });\n\n        if (found) SpinalGraphService._addNode(found);\n        return found;\n      });\n  }\n\n  static getOrgan(networkId, contextId) {\n    const realNode = SpinalGraphService.getRealNode(networkId);\n    return realNode\n      .getParents([SpinalBmsNetwork.relationName])\n      .then((parents) => {\n        const found = parents.find((el) => {\n          if (el && el.contextIds) {\n            return el.contextIds[contextId];\n          }\n        });\n\n        if (found) {\n          return found.getElement();\n        }\n      });\n  }\n\n  static getModel(deviceId) {\n    const realNode = SpinalGraphService.getRealNode(deviceId);\n    if (!realNode) return Promise.resolve(-1);\n    return new Promise((resolve) => {\n      if (realNode.info.listener) {\n        return realNode.info.listener.load((data) => resolve(data));\n      }\n\n      resolve(-1);\n    });\n  }\n\n  // static async startMonitoring(\n  //   graph,\n  //   contextId,\n  //   deviceId,\n  //   networkId,\n  //   argModel,\n  //   argMonitor,\n  //   organModel\n  // ) {\n  //   try {\n  //     if (!this.hasProfilLinked(deviceId)) return -1;\n\n  //     // const context = SpinalGraphService.getRealNode(contextId);\n  //     // const realNode = SpinalGraphService.getRealNode(deviceId);\n\n  //     const model =\n  //       argModel && argModel !== -1 ? argModel : await this.getModel(deviceId);\n\n  //     const monitor =\n  //       argMonitor || (await this.getMonitoringInfo(deviceId, contextId));\n\n  //     // console.log(model, monitor);\n  //     // return this.createOrGetListenerModel(\n  //     //   graph,\n  //     //   contextId,\n  //     //   deviceId,\n  //     //   networkId,\n  //     //   model,\n  //     //   monitor,\n  //     //   organModel\n  //     // );\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n\n  static async stopMonitoring(deviceId, argModel) {\n    try {\n      if (!this.hasProfilLinked(deviceId)) return -1;\n      // const realNode = SpinalGraphService.getRealNode(deviceId);\n      const model =\n        argModel && argModel !== -1 ? argModel : await this.getModel(deviceId);\n      if (model != -1) model.listen.set(false);\n    } catch (error) {}\n  }\n\n  static async getProfilIntervals(profilId) {\n    const intervalsNodes = await DeviceProfileUtilities.getIntervalNodes(\n      profilId\n    );\n\n    const promises = intervalsNodes.map(async (el) => {\n      return {\n        monitoring: await this.getSharedAttribute(el),\n        children: await this.getEndpointsObjectIds(el),\n      };\n    });\n\n    return Promise.all(promises)\n      .then((result) => {\n        return result;\n      })\n      .catch((err) => {\n        console.error(err);\n        return [];\n      });\n  }\n\n  // static async getMonitoringInfo(deviceId, contextId) {\n  // const profil = await this.getProfilLinkedToDevice(deviceId);\n  // const intervalsNodes = await DeviceProfileUtilities.getIntervalNodes(\n  //   profil.id\n  // );\n  // const promises = intervalsNodes.map(async (el) => {\n  //   return {\n  //     monitoring: await this.getSharedAttribute(el),\n  //     children: await this.getEndpointsObjectIds(\n  //       el,\n  //       profilContext.getId().get()\n  //     ),\n  //   };\n  // });\n  // return Promise.all(promises).then((result) => {\n  //   const data = result.map(({ monitoring, children }) => {\n  //     return {\n  //       monitoring: monitoring.Monitoring,\n  //       interval: monitoring.IntervalTime,\n  //       children,\n  //     };\n  //   });\n  //   const profilNode = SpinalGraphService.getRealNode(profil.id);\n  //   return new SpinalMonitorInfoModel(profilNode, data);\n  // });\n  // }\n\n  static async getSharedAttribute(intervalNode) {\n    const realNode = SpinalGraphService.getRealNode(intervalNode.id.get());\n    const attrs = await serviceDocumentation.getAttributesByCategory(\n      realNode,\n      \"Supervision\"\n    );\n    // const cat = await serviceDocumentation.getCategoryByName(\n    //   realNode,\n    //   \"Supervision\"\n    // );\n    const obj = {};\n    for (let i = 0; i < attrs.length; i++) {\n      const element = attrs[i];\n      obj[element.label.get()] = element.value.get();\n    }\n\n    return obj;\n  }\n\n  static async getEndpointsObjectIds(intervalNode) {\n    const nodeId = intervalNode.id.get();\n    const profilItems = await SpinalGraphService.getChildren(\n      nodeId,\n      \"hasIntervalTime\"\n    );\n\n    const promises = profilItems.map(async (profilItem) => {\n      return {\n        instance: await this.getIDX(profilItem.id.get()),\n        type: this._getBacnetObjectType(profilItem.type.get()),\n      };\n    });\n\n    return Promise.all(promises).then((result) => {\n      return result.flat();\n    });\n  }\n\n  static _getBacnetObjectType(type) {\n    const objectName = (\n      \"object_\" + type.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`)\n    ).toUpperCase();\n    return bacnet.enum.ObjectTypes[objectName];\n  }\n\n  static async getIDX(nodeId) {\n    const realNode = SpinalGraphService.getRealNode(nodeId);\n    const attrs = await serviceDocumentation.getAttributesByCategory(\n      realNode,\n      \"default\"\n    );\n\n    const found = attrs.find((attr) => attr.label.get() === \"IDX\");\n    if (found) return parseInt(found.value.get()) + 1;\n\n    // const cat = await serviceDocumentation.getCategoryByName(\n    // realNode,\n    // \"default\"\n    // );\n\n    // if (cat.element != undefined) {\n    //   for (let i = 0; i < cat.element.length; i++) {\n    //     const element = cat.element[i];\n    //     if (element.label.get() === \"IDX\")\n    //       return parseInt(element.value.get()) + 1;\n    //   }\n    // }\n  }\n\n  static hasProfilLinked(nodeId) {\n    const realNode = SpinalGraphService.getRealNode(nodeId);\n    if (realNode.hasRelation(\"hasBacnetProfile\", SPINAL_RELATION_PTR_LST_TYPE))\n      return true;\n    if (realNode.hasRelation(\"hasBacnetProfile\", SPINAL_RELATION_LST_PTR_TYPE))\n      return true;\n\n    return false;\n  }\n\n  static getProfilLinkedToDevice(deviceId) {\n    return SpinalGraphService.getChildren(deviceId, [\"hasBacnetProfile\"]).then(\n      (result) => {\n        const [profil] = result;\n        if (profil) return profil.get();\n        // return result.map((el) => el.get());\n      }\n    );\n  }\n\n  static async createOrModifyListenerModel(\n    graph,\n    context,\n    network,\n    listenerModel,\n    monitoringInfo,\n    organModel,\n    deviceNode\n  ) {\n    if (listenerModel && listenerModel != -1) {\n      return this._modListenerModel(listenerModel, monitoringInfo);\n    }\n\n    return this._createListenerModel(\n      graph,\n      context,\n      network,\n      organModel,\n      deviceNode,\n      monitoringInfo\n    );\n  }\n\n  static _modListenerModel(listenerModel, monitoringInfo) {\n    if (!monitoringInfo) {\n      listenerModel.listen.set(false);\n      return -1;\n    }\n\n    if (listenerModel.monitor)\n      listenerModel.mod_attr(\"monitor\", monitoringInfo);\n    else {\n      listenerModel.add_attr({\n        monitor: monitoringInfo,\n      });\n    }\n\n    listenerModel.listen.set(true);\n    return listenerModel;\n  }\n\n  static _createListenerModel(\n    graph,\n    context,\n    network,\n    organ,\n    deviceNode,\n    monitoringInfo\n  ) {\n    const spinalListener = new SpinalListenerModel(\n      graph,\n      context,\n      network,\n      deviceNode,\n      organ,\n      monitoringInfo\n    );\n\n    deviceNode.info.add_attr({\n      listener: new Ptr(spinalListener),\n    });\n\n    return spinalListener;\n  }\n\n  static waitModelReady(model) {\n    return new Promise((resolve, reject) => {\n      const timeId = setInterval(() => {\n        if (FileSystem._objects[model._server_id] === model) {\n          console.log(\"model ready\", FileSystem._objects[model._server_id]);\n          clearInterval(timeId);\n          resolve(model);\n        }\n      }, 300);\n    });\n  }\n\n  static async consumeBatch(promises, batchSize = 10) {\n    let index = 0;\n    const result = [];\n    while (index < promises.length) {\n      let endIndex = index + batchSize;\n      if (promises.length <= endIndex) endIndex = promises.length;\n      const slice = promises.slice(index, endIndex);\n      const resProm = await Promise.all(slice.map((e) => e()));\n      result.push(...resProm);\n      index = endIndex;\n    }\n    return result;\n  }\n}\n","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { SpinalBmsDevice, SpinalBmsEndpoint } from \"spinal-model-bmsnetwork\";\n\nimport { BIM_OBJECT_TYPE } from \"spinal-env-viewer-plugin-forge/dist/Constants\";\n\nimport { utilities } from \"spinal-env-viewer-plugin-standard_button/js/utilities\";\n\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass LocateBimObjectBtn extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Locate object linked in 3D model\",\n         \"Locate object linked in 3D model\", {\n         icon: \"pageview\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   async isShown(option) {\n      const type = option.selectedNode.type.get();\n\n      if (type === SpinalBmsDevice.nodeTypeName || type === SpinalBmsEndpoint.nodeTypeName) return true;\n\n      return -1;\n   }\n\n   async action(option) {\n      const id = option.selectedNode.id.get();\n      const contextId = option.context.id.get();\n\n      const parents = await SpinalGraphService.getParents(id, [SpinalBmsDevice.relationName, SpinalBmsEndpoint.relationName])\n      const founds = parents.filter(el => el.type.get() === BIM_OBJECT_TYPE).map(el => SpinalGraphService.getRealNode(el.id.get()))\n\n      if (founds.length === 0) {\n         window.alert(\"No bim object linked\");\n         return;\n      }\n\n      const viewer = window.spinal.ForgeViewer.viewer;\n\n      utilities.sortBIMObjectByModel(founds).then((lstByModel) => {\n         let arrayToFit = []\n         for (let i = 0; i < lstByModel.length; i++) {\n            const element = lstByModel[i];\n            for (let j = 0; j < element.model.modelScene.length; j++) {\n               const scene = element.model.modelScene[j];\n               scene.model.selector.setSelection(element.dbid, scene.model, \"selectOnly\");\n\n               arrayToFit.push({\n                  model: scene.model,\n                  selection: element.dbid\n               })\n            }\n         }\n         viewer.fitToView(arrayToFit);\n      }).catch((err) => {\n         console.error(err);\n      });\n\n   }\n\n}\n\n\n\nconst locateBimObjectBtn = new LocateBimObjectBtn()\n\nspinalContextMenuService.registerApp(SIDEBAR, locateBimObjectBtn, [3]);\n\nexport default locateBimObjectBtn;","/*\n * Copyright 2021 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n// import {\n//   // ROOMS_CATEGORY_RELATION,\n//   // ROOMS_TO_ELEMENT_RELATION,\n//   // ROOMS_GROUP_RELATION,\n//   // EQUIPMENTS_CATEGORY_RELATION,\n//   // EQUIPMENTS_TO_ELEMENT_RELATION,\n//   // EQUIPMENTS_GROUP_RELATION,\n//   // ROOMS_GROUP_CONTEXT,\n//   // ROOMS_GROUP,\n//   // ROOMS_CATEGORY,\n//   // EQUIPMENTS_GROUP_CONTEXT,\n//   // EQUIPMENTS_CATEGORY,\n//   // EQUIPMENTS_GROUP\n\n//   groupService\n\n// } from 'spinal-env-viewer-room-manager/services/service';\n\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\n\nimport {\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n  REFERENCE_RELATION,\n} from \"spinal-env-viewer-context-geographic-service/build/constants\";\n\nimport { SpinalBmsEndpoint } from \"spinal-model-bmsnetwork\";\n\nimport { CONSTANTS } from \"spinal-env-viewer-plugin-network-tree-service\";\n\n\nconst SELECTrelationList = [\n  SITE_RELATION,\n  BUILDING_RELATION,\n  FLOOR_RELATION,\n  ZONE_RELATION,\n  ROOM_RELATION,\n  EQUIPMENT_RELATION,\n  REFERENCE_RELATION,\n  `${REFERENCE_RELATION}.ROOM`,\n  \"hasBIMObject\", // for old system\n  // groupService.constants.CONTEXT_TO_CATEGORY_RELATION,\n  // groupService.constants.CATEGORY_TO_GROUP_RELATION,\n  // groupService.constants.GROUP_TO_ROOMS_RELATION,\n  // groupService.constants.GROUP_TO_EQUIPMENTS_RELATION,\n  // groupService.constants.GROUP_TO_ENDPOINT_RELATION,\n  groupManagerService.constants.CONTEXT_TO_CATEGORY_RELATION,\n  groupManagerService.constants.CATEGORY_TO_GROUP_RELATION,\n  ...Object.values(groupManagerService.constants.OLD_RELATIONS_TYPES),\n  `groupHas${ROOM_TYPE}`,\n  `groupHas${EQUIPMENT_TYPE}`,\n  `groupHas${SITE_TYPE}`,\n  `groupHas${BUILDING_TYPE}`,\n  `groupHas${FLOOR_TYPE}`,\n  `groupHas${ZONE_TYPE}`,\n  `groupHas${SpinalBmsEndpoint.nodeTypeName}`,\n  // CONSTANTS.NETWORK_RELATION,\n  // CONSTANTS.NETWORK_BIMOJECT_RELATION\n];\n\nconst isShownParam = [\n  SITE_TYPE,\n  BUILDING_TYPE,\n  FLOOR_TYPE,\n  ZONE_TYPE,\n  ROOM_TYPE,\n  EQUIPMENT_TYPE,\n  // ...groupService.constants.CONTEXTS_TYPES,\n  // ...groupService.constants.GROUPS_TYPES,\n  // groupService.constants.CATEGORY_TYPE\n  ...Object.values(groupManagerService.constants.OLD_CONTEXTS_TYPES),\n  ...Object.values(groupManagerService.constants.OLD_GROUPS_TYPES),\n  groupManagerService.constants.CATEGORY_TYPE,\n  `${ROOM_TYPE}Group`,\n  `${EQUIPMENT_TYPE}Group`,\n  `${SITE_TYPE}Group`,\n  `${BUILDING_TYPE}Group`,\n  `${FLOOR_TYPE}Group`,\n  `${ZONE_TYPE}Group`,\n  `${ROOM_TYPE}GroupContext`,\n  `${EQUIPMENT_TYPE}GroupContext`,\n  `${SITE_TYPE}GroupContext`,\n  `${BUILDING_TYPE}GroupContext`,\n  `${FLOOR_TYPE}GroupContext`,\n  `${ZONE_TYPE}GroupContext`,\n  // CONSTANTS.CONTEXT_TYPE,\n  // CONSTANTS.NETWORK_TYPE,\n];\n\nconst utilities = {\n  async sortBIMObjectByModel(arrayOfBIMObject) {\n    let arrayModel = [];\n    for (const key in spinal.BimObjectService.mappingBimFileIdModelId) {\n      if (spinal.BimObjectService.mappingBimFileIdModelId.hasOwnProperty(key)) {\n        const element = spinal.BimObjectService.mappingBimFileIdModelId[key];\n        let obj = {\n          dbid: [],\n          model: element,\n        };\n        arrayModel.push(obj);\n      }\n    }\n    for (let i = 0; i < arrayOfBIMObject.length; i++) {\n      SpinalGraphService._addNode(arrayOfBIMObject[i]);\n      let bim = SpinalGraphService.getNode(arrayOfBIMObject[i].info.id.get());\n      try {\n        let spinalModel =\n          window.spinal.BimObjectService.mappingBimFileIdModelId[\n            bim.bimFileId.get()\n          ];\n        if (spinalModel) {\n          for (let j = 0; j < arrayModel.length; j++) {\n            const element = arrayModel[j];\n            if (element.model.modelId === spinalModel.modelId) {\n              element.dbid.push(bim.dbid.get());\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"skip node because bimFileId is not defined\", error);\n      }\n    }\n    return arrayModel;\n  },\n};\n\nmodule.exports = {\n  SELECTrelationList,\n  isShownParam,\n  utilities,\n};\n","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst HEADERBAR = \"GraphManagerTopBar\";\n\n\nclass CreateNetworkContextBtn extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Create BMS network context\",\n         \"This button allows to create network context\", {\n         icon: \"network_check\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   isShown(option) {\n      return Promise.resolve(true);\n   }\n\n   action(option) {\n      spinalPanelManagerService.openPanel(\"createGTBNetworkContextDialog\", option);\n   }\n\n}\n\nconst createNetworkContextBtn = new CreateNetworkContextBtn()\n\nspinalContextMenuService.registerApp(HEADERBAR, createNetworkContextBtn, [3]);\n\nexport default createNetworkContextBtn;","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { CONTEXT_TYPE } from \"../../js/constants\";\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass AddOrganButton extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Add Organ\",\n         \"Add Organ\", {\n         icon: \"add\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   isShown(option) {\n      const selectedType = option.selectedNode.type.get();\n      return Promise.resolve(selectedType === CONTEXT_TYPE ? true : -1);\n   }\n\n   action(option) {\n      spinalPanelManagerService.openPanel(\"addOrganDialogDialog\", option)\n   }\n\n}\n\nconst addOrganButton = new AddOrganButton()\n\nspinalContextMenuService.registerApp(SIDEBAR, addOrganButton, [3]);\n\nexport default addOrganButton;","const bacnet = require(\"bacstack\");\nconst ObjectTypes = bacnet.enum.ObjectTypes;\n\nexport const NETWORK_TYPE = \"GTBNetwork\";\nexport const CONTEXT_TYPE = \"Network\";\n\nexport const MESSAGES = {\n  wait: {\n    text: \"waiting...\",\n    id: \"waiting\",\n  },\n  recover: {\n    text: \"recovering...\",\n    id: \"recover\",\n  },\n  success: {\n    text: \"success\",\n    id: \"success\",\n  },\n  error: {\n    text: \"fail\",\n    id: \"error\",\n  },\n};\n\nexport const SENSOR_TYPES = [\n  {\n    name: \"ANALOG INPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_ANALOG_INPUT,\n    id: ObjectTypes.OBJECT_ANALOG_INPUT,\n  },\n  {\n    name: \"ANALOG OUTPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_ANALOG_OUTPUT,\n    id: ObjectTypes.OBJECT_ANALOG_OUTPUT,\n  },\n  {\n    name: \"ANALOG VALUE\",\n    checked: true,\n    value: ObjectTypes.OBJECT_ANALOG_VALUE,\n    id: ObjectTypes.OBJECT_ANALOG_VALUE,\n  },\n  {\n    name: \"BINARY INPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_BINARY_INPUT,\n    id: ObjectTypes.OBJECT_BINARY_INPUT,\n  },\n  {\n    name: \"BINARY OUTPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_BINARY_OUTPUT,\n    id: ObjectTypes.OBJECT_BINARY_OUTPUT,\n  },\n  {\n    name: \"BINARY VALUE\",\n    checked: true,\n    value: ObjectTypes.OBJECT_BINARY_VALUE,\n    id: ObjectTypes.OBJECT_BINARY_VALUE,\n  },\n  {\n    name: \"BINARY LIGHTING OUTPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_BINARY_LIGHTING_OUTPUT,\n    id: ObjectTypes.OBJECT_BINARY_LIGHTING_OUTPUT,\n  },\n  {\n    name: \"MULTI STATE INPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_MULTI_STATE_INPUT,\n    id: ObjectTypes.OBJECT_MULTI_STATE_INPUT,\n  },\n  {\n    name: \"MULTI STATE OUTPUT\",\n    checked: true,\n    value: ObjectTypes.OBJECT_MULTI_STATE_OUTPUT,\n    id: ObjectTypes.OBJECT_MULTI_STATE_OUTPUT,\n  },\n  {\n    name: \"MULTI STATE VALUE\",\n    checked: true,\n    value: ObjectTypes.OBJECT_MULTI_STATE_VALUE,\n    id: ObjectTypes.OBJECT_MULTI_STATE_VALUE,\n  },\n];\n","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalBmsDevice, SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\nimport {\n   spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\n\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport { BACNET_ORGAN_TYPE } from \"spinal-model-bacnet\";\nimport utilities from \"../../js/utilities\";\n\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass LinkProfilToBmsDevice extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Link Bms device to Profil\",\n         \"Link Bms device to Profil\", {\n         icon: \"add_link\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   async isShown(option) {\n      const id = option.selectedNode.id.get();\n      const type = option.selectedNode.type.get();\n      const contextId = option.context.id.get();\n      if(type === BACNET_ORGAN_TYPE) return true;\n\n      let network = type === SpinalBmsNetwork.nodeTypeName ? SpinalGraphService.getRealNode(id) : type === SpinalBmsDevice.nodeTypeName && await utilities.getNetwork(id, contextId);\n\n      if(network) {\n         const networkId = network.getId().get();\n         const organ = await utilities.getOrgan(networkId, contextId);\n         return organ && organ.type.get() === BACNET_ORGAN_TYPE  ? true : -1;\n      }\n\n      return -1;\n   }\n\n   async action(option) {\n      const bmsContextId = option.context.id.get();\n      const nodeId = option.selectedNode.id.get();\n\n      // const bmsDevices = await getAllDevices(bmsContextId, nodeId);\n\n      spinalPanelManagerService.openPanel(\"linkProfilToBmsDeviceDialog\", {\n         bmsContextId,\n         nodeId,\n      })\n   }\n\n}\n\n\n\n\n\n\n\nconst linkProfilToBmsDevice = new LinkProfilToBmsDevice()\n\nspinalContextMenuService.registerApp(SIDEBAR, linkProfilToBmsDevice, [3]);\n\nexport default linkProfilToBmsDevice;","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalBmsDevice, SpinalBmsNetwork, SpinalBmsEndpoint } from \"spinal-model-bmsnetwork\";\nimport {\n   spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\n\nimport { BACNET_ORGAN_TYPE } from \"spinal-model-bacnet\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport utilities from \"../../js/utilities\";\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass UnLinkProfilToBmsDevice extends SpinalContextApp {\n   constructor() {\n      super(\n         \"unlink Bms device to Profil\",\n         \"unlink Bms device to Profil\", {\n         icon: \"link_off\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   async isShown(option) {\n      const id = option.selectedNode.id.get();\n      const type = option.selectedNode.type.get();\n      const contextId = option.context.id.get();\n      if(type === BACNET_ORGAN_TYPE) return true;\n\n      let network = type === SpinalBmsNetwork.nodeTypeName ? SpinalGraphService.getRealNode(id) : type === SpinalBmsDevice.nodeTypeName && await utilities.getNetwork(id, contextId);\n\n      if(network) {\n         const networkId = network.getId().get();\n         const organ = await utilities.getOrgan(networkId, contextId);\n         return organ && organ.type.get() === BACNET_ORGAN_TYPE  ? true : -1;\n      }\n\n      return -1;\n   }\n\n   async action(option) {\n      const bmsContextId = option.context.id.get();\n      const nodeId = option.selectedNode.id.get();\n\n      // const bmsDevices = await getAllDevices(bmsContextId, nodeId);\n\n      spinalPanelManagerService.openPanel(\"unLinkProfilToBmsDeviceDialog\", {\n         bmsContextId,\n         nodeId,\n      })\n   }\n\n}\n\n\n\n\n\n\n\nconst unLinkProfilToBmsDevice = new UnLinkProfilToBmsDevice()\n\nspinalContextMenuService.registerApp(SIDEBAR, unLinkProfilToBmsDevice, [3]);\n\nexport default unLinkProfilToBmsDevice;","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { SpinalBmsDevice, SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\nimport { BACNET_ORGAN_TYPE } from \"spinal-model-bacnet\";\n\nimport utilities from \"../../js/utilities\";\n\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SIDEBAR = \"GraphManagerSideBar\";\nconst icon = require(\"../../assets/add.svg\");\n\nclass CreateBacnetValue extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Get all bacnet values\",\n         \"This button allows to get all bacnet values\", {\n         icon: icon,\n         icon_type: \"src\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   async isShown(option) {\n      const id = option.selectedNode.id.get();\n      const type = option.selectedNode.type.get();\n      const contextId = option.context.id.get();\n\n      let network = type === SpinalBmsNetwork.nodeTypeName ? SpinalGraphService.getRealNode(id) : type === SpinalBmsDevice.nodeTypeName && await utilities.getNetwork(id, contextId);\n\n      if(network) {\n         const networkId = network.getId().get();\n         const organ = await utilities.getOrgan(networkId, contextId);\n         return organ && organ.type.get() === BACNET_ORGAN_TYPE  ? true : -1;\n      }\n\n      return -1;\n\n      // if(type === SpinalBmsNetwork.nodeTypeName) {\n      //    network = option.selectedNode;\n      // } else if(type === SpinalBmsDevice.nodeTypeName) {\n      //    network = await utilities.getOrgan(id, contextId);\n      // }\n\n\n\n      // if(type === SpinalBmsNetwork.nodeTypeName || type === SpinalBmsDevice.nodeTypeName) {\n      //    const network = await getNetwork(id,type,contextId);\n      //    if(network) {\n      //       const parents = await SpinalGraphService.getParents(id,[SpinalBmsNetwork.relationName]);\n      //       const found = parents.find(el => el.id.get() === BACNET_ORGAN_TYPE);\n      //       return found || -1;\n      //    }\n      // }\n\n      // return  -1;\n   }\n\n   async action(option) {\n\n      spinalPanelManagerService.openPanel(\"getBacnetValueDialog\", {\n         selectedNode: option.selectedNode.get(),\n         context: option.context.get(),\n         graph: option.graph,\n      })\n   }\n}\n\n// const  getNetwork = async (id, contextId) => {\n//    const realNode = SpinalGraphService.getRealNode(id);\n//    return realNode.getParents([SpinalBmsDevice.relationName]).then((parents) => {\n//       const found = parents.find(el => {\n//          if (el && el.contextIds) {\n//             return el.contextIds[contextId];\n//          }\n\n//       });\n\n//       SpinalGraphService._addNode(found)\n//       return found;\n//    })\n// }\n\n// const getOrgan = async (networkId, contextId) => {\n//    const realNode = SpinalGraphService.getRealNode(networkId);\n//    console.log(\"realNode\",realNode);\n\n//    const parents = await realNode.getParents([SpinalBmsNetwork.relationName]);\n//    console.log(\"parents\",parents, BACNET_ORGAN_TYPE)\n\n//    const found = parents.find(el => {\n//       console.log(el, el.getType.get());\n//       return el.getType.get() == \"\"\n//    });\n\n//    if(found) console.log(\"found\",found)\n//    else console.log(\"not found\");\n\n// }\n\nconst createBacnetValue = new CreateBacnetValue()\nspinalContextMenuService.registerApp(SIDEBAR, createBacnetValue, [3]);\nexport default createBacnetValue;","module.exports = require('./helpers/bundle-url').getBundleURL('kdcfB') + require('./helpers/bundle-manifest').resolve(\"5w9u5\");","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nimport { SpinalBmsDevice, SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { BACNET_ORGAN_TYPE } from \"spinal-model-bacnet\";\n\nimport utilities from \"../../js/utilities\";\n\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass ManageMonitoring extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Manage devices monitoring\",\n         \"Manage devices monitoring\", {\n         icon: \"personal_video\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   async isShown(option) {\n\n      const id = option.selectedNode.id.get();\n      const type = option.selectedNode.type.get();\n      const contextId = option.context.id.get();\n      let network = type === SpinalBmsNetwork.nodeTypeName ? SpinalGraphService.getRealNode(id) : type === SpinalBmsDevice.nodeTypeName && await utilities.getNetwork(id, contextId);\n\n      if(network) {\n         const networkId = network.getId().get();\n         const organ = await utilities.getOrgan(networkId, contextId);\n         return organ && organ.type.get() == BACNET_ORGAN_TYPE  ? true : -1;\n      }\n\n      return -1;\n\n\n\n      // const type = option.selectedNode.type.get();\n\n      // if (type === SpinalBmsNetwork.nodeTypeName) {\n      //    return true;\n      // } else if (type === SpinalBmsDevice.nodeTypeName) {\n      //    const realNode = SpinalGraphService.getRealNode(option.selectedNode.id.get())\n      //    const model = await utilities.getModel(realNode);\n\n      //    if (model && model !== -1 && model.listen && model.listen.get()) return -1;\n\n      //    return true;\n      // }\n\n      // return -1;\n   }\n\n   async action(option) {\n\n\n      spinalPanelManagerService.openPanel(\"manageDevicesPanel\", {\n         selectedNode: option.selectedNode.get(),\n         context: option.context.get(),\n         graph: option.graph,\n\n      })\n\n   }\n\n}\n\n\nconst manageMonitoring = new ManageMonitoring()\n\nspinalContextMenuService.registerApp(SIDEBAR, manageMonitoring, [3]);\n\nexport default manageMonitoring;","import { SpinalContextApp, spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\nconst { spinalPanelManagerService } = require(\"spinal-env-viewer-panel-manager-service\");\nimport { SpinalOrganConfigModel, BACNET_ORGAN_TYPE } from \"spinal-model-bacnet\";\n\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\n\nclass MonitorConnectorBtn extends SpinalContextApp {\n   constructor() {\n      super(\n         \"Monitor connector\",\n         \"This button allows to monitor a connector\", {\n         icon: \"reset_tv\",\n         icon_type: \"in\",\n         backgroundColor: \"#FF0000\",\n         fontColor: \"#FFFFFF\"\n      }\n      );\n   }\n\n   isShown(option) {\n      let typeSelected = option.selectedNode.type.get();\n\n      return Promise.resolve(typeSelected === BACNET_ORGAN_TYPE ? true : -1);\n   }\n\n   action(option) {\n      spinalPanelManagerService.openPanel(\"monitorConnectorPanel\", {\n         contextId: option.context.id.get(),\n         nodeId : option.selectedNode.id.get()\n      })\n   }\n\n}\n\nconst monitorConnectorBtn = new MonitorConnectorBtn()\n\nspinalContextMenuService.registerApp(SIDEBAR, monitorConnectorBtn, [3]);\n\nexport default monitorConnectorBtn;","import Vue from \"vue\";\nimport { SpinalForgeExtention } from \"spinal-env-viewer-panel-manager-service_spinalforgeextention\";\n\nimport DiscoverNetworkPanel from \"./discoverNetworkPanel.vue\";\nimport ManageDevicesPanel from \"./manageDevicesPanel.vue\";\nimport MonitorConnectorPanel from \"./monitorConnectorPanel.vue\";\n\nconst panels = [\n   {\n      name: \"discoverNetworkPanel\",\n      vueMountComponent: Vue.extend(DiscoverNetworkPanel),\n      panel: {\n         title: \"Discover network\",\n         closeBehaviour: \"hide\",\n      },\n      style: {\n         minWidth: '600px',\n         height: \"670px\",\n         left: \"400px\",\n      },\n   },\n   {\n      name: \"manageDevicesPanel\",\n      vueMountComponent: Vue.extend(ManageDevicesPanel),\n      panel: {\n         title: \"Manage devices monitoring\",\n         closeBehaviour: \"hide\",\n      },\n      style: {\n         minWidth: '620px',\n         height: \"670px\",\n         left: \"400px\",\n      },\n   },\n   {\n      name: \"monitorConnectorPanel\",\n      vueMountComponent: Vue.extend(MonitorConnectorPanel),\n      panel: {\n         title: \"Manage connector\",\n         closeBehaviour: \"hide\",\n      },\n      style: {\n         minWidth: '620px',\n         height: \"670px\",\n         left: \"400px\",\n      },\n   }\n];\n\n\nfor (const element of panels) {\n   const panelExtension = SpinalForgeExtention.createExtention(element);\n   SpinalForgeExtention.registerExtention(element.name, panelExtension);\n}","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"discover_container\">\n    <!-- <md-field>\n         <label>Network Name</label>\n         <md-input v-model=\"network.name\"></md-input>\n      </md-field>\n\n      <md-button @click=\"discover\">Discover</md-button> -->\n    <md-steppers md-vertical>\n      <md-step id=\"first\"\n               md-label=\"Network name\"\n               md-description=\"Network name\">\n        <div class=\"stepContainer\">\n          <div class=\"header\">\n            <div class=\"radio\"\n                 :class=\"{ isActive: network.useBroadcast }\">\n              <md-radio class=\"md-primary\"\n                        v-model=\"network.useBroadcast\"\n                        :value=\"true\">Broadcast</md-radio>\n            </div>\n\n            <div class=\"radio\"\n                 :class=\"{ isActive: !network.useBroadcast }\">\n              <md-radio class=\"md-primary\"\n                        v-model=\"network.useBroadcast\"\n                        :value=\"false\">Unicast</md-radio>\n            </div>\n          </div>\n\n          <div class=\"content\">\n            <broadcast-template v-if=\"network.useBroadcast\"\n                                :network=\"network\"></broadcast-template>\n\n            <unicast-template v-else\n                              :network=\"network\"></unicast-template>\n          </div>\n        </div>\n      </md-step>\n\n      <md-step id=\"second\"\n               md-label=\"Discover network\"\n               md-description=\"Discover\">\n        <div class=\"stepContainer\">\n          <discover-table :devices=\"devices\"\n                          :state=\"state\"\n                          :selected=\"selected\"\n                          :network=\"network\"\n                          @discover=\"discover\"\n                          @select=\"selectDevice\"\n                          @stop=\"stopDiscovering\"></discover-table>\n        </div>\n\n        <!-- <md-button @click=\"discover\">Discover</md-button>\n             -->\n      </md-step>\n\n      <md-step id=\"third\"\n               md-label=\"Create network\"\n               md-description=\"Create\">\n        <div class=\"stepContainer\">\n          <div class=\"loading\">\n            <md-progress-spinner v-if=\"state === STATES.creating\"\n                                 md-mode=\"indeterminate\"></md-progress-spinner>\n\n            <md-icon v-else-if=\"state === STATES.created\"\n                     class=\"md-size-5x\">check</md-icon>\n\n            <md-button v-else\n                       :disabled=\"selected.length === 0\"\n                       @click=\"createNodes\">Create Network</md-button>\n          </div>\n        </div>\n      </md-step>\n    </md-steppers>\n  </div>\n</template>\n\n<script>\nimport { STATES, SpinalDisoverModel } from \"spinal-model-bacnet\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport { NETWORK_TYPE } from \"../../js/constants\";\nimport discoverTable from \"../components/discoverTable.vue\";\n// import { STATES } from \"../../js/stateEnum\";\n\n// import { SpinalDisoverModel } from \"../../model/SpinalDiscoverModel\";\n\nimport BroadcastTemplate from \"../components/broadcastTemplate.vue\";\nimport UnicastTemplate from \"../components/unicastTemplate.vue\";\n\nexport default {\n  name: \"discoverNetworkPanel\",\n  components: {\n    \"discover-table\": discoverTable,\n    \"broadcast-template\": BroadcastTemplate,\n    \"unicast-template\": UnicastTemplate,\n  },\n  data() {\n    this.STATES = STATES;\n\n    this.spinalDiscover;\n    this.context;\n    this.graph;\n    this.organ;\n    this.devicesBindProcess;\n    return {\n      state: STATES.reseted,\n      devices: [],\n      selected: [],\n      network: {\n        useBroadcast: true,\n        address: \"255.255.255.255\",\n        port: 47808,\n        name: \"\",\n        type: NETWORK_TYPE,\n        ips: [{ id: 0, address: \"\", deviceId: \"\" }],\n      },\n    };\n  },\n  methods: {\n    async opened(params) {\n      this.graph = params.graph;\n      this.context = params.context.get();\n      this.organ = await this.getOrganModel(params.selectedNode.id.get());\n\n      if (typeof this.spinalDiscover !== \"undefined\") {\n        this.spinalDiscover = undefined;\n        this.state = STATES.reseted;\n      }\n    },\n\n    closed() {},\n\n    async discover() {\n      if (typeof this.spinalDiscover === \"undefined\") {\n        this.spinalDiscover = new SpinalDisoverModel(\n          this.graph,\n          this.context,\n          this.network,\n          this.organ\n        );\n\n        // console.log(this.spinalDiscover);\n\n        await this.spinalDiscover.addToGraph();\n      }\n\n      this.spinalDiscover.setDiscoveringMode();\n      this.getDevicesFound();\n    },\n\n    createNodes() {\n      console.log(\"creating...\");\n      this.spinalDiscover.devices.set(this.selected);\n      // this.spinalDiscover.state.set(STATES.creating);\n      this.spinalDiscover.setCreatingMode();\n    },\n\n    getDevicesFound() {\n      this.devicesBindProcess = this.spinalDiscover.state.bind(() => {\n        console.log(this.spinalDiscover.state.get());\n        this.state = this.spinalDiscover.state.get();\n\n        if (this.state === STATES.discovered) {\n          this.devices = this.spinalDiscover.devices.get();\n        } else if (this.state === STATES.created) {\n          this.spinalDiscover = undefined;\n          // this.state = STATES.reseted;\n        }\n\n        // switch (this.spinalDiscover.state.get()) {\n        //    case STATES.discovered:\n        //       this.state = STATES.discovered;\n        //       this.devices = this.spinalDiscover.devices.get();\n        //       break;\n        //    case STATES.timeout:\n        //       this.state = STATES.timeout;\n        //       break;\n        //    case STATES.discovering:\n        //       this.state = STATES.discovering;\n        //       break;\n        //    case STATES.creating:\n        //       this.state = STATES.creating;\n        //       break;\n        //    case STATES.created:\n        //       this.state = STATES.created;\n        //       break;\n        //    case STATES.error:\n        //       this.state = STATES.error;\n        //    case STATES.reseted:\n        //       this.state = STATES.reseted;\n        //       break;\n\n        //    default:\n        //       break;\n        // }\n        // // this.devices = this.graph.info.discover.devices.get();\n      });\n    },\n\n    getOrganModel(nodeId) {\n      const realNode = SpinalGraphService.getRealNode(nodeId);\n      return realNode.getElement();\n    },\n\n    ModContextAttr(context) {\n      if (context.name) {\n        context.name.set(this.context.name);\n      } else {\n        context.add_attr({ name: this.context.name });\n      }\n\n      if (context.type) {\n        context.type.set(this.context.type);\n      } else {\n        context.add_attr({ type: this.context.type });\n      }\n    },\n\n    ModNetworkAttr(network) {\n      if (network.name) {\n        network.name.set(this.network.name);\n      } else {\n        network.add_attr({ name: this.network.name });\n      }\n\n      if (network.type) {\n        network.type.set(this.network.type);\n      } else {\n        network.add_attr({ type: this.network.type });\n      }\n    },\n\n    selectDevice(devices) {\n      this.selected = devices;\n    },\n\n    stopDiscovering() {\n      if (this.spinalDiscover) {\n        this.spinalDiscover.setResetedMode();\n        this.spinalDiscover.remove().then(() => {\n          this.spinalDiscover = undefined;\n          this.state = STATES.reseted;\n        });\n      } else {\n        this.state = STATES.reseted;\n      }\n    },\n  },\n  watch: {\n    \"network.useBroadcast\": function () {\n      this.stopDiscovering();\n    },\n    \"network.address\": function () {\n      this.stopDiscovering();\n    },\n    \"network.port\": function () {\n      this.stopDiscovering();\n    },\n\n    \"network.ips\": function () {\n      this.stopDiscovering();\n    },\n  },\n  beforeDestroy() {\n    this.spinalDiscover.remove(this.graph);\n  },\n};\n</script>\n\n<style scoped>\n.discover_container {\n  width: 100%;\n  height: calc(100% - 15px);\n}\n\n.discover_container .stepContainer {\n  width: 100%;\n  height: 350px;\n}\n\n.discover_container .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.discover_container .header {\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.discover_container .header .radio {\n  width: 50%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.discover_container .header .radio.isActive {\n  color: #448aff;\n  border-bottom: 2px solid #448aff;\n}\n\n.discover_container .content {\n  width: 100%;\n  height: calc(100% - 50px);\n  margin-top: 10px;\n  /* min-height: 200px; */\n\n  /* overflow: hidden;\n   overflow-y: auto; */\n}\n</style>\n\n<style>\n.discover_container .md-steppers.md-theme-default,\n.discover_container .md-steppers.md-theme-default .md-steppers-wrapper,\n.discover_container\n  .md-steppers.md-theme-default\n  .md-steppers-wrapper\n  .md-steppers-container {\n  height: 100%;\n}\n\n.discover_container\n  .md-steppers.md-theme-default\n  .md-steppers-wrapper\n  .md-steppers-container\n  .md-stepper-content.md-active {\n  min-height: 250px;\n  max-height: 350px;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"devices_table\"\n       v-if=\"show === STATES.discovered\">\n    <div class=\"header\">\n      <div>{{selected.length}} selected / {{devices.length}} found</div>\n      <!-- <div>{{devices.length}} controller(s) found</div> -->\n    </div>\n\n    <md-table class=\"tablecontent\"\n              v-model=\"devices\"\n              @md-selected=\"onSelect\">\n      <!-- md-fixed-header -->\n\n      <md-table-row slot=\"md-table-row\"\n                    slot-scope=\"{ item }\"\n                    md-selectable=\"multiple\"\n                    md-auto-select>\n        <md-table-cell md-label=\"Name\"\n                       md-sort-by=\"name\">{{ item.name }}</md-table-cell>\n\n        <md-table-cell md-label=\"deviceId\">{{ item.deviceId }}</md-table-cell>\n\n        <md-table-cell md-label=\"address\">{{ item.address }}</md-table-cell>\n\n        <!-- <md-table-cell\n            class=\"configureMonitoring\"\n            md-label=\"configure Monitoring\"\n         >\n            <md-button\n               class=\"md-icon-button md-primary\"\n               v-tooltip=\"'Configure Monitoring'\"\n            >\n               <md-icon>settings</md-icon>\n            </md-button>\n         </md-table-cell> -->\n\n      </md-table-row>\n    </md-table>\n  </div>\n\n  <div class=\"discover_container\"\n       v-else>\n\n    <div class=\"description\">{{label}}</div>\n    <div class=\"buttons\">\n      <md-button class=\"md-primary md-raised\"\n                 v-if=\"show === STATES.reseted\"\n                 @click=\"discover\"\n                 :disabled=\"disabledBtn()\">Discover</md-button>\n\n      <md-button class=\"md-primary md-raised\"\n                 v-else-if=\"show === STATES.timeout\"\n                 @click=\"discover\">Retry</md-button>\n\n      <div class=\"loading\"\n           v-else-if=\"show === STATES.discovering\">\n        <div>\n          <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n        </div>\n        <div>\n          <md-button class=\"md-accent md-raised\"\n                     @click=\"stop\">Stop</md-button>\n        </div>\n\n      </div>\n    </div>\n\n  </div>\n</template>\n<script>\nimport { STATES } from \"../../js/stateEnum\";\n\nexport default {\n  name: \"discoverTable\",\n  props: {\n    devices: {},\n    state: {},\n    selected: {},\n    network: {},\n  },\n  data() {\n    this.STATES = STATES;\n    return {\n      label: \"Discover network to find devices\",\n      show: STATES.reseted,\n    };\n  },\n  methods: {\n    disabledBtn() {\n      if (this.network.name.trim().length === 0) return true;\n      if (this.network.useBroadcast) {\n        if (this.network.address.length === 0) return true;\n        if (this.network.port.length === 0) return true;\n      } else {\n        if (this.network.ips.length === 0) return true;\n      }\n\n      return false;\n    },\n\n    onSelect(items) {\n      this.$emit(\"select\", items);\n    },\n\n    discover() {\n      this.$emit(\"discover\");\n    },\n\n    stop() {\n      this.$emit(\"stop\");\n    },\n  },\n  watch: {\n    state() {\n      this.show = this.state;\n      switch (this.state) {\n        case STATES.reseted:\n          this.label = \"Discover network to find devices\";\n          break;\n        case STATES.discovering:\n          this.label = \"Discovering\";\n          break;\n        case STATES.timeout:\n          this.label = \"Timeout, no device found !\";\n          break;\n        case STATES.error:\n          this.label = \"oups !\";\n          break;\n        default:\n          break;\n      }\n\n      // this.$forceUpdate();\n    },\n    // \"network.useBroadcast\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.address\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.port\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.name\": function () {\n    //    this.disabledBtn();\n    // },\n    // \"network.ips\": function () {\n    //    this.disabledBtn();\n    // },\n  },\n};\n</script>\n\n<style scoped>\n.discover_container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.discover_container .loading {\n  text-align: center;\n  /* display: flex;\n   flex-direction: column; */\n}\n\n.discover_container .devices_table {\n  width: 98%;\n  height: 100%;\n  margin: auto;\n  overflow: hidden;\n}\n\n.discover_container .devices_table .header {\n  width: 99%;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.4em;\n  border: 1px dashed grey;\n}\n\n.discover_container .devices_table .tablecontent {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n</style>\n\n<style>\n/* .discover_container .devices_table .md-table.md-theme-default .md-table-content,\n.md-table.md-theme-default .md-table-alternate-header .md-table table {\n   width: 100%;\n   height: 100%;\n} */\n\n.configureMonitoring .md-button .md-ripple {\n  padding: 0;\n}\n</style>","export const STATES = Object.freeze({\n  reseted: 0,\n  discovering: 1,\n  discovered: 2,\n  timeout: 3,\n  creating: 4,\n  created: 5,\n});\n","<template>\n   <div class=\"broadcast_container\">\n      <div>\n         <md-field class=\"contextInput\">\n            <label>Network Name</label>\n            <md-input v-model=\"network.name\"></md-input>\n         </md-field>\n      </div>\n\n      <div>\n         <md-field class=\"contextInput\">\n            <label>broadcast network IP address</label>\n            <md-input v-model=\"network.address\"></md-input>\n            <span class=\"md-helper-text\">\n               To use the default(255.255.255.255) leave this field empty\n            </span>\n         </md-field>\n      </div>\n\n      <div>\n         <md-field class=\"contextInput\">\n            <label>broadcast network port</label>\n            <md-input v-model=\"network.port\"></md-input>\n            <span class=\"md-helper-text\">\n               To use the default port (47808) leave this field empty\n            </span>\n         </md-field>\n      </div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"broadcastTemplate\",\n   props: { network: {} },\n   data() {\n      return {};\n   },\n};\n</script>\n\n<style scoped>\n.broadcast_container {\n   width: 100%;\n   height: 100%;\n}\n\n.broadcast_container .contextInput {\n   min-height: unset;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"unicast_container\"\n       v-if=\"!isLoading\">\n    <md-field class=\"contextInput\">\n      <label>Network Name</label>\n      <md-input v-model=\"network.name\"></md-input>\n    </md-field>\n\n    <div class=\"header\">\n      <div class=\"button_div addRow\"\n           @click=\"addRow\">add row</div>\n\n      <div class=\"button_div resetRow\"\n           @click=\"reset\">reset</div>\n\n      <div class=\"button_div upload_div\"\n           @click=\"uploadFile\">\n        click to upload file\n      </div>\n    </div>\n\n    <md-content class=\"content md-scrollbar\">\n      <input-data-template v-for=\"item in network.ips\"\n                           :key=\"item.id\"\n                           :item=\"item\"\n                           @remove=\"removeItem\"></input-data-template>\n    </md-content>\n  </div>\n\n  <div class=\"loading\"\n       v-else>\n    <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n  </div>\n</template>\n\n<script>\nimport InputDataTemplate from \"./inputData.vue\";\nimport spinalExcelManager from \"spinal-env-viewer-plugin-excel-manager-service\";\n\nexport default {\n  name: \"UnicastTemplate\",\n  props: { network: {} },\n  components: {\n    \"input-data-template\": InputDataTemplate,\n  },\n  data() {\n    return {\n      isLoading: false,\n    };\n  },\n  methods: {\n    addRow() {\n      const id = this.network.ips.length;\n      this.network.ips = [\n        ...this.network.ips,\n        { id: id, address: \"\", deviceId: \"\" },\n      ];\n    },\n\n    reset() {\n      this.network.ips = [{ id: 0, address: \"\", deviceId: \"\" }];\n    },\n\n    removeItem(id) {\n      this.network.ips = this.network.ips.filter((el) => el.id !== id);\n    },\n\n    uploadFile() {\n      let input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept =\n        \".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n      input.click();\n\n      input.addEventListener(\n        \"change\",\n        async (event) => {\n          this.isLoading = true;\n\n          try {\n            const file = event.target.files[0];\n            const dataJson = await spinalExcelManager.convertExcelToJson(file);\n            const ips = [];\n\n            for (const key in dataJson) {\n              if (Object.hasOwnProperty.call(dataJson, key)) {\n                const data = dataJson[key].map((element) => {\n                  return {\n                    address: this.getElementAddress(element),\n                    deviceId: this.getElementDeviceId(element),\n                  };\n                });\n                ips.push(...data);\n              }\n            }\n            this.network.ips = ips.map((el, index) => {\n              el.id = index;\n              return el;\n            });\n            this.isLoading = false;\n          } catch (error) {\n            this.isLoading = false;\n          }\n        },\n        false\n      );\n    },\n\n    getElementAddress(element) {\n      const address = \"address\";\n      const key = Object.keys(element).find((el) => {\n        return el.toLowerCase() === address;\n      });\n\n      if (key) return element[key];\n      // for (const key of list) {\n      //    if (element[key]) return element[key];\n      // }\n    },\n\n    getElementDeviceId(element) {\n      const deviceId = \"deviceid\";\n      const key = Object.keys(element).find((el) => {\n        return el.replace(\" \", \"\").toLowerCase() === deviceId;\n      });\n\n      if (key) return element[key];\n\n      // const list = [\n      //    \"Device ID\",\n      //    \"DeviceID\",\n      //    \"deviceID\",\n      //    \"device ID\",\n      //    \"deviceId\",\n      //    \"device Id\",\n      // ];\n      // for (const key of list) {\n      //    if (element[key]) return element[key];\n      // }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.unicast_container {\n  width: 100%;\n  height: 100%;\n  margin: auto;\n}\n\n.unicast_container .header {\n  width: 99%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.unicast_container .header .button_div {\n  /* width: 50%; */\n  flex: 0 1 32%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-transform: capitalize;\n  border: 1px solid grey;\n  border-radius: 10px;\n}\n\n.unicast_container .header .button_div.resetRow {\n  color: #ff5252;\n  border: 1px solid #ff5252;\n}\n\n.unicast_container .header .button_div.addRow {\n  color: #448aff;\n  border: 1px solid #448aff;\n}\n\n.unicast_container .header .button_div.upload_div {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px dashed grey;\n}\n\n.unicast_container .header .button_div:hover {\n  cursor: pointer;\n}\n\n.unicast_container .content {\n  width: 100%;\n  height: calc(100% - 100px);\n  overflow: hidden;\n  overflow-y: auto;\n}\n\n.unicast_container .contextInput {\n  min-height: unset;\n}\n</style>\n\n<style>\n.unicast_container .content .md-button .md-ripple {\n  padding: unset;\n}\n</style>\n","<template>\n   <div class=\"input_container\">\n      <div class=\"input\">\n         <md-field class=\"contextInput\">\n            <label>Address</label>\n            <md-input v-model=\"item.address\"></md-input>\n         </md-field>\n      </div>\n\n      <div class=\"input\">\n         <md-field class=\"contextInput\">\n            <label>Device ID</label>\n            <md-input v-model=\"item.deviceId\"></md-input>\n         </md-field>\n      </div>\n\n      <div class=\"remove\">\n         <md-button\n            v-if=\"item.id\"\n            class=\"md-icon-button md-accent\"\n            v-tooltip=\"'remove'\"\n            @click=\"removeItem\"\n         >\n            <md-icon>remove_circle_outline</md-icon>\n         </md-button>\n      </div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"inputDataTemplate\",\n   props: { item: {} },\n   data() {\n      return {};\n   },\n   methods: {\n      removeItem() {\n         this.$emit(\"remove\", this.item.id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.input_container {\n   width: 100%;\n   /* height: 100%; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n}\n\n.input_container .input {\n   width: 40%;\n}\n\n.input_container .remove {\n   width: 10%;\n}\n\n.input_container .input .contextInput {\n   min-height: unset;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"manage_panel_container\">\n    <div class=\"manage_container\"\n         v-if=\"pageSelected === PAGES.selection\">\n      <div class=\"header\">\n        <div>\n          <md-button class=\"md-icon-button\"\n                     v-tooltip=\"'start all devices'\"\n                     @click=\"startAllMonitoring\">\n            <md-icon class=\"md-primary\">play_arrow</md-icon>\n          </md-button>\n\n          <md-button class=\"md-icon-button\"\n                     v-tooltip=\"'restart all devices'\"\n                     @click=\"restartAllMonitoring\">\n            <md-icon class=\"md-primary\">replay</md-icon>\n          </md-button>\n\n          <md-button class=\"md-icon-button md-accent\"\n                     v-tooltip=\"'stop all devices'\"\n                     @click=\"stopAllMonitoring\">\n            <md-icon class=\"md-accent\">stop</md-icon>\n          </md-button>\n\n          <md-button class=\"md-primary\"\n                     @click=\"changeTimeSeries(true)\">Save all time series\n          </md-button>\n\n          <md-button class=\"md-accent\"\n                     @click=\"changeTimeSeries(false)\">Stop saving all time\n            series</md-button>\n        </div>\n      </div>\n\n      <div class=\"devices_list\">\n        <device-monitoring v-for=\"device in devices\"\n                           :key=\"device.id\"\n                           :ref=\"device.id\"\n                           :device=\"device\"\n                           :profilId=\"device.profilId\"\n                           :context=\"context\"\n                           :graph=\"graph\"></device-monitoring>\n      </div>\n    </div>\n    <div class=\"state\"\n         v-else-if=\"pageSelected === PAGES.loading\">\n      <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n    </div>\n\n    <div class=\"state\"\n         v-else-if=\"pageSelected === PAGES.error\">\n      <md-icon class=\"md-size-5x\">close</md-icon>\n    </div>\n  </div>\n</template>\n\n<script>\nimport DeviceMonitoring from \"../components/monitoring/devicemonitor.vue\";\nimport { spinalEventEmitter } from \"spinal-env-viewer-plugin-event-emitter\";\nimport utilities from \"../../js/utilities\";\nimport { monitorState } from \"../../js/monitorState\";\n\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nexport default {\n  name: \"manageDevicesPanel\",\n  components: {\n    \"device-monitoring\": DeviceMonitoring,\n  },\n  data() {\n    this.PAGES = {\n      selection: 0,\n      loading: 1,\n      creation: 2,\n      success: 3,\n      error: 4,\n    };\n\n    this.context;\n    this.graph;\n    this.selectedNode;\n    this.network;\n    this.organ;\n\n    return {\n      devices: [],\n      pageSelected: this.PAGES.creation,\n    };\n  },\n  created() {\n    spinalEventEmitter.on(\"deviceProfileContext-ChangeSupervision\", () => {});\n  },\n  methods: {\n    async opened({ context, graph, selectedNode }) {\n      this.pageSelected = this.PAGES.loading;\n      this.setPanelTitle(selectedNode.name);\n      monitorState.clear();\n\n      try {\n        const [nodeId, contextId] = [selectedNode.id, context.id];\n        this.context = context;\n        this.graph = graph;\n        this.selectedNode = selectedNode;\n\n        await monitorState.init(graph, contextId, nodeId);\n        const { devices, profilIds } = await this.getBmsDevices(\n          contextId,\n          nodeId\n        );\n\n        this.devices = devices;\n        await this.saveProfilIds(profilIds);\n\n        console.log(monitorState);\n\n        this.pageSelected = this.PAGES.selection;\n      } catch (error) {\n        console.error(error);\n        this.pageSelected = this.PAGES.error;\n      }\n    },\n\n    closed() {},\n\n    async getBmsDevices(contextId, id) {\n      return utilities.getBmsDevices(contextId, id).then((devices) => {\n        const profilIds = new Set([]);\n        const promises = devices.map(async (el) => {\n          const res = el.get();\n          const profile = await utilities.getProfilLinkedToDevice(res.id);\n          if (profile) {\n            const { id } = profile;\n            res.profilId = id;\n            profilIds.add(id);\n          }\n          return res;\n        });\n\n        return Promise.all(promises)\n          .then((devices) => {\n            return {\n              devices,\n              profilIds: Array.from(profilIds),\n            };\n          })\n          .catch((err) => {});\n      });\n    },\n\n    saveProfilIds(profilIds) {\n      const promises = profilIds.map((id) => monitorState.addProfile(id));\n      return Promise.resolve(promises);\n    },\n\n    ////////////////////////////////////////////\n    ////              CLIKS                   //\n    ////////////////////////////////////////////\n\n    async startAllMonitoring() {\n      // const length = this.devices.length;\n\n      // this.devices.forEach((device) => {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     ref.startMonitoring();\n      //   }\n      // });\n      const references = this.devices\n        .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n        .filter((el) => !!el)\n        .map((ref) => {\n          return async () => {\n            const model = await ref.startMonitoring();\n            await utilities.waitModelReady(model);\n          };\n        });\n\n      await utilities.consumeBatch(references, 30);\n\n      // while (references.length > 0) {\n\n      //   const model = await ref.startMonitoring();\n      //   await utilities.waitModelReady(model);\n\n      //   // await this.execFunction(refs, (ref) => ref.startMonitoring());\n      //   // delay(2000);\n      // }\n    },\n\n    async restartAllMonitoring() {\n      const references = this.devices\n        .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n        .filter((el) => !!el)\n        .map((ref) => {\n          return async () => {\n            const model = await ref.restartMonitoring();\n            await utilities.waitModelReady(model);\n          };\n        });\n\n      await utilities.consumeBatch(references, 30);\n\n      // const length = this.devices.length;\n\n      // this.devices.forEach((device) => {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     ref.restartMonitoring();\n      //   }\n      // });\n\n      // const references = this.devices\n      //   .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n      //   .filter((el) => !!el);\n\n      // while (references.length > 0) {\n      //   const refs = references.splice(0, 10);\n      //   await this.execFunction(refs, (ref) => ref.restartMonitoring());\n      //   // delay(2000);\n      // }\n\n      // for (const device of this.devices) {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     await ref.restartMonitoring();\n      //   }\n      // }\n    },\n\n    async stopAllMonitoring() {\n      // this.devices.forEach((device) => {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     ref.stopMonitoring();\n      //   }\n      // });\n\n      const references = this.devices\n        .map((el) => (this.$refs[el.id] ? this.$refs[el.id][0] : undefined))\n        .filter((el) => !!el);\n\n      while (references.length > 0) {\n        const refs = references.splice(0, 10);\n        await this.execFunction(refs, (ref) => ref.stopMonitoring());\n      }\n\n      // for (const device of this.devices) {\n      //   const deviceId = device.id;\n      //   const [ref] = this.$refs[deviceId];\n      //   if (ref) {\n      //     await ref.stopMonitoring();\n      //   }\n      // }\n    },\n\n    changeTimeSeries(value) {\n      this.devices.forEach((device) => {\n        const deviceId = device.id;\n        const [ref] = this.$refs[deviceId];\n        if (ref) {\n          ref.updateTimeSeries(value);\n        }\n      });\n\n      // const length = this.devices.length;\n      // let index = 0;\n      // while (index <= length - 1) {\n      //    const deviceId = this.devices[index].id;\n      //    const [ref] = this.$refs[deviceId];\n      //    if (ref) {\n      //       ref.updateTimeSeries(value);\n      //    }\n      //    index++;\n      // }\n    },\n\n    setPanelTitle(title) {\n      spinalPanelManagerService.panels.manageDevicesPanel.panel.setTitle(\n        `Manage devices monitoring : ${title}`\n      );\n    },\n\n    execFunction(array, callback) {\n      const promises = array.map((el) => callback(el));\n      return Promise.all(promises);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.manage_panel_container {\n  width: 100%;\n  height: calc(100% - 15px);\n  overflow: hidden;\n}\n\n.manage_panel_container .manage_container {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.manage_panel_container .manage_container .header {\n  width: 100%;\n  height: 50px;\n  border-bottom: 1px solid grey;\n}\n\n.manage_panel_container .manage_container .header > div {\n  width: 100%;\n  float: right;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.manage_panel_container .manage_container .devices_list {\n  width: 100%;\n  height: calc(100% - 60px);\n  overflow: auto;\n}\n\n.manage_panel_container .state {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n\n<style>\n.manage_panel_container .manage_container .md-button .md-ripple {\n  padding: unset;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"device\">\n    <div class=\"name\"\n         v-tooltip=\"device.name\">\n      {{ device.name }}\n    </div>\n\n    <div class=\"state\"\n         :class=\"state\">\n      {{ state }}\n    </div>\n\n    <div class=\"actions\">\n      <md-button class=\"md-icon-button md-primary\"\n                 v-tooltip=\"'start'\"\n                 :disabled=\"disabledStart()\"\n                 @click=\"startMonitoring\">\n        <md-icon>play_arrow</md-icon>\n      </md-button>\n\n      <md-button class=\"md-icon-button md-primary\"\n                 v-tooltip=\"'restart'\"\n                 :disabled=\"disabledRestart()\"\n                 @click=\"restartMonitoring\">\n        <md-icon>replay</md-icon>\n      </md-button>\n\n      <md-button class=\"md-icon-button md-accent\"\n                 v-tooltip=\"'stop'\"\n                 :disabled=\"disabledStop()\"\n                 @click=\"stopMonitoring\">\n        <md-icon>stop</md-icon>\n      </md-button>\n\n      <div class=\"block\">\n        <div class=\"input\">\n          <md-checkbox class=\"md-primary\"\n                       v-model=\"saveTimeSeries\">Save TimeSeries</md-checkbox>\n        </div>\n      </div>\n\n      <!-- <md-button class=\"md-icon-button\">\n                  <md-icon class=\"md-primary\">star</md-icon>\n               </md-button> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport utilities from \"../../../js/utilities\";\nimport { monitorState } from \"../../../js/monitorState\";\n\nexport default {\n  name: \"deviceMonitoring\",\n  props: {\n    device: { required: true },\n    // context: { required: true },\n    // graph: { required: true },\n    profilId: { type: String, required: false },\n  },\n  data() {\n    return {\n      saveTimeSeries: false,\n      model: undefined,\n    };\n  },\n  async created() {\n    this.model = await utilities.getModel(this.device.id);\n    if (this.model && this.model.saveTimeSeries) {\n      this.saveTimeSeries = this.model.saveTimeSeries.get();\n    }\n  },\n\n  methods: {\n    async startMonitoring() {\n      this.model = await monitorState.startMonitoring(\n        this.device.id,\n        this.profilId,\n        this.model\n      );\n\n      return this.model;\n\n      // const deviceId = this.device.id;\n      // const contextId = this.context.id;\n      // await utilities.startMonitoring(this.graph, contextId, deviceId);\n      // if (!this.model || this.model === -1) {\n      //   const realNode = SpinalGraphService.getRealNode(this.device.id);\n      //   this.model = await utilities.getModel(realNode);\n      // }\n    },\n\n    stopMonitoring() {\n      return monitorState.stopMonitoring(\n        this.device.id,\n        this.profilId,\n        this.model\n      );\n\n      // if (this.model != -1 && this.model.listen) {\n      //    this.model.listen.set(false);\n      // }\n      // return utilities.stopMonitoring(this.device.id);\n    },\n\n    async restartMonitoring() {\n      await this.stopMonitoring();\n      return new Promise((resolve) => {\n        setTimeout(async () => {\n          this.model = await this.startMonitoring();\n          resolve(this.model);\n        }, 1500);\n      });\n\n      // if (!utilities.hasProfilLinked(this.device.id)) return -1;\n      // await utilities.stopMonitoring(this.device.id);\n      // return new Promise((resolve, reject) => {\n      //   setTimeout(async () => {\n      //     await this.startMonitoring();\n      //     resolve(true);\n      //   }, 1500);\n      // });\n    },\n\n    updateTimeSeries(value) {\n      this.saveTimeSeries = value;\n    },\n\n    ////////////////////////////////////////////\n    ////              DISABLED                //\n    ////////////////////////////////////////////\n\n    disabledRestart() {\n      const model = this.model;\n      return (\n        !this.profilId ||\n        !(model && model !== -1 && model.listen && model.listen.get())\n      );\n    },\n\n    disabledStart() {\n      if (!this.hasProfil) return true;\n      const model = this.model;\n      return model && model !== -1 && model.listen && model.listen.get();\n    },\n\n    disabledStop() {\n      const model = this.model;\n      return (\n        !this.hasProfil ||\n        !(model && model !== -1 && model.listen && model.listen.get())\n      );\n    },\n  },\n  computed: {\n    state() {\n      return this.model && this.model.listen && this.model.listen.get()\n        ? \"Running\"\n        : \"Stopped\";\n    },\n    hasProfil() {\n      return this.profilId;\n    },\n  },\n  watch: {\n    saveTimeSeries() {\n      if (this.model && this.model !== -1) {\n        if (this.model.saveTimeSeries) {\n          this.model.saveTimeSeries.set(this.saveTimeSeries);\n        } else {\n          this.model.add_attr({\n            saveTimeSeries: this.saveTimeSeries,\n          });\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.device {\n  width: 96%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: auto;\n  /* border-bottom: 1px solid gray; */\n}\n\n.device .name,\n.device .state {\n  width: 25%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.device .state {\n  text-align: center;\n}\n\n.device .state.Running {\n  color: chartreuse;\n}\n.device .state.Stopped {\n  color: #ff5252;\n}\n\n.device .actions {\n  width: 50%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>\n","import utilities from \"./utilities\";\nimport { DeviceProfileUtilities } from \"spinal-env-viewer-plugin-network-tree-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { SpinalMonitorInfoModel } from \"spinal-model-bacnet\";\n\nclass MonitorSate {\n  constructor() {\n    this.profils = new Map();\n    this.network;\n    this.organ;\n    this.graph;\n    this.context;\n  }\n\n  async init(graph, contextId, nodeId) {\n    this.graph = graph;\n    this.context = SpinalGraphService.getRealNode(contextId);\n    this.network = await utilities.getNetwork(nodeId, contextId);\n    const networkId = this.network.getId().get();\n    this.organ = await utilities.getOrgan(networkId, contextId);\n  }\n\n  async startMonitoring(deviceId, profilId, argModel) {\n    if (!profilId) return -1;\n    const infoMonit = this.profils.get(profilId);\n    if (!infoMonit) return -1;\n    const model = await this.getModel(deviceId, argModel);\n\n    const deviceNode = SpinalGraphService.getRealNode(deviceId);\n\n    return utilities.createOrModifyListenerModel(\n      this.graph,\n      this.context,\n      this.network,\n      model,\n      infoMonit,\n      this.organ,\n      deviceNode\n    );\n  }\n\n  async stopMonitoring(deviceId, profilId, argModel) {\n    try {\n      if (!profilId) return -1;\n      const model = await this.getModel(deviceId, argModel);\n\n      if (model != -1 && model.listen) model.listen.set(false);\n    } catch (error) {}\n  }\n\n  async addProfile(profilId) {\n    if (this.profils.get(profilId)) return;\n    const intervals = await this.getIntervalsModel(profilId);\n    this.profils.set(profilId, intervals);\n  }\n\n  getProfilIntervals(profilId) {\n    return this.profils.get(profilId);\n  }\n\n  async updateProfile(profilId) {\n    const intervals = await this.getIntervalsModel(profilId);\n    this.profils.set(profilId, intervals);\n  }\n\n  async getIntervalsModel(profilId) {\n    return utilities\n      .getProfilIntervals(profilId)\n      .then((result) => {\n        const data = result.map(({ monitoring, children }) => {\n          return {\n            monitoring: monitoring.Monitoring,\n            interval: monitoring.IntervalTime,\n            children,\n          };\n        });\n\n        const profilNode = SpinalGraphService.getRealNode(profilId);\n        return new SpinalMonitorInfoModel(profilNode, data);\n      })\n      .catch((err) => {\n        console.error(err);\n        return;\n      });\n  }\n\n  async getModel(deviceId, argModel) {\n    return argModel && argModel !== -1\n      ? argModel\n      : await utilities.getModel(deviceId);\n  }\n\n  clear() {\n    this.network = null;\n    this.organ = null;\n    this.profils.clear();\n  }\n}\n\nexport const monitorState = new MonitorSate();\n","<template>\n\t<div class=\"connector_monitor_container\">\n\t\t<div class=\"organ_section\" v-for=\"organ in organs\" :key=\"organ.id.get()\">\n\t\t\t<div class=\"name\">{{ organ.name.get() }}</div>\n\t\t\t<div class=\"actions\">\n\t\t\t\t<md-button class=\"md-dense md-primary\" @click=\"restartOrgan(organ)\"\n\t\t\t\t\t>Restart</md-button\n\t\t\t\t>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\n\texport default {\n\t\tname: \"monitorConnectorPanel\",\n\t\tcomponents: {},\n\t\tdata() {\n\t\t\tthis.contextId;\n\n\t\t\treturn {\n\t\t\t\tnodeId: null,\n\t\t\t\torgans: undefined,\n\t\t\t};\n\t\t},\n\t\tmethods: {\n\t\t\tasync opened({ contextId, nodeId }) {\n\t\t\t\tthis.contextId = contextId;\n\t\t\t\tthis.nodeId = nodeId;\n\t\t\t\tthis.organs = await this.getOrganModel(nodeId);\n\n\t\t\t\t// console.log(\"organModel\", this.organModel);\n\t\t\t},\n\n\t\t\tclosed() {},\n\n\t\t\tgetOrganModel(nodeIds) {\n\t\t\t\tif (!Array.isArray(nodeIds)) nodeIds = [nodeIds];\n\n\t\t\t\tconst promises = nodeIds.map((nodeId) => {\n\t\t\t\t\tconst realNode = SpinalGraphService.getRealNode(nodeId);\n\t\t\t\t\treturn realNode.getElement();\n\t\t\t\t});\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t},\n\n\t\t\trestartOrgan(organ) {\n\t\t\t\torgan.restart.set(true);\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped>\n\t.connector_monitor_container {\n\t\twidth: 100%;\n\t\theight: calc(100% - 15px);\n\t\toverflow: auto;\n\t}\n\n\t.connector_monitor_container .organ_section {\n\t\twidth: calc(100% - 10px);\n\t\theight: 50px;\n\t\tpadding: 5px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.connector_monitor_container .organ_section .name {\n\t\tflex: 0 0 70%;\n\t\tfont-size: 1.5em;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n\n\t.connector_monitor_container .organ_section .actions {\n\t\tflex: 0 0 30%;\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\t}\n</style>\n","import Vue from \"vue\";\n\nimport CreateGTBNetworkContextDialog from \"./createContext.vue\";\nimport ModifyTimeIntervalDialog from \"./modifyTimeInterval.vue\";\nimport AddOrganDialog from \"./addOrgan.vue\";\nimport LinkProfilToBmsDeviceDialog from \"./linkToProfilDialog.vue\";\nimport UnLinkProfilToBmsDeviceDialog from \"./unLinkToProfilDialog.vue\";\nimport LinkToBimAutomateDialog from \"./linkToBimAutomate.vue\";\nimport GetBacnetValueDialog from \"./getBacnetValue.vue\";\n\nconst { SpinalMountExtention } = require(\"spinal-env-viewer-panel-manager-service\");\n\n\nconst dialogs = [{\n   name: \"createGTBNetworkContextDialog\",\n   vueMountComponent: Vue.extend(CreateGTBNetworkContextDialog),\n   parentContainer: document.body\n},\n{\n   name: \"modifyTimeIntervalDialog\",\n   vueMountComponent: Vue.extend(ModifyTimeIntervalDialog),\n   parentContainer: document.body\n},\n{\n   name: \"addOrganDialogDialog\",\n   vueMountComponent: Vue.extend(AddOrganDialog),\n   parentContainer: document.body\n},\n{\n   name: \"linkProfilToBmsDeviceDialog\",\n   vueMountComponent: Vue.extend(LinkProfilToBmsDeviceDialog),\n   parentContainer: document.body\n},\n{\n   name: \"linkToBimAutomateDialog\",\n   vueMountComponent: Vue.extend(LinkToBimAutomateDialog),\n   parentContainer: document.body\n},\n{\n   name: \"unLinkProfilToBmsDeviceDialog\",\n   vueMountComponent: Vue.extend(UnLinkProfilToBmsDeviceDialog),\n   parentContainer: document.body\n},\n{\n   name: \"getBacnetValueDialog\",\n   vueMountComponent: Vue.extend(GetBacnetValueDialog),\n   parentContainer: document.body\n}\n]\n\n\nfor (let index = 0; index < dialogs.length; index++) {\n   SpinalMountExtention.mount(dialogs[index]);\n}","<template>\n   <md-dialog\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title>Create BMS network context</md-dialog-title>\n      <md-dialog-content>\n         <md-field>\n            <label>Context Name</label>\n            <md-input v-model=\"inputValue\"></md-input>\n         </md-field>\n\n      </md-dialog-content>\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(true)\"\n            :disabled=\"!(inputValue.trim().length > 0)\"\n         >Save</md-button>\n      </md-dialog-actions>\n   </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { CONTEXT_TYPE } from \"../../js/constants\";\nexport default {\n   name: \"createNetworkContextDialog\",\n   props: [\"onFinised\"],\n   data() {\n      return {\n         showDialog: true,\n         inputValue: \"\",\n         title: \"\",\n         label: \"\",\n         createContext: \"\",\n         selectedNode: null,\n         context: null,\n      };\n   },\n   methods: {\n      opened(option) {\n         // console.log(option);\n      },\n      removed(option) {\n         if (option.closeResult && option.inputValue.length > 0) {\n            SpinalGraphService.addContext(\n               option.inputValue.trim(),\n               CONTEXT_TYPE\n            );\n         }\n         this.showDialog = false;\n      },\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised({ closeResult, inputValue: this.inputValue.trim() });\n         }\n      },\n   },\n};\n</script>","<template>\n\n   <md-dialog\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title>Time interval</md-dialog-title>\n      <md-dialog-content>\n         <md-field>\n            <label>time interval</label>\n            <md-input\n               v-model=\"inputValue\"\n               type=\"number\"\n            ></md-input>\n         </md-field>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(true)\"\n            :disabled=\"disabledBtn()\"\n         >Save</md-button>\n      </md-dialog-actions>\n\n   </md-dialog>\n</template>\n\n<script>\nexport default {\n   name: \"modifyTimeInterval\",\n   props: [\"onFinised\"],\n   data() {\n      return {\n         callback: undefined,\n         showDialog: true,\n         inputValue: 5000,\n      };\n   },\n   methods: {\n      opened(option) {\n         if (option.editMode && option.currentTime) {\n            this.inputValue = option.currentTime;\n         }\n         this.callback = option.callback;\n      },\n\n      removed(option) {\n         if (\n            option.closeResult &&\n            option.inputValue >= 1000 &&\n            typeof this.callback === \"function\"\n         ) {\n            this.callback(option.inputValue);\n         }\n         this.showDialog = false;\n      },\n\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised({ closeResult, inputValue: this.inputValue });\n         }\n      },\n\n      disabledBtn() {\n         return this.inputValue < 1000;\n      },\n   },\n};\n</script>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"selectOrganDialog\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"title\">Add BMS organ</md-dialog-title>\n\n    <md-dialog-content>\n      <md-table v-model=\"organsDisplayed\"\n                md-sort=\"name\"\n                md-sort-order=\"asc\"\n                md-fixed-header>\n        <md-table-toolbar>\n          <h1 class=\"md-title\">Organs</h1>\n        </md-table-toolbar>\n\n        <md-table-empty-state md-label=\"No organ found\">\n        </md-table-empty-state>\n\n        <md-table-row slot=\"md-table-row\"\n                      slot-scope=\"{ item }\">\n          <md-table-cell md-label=\"Name\">{{ item.name }}</md-table-cell>\n          <md-table-cell md-label=\"Type\">{{ item.type }}</md-table-cell>\n          <md-table-cell md-label=\"Action\">\n            <organ-button :ref=\"item._server_id\"\n                          :server_id=\"item._server_id\"\n                          :contextId=\"contextId\"\n                          @add=\"createAndLinkNode\"\n                          @remove=\"removeAndUnlinkNode\"></organ-button>\n          </md-table-cell>\n\n        </md-table-row>\n      </md-table>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <!-- <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(true)\"\n         >Save</md-button> -->\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalBacnetPluginService } from \"../../../service\";\nimport OrganBtn from \"../components/addOrganBtn.vue\";\nexport default {\n  name: \"addOrganDialog\",\n  props: [\"onFinised\"],\n  components: {\n    \"organ-button\": OrganBtn,\n  },\n  data() {\n    // this.organs = new Lst();\n\n    return {\n      contextId: undefined,\n      organsDisplayed: [],\n      showDialog: true,\n    };\n  },\n  methods: {\n    opened(option) {\n      // this.organs.bind(() => {\n      //    this.organsDisplayed = this.organs.get();\n      // });\n      this.contextId = option.context.id.get();\n      this.getOrgans();\n    },\n\n    removed(option) {\n      if (option.closeResult) {\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult });\n      }\n    },\n\n    async getOrgans() {\n      // const organs = [];\n      const connection = spinal.spinalSystem.conn;\n      this.organsDisplayed = await SpinalBacnetPluginService.getOrgans(\n        connection\n      );\n      // // spinalCore.load(connection,);\n      // spinalCore.load_type(connection, \"SpinalOrganConfigModel\", (file) => {\n      //    // const obj = {\n      //    //    name: file.name.get(),\n      //    //    type: file.type.get(),\n      //    //    server_id: file._server_id,\n      //    // };\n      //    this.organsDisplayed.push(file);\n      // });\n    },\n\n    createAndLinkNode(server_id) {\n      SpinalBacnetPluginService.addToReference(server_id, this.contextId)\n        .then((result) => {\n          this.$refs[server_id].isLinked = true;\n        })\n        .catch(() => {\n          this.$refs[server_id].isLinked = false;\n        });\n    },\n\n    removeAndUnlinkNode(server_id) {\n      SpinalBacnetPluginService.removeToReference(server_id, this.contextId)\n        .then(() => {\n          this.$refs[server_id].isLinked = false;\n        })\n        .catch((err) => {\n          this.$refs[server_id].isLinked = false;\n        });\n    },\n\n    existeInReference(server_id) {\n      return SpinalBacnetPluginService.isReferencedInContext(\n        server_id,\n        this.contextId\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n.selectOrganDialog {\n  width: 700px;\n  height: 500px;\n}\n\n.selectOrganDialog .title {\n  text-align: center;\n}\n</style>","import { spinalCore, FileSystem } from \"spinal-core-connectorjs_type\";\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\nimport { SpinalOrganConfigModel } from \"spinal-model-bacnet\";\nimport { SpinalBmsEndpoint } from \"spinal-model-bmsnetwork\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class SpinalBacnetPluginService {\n  constructor() {}\n\n  static getOrgans(connection) {\n    // console.log(\"getOrgans called\")\n    // const organs = [];\n    // let found = 0;\n    // spinalCore.load_type(connection, \"SpinalOrganConfigModel\", (file) => {\n    //    console.log(\"file\", file)\n    //    found++;\n    //    organs.push(file)\n    // })\n    // while (organs.length < found) { }\n\n    // return organs;\n    const path = \"/__users__/admin/organs\";\n\n    return new Promise((resolve, reject) => {\n      connection.load_or_make_dir(`${path}`, (directory) => {\n        const promises = [];\n\n        for (let index = 0; index < directory.length; index++) {\n          const element = directory[index];\n          promises.push(this.getFileModel(element));\n        }\n\n        return Promise.all(promises).then((result) => {\n          // for (const element of result) {\n          //    if (!element.id) {\n          //       console.log(element.name.get(), \"element.id in undefined\");\n          //       element.add_attr({ id: uuidv4() })\n          //    }\n          // }\n          resolve(\n            result.map((organ) => {\n              const id = organ._server_id;\n              const obj = organ.get();\n              obj._server_id = id;\n              return obj;\n            })\n          );\n        });\n      });\n    });\n  }\n\n  static addToReference(organServerId, contextId) {\n    const organModel = FileSystem._objects[organServerId];\n    if (organModel) {\n      const nodeId = SpinalGraphService.createNode(\n        {\n          name: organModel.name.get(),\n          networkName: organModel.name.get(),\n          type: organModel.type.get(),\n        },\n        organModel\n      );\n      const realNode = SpinalGraphService.getRealNode(nodeId);\n      organModel.addReference(contextId, realNode);\n      return SpinalGraphService.addChildInContext(\n        contextId,\n        nodeId,\n        contextId,\n        SpinalOrganConfigModel.CONTEXT_TO_ORGAN_RELATION,\n        SPINAL_RELATION_PTR_LST_TYPE\n      );\n    }\n    return Promise.reject(\"No model found for this server_id\");\n  }\n\n  static removeToReference(organServerId, contextId) {\n    const organModel = FileSystem._objects[organServerId];\n    if (organModel) {\n      return organModel.removeReference(contextId).then((node) => {\n        const childId = node.getId().get();\n        SpinalGraphService.removeChild(\n          contextId,\n          childId,\n          SpinalOrganConfigModel.CONTEXT_TO_ORGAN_RELATION,\n          SPINAL_RELATION_PTR_LST_TYPE\n        );\n      });\n    }\n    throw new Error(\"No model found for this server_id\");\n  }\n\n  static isReferencedInContext(organServerId, contextId) {\n    const organModel = FileSystem._objects[organServerId];\n\n    if (organModel) {\n      return organModel.isReferencedInContext(contextId);\n    }\n    throw new Error(\"No model found for this server_id\");\n  }\n\n  static getFileModel(file) {\n    return new Promise((resolve, reject) => {\n      file.load(async (x) => {\n        if (x instanceof SpinalOrganConfigModel) return resolve(x);\n        if (x.type && x.type.get() === SpinalOrganConfigModel.TYPE)\n          return resolve(x);\n        x.element.ptr.load((el) => resolve(el));\n        //   const element = await x.getElement();\n        //   resolve(element);\n      });\n    });\n  }\n\n  /**\n   * Listen Model\n   */\n\n  /**\n   * Link Profil to BMS Device\n   */\n\n  static linkProfilToDevice(bmsContextId, bmsDeviceId, profilId) {\n    return Promise.all([\n      this.getEndpointsMap(bmsContextId, bmsDeviceId),\n      this.getProfilItemsMap(profilId),\n    ]).then((result) => {\n      // console.log(result)\n    });\n  }\n\n  static getEndpointsMap(bmsContextId, bmsDeviceId) {\n    return SpinalGraphService.findInContext(\n      bmsDeviceId,\n      bmsContextId,\n      (node) => {\n        if (node.getType().get() === SpinalBmsEndpoint.nodeTypeName) {\n          SpinalGraphService._addNode(node);\n          return true;\n        }\n        return false;\n      }\n    ).then((nodes) => {\n      const bmsDeviceMap = new Map();\n\n      const promises = nodes.map(async (el) => {\n        // const realNode = SpinalGraphService.getRealNode(el.id.get());\n        // const element = await realNode.getElement();\n        // const networkId = element.get()\n        // _temp.nodeId = el.id.get();\n        // bmsDeviceMap.set(_temp.id, _temp);\n        // return _temp;\n        bmsDeviceMap.set(el.idNetwork.get(), el);\n      });\n\n      return Promise.all(promises).then(() => {\n        return bmsDeviceMap;\n      });\n    });\n  }\n\n  static getProfilItemsMap(profilId) {\n    return this.getItemsList(profilId).then((items) => {\n      // console.log(items);\n    });\n  }\n\n  static getItemsList(virtualDeviceId) {\n    const ITEM_LIST_RELATION = \"hasItemList\";\n\n    return SpinalGraphService.getChildren(virtualDeviceId, [ITEM_LIST_RELATION])\n      .then((itemList) => {\n        const promises = itemList.map((el) =>\n          SpinalGraphService.getChildren(el.id.get(), [\n            this.ITEM_LIST_TO_ITEMS_RELATION,\n          ])\n        );\n        return Promise.all(promises).then((items) => {\n          return items.flat().map((el) => el.get());\n        });\n      })\n      .catch((err) => {\n        return [];\n      });\n  }\n}\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-button v-if=\"isFound && !isLinked\"\n             class=\"md-icon-button md-primary\"\n             v-tooltip=\"'create and Link Node'\"\n             @click=\"createAndLinkNode\">\n    <md-icon>drive_file_rename_outline</md-icon>\n  </md-button>\n\n  <md-button v-else-if=\"isFound && isLinked\"\n             class=\"md-icon-button md-accent\"\n             v-tooltip=\"'Remove and unlink Node'\"\n             @click=\"removeAndUnlinkNode\">\n    <md-icon>delete</md-icon>\n  </md-button>\n\n  <md-button v-else>\n    <md-progress-spinner :md-diameter=\"30\"\n                         :md-stroke=\"3\"\n                         md-mode=\"indeterminate\"></md-progress-spinner>\n  </md-button>\n</template>\n\n\n<script>\nimport { SpinalBacnetPluginService } from \"../../../service\";\n\nexport default {\n  name: \"addOrganBtn\",\n  props: {\n    server_id: {},\n    contextId: {},\n  },\n  data() {\n    return {\n      isFound: false,\n      isLinked: false,\n    };\n  },\n  mounted() {\n    SpinalBacnetPluginService.isReferencedInContext(\n      this.server_id,\n      this.contextId\n    ).then((isLinked) => {\n      this.isFound = true;\n      this.isLinked = isLinked;\n    });\n  },\n  methods: {\n    createAndLinkNode() {\n      this.$emit(\"add\", this.server_id);\n    },\n    removeAndUnlinkNode() {\n      this.$emit(\"remove\", this.server_id);\n    },\n  },\n};\n</script>\n<style>\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Select Profil </md-dialog-title>\n    <md-dialog-content class=\"content\">\n      <link-component v-if=\"pageSelected === PAGES.selection\"\n                      :context_title=\"'Profils'\"\n                      :category_title=\"'Categories'\"\n                      :group_title=\"'Devices'\"\n                      :data=\"data\"\n                      :profils=\"profils\"\n                      :devices=\"devices\"\n                      :contextSelected=\"contextSelected\"\n                      :profilSelected=\"profilSelected\"\n                      :deviceSelected=\"deviceSelected\"\n                      @selectContext=\"selectContext\"\n                      @selectProfil=\"selectProfil\"\n                      @selectDevice=\"selectDevice\"></link-component>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.success\">\n        <md-icon class=\"md-size-5x\">done</md-icon>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.error\">\n        <md-icon class=\"md-size-5x\">error_outline</md-icon>\n      </div>\n\n      <div class=\"progress-bar\"\n           v-else-if=\"pageSelected === PAGES.creation\">\n        <div class=\"percent-number\">{{ percent }} %</div>\n        <md-progress-bar class=\"percent-bar\"\n                         md-mode=\"buffer\"\n                         :md-value=\"percent\"></md-progress-bar>\n      </div>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 :disabled=\"disabled()\"\n                 @click=\"createLinks\">Link</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport {\n  SpinalBmsDevice,\n  SpinalBmsNetwork,\n  SpinalBmsEndpoint,\n} from \"spinal-model-bmsnetwork\";\n\n// import { SpinalBacnetPluginService } from \"../../../service\";\n// import deviceProfilService from \"../../js/devices_profil_services\";\n\nimport {\n  DeviceProfileUtilities,\n  LinkBmsDeviceService,\n} from \"spinal-env-viewer-plugin-network-tree-service\";\n\nimport LinkComponent from \"../components/links/LinkComponent.vue\";\n\nexport default {\n  name: \"dialogComponent\",\n  components: {\n    \"link-component\": LinkComponent,\n  },\n  props: [\"onFinised\"],\n  data() {\n    this.bmsDevices;\n    this.bmsContextId;\n\n    this.PAGES = {\n      selection: 0,\n      result: 1,\n      loading: 2,\n      success: 3,\n      error: 4,\n      creation: 5,\n    };\n    // this.validMaps = new Map();\n    // this.invalidMaps = new Map();\n    return {\n      resultMaps: new Map(),\n      showDialog: true,\n      pageSelected: this.PAGES.selection,\n      percent: 0,\n\n      data: [],\n      profils: [],\n      devices: [],\n\n      contextSelected: undefined,\n      profilSelected: undefined,\n      deviceSelected: undefined,\n    };\n  },\n  mounted() {\n    // EventBus.$on(\"itemCreated\", (id) => {\n    //    this.pageSelected = this.PAGES.loading;\n    //    this.getAllData().then(() => {\n    //       this.pageSelected = this.PAGES.selection;\n    //    });\n    // });\n  },\n  methods: {\n    async opened(option) {\n      this.pageSelected = this.PAGES.loading;\n      this.bmsContextId = option.bmsContextId;\n\n      this.bmsDevices = await this.getAllDevices(\n        this.bmsContextId,\n        option.nodeId\n      );\n\n      this.getAllData().then(() => {\n        this.pageSelected = this.PAGES.selection;\n      });\n    },\n\n    removed(option) {\n      this.showDialog = false;\n    },\n\n    async createLinks() {\n      this.pageSelected = this.PAGES.creation;\n      // const promises = this.bmsDevices.map(({ id }) => {\n\n      //    // return SpinalBacnetPluginService.linkProfilToDevice(\n      //    //    this.bmsContextId,\n      //    //    id,\n      //    //    this.deviceSelected\n      //    // );\n      // });\n\n      const ids = this.bmsDevices.map((el) => el.id);\n      const listeLength = ids.length;\n      let isError = false;\n\n      while (!isError && ids.length > 0) {\n        const id = ids.shift();\n        try {\n          await LinkBmsDeviceService.linkProfilToBmsDevice(\n            this.bmsContextId,\n            id,\n            this.deviceSelected\n          );\n\n          this.percent = Math.floor(\n            (100 * (listeLength - ids.length)) / listeLength\n          );\n        } catch (error) {\n          console.error(error);\n          isError = true;\n        }\n      }\n\n      if (isError) {\n        this.pageSelected = this.PAGES.error;\n        return;\n      }\n\n      this.pageSelected = this.PAGES.success;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    getAllData() {\n      // return deviceProfilService\n      return DeviceProfileUtilities.getDeviceContextTreeStructure().then(\n        (result) => {\n          this.data = result;\n          this.updateProfils();\n          return;\n        }\n      );\n    },\n\n    disabled() {\n      return !this.deviceSelected || this.pageSelected === this.PAGES.success;\n    },\n\n    getItemsList(deviceId) {\n      const found = this.devices.find((el) => el.id === deviceId);\n      if (found) return found.itemList;\n    },\n\n    /* Selection */\n    selectContext(id) {\n      this.contextSelected = id;\n    },\n\n    selectProfil(id) {\n      this.profilSelected = id;\n    },\n\n    selectDevice(id) {\n      this.deviceSelected = id;\n    },\n\n    /* Update */\n    updateProfils() {\n      this.categories = [];\n      if (this.contextSelected) {\n        let val = this.data.find((el) => el.id === this.contextSelected);\n        if (val) this.profils = val.profils;\n      }\n    },\n\n    updateDevices() {\n      this.devices = [];\n      if (this.profilSelected) {\n        let val = this.profils.find((el) => el.id === this.profilSelected);\n        if (val) this.devices = val.devices;\n      }\n    },\n\n    getAllDevices(contextId, nodeId) {\n      return SpinalGraphService.findInContext(nodeId, contextId, (node) => {\n        if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n          SpinalGraphService._addNode(node);\n          return true;\n        }\n        return false;\n      }).then((result) => {\n        return result.map((el) => el.get());\n      });\n    },\n  },\n  watch: {\n    async contextSelected() {\n      await this.updateProfils();\n      this.profilSelected = undefined;\n    },\n    async profilSelected() {\n      this.updateDevices();\n      this.deviceSelected = undefined;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 60%;\n  height: 600px;\n}\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n.mdDialogContainer .content {\n  padding: 0 10px 24px 24px;\n}\n.mdDialogContainer .content .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.mdDialogContainer .content .results {\n  width: 100%;\n  height: 100%;\n  /* display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  overflow: auto; */\n}\n.mdDialogContainer .content .results .result-component {\n  width: 100%;\n  height: 70px;\n  border: 1px solid gray;\n  margin: 5px 0 5px 0;\n}\n\n.mdDialogContainer .content .progress-bar {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.mdDialogContainer .content .progress-bar .percent-number {\n  font-size: 1.8em;\n  margin-bottom: 10px;\n}\n\n.mdDialogContainer .content .progress-bar .percent-bar {\n  width: 90%;\n}\n\n/* .mdDialogContainer .content {\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.mdDialogContainer .content .section {\n  width: 33%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n} */\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n  max-width: 100%;\n  max-height: 100%;\n}\n</style>\n","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"selection_container\">\n      <div class=\"section\">\n         <link-template\n            :title=\"context_title\"\n            :data=\"data\"\n            :itemSelected=\"contextSelected\"\n            @select=\"selectContext\"\n         ></link-template>\n      </div>\n\n      <div class=\"section\">\n         <link-template\n            :title=\"category_title\"\n            :data=\"profils\"\n            :itemSelected=\"profilSelected\"\n            @select=\"selectProfil\"\n         ></link-template>\n\n      </div>\n\n      <div class=\"section\">\n         <link-template\n            :title=\"group_title\"\n            :data=\"devices\"\n            :itemSelected=\"deviceSelected\"\n            @select=\"selectDevice\"\n         ></link-template>\n      </div>\n   </div>\n</template>\n\n\n<script>\nimport LinkToGroupTemplate from \"./linkToGroupTemplate.vue\";\n\nexport default {\n   name: \"selectionComponent\",\n   props: {\n      context_title: {},\n      category_title: {},\n      group_title: {},\n      data: {},\n      profils: {},\n      devices: {},\n      contextSelected: {},\n      profilSelected: {},\n      deviceSelected: {},\n   },\n   components: { \"link-template\": LinkToGroupTemplate },\n   methods: {\n      selectContext(res) {\n         this.$emit(\"selectContext\", res);\n      },\n\n      selectProfil(res) {\n         this.$emit(\"selectProfil\", res);\n      },\n\n      selectDevice(res) {\n         this.$emit(\"selectDevice\", res);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.selection_container {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: space-between;\n   align-items: stretch;\n}\n\n.selection_container .section {\n   width: 33%;\n   border: 1px solid grey;\n   border-radius: 4% 4% 0 0;\n   padding: 15px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n   <div class=\"subContent\">\n      <div class=\"title\">\n         <div>{{title}}</div>\n         <!-- <div class=\"md-layout-item md-size-10 mdIcon\">\n        <md-button class=\"md-icon-button\"\n                   @click=\"createEvent\"\n                   :disabled=\"disableBtn\">\n          <md-icon>control_point</md-icon>\n        </md-button>\n      </div> -->\n      </div>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n\n.subContent .title {\n   width: 100%;\n   height: 10%;\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n\n.subContent .container {\n   width: 100%;\n   height: 90%;\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Unlink device to Profil\n    </md-dialog-title>\n    <md-dialog-content class=\"content\">\n\n      <div class=\"loading\"\n           v-if=\"pageSelected === PAGES.selection\">\n        Do you want unlink devices to profil ?\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.success\">\n        <md-icon class=\"md-size-5x\">done</md-icon>\n      </div>\n\n      <div class=\"loading\"\n           v-else-if=\"pageSelected === PAGES.error\">\n        <md-icon class=\"md-size-5x\">error_outline</md-icon>\n      </div>\n\n      <div class=\"progress-bar\"\n           v-else-if=\"pageSelected === PAGES.creation\">\n        <div class=\"percent-number\">{{percent}} %</div>\n        <md-progress-bar class=\"percent-bar\"\n                         md-mode=\"buffer\"\n                         :md-value=\"percent\"></md-progress-bar>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 :disabled=\"pageSelected !== PAGES.selection\"\n                 @click=\"unLink\">Yes</md-button>\n\n    </md-dialog-actions>\n  </md-dialog>\n\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport {\n  SpinalBmsDevice,\n  SpinalBmsNetwork,\n  SpinalBmsEndpoint,\n} from \"spinal-model-bmsnetwork\";\n\n// import { SpinalBacnetPluginService } from \"../../../service\";\n// import deviceProfilService from \"../../js/devices_profil_services\";\n\nimport {\n  DeviceProfileUtilities,\n  LinkBmsDeviceService,\n} from \"spinal-env-viewer-plugin-network-tree-service\";\n\nimport LinkComponent from \"../components/links/LinkComponent.vue\";\n\nexport default {\n  name: \"dialogComponent\",\n  components: {\n    \"link-component\": LinkComponent,\n  },\n  props: [\"onFinised\"],\n  data() {\n    this.bmsDevices;\n    this.bmsContextId;\n\n    this.PAGES = {\n      selection: 0,\n      result: 1,\n      loading: 2,\n      success: 3,\n      error: 4,\n      creation: 5,\n    };\n    // this.validMaps = new Map();\n    // this.invalidMaps = new Map();\n    return {\n      resultMaps: new Map(),\n      showDialog: true,\n      pageSelected: this.PAGES.selection,\n      percent: 0,\n    };\n  },\n  mounted() {\n    // EventBus.$on(\"itemCreated\", (id) => {\n    //    this.pageSelected = this.PAGES.loading;\n    //    this.getAllData().then(() => {\n    //       this.pageSelected = this.PAGES.selection;\n    //    });\n    // });\n  },\n  methods: {\n    async opened(option) {\n      this.pageSelected = this.PAGES.loading;\n      this.bmsContextId = option.bmsContextId;\n\n      this.bmsDevices = await this.getAllDevices(\n        this.bmsContextId,\n        option.nodeId\n      );\n\n      this.pageSelected = this.PAGES.selection;\n    },\n\n    removed(option) {\n      this.showDialog = false;\n    },\n\n    async unLink() {\n      this.pageSelected = this.PAGES.creation;\n\n      const ids = this.bmsDevices.map((el) => el.id);\n      const listeLength = ids.length;\n      let isError = false;\n\n      while (!isError && ids.length > 0) {\n        const id = ids.shift();\n        try {\n          await LinkBmsDeviceService.unLinkProfilToBmsDevice(\n            this.bmsContextId,\n            id\n          );\n\n          this.percent = Math.floor(\n            (100 * (listeLength - ids.length)) / listeLength\n          );\n        } catch (error) {\n          console.error(error);\n          isError = true;\n        }\n      }\n\n      if (isError) {\n        this.pageSelected = this.PAGES.error;\n        return;\n      }\n\n      this.pageSelected = this.PAGES.success;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    disabled() {\n      return !this.deviceSelected;\n    },\n\n    getItemsList(deviceId) {\n      const found = this.devices.find((el) => el.id === deviceId);\n      if (found) return found.itemList;\n    },\n\n    /* Selection */\n    selectContext(id) {\n      this.contextSelected = id;\n    },\n\n    selectProfil(id) {\n      this.profilSelected = id;\n    },\n\n    selectDevice(id) {\n      this.deviceSelected = id;\n    },\n\n    /* Update */\n    updateProfils() {\n      this.categories = [];\n      if (this.contextSelected) {\n        let val = this.data.find((el) => el.id === this.contextSelected);\n        if (val) this.profils = val.profils;\n      }\n    },\n\n    updateDevices() {\n      this.devices = [];\n      if (this.profilSelected) {\n        let val = this.profils.find((el) => el.id === this.profilSelected);\n        if (val) this.devices = val.devices;\n      }\n    },\n\n    getAllDevices(contextId, nodeId) {\n      return SpinalGraphService.findInContext(nodeId, contextId, (node) => {\n        if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n          SpinalGraphService._addNode(node);\n          return true;\n        }\n        return false;\n      }).then((result) => {\n        return result.map((el) => el.get());\n      });\n    },\n  },\n  watch: {\n    async contextSelected() {\n      await this.updateProfils();\n      this.profilSelected = undefined;\n    },\n    async profilSelected() {\n      this.updateDevices();\n      this.deviceSelected = undefined;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n}\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n.mdDialogContainer .content {\n  padding: 0 10px 24px 24px;\n}\n.mdDialogContainer .content .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.mdDialogContainer .content .results {\n  width: 100%;\n  height: 100%;\n  /* display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  overflow: auto; */\n}\n.mdDialogContainer .content .results .result-component {\n  width: 100%;\n  height: 70px;\n  border: 1px solid gray;\n  margin: 5px 0 5px 0;\n}\n\n.mdDialogContainer .content .progress-bar {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.mdDialogContainer .content .progress-bar .percent-number {\n  font-size: 1.8em;\n  margin-bottom: 10px;\n}\n\n.mdDialogContainer .content .progress-bar .percent-bar {\n  width: 90%;\n}\n\n/* .mdDialogContainer .content {\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.mdDialogContainer .content .section {\n  width: 33%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n} */\n/* .mdIcon {\n  display: flex;\n  align-items: center;\n} */\n</style>\n\n<style>\n.mdDialogContainer .md-dialog-container {\n  max-width: 100%;\n  max-height: 100%;\n}\n</style>","<template>\n   <md-dialog\n      class=\"mdDialogContainer\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title class=\"dialogTitle\">Hello</md-dialog-title>\n\n      <md-dialog-content class=\"content\">\n         <h1>Hello world</h1>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n\n         <md-button\n            class=\"md-primary\"\n            @click=\"createLink\"\n         >Link</md-button>\n      </md-dialog-actions>\n   </md-dialog>\n</template>\n<script>\nexport default {\n   name: \"linkToBimAutomateDialog\",\n   props: [\"onFinised\"],\n   data() {\n      this.PAGES = {\n         selection: 0,\n         configuration: 1,\n         result: 2,\n         loading: 3,\n         success: 4,\n         error: 5,\n      };\n      return {\n         showDialog: true,\n      };\n   },\n   methods: {\n      opened(option) {},\n      removed(save) {\n         if (save) {\n         }\n         this.showDialog = false;\n      },\n\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised(closeResult);\n         }\n      },\n\n      createLink() {},\n   },\n};\n</script>\n\n\n<style>\n.mdDialogContainer .md-dialog-container {\n   max-width: 100%;\n   max-height: 100%;\n}\n</style>","<template>\n   <md-dialog\n      class=\"mdDialogContainer\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n   >\n      <md-dialog-title class=\"dialogTitle\">Get Bacnet Value</md-dialog-title>\n      <md-dialog-content class=\"content\">\n\n         <div\n            class=\"itemList\"\n            v-if=\"pageSelected === PAGES.selection\"\n         >\n            <div\n               class=\"itemList-item\"\n               v-for=\"item in sensor_types\"\n               :key=\"item.id\"\n            >\n               <md-checkbox\n                  class=\"md-primary\"\n                  v-model=\"item.checked\"\n               />\n               <!-- :value=\"item.checked\" -->\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n            </div>\n         </div>\n\n         <div\n            class=\"devicesProgress\"\n            v-else-if=\"pageSelected === PAGES.creation\"\n         >\n\n            <div\n               class=\"device\"\n               v-for=\"device in nodes\"\n               :key=\"device.id\"\n            >\n               <div class=\"name\">{{device.info.name}}</div>\n               <div\n                  class=\"progress-bar\"\n                  v-if=\"device.progress != -1\"\n               >\n                  <div class=\"progress-value\">\n                     <md-progress-bar\n                        md-mode=\"buffer\"\n                        :md-value=\"device.progress\"\n                     ></md-progress-bar>\n                  </div>\n\n                  <div class=\"progress-number\">{{device.progress}} %</div>\n               </div>\n\n               <div\n                  class=\"progress-bar\"\n                  v-else\n               >\n                  <div\n                     class=\"message\"\n                     :class=\"device.message.id\"\n                  >{{device.message.text}}</div>\n               </div>\n            </div>\n\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.loading\"\n         >\n            <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.success\"\n         >\n            <md-icon class=\"md-size-5x\">done</md-icon>\n         </div>\n\n         <div\n            class=\"state\"\n            v-else-if=\"pageSelected === PAGES.error\"\n         >\n            <md-icon class=\"md-size-5x\">error_outline</md-icon>\n         </div>\n\n      </md-dialog-content>\n\n      <md-dialog-actions>\n         <md-button\n            class=\"md-primary\"\n            @click=\"closeDialog(false)\"\n         >Close</md-button>\n\n         <md-button\n            class=\"md-primary\"\n            :disabled='disabled()'\n            @click=\"getBacnetValue\"\n         >GET Bacnet</md-button>\n      </md-dialog-actions>\n   </md-dialog>\n</template>\n\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { SENSOR_TYPES, MESSAGES } from \"../../js/constants\";\nimport {\n   SpinalBacnetValueModel,\n   SpinalOrganConfigModel,\n} from \"spinal-model-bacnet\";\nimport { SpinalBmsDevice, SpinalBmsNetwork } from \"spinal-model-bmsnetwork\";\nimport utilities from \"../../js/utilities\";\n\nexport default {\n   name: \"GetBacnetValueDialog\",\n   props: [\"onFinised\"],\n   data() {\n      this.PAGES = {\n         selection: 0,\n         loading: 1,\n         creation: 2,\n         success: 3,\n         error: 4,\n      };\n\n      this.MESSAGES = MESSAGES;\n\n      return {\n         sensor_types: Object.assign([], SENSOR_TYPES),\n         pageSelected: this.PAGES.creation,\n         showDialog: true,\n         nodes: undefined,\n         context: undefined,\n         graph: undefined,\n         network: undefined,\n      };\n   },\n   methods: {\n      async opened(option) {\n         this.pageSelected = this.PAGES.loading;\n         const { selectedNode, context, graph } = option;\n         this.context = SpinalGraphService.getRealNode(context.id);\n         this.graph = graph;\n\n         let devices = await this.getBmsDevices(context.id, selectedNode.id);\n\n         this.nodes = devices.map((el) => ({\n            info: el.get(),\n            progress: -1,\n            message: this.MESSAGES.wait,\n         }));\n\n         this.network = await this._getNetwork(context.id, selectedNode.id);\n         // if (option.networkId) {\n         //    this.network = SpinalGraphService.getRealNode(option.networkId);\n         // } else {\n         //    this.network = await this._getNetwork(\n         //       option.contextId,\n         //       option.nodeId\n         //    );\n         // }\n\n         this.pageSelected = this.PAGES.selection;\n      },\n\n      removed(save) {\n         if (save) {\n         }\n         this.showDialog = false;\n      },\n\n      disabled() {\n         if (this.pageSelected !== this.PAGES.selection) return true;\n\n         const found = this.sensor_types.find((el) => el.checked);\n         if (found) return false;\n\n         return true;\n      },\n\n      async getBacnetValue() {\n         this.pageSelected = this.PAGES.creation;\n         const sensors = this.sensor_types\n            .filter((el) => el.checked)\n            .map((el) => el.value);\n\n         const iterator = [...this.nodes];\n         const organ = await this._getOrgan(this.network);\n\n         this.createValue(iterator, sensors, organ);\n      },\n\n      createValue(iterator, sensors, organ) {\n         console.log(\"inside createValue...\");\n         const value = iterator.shift();\n\n         if (value && this.showDialog) {\n            // const value = next.value;\n            const realNode = SpinalGraphService.getRealNode(value.info.id);\n\n            const model = new SpinalBacnetValueModel(\n               this.graph,\n               this.context,\n               organ,\n               this.network,\n               realNode,\n               sensors\n            );\n\n            console.log(\"model\", model);\n            model.addToNode();\n            let progressProcess;\n\n            const modelProcess = model.state.bind(() => {\n               switch (model.state.get()) {\n                  case \"recover\":\n                     console.log(\"recovering...\");\n                     value.message = this.MESSAGES.recover;\n                     value.progress = -1;\n                     break;\n                  case \"progress\":\n                     console.log(\"progress...\");\n                     progressProcess = model.progress.bind(() => {\n                        value.progress = model.progress.get();\n                     });\n                     break;\n                  case \"success\":\n                  case \"error\":\n                     console.log(\"success or error\");\n                     model.state.unbind(modelProcess);\n                     model.progress.unbind(progressProcess);\n\n                     value.message = this.MESSAGES[model.state.get()];\n                     value.progress = -1;\n\n                     this.createValue(iterator, sensors, organ);\n                     break;\n\n                  default:\n                     break;\n               }\n\n               // if (model.state.get() === \"success\") {\n               //    model.state.unbind(modelProcess);\n               //    value.message = this.MESSAGES.success;\n               //    value.progress = -1;\n\n               //    this.createValue(iterator, iterator.next(), sensors);\n               // } else if (model.state.get() === \"error\") {\n               //    model.state.unbind(modelProcess);\n               //    value.message = this.MESSAGES.error;\n               //    value.progress = -1;\n\n               //    this.createValue(iterator, iterator.next(), sensors);\n               // }\n            });\n         } else {\n            // this.pageSelected = this.PAGES.success;\n         }\n      },\n\n      closeDialog(closeResult) {\n         if (typeof this.onFinised === \"function\") {\n            this.onFinised(closeResult);\n         }\n      },\n\n      async _getNetwork(contextId, nodeId) {\n         const info = SpinalGraphService.getInfo(nodeId);\n\n         if (info.type.get() === SpinalBmsNetwork.nodeTypeName) {\n            const parents = await SpinalGraphService.getParents(nodeId, [\n               SpinalBmsNetwork.relationName,\n            ]);\n            const organ = parents.find(\n               (el) => el.type.get() === SpinalOrganConfigModel.TYPE\n            );\n            // console.log(\"organ\", organ);\n            if (organ) return SpinalGraphService.getRealNode(organ.id.get());\n         } else {\n            const networks = await SpinalGraphService.getChildrenInContext(\n               contextId,\n               contextId\n            );\n            const parentId = await this._getParent(nodeId);\n\n            for (const network of networks) {\n               const id = network.id.get();\n               const childId = SpinalGraphService.getChildrenIds(id);\n               if (childId.indexOf(parentId) !== -1) {\n                  return SpinalGraphService.getRealNode(id);\n               }\n            }\n         }\n      },\n\n      _getOrgan(network) {\n         if (network) {\n            return network.getElement();\n         }\n      },\n\n      async getBmsDevices(contextId, id) {\n         const info = SpinalGraphService.getInfo(id);\n         if (info.type.get() === SpinalBmsDevice.nodeTypeName) {\n            return [info];\n         }\n         return SpinalGraphService.findInContext(id, contextId, (node) => {\n            if (node.getType().get() === SpinalBmsDevice.nodeTypeName) {\n               SpinalGraphService._addNode(node);\n               return true;\n            }\n            return false;\n         });\n      },\n\n      async _getParent(nodeId) {\n         const realNode = SpinalGraphService.getRealNode(nodeId);\n         const parents = await realNode.getParents([\n            SpinalBmsDevice.relationName,\n         ]);\n         const found = parents.find(\n            (el) => el.getType().get() === SpinalBmsNetwork.nodeTypeName\n         );\n         if (found) {\n            SpinalGraphService._addNode(found);\n            return found.getId().get();\n         }\n      },\n\n      // async getNetworkId(nodeId) {\n\n      // },\n   },\n};\n</script>\n\n\n<style scoped>\n.mdDialogContainer {\n   width: 750px;\n   height: 500px;\n}\n\n.mdDialogContainer .dialogTitle {\n   text-align: center;\n}\n\n.mdDialogContainer .content {\n   padding: 0 10px 24px 24px;\n}\n\n.mdDialogContainer .content .devicesProgress {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   flex-direction: column;\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.mdDialogContainer .content .devicesProgress .device {\n   width: 95%;\n   min-height: 50px;\n   display: flex;\n   justify-content: space-between;\n   padding: 0 5px;\n   align-items: center;\n   border-top: 1px solid grey;\n}\n\n.mdDialogContainer .content .devicesProgress .device .name {\n   width: 70%;\n   font-size: 1.2em;\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n}\n.mdDialogContainer .content .devicesProgress .device .progress-bar {\n   width: 30%;\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n}\n\n.mdDialogContainer .content .devicesProgress .device .progress-bar .message {\n   text-align: center;\n}\n\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .message.waiting {\n   color: grey;\n}\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .message.success {\n   color: green;\n}\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .message.error {\n   color: #ff5252;\n}\n\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .progress-number {\n   width: 25%;\n   text-align: center;\n}\n\n.mdDialogContainer\n   .content\n   .devicesProgress\n   .device\n   .progress-bar\n   .progress-value {\n   width: 75%;\n}\n\n.mdDialogContainer .content .itemList {\n   width: 100%;\n   /* height: 100%; */\n   display: flex;\n   justify-content: space-between;\n   /* align-items: flex-start; */\n   flex-wrap: wrap;\n   padding-top: 20px;\n}\n\n.mdDialogContainer .content .itemList .itemList-item {\n   /* width: 200px; */\n   width: 33%;\n   height: 50px;\n   margin-bottom: 10px;\n   display: flex;\n   align-items: center;\n}\n\n.mdDialogContainer .content .state {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.mdDialogContainer .content .results {\n   width: 100%;\n   height: 100%;\n}\n\n.mdDialogContainer .content .results .result-component {\n   width: 100%;\n   height: 70px;\n   border: 1px solid gray;\n   margin: 5px 0 5px 0;\n}\n</style>","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bimService_1 = require(\"./bimObjects/bimService\");\nexports.bimObjectManagerService = bimService_1.default;\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BimObjectManagerService {\n    constructor() { }\n    getAllBimObjectsProperties(model) {\n        return this.getBimObjectProperties([\n            {\n                model: model,\n                selection: this.getLeafDbIds(model).selection\n            }\n        ]);\n    }\n    getBimObjectProperties(argBimObjects) {\n        // let properties = [];\n        let bimOjects = Array.isArray(argBimObjects)\n            ? argBimObjects\n            : [argBimObjects];\n        let promises = bimOjects.map(el => {\n            return this._getProperties(el.model, el.selection);\n        });\n        return Promise.all(promises).then(res => {\n            return res;\n        });\n    }\n    getLeafDbIds(model, rootId) {\n        const tree = model.getInstanceTree();\n        const dbIds = [];\n        if (typeof rootId === \"undefined\") {\n            rootId = [tree.nodeAccess.rootId];\n        }\n        else {\n            rootId = Array.isArray(rootId) ? rootId : [rootId];\n        }\n        rootId.forEach(el => {\n            const queue = [el];\n            let hasChildren;\n            while (queue.length) {\n                let id = queue.pop();\n                hasChildren = false;\n                tree.enumNodeChildren(id, childId => {\n                    hasChildren = true;\n                    queue.push(childId);\n                });\n                if (!hasChildren) {\n                    dbIds.push(id);\n                }\n            }\n        });\n        return { model: model, selection: dbIds };\n    }\n    getBimObjectsByPropertiesName(model, properties) {\n        return this.getAllBimObjectsProperties(model).then(res => {\n            let result = [];\n            for (let i = 0; i < res.length; i++) {\n                const element = res[i];\n                for (let j = 0; j < element.properties.length; j++) {\n                    const property = element.properties[j];\n                    if (typeof this._getLabel(property, properties) !== \"undefined\") {\n                        result.push(property);\n                    }\n                    // }\n                }\n                return result;\n            }\n        });\n    }\n    getBimObjectsValidated(referential, regEx) {\n        return this.getBimObjectProperties(referential).then(res => {\n            return res.map(element => {\n                return {\n                    model: element.model,\n                    properties: element.properties.filter(el => {\n                        return this._isValid(el, regEx);\n                    })\n                };\n            });\n        });\n    }\n    getBimObjectsByName(model, bimObjectName, labelName) {\n        return new Promise(resolve => {\n            model.search(bimObjectName.trim(), (res) => __awaiter(this, void 0, void 0, function* () {\n                let properties = yield this.getBimObjectProperties([\n                    { model: model, selection: res }\n                ]);\n                resolve(properties);\n            }), () => {\n                resolve([]);\n            }, labelName);\n        });\n    }\n    ////////////////////////////////////////////////////////////////////////\n    //                             PRIVATES                               //\n    ////////////////////////////////////////////////////////////////////////\n    _getProperties(model, selection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let properties = selection.map(el => {\n                return new Promise(resolve => {\n                    model.getProperties(el, res => {\n                        // properties.push(res);\n                        resolve(res);\n                    }, err => {\n                        resolve(undefined);\n                    });\n                });\n            });\n            return {\n                model: model,\n                properties: yield Promise.all(properties)\n            };\n        });\n    }\n    _getAllDbIds(model) {\n        var instanceTree = model.getData().instanceTree;\n        var allDbIdsStr = Object.keys(instanceTree.nodeAccess.dbIdToIndex);\n        return allDbIdsStr.map(function (id) {\n            return parseInt(id);\n        });\n    }\n    _getLabel(bim, properties) {\n        for (let i = 0; i < properties.length; i++) {\n            const propertieValue = properties[i].value;\n            const propertyName = properties[i].name;\n            const found = bim.properties.find(el => {\n                return typeof propertieValue === \"undefined\" ||\n                    propertieValue.length === 0\n                    ? el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase()\n                    : el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase() &&\n                        propertieValue == el.displayValue;\n            });\n            if (typeof found === \"undefined\") {\n                return undefined;\n            }\n        }\n        return true;\n    }\n    _isValid(el, regEx) {\n        for (let i = 0; i < regEx.length; i++) {\n            let nameRegex = regEx[i].nameRegex;\n            let valueRegex = regEx[i].valueRegex;\n            let found = el.properties.find(res => {\n                if (typeof valueRegex === \"undefined\") {\n                    return nameRegex.test(res.displayName);\n                }\n                return (nameRegex.test(res.displayName) && valueRegex.test(res.displayValue));\n            });\n            if (typeof found === \"undefined\") {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.default = new BimObjectManagerService();\n//# sourceMappingURL=bimService.js.map",null,"\"use strict\";"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-bacnet-manager.da1786fc.js.map"}