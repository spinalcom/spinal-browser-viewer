{"mappings":"A;;;;;A;;;;A;;;;A;;;;;A;;;;;A;;;;;;;;;;;;;;A;;;;;;;;;;;;A;;;;;;;;;;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;;;A;;;;A;;;;A;;;;A;;;;;;;;;A;;;;A;;;;;;;;A;;;;;;;;A;;;;;;A;;;;A;;;;;;;;;A;;;;;;;;;A;;;;;;A;;;;;A;;;;;;;;A;;;;;;;;A;;;;;;;;A;;;;;;;A;;;;A;;;;;;;A;;;;;A;;;;A;;;;;;;;;A;;;;A;;;;;A;;;;;;;A;;;;;A;;;;;A;;;;;;;;A;;;;;;;A;;;;;A;;;;;A;;;;;A;;;;;;;;;A;;;;;A;;;;;A;;;;A;;;;;;A;;;;;A;;;;;;;A;;;;;A;;;;A;;;;;;A;;;;;A;;;;;;A;;;;;;;;;A;;;;;;;A;;;;;A;;;;A;;;;A;;;;A;;;;;A;;;;;;;A;;;;;;;A;;;;;A;;;;;;;A;;;;;;A;;;;;;A;;;;A;;;;;;A;;;;;;;;A;;;;A;;;;;;A;;;;;A;;;;A;;;;;;;;;A;;;;A;;;;;A;;;;;;;A;;;;;;A;;;;;A;;;;;A;;;;AYqKA;;;;A;;;;AAMA;;;;;;;;;AAQA;;;;;;;;;;AAcA;;;;;AAIA;;;;;;;;;;;AAUA;;;;AAGA;;;;A;;;;AASA;;;;;;AAKA;;;;;;A;;;;A;;;;;;A;;;;A;;;;A;;;;;;A;;;;A;;;;A;;;;;;A;;;;A","sources":["node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/message.vue","node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/attachment.vue","node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/messageComponent.vue","node_modules/spinal-env-viewer-plugin-documentation/view/notes/components/notesComponent.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/component/menuURL.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/URLPanel.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/component/drive.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/component/menuFile.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/FilePanel.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/component/menuAttributes.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/component/menuCategoryAttributes.vue","node_modules/spinal-env-viewer-plugin-documentation/view/documentation/AttributesPanel.vue","node_modules/spinal-env-viewer-plugin-documentation/documentationComponent.vue","node_modules/spinal-env-viewer-plugin-documentation/view/rightClick/attributesRightClick.vue","node_modules/spinal-env-viewer-plugin-documentation/view/rightClick/deleteUrlRightClick.vue","node_modules/spinal-env-viewer-plugin-documentation/view/rightClick/urlRightClick.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n\n  <li class=\"clearfix\"\n      v-if=\"type === MESSAGE_TYPES.file\">\n    <div class=\"message-data align-right\">\n      <span class=\"message-data-time\">{{date}}</span> &nbsp; &nbsp;\n      <span class=\"message-data-name\">{{username}}</span>\n    </div>\n    <div class=\"message messageIcon other-message float-right\"\n         @mouseover=\"hover = true\"\n         @mouseleave=\"hover = false\">\n      <div class=\"texte\">\n        <md-icon class=\"description\">description</md-icon>\n        {{message}}\n      </div>\n\n      <actions-btn class=\"message_actions\"\n                   :hover=\"hover\"\n                   @download=\"download\"\n                   @restoreState=\"restoreState\"\n                   :viewPoint=\"viewPoint\"></actions-btn>\n\n      <!-- <div class=\"message_actions\"\n           v-if=\"hover\">\n        <md-button class=\"md-dense md-primary\"\n                   @click=\"download\">\n          <md-icon>get_app</md-icon>\n          Download\n        </md-button>\n      </div> -->\n\n    </div>\n\n  </li>\n\n  <li class=\"clearfix\"\n      v-else-if=\"type === MESSAGE_TYPES.image\"\n      @mouseover=\"hover = true\"\n      @mouseleave=\"hover = false\">\n    <div class=\"message-data align-right\">\n      <span class=\"message-data-time\">{{date}}</span> &nbsp; &nbsp;\n      <span class=\"message-data-name\">{{username}}</span>\n    </div>\n    <div class=\"message other-message float-right\"\n         @mouseover=\"hover = true\"\n         @mouseleave=\"hover = false\">\n      <div class=\"images\">\n        <div class=\"img_texte\">{{message}}</div>\n        <div class=\"image\">\n          <img :src=\"`/sceen/_?u=${image}`\"\n               alt=\"image\" />\n        </div>\n      </div>\n\n      <actions-btn class=\"message_actions\"\n                   :hover=\"hover\"\n                   @download=\"download\"\n                   @restoreState=\"restoreState\"\n                   :viewPoint=\"viewPoint\"></actions-btn>\n\n    </div>\n  </li>\n\n  <li class=\"clearfix\"\n      v-else>\n    <div class=\"message-data align-right\">\n      <span class=\"message-data-time\">{{date}}</span> &nbsp; &nbsp;\n      <span class=\"message-data-name\">{{username}}</span>\n    </div>\n    <div class=\"message other-message float-right\">\n      <div class=\"texte\">\n        {{message}}\n      </div>\n    </div>\n\n  </li>\n</template>\n\n<script>\nimport { MESSAGE_TYPES } from \"spinal-models-documentation\";\nimport actionBtnVue from \"./actionsBtn.vue\";\n\nexport default {\n  name: \"message\",\n  props: {\n    date: {},\n    username: {},\n    message: {},\n    type: {},\n    file: {},\n    viewPoint: {},\n  },\n  components: {\n    \"actions-btn\": actionBtnVue,\n  },\n  data() {\n    this.MESSAGE_TYPES = MESSAGE_TYPES;\n    return {\n      hover: false,\n      image: undefined,\n      info: undefined,\n    };\n  },\n  mounted() {\n    setTimeout(() => {\n      console.log(\"this.file\", this.viewPoint);\n      this.chargeImg();\n    }, 500);\n  },\n  methods: {\n    chargeImg() {\n      if (this.file) {\n        this.file.load((f) => {\n          this.info = f;\n          f._ptr.load((path) => {\n            this.image = path._server_id;\n          });\n        });\n      }\n    },\n\n    download() {\n      var element = document.createElement(\"a\");\n      element.setAttribute(\"href\", \"/sceen/_?u=\" + this.image);\n      element.setAttribute(\"download\", this.info.name.get());\n      element.click();\n    },\n\n    restoreState() {\n      const viewer = window.spinal.ForgeViewer.viewer;\n\n      if (Object.keys(this.viewPoint).length === 0) return;\n\n      const viewStateString = this.viewPoint.viewState.get();\n      const objectStateString = this.viewPoint.objectState.get();\n\n      const viewState = JSON.parse(viewStateString);\n      const objectState = JSON.parse(objectStateString);\n\n      viewer.restoreState(viewState);\n\n      this.selection(viewer, objectState.selected);\n      this.isolate(viewer, objectState.isolated);\n    },\n\n    isolate(viewer, items) {\n      const bimObjectService = window.spinal.BimObjectService;\n      items.map((el) => {\n        const bimFileId =\n          bimObjectService.mappingModelIdBimFileId[el.modelId].bimFileId;\n        const model = spinal.BimObjectService.getModelByBimfile(bimFileId);\n\n        viewer.impl.visibilityManager.isolate(el.ids, model);\n      });\n    },\n\n    selection(viewer, items) {\n      const bimObjectService = window.spinal.BimObjectService;\n      items.map((el) => {\n        const bimFileId =\n          bimObjectService.mappingModelIdBimFileId[el.modelId].bimFileId;\n        const model = spinal.BimObjectService.getModelByBimfile(bimFileId);\n\n        model.selector.setSelection(el.selection, model, \"selectOnly\");\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n$green: #86bb71;\n$blue: #ffffff;\n$orange: #e38968;\n$gray: #92959e;\n$black: #000000;\n\nli.clearfix {\n  padding-bottom: 20px;\n  list-style: none;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\n.message-data {\n  margin-bottom: 15px;\n}\n\n.message-data-time {\n  color: lighten($gray, 8%);\n  padding-left: 6px;\n}\n\n.message-data-name {\n  color: $blue;\n  text-transform: capitalize;\n}\n\n.message_actions {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  border-radius: 7px 7px 0 0;\n  justify-content: flex-end;\n  align-items: center;\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  padding: 10px;\n  background-color: #424242;\n}\n\n.message {\n  color: #000000;\n  padding: 10px 10px 5px 10px;\n  line-height: 26px;\n  font-size: 16px;\n  border-radius: 7px;\n  margin-bottom: 40px;\n  width: 100%;\n  position: relative;\n  min-height: 30px;\n\n  &:after {\n    bottom: 100%;\n    left: 7%;\n    border: solid transparent;\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n    border-bottom-color: $green;\n    border-width: 10px;\n    margin-left: -10px;\n  }\n}\n\n.message:hover {\n  cursor: pointer;\n}\n\n.my-message {\n  background: $green;\n}\n\n.other-message {\n  background: $blue;\n\n  &:after {\n    border-bottom-color: $blue;\n    left: 93%;\n  }\n}\n\n.me {\n  margin-right: 3px;\n  font-size: 10px;\n  color: $blue;\n}\n\n.align-left {\n  text-align: left;\n}\n\n.align-right {\n  text-align: right;\n}\n\n.float-right {\n  float: right;\n}\n\n.clearfix:after {\n  visibility: hidden;\n  display: block;\n  font-size: 0;\n  content: \" \";\n  clear: both;\n  height: 0;\n}\n</style>\n\n<style lang=\"scss\">\n$black: #000000;\n\nli.clearfix .description.md-icon.md-theme-default.md-icon-font {\n  color: $black !important;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"content\">\n      <div\n         class=\"md-caption name\"\n         v-tooltip=\"file.name\"\n      >{{file.name}}</div>\n      <div\n         class=\"md-caption delete\"\n         @click=\"remove\"\n      >X</div>\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"attachment\",\n   props: [\"file\"],\n   data() {\n      return {};\n   },\n   methods: {\n      remove() {\n         this.$emit(\"remove\", this.file);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.content {\n   width: 95%;\n   margin: auto;\n   display: flex;\n   font-weight: bold;\n   justify-content: space-between;\n}\n\n.content .name {\n   width: calc(100% - 35px);\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.content .delete {\n   /* margin-right: 30px; */\n   width: 30px;\n   text-align: center;\n   color: #ff0000;\n}\n\n.content .delete:hover {\n   cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"notesContainer\">\n      <md-content\n         id=\"myList\"\n         class=\"messages md-scrollbar\"\n      >\n         <ul class=\"div_messages\">\n            <message-component\n               v-for=\"(note,index) in notesDisplayList\"\n               :key=\"index\"\n               :date=\"note.date\"\n               :username=\"note.username\"\n               :message=\"note.message\"\n               :type=\"note.type\"\n               :file=\"note.file\"\n               :viewPoint=\"note.viewPoint\"\n            ></message-component>\n         </ul>\n\n      </md-content>\n\n      <div class=\"form\">\n         <form\n            @submit.prevent=\"addNote\"\n            class=\"noteForm\"\n         >\n\n            <!-- <div class=\"icons\">\n          <md-button class=\"icons md-icon-button md-raised md-primary\"\n                     @click=\"addPJ\"\n                     :title=\"'Add Attachment'\">\n            <md-icon>attach_file</md-icon>\n          </md-button>\n\n          <md-button class=\"icons md-icon-button md-raised md-primary\"\n                     @click=\"TakeScreenShot\"\n                     :title=\"'Take a screenshot'\">\n            <md-icon>add_a_photo</md-icon>\n          </md-button>\n\n          <md-button class=\"icons md-icon-button md-raised md-primary\"\n                     @click=\"saveViewPoint\"\n                     :title=\"'save point of view'\">\n            <md-icon>near_me</md-icon>\n          </md-button>\n        </div> -->\n            <div class=\"icons\">\n               <md-speed-dial md-direction=\"top\">\n                  <md-speed-dial-target class=\"md-fab md-mini md-primary\">\n                     <md-icon class=\"md-morph-initial\">menu</md-icon>\n                     <md-icon class=\"md-morph-final\">close</md-icon>\n                  </md-speed-dial-target>\n\n                  <md-speed-dial-content>\n\n                     <md-button\n                        class=\"md-icon-button md-raised md-primary md-fab md-mini\"\n                        @click=\"saveViewPoint\"\n                        :title=\"'save point of view'\"\n                     >\n                        <md-icon>near_me</md-icon>\n                     </md-button>\n\n                     <md-button\n                        class=\"md-icon-button md-raised md-primary md-fab md-mini\"\n                        @click=\"TakeScreenShot\"\n                        :title=\"'Take a screenshot'\"\n                     >\n                        <md-icon>add_a_photo</md-icon>\n                     </md-button>\n\n                     <md-button\n                        class=\"md-icon-button md-raised md-primary md-fab md-mini\"\n                        @click=\"addPJ\"\n                        :title=\"'Add Attachment'\"\n                     >\n                        <md-icon>attach_file</md-icon>\n                     </md-button>\n\n                  </md-speed-dial-content>\n               </md-speed-dial>\n            </div>\n\n            <div class=\"messageForm\">\n               <!-- v-if=\"messages.pj.length > 0\" -->\n               <md-content class=\"pjDiv md-scrollbar\">\n\n                  <attachment-component\n                     v-for=\"(file,index) in messages.pj\"\n                     :key=\"index\"\n                     :file=\"file\"\n                     @remove=\"removePJ\"\n                  >{{file.name}}\n                  </attachment-component>\n               </md-content>\n               <div class=\"messageField\">\n                  <md-field class=\"myField md-inline\">\n                     <label>Message</label>\n                     <md-input v-model=\"messages.messageUser\"></md-input>\n                  </md-field>\n               </div>\n\n            </div>\n\n            <div class=\"sendBtn\">\n               <!-- <md-button\n                  type=\"submit\"\n                  class=\"md-dense md-raised md-primary\"\n               >\n                  Send\n                  <md-icon>send</md-icon>\n               </md-button> -->\n\n               <md-button\n                  class=\"md-icon-button md-raised md-primary\"\n                  type=\"submit\"\n                  title=\"send\"\n               >\n                  <md-icon>send</md-icon>\n               </md-button>\n            </div>\n\n         </form>\n      </div>\n   </div>\n</template>\n\n<script>\nimport { MESSAGE_TYPES } from \"spinal-models-documentation\";\n\nimport {\n   SpinalNode,\n   SpinalGraphService,\n} from \"spinal-env-viewer-graph-service\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nimport { NOTE_TYPE } from \"spinal-env-viewer-plugin-documentation-service/dist/Models/constants\";\n\nimport moment from \"moment\";\nimport messageVue from \"./message.vue\";\nimport attachmentVue from \"./attachment.vue\";\n\nexport default {\n   name: \"messageComponent\",\n\n   props: {\n      nodeInfo: {},\n      noteContextSelected: {\n         default: () => ({}),\n      },\n      noteCategorySelected: {\n         default: () => ({}),\n      },\n      noteGroupSelected: {\n         default: () => ({}),\n      },\n   },\n\n   components: {\n      \"message-component\": messageVue,\n      \"attachment-component\": attachmentVue,\n   },\n\n   data() {\n      this.userConnected = {\n         username: window.spinal.spinalSystem.getUser().username,\n         userId: FileSystem._user_id,\n      };\n      return {\n         messages: {\n            messageUser: \"\",\n            pj: [],\n         },\n         // messageUser: \"\",\n         messageUserEdit: \"\",\n         notesDisplayList: [],\n         editNodePopup: false,\n         selectedNote: undefined,\n         scrollToEnd: false,\n      };\n   },\n\n   methods: {\n      async updateNotesList() {\n         this.notesDisplayList = [];\n\n         if (this.nodeInfo.selectedNode) {\n            let notes = await serviceDocumentation.getNotes(\n               this.nodeInfo.selectedNode\n            );\n\n            let i = 0;\n            for (let note of notes) {\n               let obj = {\n                  id: i,\n                  username: note.element.username\n                     ? note.element.username.get()\n                     : \"unknow\",\n                  message: note.element.message.get(),\n                  date: this.toDate(note.element.date.get()),\n                  type: note.element.type ? note.element.type.get() : undefined,\n                  file: note.element.file,\n                  selectedNode: note.selectedNode,\n                  element: note.element,\n                  viewPoint: note.element.viewPoint,\n               };\n               this.notesDisplayList.push(obj);\n               i++;\n            }\n         }\n      },\n\n      toDate: function (date) {\n         return moment(date).format(\"MMMM Do YYYY, h:mm:ss a\");\n      },\n\n      async addFilesNote() {\n         if (this.messages.pj.length === 0) return;\n\n         await serviceDocumentation.addFileAsNote(\n            this.nodeInfo.selectedNode,\n            this.messages.pj,\n            this.userConnected,\n            this.noteContextSelected.id,\n            this.noteGroupSelected.id\n         );\n      },\n\n      _sendNote(node, message, type, path) {\n         return serviceDocumentation.addNote(\n            node,\n            this.userConnected,\n            message,\n            type,\n            path,\n            this.noteContextSelected.id,\n            this.noteGroupSelected.id\n         );\n      },\n\n      async addNote() {\n         if (typeof this.nodeInfo.selectedNode === \"undefined\") {\n            this.nodeInfo.selectedNode = await this._createBimObjectNode(\n               this.nodeInfo.model,\n               this.nodeInfo.dbid\n            );\n\n            this.resetBind();\n            this.updatedd();\n         }\n\n         await this.addFilesNote();\n         this.messages.pj = [];\n\n         if (this.messages.messageUser.trim().length === 0) return;\n\n         await this._sendNote(\n            this.nodeInfo.selectedNode,\n            this.messages.messageUser\n         );\n         this.messages.messageUser = \"\";\n         this.resetBind();\n         this.updatedd();\n      },\n\n      getUsername() {\n         return window.spinal.spinalSystem.getUser().username;\n      },\n\n      updatedd() {\n         var container = document.querySelector(\"#myList\");\n         setTimeout(() => {\n            container.scrollTop = container.scrollHeight;\n         }, 300);\n      },\n\n      resetBind() {\n         if (this.nodeInfo !== undefined) {\n            if (this.nodeInfo.selectedNode !== undefined) {\n               if (this.myBind !== undefined) {\n                  this.nodeInfo.selectedNode.unbind(this.myBind);\n                  this.myBind = undefined;\n               }\n               if (this.myBind === undefined) {\n                  this.myBind = this.nodeInfo.selectedNode.bind(\n                     this.updateNotesList.bind(this)\n                  );\n               }\n            }\n         }\n      },\n\n      addPJ() {\n         const maxSize = 25000000;\n         const input = document.createElement(\"input\");\n         input.type = \"file\";\n         input.multiple = true;\n\n         input.click();\n\n         input.addEventListener(\n            \"change\",\n            (event) => {\n               const files = event.target.files;\n\n               let filelist = [];\n               for (const file of files) {\n                  filelist.push(file);\n               }\n\n               filelist.push(...this.messages.pj);\n\n               const sizes = filelist.map((el) => el.size);\n\n               const filesSize = sizes.reduce((a, b) => a + b);\n\n               if (filesSize > maxSize) {\n                  alert(\n                     \"The selected file(s) is too large. The maximum size must not exceed 25 MB\"\n                  );\n                  return;\n               }\n\n               this.messages.pj = filelist;\n            },\n            false\n         );\n      },\n\n      removePJ(file) {\n         this.messages.pj = this.messages.pj.filter(\n            (el) => el.name !== file.name\n         );\n      },\n\n      async TakeScreenShot() {\n         const file = await this.getScreenShotFile();\n         this.messages.pj.push(file);\n      },\n\n      getScreenShotFile(isViewPoint = false) {\n         return new Promise(async (resolve, reject) => {\n            window.spinal.ForgeViewer.viewer.getScreenShot(\n               0,\n               0,\n               async (url) => {\n                  let blob = await fetch(url).then((r) => r.blob());\n\n                  const name = this.nodeInfo.selectedNote\n                     ? this.nodeInfo.selectedNote.getName().get()\n                     : await this.getObjectName(\n                          this.nodeInfo.model,\n                          this.nodeInfo.dbid\n                       );\n\n                  let file_name;\n\n                  if (!isViewPoint) {\n                     file_name = `screenshot of ${name} from ${moment().format(\n                        \"L\"\n                     )}.png`;\n                  } else {\n                     file_name = `viewPoint of ${name} from ${moment().format(\n                        \"L\"\n                     )}.png`;\n                  }\n\n                  let file = this.blobToFile(blob, file_name);\n\n                  resolve(file);\n               }\n            );\n         });\n      },\n\n      getObjectName(model, dbid) {\n         if (model && dbid) {\n            return new Promise((resolve) => {\n               model.getProperties(dbid, async (res) => {\n                  console.log(res.name);\n                  resolve(res.name);\n               });\n            });\n         }\n         return \"\";\n      },\n\n      blobToFile(theBlob, fileName) {\n         theBlob.lastModifiedDate = new Date();\n         theBlob.name = fileName;\n         return theBlob;\n      },\n\n      _createBimObjectNode(model, dbid) {\n         if (model && dbid) {\n            return new Promise((resolve) => {\n               model.getProperties(dbid, async (res) => {\n                  const info = await window.spinal.BimObjectService.createBIMObject(\n                     dbid,\n                     res.name,\n                     model\n                  );\n                  if (info instanceof SpinalNode) return resolve(info);\n\n                  resolve(SpinalGraphService.getRealNode(info.id.get()));\n               });\n            });\n         }\n      },\n\n      async saveViewPoint() {\n         const getCircularReplacer = () => {\n            const seen = new WeakSet();\n            return (key, value) => {\n               if (typeof value === \"object\" && value !== null) {\n                  if (seen.has(value)) {\n                     return;\n                  }\n                  seen.add(value);\n               }\n               return value;\n            };\n         };\n\n         const viewer = window.spinal.ForgeViewer.viewer;\n\n         const filter = {\n            guid: true,\n            seedURN: true,\n            overrides: true,\n            objectSet: false,\n            viewport: true,\n            renderOptions: true,\n         };\n         const file = await this.getScreenShotFile(true);\n         const viewerState = viewer.getState(filter);\n         const objectState = {\n            isolated: viewer\n               .getAggregateIsolation()\n               .map((el) => ({ modelId: el.model.id, ids: el.ids })),\n\n            selected: viewer.getAggregateSelection().map((el) => ({\n               modelId: el.model.id,\n               selection: el.selection,\n            })),\n         };\n\n         file.viewState = JSON.stringify(viewerState, getCircularReplacer());\n         file.objectState = JSON.stringify(objectState, getCircularReplacer());\n\n         this.messages.pj.push(file);\n      },\n   },\n\n   watch: {\n      nodeInfo() {\n         this.resetBind();\n         this.updatedd();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.notesContainer {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: space-between;\n   flex-direction: column;\n   margin: auto;\n}\n\n.notesContainer .messages {\n   width: 100%;\n   height: calc(70% - 10px);\n   background: transparent;\n   overflow: hidden;\n   overflow-y: auto;\n   padding: 0;\n}\n\n.div_messages {\n   width: 90%;\n   height: 100%;\n   margin: auto;\n}\n\n.notesContainer .form {\n   width: 100%;\n   height: 30%;\n}\n\n.notesContainer .form .noteForm {\n   width: 100%;\n   height: 100%;\n   margin: auto;\n   display: flex;\n   /* flex-direction: column; */\n   justify-content: space-between;\n}\n\n/* .notesContainer .form .noteForm .icons {\n   flex: 0 0 10%;\n   display: flex;\n   // align-items: flex-end; \n   align-self: flex-end;\n   // border-radius: 20%; \n   // padding-left: 5px; \n} */\n\n.notesContainer .form .noteForm .sendBtn,\n.notesContainer .form .noteForm .icons {\n   /* flex: 0 0 10%; */\n   width: 10%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: flex-end;\n}\n\n.notesContainer .form .noteForm .messageForm {\n   /* flex: 1 1 calc(100% - 80px); */\n   /* flex: 0 0 80%; */\n   width: calc(80% - 20px);\n   height: calc(100% - 15px);\n   display: flex;\n   flex-direction: column;\n   justify-content: flex-end;\n}\n\n.notesContainer .form .noteForm .messageForm .pjDiv {\n   height: calc(100% - 40px);\n   background: transparent;\n   border: 1px dashed grey;\n   overflow: auto;\n}\n\n.notesContainer .form .noteForm .messageForm .pjDiv p {\n   margin: 0px;\n}\n\n.notesContainer .form .noteForm .messageForm .messageField {\n   width: 100%;\n   height: 40px;\n   display: flex;\n   align-items: flex-end;\n}\n\n.notesContainer .form .noteForm .messageForm .messageField .myField {\n   margin: 0px !important;\n   min-height: unset !important;\n}\n</style>\n\n<style>\n.notesContainer .form .noteForm .sendBtn .md-button .md-ripple {\n   padding: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <div class=\"notesBox\">\n    <md-toolbar class=\"mdToolbar md-dense\"\n                md-elevation=\"0\">\n\n      <!-- <div class=\"md-toolbar-section-start titleDiv\">\n        <div v-if=\"nodeInfo && nodeInfo.selectedNode\">\n          {{nodeInfo.selectedNode.info.name.get()}}\n        </div>\n\n        <div v-else>BIM Object not created</div>\n      </div> -->\n\n      <div class=\"md-toolbar-section-start breadCrumb\">\n        <div\n             v-if=\"noteContextSelected && noteCategorySelected && noteGroupSelected\">\n          <div>\n            <span\n                  class=\"md-primary md-caption\">{{noteContextSelected.name}}</span>\n            <span class=\"md-primary md-caption\">/</span>\n            <span\n                  class=\"md-primary md-caption\">{{noteCategorySelected.name}}</span>\n            <span class=\"md-primary md-caption\">/</span>\n            <span\n                  class=\"md-primary md-caption\">{{noteGroupSelected.name}}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"md-toolbar-section-end\">\n        <md-button class=\"md-icon-button md-primary\"\n                   @click=\"OpenLinkDialog\">\n          <md-icon>settings_applications</md-icon>\n        </md-button>\n      </div>\n\n    </md-toolbar>\n\n    <div class=\"notes_div\">\n      <message-component :nodeInfo=\"nodeInfo\"\n                         :noteContextSelected=\"noteContextSelected\"\n                         :noteCategorySelected=\"noteCategorySelected\"\n                         :noteGroupSelected=\"noteGroupSelected\">\n      </message-component>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nimport { NOTE_TYPE } from \"spinal-env-viewer-plugin-documentation-service/dist/Models/constants\";\n\n// import moment from \"moment\";\n// import messageVue from \"./message.vue\";\n// import attachmentVue from \"./attachment.vue\";\n\nconst {\n  spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\n// import { FileExplorer } from \"../../../service/fileSystemExplorer.js\";\n// import { MESSAGE_TYPES } from \"spinal-models-documentation\";\n// import {\n//   SpinalNode,\n//   SpinalGraphService,\n// } from \"spinal-env-viewer-graph-service\";\n\nimport messageComponentVue from \"./messageComponent.vue\";\n\nexport default {\n  name: \"noteComponent\",\n  data() {\n    return {\n      // userConnected: {\n      //   username: window.spinal.spinalSystem.getUser().username,\n      //   userId: FileSystem._user_id,\n      // },\n      // messages: {\n      //   messageUser: \"\",\n      //   pj: [],\n      // },\n      // // messageUser: \"\",\n      // messageUserEdit: \"\",\n      // notesDisplayList: [],\n      // editNodePopup: false,\n      // selectedNote: undefined,\n      // scrollToEnd: false,\n\n      nodeInfo: undefined,\n      noteContextSelected: undefined,\n      noteCategorySelected: undefined,\n      noteGroupSelected: undefined,\n    };\n  },\n  components: {\n    \"message-component\": messageComponentVue,\n    // \"attachment-component\": attachmentVue,\n  },\n  methods: {\n    opened(option) {\n      this.nodeInfo = option;\n      // this.resetBind();\n      // this.updatedd();\n    },\n\n    removed(option, viewer) {},\n\n    closed(option, viewer) {},\n\n    OpenLinkDialog() {\n      spinalPanelManagerService.openPanel(\"linkToGroupDialog\", {\n        type: NOTE_TYPE,\n        itemSelected: [],\n        callback: (context, category, group) => {\n          this.noteContextSelected = context;\n          this.noteCategorySelected = category;\n          this.noteGroupSelected = group;\n        },\n      });\n    },\n    /*\n    async updateNotesList() {\n      this.notesDisplayList = [];\n\n      if (this.nodeInfo.selectedNode) {\n        let notes = await serviceDocumentation.getNotes(\n          this.nodeInfo.selectedNode\n        );\n\n        let i = 0;\n        for (let note of notes) {\n          let obj = {\n            id: i,\n            username: note.element.username.get(),\n            message: note.element.message.get(),\n            date: this.toDate(note.element.date.get()),\n            type: note.element.type ? note.element.type.get() : undefined,\n            file: note.element.file,\n            selectedNode: note.selectedNode,\n            element: note.element,\n            viewPoint: note.element.viewPoint,\n          };\n          this.notesDisplayList.push(obj);\n          i++;\n        }\n      }\n    },\n\n    toDate: function (date) {\n      return moment(date).format(\"MMMM Do YYYY, h:mm:ss a\");\n    },\n\n    async addFilesNote() {\n      if (this.messages.pj.length === 0) return;\n\n      await serviceDocumentation.addFileAsNote(\n        this.nodeInfo.selectedNode,\n        this.messages.pj,\n        this.userConnected,\n        this.noteContextSelected.id,\n        this.noteGroupSelected.id\n      );\n\n      // const promises = this.messages.pj.map(async (file) => {\n      //   return {\n      //     file: file,\n      //     directory: await this._getOrCreateFileDirectory(\n      //       this.nodeInfo.selectedNode\n      //     ),\n      //   };\n      // });\n\n      // return Promise.all(promises).then((res) => {\n      //   return res.map((data) => {\n      //     const type = this._getFileType(data.file);\n\n      //     let files = FileExplorer.addFileUpload(data.directory, [data.file]);\n      //     let file = files.length > 0 ? files[0] : undefined;\n\n      //     this._sendNote(\n      //       this.nodeInfo.selectedNode,\n      //       data.file.name,\n      //       type,\n      //       file\n      //     );\n      //   });\n      // });\n    },\n\n    _sendNote(node, message, type, path) {\n      return serviceDocumentation.addNote(\n        node,\n        this.userConnected,\n        message,\n        type,\n        path,\n        this.noteContextSelected.id,\n        this.noteGroupSelected.id\n      );\n    },\n\n    async addNote() {\n      if (typeof this.nodeInfo.selectedNode === \"undefined\") {\n        this.nodeInfo.selectedNode = await this._createBimObjectNode(\n          this.nodeInfo.model,\n          this.nodeInfo.dbid\n        );\n\n        this.updatedd();\n      }\n\n      await this.addFilesNote();\n      this.messages.pj = [];\n\n      if (this.messages.messageUser.trim().length === 0) return;\n\n      await this._sendNote(\n        this.nodeInfo.selectedNode,\n        this.messages.messageUser\n      );\n      this.messages.messageUser = \"\";\n      this.resetBind();\n      this.updatedd();\n    },\n\n    editNote() {\n      serviceDocumentation.editNote(\n        this.selectedNote.element,\n        this.messageUserEdit\n      );\n      this.selectedNote = undefined;\n      this.editNodePopup = false;\n      this.resetBind();\n    },\n\n    deleteNote(noteNode) {\n      serviceDocumentation.removeNode(noteNode);\n    },\n\n    getUsername() {\n      return window.spinal.spinalSystem.getUser().username;\n    },\n\n    opened(option) {\n      this.nodeInfo = option;\n      this.resetBind();\n      this.updatedd();\n    },\n\n    removed(option, viewer) {},\n\n    closed(option, viewer) {},\n\n    updatedd() {\n      var container = document.querySelector(\"#myList\");\n      setTimeout(() => {\n        container.scrollTop = container.scrollHeight;\n      }, 300);\n    },\n\n    resetBind() {\n      if (this.nodeInfo !== undefined) {\n        if (this.nodeInfo.selectedNode !== undefined) {\n          if (this.myBind !== undefined) {\n            this.nodeInfo.selectedNode.unbind(this.myBind);\n            this.myBind = undefined;\n          }\n          if (this.myBind === undefined) {\n            this.myBind = this.nodeInfo.selectedNode.bind(\n              this.updateNotesList.bind(this)\n            );\n          }\n        }\n      }\n    },\n\n    OpenLinkDialog() {\n      spinalPanelManagerService.openPanel(\"linkToGroupDialog\", {\n        type: NOTE_TYPE,\n        itemSelected: [],\n        callback: (context, category, group) => {\n          this.noteContextSelected = context;\n          this.noteCategorySelected = category;\n          this.noteGroupSelected = group;\n        },\n      });\n    },\n\n    addPJ() {\n      const maxSize = 25000000;\n      const input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.multiple = true;\n\n      input.click();\n\n      input.addEventListener(\n        \"change\",\n        (event) => {\n          const files = event.target.files;\n\n          let filelist = [];\n          for (const file of files) {\n            filelist.push(file);\n          }\n\n          filelist.push(...this.messages.pj);\n\n          const sizes = filelist.map((el) => el.size);\n\n          const filesSize = sizes.reduce((a, b) => a + b);\n\n          if (filesSize > maxSize) {\n            alert(\n              \"The selected file(s) is too large. The maximum size must not exceed 25 MB\"\n            );\n            return;\n          }\n\n          this.messages.pj = filelist;\n        },\n        false\n      );\n    },\n\n    removePJ(file) {\n      this.messages.pj = this.messages.pj.filter((el) => el.name !== file.name);\n    },\n\n    async TakeScreenShot() {\n      const file = await this.getScreenShotFile();\n      this.messages.pj.push(file);\n    },\n\n    getScreenShotFile(isViewPoint = false) {\n      return new Promise(async (resolve, reject) => {\n        window.spinal.ForgeViewer.viewer.getScreenShot(0, 0, async (url) => {\n          let blob = await fetch(url).then((r) => r.blob());\n\n          const name = this.nodeInfo.selectedNote\n            ? this.nodeInfo.selectedNote.getName().get()\n            : await this.getObjectName(this.nodeInfo.model, this.nodeInfo.dbid);\n\n          let file_name;\n\n          if (!isViewPoint) {\n            file_name = `screenshot of ${name} from ${moment().format(\n              \"L\"\n            )}.png`;\n          } else {\n            file_name = `viewPoint of ${name} from ${moment().format(\"L\")}.png`;\n          }\n\n          let file = this.blobToFile(blob, file_name);\n\n          resolve(file);\n        });\n      });\n    },\n\n    getObjectName(model, dbid) {\n      if (model && dbid) {\n        return new Promise((resolve) => {\n          model.getProperties(dbid, async (res) => {\n            console.log(res.name);\n            resolve(res.name);\n          });\n        });\n      }\n      return \"\";\n    },\n\n    blobToFile(theBlob, fileName) {\n      theBlob.lastModifiedDate = new Date();\n      theBlob.name = fileName;\n      return theBlob;\n    },\n\n    _createBimObjectNode(model, dbid) {\n      if (model && dbid) {\n        return new Promise((resolve) => {\n          model.getProperties(dbid, async (res) => {\n            const info = await window.spinal.BimObjectService.createBIMObject(\n              dbid,\n              res.name,\n              model\n            );\n            if (info instanceof SpinalNode) return resolve(info);\n\n            resolve(SpinalGraphService.getRealNode(info.id.get()));\n          });\n        });\n      }\n    },\n\n    async saveViewPoint() {\n      const getCircularReplacer = () => {\n        const seen = new WeakSet();\n        return (key, value) => {\n          if (typeof value === \"object\" && value !== null) {\n            if (seen.has(value)) {\n              return;\n            }\n            seen.add(value);\n          }\n          return value;\n        };\n      };\n\n      const viewer = window.spinal.ForgeViewer.viewer;\n\n      const filter = {\n        guid: true,\n        seedURN: true,\n        overrides: true,\n        objectSet: false,\n        viewport: true,\n        renderOptions: true,\n      };\n      const file = await this.getScreenShotFile();\n      const viewerState = viewer.getState(filter);\n      const objectState = {\n        isolated: viewer\n          .getAggregateIsolation()\n          .map((el) => ({ modelId: el.model.id, ids: el.ids })),\n\n        selected: viewer\n          .getAggregateSelection()\n          .map((el) => ({ modelId: el.model.id, selection: el.selection })),\n      };\n\n      file.viewState = JSON.stringify(viewerState, getCircularReplacer());\n      file.objectState = JSON.stringify(objectState, getCircularReplacer());\n\n      this.messages.pj.push(file);\n    },\n*/\n  },\n\n  async mounted() {\n    const context = await serviceDocumentation.createDefaultContext();\n    const category = await serviceDocumentation.createDefaultCategory();\n    const group = await serviceDocumentation.createDefaultGroup();\n\n    this.noteContextSelected = context.info.get();\n    this.noteCategorySelected = category.info.get();\n    this.noteGroupSelected = group.info.get();\n  },\n};\n</script>\n\n<style scoped>\n.notesBox {\n  width: 100%;\n  height: calc(100% - 15px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: hidden;\n}\n\n.notesBox .mdToolbar {\n  padding: 0px !important;\n}\n\n.notesBox .mdToolbar .breadCrumb {\n  height: 50px;\n  display: flex;\n}\n\n.notesBox .notes_div {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\" container-link urlBox\">\n      <div>\n         <div class=\"filesPaddingPath\">\n            <div class=\"sizeOfPathTab\"> </div>\n            <md-button\n               class=\"md-icon-button addURLButtonPanel\"\n               @click=\"addURLDialogueStatus = true\"\n            >\n               <i class=\"material-icons iconPlusDocumentation\">add_circle_outline</i>\n            </md-button>\n         </div>\n         <md-content>\n            <!-- <md-list> -->\n            <!-- <md-list-item md-expand\n                        class=\"myRowStyle\">\n            <span class=\"nameOfCategory md-list-item-text\">Local</span> -->\n\n            <md-list>\n               <md-subheader class=\"hr-sect \">Local URL</md-subheader>\n               <!-- <md-list-item class=\"myRowStyle\">\n                <span class=\"span-opacity\"> Label </span>\n                <span class=\"span-opacity\"> URL </span>\n              </md-list-item> -->\n               <md-list-item\n                  class=\"myRowStyle colorForCategory\"\n                  v-for=\"(url, index) in URLDisplayList\"\n                  :key=\"index\"\n               >\n                  <span class=\"span-opacity\">{{url.element.name.get()}}</span>\n                  <a\n                     class=\"back-line\"\n                     v-tooltip=\"url.element.URL.get()\"\n                     :href=\"url.element.URL.get()\"\n                     target=\"_blank\"\n                  >\n                     {{url.element.URL.get()}}</a>\n                  <menuURL\n                     @editURLNode=\"editURLNode\"\n                     @removeURLNode=\"removeURLNode\"\n                     :url=\"url\"\n                  ></menuURL>\n               </md-list-item>\n            </md-list>\n            <!-- </md-list-item>\n        </md-list> -->\n\n            <div v-if=\"groupURLDisplayList.length > 0\">\n               <md-subheader class=\"hr-sect \">Shared URL</md-subheader>\n               <div\n                  class=\"colorForCategory myRowStyle\"\n                  v-for=\"(cat) in groupURLDisplayList\"\n                  :key=\"cat.groupName\"\n               >\n                  <!-- <md-icon>whatshot</md-icon> -->\n                  <md-subheader class=\"sharedCategoryCss\">{{cat.groupName}}\n                  </md-subheader>\n\n                  <md-list class=\"unsetPadding\">\n                     <md-list-item\n                        class=\" colorForCategory\"\n                        v-for=\"(url, index) in cat.url\"\n                        :key=\"index\"\n                     >\n                        <span class=\"span-opacity\">{{url.element.name.get()}}</span>\n                        <a\n                           class=\"back-line\"\n                           v-tooltip=\"url.element.URL.get()\"\n                           :href=\"url.element.URL.get()\"\n                           target=\"_blank\"\n                        >\n                           {{url.element.URL.get()}}</a>\n                     </md-list-item>\n\n                  </md-list>\n\n               </div>\n            </div>\n         </md-content>\n\n      </div>\n\n      <md-dialog :md-active.sync=\"addURLDialogueStatus\">\n         <md-dialog-title>Add Link</md-dialog-title>\n\n         <md-dialog-content class=\"urlDialogContainer\">\n            <md-field md-inline>\n               <label>Label</label>\n               <md-input v-model=\"label\"></md-input>\n            </md-field>\n\n            <md-field md-inline>\n               <label>Link</label>\n               <md-input v-model=\"URL\"></md-input>\n            </md-field>\n         </md-dialog-content>\n\n         <md-dialog-actions>\n            <md-button\n               class=\"md-primary\"\n               @click=\"addURLDialogueStatus = false\"\n            >Close</md-button>\n            <md-button\n               class=\"md-primary\"\n               @click=\"addLink\"\n            >Save</md-button>\n         </md-dialog-actions>\n      </md-dialog>\n   </md-content>\n</template>\n\n\n<script>\nimport Vue from \"vue\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nimport { utilities } from \"../../service/utilities.js\";\nimport menuURL from \"./component/menuURL.vue\";\nimport { parse } from \"path\";\nvar viewer;\nexport default {\n   name: \"linkPanel\",\n   data() {\n      return {\n         addURLDialogueStatus: false,\n         label: undefined,\n         URL: undefined,\n         URLDisplayList: [],\n         myBind: undefined,\n         groupURLDisplayList: [],\n         myBindParent: undefined,\n         parentListToBind: undefined,\n      };\n   },\n   components: { menuURL },\n   props: [\"option\", \"parentGroup\"],\n   methods: {\n      editURLNode(urlNode, urlChange) {\n         urlNode.element.name.set(urlChange.label);\n         urlNode.element.URL.set(urlChange.URL);\n      },\n      removeURLNode(urlNode) {\n         serviceDocumentation.removeNode(urlNode);\n      },\n      async updateURLList() {\n         if (this.option.info != undefined) {\n            this.URLDisplayList = await serviceDocumentation.getURL(\n               this.option.info\n            );\n         } else this.URLDisplayList = [];\n      },\n      async updateURLParent() {\n         this.groupURLDisplayList = [];\n         let json = {};\n         for (let i = 0; i < this.parentGroup.length; i++) {\n            const node = this.parentGroup[i];\n            if (node) {\n               json = {\n                  groupName: node.info.name.get(),\n                  url: await serviceDocumentation.getURL(node),\n               };\n               this.groupURLDisplayList.push(json);\n            }\n         }\n      },\n      addLink() {\n         let _this = this;\n         let label = this.label;\n         let URL = this.URL;\n         viewer.model.getProperties(this.option.dbid, function (res) {\n            let option = utilities.addLink(_this.option, res.name, label, URL);\n            option.then((option) => {\n               if (_this.option.exist == false) {\n                  _this.option.exist = true;\n                  _this.$emit(\"updateMyBIMObject\", option);\n               }\n            });\n         });\n         this.label = undefined;\n         this.URL = undefined;\n         this.addURLDialogueStatus = false;\n      },\n      resetBind() {\n         if (this.option.info != undefined) {\n            if (this.option != undefined) {\n               if (this.myBind != undefined) {\n                  this.option.info.unbind(this.myBind);\n                  this.myBind = undefined;\n               }\n               if (this.myBind == undefined) {\n                  this.myBind = this.option.info.bind(\n                     this.updateURLList.bind(this)\n                  );\n               }\n            }\n         }\n      },\n      resetBindParent() {\n         // j'ai la liste de tous les node parent\n\n         if (!this.parentListToBind) {\n            this.parentListToBind = new Lst();\n         }\n\n         if (this.parentListToBind.length !== this.parentGroup.length) {\n            this.parentListToBind.splice(0, this.parentListToBind.length);\n            for (let i = 0; i < this.parentGroup.length; i++) {\n               const element = this.parentGroup[i];\n               this.parentListToBind.push(element);\n            }\n         }\n         if (this.myBindParent == undefined)\n            this.parentListToBind.bind(this.updateURLParent.bind(this));\n      },\n   },\n   mounted() {\n      viewer = window.spinal.ForgeViewer.viewer;\n      this.resetBind();\n      this.resetBindParent();\n   },\n   watch: {\n      option: function () {\n         this.resetBind();\n      },\n      parentGroup: function () {\n         this.resetBindParent();\n      },\n   },\n   beforeDestroy() {\n      if (this.option.info != undefined && this.myBind != undefined)\n         this.option.info.unbind(this.myBind);\n   },\n};\n</script>\n\n<style scoped>\n.urlDialogContainer {\n   width: 300px;\n   height: 200px;\n}\n</style>\n","<template>\n   <!-- class=\"md-scrollbar\" -->\n   <div class=\"tableDiv\">\n      <div class=\"path\">\n         <span\n            v-for=\"(path,index) in pathTab\"\n            @click=\"loadRoute(index)\"\n            :key=\"index\"\n         >{{path.name}} </span>\n      </div>\n\n      <div class=\"table\">\n         <md-table\n            v-model=\"tabDisplay\"\n            @md-selected=\"onSelectDriveFile\"\n            md-fixed-header\n         >\n            <!-- <md-table-row v-for=\"(driveFiles, index) in tabDisplay\"\n                    @dblclick.native=\"clickPath(driveFiles)\"\n                    :key=\"index\"\n                    md-auto-select\n                    md-selectable=\"multiple\"> -->\n            <md-table-row\n               @dblclick.native=\"clickPath(driveFiles)\"\n               slot=\"md-table-row\"\n               slot-scope=\"{ item:driveFiles }\"\n               md-auto-select\n               md-selectable=\"multiple\"\n            >\n               <!-- <md-table-cell>\n          <md-icon>{{getIconFile(driveFiles)}}</md-icon>\n        </md-table-cell> -->\n               <md-table-cell md-label=\"Name\">\n                  <md-icon>{{getIconFile(driveFiles)}}</md-icon>\n                  &#8287;\n                  {{driveFiles.name}}\n               </md-table-cell>\n               <md-table-cell md-label=\"Type\">{{driveFiles.type}}</md-table-cell>\n            </md-table-row>\n         </md-table>\n      </div>\n\n      <!-- <md-list>\n      <md-list-item @click=\"getPath\" v-for=\"(driveFiles, index) in tabDisplay\" :key=\"index\" >{{driveFiles.name.get()}}</md-list-item>\n    </md-list> -->\n\n   </div>\n</template>\n\n\n<script>\nimport { FileExplorer } from \"../../../service/fileSystemExplorer.js\";\n// var viewer;\nexport default {\n   name: \"addGroup\",\n   data() {\n      return {\n         pathTab: [],\n         currentPath: undefined,\n         tabDisplay: [],\n         selected: [],\n      };\n   },\n   components: {},\n   props: [],\n   methods: {\n      onSelectDriveFile: function (items) {\n         this.selected = items;\n         this.$emit(\"getFileImportedFromDrive\", items);\n      },\n      getIconFile(file) {\n         return FileExplorer.getIconFile(file);\n      },\n      clickPath: function (driveFiles) {\n         this.selected = [];\n         let type = driveFiles.type;\n         if (type == \"Directory\" || type == \"Synchronized Directory\") {\n            let route = FileExplorer.createDriveRoute(\n               this.currentPath,\n               driveFiles\n            );\n            this.pathTab.push(route);\n            this.currentPath = route.path;\n            this.getPath();\n         }\n      },\n      getPath: function () {\n         FileExplorer.loadDrivePath(this.currentPath).then((directory) => {\n            this.tabDisplay = directory;\n         });\n      },\n      loadRoute: function (indexPath) {\n         this.selected = [];\n         this.currentPath = this.pathTab[indexPath].path;\n         this.pathTab.splice(\n            indexPath + 1,\n            this.pathTab.length - (indexPath + 1)\n         );\n         this.getPath();\n      },\n   },\n   mounted() {\n      let route = FileExplorer.getDrivePathRoot();\n      this.currentPath = route.path;\n      this.pathTab.push(route);\n      this.getPath();\n      this.$emit(\"resetImportedFiles\");\n   },\n};\n</script>\n\n\n<style scoped>\n.tableDiv {\n   width: 100%;\n   height: 100%;\n}\n\n.tableDiv .path {\n   width: 100%;\n   height: 50px;\n   display: flex;\n   align-items: center;\n   font-size: 1.2em;\n}\n\n.tableDiv .table {\n   width: 100%;\n   height: calc(100% - 50px);\n}\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","<template>\n   <md-content class=\"md-scrollbar urlBox\">\n\n      <div class=\"filesPaddingPath\">\n         <div class=\"sizeOfPathTab\">\n            <span\n               v-for=\"(path,index) in pathTab\"\n               @click=\"loadRoute(index)\"\n               :key=\"index\"\n            >\n               {{path.name}}\n            </span>\n         </div>\n         <md-button\n            class=\"md-icon-button addURLButtonPanel\"\n            @click=\"activeAddDirectory= true\"\n            :disabled=\"!boolInShared\"\n         >\n            <i class=\"material-icons iconPlusDocumentation\">add_circle_outline</i>\n         </md-button>\n      </div>\n      <md-subheader\n         v-if=\"boolInShared == true\"\n         class=\"hr-sect \"\n      >Local Files</md-subheader>\n      <md-subheader\n         v-else\n         class=\"hr-sect \"\n      >Shared Files</md-subheader>\n\n      <md-table v-if=\"displayList.length != 0\">\n         <md-table-row\n            v-for=\"(files, index) in displayList\"\n            @dblclick.native=\"enterInDirectory(files)\"\n            :key=\"index\"\n         >\n            <md-table-cell>\n               <div class=\"filesPaddingIcon\">\n                  <md-icon>{{getIconFile(files)}}</md-icon>\n                  <div class=\"sizeOfPathTab\">{{files.name.get()}}</div>\n               </div>\n            </md-table-cell>\n            <!-- <md-table-cell md-numeric>{{files.name.get()}}</md-table-cell> -->\n            <md-table-cell>\n               <menuFile\n                  :file=\"files\"\n                  :boolInShared=\"boolInShared\"\n                  :index=\"index\"\n                  @downloadFile=\"downloadFile\"\n                  @removeFile=\"removeFile\"\n               >\n               </menuFile>\n            </md-table-cell>\n         </md-table-row>\n      </md-table>\n      <div v-if=\"boolInShared == true && !boolInDirectory && groupAttrDisplayList.length > 0\">\n         <md-subheader class=\"hr-sect \">Shared Files</md-subheader>\n         <md-table>\n            <!-- <span>{{group.nameGroup}}</span> -->\n            <md-table-row\n               v-for=\"(group, index) in groupAttrDisplayList\"\n               :key=\"index\"\n               @dblclick.native=\"enterInDirectoryParent(group)\"\n            >\n               <md-table-cell>\n                  <div class=\"filesPaddingIcon\">\n                     <md-icon>folder</md-icon>\n                     <div class=\"sizeOfPathTab\">{{group.groupName}}</div>\n                  </div>\n               </md-table-cell>\n               <!-- <md-table-cell md-numeric>{{group.groupName}}</md-table-cell> -->\n               <md-table-cell>\n                  <!-- <menuFile :file=\"files\"\n                    :index=\"index\"\n                    @downloadFile=\"downloadFile\">\n          </menuFile> -->\n               </md-table-cell>\n            </md-table-row>\n         </md-table>\n      </div>\n\n      <md-dialog\n         class=\"fileUploadDialog\"\n         :md-active.sync=\"activeAddDirectory\"\n      >\n\n         <md-dialog-content class=\"dialogContent\">\n            <md-tabs\n               class=\"dialogTabs\"\n               @md-changed=\"resetImportedFiles\"\n               md-alignment=\"fixed\"\n            >\n               <md-tab md-label=\"Upload\">\n                  <md-field>\n                     <md-file\n                        @md-change=\"getFileImported\"\n                        v-model=\"multipleFile\"\n                        multiple\n                     />\n                  </md-field>\n               </md-tab>\n\n               <md-tab md-label=\"Drive\">\n                  <!-- <md-button class=\"md-primary md-raised\" @click=\"getPath\">Get Path</md-button> -->\n                  <drive @getFileImportedFromDrive=\"getFileImportedFromDrive\"></drive>\n               </md-tab>\n            </md-tabs>\n         </md-dialog-content>\n\n         <md-dialog-actions>\n            <md-button\n               class=\"md-primary\"\n               @click=\"activeAddDirectory = false\"\n            >Close</md-button>\n            <md-button\n               class=\"md-primary\"\n               @click=\"saveFile\"\n            >Save</md-button>\n         </md-dialog-actions>\n      </md-dialog>\n   </md-content>\n</template>\n\n<script>\nimport { FileExplorer } from \"../../service/fileSystemExplorer.js\";\nimport drive from \"./component/drive.vue\";\nimport menuFile from \"./component/menuFile.vue\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nexport default {\n   name: \"linkPanel\",\n   data() {\n      return {\n         activeAddDirectory: false,\n         importedFiles: undefined,\n         importedDriveFiles: undefined,\n         selectedDirectory: undefined,\n         oldDirectory: undefined,\n         displayList: [],\n         multipleFile: undefined,\n         myBind: undefined,\n         pathTab: [],\n         parentListToBind: new Lst(),\n         groupAttrDisplayList: [],\n         boolInShared: false,\n         boolInDirectory: false,\n      };\n   },\n   components: { drive, menuFile },\n   props: [\"option\", \"parentGroup\"],\n   methods: {\n      downloadFile(file, index) {\n         if (file._info.model_type.get() != \"Directory\") {\n            file._ptr.load((path) => {\n               if (file._info.model_type.get() == \"HttpPath\") {\n                  const element = document.createElement(\"a\");\n                  const _path =\n                     path.host.get() +\n                     \"/file/\" +\n                     encodeURIComponent(path.httpRootPath.get()) +\n                     \"/\" +\n                     encodeURIComponent(path.httpPath.get());\n                  element.setAttribute(\"href\", _path);\n                  element.setAttribute(\"download\", file.name.get());\n                  element.style.display = \"none\";\n                  document.body.appendChild(element);\n                  element.click();\n                  document.body.removeChild(element);\n               } else {\n                  var element = document.createElement(\"a\");\n                  element.setAttribute(\"href\", \"/sceen/_?u=\" + path._server_id);\n                  element.setAttribute(\"download\", file.name);\n                  element.click();\n               }\n            });\n         } else {\n            // check recursive directory & create a ZIP\n         }\n      },\n      removeFile(file, index) {\n         this.selectedDirectory.splice(index, 1);\n      },\n      getFileImported(files) {\n         // ici il y a un bug sur les fichier importé, quand j'import un fichier toto.txt, que je change vers le drive tabs,\n         // je retourne sur le upload tabs, je ne peux pas ajouter le meme fichier, levent md-change ne triger pas\n         this.importedFiles = files;\n      },\n      getFileImportedFromDrive(files) {\n         this.importedDriveFiles = files;\n      },\n      resetImportedFiles() {\n         this.importedFiles = undefined;\n         this.importedDriveFiles = undefined;\n         this.multipleFile = undefined;\n      },\n      getIconFile(file) {\n         return FileExplorer.getIconFile(file);\n      },\n      loadRoute(index) {\n         if (index == this.pathTab.length - 1) {\n         } else {\n            this.selectedDirectory = this.pathTab[index].directory;\n\n            let length = this.pathTab.length - 1;\n            this.pathTab.splice(index + 1, length - index);\n            this.resetBind();\n            if (this.pathTab.length == 1) {\n               this.boolInShared = true;\n               this.boolInDirectory = false;\n            }\n         }\n      },\n\n      enterInDirectory(file) {\n         if (file._info.model_type.get() == \"Directory\") {\n            file._ptr.load((directory) => {\n               let pathObj = {\n                  name: file.name.get() + \" /\",\n                  directory: directory,\n               };\n               this.pathTab.push(pathObj);\n               this.selectedDirectory = directory;\n\n               this.resetBind();\n            });\n            this.boolInDirectory = true;\n         }\n      },\n      enterInDirectoryParent(group) {\n         let pathObj = {\n            name: group.groupName + \" /\",\n            directory: group.groupAttr,\n         };\n         this.pathTab.push(pathObj);\n         this.selectedDirectory = group.groupAttr;\n         this.boolInShared = false;\n         this.boolSharedDirectory = false;\n         this.updateDisplayList();\n         this.resetBind;\n      },\n      updateDisplayList() {\n         this.displayList = [];\n         if (this.selectedDirectory != undefined) {\n            for (let i = 0; i < this.selectedDirectory.length; i++) {\n               const file = this.selectedDirectory[i];\n               this.displayList.push(file);\n            }\n         }\n      },\n      getFileInDir(directory) {\n         let displayList = [];\n         if (directory != undefined) {\n            for (let i = 0; i < directory.length; i++) {\n               const file = directory[i];\n               displayList.push(file);\n            }\n         }\n         return displayList;\n      },\n      async updateDisplayListParent() {\n         this.groupAttrDisplayList = [];\n         let json = {};\n         for (let i = 0; i < this.parentGroup.length; i++) {\n            const node = this.parentGroup[i];\n            if (node) {\n               const dir = await FileExplorer.getDirectory(node);\n               json = {\n                  groupName: node.info.name.get(),\n                  groupAttr: dir,\n                  files: this.getFileInDir(dir),\n               };\n\n               this.groupAttrDisplayList.push(json);\n            }\n         }\n      },\n      sendAddFile() {\n         // check if imported file come from drive or upload\n         if (this.importedFiles != undefined) {\n            FileExplorer.addFileUpload(\n               this.selectedDirectory,\n               this.importedFiles\n            );\n         } else if (this.importedDriveFiles != undefined) {\n            FileExplorer.addFileDrive(\n               this.selectedDirectory,\n               this.importedDriveFiles,\n               this.pathTab\n            );\n         }\n      },\n      async saveFile() {\n         // check if the node exist\n         // check if node has a directory\n         // if node doesn't exist, i create it\n         // if node haven't a directory, add it\n         let _this = this;\n         if (this.selectedDirectory != undefined) {\n            this.sendAddFile();\n         } else {\n            if (this.option.exist == false) {\n               let option = this.option;\n               window.spinal.ForgeViewer.viewer.model.getProperties(\n                  this.option.dbid,\n                  async function (res) {\n                     let boolIsCreated = await window.spinal.BimObjectService.createBIMObject(\n                        option.dbid,\n                        res.name,\n                        option.model3d\n                     );\n                     if (boolIsCreated) {\n                        let bimObject = await window.spinal.BimObjectService.getBIMObject(\n                           option.dbid,\n                           option.model3d\n                        );\n                        option.info = SpinalGraphService.getRealNode(\n                           bimObject.id\n                        );\n                     }\n                     if (option.exist == false) {\n                        option.exist = true;\n                        _this.$emit(\"updateMyBIMObject\", option);\n                     }\n                     _this.selectedDirectory = await FileExplorer.createDirectory(\n                        option.info\n                     );\n                     _this.sendAddFile();\n                     _this.resetBind();\n                     _this.resetImportedFiles();\n                  }\n               );\n            } else {\n               this.selectedDirectory = await FileExplorer.createDirectory(\n                  this.option.info\n               );\n               this.sendAddFile();\n               this.resetBind();\n               this.resetImportedFiles();\n            }\n         }\n\n         this.activeAddDirectory = false;\n      },\n      deleteBind() {\n         if (this.myBind != undefined) {\n            if (this.oldDirectory != undefined) {\n               this.oldDirectory.unbind(this.myBind);\n               this.myBind = undefined;\n            }\n         }\n      },\n      resetBind() {\n         if (this.option.info != undefined) {\n            if (this.option != undefined) {\n               this.deleteBind();\n               if (this.myBind == undefined) {\n                  if (this.selectedDirectory != undefined) {\n                     this.myBind = this.selectedDirectory.bind(\n                        this.updateDisplayList.bind(this)\n                     );\n                     this.oldDirectory = this.selectedDirectory;\n                  } else {\n                     this.updateDisplayList();\n                  }\n               }\n            }\n         }\n      },\n      resetBindParent() {\n         // j'ai la liste de tous les node parent\n         this.parentListToBind.splice(0, this.parentListToBind.length);\n         for (let i = 0; i < this.parentGroup.length; i++) {\n            const element = this.parentGroup[i];\n            this.parentListToBind.push(element);\n         }\n         if (this.myBindParent == undefined) {\n            this.myBindParent = this.parentListToBind.bind(\n               this.updateDisplayListParent.bind(this)\n            );\n         }\n      },\n   },\n   watch: {\n      option: async function () {\n         let namePath = \"\";\n         this.selectedDirectory = await FileExplorer.getDirectory(\n            this.option.info\n         );\n         if (this.option.info != undefined) {\n            namePath = this.option.info.info.name.get() + \" /\";\n         } else {\n            namePath = \"Home /\";\n         }\n         let pathObj = {\n            name: namePath,\n            directory: this.selectedDirectory,\n         };\n         this.pathTab = [];\n         this.pathTab.push(pathObj);\n         this.boolInShared = true;\n\n         this.resetBind();\n      },\n      parentGroup: function () {\n         this.resetBindParent();\n      },\n   },\n   async mounted() {\n      if (this.option != undefined) {\n         if (this.option.info != undefined) {\n            this.selectedDirectory = await FileExplorer.getDirectory(\n               this.option.info\n            );\n\n            let namePath = this.option.info.info.name.get() + \" /\";\n            let pathObj = {\n               name: namePath,\n               directory: this.selectedDirectory,\n            };\n            this.boolInShared = true;\n            this.pathTab.push(pathObj);\n            this.resetBind();\n            this.resetBindParent();\n         }\n      }\n   },\n   beforeDestroy() {\n      if (this.option.info != undefined && this.myBind != undefined) {\n         this.option.info.unbind(this.myBind);\n      }\n   },\n};\n</script>\n\n<style scoped>\n.fileUploadDialog {\n   width: 700px;\n   height: 520px;\n}\n\n.fileUploadDialog .dialogContent {\n   width: 100%;\n   height: 100%;\n}\n\n.fileUploadDialog .dialogTabs {\n   width: 100%;\n   height: 100%;\n}\n</style>\n\n<style>\n.fileUploadDialog .md-dialog-container {\n   width: 100%;\n   height: 100%;\n}\n\n.fileUploadDialog .dialogTabs .md-tabs-content,\n.fileUploadDialog .dialogTabs .md-tabs-content .md-tabs-container,\n.fileUploadDialog .dialogTabs .md-tabs-content .md-tabs-container .md-tab {\n   width: 100%;\n   height: 100% !important;\n}\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\"container-link urlBox\">\n      <div>\n         <md-button\n            class=\"attributesButtonPanel\"\n            @click=\"activeDialogCategory = true\"\n         >\n            ADD CATEGORY\n         </md-button>\n         <md-button\n            class=\"attributesButtonPanel\"\n            @click=\"activeDialogStatus = true\"\n         >\n            ADD ATTRIBUTES\n         </md-button>\n         <!-- <md-content>\n      </md-content> -->\n         <md-subheader class=\"hr-sect \">Local Attributes</md-subheader>\n         <md-list class=\"widthOfList\">\n            <md-list-item\n               class=\"colorForCategory\"\n               v-for=\"(cat) in categoryDisplayList\"\n               :key=\"cat.nameCat\"\n               md-expand\n            >\n               <!-- <md-icon>whatshot</md-icon> -->\n               <span class=\"nameOfCategory md-list-item-text\">{{cat.nameCat}}</span>\n               <menuCategoryAttributes\n                  class=\"buttonRight\"\n                  @editCategoryNode=\"editCategoryNode\"\n                  @removeCategoryNode=\"removeCategoryNode\"\n                  :category=\"cat\"\n               >\n               </menuCategoryAttributes>\n               <md-list\n                  class=\"unsetPadding\"\n                  slot=\"md-expand\"\n               >\n                  <md-list-item\n                     v-for=\"(attributess, index) in getLstOfAttributes(cat)\"\n                     :key=\"index\"\n                     class=\"md-inset\"\n                  >\n                     <span style=\"width: 40%\">{{attributess.label.get()}}</span>\n                     <span style=\"width: 40%\">{{attributess.value.get()}}</span>\n                     <menu-attributes\n                        @editURLNode=\"editURLNode\"\n                        @removeURLNode=\"removeURLNode\"\n                        :url=\"attributess\"\n                        :category=\"cat\"\n                     ></menu-attributes>\n                  </md-list-item>\n\n               </md-list>\n\n            </md-list-item>\n         </md-list>\n         <div v-if=\"groupAttrDisplayList.length > 0\">\n            <md-subheader class=\"hr-sect \">Shared Attributes</md-subheader>\n            <md-list\n               class=\"widthOfList\"\n               v-for=\"(group) in groupAttrDisplayList\"\n               :key=\"group.groupName\"\n            >\n               <md-subheader class=\"sharedCategoryCss\">{{group.groupName}}\n               </md-subheader>\n\n               <md-list-item\n                  class=\"colorForCategory\"\n                  v-for=\"(cat) in group.groupAttr\"\n                  :key=\"cat.nameCat\"\n                  md-expand\n               >\n                  <!-- <md-icon>whatshot</md-icon> -->\n                  <span class=\"nameOfCategory md-list-item-text\">{{cat.nameCat}}</span>\n\n                  <md-list\n                     class=\"unsetPadding\"\n                     slot=\"md-expand\"\n                  >\n                     <md-list-item\n                        v-for=\"(attributess, index) in getLstOfAttributes(cat)\"\n                        :key=\"index\"\n                        class=\"md-inset\"\n                     >\n                        <span style=\"width: 40%\">{{attributess.label.get()}}</span>\n                        <span style=\"width: 40%\">{{attributess.value.get()}}</span>\n\n                     </md-list-item>\n\n                  </md-list>\n\n               </md-list-item>\n            </md-list>\n         </div>\n\n      </div>\n      <md-dialog\n         class=\"spinal-dialog-add-attr\"\n         :md-active.sync=\"activeDialogStatus\"\n      >\n         <md-dialog-title>Add Attributes</md-dialog-title>\n\n         <md-dialog-content class=\"attributeDialogContent\">\n            <!-- md-dynamic-height -->\n            <md-tabs\n               class=\"dialogTabs\"\n               @md-changed=\"resetAttributes\"\n               md-alignment=\"fixed\"\n            >\n               <md-tab md-label=\"Create\">\n                  <!-- <div class=\"md-layout-item\"> -->\n                  <md-field>\n                     <md-select\n                        v-model=\"categorySelected\"\n                        name=\"category\"\n                        id=\"category\"\n                        placeholder=\"category\"\n                     >\n                        <!-- <md-option value=\"none\">Create Category</md-option> -->\n                        <md-option\n                           v-for=\"(category, index) in categoryDisplayList\"\n                           :key=\"index\"\n                           :value=\"category.node.info.name.get()\"\n                        >\n                           {{category.node.info.name.get()}}</md-option>\n                     </md-select>\n                  </md-field>\n                  <!-- </div> -->\n\n                  <md-field md-inline>\n                     <label>Label</label>\n                     <md-input v-model=\"label\"></md-input>\n                  </md-field>\n\n                  <md-field md-inline>\n                     <label>Value</label>\n                     <md-input v-model=\"value\"></md-input>\n                  </md-field>\n               </md-tab>\n\n               <md-tab md-label=\"Import\">\n                  <attributesImport\n                     :option=\"option\"\n                     :categoryDisplayList=\"categoryDisplayList\"\n                     @getAttributesFromForge=\"getAttributesFromForge\"\n                     @updatecategorySelected=\"updatecategorySelected\"\n                  >\n                  </attributesImport>\n               </md-tab>\n            </md-tabs>\n         </md-dialog-content>\n\n         <md-dialog-actions>\n            <md-button\n               class=\"md-primary\"\n               @click=\"activeDialogStatus = false\"\n            >Close</md-button>\n            <md-button\n               class=\"md-primary\"\n               @click=\"addAttributes\"\n            >Save</md-button>\n         </md-dialog-actions>\n      </md-dialog>\n\n      <md-dialog :md-active.sync=\"activeDialogCategory\">\n         <md-dialog-title>Add Category</md-dialog-title>\n\n         <md-field\n            md-inline\n            style=\"width: 80%; margin-left: auto; margin-right: auto;\"\n         >\n            <label>category</label>\n            <md-input v-model=\"category\"></md-input>\n         </md-field>\n\n         <md-dialog-actions>\n            <md-button\n               class=\"md-primary\"\n               @click=\"activeDialogCategory = false\"\n            >Close</md-button>\n            <md-button\n               class=\"md-primary\"\n               @click=\"addCategory\"\n            >Save</md-button>\n         </md-dialog-actions>\n      </md-dialog>\n   </md-content>\n</template>\n\n\n<script>\n//import Toasted from \"vue-toasted\";\n\nimport Vue from \"vue\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nimport menuAttributes from \"./component/menuAttributes.vue\";\nimport menuCategoryAttributes from \"./component/menuCategoryAttributes.vue\";\nimport attributesImport from \"./component/attributesImport.vue\";\nimport { utilities } from \"../../service/utilities.js\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n//Vue.use(Toasted);\nlet viewer;\n\nexport default {\n   name: \"linkPanel\",\n   data() {\n      return {\n         activeDialogStatus: false,\n         activeDialogCategory: false,\n         label: undefined,\n         value: undefined,\n         categorySelected: undefined,\n         categoryCreate: \"none\",\n         category: undefined,\n         categoryDisplayList: [],\n         URLDisplayList: [],\n         myBind: undefined,\n         groupAttrDisplayList: [],\n         myBindParent: undefined,\n         parentListToBind: undefined,\n      };\n   },\n   components: { menuAttributes, menuCategoryAttributes, attributesImport },\n   props: [\"option\", \"parentGroup\"],\n   methods: {\n      // async selectAttributes(attr) {\n      //   console.log(\"___________________________\");\n      //   serviceDocumentation\n      //     .getCategoryByName(this.option.info, attr.nameCat)\n      //     .then(async category => {\n      //       console.log(category);\n      //     });\n\n      //   let category = await serviceDocumentation.addCategoryAttribute(\n      //     this.option.info,\n      //     \"categoryName\"\n      //   );\n      //   console.log(category);\n      //   console.log(\"___________________________\");\n      // },\n      editURLNode(attributes, urlChange) {\n         attributes.label.set(urlChange.label);\n         attributes.value.set(urlChange.value);\n         this.resetBind();\n      },\n      removeURLNode(attributes, category) {\n         for (let i = 0; i < category.element.length; i++) {\n            const element = category.element[i];\n            if (element.label.get() == attributes.label.get()) {\n               category.element.splice(i, 1);\n            }\n         }\n      },\n      editCategoryNode(category, change) {\n         category.node.info.name.set(change.name);\n      },\n      removeCategoryNode(category) {\n         serviceDocumentation.removeNode(category.node);\n      },\n      getAttributesFromForge(attributes) {\n         this.selectedAttributesForge = attributes;\n         // get la list d'attributs depuis les attributes de forge\n      },\n      updatecategorySelected(categorySelected) {\n         this.categorySelected = categorySelected;\n      },\n      async updateURLList() {\n         if (this.option.info != undefined) {\n            this.categoryDisplayList = await serviceDocumentation.getCategory(\n               this.option.info\n            );\n         }\n      },\n      async updateAttrParent() {\n         this.groupAttrDisplayList = [];\n         let json = {};\n         for (let i = 0; i < this.parentGroup.length; i++) {\n            const node = this.parentGroup[i];\n            if (node) {\n               json = {\n                  groupName: node.info.name.get(),\n                  groupAttr: await serviceDocumentation.getCategory(node),\n               };\n               this.groupAttrDisplayList.push(json);\n            }\n         }\n      },\n\n      getLstOfAttributes(cat) {\n         let tab = [];\n         if (cat.element != undefined) {\n            for (let i = 0; i < cat.element.length; i++) {\n               const element = cat.element[i];\n               tab.push(element);\n            }\n         }\n         return tab;\n      },\n      async testAttributes() {\n         if (\n            this.categorySelected != undefined ||\n            this.categorySelected != \"\"\n         ) {\n            if (this.label == undefined || this.value == undefined) {\n               let cat = await serviceDocumentation.getCategoryByName(\n                  this.option.info,\n                  this.categorySelected\n               );\n               for (let i = 0; i < this.selectedAttributesForge.length; i++) {\n                  const element = this.selectedAttributesForge[i];\n                  serviceDocumentation.addAttributeByCategory(\n                     this.option.info,\n                     cat,\n                     element.displayName,\n                     element.displayValue\n                  );\n               }\n            } else {\n               let label = this.label;\n               let value = this.value;\n               let cat = await serviceDocumentation.getCategoryByName(\n                  this.option.info,\n                  this.categorySelected\n               );\n               serviceDocumentation.addAttributeByCategory(\n                  this.option.info,\n                  cat,\n                  this.label,\n                  this.value\n               );\n            }\n         } else {\n            console.log(\"error\");\n         }\n      },\n      async addAttributes() {\n         if (this.option.exist == false) {\n            window.spinal.ForgeViewer.viewer.model.getProperties(\n               this.option.dbid,\n               async (res) => {\n                  let boolIsCreated = await window.spinal.BimObjectService.createBIMObject(\n                     this.option.dbid,\n                     res.name,\n                     this.option.model3d\n                  );\n                  if (boolIsCreated) {\n                     let bimObject = await window.spinal.BimObjectService.getBIMObject(\n                        this.option.dbid,\n                        this.option.model3d\n                     );\n                     this.option.info = SpinalGraphService.getRealNode(\n                        bimObject.id\n                     );\n                  }\n\n                  await this.testAttributes();\n                  this.resetAttributes();\n                  this.resetBind();\n               }\n            );\n         } else {\n            await this.testAttributes();\n            this.resetAttributes();\n         }\n         // on check si les attributs viennent de forge ou on créer un attributs\n\n         // viewer.model.getProperties(this.option.dbid, function(res) {\n         //   let option = utilities.addAttributes(\n         //     _this.option,\n         //     res.name,\n         //     label,\n         //     value\n         //   );\n         //   option.then(option => {\n         //     if (_this.option.exist == false) {\n         //       _this.option.exist = true;\n         //       _this.$emit(\"updateMyBIMObject\", option);\n         //     }\n         //   });\n         // });\n         // this.label = undefined;\n         // this.value = undefined;\n         // this.categorySelected = undefined;\n         this.activeDialogStatus = false;\n      },\n      checkCategory() {\n         if (this.category != undefined && this.category != \"\") {\n            serviceDocumentation.addCategoryAttribute(\n               this.option.info,\n               this.category\n            );\n            this.category = \"\";\n         }\n      },\n      addCategory() {\n         let _this = this;\n         if (this.option.exist) {\n            this.checkCategory();\n         } else {\n            // create bim object before add note\n            if (this.option.dbid != undefined) {\n               window.spinal.ForgeViewer.viewer.model.getProperties(\n                  this.option.dbid,\n                  async (res) => {\n                     let boolIsCreated = await window.spinal.BimObjectService.createBIMObject(\n                        _this.option.dbid,\n                        res.name,\n                        _this.option.model3d\n                     );\n                     if (boolIsCreated) {\n                        let bimObject = await window.spinal.BimObjectService.getBIMObject(\n                           _this.option.dbid,\n                           _this.option.model3d\n                        );\n                        _this.option.info = SpinalGraphService.getRealNode(\n                           bimObject.id\n                        );\n                     }\n                     _this.option.exist = true;\n                     _this.$emit(\"updateMyBIMObject\", this.option);\n\n                     _this.checkCategory();\n                     _this.resetBind();\n                  }\n               );\n            }\n         }\n         // this.category = \"\";\n         this.activeDialogCategory = false;\n      },\n      resetAttributes() {\n         this.label = undefined;\n         this.value = undefined;\n         this.categorySelected = undefined;\n         this.selectedAttributesForge = undefined;\n      },\n      resetBind() {\n         if (this.option.info != undefined) {\n            if (this.option != undefined) {\n               if (this.myBind != undefined) {\n                  this.option.info.unbind(this.myBind);\n                  this.myBind = undefined;\n               }\n               if (this.myBind == undefined) {\n                  this.myBind = this.option.info.bind(\n                     this.updateURLList.bind(this)\n                  );\n               }\n            }\n         }\n      },\n      resetBindParent() {\n         // j'ai la liste de tous les node parent\n         if (this.parentListToBind == undefined) {\n            this.parentListToBind = new Lst();\n         }\n         if (!this.parentListToBind.length == this.parentGroup.length) {\n            this.parentListToBind.splice(0, this.parentListToBind.length);\n            for (let i = 0; i < this.parentGroup.length; i++) {\n               const element = this.parentGroup[i];\n               this.parentListToBind.push(element);\n            }\n         }\n         if (this.myBindParent == undefined) {\n            this.parentListToBind.bind(this.updateAttrParent.bind(this));\n         }\n      },\n   },\n   mounted() {\n      viewer = window.spinal.ForgeViewer.viewer;\n      this.resetBind();\n      this.resetBindParent();\n   },\n   watch: {\n      option: function () {\n         this.resetBind();\n      },\n      parentGroup: function () {\n         this.resetBindParent();\n      },\n   },\n   beforeDestroy() {\n      if (this.option.info != undefined && this.myBind != undefined) {\n         this.option.info.unbind(this.myBind);\n      }\n   },\n};\n</script>\n\n<style>\n.container-link\n   i.md-icon.md-icon-font.md-icon-image.md-list-expand-icon.md-theme-default {\n   position: absolute;\n   margin: unset;\n}\n\n.nameOfCategory {\n   position: absolute;\n   left: 26px;\n}\n.unsetPadding {\n   padding: unset;\n}\n.widthOfList {\n   width: 93%;\n   margin-left: auto;\n   margin-right: auto;\n}\n\n.buttonRight {\n   position: absolute;\n   right: 0%;\n}\n\n.titleOfSharedLocal {\n   margin-left: auto;\n   margin-right: auto;\n   width: fit-content;\n}\n.spinal-dialog-add-attr {\n   width: 560px;\n   height: 500px;\n}\n\n.spinal-dialog-add-attr > .md-dialog-container {\n   max-width: 100%;\n}\n\n.spinal-dialog-add-attr .attributeDialogContent {\n   width: 100%;\n   height: 100%;\n   overflow: hidden;\n}\n\n.attributeDialogContent .dialogTabs,\n.attributeDialogContent .dialogTabs .md-tabs-content,\n.attributeDialogContent .dialogTabs .md-tabs-content .md-tabs-container {\n   width: 100%;\n   height: 100% !important;\n}\n\n.spinal-dialog-add-attr\n   .attributeDialogContent\n   .dialogTabs\n   .md-tabs-content\n   .md-tabs-container\n   .md-tab {\n   width: 100%;\n   height: 100% !important;\n   overflow: auto;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <div class=\" containerCDE\">\n    <md-toolbar class=\"md-layout md-gutter headerCDE\"\n                layout-align=\"center center\">\n      <div class=\"centerSelectedNodeName\"\n           v-if=\"selectedNode !== undefined\">{{selectedNode.info.name.get()\n        }}</div>\n      <div class=\"centerSelectedNodeName\"\n           v-else>BIM Object not created</div>\n    </md-toolbar>\n    <md-toolbar class=\"md-layout md-gutter headerCDE\"\n                layout=\"row\"\n                layout-align=\"center center\">\n      <md-button @click=\"activeTab = 0\"\n                 :style=\"activeTabColor(0)\"\n                 class=\"md-layout-item toolbarButton\">Files</md-button>\n      <md-button @click=\"activeTab = 1\"\n                 :style=\"activeTabColor(1)\"\n                 class=\"md-layout-item toolbarButton\">URL</md-button>\n      <md-button @click=\"activeTab = 2\"\n                 :style=\"activeTabColor(2)\"\n                 class=\"md-layout-item toolbarButton\">Attributes</md-button>\n    </md-toolbar>\n    <transition name=\"changeTabDocumentation\">\n      <filepanel v-if=\"activeTab == 0\"\n                 :option=\"option\"\n                 @updateMyBIMObject=\"updateSelectedBIMObject\"\n                 :parentGroup=\"parentGroup\"\n                 :selectedNode=\"selectedNode\"\n                 :dbid=\"dbid\"></filepanel>\n      <urlpanel v-else-if=\"activeTab == 1\"\n                :option=\"option\"\n                :parentGroup=\"parentGroup\"\n                :selectedNode=\"selectedNode\"\n                @updateMyBIMObject=\"updateSelectedBIMObject\"\n                :dbid=\"dbid\"></urlpanel>\n      <attributespanel v-else\n                       :selectedNode=\"selectedNode\"\n                       :option=\"option\"\n                       :parentGroup=\"parentGroup\"\n                       @updateMyBIMObject=\"updateSelectedBIMObject\"\n                       :dbid=\"dbid\"></attributespanel>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport urlpanel from \"./view/documentation/URLPanel.vue\";\nimport filepanel from \"./view/documentation/FilePanel.vue\";\nimport attributespanel from \"./view/documentation/AttributesPanel.vue\";\nimport {\n  SpinalGraphService,\n  SpinalNode,\n} from \"spinal-env-viewer-graph-service\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nexport default {\n  name: \"my_compo\",\n  data() {\n    return {\n      activeTab: 0,\n      selectedNode: undefined,\n      dbid: undefined,\n      option: undefined,\n      buttonList: [],\n      parentGroup: undefined,\n    };\n  },\n  components: { urlpanel, filepanel, attributespanel },\n  methods: {\n    activeTabColor: function (value) {\n      if (this.activeTab == value)\n        return { background: \"#356BaB\", border: \"1px solid white\" };\n      else return { background: \"unset\", border: \"1px solid white\" };\n    },\n    updateSelectedBIMObject(option) {\n      this.option = {};\n      Object.assign(this.option, option);\n      this.selectedNode = this.option.info;\n    },\n    opened(option) {\n      this.option = option;\n\n      let _this = this;\n      if (option.selectedNode !== undefined) {\n        if (option.selectedNode instanceof SpinalNode) {\n          option.info = option.selectedNode;\n        } else {\n          option.info = SpinalGraphService.getRealNode(\n            option.selectedNode.id.get()\n          );\n        }\n        this.selectedNode = option.info;\n        option.exist = true;\n      } else {\n        if (option.info !== undefined) {\n          this.selectedNode = option.info;\n          this.dbid = option.dbid;\n        } else {\n          this.selectedNode = undefined;\n          this.dbid = option.dbid;\n        }\n      }\n\n      // set attributes for building\n      serviceDocumentation.setBuildingInformationAttributes(this.selectedNode);\n      // .then(info => {});\n\n      // // get shared attributes\n      serviceDocumentation\n        .getParentGroup(this.selectedNode)\n        .then((allParentGroup) => {\n          _this.parentGroup =\n            typeof allParentGroup !== \"undefined\" ? allParentGroup : [];\n        });\n    },\n    removed(option, viewer) {},\n    closed(option, viewer) {},\n  },\n};\n</script>\n\n<style>\n.headerCDE {\n  box-sizing: border-box;\n  min-height: 5%;\n  margin-left: unset !important;\n  margin: unset;\n  border-top: 1px solid white;\n  border-bottom: 1px solid white;\n}\n.toolbarButton {\n  text-align: center;\n  box-sizing: border-box;\n  padding: unset;\n  width: 30%;\n}\n.centerSelectedNodeName {\n  text-align: center;\n  margin-top: 8px;\n}\n.containerCDE {\n  height: 100%;\n}\n\n.containerCDE .md-ripple {\n  padding: unset;\n}\n.containerCDE .md-content.md-theme-default {\n  background-color: unset;\n}\n.containerCDE ul.md-list.md-theme-default {\n  background-color: unset;\n}\n\n.containerCDE button.md-button.md-layout-item.toolbarButton.md-theme-default {\n  margin-left: 7px;\n  margin-right: unset;\n}\n\n.centerSelectedNodeName {\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: unset;\n  margin-bottom: unset;\n}\n\n/* .commentcutPart {\n  margin: unset\n} */\n\n.filesPaddingPath {\n  padding-left: 17px;\n  display: flex;\n  padding-right: 17px;\n  height: auto;\n}\n.filesPaddingIcon {\n  display: flex;\n  height: auto;\n}\n.sizeOfPathTab {\n  flex-grow: 1;\n  margin-top: auto;\n  margin-left: 15px;\n  margin-bottom: auto;\n}\n.filesBox {\n  background: transparent !important;\n  box-sizing: border-box;\n  height: calc(100% - 50px);\n}\n\n.notesBox {\n  background: transparent !important;\n  box-sizing: border-box;\n  height: 100%;\n}\n/* .commentcutPart {\n  margin: unset\n} */\n\n.container-link * {\n  box-sizing: border-box;\n}\n\n.container-link .md-table-cell-container {\n  white-space: nowrap;\n  overflow: hidden;\n  white-space: initial;\n}\n.container-link .md-ripple.md-list-item-content {\n  box-sizing: border-box;\n  min-height: 20px;\n  height: 25px;\n  font-size: 14px;\n  border-bottom: 1px solid #212121;\n}\n\n.container-link td.md-table-cell {\n  height: unset;\n}\n.size-md-cell {\n  padding-right: unset;\n  padding-left: unset;\n  max-width: 280px;\n}\n.myRowStyle {\n  padding-right: 15px;\n  padding-left: 20px;\n}\n.myRowStyleURLShared {\n  padding-top: 5px;\n}\n.back-line {\n  width: calc(100% - 25px);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n}\n.alignToIconFile {\n  background: #212121;\n}\n.span-opacity {\n  color: white;\n  width: 100%;\n}\n.addURLButtonPanel {\n  box-sizing: border-box;\n  float: right;\n  margin-top: auto;\n  margin-bottom: auto;\n}\n.attributesButtonPanel {\n  width: calc(50% - 16px);\n  border: 1px solid #356bab;\n  box-sizing: border-box;\n}\n.urlBox {\n  height: calc(100% - 90px);\n  box-sizing: border-box;\n}\n.size-md-cell {\n  padding-right: unset;\n  padding-left: unset;\n}\n.heightTabsCreateAttr {\n  height: 30vh;\n}\n\n/* .commentcutPart {\n  margin: unset\n} */\n\n.my-test-panel-container * {\n  box-sizing: border-box;\n}\n.my-test-panel-container-nbr-output {\n  text-align: center;\n}\n\n/* .commentcutPart {\n  margin: unset\n} */\n\n.my-test-panel-container * {\n  box-sizing: border-box;\n}\n.my-test-panel-container-nbr-output {\n  text-align: center;\n}\n\n/* .commentcutPart {\n  margin: unset\n} */\n\n.my-test-panel-container * {\n  box-sizing: border-box;\n}\n.my-test-panel-container-nbr-output {\n  text-align: center;\n}\n\n.hr-sect {\n  display: flex;\n  flex-basis: 100%;\n  align-items: center;\n  color: rgba(204, 204, 204, 0.082);\n  font-size: 12px;\n  margin: 8px 0px;\n}\n.hr-sect::before,\n.hr-sect::after {\n  content: \"\";\n  flex-grow: 1;\n  background: rgba(204, 204, 204, 0.35);\n  height: 1px;\n  font-size: 0px;\n  line-height: 0px;\n  margin: 0px 16px;\n}\n/* .tabulationGroupName {\n  padding-left: 20px;\n  border-top: 2px dotted;\n} */\n.sharedCategoryCss {\n  overflow: hidden;\n  align-items: center;\n}\n\n.sharedCategoryCss:after {\n  content: \"\";\n  display: inline-block;\n  height: 2px;\n  vertical-align: center;\n  width: 100%;\n  margin-right: -100%;\n  margin-left: 11px;\n  border-top: 2px dotted;\n}\n\n.urlBox .md-subheader {\n  padding: unset;\n}\n\n.colorForCategory > .md-list-item-container > .md-list-item-content {\n  background-color: rgba(204, 204, 204, 0.2);\n}\n/* .commentcutPart {\n  margin: unset\n} */\n\n.changeTabDocumentation-enter-active {\n  transition: all 0.5s cubic-bezier(0.55, 0, 0.1, 1);\n}\n.changeTabDocumentation-enter {\n  opacity: 0;\n  transform: translateX(-1em);\n  min-width: unset;\n}\n\n.changeTabDocumentation-enter-to {\n  opacity: 1;\n  transform: translateX(0);\n  min-width: unset;\n}\n\n.iconPlusDocumentation {\n  color: #356bab;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <md-content class=\"unsetBackgroundContent \">\n    <md-button @click=\"forgeSelection\">\n      {{selectedDbidArray.length}} Selected Object\n    </md-button>\n    <div class=\"md-layout-item\">\n      <md-field style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n        <md-select v-model=\"categorySelected\"\n                   name=\"category\"\n                   id=\"category\"\n                   placeholder=\"category\">\n          <md-option value=\"none\">Create Category</md-option>\n          <md-option v-for=\"(category, index) in allCategory\"\n                     :key=\"index\"\n                     :value=\"category.node.info.name.get()\">{{category.node.info.name.get()}}</md-option>\n        </md-select>\n      </md-field>\n      <md-field v-if=\"categorySelected === 'none'\"\n                md-inline\n                style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n        <label>category</label>\n        <md-input v-model=\"categoryCreate\"></md-input>\n      </md-field>\n    </div>\n    <md-field md-inline\n              style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n      <label>Label</label>\n      <md-input v-model=\"label\"></md-input>\n    </md-field>\n\n    <md-field md-inline\n              style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n      <label>Value</label>\n      <md-input v-model=\"value\"></md-input>\n    </md-field>\n    <md-button class=\"md-primary\"\n               @click=\"addAttributes\">Save</md-button>\n  </md-content>\n</template>\n\n<script>\nimport bimObjectService from \"spinal-env-viewer-plugin-bimobjectservice\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nexport default {\n  name: \"my_compo\",\n  data() {\n    return {\n      selectedDbidArray: [],\n      allCategory: [],\n      categorySelected: \"none\",\n      label: undefined,\n      value: undefined,\n      categoryCreate: undefined\n    };\n  },\n  components: {},\n  methods: {\n    forgeSelection() {\n      this.viewer.select(this.selectedDbidArray);\n    },\n    addAttributes() {\n      let myCategoerySelected = this.categorySelected;\n      if (myCategoerySelected === \"none\") {\n        myCategoerySelected = this.categoryCreate;\n      }\n      this.selectedDbidArray.forEach(dbid => {\n        bimObjectService.getBIMObject(dbid).then(node => {\n          if (node === undefined) {\n            // bimobject is not create, we create it\n            // console.log(\"create bim object\");\n            window.spinal.ForgeViewer.viewer.model.getProperties(dbid, res => {\n              bimObjectService\n                .createBIMObject(dbid, res.name)\n                .then(myBIMObject => {\n                  serviceDocumentation.addAttributeByCategoryName(\n                    myBIMObject,\n                    myCategoerySelected,\n                    this.label,\n                    this.value\n                  );\n                });\n            });\n          } else {\n            // bim object is created, node is our bim object\n            // console.log(\"bim object exist\");\n            serviceDocumentation.addAttributeByCategoryName(\n              node,\n              myCategoerySelected,\n              this.label,\n              this.value\n            );\n          }\n        });\n      });\n    },\n    opened(objet, viewer) {\n      this.viewer = viewer;\n      this.selectedDbidArray = objet.dbid;\n      this.allCategory = objet.category;\n    },\n    removed(option, viewer) {},\n    closed(option, viewer) {}\n  }\n};\n</script>\n\n<style>\n.unsetBackgroundContent {\n  background: transparent !important;\n  box-sizing: border-box;\n  height: calc(100% - 50px);\n}\n.unsetBackgroundContent ul.md-list.md-theme-default {\n  background-color: unset;\n}\n.unsetBackgroundContent .md-field.md-theme-default.md-inline {\n  margin: unset;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <md-content class=\"unsetBackgroundContent \">\n    <md-button @click=\"forgeSelection\">\n      {{selectedDbidArray.length}} Selected Object\n    </md-button>\n    <md-field md-inline\n              style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n      <label>Label</label>\n      <md-input v-model=\"label\"></md-input>\n    </md-field>\n\n    <md-field md-inline\n              style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n      <label>URL</label>\n      <md-input v-model=\"value\"></md-input>\n    </md-field>\n    <md-button class=\"md-primary\"\n               @click=\"editURL\">Edit</md-button>\n    <md-button class=\"md-primary\"\n               @click=\"deleteURL\">Delete</md-button>\n  </md-content>\n</template>\n\n<script>\nimport bimObjectService from \"spinal-env-viewer-plugin-bimobjectservice\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nexport default {\n  name: \"my_compo\",\n  data() {\n    return {\n      selectedDbidArray: [],\n      label: undefined,\n      value: undefined\n    };\n  },\n  components: {},\n  methods: {\n    forgeSelection() {\n      this.viewer.select(this.selectedDbidArray);\n    },\n    deleteURL() {\n      this.selectedDbidArray.forEach(dbid => {\n        bimObjectService.getBIMObject(dbid).then(node => {\n          if (node === undefined) {\n            // bimobject is not create, we create it\n            // console.log(\"create bim object\");\n            // window.spinal.ForgeViewer.viewer.model.getProperties(dbid, res => {\n            //   bimObjectService\n            //     .createBIMObject(dbid, res.name)\n            //     .then(myBIMObject => {\n            //       serviceDocumentation.addURL(\n            //         myBIMObject,\n            //         this.label,\n            //         this.value\n            //       );\n            //     });\n            // });\n          } else {\n            // bim object is created, node is our bim object\n            serviceDocumentation.deleteURL(node, this.label);\n          }\n        });\n      });\n    },\n    editURL() {},\n    addURL() {\n      this.selectedDbidArray.forEach(dbid => {\n        bimObjectService.getBIMObject(dbid).then(node => {\n          if (node === undefined) {\n            // bimobject is not create, we create it\n            // console.log(\"create bim object\");\n            window.spinal.ForgeViewer.viewer.model.getProperties(dbid, res => {\n              bimObjectService\n                .createBIMObject(dbid, res.name)\n                .then(myBIMObject => {\n                  serviceDocumentation.addURL(\n                    myBIMObject,\n                    this.label,\n                    this.value\n                  );\n                });\n            });\n          } else {\n            // bim object is created, node is our bim object\n            serviceDocumentation.addURL(node, this.label, this.value);\n          }\n        });\n      });\n    },\n    opened(objet, viewer) {\n      this.viewer = viewer;\n      this.selectedDbidArray = objet.dbid;\n    },\n    removed(option, viewer) {},\n    closed(option, viewer) {}\n  }\n};\n</script>\n\n<style>\n.unsetBackgroundContent {\n  background: transparent !important;\n  box-sizing: border-box;\n  height: calc(100% - 50px);\n}\n.unsetBackgroundContent ul.md-list.md-theme-default {\n  background-color: unset;\n}\n.unsetBackgroundContent .md-field.md-theme-default.md-inline {\n  margin: unset;\n}\n</style>\n","<!--\nCopyright 2018 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <md-content class=\"unsetBackgroundContent \">\n    <md-button @click=\"forgeSelection\">\n      {{selectedDbidArray.length}} Selected Object\n    </md-button>\n    <md-field md-inline\n              style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n      <label>Label</label>\n      <md-input v-model=\"label\"></md-input>\n    </md-field>\n\n    <md-field md-inline\n              style=\"width: 80%; margin-left: auto; margin-right: auto;\">\n      <label>URL</label>\n      <md-input v-model=\"value\"></md-input>\n    </md-field>\n    <md-button class=\"md-primary\"\n               @click=\"addURL\">Save</md-button>\n  </md-content>\n</template>\n\n<script>\nimport bimObjectService from \"spinal-env-viewer-plugin-bimobjectservice\";\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\nexport default {\n  name: \"my_compo\",\n  data() {\n    return {\n      selectedDbidArray: [],\n      label: undefined,\n      value: undefined,\n      categoryCreate: undefined\n    };\n  },\n  components: {},\n  methods: {\n    forgeSelection() {\n      this.viewer.select(this.selectedDbidArray);\n    },\n    addURL() {\n      let myCategoerySelected = this.categorySelected;\n      this.selectedDbidArray.forEach(dbid => {\n        bimObjectService.getBIMObject(dbid).then(node => {\n          if (node === undefined) {\n            // bimobject is not create, we create it\n            // console.log(\"create bim object\");\n            window.spinal.ForgeViewer.viewer.model.getProperties(dbid, res => {\n              bimObjectService\n                .createBIMObject(dbid, res.name)\n                .then(myBIMObject => {\n                  serviceDocumentation.addURL(\n                    myBIMObject,\n                    this.label,\n                    this.value\n                  );\n                });\n            });\n          } else {\n            // bim object is created, node is our bim object\n            serviceDocumentation.addURL(node, this.label, this.value);\n          }\n        });\n      });\n    },\n    opened(objet, viewer) {\n      this.viewer = viewer;\n      this.selectedDbidArray = objet.dbid;\n    },\n    removed(option, viewer) {},\n    closed(option, viewer) {}\n  }\n};\n</script>\n\n<style>\n.unsetBackgroundContent {\n  background: transparent !important;\n  box-sizing: border-box;\n  height: calc(100% - 50px);\n}\n.unsetBackgroundContent ul.md-list.md-theme-default {\n  background-color: unset;\n}\n.unsetBackgroundContent .md-field.md-theme-default.md-inline {\n  margin: unset;\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-documentation.117365b5.css.map"}