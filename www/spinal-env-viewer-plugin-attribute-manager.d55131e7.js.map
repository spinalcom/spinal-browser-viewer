{"mappings":"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S;I,I,K,I,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAlBA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA4B,MAAM;IAChD,OAAO,eAAe,GAAG,QAAQ,oBAA4B,eAAe;IAC5E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,mBAAyB,OAAO;IAC9D,QAAQ,oBAA0B,OAAO,CAAC;IAC1C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;A,+B;A,wE;;;A;;A;;A;A;;A,oD;A;A;A,I,gB;I,M;I,Y;Q,+C;Q,mB,C,G,wB,A;I;I,O;Q,e;Y,M;Q;Q,qB;Y,M;Q;Q,c,C;I;I;Q,I,C,M,G,O,M,C;Y,Q;Y,S;Y,O;Q;Q,O;Y,0B;Y,U,I,C,M,C,M;Y,c,E;Y,Q,E;Q;I;I,M;Q,I,C,Y,G,M,I,C,e;Q,I,C,M,G,M,I,C,a;I;I,S;Q;Y,I,C,K,C;Q;Q,6B;Q,kD;Q,K;Q;Y,I,C,K,C;Q;Q,M;Y,I,U,E;Y,I,a,M,I,C,a;Y,I,I,C,a,E,U,I,C,a,C,G,C,C;gB,O;oB,I,K,E;oB,M,K,I;oB,M,K,I;oB,Y,W,G,C,C;wBAyDf,OAAA;4B,U,G,Q;4BAEA,OAAA,GAAA,KAAA;4B,M,G,I;4BAEA,OAAA,IAAA,CAAA,iBAAA,CAAA,MAAA;wBACA;oB;gBAEA;Y;YAIA,gDAAA;Y,O;QAEA;Q;YAGA,4BAAA;YACA,uCAAA;YACA,oCAAA;YACA,QAAA;YACA,IAAA;YAEA,+CAAA;YACA,aAAA;YACA,4BAAA;YACA,uEAAA;YACA,mBAAA;YACA,OAAA;YACA,MAAA;YAEA,OAAA,CAAA,GAAA,oCAAA,AAAA,EACA,uBAAA,GACA,IAAA,CAAA,CAAA;gBACA,IAAA,SAAA,KAAA,UAAA;gBAEA,0BAAA;gBACA,IAAA,QAAA,EAAA;gBAEA,OAAA,OAAA,CAAA,CAAA;oBACA,IAAA,QAAA,MAAA,UAAA,CACA,GAAA,CAAA,CAAA;wBACA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;YACA,IAAA,CAAA,YAAA,GAAA,MAAA,IAAA,CAAA,eAAA;YACA,IAAA,CAAA,MAAA,GAAA,MAAA,IAAA,CAAA,aAAA;QACA;IAKA;I;QAEA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,MAAA,CAAA,MAAA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;;;AC5SA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAwB,MAAM;IAC5C,OAAO,eAAe,GAAG,QAAQ,oBAAwB,eAAe;IACxE,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAqB,OAAO;IAC1D,QAAQ,oBAAsB,OAAO,CAAC;IACtC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A,0D;A;;A;;A;;A;;A,oD;A;A;;A,M,E,yB,E,G,Q;A,M,W,Q;A,I,gB;I,M;I,O;Q,c,C;Q,Q,C;Q,c,C;I;I,Y;Q,kB,C,G,uB,A;Q,2B,C,G,+B,A;Q,oB,C,G,kC,A;Q,oB,C,G,kC,A;I;I;Q,I,C,e,G;Y;gB,M;gB,O;gB,Q,I,C,S;Y;Y;gB,M;gB,O;gB,Q,I,C,wB;Y;S;Q,O;Y,iB;Y,U;Y,U,E;Y,a;Y,U;Y,e,E;Y,iB,E;Y,Y;gB,M;gB,a;gB,Y;Y;Y,iB;gB;gB;gB;a;Y,U,I;Q;I;I;Q,I,C,oB,G,S,I,C,a,E;I;I;Q,I,C,Q,G,I,C,U,C,I,C,Y,C,G,C,C;Y,G,Q,G;Y,O;Q;Q,W;Y,I,C,c;Q,G;I;I,S;Q,M,kB,K;Y,I,O,M,I,C,Y;Y,I,C,O;Y,I,C,Q,G;Q;Q;Y,I,C,Q,G;Q;Q;Y,I,C,K,C;Q;Q,c,K,E,I;Y,I,K,I,G,M,G,G,O,M,M,C,C;gB,O,K,I,C,W,G,Q,C,K,I,G,W;Y,G,G,C,C;gB,G,Q,G;gB,O;Y;Y,O,M,G,C,C;gB,G,Q,G;gB,O;Y;Q;Q,e,K,E,K;Y,I,M,I,G,M,G,G,O,M,M,C,C;gB,I,Q,G,U,C,I,C,C;oB,O,K,K,C,Q,G,W,G,Q,C,M,I,G,W;gB;gB,O,Q,O;Y,G,G,C,C;gB,G,Q,G;gB,O;Y;Y,O,M,G,C,C;gB,G,Q,G;gB,O;Y;Q;Q;Y,O,I,C,Q;gB,K;oB,I,C,Q,G,I,C,U,C,I,C,Y,C,I,C,Y,E,I,C,W;oB;gB,K;oB,I,C,Q,G,I,C,U,C,I,C,a,C,I,C,Y,E,I,C,W;oB;Y;Q;Q,W,K;Y,I,C,Q,G,I,C,Q,C,G,C,C;gB,G,Q,G;gB,O;Y;Q;Q;Y,I,C,Q,G,I,C,Q,C,G,C,C;gB,G,Q,G;gB,O;Y;Q;Q;Y,I,C,W;Y,I,C,iB;Q;Q;Y,M,a,I,C,U,C,I;Y,M,a,I,C,U,C,W;Y,M,Q,A,C,a,C,I;Y,M,M,Q;Y,I,C,Q,G,I,C,Q,C,G,C,C,I;gB,I,S,S,Q,K,G,Q,G;gBA2Kf,OAAA;YACA;QACA;Q;YAGA,MAAA,aAAA,IAAA,CAAA,UAAA,CAAA,IAAA;YACA,MAAA,aAAA,IAAA,CAAA,UAAA,CAAA,WAAA;YAEA,MAAA,QAAA,AAAA,CAAA,aAAA,CAAA,IAAA;YACA,MAAA,MAAA,QAAA;Y,I,C,Q,G,I,C,Q,C,G,C,C,I;gBAGA,IAAA,SAAA,SAAA,QAAA,KACA,GAAA,QAAA,GAAA;gB,O;YAGA;Q;Q;YAIA,IAAA,CAAA,KAAA,CAAA;QACA;QAEA,kBAAA,GAAA;YACA,IAAA,QAAA,IAAA,KAAA;YACA,IAAA,WAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,EAAA;YACA,IAAA,QAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,EAAA;YAEA,IAAA,IAAA,QAAA,EAAA;gBACA,IAAA,aAAA,IAAA,CAAA,KAAA,CAAA,oBAAA;gBAEA,WAAA,OAAA,CAAA,CAAA;oBACA,IAAA,IAAA,gBAAA,EACA,IAAA,CAAA,mBAAA,CACA;wBACA,IAAA,GAAA,IAAA,CAAA,EAAA;wBACA,UAAA;wBACA,WAAA;oBACA,GACA;yB,G,gB,C,U,O;gBAKA;YACA,OAAA;gBACA,KAAA,MAAA,MAAA,IAAA,CAAA,QAAA,CAAA,IAAA,GACA,IAAA,IAAA,gBAAA,EACA,IAAA,CAAA,mBAAA,C;oBAEA,IAAA;oBACA,UAAA;oBACA,WAAA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AO,eAAe,GAAG,QAAQ,oBAAkC,eAAe;IAClF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,mBAA+B,OAAO;IACpE,QAAQ,mBAAgC,OAAO,CAAC;IAChD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,O;Q,M;Y,S;Q;Q,c;Y,U;Q;I;I;Q,O;Y,c;Y,e;Q;I;I,S;Q;Y,I,C,K,C;Q;Q;Y,I,I,C,Y,C,M,G,G;gB,I,W,I,C,Y,C,G,C,C;oB,O,C,G,wB,A,E,e,C,G,E,E,I,C,Y,E,I,C,a;gB;gB,O,Q,G,C,U,I,C;oB,I,C,K,C;gB;Y,O,M;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,W;Y,Q,I,I;Y,a;Y,U;Q;I,G;Q,G,a;Y,a;Y,a;gB,oB;Y;Y,I;gB,S,I,I;Y;Q,G;Y,G,W;gB,I,E,C;a;Y,I,E,C;S,E;Q,I,E,C;Q,G,Y;Y,M;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,O;gC,O,I,Y;gC,U,S,G;oC,I,Y,G;gC;gC,Y;4B;wB;qB,E;oB,I,E,C;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,O;gC,O,I,a;gC,U,S,G;oC,I,a,G;gC;gC,Y;4B;wB;qB,E;iB,E;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,G,K;wB,a;wB,I;4B,S,I,I;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,K;wB,a;wB,I;4B,S,I,Q;wB;oB,G;wB,I,E,C;qB;iB;a;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAmC,MAAM;IACvD,OAAO,eAAe,GAAG,QAAQ,oBAAmC,eAAe;IACnF,OAAO,QAAQ,GAAG;IAG5B,QAAQ,mBAAiC,OAAO,CAAC;IACjD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,O;Q,e,C;I;I;Q,I,C,O,G;Y;gB,M;gB,M;gB,Q,I,C,O;Y;Y;gB,M;gB,M;gB,Q,I,C,M;Y;Y;gB,M;gB,M;gB,Q,I,C,I;Y;Y;gB,M;gB,M;gB,Q,I,C,O;Y;S;Q,O,C;I;I,S;Q;Y,M,M,I,C,a,C,G,C,C,K,G,E;Y,I,I,M,G,G,C,G,wB,A,E,K,C,U;iB,M;Q;Q;Y,M,M,I,C,a,C,G,C,C,K,G,E;Y,I,I,M,G,G,C,G,wB,A,E,K,C,W;iB,M;Q;Q;Y,M,M,I,C,a,C,G,C,C,K,G,E;Y,I,I,M,G,G,C,G,wB,A,E,K,C,a;iBAuBf,MAAA;QAEA;QACA;YACA,IAAA,CAAA,KAAA,CAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O,I,E,C,I,O,E,S,G,E,K;Q,O,G,a;Y,K;Y,a;Y,I;gB,S,I,M;Y;Q,G;Y,G,c;gB,I,E,C,I,E,C,I,I;a;Y,I,E,C;Y,G,W;gB,I,E,C,I,E,C,I,I;a;S,E;I,I;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAhDA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAuB,MAAM;IAC3C,OAAO,eAAe,GAAG,QAAQ,oBAAuB,eAAe;IACvE,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAoB,OAAO;IACzD,QAAQ,oBAAqB,OAAO,CAAC;IACrC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,Y;Q,oB,C,G,4B,A;I;I,O;Q,U,C;Q,e,C;Q,iB,C;I;I;Q,I,C,O,G;Y;gB,M;gB,M;gB,O;Y;Y;gB,M;gB,M;gB,O;gB,Q,I,C,gB;Y;Y;gB,M;gB,M;gB,O;gB,Q,I,C,Q;Y;Y;gB,M;gB,M;gB,O;gB,Q,I,C,c;Y;S;Q,O,C;I;I,S;Q,W,I;Y,I,C,K,C;Q;Q,kB,G;Y,I,C,K,C,e;Q;Q,kB,G;Y,I,C,K,C,S;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA4B,MAAM;IAChD,OAAO,eAAe,GAAG,QAAQ,oBAA4B,eAAe;IAC5E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAyB,OAAO;IAC9D,QAAQ,mBAA0B,OAAO,CAAC;IAC1C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;A,uD;;;A,I,gB;I,M;I,O;Q,S,C;Q,e,C;I;I;Q,O;Y,gB;Y,iB,E;Y,kB;Y,U;Y,O;Q;I;I;Q,I,C,e,G,I,C,O,C,M,C,C;Y,M,gB,O,G,Q,K;Y,M,a,O,G,K,K;Y,O,iB;Q;I;I,S;Q;Y,I,I,C,a,I,C,I,C,K,C,I,G,M,G,K,I,C,gB,A,G;gB,M,Q,I,C,K,C,oB;oB,O,I,C,K,C,I;oB,Q,I,C,c;oB,U,I,C,Q;oB,kB,I,C,gB;gB;Y,O,M;Q;I;I,O;Q;Y,I,I,C,gB,E,I,C,K,G;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a;Y,U;Q;I,G;Q,G,a;Y,a;Y,a;gB,oB;Y;Y,O;gB,S;Y;Q,G;Y,G,W;gB,I,E,C;a;S,E;Q,I,E,C;Q,G,Y;Y,M;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,Y;wB,a;oB,G;wB,G,a;4B,O;gC,e;gC,Q;gC,M;4B;4B,O;gC,O,I,c;gC,U,S,G;oC,I,c,G;gC;gC,Y;4B;wB,G;4B,C,I,e,I,I,e,C,M,K,I,G,a;gC,O;oC,Y;gC;4B,G;gC,I,E,C;6B,I,I,E;4B,I,E,C;4B,I,E,C,I,e,E,S,I,E,K;gC,O,G,a;oC,K;oC,O;wC,S,A,K,Q,G,M,K,K;oC;gC,G;oC,I,E,C,qB,I,E,C,A,K,Q,G,Q,K,K,I;iC;4B;yB,E;qB,E;oB,I,E,C;oB,G,e;wB,a;wB,O;4B,O,I,gB;4B,U,S,G;gC,I,gB,G;4B;4B,Y;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,O;gC,Y,I,gB,I,C,I,c,I,I,c,C,I,G,M,K;4B;4B,O;gC,O,I,K;gC,U,S,G;oC,I,K,G;gC;gC,Y;4B;wB;qB,E;oB,I,E,C;oB,G,O;wB,a;oB,G;wB,G,Y;4B,a;4B,O;gC,S;4B;4B,O;gC,O,I,Q;gC,U,S,G;oC,I,Q,G;gC;gC,Y;4B;wB,G;4B,I,E,C;yB;wB,I,E,C;wB,G,Y;4B,a;4B,O;gC,S;4B;4B,O;gC,O,I,Q;gC,U,S,G;oC,I,Q,G;gC;gC,Y;4B;wB,G;4B,I,E,C;yB;qB,E;iB,E;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,G,K;wB,Y;4B;gC,M;gC,S;4B;yB;wB,a;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,K;wB,Y;4B;gC,M;gC,S;4B;yB;wB,a;wB,I;4B,S,I,Q;wB;oB,G;wB,I,E,C;qB;iB;a;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,C,I,Q,G,G,iB;Y,O;gB,gB;gB,Y;Y;Q,G;Y,G,wB;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,W;oB,a;gB,G;oB,I,E,C;iB;a,E;Y,I,E,C;Y,G,yB;gB,a;Y,G,I,E,C,I,O,E,S,G,E,K;gB,O,G,a;oB,K;oB,a;oB,I;wB,S,S,M;4B,O,I,S,C,I,K;wB;oB;gB,G;oB,G,W;wB,I,E,C,I,E,C,I,I;qB;oB,I,E,C,6B,I,E,C,I,I,I;iB,E;Y,I;S,E,K,I,E;Q,I,E,C;Q,I,Q,G,G,O;Y,a;Q,G;Y,G,a;gB,a;gB,O;oB,S;gB;gB,I;oB,S,S,M;wB,O,I,gB,C;oB;gB;Y,G;gB,G,W;oB,I,E,C;iB;a,E;Y,I,E,C;Y,G,oB;gB,O;oB,W,I,e;oB,iB,I,a;gB;gB,I;oB,oB,I,gB;gB;Y;Y,I,E,C;Y,G,a;gB,a;gB,O;oB,S;gB;gB,I;oB,S,S,M;wB,O,I,gB,C;oB;gB;Y,G;gB,G,W;oB,I,E,C;iB;a,E;S,E,K,I,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;Q,O;Y,Y;Q;I,G;Q,G,O;Y,a;Q,G;Y,G,kB;gB,O;oB,Y,I,Q;oB,iB,I,a;oB,mB,I,e;gB;gB,I;oB,a,I,gB;oB,Q,I,Q;oB,Q,I,c;oB,S,I,gB;oB,e,I,gB;oB,iB,I,a;gB;Y;S,E;Q,I,E,C;Q,G,O;Y,a;Y,O;gB,gB;Y;Q,G;Y,G,O;gB,a;Y,G;gB,G,oB;oB,O;wB,iB,I,a;oB;oB,I;wB,W,I,O;oB;gB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,Y;wB,G,a;4B,O;gC,Q;gC,M;4B;4B,O;gC,O,I,Q;gC,U,S,G;oC,I,Q,G;gC;gC,Y;4B;wB,G;4B,G,a;gC,O;oC,S;gC;4B,G;gC,I,E,C;6B;4B,I,E,C;4B,G,a;gC,O;oC,S;gC;4B,G;gC,I,E,C;6B;yB,E;qB,E;iB,E;gB,I,E,C;gB,G,Y;oB,G,S;wB,Y;4B;gC,M;gC,S;gC,O,I,W;gC,Y;4B;yB;wB,a;wB,O;4B,e;wB;wB,U;4B,S,I,W;wB;wB,I;4B,S,S,M;gC,I,O,M,C,S,E;gC,I,W,G,O,M,C,K;4B;wB;oB;oB,I,E,C;oB,G,W;wB,I,E,C;qB;iB,E;a,E;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,gB;gB,a;gB,O;oB,W,I,e;oB,S,I,Q;oB,uB,I,e;oB,c,I,U;oB,Q;gB;gB,I;oB,qB,S,M;wB,I,U,G;oB;gB;gB,a,I,E,C;oB;wB,K;wB,I,S,K;4B,O;gC,G,M;oC,G,M;wC,a;4C,c;wC;oC,G;wC,G,W;4C,a;4C,O;gD,W;4C;wC,G;4C,G,a;gD,O;oD,mB;gD;4C,G;gD,G,W;oD,I,E,C;iD;gD,I,E,C;6C,E;4C,I,E,C;4C,G,mB,I,E,C,I,e,E,S,C,E,K;gD,O,G,gB;oD,K;oD,I;wD,S,E,M;oD;gD,G;oD,I,E,C,yB,I,E,C,E,I,I;iD;4C,I;yC,E;qC,E;oC,I,E,C;oC,I,E,C,M,O,E,S,I,E,K;wC,O,G,M;4C,K;4C,a;gD,c;4C;wC,G;4C,I,E,C,mB,I,E,C,K,I,I;yC;oC;oC,I,E,C;oC,G;iC,E;6B;wB;oB;oB;wB,K;wB,I,S,K;4B,O;gC,G,M;oC,G,c;wC,O;4C,W;4C,gB;wC;wC,I;4C,U,S,M;gD,O,I,S,C,M,I;4C;wC;wC,O;4C,O,M,I,C,Q;4C,U,S,G;gD,I,I,C,M,I,E,Y;4C;4C,Y;wC;oC;iC,E;gC,I,E,C;gC,G,M;oC,a;oC,I;wC,S,S,M;4C,O,I,kB,C,M,I;wC;oC;gC,G;oC,G,c;wC,O;4C,gB;wC;oC,G;wC,I,E,C,I,E,C,M,I,C,I;qC;oC,I,E,C,iB,I,E,C,M,I,C,I,I;iC,E;gC,I,E,C;gC,G,M;oC,I,E,C,I,E,C,M,I,C,I;iC;gC,I,E,C;gC,I,E,C,I,M,E,S,S,E,K;oC,O,G,M;wC,K;wC,a;oC,G;wC,G,2B;4C,K;4C,U;4C,O;gD,Y,I,Q;gD,Q,M,I;gD,a;gD,Y,I,Q;4C;4C,I;gD,Y,I,O;gD,uB,I,mB;4C;wC;qC,E;gC;gC,I,E,C;gC,G,M;oC,G,a;wC,a;wC,I;4C,S,S,M;gD,O,I,mB,C,M,I;4C;wC;oC,G;wC,G,c;4C,I,E,C;yC;wC,I,E,C;wC,G,W;4C,I,E,C;yC;qC,E;iC,E;6B;wB;oB;iB;Y;S,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AZJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;AeaA,CAAA,SAAA,CAAA,EAAA,CAAA;IAAA,IAAA,cAAA,OAAA,UAAA,OAAA,GAAA,EAAA,OAAA,EAAA,EAAA;SAAA;AAAA,CAAA,EAAA,IAAA,EAAA;IAAA;IAAA,SAAS,EAAK,CAAd,EAAoB,CAApB;QAA0B,OACJ,eAAhB,OAA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,UAAU,SAA9B;QAElB,IAAI,AAAC,CAAA,KAAgB,KAAS,KAAa,CAAA,KAAyC,eAAtB,OAAO,YAA4B;YAE/F,IAAI,IAAS,IAAI;YACjB,EAAO,SAAP,GAAmB;gBACjB,IAAI,IAAM,EAAO,MAAjB;gBACA,IAAM,IAAc,IAAM,EAAI,OAAJ,CAAY,gBAAgB,0BAClD,IAAO,EAAM,QAAN,CAAe,IAAf,GAAsB,IAC5B,WAAW,GAChB,IAAQ;YACT,GACD,EAAO,aAAP,CAAqB;QACtB,OAAM;YAAA,IACD,IAAM,EAAQ,GAAR,IAAe,EAAQ,SAD5B,EAED,IAAM,EAAI,eAAJ,CAAoB;YAC1B,IAAO,EAAM,QAAN,GAAiB,IACvB,SAAS,IAAT,GAAgB,GACrB,IAAQ,MACR,WAAW;gBAAc,EAAI,eAAJ,CAAoB;YAAM,GAAE;QACtD;IACF,CAAA;IAGH,EAAQ,MAAR,GAAiB,EAAO,MAAP,GAAgB,GAG/B,OAAO,OAAP,GAAiB;AAvJnB;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,A,I,a,G,G,O;Q,a;I,G;Q,I,Q,K,I,M,C,M,G,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,a;wB,I;4B,S,I,I;wB;oB,G;wB,G,W;4B,I,E,C;yB;wB,I,E,C;qB,E;iB,E;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,G,a;wB,a;wB,I;4B,S,I,W;wB;oB,G;wB,G,W;4B,I,E,C;yB;wB,I,E,C;qB,E;oB,I,E,C;oB,G,a;wB,a;wB,I;4B,S,I,U;wB;oB,G;wB,G,W;4B,I,E,C;yB;wB,I,E,C;qB,E;iB,E;a;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,G,mB;oB,K;oB,O;wB,gB,I,Y;wB,U,I,M;wB,gB,I,Y;oB;oB,I;wB,W,I,e;oB;gB;a,E;S,I,I,E;Q,I,E,C;Q,I,Q,K,I,M,C,O,G,G,O;Y,a;Q,G;Y,G,uB;gB,O;oB,W;gB;Y;S,E,K,I,E;K,I,I,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AhBjBA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,c;Q,a;I,G;Q,I,I,I,I,Q,K,I,M,C,M,I,I,W,K,I,K,C,K,G,G,sB;Y,O;gB,S,I,I,C,K;Y;Y,I;gB,U,I,U;Y;Q,K,I,E;Q,I,E,C;Q,I,Q,K,I,M,C,M,I,I,Y,I,I,W,K,I,K,C,K,G,G,c;Y,O;gB,iB,I,a;gB,uB,I,mB;gB,gB,I,Y;Y;Y,I;gB,Q,I,M;gB,W,I,Y;gB,oB,I,gB;Y;Q,K,I,E;Q,I,E,C;Q,I,Q,K,I,M,C,O,G,G,O;Y,a;Q,G;Y,G,uB;gB,O;oB,W;gB;Y;S,E,K,I,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ANJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AuBJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAqC,MAAM;IACzD,OAAO,eAAe,GAAG,QAAQ,oBAAqC,eAAe;IACrF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAkC,OAAO;IACvE,QAAQ,oBAAmC,OAAO,CAAC;IACnD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;A,I,gB;I,M;I,Y;Q,0B,C,G,oC,A;Q,kC,C,G,uC,A;I;I;Q,O;Y,c;Y,sB;Y,M;gB,kB;gB,Y,E;gB,e;gB,Q,E;gB,uB;gB,gB,E;Y;Y,U,C;Q;I;I,Y;I,S;Q,Q,M;Y,I,C,uB;Y,I,U,O,I,C,Q,M,G,G;gB,I,C,Q,G;gB,I,C,Y,G;Y;Q,6C;Q,oD;Q,2B;Q,I;Q,0C;Q,8C;Q,2B;Q,I;Q,2C;Q,uD;Q,2B;Q,I;Q;Q,W;Q,W,S;Y,O;gB,K;oB,I,C,Y,G;oB;gB,K;oB,I,C,Y,G;oB;Y;Q;Q,M;Y,M,c,M,C,G,oC,A,E,uB;Y,2C;Y,I,C,oB,G,Y,E;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAqC,MAAM;IACzD,OAAO,eAAe,GAAG,QAAQ,oBAAqC,eAAe;IACrF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAkC,OAAO;IACvE,QAAQ,oBAAmC,OAAO,CAAC;IACnD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;A;;A;;A;;A;;A;;A,I,gB;I,M;I,O;Q,sB,C;Q,M,C;Q,U,C;I;I,Y;Q,e,C,G,6B,A;Q,e,C,G,2B,A;Q,2B,C,G,iC,A;I;I;Q,O,C;I;I,M;Q,M,a,M,C,G,oC,A,E,a;Q,I,C,I,C,U,G,W,G,C,C,K,G,G;I;I,S;Q,M,gB,I;Y,M,W,M,C,G,oC,A,E,c,C,M;Y,I,Y,S,I,E;gB,I,C,I,C,U,C,I,C,S,I,C,G;gB,I,C,c,C,S,K,G,G;Y;Q;Q,M,a,I;Y,M,Q,M,C,G,oC,A,E,W,C,I,C,I,C,gB,E,M;Y,I,S,M,I,E;gB,I,C,I,C,M,C,I,C,M,I,C,G;gB,I,C,W,C,M,K,G,G;Y;Q;Q,M,qB,I;Y,M,gB,M,C,G,oC,A,E,mB,C,I,C,I,C,a,E;Y,I,iB,c,I,E;gB,I,C,I,C,c,C,I,C,c,I,C,G;gB,I,C,mB,C,c,K,G,G;Y;Q;Q,M,gB,E;Y,I,O,O,a;gB,I,C,I,C,gB,G;gB,M,S,M,C,G,oC,A,E,S,C;gB,I,C,I,C,M,G,O,G,C,C,K,G,G;gB,8B;gB,I,C,I,C,a,G;gB,I,C,I,C,qB,G;Y,M;Y;Q;Q,M,a,E;Y,I,O,O,a;gB,I,C,I,C,a,G;gB,M,iB,M,C,G,oC,A,E,iB,C;gB,I,C,I,C,c,G,e,G,C,C,K,G,G;gB,qB;gB,I,C,I,C,qB,G;Y,K;Y;Q;Q,M,qB,E;Y,I,C,I,C,qB,G;Q;Q;Y,I,C,K,C;Q;Q,M;Y,wE;Y,M,S;gB,M,E;Y;Y,I,I,C,I,C,qB,E;gB,M,O,M,I,C,oB,C,I,C,I,C,qB,E,I,C,I,C,a,E,I,C,I,C,gB;gB,O,I,C,I,C;Y,O,I,I,C,I,C,a,E;gB,M,Q,M,I,C,e,C,I,C,I,C,a;gB,O,I,C,I,I;Y,O,I,I,C,I,C,gB,E;gB,I,c,I,C,I,C,M,C,G,C,C;oB,O,I,C,e,C,M,E;gB;gB,I,Q,M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wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,Y;Y,a;Q,G;Y,G,a;gB,O;oB,Q;oB,M;oB,e,I,W;gB;gB,I;oB,e,I,U;gB;gB,O;oB,O,I,Y;oB,U,S,G;wB,I,Y,G;oB;oB,Y;gB;Y,G;gB,C,I,I,I,I,I,C,M,K,I,G,a;oB,O;wB,Y;oB;gB,G;oB,I,E,C;iB,I,I,E;gB,I,E,C;gB,I,E,C,I,I,E,S,I,E,K;oB,O,G,a;wB,K;wB,O;4B,S,K,E;wB;oB,G;wB,I,E,C,e,I,E,C,K,I,I;qB;gB;a,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA6B,MAAM;IACjD,OAAO,eAAe,GAAG,QAAQ,oBAA6B,eAAe;IAC7E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA0B,OAAO;IAC/D,QAAQ,oBAA2B,OAAO,CAAC;IAC3C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q,O;Y,M;Q;Q,W;Y,M;Q;Q,U;Y,M;Y,S;Q;I;I;Q,O;Y,M;Y,M;Q;I;I,S;Q,U,O;Y,I,C,I,G;Y,I,W,I,C,I,C,I,G,M,G,G,uB;Y,+C;Y,sE;Y,W;Y,gD;Y,I;Y,I,C,K,C,U,I,C,I,C,I;Y,I,C,I,G;Q;Q;Y,I,C,I,G,C,I,C,I;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a;Y,U;Y,Q,I,I,I,C,I,Q;Q;I,G;Q,G,a;Y,a;Y,O;gB,Y,I,Q;Y;Y,I;gB,S,S,M;oB,O,e;oB,O,I,a,C,K,C,M;gB;Y;Q,G;Y,G,c;gB,I,E,C,I,E,C,I,K;a;Y,I,E,C;Y,G,W;gB,I,E,C,I,E,C,I,I;a;Y,I,E,C,W,I,E,C,I,K,I;S,E;Q,I,E,C;Q,G,Y;Y,M;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,E,C,I,E,C,I,S;yB;wB,I,E,C;wB,G,Y;4B,O;gC,O,I,I;gC,U,S,G;oC,I,I,G;gC;gC,Y;4B;wB;qB,E;iB,E;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,G,K;wB,a;wB,I;4B,S,S,M;gC,O,I,Q,C;4B;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,K;wB,a;wB,I;4B,S,S,M;gC,O,I,Q,C;4B;wB;oB,G;wB,I,E,C;qB;iB;a;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAiC,MAAM;IACrD,OAAO,eAAe,GAAG,QAAQ,oBAAiC,eAAe;IACjF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA8B,OAAO;IACnE,QAAQ,oBAA+B,OAAO,CAAC;IAC/C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;A;;A,I,gB;I,M;I,Y;Q,gB,C,G,8B,A;Q,kB,C,G,0B,A;I;I,O;Q,uB;Y,M;Y,S;Q;Q,sB,C;I;I;Q,O;Y,mB;gB,M;gB,Y,E;Y;Y,U;Q;I;I;Q,I,C,gB;I;I,S;Q,M;Y,I,I,C,qB,E,I,C,iB,G,M,C,G,oC,A,E,oB,C,I,C,qB;iB,I,C,iB,G;gB,M;gB,Y,E;Y;Q;Q;Y,I,C,Q,G;Q;Q,M;Y,M,C,G,oC,A,E,yB,C,I,C,qB;Y,I,C,K,C;Y,I,C,Y;Q;Q,M;Y,M,C,G,oC,A,E,iB;Y,I,C,K,C;Y,I,C,Y;Q;Q,sB,G;Y,I,Q,I,C,iB,C,U,C,I,C,C,K,G,I,K,I,Q;Y,I,C,O,I,C,iB,C,U,C,I,C;gB,I,K,G;gB,M,I,Q;gB,Y,E;Y;Q;Q,Y,G;Y,I,I,Q,I,I,K,E;gB,I,Q,I,C,iB,C,U,C,I,C,C;oB,O,G,I,K,I,Q;gB;gB,I,O;oB,I,Y,M,U,C,I,C,C,K,G,I,K,I,K;oB,I,O,c,a,M,U,C,I,C;wB,M;wB,M,I,K;wB,I,K,G;oB;gB;Y;Q;Q,Y,G;Y,I,O,I,I,K,a,I,C,iB,C,U,G,I,C,iB,C,U,C,M,C,C;gB,O,G,E,K,I,Q,C,E;Y;iB;gB,I,Q,I,C,iB,C,U,C,I,C,C;oBA6Ff,OAAA,GAAA,EAAA,KAAA,IAAA,QAAA,CAAA,EAAA;gBACA;gBAEA,IAAA,OACA,MAAA,UAAA,GAAA,MAAA,UAAA,CAAA,MAAA,C,C,K,G,E,K,I,I,C,E;YAIA;QACA;QAEA;YACA,IAAA,CAAA,QAAA,GAAA;YACA,IAAA,CAAA,gBAAA;QACA;QAEA,MAAA;YACA,IAAA,CAAA,QAAA,GAAA;YACA,MAAA,CAAA,GAAA,oCAAA,AAAA,EAAA,iBAAA,CACA,IAAA,CAAA,qBAAA,EACA,IAAA,CAAA,iBAAA;YAGA,IAAA,CAAA,YAAA;QACA;QAEA;YACA,CAAA,GAAA,sBAAA,AAAA,EAAA,KAAA,CAAA;QACA;IACA;IACA,OAAA;QACA,uBAAA;YACA,IAAA,CAAA,gBAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;;;AClJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA8B,MAAM;IAClD,OAAO,eAAe,GAAG,QAAQ,oBAA8B,eAAe;IAC9E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA2B,OAAO;IAChE,QAAQ,oBAA4B,OAAO,CAAC;IAC5C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,0B,A;I;I,O;Q,Y,C;Q,S;Y,M;Y,S;Q;Q,U;Y,M;Y,S;Q;I;I,S;Q,e,G;Y,I,C,K,C,O;Q;Q,Q,Q,E,U,E,S;Y,I,O;gB,U;gB,M;Y;Y,I,C,K,C,U;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA0B,MAAM;IAC9C,OAAO,eAAe,GAAG,QAAQ,oBAA0B,eAAe;IAC1E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAuB,OAAO;IAC5D,QAAQ,oBAAwB,OAAO,CAAC;IACxC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,M;Y,M;Q;I;I,S;Q,U,O;Y,I,C,I,G;Y,I,W,I,C,I,C,I,G,M,G;gB,I,I,C,Q,E,0C;gB,I,C,K,C,O;oB,U,I,C,Q;oB,O,I,C,I;gB;qB,I,C,K,C,O;oB,U,I,C,I;gB;;Y,I,C,I,G;Q;Q;Y,I,C,I,G,C,I,C,I;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a;Y,U;Y,Q,I,I;Q;I,G;Q,C,I,Q,G,G,S;Y,O;gB,W;gB,S;gB,S;Y;Y,I;gB,S,S,M;oB,O,e;oB,O,I,a,C,K,C,M;gB;Y;Q,G;Y,I,E,C;S,I,I,E;Q,I,E,C;Q,I,Q,G,G,S;Y,O;gB,S;gB,Q;gB,Q;gB,S;gB,S;Y;Y,I;gB,S,S,M;oB,O,e;oB,O,I,a,C,K,C,M;gB;Y;Q,G;Y,G,U;gB,I,E,C;a;S,E,K,I,E;Q,I,E,C;Q,G,Y;Y,M;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,Y;wB,a;oB,G;wB,G,S;4B,I,E,C,I,E,C,I,Q,G,kB;yB;wB,I,E,C;wB,G,Y;4B,O;gC,O,I,I;gC,U,S,G;oC,I,I,G;gC;gC,Y;4B;wB;qB,E;iB,E;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,G,K;wB,a;wB,I;4B,S,S,M;gC,O,I,Q,C;4B;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,K;wB,a;wB,I;4B,S,S,M;gC,O,I,Q,C;4B;wB;oB,G;wB,I,E,C;qB;iB;a;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,c;Q,a;I,G;Q,I,U,I,I,U,C,M,G,I,G,U;Y,a;Y,O;gB,U;gB,Q;gB,Q;Y;Q,G,I,E,C,I,U,E,S,I,E,K;Y,O,G,gB;gB,K;gB,O;oB,gB;oB,e;oB,Y;oB,a;gB;Y,G;gB,G,e;oB,O;wB,Q;oB;oB,M;gB,G;oB,G,uB;wB,G,qB;4B,I,E,C,I,E,C,K,I;yB;qB,E;oB,I,E,C;oB,I,Q,G,G,sB;wB,G,kB;4B,O;gC,Y,K,I;4B;4B,I;gC,O,I,a;4B;wB;qB,E,K,I,E;oB,I,E,C;oB,I,Q,G,G,sB;wB,G,S;4B,O;gC,Q;gC,Q;gC,S;gC,S;gC,S;4B;4B,I;gC,S,S,M;oC,O,e;oC,O,I,M,C,M;gC;4B;wB,G;4B,G,U;gC,I,E,C;6B;yB,E;qB,E,K,I,E;iB,E;gB,I,E,C;gB,I,E,C,K,U,E,S,O,E,Q;oB,O,G,e;wB,K;oB,G;wB,G,sB;4B,G,c;gC,O;oC,Y,C,I,Q;oC,S;gC;gC,O;oC,O,Q,I;oC,U,S,G;wC,I,I,C,S,Q;oC;oC,Y;gC;4B;yB,E;wB,I,E,C;wB,G,uB;4B,G,qB;gC,I,E,C,I,E,C,Q,I;6B;yB,E;wB,I,E,C;wB,I,Q,G,G,sB;4B,G,S;gC,O;oC,Q;oC,Q;oC,S;oC,S;oC,S;gC;gC,I;oC,S,S,M;wC,O,I,M,C,M,O;oC;gC;4B,G;gC,G,U;oC,I,E,C;iC;6B,E;yB,E,K,I,E;qB,E;gB;a,E;Q,I,K,I,E;Q,I,E,C;Q,I,U,I,I,U,C,M,K,I,G,O;Y,a;Q,G;Y,I,E,C,W,I,E,C,I,O,I;S,I,I,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,A,I,iB,G,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,c;oB,I,E,C,I,E,C,I,iB,C,I;iB;gB,I,E,C;gB,G,Q;oB,I,E,C,I,E,C,I,iB,C,I;iB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,I,Q,G,G,O;oB,a;gB,G;oB,G,S;wB,O;4B,W;4B,S;wB;wB,I;4B,S,I,I;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,S;wB,O;4B,W;4B,S;wB;wB,I;4B,S,I,M;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,kB;wB,I;4B,O,I,oB;wB;oB;iB,E,K,G,O;oB,a;gB,G;oB,G,S;wB,O;4B,W;4B,S;wB;wB,I;4B,S,I,c;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,I,qB,K,I,oB,G,G,S;wB,O;4B,W;4B,S;wB;wB,I;4B,S,I,gB;wB;oB,G;wB,I,E,C;qB,I,I,E;oB,I,E,C;oB,I,qB,K,I,oB,G,G,S;wB,O;4B,W;4B,S;wB;wB,I;4B,S,I,mB;wB;oB,G;wB,G,U;4B,I,E,C;yB;wB,I,E,C;qB,E,K,I,E;iB,E;a;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,gB;gB,a;gB,O;oB,c,I,iB,C,U;oB,Y,I,Q;oB,W;gB;gB,I;oB,O,I,U;oB,U,I,U;gB;Y;S,E;K,I,I,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,c;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,iB;gB,O;oB,gB;oB,Y;oB,a;gB;Y,G;gB,G,wB;oB,a;gB,G;oB,G,W;wB,a;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,W;wB,a;oB,G;wB,I,E,C;qB;iB,E;gB,I,E,C;gB,G,yB;oB,a;gB,G;oB,I,I,C,a,G,G,e;wB,O;4B,S;4B,a;4B,Y,C,I,I,C,a;4B,Q;wB;wB,I;4B,U,I,mB;wB;oB,K,I,E;oB,I,E,C;oB,I,I,C,gB,G,G,e;wB,O;4B,S;4B,a;4B,Y,C,I,I,C,gB;4B,Q;wB;wB,I;4B,U,I,W;wB;oB,K,I,E;oB,I,E,C;oB,G,e;wB,O;4B,S;4B,a;4B,Q;wB;wB,I;4B,U,I,c;wB;oB;iB,E;a,E;S,E;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,S;gB,O;oB,W;oB,S;gB;gB,I;oB,S,S,M;wB,O,e;wB,O,I,U,C,K,C,M;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,S;gB,O;oB,W;oB,S;gB;gB,I;oB,S,S,M;wB,O,e;wB,O,I,U,C,K,C,M;oB;gB;Y,G;gB,I,E,C;a;S,E;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,e;oB,O;wB,e;wB,Q,I,I,C,U;wB,S,I,I,C,gB;oB;oB,I;wB,U,I,c;oB;gB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,G,e;oB,O;wB,e;wB,Q,I,I,C,M;wB,S,I,I,C,a;oB;oB,I;wB,U,I,W;oB;gB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,G,e;oB,O;wB,e;wB,Q,I,I,C,c;wB,S,I,I,C,qB;oB;oB,I;wB,U,I,mB;oB;gB;a,E;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,C,I,I,C,qB,G,G,O;gB,a;Y,G;gB,I,E,C;a,I,G,2B;gB,O;oB,yB,I,I,C,qB;oB,wB,I,oB;gB;gB,I;oB,kB,I,W;gB;Y;S,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AHJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AMJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAuC,MAAM;IAC3D,OAAO,eAAe,GAAG,QAAQ,oBAAuC,eAAe;IACvF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAoC,OAAO;IACzE,QAAQ,mBAAqC,OAAO,CAAC;IACrD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,Y;Q,2B,C,G,iC,A;I;I,O;Q,sB,C;I;I;Q,O,C;I;I,S,C;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,c;Q,a;I,G;Q,I,oB,G,G,2B;Y,a;Y,O;gB,yB,I,oB;gB,wB,I,oB;Y;Q,K,G,O;Y,a;Q,G;Y,I,E,C;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,c;Q,a;Q,a;Y,Y;Q;I,G;Q,G,W;Y,a;Y,O;gB,gB;gB,iB,I,Y,G,mB;Y;Y,I;gB,c,I,S;Y;Q,G;Y,G,U;gB,O;oB,M;oB,Y;oB,W;gB;Y;Y,I,E,C;Y,G,U;gB,O;oB,M;oB,Y;oB,W;gB;Y;S,E;Q,I,E,C;Q,G,c;Y,a;Q,G;Y,I,Y,K,I,G,0B;gB,a;gB,O;oB,Y,I,Q;oB,Q,I,I;oB,wB,I,oB;gB;gB,I;oB,e,I,uB;gB;Y,K,I,E;Y,I,E,C;Y,I,Y,K,I,G,kC;gB,a;gB,O;oB,wB,I,oB;gB;Y,K,I,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;APJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AQJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAwB,MAAM;IAC5C,OAAO,eAAe,GAAG,QAAQ,oBAAwB,eAAe;IACxE,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAqB,OAAO;IAC1D,QAAQ,oBAAsB,OAAO,CAAC;IACtC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,sB,C,G,oC,A;Q,0B,C,G,uC,A;Q,kB,C,G,gC,A;I;I;Q,I,C,W,G,C,G,sB,A;Q,O;Y,Q;Y,e;Y,O;Y,Q;Y,O;Y,M;Y,gB;Y,M,O,M,C,C,G,C,G,0B,A;Y,c;gB,S;oB,Y;oB,S;gB;gB,U;oB,Y;oB,S;gB;gB,O;oB,Y;oB,S;gB;Y;Q;I;I,S;Q,Q,M;Y,I,C,I,G,O,I;Y,I,C,I,C,K,G,O,K;Q;Q,W;Q;Y,I,C,a,G;Q;Q,Y,I;Y,I,S,U,I,C,a,G;iB,I,S,S;gB,M,c,I,C,iB;gB,M,e,I,C,yB,C,I,C,I,C,Q;gB,M,Y,I,C,yB,C,I,C,I,C,K;gB,I,C,e,C,gB,C,W;oB,I,C,c,G;oB,I,C,a,G;gB,O,I,C,c,G;Y;Q;Q,Y,I;Y,I,C,I,G;Q,kC;Q,+B;Q,iC;Q,I;Q;Q;Y,I,I,C,I,C,O,C,M,E,O,I,C,I,C,O,C,I,C,I,G,M,G;iB,OAuEf,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,GAAA,MAAA,GAAA,KACA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA,IAAA,GAAA,MAAA,GAAA;QAGA;Q,2B,I;YAGA,wCAAA;YACA,uBAAA;YACA,gBAAA;YACA,iBAAA;YACA,qBAAA;YACA,gBAAA;YAEA,IAAA,KAAA,QAAA,KAAA,IAAA,CAAA,WAAA,CAAA,SAAA,EACA,OAAA,KAAA,KAAA,CAAA,QAAA,GAAA,IAAA,GAAA,MAAA,GAAA;iB,I,K,Q,K,I,C,W,C,I,EAEA,OAAA,SAAA,KAAA,KAAA,KAAA;iBAEA,IAAA,KAAA,QAAA,KAAA,IAAA,CAAA,WAAA,CAAA,KAAA,EACA,OAAA,KAAA,UAAA,CAAA,IAAA,GAAA,MAAA,GAAA;QAEA;IASA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;;;ACzHA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAoC,MAAM;IACxD,OAAO,eAAe,GAAG,QAAQ,oBAAoC,eAAe;IACpF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAiC,OAAO;IACtE,QAAQ,oBAAkC,OAAO,CAAC;IAClD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;;A,I,gB;I,M;I,O;Q,M,C;Q,M,C;I;I,Y;Q,e,C,G,0B,A;Q,gB,C,G,2B,A;Q,a,C,G,wB,A;I;I;Q,O;Y,U;Q;I;I,S;Q;Y,I,C,Q,G;Y,W;gB,I,C,Q,G;Y,G;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA0B,MAAM;IAC9C,OAAO,eAAe,GAAG,QAAQ,oBAA0B,eAAe;IAC1E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAuB,OAAO;IAC5D,QAAQ,oBAAwB,OAAO,CAAC;IACxC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;A;;A,I,gB;I,M;I,O;Q;Q;K;I;Q,O;Y,U,E;Q;I;I;Q,I,C,W;I;I,S;Q,M;Y,I,C,Q,G,M,C,G,6D,A,E,gB,C,I,C,I;Q;Q,M,Y,E;Y,M,S,M,I,C,gB,C;Y,I,U,O,O,E,I,C,S,C,W,O,O,C,G;Y,I,U,O,Q,E,I,C,S,C,Y,O,Q,C,G;Y,I,U,O,K,E,I,C,S,C,S,O,K,C,G;Q;Q;Y,I,C,I,C,O,C,I,G;Y,I,C,I,C,O,C,E,G;Q;Q,M,kB,E;Y,M,U,C,G,+C,A,E,W,C;Y,I,S;gB,I,O,Q,I,C,qB;gB,I,O,S,a,O,I,Q,C;oB,K,I,C,C;wB,Q;oB;gB;Y;Y;Q;Q,W,c,E,K;Y,K,M,O,O,I,C,O,I,I,C,I,C,e,C,c,C;gB,I,Q,S,I,C,I,C,e,C,I,G,I,C,S,C,K,C,I;qB,I,C,I,C,e,C,I,G,K,C,I;;Q;Q,W,W;Y,I,Q,Y,K,C,I,O;YAwDf,IAAA,OAAA,OAAA,IAAA,OAAA,KAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA;Y,O;QAGA;I;IAEA,OAAA;QACA;YACA,IAAA,CAAA,WAAA;YACA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,GAAA;YACA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,GAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,gB;Y,I,E,C;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,Y;oB,a;oB,O;wB,S;oB;oB,I;wB,U,I,W;oB;oB,O;wB,O,I,I,C,O,C,M;wB,U,S,G;4B,I,I,C,I,I,C,O,E,U;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S;oB;oB,I;wB,U,I,W;oB;oB,O;wB,O,I,I,C,O,C,M;wB,U,S,G;4B,I,I,C,I,I,C,O,E,U;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;a,E;Y,I,E,C;Y,I,I,C,O,C,M,G,G,O;gB,a;Y,G;gB,G,Y;oB,G,S;wB,I,E,C;qB;oB,I,E,C;oB,G,Y;wB,O;4B,O,I,I,C,O,C,I;4B,U,S,G;gC,I,I,C,I,I,C,O,E,Q;4B;4B,Y;wB;oB;iB,E;a,E,K,G,O;gB,a;Y,G;gB,G,Y;oB,G,S;wB,O;4B,O;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,a;wB,O;4B,Q;4B,M;wB;wB,I;4B,e,I,U;wB;wB,O;4B,O,I,I,C,O,C,E;4B,U,S,G;gC,I,I,C,I,I,C,O,E,M;4B;4B,Y;wB;oB,G;wB,I,Q,C,M,K,I,G,a;4B,O;gC,Y;4B;wB,G;4B,I,E,C;yB,I,I,E;wB,I,E,C;wB,I,E,C,I,Q,E,S,I,E,K;4B,O,G,a;gC,K;gC,O;oC,S,K,E;gC;4B,G;gC,I,E,C,I,E,C,K,I;6B;wB;qB,E;iB,E;a,E;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAtFA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA2B,MAAM;IAC/C,OAAO,eAAe,GAAG,QAAQ,oBAA2B,eAAe;IAC3E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,mBAAwB,OAAO;IAC7D,QAAQ,oBAAyB,OAAO,CAAC;IACzC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,uB,C,G,oC,A;Q,kB,C,G,+B,A;Q,yB,C,G,qC,A;I;I,O;Q,M,C;I;I;Q,I,C,W,G,C,G,sB,A;Q,O,C;I;I,S;Q,iB;Q,uE;Q,oC;Q,0C;Q,0C;Q,Q;Q,Q;Q,I;Q,mB,G;Y,I,C,I,C,Q,C,Q,G,I,Q;Y,I,C,I,C,Q,C,I,G,I,I;Y,I,C,I,C,Q,C,K,G,I,K;Q;Q,c,G;Y,I,C,I,C,Q,C,S,G,I,S;Y,I,C,I,C,Q,C,K,G,I,K;Q;Q,e,G;Y,I,C,I,C,Q,C,U,G,I,I;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;kBChBA,OAAO,MAAM,CAAC;IAC3B,WAAW;IACX,MAAM;IACN,OAAO;AACT;;;;;ACHA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAoC,MAAM;IACxD,OAAO,eAAe,GAAG,QAAQ,oBAAoC,eAAe;IACpF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAiC,OAAO;IACtE,QAAQ,oBAAkC,OAAO,CAAC;IAClD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q,W,C;Q,e,C;Q,Y,C;Q,e,C;I;I;Q,O;Y,M;Y,U;Y,O;Y,U;Q;I;I,S;Q;Y,C,G,6D,A,E,S,C,6B;gB,U,C;oB,I,C,K,G;oB,I,C,Q,G;oB,2B;oB,I,C,I,G;oB,I,C,Q;gB;Y;Q;Q;Y,I,C,K,G;Y,I,C,Q,G;Q;Q;Y,I,I,C,Q,E,O,I,C,K;iB,I,C,I,C,Q,I,I,C,I,C,I,G,M,G,G;gB,I,I,C,Q,E,O,I,O,C,E,O,M,C,I,C,I,C,I,I,C,E;qB,O,I,O,C,C,E,O,M,C,I,C,I,C,I,I,C,C,E;Y,O,O;Q;QAoCf;Y,I,C,K,C,Y;gBAEA,MAAA,IAAA,CAAA,IAAA;gBACA,UAAA,IAAA,CAAA,QAAA;gBACA,OAAA,IAAA,CAAA,QAAA;YACA;QACA;IACA;IACA,OAAA;QACA;YACA,IAAA,CAAA,QAAA;QACA;QACA;YACA,IAAA,IAAA,CAAA,SAAA,KAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA,SAAA;QACA;QAEA;YACA,IAAA,IAAA,CAAA,aAAA,KAAA,IAAA,CAAA,QAAA,EACA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,aAAA;QAEA;QACA;YACA,IAAA,IAAA,CAAA,UAAA,KAAA,IAAA,CAAA,KAAA,EACA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,UAAA;QAEA;Q;YAEA,IAAA,IAAA,CAAA,aAAA,KAAA,IAAA,CAAA,QAAA,EACA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,aAAA;QAEA;I;AAEA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Y;gB,O;oB,gB;gB;Y,G;gB,G,S;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,O;wB,Y,I,Q;oB;oB,I;wB,Q,I,Q;oB;oB,O;wB,O,I,I;wB,U,S,G;4B,I,I,G;wB;wB,Y;oB;gB;gB,I,E,C;gB,I,Q,G,G,Q;oB,a;gB,G;oB,I,E,C;oB,G,K;wB,I;4B,S,I,W;wB;oB,G;wB,I,E,C;qB;iB,I,I,E;a,E;Y,I,E,C;Y,G,e;gB,a;gB,O;oB,Y,I,Q;gB;gB,O;oB,O,I,Q;oB,U,S,G;wB,I,Q,G;oB;oB,Y;gB;Y,G;gB,I,E,C;a;S,E;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,a;gB,a;gB,I;oB,S,I,U;gB;Y,G;gB,I,E,C;a;S,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAtFA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA+B,MAAM;IACnD,OAAO,eAAe,GAAG,QAAQ,oBAA+B,eAAe;IAC/E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA4B,OAAO;IACjE,QAAQ,oBAA6B,OAAO,CAAC;IAC7C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q,gB,C;Q,e,C;I;I;Q,O;Y,W;Y,U;Q;I;I,S;Q;Y,I,C,K,C,Y;gB,W,I,C,S;gB,O,I,C,Q;Y;Q;I;I,O;Q;Y,I,I,C,c,K,I,C,S,E,I,C,S,G,I,C,c;Q;Q;Y,I,I,C,a,K,I,C,Q,E,I,C,Q,G,I,C,a;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Y;gB,G,S;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,I;wB,Q,I,Q;oB;oB,O;wB,O,I,S;wB,U,S,G;4B,I,S,G;wB;wB,Y;oB;gB;a,E;S,E;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,Y;gB,G,S;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,O;wB,Q;wB,O;oB;oB,I;wB,Q,I,Q;oB;oB,O;wB,O,I,Q;wB,U,S,G;4B,I,Q,G;wB;wB,Y;oB;gB;a,E;S,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,mBAAqC,MAAM;IACzD,OAAO,eAAe,GAAG,QAAQ,mBAAqC,eAAe;IACrF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAkC,OAAO;IACvE,QAAQ,oBAAmC,OAAO,CAAC;IACnD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q,W,C;I;I;Q,O;Y,M;Q;I;I,S;Q;Y,I,C,K,C,Y;gB,M,I,C,I;Y;Q;I;I,O;Q;Y,I,I,C,S,K,I,C,I,E,I,C,I,G,I,C,S;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Y;gB,O;oB,gB;gB;Y,G;gB,G,S;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,I;wB,Q,I,Q;oB;oB,O;wB,O,I,I;wB,U,S,G;4B,I,I,G;wB;wB,Y;oB;gB;a,E;S,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,gB;Y,I,E,C;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,gB;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S,I,W,C,S;oB;oB,O;wB,O,I,I,C,Q,C,Q;wB,U,S,G;4B,I,I,C,I,I,C,Q,E,Y;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S,I,W,C,I;oB;oB,O;wB,O,I,I,C,Q,C,Q;wB,U,S,G;4B,I,I,C,I,I,C,Q,E,Y;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S,I,W,C,K;oB;oB,O;wB,O,I,I,C,Q,C,Q;wB,U,S,G;4B,I,I,C,I,I,C,Q,E,Y;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,I,I,C,Q,C,Q,K,I,W,C,S,G,G,uB;oB,O;wB,a,I,I,C,Q,C,I;wB,iB,I,I,C,Q,C,Q;wB,c,I,I,C,Q,C,K;wB,iB,I,I,C,Q,C,Q;oB;oB,I;wB,Y,I,iB;oB;gB,K,A,I,I,C,Q,C,Q,K,I,W,C,I,G,G,kB;oB,O;wB,kB,I,I,C,Q,C,S;wB,iB,I,I,C,Q,C,Q;oB;oB,I;wB,Y,I,Y;oB;gB,K,A,I,I,C,Q,C,Q,K,I,W,C,K,G,G,yB;oB,O;wB,a,I,I,C,Q,C,U;oB;oB,I;wB,Y,I,a;oB;gB,K,I,E;a,E;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AJJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AKJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAwB,MAAM;IAC5C,OAAO,eAAe,GAAG,QAAQ,oBAAwB,eAAe;IACxE,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAqB,OAAO;IAC1D,QAAQ,oBAAsB,OAAO,CAAC;IACtC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,uB,C,G,oC,A;Q,kB,C,G,+B,A;Q,yB,C,G,qC,A;I;I,O;Q,M,C;I;I;Q,I,C,W,G,C,G,sB,A;Q,O,C;I;I,S;Q,iB;Q,uE;Q,oC;Q,uC;Q,uC;Q,Q;Q,Q;Q,I;Q,mB,G;Y,I,C,I,C,K,C,Q,G,I,Q;Y,I,C,I,C,K,C,I,G,I,I;Y,I,C,I,C,K,C,K,G,I,K;Q;Q,c,G;Y,I,C,I,C,K,C,S,G,I,S;Y,I,C,I,C,K,C,K,G,I,K;Q;Q,e,G;Y,I,C,I,C,K,C,U,G,I,I;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,gB;Y,I,E,C;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,gB;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S,I,W,C,S;oB;oB,O;wB,O,I,I,C,K,C,Q;wB,U,S,G;4B,I,I,C,I,I,C,K,E,Y;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S,I,W,C,I;oB;oB,O;wB,O,I,I,C,K,C,Q;wB,U,S,G;4B,I,I,C,I,I,C,K,E,Y;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,a;oB,O;wB,S,I,W,C,K;oB;oB,O;wB,O,I,I,C,K,C,Q;wB,U,S,G;4B,I,I,C,I,I,C,K,E,Y;wB;wB,Y;oB;gB,G;oB,I,E,C;iB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,I,I,C,K,C,Q,K,I,W,C,S,G,G,uB;oB,O;wB,a,I,I,C,K,C,I;wB,iB,I,I,C,K,C,Q;wB,c,I,I,C,K,C,K;wB,iB,I,I,C,K,C,Q;oB;oB,I;wB,Y,I,iB;oB;gB,K,A,I,I,C,K,C,Q,K,I,W,C,I,G,G,kB;oB,O;wB,kB,I,I,C,K,C,S;wB,iB,I,I,C,K,C,Q;oB;oB,I;wB,Y,I,Y;oB;gB,K,A,I,I,C,K,C,Q,K,I,W,C,K,G,G,yB;oB,O;wB,a,I,I,C,K,C,U;oB;oB,I;wB,Y,I,a;oB;gB,K,I,E;a,E;S;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,I,Q,G,G,O;Y,a;Q,G;Y,G,e;gB,O;oB,Q,I,I;oB,Q,I,I;gB;gB,I;oB,Q,I,O;gB;Y;Y,I,E,C;Y,G,gB;gB,O;oB,Q,I,I;gB;Y;Y,I,E,C;Y,G,a;gB,O;oB,Q,I,I;gB;Y;S,E,K,G,O;Y,a;Q;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;APJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AQJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAuC,MAAM;IAC3D,OAAO,eAAe,GAAG,QAAQ,oBAAuC,eAAe;IACvF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAoC,OAAO;IACzE,QAAQ,mBAAqC,OAAO,CAAC;IACrD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;A;;A;A,I,gB;I,M;I,O;Q,M,C;Q,M,C;Q,O,C;I;I;Q,I,C,M,G;Y,S;Y,Q;Y,S;Y,O;Q;Q,O;Y,U;Y,c;Y,U,I,C,M,C,M;Q;I;I,S;Q,M;Y,I,C,Q,G,I,C,M,C,O;Y,M,mB,I,C,I,C,O,C,I,C,I,G,M,G;Y,M,oB,I,C,I,C,Q,C,K,C,Q,G,M,G,K,I,C,I,C,Q,C,I,C,I,G,M,G;Y,M,iB,I,C,I,C,K,C,K,C,Q,G,M,G,K,I,C,I,C,K,C,I,C,I,G,M,G;Y,iE;Y,I,C,Y,G,M,I,C,Y,C,I,C,I,C,Q,E,I,C,I,C,K;Y,I,C,Q,G;Y,W;Y,yB;Y,I;Y,2C;Y,I,C,Q,G,I,C,M,C,M;Q;Q,M;Y,I,C,Q,G,I,C,M,C,O;Y,I,Y,M,I,C,U;Y,I,C,W,C,W,I,C,C;gB,I,C,iB,C,W,I,C,I;gB,I,C,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AAO;IACT;AACF;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,I,Q,K,I,M,C,M,G,G,O;Y,a;Q,G;Y,G,a;gB,a;gB,O;oB,Y,I,K;gB;gB,I;oB,S,I,gB;gB;Y,G;gB,I,E,C;a;S,E,K,A,I,Q,K,I,M,C,O,G,G,O;Y,a;Q,G;Y,G,uB;gB,O;oB,W;gB;Y;S,E,K,A,I,Q,K,I,M,C,O,G,G,O;Y,a;Q,G;Y,G,W;gB,a;Y,G;gB,I,E,C;a;S,E,K,A,I,Q,K,I,M,C,K,G,G,O;Y,a;Q,G;Y,G,W;gB,a;Y,G;gB,I,E,C;a;S,E,K,I,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AD3IA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAgC,MAAM;IACpD,OAAO,eAAe,GAAG,QAAQ,oBAAgC,eAAe;IAChF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA6B,OAAO;IAClE,QAAQ,mBAA8B,OAAO,CAAC;IAC9C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;A,I,gB;I,M;I,O;Q,M,C;Q,M,C;I;I;Q,O,C;I;I,S;Q;Y,M,iB,C,G,uD,A,E,S,C,c;Y,I,I,C,I,K,kB,I,C,I,C,K,C,M,K,G;gB,I,I,C,I,C,K,C,M,K,G,I,C,K,C,c;gB,I,C,e;Y,O,O,K,C,C,Y,E,e,I,E,I,C,I,C,K,C;Q;Q;Y,I,C,I,C,K,G,E;Y,I,C,K,C;Q;Q,M;Y,M,qB,O,M,C,W,C,M,C,qB;Y,M,Y,M,I,C,Y,C;Y,M,gB,U,G,C,O;gB,O,I,C,kB,C;Y;Y,I,iB,M,Q,G,C;Y,K,M,Y,e;gB,M,gB,I,C,U,C;gB,I,C,I,C,K,G;uB,I,C,I,C,K;uB;iB;Y;Q;Q,c,U;Y,M,Q,W,G,C,C;gB,O,C,G,yD,A,E,Y,C,G,K,E,G,S;Y;Y,O,Q,G,C;Q;QAyCf,oBAAA,EAAA;Y,I,Q,G,S,C,G,C,O;gBAEA,IAAA,OAAA,MAAA,OAAA,MAAA,CAAA,gBAAA,CAAA,eAAA,CACA,MACA,GAAA,KAAA;gBAEA,OAAA,KAAA,GAAA;YACA;YAEA,OAAA,QAAA,GAAA,CAAA;QACA;QAEA,YAAA,KAAA;YACA,OAAA,MAAA,MAAA,CAAA,CAAA;gB,M,Q,I,C,I,C,K,C,I,C,C,I,E,E,K,G,E;gBAEA,IAAA,OAAA,OAAA;gBACA,OAAA;YACA;Q;IAEA;IACA,UAAA;QACA;YACA,OAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,GAAA;QACA;I;AAEA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,I,E,C,2B,I,E,C,I,I,G,I,I,G,U;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,I,E,C,W,I,E,C,I,K,I;S;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,a;gB,I;oB,S,I,Y;gB;Y,G;gB,G,W;oB,I,E,C;iB;gB,I,E,C;gB,G,c;oB,O;wB,Y;oB;gB,G;oB,I,E,C;iB;a,E;Y,I,E,C;Y,G,a;gB,I;oB,S,I,gB;gB;Y,G;gB,G,W;oB,I,E,C;iB;gB,I,E,C;gB,G,c;oB,O;wB,Y;oB;gB,G;oB,I,E,C;iB;a,E;S,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AApFA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACLA;;kBAEe;IACb,OAAO,EAAE;IACT,SAAS;QACP,QAAQ;QACR,IAAI;QACJ,MAAM;IACR;IACA,UAAU;QACR,UAAU,CAAA,GAAA,oBAAW,AAAD,EAAE,SAAS;QAC/B,UAAU;QACV,MAAM;QACN,OAAO;QACP,WAAW;QACX,OAAO;QACP,YAAY;IACd;IACA,OAAO;QACL,UAAU,CAAA,GAAA,oBAAW,AAAD,EAAE,SAAS;QAC/B,UAAU;QACV,MAAM;QACN,OAAO;QACP,WAAW;QACX,OAAO;QACP,YAAY;IACd;AACF;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,e;Y,a;Y,O;gB,e;gB,qB;Y;Y,I;gB,c,I,U;Y;Q,G;Y,G,W;gB,O;oB,M;oB,Y;oB,kB;gB;Y,G;gB,G,c;oB,a;gB,G;oB,G,kB;wB,O;4B,Q,I,I;4B,Q,I,I;wB;wB,I;4B,c,I,U;wB;oB;iB,E;a,E;Y,I,E,C;Y,G,W;gB,O;oB,M;oB,Y;oB,kB;oB,Y,I,a;gB;Y,G;gB,G,c;oB,a;gB,G;oB,G,sB;wB,O;4B,Q,I,I;4B,Q,I,I;wB;oB;iB,E;a,E;Y,I,E,C;Y,G,W;gB,O;oB,M;oB,Y;oB,kB;gB;Y,G;gB,G,c;oB,a;gB,G;oB,G,0B;wB,O;4B,Q,I,I;4B,Q,I,I;4B,S,I,c;wB;oB;iB,E;a,E;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AZ1BA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AaJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA+B,MAAM;IACnD,OAAO,eAAe,GAAG,QAAQ,oBAA+B,eAAe;IAC/E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA4B,OAAO;IACjE,QAAQ,oBAA6B,OAAO,CAAC;IAC7C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;A,gF;;;A;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,c,C,G,sC,A;Q,iB,C,G,iC,A;Q,gB,C,G,wC,A;I;I,O;Q;K;I;Q,O;Y,Y;Y,c;Y,M,E;Y,U;Y,c;Y,mB,E;Y,a;Q;I;I,S;Q,M,Q,M;Y,I,C,Y,G,O,Y;Y,I,C,Q,G,O,Q;Y,I,C,iB,G,M,C,G,yB,A,E,mB;Y,I,C,W,G,M,C,G,yB,A,E,uB;Q,yE;Q;Q,M;Y,I,C,W,G,M,C,G,yB,A,E,uB;Q;Q,M;Y,I,C,iB,G,M,C,G,yB,A,E,mB;Y,I,C,W,G,M,C,G,yB,A,E,uB;Q;Q,S,M;Y,gB;Y,wD;Y,I;Y,I,C,Q;Y,I,C,U,G;Q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MAAM;IAC1D,OAAO,eAAe,GAAG,QAAQ,oBAAsC,eAAe;IACtF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAmC,OAAO;IACxE,QAAQ,oBAAoC,OAAO,CAAC;IACpD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;A,mF;;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,0B,A;Q,0B,C,G,8B,A;I;I,O;Q,M;Y,S,I;Q;Q,sB,C;I;I;Q,I,C,Q;Q,O;Y,U;Y,uB;Y,mB;gB,M;gB,Y,E;Y;Q;I;I;I,uE;I;I,S;Q,M,gB,I;Y,I,C,Q,G,C,I,C,Q;Y,I,C,I,C,Q,I,M;gB,M,C,G,yB,A,E,iB,C,I,C,qB,E,I,C,iB;gB,I,C,K,C;Y,O,I,C,I,C,Q,I,C,M,6C;Y,I,C,iB,G,K,K,C,K,S,C,I,C,Q;Q;Q,M;Y,M,C,G,yB,A,E,yB,C,I,C,qB;Y,I,C,K,C;Q;Q;Y,I,O,I,C,qB,K,a,O;Y,I,I,C,oB,I,I,C,oB,C,E,K,I,C,qB,E,O;Y,O;Q;Q,Y,G;Y,I,I,Q,I,I,K,E;gB,I,Q,I,C,iB,C,U,C,I,C,C;oB,O,G,I,K,I,Q;gB;gB,I,O;oB,I,Y,M,U,C,I,C,C,K,G,I,K,I,K;oB,I,O,c,a,M,U,C,I,C;wB,M;wB,M,I,K;wB,I,K,G;oB;gB;Y;Q;Q,Y,G;Y,I,O,I,I,K,a,I,C,iB,C,U,G,I,C,iB,C,U,C,M,C,C;gB,O,G,E,K,I,Q,C,E;Y;iB;gB,I,Q,I,C,iB,C,U,C,I,C,C;oB,O,G,E,K,I,Q,C,E;gB;gB,I,O,M,U,G,M,U,C,M,C,C,K,G,E,K,I,I,C,E;Y;Q;Q,a,G;Y,I,Q,I,C,iB,C,U,C,I,C,C,K,G,I,K,I,Q;Y,I,C,O,I,C,iB,C,U,C,I,C;gB,I,K,G;gB,M,I,Q;gB,Y,E;Y;Q;I;I,O;Q;Y,I,Q,I,C,I,C,I,C,C,K,G,E,K,I,C,qB;Y,I,C,iB,G,K,K,C,K,S,C;Y,I,C,Q,G,K,K,C,K,S,C;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;ACff,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA8B,MAAM;IAClD,OAAO,eAAe,GAAG,QAAQ,oBAA8B,eAAe;IAC9E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA2B,OAAO;IAChE,QAAQ,oBAA4B,OAAO,CAAC;IAC5C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,0B,A;I;I,O;Q,Y,C;Q,S;Y,M;Y,S;Q;Q,U;Y,M;Y,S;Q;I;I,S;Q,e,G;Y,I,C,K,C,O;Q;Q,Q,Q,E,U,E,S;Y,I,O;gB,U;gB,M;Y;Y,I,C,K,C,U;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,I,U,I,I,U,C,M,G,I,G,U;Y,a;Y,O;gB,U;gB,Q;gB,Q;Y;Q,G,I,E,C,I,U,E,S,I,E,K;Y,O,G,gB;gB,K;gB,O;oB,gB;oB,e;oB,Y;oB,a;gB;Y,G;gB,G,e;oB,O;wB,Q;oB;oB,M;gB,G;oB,G,uB;wB,G,qB;4B,I,E,C,I,E,C,K,I;yB;qB,E;oB,I,E,C;oB,I,Q,G,G,sB;wB,G,kB;4B,O;gC,Y,K,I;4B;4B,I;gC,O,I,a;4B;wB;qB,E,K,I,E;oB,I,E,C;oB,I,Q,G,G,sB;wB,G,S;4B,O;gC,Q;gC,Q;gC,S;gC,S;gC,S;4B;4B,I;gC,S,S,M;oC,O,e;oC,O,I,M,C,M;gC;4B;wB,G;4B,G,U;gC,I,E,C;6B;yB,E;qB,E,K,I,E;iB,E;gB,I,E,C;gB,I,E,C,K,U,E,S,O,E,Q;oB,O,G,e;wB,K;oB,G;wB,G,sB;4B,G,c;gC,O;oC,Y,C,I,Q;oC,S;gC;gC,O;oC,O,Q,I;oC,U,S,G;wC,I,I,C,S,Q;oC;oC,Y;gC;4B;yB,E;wB,I,E,C;wB,G,uB;4B,G,qB;gC,I,E,C,I,E,C,Q,I;6B;yB,E;wB,I,E,C;wB,I,Q,G,G,sB;4B,G,S;gC,O;oC,Q;oC,Q;oC,S;oC,S;oC,S;gC;gC,I;oC,S,S,M;wC,O,I,M,C,M,O;oC;gC;4B,G;gC,G,U;oC,I,E,C;iC;6B,E;yB,E,K,I,E;qB,E;gB;a,E;Q,I,K,I,E;Q,I,E,C;Q,I,U,I,I,U,C,M,K,I,G,O;Y,a;Q,G;Y,I,E,C,W,I,E,C,I,O,I;S,I,I,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,C,I,Q,G,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,Y;oB,G,S;wB,O;4B,O;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,a;wB,O;4B,Q;4B,M;wB;wB,O;4B,O,I,qB;4B,U,S,G;gC,I,qB,G;4B;4B,Y;wB;oB,G,I,E,C,I,I,E,S,a,E,K;wB,O,G,a;4B,K;4B,O;gC,S,c,E;4B;wB,G;4B,I,E,C,I,E,C,c,I,I;yB;oB,I;iB,E;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,C,I,sB,K,G,S;oB,O;wB,W;wB,Y,C,I,qB;wB,S;oB;oB,I;wB,S,I,yB;oB;gB,G;oB,I,E,C;iB,I,I,E;gB,I,E,C;gB,I,sB,K,G,W;oB,O;wB,S;wB,S;wB,W;wB,Q;oB;gB,G;oB,I,E,C;iB,I,I,E;a,E;S,I,I,E;Q,I,E,C;Q,I,qB,G,G,O;Y,a;Y,O;gB,wB,I,Q;Y;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,I,E,C,I,E,C,I,iB,C,I;iB;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,I,Q,G,G,S;wB,O;4B,O;4B,Q;4B,W;4B,S;4B,S;wB;wB,I;4B,S,S,M;gC,O,I,c,C;4B;wB;oB,G;wB,G,U;4B,I,E,C;yB;qB,E,K,I,E;oB,I,E,C;oB,G,S;wB,O;4B,O;4B,Q;4B,W;4B,S;4B,S;wB;wB,I;4B,S,S,M;gC,O,I,c,C;4B;wB;oB,G;wB,G,U;4B,I,E,C,I,E,C,I,Q,G,U;yB;qB,E;iB,E;a;Y,I,E,C;Y,G,0B;gB,a;gB,O;oB,c,I,iB,C,U;oB,Y,I,Q;oB,W;gB;gB,I;oB,O,I,U;oB,U,I,U;gB;Y;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,I,Q,G,G,kB;oB,a;oB,I;wB,O,I,W;oB;gB,K,I,E;a,E;S,E,K,I,E;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ADJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAiC,MAAM;IACrD,OAAO,eAAe,GAAG,QAAQ,oBAAiC,eAAe;IACjF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA8B,OAAO;IACnE,QAAQ,oBAA+B,OAAO,CAAC;IAC/C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,0B,A;Q,0B,C,G,8B,A;I;I,O;Q,sB,C;I;I;Q,O;Y,mB,C;Q;I;I;Q,I,C,iB,G,O,M,C,C,G,I,C,oB;I;I,S;Q,M;Y,M,C,G,yB,A,E,iB,C,I,C,iB,C,E,E,I,C,iB;Y,I,C,K,C;Q;Q,a,G;Y,I,Q,I,C,iB,C,U,C,I,C,C,K,G,I,K,I,Q;Y,I,C,O,I,C,iB,C,U,C,I,C;gB,I,K,G;gB,M,I,Q;gB,Y,E;Y;Q;Q,Y,G;Y,I,I,Q,I,I,K,E;gB,I,Q,I,C,iB,C,U,C,I,C,C;oB,O,G,I,K,I,Q;gB;gB,I,O;oB,I,Y,M,U,C,I,C,C,K,G,I,K,I,K;oB,I,O,c,a,M,U,C,I,C;wB,M;wB,M,I,K;wB,I,K,G;oB;gB;Y;Q;Q,Y,G;Y,I,O,I,I,K,a,I,C,iB,C,U,G,I,C,iB,C,U,C,M,C,C;gB,O,G,E,K,I,Q,C,E;Y;iB;gB,I,Q,I,C,iB,C,U,C,I,C,C;oBAwDf,OAAA,GAAA,EAAA,KAAA,IAAA,QAAA,CAAA,EAAA;gBACA;gBAEA,IAAA,O,M,U,G,M,U,C,M,CAEA,CAAA,KAAA,GAAA,EAAA,KAAA,IAAA,IAAA,CAAA,EAAA;YAGA;QACA;IACA;IACA,OAAA;QACA;YACA,IAAA,CAAA,iBAAA,GAAA,OAAA,MAAA,CAAA,CAAA,GAAA,IAAA,CAAA,oBAAA;QACA;IACA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,A,I,iB,G,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,O;gB,I,E,C,I,E,C,I,iB,C,I;a;S;Q,I,E,C;Q,G,0B;Y,a;Y,O;gB,c,I,iB,C,U;gB,Y;gB,W;Y;Y,I;gB,O,I,U;gB,U,I,U;Y;Q;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,kB;gB,a;gB,I;oB,O,I,W;gB;Y;Y,I,E,C;Y,G,S;gB,O;oB,W;oB,S;gB;gB,I;oB,S,I,mB;gB;Y,G;gB,G,U;oB,O;wB,Q;oB;gB,G;oB,I,E,C;iB;gB,I,E,C;a,E;S,E;K,E,K,G,O;Q,a;I,G;Q,I,E,C;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AA1FA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAwC,MAAM;IAC5D,OAAO,eAAe,GAAG,QAAQ,oBAAwC,eAAe;IACxF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAqC,OAAO;IAC1E,QAAQ,oBAAsC,OAAO,CAAC;IACtD,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A;;A,I,gB;I,M;I,Y;Q,kB,C,G,0B,A;Q,0B,C,G,8B,A;I;I;Q,O;Y,M;gB,W;gB,Y,E;Y;Q;I;I,S;Q;Y,O,I,C,I,C,S,C,I,G,M,K,K,I,C,I,C,U,C,M,K;Q;Q,e,G;Y,I,I,Q,I,I,K,E;gB,I,Q,I,C,I,C,U,C,I,C,C;oB,O,G,I,K,I,Q;gB;gB,I,O;oB,I,Y,M,U,C,I,C,C,K,G,I,K,I,K;oB,I,O,c,a,M,U,C,I,C;wB,M;wB,M,I,K;wB,I,K,G;oB;gB;Y,O,I,I,Q,E;gB,I,Q,I,C,I,C,U,C,I,C,C,K,G,I,K,I,Q;gB,I,C,O,I,C,I,C,U,C,I,C;oB,I,K,G;oB,M,I,Q;oB,Y,E;gB;Y;Q;Q;Y,C,G,yB,A,E,mB,C,I,C,I,C,S,C,I,I,I,C,I,C,U,E,I,C,C;gB,I,O,Q,a;oB,I,C,I,C,S,G;oB,I,C,I,C,U,G,E;gB;gB,I,C,K,C;Y;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,O;Q,a;I,G;Q,G,O;Y,a;Q,G;Y,G,Y;gB,G,S;oB,I,E,C;iB;gB,I,E,C;gB,G,Y;oB,O;wB,O,I,I,C,S;wB,U,S,G;4B,I,I,C,I,I,E,a;wB;wB,Y;oB;gB;a,E;Y,I,E,C;Y,G,0B;gB,O;oB,c,I,I,C,U;oB,W;gB;gB,I;oB,O,I,a;gB;Y;S,E;Q,I,E,C;Q,G,O;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,kB;oB,I;wB,O,I,a;oB;gB;gB,I,E,C;gB,G,O;oB,a;gB,G;oB,G,a;wB,a;wB,O;4B,S;4B,Y,I,iB;wB;wB,I;4B,S,I,iB;wB;oB,G;wB,G,W;4B,I,E,C;yB;wB,I,E,C;qB,E;iB,E;a,E;S;K;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,a;gB,c;Y;Q,G;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;gB,Y;Y;Q,G;Y,G,W;gB,a;gB,O;oB,gB;gB;gB,I;oB,c,I,S;gB;Y,G;gB,G,U;oB,O;wB,M;wB,Y;wB,W;oB;gB;gB,I,E,C;gB,G,U;oB,O;wB,M;wB,Y;wB,W;oB;gB;gB,I,E,C;gB,G,U;oB,O;wB,M;wB,Y;wB,W;oB;gB;a,E;Y,I,E,C;Y,G,O;gB,a;Y,G;gB,I,Y,K,I,G,iB;oB,O;wB,wB,I,W;oB;oB,I;wB,W,I,W;oB;gB,K,I,E;gB,I,E,C;gB,I,Y,K,I,G,c;oB,O;wB,Q,I,iB;wB,wB,I,W;oB;oB,I;wB,U,I,iB;wB,W,I,W;oB;gB,K,I,E;gB,I,E,C;gB,I,Y,K,I,G,gB;oB,I;wB,W,I,W;oB;gB,K,I,E;a,E;S,E;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ALJA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AMJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,mBAA6C,MAAM;IACjE,OAAO,eAAe,GAAG,QAAQ,mBAA6C,eAAe;IAC7F,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA0C,OAAO;IAC/E,QAAQ,oBAA2C,OAAO,CAAC;IAC3D,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A;;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,M,G,O,M,C;Y,O;Y,S;Y,O;Y,Q;Q;Q,O;Y,U,I,C,M,C,M;Y,Y;Y,M,E;Y,U,I;Y,U,K;Q;I;I,S;Q,M,Q,M;Y,I,C,Q,G,I,C,M,C,O;Y,I,C,Q,G,O,Q;Y,I,C,Y,C,O,S;Y,M,Y,I,C,Y,C,O,S;Y,M,O,I,C,e,C;Y,I,C,I,G,M,I,C,wB,C,M,O,S;Y,I,I,C,I,E,I,C,Q,G,I,C,M,C,M;iB,I,C,Q,G,I,C,M,C,K;Q,kE;Q,8D;Q;Q,M,S,M;Y,I,C,Q,G,I,C,M,C,O;Y,I,U,I,C,I,E,I,C,Y,G,I,C;gB,I,C,Q,G,I,C,M,C,K;gB,I,C,Q;gB,W;oB,I,C,U,G;gB,G;Y,G,K,C,C;gB,I,C,Q,G,I,C,M,C,K;Y;iB;gB,I,C,U,G;gB,I,C,Q;Y;QAoDf,2BAAA;Q;QAGA,aAAA,WAAA;YACA,IAAA,OAAA,IAAA,CAAA,SAAA,KAAA,YACA,IAAA,CAAA,SAAA,CAAA;QAEA;QAEA,iBAAA,SAAA;YACA,OAAA,UAAA,GAAA,CAAA,CAAA;gBACA,IAAA,MAAA;oBAAA,IAAA;oBAAA,YAAA,EAAA;gBAAA;gBAEA,IAAA,EAAA,GAAA,IAAA,CAAA,iBAAA;gBACA,IAAA,IAAA,GAAA,IAAA,CAAA,OAAA;gBAEA,MAAA,QAAA;oBAAA;oBAAA;oBAAA;iBAAA;gBAEA,KAAA,MAAA,OAAA,OAAA,IAAA,CAAA,MAAA;oBACA,sCAAA;oBAEA,IAAA,MAAA,OAAA,CAAA,IAAA,WAAA,QAAA,IAAA;oBAEA,MAAA,OAAA,IAAA,KAAA,CAAA;oBAEA,IAAA,UAAA,CAAA,IAAA,CAAA;wB,U,I,C,E,G,I,C,E,G;wBAEA,OAAA,IAAA,CAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA;wB,O,I,C,I,G,I,C,I,G;oBAEA;gB;gB,O;YAIA;Q;QAGA,cAAA,SAAA;YACA,MAAA,OAAA,EAAA;YACA,KAAA,MAAA,UAAA,OAAA,MAAA,CAAA,WACA,KAAA,IAAA,IAAA;YAEA,OAAA;Q;QAGA,cAAA,YAAA;Y,K,M,W,a;gBAEA,MAAA,UAAA,CAAA;gBACA,KAAA,MAAA,QAAA,QAAA,UAAA,C,O,C,C,E,K,Q,C,C,E,K,K,C,C,C,G;oBAEA,OAAA,KAAA,KAAA;oBACA,cAAA,KAAA,KAAA;gBACA;gBAEA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,QAAA,EAAA,EAAA;YACA;QACA;QAEA,0BAAA,SAAA,EAAA,YAAA;YACA,MAAA,OAAA,EAAA;YACA,KAAA,MAAA,gBAAA,UAAA;gBACA,IAAA,QAAA,aAAA,IAAA,CAAA,CAAA,KAAA,GAAA,EAAA,KAAA,aAAA,EAAA;gBAEA,IAAA,SAAA,MAAA,UAAA,EAAA;oBACA,MAAA,WAAA,IAAA,CAAA,YAAA,CAAA,OAAA;oB,I,O,a,aAGA;yBACA,I,YAEA,CAAA,SAAA,OAAA,IAAA,SAAA,UAAA,CAAA,MAAA,GAAA,CAAA,GAEA,KAAA,IAAA,CAAA;gBAEA;Y;YAGA,OAAA;QACA;QAEA,MAAA;YACA,MAAA,WAAA,EAAA;YAEA,KAAA,MAAA,SAAA,IAAA,CAAA,IAAA,C,wD;YAEA,+BAAA;YACA,IAAA,SAAA,MAAA,UAAA,EAAA;gB,I,M,O,EAEA,MAAA,IAAA,CAAA,YAAA,CAAA,MAAA,EAAA,EAAA,MAAA,OAAA;gB,K,M,Q,M,U,CAIA,yCAAA;gBACA,qCAAA;gBACA,cAAA;gBACA,gDAAA;gBACA,qCAAA;gBACA,qBAAA;gB,6D;gBAEA,gCAAA;gBACA,SAAA,IAAA,CACA,CAAA,GAAA,wBAAA,AAAA,EAAA,oBAAA,C,M,E,EAEA,KAAA,QAAA,EACA,KAAA,KAAA,EACA,KAAA,KAAA;Y;YAQA,OAAA,QAAA,GAAA,CAAA;QACA;QAEA,cAAA,SAAA,EAAA,SAAA;YACA,IAAA,MAAA;gBACA,IAAA,UAAA,EAAA;gBACA,YAAA,EAAA;YACA;YAEA,IAAA,UAAA,IAAA,KAAA,UAAA,IAAA,E,I,O,G,U,I;YAIA,KAAA,MAAA,QAAA,UAAA,UAAA,CAAA;gBACA,IAAA,YAAA,UAAA,UAAA,CAAA,IAAA,CAAA,CAAA;oB,O,K,Q,K,G,Q,I,K,K,K,G,K;gBAEA;gB,I,a,U,K,I,K,K,EAGA,IAAA,UAAA,CAAA,IAAA,CAAA;YAEA,+CAAA;YACA,YAAA;YACA,IAAA;YACA;YAEA,OAAA;QACA;Q,c,M,E,O;YAGA,MAAA,WAAA,CAAA,GAAA,+CAAA,AAAA,EAAA,WAAA,CAAA;YACA,IAAA,U,S,I,C,I,C,G,C;QAGA;IAoCA;AACA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;Q,G;Y,I,Q,K,I,M,C,K,G,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,O;oB,I,E,C;iB;a,E,K,I,E;Y,I,E,C;Y,I,Q,K,I,M,C,M,G,G,O;gB,a;Y,G;gB,G,O;oB,I,E,C;iB;a,I,A,I,Q,K,I,M,C,O,G,G,O;gB,a;Y,G;gB,G,uB;oB,O;wB,W;oB;gB;a,E,K,A,I,Q,K,I,M,C,K,G,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,O;oB,I,E,C;iB;gB,I,E,C;gB,G,O;oB,I,E,C;iB;a,E,K,I,E;S;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,O;oB,Y,I,Q,K,I,M,C,M;gB;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AA5PA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAyB,MAAM;IAC7C,OAAO,eAAe,GAAG,QAAQ,oBAAyB,eAAe;IACzE,OAAO,QAAQ,GAAG;IAG5B,QAAQ,oBAAuB,OAAO,CAAC;IACvC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A,I,gB;I,M;I,O;Q;K;I;Q,O;Y,Y;Q;I;I,S;Q,Q,M,G;Q,M,S,M;Y;Y,I,C,U,G;Q;Q,a,W;Y,I,O,I,C,S,K,Y,I,C,S,C;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;Q,G;Y,G,M;gB,I,E,C;a;S;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAyB,MAAM;IAC7C,OAAO,eAAe,GAAG,QAAQ,oBAAyB,eAAe;IACzE,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAAsB,OAAO;IAC3D,QAAQ,oBAAuB,OAAO,CAAC;IACvC,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,M,G,O,M,C;Y,O;Y,S;Y,O;Y,Q;Q;Q,O;Y,U,I,C,M,C,M;Y,Y;Y,M,E;Q;I;I,S;Q,Q,M;Y,I,C,Q,G,I,C,M,C,O;Y,M,O,I,C,Y,C;Y,I,C,I,G,I,C,U,C;Y,I,C,Q,G,I,C,M,C,M;Q;Q,M,S,M;Y,I,C,Q,G,I,C,M,C,O;Y,I,Q,I,C,c,C,I,C,I,E,I,C;gB,I,C,Q,G,I,C,M,C,K;Y,G,K,C,C;gB,I,C,Q,G,I,C,M,C,K;Y;iB,I,C,U,G;Q;Q,a,W;Y,I,O,I,C,S,K,Y,I,C,S,C;Q;Q,c,S;Y,M,O,E;Y,K,M,U,O,M,C,W,K,I,I;Y,O;Q;Q,Y,Y;Y,M,O,E;Y,K,M,W,a;gB,I,gB,K,I,C,C;oB,O,G,I,C,W,M,Q,Q,C,W;gB;gB,I,O,kB,a;oBAkDf,gBAAA;wBACA,MAAA,QAAA,QAAA;wBACA,QAAA,EAAA;oBACA;oBAEA,KAAA,IAAA,CAAA;gBACA;gBAEA,IAAA,aAAA,cAAA,MAAA,CAAA,IAAA,CAAA,CAAA;oBACA,OAAA,GAAA,IAAA,CAAA,WAAA,MAAA,QAAA,KAAA,CAAA,WAAA;gB;gBAGA,IAAA,OAAA,eAAA,aAAA;oBACA,aAAA;wBACA,MAAA,QAAA,KAAA;wBACA,gBAAA,EAAA;oBACA;oBAEA,cAAA,MAAA,CAAA,IAAA,CAAA;gBACA;gBAEA,IAAA,qBAAA,WAAA,cAAA,CAAA,IAAA,CAAA,CAAA;oBACA,OACA,GAAA,IAAA,CAAA,WAAA,M,O,C,uB,C,W;gBAGA;gBAEA,IAAA,OAAA,uBAAA,aAAA;oBACA,qBAAA;wBACA,MAAA,OAAA,CAAA,uBAAA;wBACA,YAAA,EAAA;oBACA;oBAEA,WAAA,cAAA,CAAA,IAAA,CAAA;gBACA;gBAEA,IAAA,yBAAA,mBAAA,UAAA,CAAA,IAAA,CACA,CAAA;oB,OAEA,GAAA,IAAA,CAAA,WAAA,OACA,OAAA,CAAA,qBAAA,CAAA,WAAA;gBAEA;gBAGA,IAAA,OAAA,2BAAA,aAAA;oBACA,yBAAA;wBACA,MAAA,OAAA,CAAA,qBAAA;wBACA,YAAA,EAAA;oBACA;oBAEA,mBAAA,UAAA,CAAA,IAAA,CAAA;gB;gBAGA,IAAA,iBAAA,uBAAA,UAAA,CAAA,IAAA,CAAA,CAAA;oB,OAEA,GAAA,IAAA,CAAA,WAAA,OAAA,OAAA,CAAA,iBAAA,CAAA,WAAA;gBAEA;gB,I,O,mB,aAGA,uBAAA,UAAA,CAAA,IAAA,CAAA;oBACA,MAAA;oBACA,MAAA,OAAA,CAAA,iBAAA;oBACA,IAAA,KAAA,GAAA;gBACA;YAEA;Y,O;QAGA;QAEA,MAAA,gBAAA,IAAA;Y,K,M,Y,K;gBAEA,MAAA,aAAA,MAAA,IAAA,CAAA,eAAA,CAAA,SAAA,IAAA;gBAEA,KAAA,MAAA,iBAAA,SAAA,MAAA,CAAA;oBACA,MAAA,UAAA,MAAA,IAAA,CAAA,YAAA,CACA,Y,c,I;oB,K,M,iB,c,c,C;wBAKA,MAAA,WAAA,MAAA,IAAA,CAAA,oBAAA,CACA,SACA,cAAA,IAAA;wBAGA,CAAA,GAAA,oCAAA,AAAA,EAAA,iBAAA,C,UAEA;oBAEA;gBACA;YACA;Q;QAGA,MAAA,iBAAA,IAAA;Y,M,W,M,C,G,oC,A,E,c,CAEA,MACA;YAGA,OAAA,SAAA,IAAA,CAAA,EAAA,CAAA,GAAA;QACA;QAEA,MAAA,cAAA,UAAA,EAAA,IAAA;Y,M,Q,M,C,G,oC,A,E,W,CAEA,YACA,MACA;Y,O,M,I,C,E,C,G;QAIA;Q,M,sB,O,E,I;YAGA,MAAA,gBACA,MAAA,CAAA,GAAA,oCAAA,AAAA,EAAA,mBAAA,CAAA,SAAA;YAEA,OAAA,cAAA,IAAA,CAAA,EAAA,CAAA,GAAA;QACA;I;AAEA;AAEA,IAAA,UAAA,OAAA,kBAAA,aAAA,cAAA,OAAA,GAAA;kBACA,SAAA,wCAAA;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;Q,G;Y,I,Q,K,I,M,C,K,G,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,O;oB,I,E,C;iB;a,E,K,I,E;Y,I,E,C;Y,I,Q,K,I,M,C,M,G,G,O;gB,a;Y,G;gB,G,O;oB,I,E,C;iB;a,I,A,I,Q,K,I,M,C,O,G,G,O;gB,a;Y,G;gB,G,uB;oB,O;wB,W;oB;gB;a,E,K,A,I,Q,K,I,M,C,K,G,G,O;gB,a;Y,G;gB,G,W;oB,a;gB,G;oB,I,E,C;iB;gB,I,E,C;gB,G,O;oB,I,E,C;iB;gB,I,E,C;gB,G,O;oB,I,E,C;iB;a,E,K,I,E;S;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,O;oB,Y,I,Q,K,I,M,C,M;gB;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAhMA,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;ACJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAAiC,MAAM;IACrD,OAAO,eAAe,GAAG,QAAQ,oBAAiC,eAAe;IACjF,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA8B,OAAO;IACnE,QAAQ,oBAA+B,OAAO,CAAC;IAC/C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,W,G,C,G,sB,A;Q,I,C,S,G,C,G,uB,A;Q,O;Y,Y;Y,O;Y,U;Y,U;Y,Y;Y,O,E;Y,M;gB,O;Y;Y,U;Q;I;I,S;Q,Q,M;Y,I,C,Q,G,O,Q;Q;Q,S,M;Y,I,Q;gB,M,Q,I,C,Q,C,I,C,K,E,I,C,Q,E,I,C,Q,E,I,C,K,C,I,C,K,I,C,U;gB,I,I,C,Q,E,I,C,Q,C,O,I,C,I,C,K;Y;Y,I,C,U,G;Q;Q,a,W;Y,I,O,I,C,S,K,Y,I,C,S,C;Q;Q,U,K,E,Q,E,Q,E,I,E,Y,G;Y,I;Y,O;gB,K;oB,I,U,Q,I,O,C,E,O,M,C,M,I,I,C,E;yB,Q,I,O,C,C,E,O,M,C,M,I,I,C,C,E;oB;gB,K;oB,Q,I,O,O;oB;Y;Y,O;Q;I;I,U;Q;Y,O,I,C,I,C,Q;gB,K,I,C,W,C,S;oB,O;gB,K,I,C,W,C,I;oB,O;gB;oB;Y;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;;;kBChBA;IAEb;QACE,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA;QACE,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA;QACE,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA;QACE,MAAM;QACN,OAAO;QACP,aAAa;IACf;CACD;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;Q,G;Y,G,O;gB,a;Y,G;gB,G,O;oB,a;gB,G;oB,G,W;wB,G,gB;4B,G,Y;gC,a;4B,G;gC,G,S;oC,I,E,C;iC;gC,I,E,C;gC,G,Q;oC,a;gC,G;oC,I,E,C,I,E,C,I,U;iC;gC,I,E,C;gC,G,Y;oC,O;wC,e;oC;oC,O;wC,O,I,K;wC,U,S,G;4C,I,K,G;wC;wC,Y;oC;gC;gC,I,E,C;gC,G,Q;oC,a;gC,G;oC,I,E,C,I,E,C,I,U;iC;6B,E;yB,E;wB,I,E,C;wB,G,gB;4B,G,Y;gC,a;4B,G;gC,G,S;oC,I,E,C;iC;gC,I,E,C;gC,G,a;oC,O;wC,Q;wC,M;wC,Y;wC,Y;oC;oC,O;wC,O,I,K;wC,U,S,G;4C,I,K,G;wC;wC,Y;oC;gC,G,I,E,C,I,S,E,S,I,E,K;oC,O,G,a;wC,K;wC,O;4C,S,K,K;wC;oC,G;wC,I,E,C,I,E,C,K,I;qC;gC,I;6B,E;yB,E;qB,E;iB,E;a;S;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;ADrBD,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;;;AEJA,IAAI;AACJ,IAAI,aAAa;IACf,SAAS,QAAQ;IACjB,IAAI,OAAO,UAAU,EAAE,SAAS,OAAO,OAAO;IAC9C,OAAO,MAAM,GAAG,QAAQ,oBAA8B,MAAM;IAClD,OAAO,eAAe,GAAG,QAAQ,oBAA8B,eAAe;IAC9E,OAAO,QAAQ,GAAG;IAE5B,OAAO,YAAY,GAAG,QAAQ,oBAA2B,OAAO;IAChE,QAAQ,oBAA4B,OAAO,CAAC;IAC5C,OAAO,SAAS,GAAG;IACnB,OAAO,MAAM,GAAG;AAClB;AACA;kBAEe;;;;;A;;A;A,I,gB;I,M;I,O;Q;K;I;Q,I,C,M,G,O,M,C;Y,Q;Y,S;Y,O;Q;Q,O;Y,U,I,C,M,C,K;Y,Y;Y,M,C;Y,c;Q;I;I,S;Q,M,Q,M;Y,I,C,Q,G,I,C,M,C,O;Y,I,C,I,G,M,I,C,U,C;Y,I,C,Q,G,I,C,M,C,M;Q;Q,S,M;Y,I,Q;gB,M,Q,I,C,Q,C,I,C,Y;gB,C,G,6D,A,E,S,C,sB;oB,M,I,C,Y;oB,O;gB;Y;Y,I,C,U,G;Q;Q,a,W;Y,I,O,I,C,S,K,Y,I,C,S,C;Q;Q,Y,M;Y,O,C,G,wB,A,E,U,C,O,E,E,O,E;Q;Q,U,I;Y,O,I,C,I,C,I,C,K;Q;Q;Y,O,I,C,Y,C,I,G,M,K;Q;I;A;A,I,U,O,kB,a,c,O,G;kB,S,wC;;;A,I,S;I,I,M,I;I,I,K,I,c;I,I,K,I,K,C,E,I;I,O,G,a;Q,a;Q,O;Y,a,I,U;Q;Q,I;Y,mB,S,M;gB,I,U,G;Y;Y,oB,S,M;gB,I,U,G;Y;Y,a,S,M;gB,O,I,W,C;Y;Q;I,G;Q,G,mB;Y,a;Q,G;Y,I,E,C;S;Q,I,E,C;Q,G,qB;Y,a;Q,G;Y,I,Q,K,I,M,C,M,G,G,O;gB,a;Y,G;gB,G,Y;oB,G,S;wB,O;4B,O;wB;oB,G;wB,I,E,C;qB;oB,I,E,C;oB,G,a;wB,O;4B,Q;4B,M;wB;wB,O;4B,O,I,Y;4B,U,S,G;gC,I,Y,G;4B;4B,Y;wB;oB,G;wB,C,I,I,I,I,I,C,K,C,M,K,I,G,a;4B,O;gC,Y;4B;wB,G;4B,I,E,C;yB,I,I,E;wB,I,E,C;wB,I,E,C,I,I,C,K,E,S,I,E,K;4B,O,G,a;gC,K;gC,O;oC,S;gC;4B,G;gC,I,E,C,I,E,C;6B;wB;qB,E;iB,E;a,E,K,I,E;Y,I,E,C;Y,I,Q,K,I,M,C,O,G,G,O;gB,a;Y,G;gB,G,uB;oB,O;wB,W;oB;gB;a,E,K,I,E;S;Q,I,E,C;Q,G,qB;Y,G,a;gB,a;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;Y,I,E,C;Y,G,a;gB,a;gB,O;oB,Y,I,Q;gB;gB,I;oB,S,S,M;wB,O,I,W,C;oB;gB;Y,G;gB,I,E,C;a;S,E;K,E;A;A,I,kB,E;A,Q,M,G;A,Q,e,G;;;;;AAff,IAAI,OAAO,KAAO;kBAEH,CAAA,UAEf;;;ACLA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED,MAAM,EACJ,yBAAyB,EACzB,cAAc,EACf,GAAG,QAAQ;AAEZ,MAAM,uBAAuB,QAAQ,oBACnC,2BACA;AAGF,OAAO,OAAO,GAAG;IACf;AACF;;;ACpCA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED,SAAS,WAAW,MAAM;IACxB,MAAM,MAAM,CAAC;IACb,IAAI,OAAO,OAAO,OAAO,KAAK,aAAa;QACzC,IAAI,OAAO,GAAG;YACZ,MAAM,OAAO,OAAO,CAAC,IAAI,IAAI;YAC7B,OAAO,OAAO,OAAO,CAAC,KAAK,IAAI;YAC/B,gBAAgB,OAAO,OAAO,CAAC,cAAc,IAAI;YACjD,UAAU,CAAC;YACX,WAAW,CAAC;QACd;QACA,OAAO,MAAM,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE,OAAO,OAAO,CAAC,QAAQ;QAC3D,OAAO,MAAM,CAAC,IAAI,OAAO,CAAC,SAAS,EAAE,OAAO,OAAO,CAAC,SAAS;IAC/D;IACA,IAAI,OAAO,OAAO,KAAK,KAAK,aAAa;QACvC,IAAI,KAAK,GAAG;YACV,OAAO,OAAO,KAAK,CAAC,KAAK,I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","sources":["node_modules/spinal-env-viewer-plugin-attribute-manager/index.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/js/events/eventRecepter.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/js/events/events.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/js/events/controllers.js","node_modules/spinal-env-viewer-room-manager/services/service.js","node_modules/spinal-env-viewer-room-manager/services/constants.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/js/register.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/panel.vue","node_modules/spinal-env-viewer-panel-manager-service/index.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelManagerService.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalPanelApp.js","node_modules/spinal-env-viewer-panel-manager-service/SpinalMountExtention.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/typesList.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tablePage.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/index.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/tableContent.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/services/index.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/services/classes/spinalAttributeService.js","node_modules/spinal-env-viewer-plugin-forge/dist/Constants.js","node_modules/spinal-env-viewer-bim-manager-service/dist/index.js","node_modules/spinal-env-viewer-bim-manager-service/src/index.ts","node_modules/spinal-env-viewer-bim-manager-service/dist/bimObjects/bimService.js","node_modules/spinal-env-viewer-bim-manager-service/src/bimObjects/bimService.ts","node_modules/spinal-env-viewer-plugin-attribute-manager/src/services/classes/spinalConfigurationService.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tooltips/createAttribute.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/standard-buttons.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/table/fabs.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tooltips/changeCol.vue","node_modules/file-saver/dist/FileSaver.min.js","node_modules/file-saver/src/FileSaver.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/configurationPanel.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/configuration-crud.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/mdSelect.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/createItem.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/configurations.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/displayList.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/attributePanel/components/tooltips/addItem.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/components/currentConfiguration.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/panel.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/configurationStep.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/context.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/category.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/js/data.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/createByAttribute.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/createByName.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/createByFixedValue.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/group.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/launchGenerationStep.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/js/utilities.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/components/selectionStep.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/js/data.config.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/paramsDialog.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/js/utilities.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/editParamsComponent.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/displayList.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/paramsUploaded.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/components/createParamsComponent.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/dialogs/importAttributeExcelDialog.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/dialogs/export.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/configurationPanel/dialogs/import.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/dialogs/configurations.vue","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/js/flags.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/dialogs/select-type.vue","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/index.js","node_modules/spinal-env-viewer-panel-manager-service_spinalforgeextention/SpinalForgeExtention.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/buttons/index.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/buttons/openPanel.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/buttons/openConfiguration.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/buttons/index.js","node_modules/spinal-env-viewer-plugin-attribute-manager/src/vue/panels/generateGroupPanel/buttons/openSelectType.js"],"sourcesContent":["import \"./src/js/events/eventRecepter\";\nimport \"./src/js/register\";\n\nimport { OPEN_PANEL_BTN, OPEN_CONFIGURATION_PANEL } from \"./src/buttons\";\n\nimport { OPEN_SELECT_TYPE_BTN } from \"./src/vue/panels/generateGroupPanel/buttons\";\n\nimport { spinalContextMenuService } from \"spinal-env-viewer-context-menu-service\";\n\nconst SIDEBAR = \"GraphManagerSideBar\";\n\nspinalContextMenuService.registerApp(SIDEBAR, new OPEN_PANEL_BTN(), [3]);\nspinalContextMenuService.registerApp(SIDEBAR, new OPEN_CONFIGURATION_PANEL(), [\n  3,\n]);\n\nspinalContextMenuService.registerApp(SIDEBAR, new OPEN_SELECT_TYPE_BTN(), [3]);\n","import EventBus from './events';\nimport controllers from './controllers'\n\nEventBus.$on(\"selectElement\", (data) => {\n  controllers.selectitemInViewer(data.id);\n})\n\nEventBus.$on(\"select\", (data) => {\n  controllers.selectObject(data);\n})\n\nEventBus.$on(\"isolate\", (data) => {\n  controllers.IsolateObject(data);\n})\n\nEventBus.$on(\"fitToView\", (data) => {\n  controllers.zoomObject(data);\n})","import Vue from 'vue';\n\nconst EventBus = new Vue();\n\nexport default EventBus;","import {\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\"\n\nimport spinalGeographicService from \"spinal-env-viewer-context-geographic-service\";\n\n\nimport {\n  groupService\n} from \"spinal-env-viewer-room-manager/services/service\";\n\n\nexport default {\n\n  async selectitemInViewer(nodeId) {\n\n    const objects = await this.getBimObjectsAndOrganizeThem(nodeId);\n\n    // if (nodeInfo && this._isBimobjectOrRoom(nodeInfo.type.get())) {\n    //   const bimObjects = await this._getBimObjects(nodeInfo);\n    //   const objecs = this._organizeBimObject(bimObjects);\n\n    objects.forEach(el => {\n      let model = window.spinal.BimObjectService\n        .mappingBimFileIdModelId[el.bimFileId];\n\n      for (let j = 0; j < model.modelScene.length; j++) {\n        const scene = model.modelScene[j];\n\n        spinal.ForgeViewer.viewer.impl.selector.setSelection(el\n          .selection, scene.model);\n\n        spinal.ForgeViewer.viewer.isolate(el.selection, scene.model);\n        spinal.ForgeViewer.viewer.fitToView(el.selection);\n\n      }\n\n    })\n\n  },\n\n  async selectObject(nodeIds) {\n    const objects = await this.getBimObjectsAndOrganizeThem(nodeIds);\n\n    objects.forEach(el => {\n      let model = window.spinal.BimObjectService\n        .mappingBimFileIdModelId[el.bimFileId];\n\n      for (let j = 0; j < model.modelScene.length; j++) {\n        const scene = model.modelScene[j];\n\n        spinal.ForgeViewer.viewer.impl.selector.setSelection(el\n          .selection, scene.model);\n      }\n\n    })\n\n  },\n  async IsolateObject(nodeIds) {\n    const objects = await this.getBimObjectsAndOrganizeThem(nodeIds);\n\n    objects.forEach(el => {\n      let model = window.spinal.BimObjectService\n        .mappingBimFileIdModelId[el.bimFileId];\n\n      for (let j = 0; j < model.modelScene.length; j++) {\n        const scene = model.modelScene[j];\n\n        spinal.ForgeViewer.viewer.isolate(el.selection, scene.model);\n\n      }\n\n    })\n\n  },\n  async zoomObject(nodeIds) {\n    const objects = await this.getBimObjectsAndOrganizeThem(nodeIds);\n\n    objects.forEach(el => {\n      let model = window.spinal.BimObjectService\n        .mappingBimFileIdModelId[el.bimFileId];\n\n      for (let j = 0; j < model.modelScene.length; j++) {\n        const scene = model.modelScene[j];\n\n        spinal.ForgeViewer.viewer.fitToView(el.selection);\n\n      }\n\n    })\n\n  },\n\n\n  async getBimObjectsAndOrganizeThem(nodeIds) {\n    if (!Array.isArray(nodeIds)) nodeIds = [nodeIds];\n    const promises = [];\n\n\n    for (const nodeId of nodeIds) {\n      promises.push(this._getBimsOrganized(nodeId));\n    }\n\n    return Promise.all(promises).then(values => {\n      const res = [];\n      values = values.flat(2);\n\n      for (const obj of values) {\n        const found = res.find(el => el.bimFileId === obj.bimFileId);\n        if (typeof found === \"undefined\") {\n          res.push(obj);\n        } else {\n          found.selection.push(...obj.selection);\n        }\n      }\n\n      return res;\n\n    })\n\n  },\n\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //                                PRIVATES\n  ////////////////////////////////////////////////////////////////////////////\n\n  _isBimobjectOrRoom(nodeType) {\n    if (nodeType && spinalGeographicService.constants.GEOGRAPHIC_TYPES_ORDER\n      .indexOf(nodeType) !== -1) return true;\n\n    return false;\n  },\n\n  async _getBimObjects(nodeInfo) {\n    let type = nodeInfo.type.get()\n    let nodeId = nodeInfo.id.get();\n\n    if (type === spinalGeographicService.constants\n      .EQUIPMENT_TYPE) return [nodeInfo.get()]\n\n    else if (type === spinalGeographicService.constants.ROOM_TYPE) {\n      return SpinalGraphService.getChildren(nodeId, [spinalGeographicService\n        .constants\n        .REFERENCE_RELATION, spinalGeographicService.constants\n        .EQUIPMENT_RELATION\n      ]).then(children => {\n        return children.map(el => el.get());\n      });\n    } else {\n      //   let relations = [\n      //     ...spinalGeographicService.constants.GEOGRAPHIC_RELATIONS,\n      //     groupService.constants.CONTEXT_TO_CATEGORY_RELATION,\n      //     groupService.constants.GROUP_TO_ROOMS_RELATION,\n      //     groupService.constants.CATEGORY_TO_GROUP_RELATION,\n      //     groupService.constants.GROUP_TO_EQUIPMENTS_RELATION\n      //   ]\n    }\n\n  },\n  _organizeBimObject(bimObjects) {\n\n    let data = [];\n\n    bimObjects.forEach(bim => {\n      let found = data.find(el => el.bimFileId === bim.bimFileId);\n\n      if (found) {\n        found.selection.push(bim.dbid);\n      } else {\n        data.push({\n          bimFileId: bim.bimFileId,\n          selection: [bim.dbid]\n        });\n      }\n\n    })\n\n    return data;\n\n  },\n\n  async _getBimsOrganized(nodeId) {\n    const nodeInfo = SpinalGraphService.getInfo(nodeId);\n\n    if (nodeInfo && this._isBimobjectOrRoom(nodeInfo.type.get())) {\n      const bimObjects = await this._getBimObjects(nodeInfo);\n      const objects = this._organizeBimObject(bimObjects);\n      return objects;\n    }\n\n    return [];\n  }\n\n}","const {\n  SPINAL_RELATION_PTR_LST_TYPE,\n  SpinalGraphService\n} = require(\"spinal-env-viewer-graph-service\");\n\nconst {\n  Model\n} = require(\"spinal-core-connectorjs_type\");\n\nconst constants = require(\"./constants\");\n\n\nlet groupService = {\n  constants: constants,\n  createGroupContext(name, type) {\n    const context = SpinalGraphService.getContext(name);\n\n    if (typeof context !== \"undefined\") return Promise.resolve(false);\n\n    return SpinalGraphService.addContext(\n      name,\n      type,\n      new Model({\n        name: name\n      })\n    );\n  },\n  addElement(contextId, elementId, elementType, elementName, iconName,\n    color) {\n    let contextInfo = SpinalGraphService.getInfo(contextId)\n    let contextType = contextInfo && contextInfo.type ? contextInfo.type\n      .get() : undefined;\n\n    let typeAndRelation = this.getTypeAndRelation(elementType, contextType);\n\n\n    let type = typeAndRelation.type;\n    let relationName = typeAndRelation.relation;\n\n    if (typeof type !== \"undefined\" && typeof relationName !== \"undefined\") {\n      let info = {\n        name: elementName,\n        type: type\n      }\n\n      if (iconName) {\n        info[\"icon\"] = iconName;\n      }\n\n      if (color) {\n        info[\"color\"] = color;\n      }\n\n      let childId = SpinalGraphService.createNode(info,\n        new Model({\n          name: elementName\n        })\n      );\n\n\n      return SpinalGraphService.addChildInContext(\n        elementId,\n        childId,\n        contextId,\n        relationName,\n        SPINAL_RELATION_PTR_LST_TYPE\n      );\n    }\n\n    // // let type =\n    // //   contextType === ROOMS_GROUP_CONTEXT ? ROOMS_GROUP : EQUIPMENTS_GROUP;\n\n    // // let relationName =\n    // //   contextType === ROOMS_GROUP_CONTEXT ?\n    // //   ROOMS_GROUP_RELATION :\n    // //   EQUIPMENTS_GROUP_RELATION;\n\n\n\n  },\n  elementIsLinkedToGroup(groupId, elementId) {\n    let realNode = SpinalGraphService.getRealNode(groupId);\n    const type = realNode.getType().get();\n\n    let relationName = constants.GROUP_RELATION_ASSOCIATION.get(type)\n\n    try {\n      let ids = realNode.children[SPINAL_RELATION_PTR_LST_TYPE][relationName]\n        .children.info.ids;\n\n      return Promise.resolve(ids.has((el) => {\n        return el.get() === elementId\n      }))\n    } catch (error) {\n      // let type = SpinalGraphService.getInfo(groupId).type.get();\n      // let relationName = type === ROOMS_GROUP ? ROOMS_TO_ELEMENT_RELATION :\n      //   EQUIPMENTS_TO_ELEMENT_RELATION;\n\n      return SpinalGraphService.getChildren(groupId, [relationName]).then(\n        children => {\n          for (let i = 0; i < children.length; i++) {\n            const element = children[i];\n            if (element.id.get() === elementId) return true;\n\n          }\n          return false;\n        });\n    }\n\n  },\n  linkElementToGroup(groupId, elementId, contextId) {\n\n    let groupInfo = SpinalGraphService.getInfo(groupId);\n\n    let relationName = constants.GROUP_RELATION_ASSOCIATION.get(groupInfo.type\n      .get());\n\n\n    return this.getCategorie(groupInfo).then(category => {\n\n      return this.elementIsInCategorie(category[0].id.get(), elementId)\n        .then(\n          group => {\n            let result = {\n              old_group: undefined,\n              newGroup: groupId\n            }\n\n            if (typeof group !== \"undefined\") {\n              this.removeLink(group.id.get(), elementId);\n              result.old_group = group.id.get();\n            }\n\n            SpinalGraphService.addChildInContext(groupId,\n              elementId, contextId, relationName,\n              SPINAL_RELATION_PTR_LST_TYPE);\n\n\n            return result;\n\n          })\n    })\n\n  },\n  removeLink(groupId, elementId) {\n    let type = SpinalGraphService.getInfo(groupId).type.get();\n    let relationName = constants.GROUP_RELATION_ASSOCIATION.get(type);\n\n    return SpinalGraphService.removeChild(groupId, elementId,\n      relationName,\n      SPINAL_RELATION_PTR_LST_TYPE)\n  },\n  getTypeAndRelation(elementType, contextType) {\n\n    switch (elementType) {\n      case contextType:\n        return {\n          type: constants.CATEGORY_TYPE,\n            relation: constants.CONTEXT_TO_CATEGORY_RELATION\n        };\n\n        // case ROOMS_GROUP:\n        //   return {\n        //     type: \"undefined\",\n        //       relation:\n        //   };\n      case constants.CATEGORY_TYPE:\n        // eslint-disable-next-line no-case-declarations\n        let type = constants.CONTEXT_GROUP_ASSOCIATION.get(contextType);\n        return {\n          type: type,\n            relation: constants.CATEGORY_TO_GROUP_RELATION\n        };\n\n        // case constants.ROOMS_GROUP:\n        // case constants.EQUIPMENTS_GROUP:\n        // case constants.ENDPOINT_GROUP:\n        //   return {\n        //     type: \"\",\n        //       relation: constants.GROUP_RELATION_ASSOCIATION.get(elementType)\n        //   }\n\n      default:\n        return {};\n    }\n  },\n\n  getElementsLinked(groupId) {\n    let type = SpinalGraphService.getInfo(groupId).type.get();\n    let relationName = constants.GROUP_RELATION_ASSOCIATION.get(type);\n\n    return SpinalGraphService.getChildren(groupId, [relationName]);\n  },\n\n  getGroups(selectedNode) {\n\n    // const ROOMS_TYPES = [\n    //   ROOMS_GROUP_CONTEXT,\n    //   ROOMS_CATEGORY,\n    //   ROOMS_GROUP\n    // ]\n\n\n    let type = selectedNode.type.get();\n    let nodeId = selectedNode.id.get();\n\n    if (typeof constants.GROUP_RELATION_ASSOCIATION.get(type) !==\n      \"undefined\") {\n      return Promise.resolve([selectedNode]);\n    }\n\n    let relations = [\n      constants.CONTEXT_TO_CATEGORY_RELATION,\n      constants.CATEGORY_TO_GROUP_RELATION,\n      constants.GROUP_TO_ROOMS_RELATION,\n      constants.GROUP_TO_EQUIPMENTS_RELATION,\n      constants.GROUP_TO_ENDPOINT_RELATION\n    ];\n\n    return SpinalGraphService.findNodes(nodeId, relations, (node) => {\n      let argType = node.getType().get()\n      return typeof constants.GROUP_RELATION_ASSOCIATION.get(argType) !==\n        \"undefined\"\n    }).then(res => {\n      return res.map(el => {\n        SpinalGraphService._addNode(el);\n        return el.info;\n      })\n    })\n  },\n\n  getCategorie(selectedNode) {\n    let type = selectedNode.type.get();\n    let nodeId = selectedNode.id.get();\n\n    if (type === constants.CATEGORY_TYPE) {\n      return Promise.resolve(selectedNode);\n    } else if (constants.CONTEXTS_TYPES.indexOf(type) !== -1) {\n      return SpinalGraphService.getChildren(nodeId, [constants\n        .CONTEXT_TO_CATEGORY_RELATION\n      ]);\n\n    } else {\n      let relationRefPromises = [];\n\n\n      let node = SpinalGraphService.getRealNode(nodeId);\n\n      let relationList = node.parents[constants.CATEGORY_TO_GROUP_RELATION];\n\n      if (relationList) {\n        for (let i = 0; i < relationList.length; i++) {\n          const element = relationList[i];\n          relationRefPromises.push(element.load());\n        }\n\n      }\n\n      return Promise.all(relationRefPromises).then(refs => {\n\n        let promises = refs.map(node => {\n          return node.parent.load();\n        })\n\n\n        return Promise.all(promises).then(parents => {\n          // let p = [];\n          // parents.forEach(el => {\n          //   if (el && !(el instanceof SpinalContext)) {\n          //     p.push(new SpinalCalNode(el));\n          //   }\n          // })\n\n          // return p;\n\n          return parents.map(el => {\n            return el.info;\n          });\n\n        });\n\n      })\n\n\n    }\n  },\n\n  elementIsInCategorie(categoryId, elementId) {\n\n    // let nodeInfo = SpinalGraphService.getInfo(categoryId);\n    // let type = nodeInfo.type.get();\n\n    // let relationName =\n    //   type === ROOMS_CATEGORY ?\n    //   ROOMS_GROUP_RELATION :\n    //   EQUIPMENTS_GROUP_RELATION;\n\n    return SpinalGraphService.getChildren(categoryId, [constants\n        .CATEGORY_TO_GROUP_RELATION\n      ])\n      .then(\n        children => {\n\n          return children.find(child => {\n            return child.childrenIds.find(el => {\n              return el === elementId\n            })\n          })\n\n        })\n\n  }\n\n};\n\nmodule.exports = {\n  // ROOMS_GROUP_CONTEXT,\n  // ROOMS_GROUP,\n  // EQUIPMENTS_GROUP,\n  // ROOMS_GROUP_RELATION,\n  // EQUIPMENTS_GROUP_RELATION,\n  // EQUIPMENTS_GROUP_CONTEXT,\n  // ROOMS_TO_ELEMENT_RELATION,\n  // EQUIPMENTS_TO_ELEMENT_RELATION,\n  // ROOMS_CATEGORY,\n  // ROOMS_CATEGORY_RELATION,\n  // EQUIPMENTS_CATEGORY,\n  // EQUIPMENTS_CATEGORY_RELATION,\n  // typeLst,\n  // TYPE_AND_RELATION,\n\n  groupService\n};","// ////////////////////////////////////////////////////\n// // ROOMS\n// ////////////////////////////////////////////////////\n// const ROOMS_GROUP_CONTEXT = \"RoomsGroupContext\";\n// const ROOMS_GROUP = \"RoomsGroup\";\n// const ROOMS_GROUP_RELATION = \"hasRoomsGroup\";\n// const ROOMS_TO_ELEMENT_RELATION = \"groupHasRooms\";\n// const ROOMS_CATEGORY = \"Rooms_category\";\n// const ROOMS_CATEGORY_RELATION = \"hasRoomsCategory\";\n\n\n\n// ///////////////////////////////////////////////////////\n// // BimObject\n// ///////////////////////////////////////////////////////\n// const EQUIPMENTS_GROUP_CONTEXT = \"EquipmentGroupContext\";\n// const EQUIPMENTS_GROUP = \"EquipmentGroup\";\n// const EQUIPMENTS_GROUP_RELATION = \"hasEquipmentsGroup\";\n// const EQUIPMENTS_TO_ELEMENT_RELATION = \"groupHasEquipments\";\n// const EQUIPMENTS_CATEGORY = \"Equipment_category\";\n// const EQUIPMENTS_CATEGORY_RELATION = \"hasEquipmentsCategory\";\n\n\n\n// const typeLst = [\n//   ROOMS_GROUP_CONTEXT,\n//   ROOMS_GROUP,\n//   ROOMS_CATEGORY,\n//   EQUIPMENTS_GROUP_CONTEXT,\n//   EQUIPMENTS_GROUP,\n//   EQUIPMENTS_CATEGORY\n// ]\n\n\n\n// const TYPE_AND_RELATION = new Map();\n// TYPE_AND_RELATION.set(ROOMS_GROUP_CONTEXT, ROOMS_CATEGORY_RELATION)\n// TYPE_AND_RELATION.set(ROOMS_GROUP, ROOMS_TO_ELEMENT_RELATION)\n// TYPE_AND_RELATION.set(ROOMS_CATEGORY, ROOMS_GROUP_RELATION)\n// TYPE_AND_RELATION.set(EQUIPMENTS_GROUP_CONTEXT, EQUIPMENTS_CATEGORY_RELATION)\n// TYPE_AND_RELATION.set(EQUIPMENTS_GROUP, EQUIPMENTS_TO_ELEMENT_RELATION)\n// TYPE_AND_RELATION.set(EQUIPMENTS_CATEGORY, EQUIPMENTS_GROUP_RELATION)\n\n// const CONTEXT_TYPE = \"groupingContext\";\n// const CATEGORY_TYPE = \"groupingCategory\";\n\n// ///////////////////////////////////////////\n// //            Groups Types               //\n// ///////////////////////////////////////////\n// const ROOMS_GROUP = \"roomsGroup\";\n// const EQUIPMENTS_GROUP = \"equipmentGroup\";\n// const ENDPOINT_GROUP = \"endpointGroup\"\n\n// ///////////////////////////////////////////\n// //            Relations                  //\n// ///////////////////////////////////////////\n\n// const CONTEXT_TO_CATEGORY_RELATION = \"hasCategory\";\n// const CATEGORY_TO_GROUP_RELATION = \"hasGroup\";\n// const GROUP_TO_ROOMS_RELATION = \"groupHasRooms\";\n// const GROUP_TO_EQUIPMENTS_RELATION = \"groupHasEquipments\";\n// const GROUP_TO_ENDPOINT_RELATION = \"groupHasEndpoints\";\n\n\n\nclass GroupServiceConstants {\n  constructor() {\n    ///////////////////////////////////////\n    // CONTEXT\n    ///////////////////////////////////////\n    this.ROOMS_GROUP_CONTEXT = \"RoomsGroupContext\";\n    this.EQUIPMENTS_GROUP_CONTEXT = \"EquipmentGroupContext\";\n    this.ENDPOINTS_GROUP_CONTEXT = \"EndpointGroupContext\";\n\n    this.CONTEXTS_TYPES = [\n      this.ROOMS_GROUP_CONTEXT,\n      this.EQUIPMENTS_GROUP_CONTEXT,\n      this.ENDPOINTS_GROUP_CONTEXT\n    ];\n\n    //Category\n\n    this.CATEGORY_TYPE = \"groupingCategory\";\n\n    ///////////////////////////////////////////\n    //            Groups Types               //\n    ///////////////////////////////////////////\n    this.ROOMS_GROUP = \"roomsGroup\";\n    this.EQUIPMENTS_GROUP = \"equipmentGroup\";\n    this.ENDPOINT_GROUP = \"endpointGroup\";\n\n    this.GROUPS_TYPES = [\n      this.ROOMS_GROUP,\n      this.EQUIPMENTS_GROUP,\n      this.ENDPOINT_GROUP\n    ];\n\n    ///////////////////////////////////////////\n    //            Relations                  //\n    ///////////////////////////////////////////\n\n    this.CONTEXT_TO_CATEGORY_RELATION = \"hasCategory\";\n    this.CATEGORY_TO_GROUP_RELATION = \"hasGroup\";\n    this.GROUP_TO_ROOMS_RELATION = \"groupHasRooms\";\n    this.GROUP_TO_EQUIPMENTS_RELATION = \"groupHasEquipments\";\n    this.GROUP_TO_ENDPOINT_RELATION = \"groupHasEndpoints\";\n\n    ////////////////////////////////////////////\n    // Maps\n    ////////////////////////////////////////////\n\n    this.CONTEXT_GROUP_ASSOCIATION = new Map([\n      [this.ROOMS_GROUP_CONTEXT, this.ROOMS_GROUP],\n      [this.EQUIPMENTS_GROUP_CONTEXT, this.EQUIPMENTS_GROUP],\n      [this.ENDPOINTS_GROUP_CONTEXT, this.ENDPOINT_GROUP]\n    ]);\n\n    this.GROUP_RELATION_ASSOCIATION = new Map([\n      [this.ROOMS_GROUP, this.GROUP_TO_ROOMS_RELATION],\n      [this.EQUIPMENTS_GROUP, this\n        .GROUP_TO_EQUIPMENTS_RELATION\n      ],\n      [this.ENDPOINT_GROUP, this.GROUP_TO_ENDPOINT_RELATION]\n\n    ])\n  }\n\n}\n\nmodule.exports = new GroupServiceConstants();","import Vue from \"vue\";\n\n\n////////////////////////////////////\n//            Panels\n////////////////////////////////////\nimport attributePanel from \"../vue/panels/attributePanel/panel.vue\";\nimport configurationPanel from \"../vue/panels/configurationPanel/configurationPanel.vue\";\nimport generateGroupPanel from \"../vue/panels/generateGroupPanel/panel.vue\";\n\n\n////////////////////////////////////\n//            Dialogs\n////////////////////////////////////\n// import LinkToGroup from \"../vue/dialogs/linkToGroup.vue\";\nimport ParamDialogComponent from \"../vue/dialogs/paramsDialog.vue\";\nimport ImportAttributeExcelDialog from '../vue/dialogs/importAttributeExcelDialog.vue';\nimport ExportConfigurationDialog from \"../vue/panels/configurationPanel/dialogs/export.vue\"\nimport ImportConfigurationDialog from \"../vue/panels/configurationPanel/dialogs/import.vue\"\nimport ConfigureGenerationDialog from \"../vue/panels/generateGroupPanel/dialogs/configurations.vue\";\nimport SelectTypeDialog from \"../vue/panels/generateGroupPanel/dialogs/select-type.vue\";\n\n////////////////////////////////////\n//            Others\n////////////////////////////////////\nconst {\n  SpinalForgeExtention\n} = require(\"spinal-env-viewer-panel-manager-service_spinalforgeextention\");\n\nconst {\n  SpinalMountExtention\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\n//////////////////////////////////////////////////////////////////////////////////\n// register Panels\n/////////////////////////////////////////////////////////////////////////////////\n\n\n\nlet panels = [{\n  name: \"attributeManagerPanel\",\n  vueMountComponent: Vue.extend(attributePanel),\n  panel: {\n    title: \"Attribute manager\",\n    closeBehaviour: \"hide\"\n  },\n  style: {\n    minWidth: \"620px\",\n    height: \"475px\",\n    left: \"400px\"\n  }\n}, {\n  name: \"configurationPanel\",\n  vueMountComponent: Vue.extend(configurationPanel),\n  panel: {\n    title: \"Configuration Panel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {\n    minWidth: \"620px\",\n    height: \"475px\",\n    left: \"400px\"\n  }\n}, {\n  name: \"generateGroupPanel\",\n  vueMountComponent: Vue.extend(generateGroupPanel),\n  panel: {\n    title: \"Generate Group Panel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {\n    minWidth: \"620px\",\n    height: \"740px\",\n    left: \"400px\"\n  }\n}]\n\nfor (let index = 0; index < panels.length; index++) {\n  const element = panels[index];\n  const panelExtension = SpinalForgeExtention.createExtention(element);\n  SpinalForgeExtention.registerExtention(element.name, panelExtension);\n}\n\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n// register Dialogs\n/////////////////////////////////////////////////////////////////////////////////\n\n\nconst dialogs = [\n  // {\n  //   name: \"linkToGroupDialog\",\n  //   vueMountComponent: Vue.extend(LinkToGroup),\n  //   parentContainer: document.body\n  // }, \n  {\n    name: \"paramDialogComponent\",\n    vueMountComponent: Vue.extend(ParamDialogComponent),\n    parentContainer: document.body\n  },\n  {\n    name: \"importAttributeExcelDialog\",\n    vueMountComponent: Vue.extend(ImportAttributeExcelDialog),\n    parentContainer: document.body\n  },\n  {\n    name: \"exportConfigurationDialog\",\n    vueMountComponent: Vue.extend(ExportConfigurationDialog),\n    parentContainer: document.body\n  }, {\n    name: \"importConfigurationDialog\",\n    vueMountComponent: Vue.extend(ImportConfigurationDialog),\n    parentContainer: document.body\n  }, {\n    name: \"configureGenerationDialog\",\n    vueMountComponent: Vue.extend(ConfigureGenerationDialog),\n    parentContainer: document.body\n  }, {\n    name: \"selectTypeDialog\",\n    vueMountComponent: Vue.extend(SelectTypeDialog),\n    parentContainer: document.body\n  }\n];\n\n\nfor (let index = 0; index < dialogs.length; index++) {\n  SpinalMountExtention.mount(dialogs[index]);\n}","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\"mdContainer md-scrollbar\">\n\n      <type-lst-component\n         v-if=\"data && appState === STATES.normal && visiblePage === pages.types\"\n         :types=\"data.types\"\n         @select=\"selectType\"\n      >\n      </type-lst-component>\n\n      <table-page\n         v-if=\"appState === STATES.normal && typeSelected && visiblePage === pages.table\"\n         :itemDisplayed=\"itemDisplayed\"\n         :attributesDisplayed=\"attributesDisplayed\"\n         :typeSelected=\"typeSelected\"\n         @back=\"goBack\"\n         @refresh=\"validateItem\"\n         @openExportDialog=\"openExportDialog\"\n      >\n      </table-page>\n\n      <!--\n          /////////////////////////////////\n          Loading\n          ////////////////////////////////\n        -->\n      <div\n         v-if=\"appState === STATES.loading\"\n         class=\"loading\"\n      >\n         <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n   </md-content>\n</template>\n\n<script>\nconst {\n   spinalPanelManagerService,\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nimport TypeLstComponent from \"./components/typesList.vue\";\nimport TablePage from \"./components/tablePage.vue\";\n\nimport SpinalAttributeManager from \"../../../services\";\n\nimport EventBus from \"../../../js/events/events\";\n\nexport default {\n   name: \"attributeManagerPanel\",\n   components: {\n      \"type-lst-component\": TypeLstComponent,\n      \"table-page\": TablePage,\n   },\n   mounted() {\n      EventBus.$on(\"refreshTable\", () => {\n         this.refreshData();\n      });\n   },\n   data() {\n      this.STATES = Object.freeze({\n         normal: 0,\n         loading: 1,\n         error: 2,\n      });\n\n      this.pages = Object.freeze({\n         types: 0,\n         table: 1,\n      });\n\n      this.data = null;\n\n      return {\n         appState: this.STATES.normal,\n         itemSelected: null,\n         contextSelected: null,\n         typeSelected: null,\n         visiblePage: this.pages.types,\n         itemDisplayed: null,\n         // attributesDisplayed: []\n      };\n   },\n   methods: {\n      opened(params) {\n         this.itemSelected = params.nodeSelected;\n         this.contextSelected = params.context;\n      },\n\n      closed() {},\n\n      setTitle(title) {\n         spinalPanelManagerService.panels.attributeManagerPanel.panel.setTitle(\n            title\n         );\n      },\n      getAllData() {\n         return SpinalAttributeManager.getAllData(\n            this.contextSelected.id,\n            this.itemSelected.id\n         );\n      },\n      selectType(type) {\n         this.typeSelected = type;\n         this.itemDisplayed = this.data.data[type];\n         // this.attributesDisplayed = this.data.attributes;\n         // this.attributesDisplayed = this.getAttributes();\n         this.visiblePage = this.pages.table;\n      },\n\n      getAttributes() {\n         return this.data.data[this.typeSelected]\n            .map((el) => {\n               return el.attributes.map((el2) => {\n                  return { category: el2.category, label: el2.label };\n               });\n            })\n            .flat();\n      },\n\n      goBack() {\n         this.typeSelected = null;\n         this.visiblePage = this.pages.types;\n      },\n\n      validateItem() {\n         // setTimeout(() => {\n         this.refreshData();\n         // }, 500);\n      },\n\n      refreshData() {\n         this.appState = this.STATES.loading;\n\n         this.getAllData()\n            .then((res) => {\n               this.data = res;\n\n               const typeFound = this.data.types.find(\n                  (el) => el === this.typeSelected\n               );\n\n               this.typeSelected = typeFound ? typeFound : null;\n\n               if (this.typeSelected) {\n                  this.selectType(this.typeSelected);\n               } else {\n                  this.visiblePage = this.pages.types;\n               }\n\n               this.appState = this.STATES.normal;\n            })\n            .catch((err) => {\n               this.appState = this.STATES.normal;\n               console.error(err);\n            });\n      },\n\n      openExportDialog(res) {\n         this.appState = this.STATES.loading;\n\n         spinalPanelManagerService.openPanel(\"importAttributeExcelDialog\", {\n            tableData: res.table,\n            excelData: res.data,\n            callback: () => {\n               this.refreshData();\n            },\n         });\n      },\n   },\n   watch: {\n      itemSelected() {\n         this.setTitle(`Attribute Manager : ${this.itemSelected.name}`);\n         this.refreshData();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.mdContainer {\n   width: 100%;\n   height: calc(100% - 20px);\n   overflow: auto;\n   background: transparent;\n}\n\n.loading {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n</style>","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst G_root = typeof window == \"undefined\" ? global : window;\nconst SpinalPanelManagerService = require(\"./SpinalPanelManagerService\");\nconst SpinalPanelApp = require(\"./SpinalPanelApp\");\n\nif (typeof G_root.spinal === \"undefined\") G_root.spinal = {};\nif (typeof G_root.spinal.spinalPanelManagerService === \"undefined\")\n  G_root.spinal.spinalPanelManagerService = new SpinalPanelManagerService();\nconst SpinalMountExtention = require(\"./SpinalMountExtention.js\")(\n  G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  spinalPanelManagerService: G_root.spinal.spinalPanelManagerService,\n  SpinalPanelApp,\n  SpinalMountExtention,\n  install(Vue) {\n    Vue.prototype.$spinalPanelManagerService =\n      G_root.spinal.spinalPanelManagerService;\n  }\n};\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n *  Containter like service to register and get applications relative to a hookname\n *\n * @property {object} panels key = panelName, value = an instance of SpinalPanelApp\n * @class SpinalPanelManagerService\n */\nclass SpinalPanelManagerService {\n  /**\n   *Creates an instance of SpinalPanelManagerService.\n   * @memberof SpinalPanelManagerService\n   */\n  constructor() {\n    this.panels = {};\n  }\n\n  /**\n   * method to register an Panel Application\n   *\n   * @param {string} panelName the name of the panel\n   * @param {SpinalPanelApp} spinalPanelApp the application\n   * @memberof SpinalPanelManagerService\n   */\n  registerPanel(panelName, spinalPanelApp) {\n    this.panels[panelName] = spinalPanelApp;\n  }\n\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  openPanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].openPanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  closePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].closePanel(option);\n    return false;\n  }\n  /**\n   *\n   *\n   * @param {*} panelName\n   * @param {*} option\n   * @returns {bool}\n   * @memberof SpinalPanelManagerService\n   */\n  tooglePanel(panelName, option) {\n    if (typeof this.panels[panelName] !== \"undefined\")\n      return this.panels[panelName].tooglePanel(option);\n    return false;\n  }\n}\n\nmodule.exports = SpinalPanelManagerService;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\n/**\n * Base interface like class of a panel\n *\n * @class SpinalPanelApp\n */\nclass SpinalPanelApp {\n  constructor() {}\n\n  openPanel(option) {}\n  closePanel(option) {}\n  tooglePanel(option) {}\n}\n\nmodule.exports = SpinalPanelApp;\n","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (!option.vueMountComponent) {\n    throw new Error(\"mount : missing option vueMountComponent\");\n  }\n\n  cfg.name = option.name || \"SpinalMount\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.parentContainer = option.parentContainer || document.body;\n  return cfg;\n}\n\nfunction getDialog() {\n  if (!this.dialog) {\n    this.dialog = document.createElement(\"div\");\n    const _compo = document.createElement(\"div\");\n    this.dialog.className = \"spinal-modal-container\";\n    this.cfg.parentContainer.appendChild(this.dialog);\n    this.dialog.appendChild(_compo);\n    this.compoment = new this.cfg.vueMountComponent({\n      propsData: {\n        onFinised: this.onFinised.bind(this)\n      }\n    }).$mount(_compo);\n  }\n  return this.dialog;\n}\n\n/**\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { mount }\n */\nmodule.exports = function(spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n```js\n{\n  name: \"myCustomDialogName\",\n  vueMountComponent: Vue.extend(aVueCompomentDialog),\n  parentContainer: document.body\n}```\n     *\n     * @param {*} option\n     */\n    mount(option) {\n      let cfg = configInit(option);\n      const SpinalMount = class extends SpinalPanelApp {\n        constructor() {\n          super();\n          this.cfg = cfg;\n          this.dialog = null;\n          this.compoment = null;\n        }\n\n        openPanel(opt) {\n          getDialog.call(this);\n          this.compoment.opened(opt);\n        }\n        closePanel(opt) {\n          if (this.dialog !== null) {\n            this.compoment.removed(opt);\n            this.dialog.remove();\n            this.dialog = null;\n            this.compoment = null;\n          }\n        }\n\n        tooglePanel(opt) {\n          if (this.dialog !== null) {\n            this.closePanel(opt);\n          } else {\n            this.openPanel(opt);\n          }\n        }\n\n        /**\n         * called when dialog closed by the dialog itself\n         */\n        onFinised(closeResult) {\n          this.closePanel(closeResult);\n        }\n      };\n      let SpinalMountInstance = new SpinalMount();\n      spinalPanelManagerService.registerPanel(cfg.name, SpinalMountInstance);\n    }\n  };\n};\n","<template>\n  <div v-if=\"types\"\n       class=\"_container\">\n    <div class=\"_containerItem\"\n         v-for=\"(type,index) in types\"\n         :key=\"index\"\n         @click=\"selectType(type)\">\n      <div class=\"text\">{{type}}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"typeLstComponent\",\n  props: {\n    types: {\n      required: true\n    }\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    selectType(type) {\n      this.$emit(\"select\", type);\n    }\n  }\n};\n</script>\n\n<style scoped>\n._container {\n  width: calc(100% - 40px);\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding-left: 20px;\n  padding-right: 20px;\n}\n\n._containerItem {\n  width: 45%;\n  height: 150px;\n  border: 1px solid gray;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10px;\n}\n\n._container ._containerItem .text {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n._containerItem:hover {\n  background-color: gray;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"tablePage\"\n       v-if=\"itemDisplayed\">\n    <div class=\"_mdContainer\"\n         v-if=\"appState === STATES.normal\">\n      <div class=\"header\">\n        <div class=\"backBtn\">\n          <md-button @click=\"back\">\n            <md-icon>arrow_back</md-icon>\n            &nbsp;\n            BACK\n          </md-button>\n        </div>\n        <div class=\"exportImport\">\n          <md-button class=\"md-primary attr_btn\"\n                     @click=\"importExcel\">\n            <md-icon>get_app</md-icon>\n            &nbsp;\n            Import\n          </md-button>\n          <md-button class=\"md-primary attr_btn\"\n                     @click=\"exportData\">\n            <md-icon>publish</md-icon>\n            &nbsp;\n            Export\n          </md-button>\n\n        </div>\n      </div>\n\n      <div class=\"tableContent\">\n        <table-component ref=\"tableContent\"\n                         :tableContent=\"tableContent\"\n                         :header=\"header\"\n                         :typeSelected=\"typeSelected\"\n                         @refresh=\"createAttribute\"></table-component>\n      </div>\n    </div>\n\n    <div class=\"loading\"\n         v-if=\"appState === STATES.loading\">\n      <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n\n    </div>\n  </div>\n\n</template>\n\n<script>\n// import lodash from \"lodash\";\n\n// import CreateAttributeTooltips from \"./tooltips/createAttribute.vue\";\n\nimport TableComponent from \"./table/index.vue\";\nimport spinalExcelManager from \"spinal-env-viewer-plugin-excel-manager-service\";\n\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nimport FileSaver from \"file-saver\";\n\n// import utilities from \"../../../../js/utilities\";\n\nimport { spinalConfigurationService } from \"../../../../services\";\nimport { BIM_OBJECT_TYPE } from \"spinal-env-viewer-plugin-forge/dist/Constants\";\n\nexport default {\n  name: \"tablePage\",\n  components: {\n    // \"create-attribute\": CreateAttributeTooltips,\n    \"table-component\": TableComponent,\n  },\n  props: {\n    itemDisplayed: {\n      type: Array,\n    },\n    attributesDisplayed: {\n      type: Array,\n    },\n    typeSelected: {},\n  },\n  data() {\n    this.STATES = Object.freeze({\n      normal: 0,\n      loading: 1,\n      error: 2,\n    });\n\n    return {\n      // showAttrTooltip: false,\n      appState: this.STATES.normal,\n      tableContent: [],\n      header: [],\n    };\n  },\n  async mounted() {\n    this.tableContent = await this.getTableContent();\n    this.header = await this.getAttributes();\n  },\n  methods: {\n    back() {\n      this.$emit(\"back\");\n    },\n\n    // openCreateAttrTooltips() {\n    //   this.showAttrTooltip = !this.showAttrTooltip;\n    // },\n    createAttribute() {\n      this.$emit(\"refresh\");\n    },\n\n    async getTableContent() {\n      let content = [];\n      let attributes = await this.getAttributes();\n\n      if (this.itemDisplayed) {\n        content = this.itemDisplayed.map((item) => {\n          return {\n            id: item.id,\n            name: item.name,\n            type: item.type,\n            attributes: attributes.map((el) => {\n              return {\n                category: el.category,\n                label: el.label,\n                date: el.date,\n                value: this.getAttributeValue(item, el),\n              };\n            }),\n          };\n        });\n      }\n\n      // return { header: attributes, data: content };\n      return content;\n    },\n\n    getAttributes() {\n      // if (this.itemDisplayed) {\n      //   this.itemDisplayed.forEach(el => {\n      //     attrs.push(...el.attributes);\n      //   });\n      // }\n\n      // return attrs.filter((elem, index, self) => {\n      //   return (\n      //     self.findIndex(t => {\n      //       return t.category === elem.category && t.label === elem.label;\n      //     }) === index\n      //   );\n      // });\n\n      return spinalConfigurationService\n        .getCurrentConfiguration()\n        .then((conf) => {\n          let values = conf.categories;\n\n          // let values = res.get();\n          let attrs = [];\n\n          values.forEach((value) => {\n            let items = value.attributes\n              .map((attr) => {\n                if (attr.show) {\n                  return {\n                    category: value.name,\n                    label: attr.name,\n                  };\n                }\n                return;\n              })\n              .filter((el2) => typeof el2 !== \"undefined\");\n\n            attrs.push(...items);\n          });\n\n          return attrs;\n        });\n    },\n\n    getAttributeValue(item, attr) {\n      let found;\n      if (item && attr) {\n        found = item.attributes.find((el) => el.label === attr.label);\n      }\n\n      return typeof found !== \"undefined\" ? found.value : \"-\";\n    },\n\n    getExportHeadersData() {\n      let headers = [\n        {\n          key: \"id\",\n          header: \"SpinalGraph ID\",\n          width: 65,\n        },\n        {\n          key: \"revit_id\",\n          header: \"Revit ID\",\n          width: 15,\n        },\n        {\n          key: \"name\",\n          header: \"Name\",\n          width: 50,\n        },\n        // {\n        //   key: \"type\",\n        //   header: \"Type\",\n        //   width: 30\n        // }\n      ];\n\n      this.header.forEach((head) => {\n        headers.push({\n          key: `${head.category}_${head.label}`,\n          header: `${head.category} / ${head.label}`,\n          width: 15,\n        });\n      });\n\n      return headers;\n    },\n\n    getValue(item, attribute) {\n      let found = item.attributes.find((el) => {\n        return (\n          el.label === attribute.label && el.category === attribute.category\n        );\n      });\n\n      return typeof found !== \"undefined\" ? found.value : \"-\";\n    },\n\n    _sortByName(items) {\n      return items.sort((a, b) => {\n        const name1 = a.name.toUpperCase();\n        const name2 = b.name.toUpperCase();\n\n        let comparison = 0;\n        if (name1 > name2) {\n          comparison = 1;\n        } else if (name1 < name2) {\n          comparison = -1;\n        }\n        return comparison;\n      });\n    },\n\n    getExportRowsData() {\n      const tableReference = this.$refs[\"tableContent\"];\n\n      if (tableReference) {\n        const liste = tableReference.itemsSelected || [];\n        const tableSorted = this._sortByName(liste);\n        return tableSorted.map((content) => {\n          let info = {\n            id: content.id,\n            name: content.name,\n            revit_id:\n              content.type === BIM_OBJECT_TYPE\n                ? this._getRevitID(content.name)\n                : \"-\",\n          };\n          this.header.forEach((head) => {\n            let value = this.getValue(content, head);\n            info[`${head.category}_${head.label}`] = value;\n          });\n          return info;\n        });\n      }\n    },\n\n    formatExportData() {\n      return [\n        {\n          data: [\n            {\n              name: \"sheet 1\",\n              header: this.getExportHeadersData(),\n              rows: this.getExportRowsData(),\n            },\n          ],\n        },\n      ];\n    },\n\n    exportData() {\n      let result = this.formatExportData();\n\n      spinalExcelManager.export(result).then((buffer) => {\n        FileSaver.saveAs(new Blob(buffer), `spinalcom.xlsx`);\n      });\n    },\n\n    _getRevitID(name) {\n      let reg = /\\[(.*)\\]/gim;\n      let macthed = name.match(reg);\n      if (macthed && macthed.length > 0) {\n        let value = JSON.parse(JSON.stringify(macthed[macthed.length - 1]));\n        return value.replace(/\\[|\\]/g, (el) => \"\");\n      }\n\n      return \"-\";\n    },\n\n    importExcel() {\n      let input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept =\n        \".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n      input.click();\n\n      input.addEventListener(\n        \"change\",\n        async (event) => {\n          const file = event.target.files[0];\n\n          this.appState = this.STATES.loading;\n\n          const dataJson = await spinalExcelManager.convertExcelToJson(file);\n\n          this.$emit(\"openExportDialog\", {\n            data: dataJson,\n            table: this.tableContent,\n          });\n\n          this.$destroy();\n          // this.appState = this.STATES.normal;\n        },\n        false\n      );\n    },\n  },\n  watch: {\n    itemDisplayed: async function () {\n      this.tableContent = await this.getTableContent();\n      this.header = await this.getAttributes();\n    },\n    // attributesDisplayed: function() {\n\n    //   lodash.debounce(this.getTableContent, 500, { maxWait: 1000 });\n    // }\n  },\n  beforeDestroy() {\n    this.appState = this.STATES.normal;\n  },\n};\n</script>\n\n<style scoped>\n.tablePage {\n  width: calc(100% - 10px);\n  height: calc(100% - 10px);\n}\n\n.tablePage ._mdContainer {\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  overflow: hidden !important;\n}\n\n.tablePage ._mdContainer .header {\n  width: 100%;\n  height: 60px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.tablePage ._mdContainer .tableContent {\n  width: 100%;\n  height: calc(100% - 60px);\n}\n\n.categoryInHead {\n  color: #448aff;\n}\n\n.tablePage .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n\n<style>\n.attr_btn {\n  border: 1px solid #448aff;\n  min-width: 100px;\n  max-width: 150px;\n  padding-right: 5px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"_tableContent\" data-app>\n    <div class=\"buttonFab\">\n      <fabs-component\n        :editMode=\"editMode\"\n        :itemsSelected=\"itemsSelected\"\n        :headerDisplayed=\"headerDisplayed\"\n        @configure=\"OpenParamsDialog\"\n        @link=\"LinkItem\"\n        @edit=\"ActiveEditMode\"\n        @valid=\"validateOrCancel\"\n        @setToColumn=\"setValueToColumn\"\n        @generateGroup=\"generateGroup\"\n      ></fabs-component>\n    </div>\n\n    <div class=\"mdToolbar\" md-elevation=\"0\">\n      <div class=\"toolbar-start\">\n        <standard-buttons\n          :itemsSelected=\"itemsSelected\"\n          @refresh=\"refresh\"\n        ></standard-buttons>\n      </div>\n\n      <div class=\"toolbar-end\">\n        <div class=\"searchDiv\">\n          <!-- <md-radio v-model=\"searchBy\"\n                    class=\"md-primary\"\n                    :value=\"0\">Search by name</md-radio>\n\n          <md-radio v-model=\"searchBy\"\n                    class=\"md-primary\"\n                    :value=\"1\">Search by value</md-radio> -->\n\n          <md-field>\n            <!-- <label for=\"searchBy\">Search By</label> -->\n            <md-select v-model=\"searchBy\" name=\"searchBy\" id=\"searchBy\">\n              <md-option :value=\"0\">Search by name</md-option>\n              <md-option :value=\"1\">Search by value</md-option>\n            </md-select>\n          </md-field>\n        </div>\n\n        <md-field>\n          <input\n            class=\"md-input\"\n            placeholder=\"Search...\"\n            v-model=\"searchValue\"\n          />\n          <md-icon>search</md-icon>\n        </md-field>\n      </div>\n    </div>\n    <!-- End First Toolbar -->\n\n    <!-- :value=\"itemsSelected\"\n            :v-model=\"itemsSelected\"  :custom-sort=\"sortByName\"-->\n    <div class=\"_tableContainer\">\n      <v-data-table\n        :headers=\"headerDisplayed\"\n        :items=\"searched\"\n        :rows-per-page-items=\"rowsPerPageText\"\n        :pagination.sync=\"pagination\"\n        dark\n        class=\"elevation-1\"\n      >\n        <template v-slot:headers=\"props\">\n          <tr>\n            <th style=\"text-align: left\">\n              <md-menu class=\"selectionMenu\" md-size=\"small\">\n                <md-button md-menu-trigger>\n                  <md-icon>menu</md-icon>\n                  &nbsp; Select\n                </md-button>\n\n                <md-menu-content>\n                  <md-menu-item\n                    v-for=\"(m, index) in checkboxSelects\"\n                    :key=\"index\"\n                    @click=\"m.action\"\n                  >\n                    <!-- <md-icon>{{\n                      m.value ? 'check_box' : 'check_box_outline_blank'\n                    }}</md-icon> -->\n                    {{ m.text }}\n                  </md-menu-item>\n                </md-menu-content>\n              </md-menu>\n            </th>\n\n            <th\n              style=\"text-align: left\"\n              v-for=\"(head, index) in props.headers\"\n              :key=\"index\"\n            >\n              {{ head.text }}\n            </th>\n            <th></th>\n          </tr>\n        </template>\n\n        <template v-slot:items=\"props\">\n          <td>\n            <v-checkbox\n              v-model=\"props.item.selected\"\n              @change=\"checkItem(props.item)\"\n              primary\n              hide-details\n            ></v-checkbox>\n          </td>\n          <td class=\"nameCell\" @click=\"selectItemInViewer(props.item)\">\n            <md-tooltip md-direction=\"top\">{{ props.item.name }}</md-tooltip>\n            {{ props.item.name }}\n          </td>\n          <td>{{ props.item.type }}</td>\n          <td\n            class=\"text-xs-center\"\n            v-for=\"(attribute, index) in header\"\n            :key=\"index\"\n          >\n            <table-content-component\n              :editable=\"editMode\"\n              :item=\"props.item\"\n              :attribute=\"attribute\"\n              :itemsMap=\"itemsMap\"\n              @setValue=\"refresh\"\n              @findValueInMaquette=\"findValueInMaquette\"\n              ref=\"editableComponent\"\n            >\n            </table-content-component>\n          </td>\n          <td>\n            <md-button\n              class=\"md-icon-button\"\n              @click=\"openAttributesPanel(props.item)\"\n            >\n              <md-tooltip>Open Properties Panel</md-tooltip>\n              <md-icon>tune</md-icon>\n            </md-button>\n          </td>\n        </template>\n      </v-data-table>\n\n      <!-- <div class=\"text-xs-center pt-2\"> -->\n      <!-- <div class=\"paginationDiv\">\n        <v-pagination v-model=\"pagination.page\"\n                      :length=\"pages\"\n                      :total-visible=\"5\"\n                      color=\"blue\"></v-pagination>\n\n        <div class=\"detail\">\n          Total items : {{searched.length}}\n        </div>\n\n      </div> -->\n    </div>\n\n    <!-- <div class=\"pageNumber\"></div> -->\n    <!-- </md-table> -->\n  </div>\n</template>\n\n<script>\nimport TableContentComponent from './tableContent.vue';\nimport CreateAttributeTooltips from '../tooltips/createAttribute.vue';\n// import ChangeColValue from \"../tooltips/changeCol.vue\";\nimport attributeService from '../../../../../services';\n\nimport StandardButtons from './standard-buttons.vue';\nimport FabsComponent from './fabs.vue';\n\nimport EventBus from '../../../../../js/events/events';\n// import tableContentVue from \"./tableContent.vue\";\nimport { SpinalGraphService } from 'spinal-env-viewer-graph-service';\n\nconst {\n  spinalPanelManagerService,\n} = require('spinal-env-viewer-panel-manager-service');\n\nconst debounce = require('lodash.debounce');\n\nimport $ from 'jquery';\n\nexport default {\n  name: 'TableComponent',\n  props: {\n    tableContent: {},\n    header: {},\n    typeSelected: {},\n  },\n  components: {\n    'fabs-component': FabsComponent,\n    'table-content-component': TableContentComponent,\n    'create-attribute': CreateAttributeTooltips,\n    'standard-buttons': StandardButtons,\n  },\n  data() {\n    this.checkboxSelects = [\n      { text: 'select All', value: true, action: this.selectAll },\n      {\n        text: 'select only the current page',\n        value: true,\n        action: this.selectOnLyTheCurrentPage,\n      },\n    ];\n\n    return {\n      showAttrTooltip: false,\n      editMode: false,\n      searched: [],\n      searchValue: '',\n      searchBy: 0,\n\n      itemsSelected: [],\n      headerDisplayed: [],\n      pagination: {\n        page: 1,\n        rowsPerPage: 20,\n        totalItems: 0,\n      },\n      rowsPerPageText: [20, 30, 40],\n\n      itemsMap: new Map(),\n    };\n  },\n\n  created() {\n    this.searchAndFilterTable = debounce(this.searchOnTable, 500);\n  },\n\n  mounted() {\n    this.searched = this.sortByName(\n      this.tableContent.map((el) => {\n        el.selected = false;\n        return el;\n      })\n    );\n    setTimeout(() => {\n      this._addPageNumber();\n    }, 200);\n  },\n\n  methods: {\n    async validateOrCancel(valid) {\n      if (valid) {\n        await this._changeValue();\n      }\n      this.refresh();\n      this.editMode = false;\n    },\n\n    ActiveEditMode() {\n      this.editMode = true;\n    },\n\n    createAttribute() {\n      this.$emit('refresh');\n    },\n\n    filterByName(liste, name) {\n      if (name.trim().length > 0) {\n        return liste\n          .filter((item) => {\n            return item.name.toLowerCase().includes(name.trim().toLowerCase());\n          })\n          .map((el) => {\n            el.selected = false;\n            return el;\n          });\n      }\n\n      return liste.map((el) => {\n        el.selected = false;\n        return el;\n      });\n    },\n\n    filterByValue(liste, value) {\n      if (value.trim().length > 0) {\n        return liste\n          .filter((el) => {\n            let found = el.attributes.find((attr) => {\n              return attr.value\n                .toString()\n                .toLowerCase()\n                .includes(value.trim().toLowerCase());\n            });\n\n            return found ? true : false;\n          })\n          .map((el) => {\n            el.selected = false;\n            return el;\n          });\n      }\n\n      return liste.map((el) => {\n        el.selected = false;\n        return el;\n      });\n    },\n\n    searchOnTable() {\n      switch (this.searchBy) {\n        case 0:\n          this.searched = this.sortByName(\n            this.filterByName(this.tableContent, this.searchValue)\n          );\n          break;\n\n        case 1:\n          this.searched = this.sortByName(\n            this.filterByValue(this.tableContent, this.searchValue)\n          );\n\n          break;\n      }\n    },\n\n    selectAll(value) {\n      this.searched = this.searched.map((el) => {\n        el.selected = true;\n        return el;\n      });\n    },\n\n    unSelectAll() {\n      this.searched = this.searched.map((el) => {\n        el.selected = false;\n        return el;\n      });\n    },\n\n    selectOnLyTheCurrentPage() {\n      this.unSelectAll();\n      this.selectCurrentPage();\n    },\n\n    selectCurrentPage() {\n      const pageNumber = this.pagination.page;\n      const itemByPage = this.pagination.rowsPerPage;\n\n      const begin = (pageNumber - 1) * itemByPage;\n      const end = begin + itemByPage;\n\n      this.searched = this.searched.map((el, index) => {\n        if (index >= begin && index < end) {\n          el.selected = true;\n        }\n        return el;\n      });\n    },\n\n    unSelectCurrentPage() {\n      const pageNumber = this.pagination.page;\n      const itemByPage = this.pagination.rowsPerPage;\n\n      const begin = (pageNumber - 1) * itemByPage;\n      const end = begin + itemByPage;\n\n      this.searched = this.searched.map((el, index) => {\n        if (index >= begin && index < end) {\n          el.selected = false;\n        }\n        return el;\n      });\n    },\n\n    refresh() {\n      this.$emit('refresh');\n    },\n\n    setValueToColumn(res) {\n      let value = res.value;\n      let category = res.column.split('/')[0];\n      let label = res.column.split('/')[1];\n\n      if (res.pageOnly) {\n        let references = this.$refs['editableComponent'];\n\n        references.forEach((el) => {\n          if (res.useMaquetteValue) {\n            this.findValueInMaquette(\n              {\n                id: el.item.id,\n                category: category,\n                attribute: label,\n              },\n              false\n            );\n          } else {\n            el.setValueToColumn(category, label, value);\n          }\n        });\n      } else {\n        for (const id of this.itemsMap.keys()) {\n          if (res.useMaquetteValue) {\n            this.findValueInMaquette(\n              {\n                id: id,\n                category: category,\n                attribute: label,\n              },\n              false\n            );\n          } else {\n            this.setValue(id, category, label, value);\n          }\n        }\n      }\n    },\n\n    LinkItem() {\n      // console.log(this.itemsSelected, this.searched);\n      if (this.itemsSelected.length === 0)\n        return alert('you must select at less one item');\n      spinalPanelManagerService.openPanel('linkToGroupDialog', {\n        type: this.typeSelected,\n        itemSelected: this.itemsSelected,\n      });\n    },\n\n    generateGroup() {\n      // console.log(this.itemsSelected, this.searched);\n\n      //  const itemsFiltered = this._filterElementSelected(this.searched);\n      if (this.itemsSelected.length === 0) {\n        window.alert('select at less one item');\n        return;\n      }\n      //  if (itemsFiltered.length === 0) {\n      //     window.alert(\"select at less one item\");\n      //     return;\n      //  }\n      spinalPanelManagerService.openPanel('generateGroupPanel', {\n        type: this.typeSelected,\n        // items: itemsFiltered,\n        items: this.itemsSelected,\n      });\n    },\n\n    OpenParamsDialog() {\n      // spinalPanelManagerService.openPanel(\"paramDialogComponent\", {\n      //   tableContent: this.tableContent,\n      //   header: this.header,\n      //   typeSelected: this.typeSelected,\n      //   callback: () => {\n      //     this.$emit(\"refresh\");\n      //   }\n      // });\n\n      spinalPanelManagerService.openPanel('configurationPanel', {\n        callback: () => {\n          this.$emit('refresh');\n        },\n      });\n    },\n\n    sortByName(items) {\n      return items.sort((a, b) => {\n        const name1 = a.name.toUpperCase();\n        const name2 = b.name.toUpperCase();\n\n        let comparison = 0;\n        if (name1 > name2) {\n          comparison = 1;\n        } else if (name1 < name2) {\n          comparison = -1;\n        }\n        return comparison;\n      });\n    },\n\n    selectItemInViewer(item) {\n      EventBus.$emit('selectElement', item);\n    },\n\n    constructMap() {\n      for (const content of this.tableContent) {\n        const element = {};\n        for (const attr of content.attributes) {\n          element[`${attr.category}_${attr.label}`] = {\n            value: attr.value,\n            displayValue: attr.value,\n          };\n        }\n        this.itemsMap.set(content.id, element);\n      }\n    },\n\n    async findValueInMaquette(res, alert = true) {\n      const node = SpinalGraphService.getInfo(res.id);\n\n      const value = await attributeService.getBimObjectAttribute(\n        node.get(),\n        res.attribute\n      );\n\n      if (value === '-') {\n        if (alert) window.alert('no value found !');\n        return;\n      } else {\n        this.setValue(res.id, res.category, res.attribute, value);\n      }\n    },\n\n    openAttributesPanel(item) {\n      let info = SpinalGraphService.getInfo(item.id);\n\n      const viewer = window.spinal.ForgeViewer.viewer;\n      let propertyPanel = viewer.getPropertyPanel();\n\n      if (typeof propertyPanel === 'undefined') {\n        propertyPanel =\n          new Autodesk.Viewing.Extensions.ViewerPropertyPanel.prototype.constructor(\n            viewer\n          );\n        viewer.setPropertyPanel(propertyPanel);\n      }\n\n      const model = window.spinal.BimObjectService.getModelByBimfile(\n        info.bimFileId.get()\n      );\n\n      propertyPanel.currentModel = model;\n\n      propertyPanel.setVisible(true);\n      propertyPanel.setNodeProperties(info.dbid.get());\n    },\n\n    openCreateAttrTooltips() {\n      this.showAttrTooltip = !this.showAttrTooltip;\n    },\n\n    setValue(id, category, attribute, value = '-') {\n      const obj = this.itemsMap.get(id);\n      obj[`${category}_${attribute}`]['displayValue'] = value;\n    },\n\n    async _changeValue() {\n      const promises = [];\n\n      for (const nodeId of this.itemsMap.keys()) {\n        const found = this.tableContent.find((el) => el.id === nodeId);\n\n        if (found && found.attributes) {\n          for (const attr of found.attributes) {\n            let value =\n              this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n                'value'\n              ];\n            let displayValue =\n              this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n                'displayValue'\n              ];\n\n            if (value !== displayValue) {\n              promises.push(\n                attributeService.updateAttributeValue(\n                  nodeId,\n                  attr.category,\n                  attr.label,\n                  displayValue\n                )\n              );\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises);\n    },\n\n    async _cancelValue() {\n      for (const nodeId of this.itemsMap.keys()) {\n        const found = this.tableContent.find((el) => el.id === nodeId);\n\n        if (found && found.attributes) {\n          for (const attr of found.attributes) {\n            this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n              'displayValue'\n            ] =\n              this.itemsMap.get(nodeId)[`${attr.category}_${attr.label}`][\n                'value'\n              ];\n          }\n        }\n      }\n\n      return;\n    },\n\n    _addPageNumber() {\n      const actionDiv = $(\n        '._tableContent .theme--dark.v-datatable .v-datatable__actions .v-datatable__actions__range-controls'\n      )[0];\n\n      const div = $(\n        `<div class=\"v-datatable__actions__page-number\">Page : ${this.pagination.page} / ${this.pages}</div>`\n      );\n\n      actionDiv.before(div[0]);\n    },\n\n    _filterElementSelected(liste) {\n      if (this.searchValue.trim().length > 0) {\n        return liste.filter((item) => {\n          const found = this.itemsSelected.find((el) => el.id === item.id);\n          return found;\n        });\n      }\n      return liste;\n    },\n\n    checkItem(item) {\n      this.itemsSelected = this.searched.filter((el) => el.selected);\n    },\n  },\n  computed: {\n    pages() {\n      return Math.ceil(this.searched.length / this.pagination.rowsPerPage);\n    },\n\n    searchDataBind() {\n      return `${this.searchValue}|${this.searchBy}`;\n    },\n  },\n  watch: {\n    searched() {\n      this.itemsSelected = this.searched.filter((el) => el.selected);\n    },\n    async tableContent() {\n      this.constructMap();\n      this.searched = this.sortByName(\n        this.filterByName(this.tableContent, this.searchValue)\n      );\n      this.pagination.totalItems = this.searched.length;\n    },\n\n    header() {\n      let formated = this.header.map((el) => {\n        let val = Object.assign({}, el);\n\n        val['text'] = `${el.category} / ${el.label}`;\n        val['value'] = `${el.category}_${el.label}`;\n\n        return val;\n      });\n\n      this.headerDisplayed = [\n        {\n          text: 'Name',\n          value: 'name',\n        },\n        {\n          text: 'Type',\n          value: 'type',\n        },\n        ...formated,\n      ];\n    },\n\n    pagination() {\n      const div = $('.v-datatable__actions__page-number')[0];\n      if (div) div.innerHTML = `Page : ${this.pagination.page} / ${this.pages}`;\n    },\n\n    searchDataBind() {\n      this.searchAndFilterTable();\n    },\n  },\n};\n</script>\n\n<style scoped>\n._tableContent {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n._tableContent .mdToolbar {\n  width: 100%;\n  height: 100px;\n  padding: 0px;\n  margin-bottom: 10px;\n  background-color: transparent;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n._tableContent .mdToolbar .toolbar-start {\n  width: 40%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n._tableContent .mdToolbar .toolbar-end {\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n._tableContent .mdToolbar .toolbar-end .searchDiv {\n  display: flex;\n}\n\n._tableContent .md-content.md-theme-default {\n  background: transparent !important;\n}\n\n._tableContent ._tableContainer {\n  width: 100%;\n  height: calc(100% - 118px);\n}\n\n._tableContent ._tableContainer .nameCell {\n  padding: 0px;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 200px;\n  text-overflow: ellipsis;\n}\n\n._tableContent ._tableContainer .paginationDiv {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n._tableContent ._tableContainer .paginationDiv .detail {\n  display: flex;\n  align-items: center;\n  font-size: 15px;\n}\n\n.buttonFab {\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n}\n</style>\n\n<style>\n._tableContent ._tableContainer .elevation-1 {\n  width: 100%;\n  height: 100%;\n}\n\n._tableContent ._tableContainer .elevation-1 .v-table__overflow {\n  height: calc(100% - 63px);\n  overflow-y: auto;\n}\n\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow\n  .theme--dark.v-table {\n  background-color: transparent;\n}\n\n.selectionMenu .md-button .md-ripple,\n._tableContent .mdToolbar .md-ripple,\n._tableContent ._tableContainer .md-ripple {\n  padding: 0px;\n}\n\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar {\n  background-color: #fff;\n  width: 10px;\n}\n\n/* background of the scrollbar except button or resizer */\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar-track {\n  /* background-color: #fff; */\n  background-color: #424242;\n}\n\n/* scrollbar itself */\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar-thumb {\n  background-color: #babac0;\n  border-radius: 16px;\n  /* border: 5px solid #fff; */\n}\n\n/* set button(top and bottom of the scrollbar) */\n._tableContent\n  ._tableContainer\n  .elevation-1\n  .v-table__overflow::-webkit-scrollbar-button {\n  display: none;\n}\n\n.mdSpeedDialBtn .md-button .md-ripple {\n  width: 170px;\n  display: flex;\n  background-color: transparent;\n  justify-content: center;\n  align-items: center;\n  /* color: #448aff; */\n}\n\n._tableContent .mdToolbar .toolbar-end .md-field {\n  min-height: unset;\n  padding: 0px;\n  margin: 0px;\n}\n\n._tableContent .mdToolbar .toolbar-end .searchDiv .md-radio:not(.md-disabled),\n.md-radio:not(.md-disabled) .md-radio-label {\n  white-space: nowrap;\n}\n\n._tableContent .theme--dark.v-table,\n._tableContent .theme--dark.v-datatable .v-datatable__actions {\n  background-color: transparent;\n}\n\n._tableContent .theme--dark.v-datatable .v-datatable__actions {\n  width: 90%;\n  justify-content: space-between;\n  /* background-color: crimson; */\n}\n\n._tableContent\n  .theme--dark.v-datatable\n  .v-datatable__actions\n  .v-datatable__actions__select {\n  width: 30%;\n  justify-content: center;\n}\n\n._tableContent\n  .theme--dark.v-datatable\n  .v-datatable__actions\n  .v-datatable__actions__page-number {\n  /* width: 40px;\n  height: 100%;\n  text-align: center;\n  background-color: #448aff;\n  font-size: 1.5em;\n  font-weight: bold; */\n\n  width: 100px;\n  height: 50px;\n  /* font-size: 1.5em; */\n  /* font-weight: bold; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* border: 1px solid;\n  border-radius: 50%; */\n}\n\n._tableContent\n  .v-menu__content.theme--dark.v-menu__content--auto.menuable__content__active {\n  position: fixed;\n}\n\n._tableContent ._tableContainer .selectionMenu .md-list-item-content {\n  justify-content: unset;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"content\"\n       v-if=\"data\"\n       @mouseover=\"mouseIsOver\"\n       @mouseleave=\"mouseOutOver\">\n\n    <div class=\"valueDiv\"\n         :class=\"{'contentEditable' : editable}\"\n         :contenteditable=\"editable\"\n         ref=\"display\"\n         @input=\"changeValue\">\n      {{data.displayValue}}\n    </div>\n\n    <md-button class=\"contentIcon md-icon-button md-dense\"\n               v-if=\"displayBtn()\"\n               @click=\"findValueInMaquette\">\n      <md-tooltip>find value in maquette</md-tooltip>\n      <md-icon>my_location</md-icon>\n    </md-button>\n\n    <!-- <md-icon class=\"contentIcon\"\n             v-if=\"displayBtn()\"\n             @click=\"findValueInMaquette\">my_location</md-icon> -->\n\n  </div>\n</template>\n\n<script>\nimport attributeService from \"../../../../../services\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nconst lodash = require(\"lodash\");\n\nexport default {\n  name: \"tableContentComponent\",\n  props: [\"editable\", \"item\", \"attribute\", \"itemsMap\"],\n  data() {\n    return {\n      // value: \"\",\n      // displayValue: \"\"\n      data: undefined,\n      mouseOver: false,\n    };\n  },\n  mounted() {\n    // this.value = this.getValue();\n    // this.displayValue = this.value;\n\n    this.data = this.getValue();\n  },\n  methods: {\n    getValue() {\n      let value = this.itemsMap.get(this.item.id);\n      return value[`${this.attribute.category}_${this.attribute.label}`];\n      // let found;\n      // if (this.item && this.attribute) {\n      //   found = this.item.attributes.find(el => {\n      //     return (\n      //       el.label === this.attribute.label &&\n      //       el.category === this.attribute.category\n      //     );\n      //   });\n      // }\n      // if (found) {\n      //   found[\"displayValue\"] = found.value;\n      //   return found;\n      // }\n      // return {\n      //   value: \"-\",\n      //   displayValue: \"-\"\n      // };\n    },\n\n    setValue() {\n      this.$emit(\"setValue\", {\n        item: this.item,\n        attribute: this.attribute,\n        value: this.data.displayValue,\n      });\n    },\n\n    cancelValue() {\n      this.data.displayValue = this.data.value;\n      this.$refs.display.innerText = this.data.displayValue;\n      this.itemsMap.get(this.item.id)[\n        `${this.attribute.category}_${this.attribute.label}`\n      ][\"displayValue\"] = this.itemsMap.get(this.item.id)[\n        `${this.attribute.category}_${this.attribute.label}`\n      ][\"value\"];\n    },\n\n    changeValue(event) {\n      const el = event.target;\n\n      this.itemsMap.get(this.item.id)[\n        `${this.attribute.category}_${this.attribute.label}`\n      ][\"displayValue\"] = this.$refs.display.innerText;\n      this.displayValue = el.innerText;\n\n      this.setCursorAtEnd(el);\n    },\n\n    setValueToColumn(category, label, value) {\n      if (\n        value.length > 0 &&\n        this.attribute.category === category &&\n        this.attribute.label === label\n      ) {\n        this.data.displayValue = value;\n        this.$refs.display.innerText = value;\n      }\n    },\n\n    validateValue() {\n      this.data.displayValue = this.$refs.display.innerText;\n\n      if (this.data.displayValue !== this.data.value) {\n        attributeService\n          .updateAttributeValue(\n            this.item.id,\n            this.attribute.category,\n            this.attribute.label,\n            this.data.displayValue\n          )\n          .then(() => {\n            this.data.value = this.data.displayValue;\n            this.setValue();\n          });\n      }\n    },\n\n    mouseIsOver() {\n      this.mouseOver = true;\n    },\n\n    displayBtn() {\n      let nodeInfo = SpinalGraphService.getInfo(this.item.id);\n\n      // const isBimObject = nodeInfo && nodeInfo.type.get() === \"BIMObject\";\n      const is3DItem = nodeInfo && (nodeInfo.dbId || nodeInfo.externalId);\n\n      return this.editable && this.mouseOver && is3DItem;\n    },\n\n    mouseOutOver() {\n      this.mouseOver = false;\n    },\n\n    findValueInMaquette() {\n      this.$emit(\"findValueInMaquette\", {\n        id: this.item.id,\n        category: this.attribute.category,\n        attribute: this.attribute.label,\n      });\n    },\n\n    setCursorAtEnd(el) {\n      el.focus();\n      if (\n        typeof window.getSelection != \"undefined\" &&\n        typeof document.createRange != \"undefined\"\n      ) {\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        range.collapse(false);\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n      } else if (typeof document.body.createTextRange != \"undefined\") {\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(el);\n        textRange.collapse(false);\n        textRange.select();\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.content {\n  width: 100%;\n  word-break: break-word;\n  display: flex;\n}\n\n.content .valueDiv {\n  width: 80%;\n}\n\n.content .contentEditable {\n  /* width: 80%; */\n  padding-bottom: 6px;\n  border-bottom: 1px solid gray;\n}\n\n.content .contentIcon {\n  /* width: 20%;\n  min-width: 10px;\n  width: 10px;\n  height: 10px; */\n  /* z-index: 999999; */\n\n  width: 24px;\n  min-width: 24px;\n  padding: 0px;\n  margin: 0px;\n  height: 24px;\n}\n\n.content .contentIcon:hover {\n  cursor: pointer;\n  color: #448aff;\n}\n</style>\n\n<style>\n.content .contentIcon .md-ripple {\n  padding: 0px;\n}\n</style>","import SpinalAttributeService from './classes/spinalAttributeService';\nimport SpinalConfigurationService from './classes/spinalConfigurationService';\n\nconst spinalAttributeService = new SpinalAttributeService();\nconst spinalConfigurationService = new SpinalConfigurationService()\n\nexport default spinalAttributeService;\n\nexport {\n  spinalAttributeService,\n  spinalConfigurationService\n}","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {SpinalGraphService} from 'spinal-env-viewer-graph-service';\n\nimport {serviceDocumentation} from 'spinal-env-viewer-plugin-documentation-service';\n\nimport {BIM_OBJECT_TYPE} from 'spinal-env-viewer-plugin-forge/dist/Constants';\n\nimport {bimObjectManagerService} from 'spinal-env-viewer-bim-manager-service';\n\nimport {groupManagerService} from 'spinal-env-viewer-plugin-group-manager-service';\n\n// import {\n//   groupService\n// } from \"spinal-env-viewer-room-manager/services/service.js\";\n\nexport default class SpinalAttributeService {\n  constructor() {}\n\n  getAllAttributes(nodeId, liste) {\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n\n    if (realNode) {\n      // return serviceDocumentation.getAllAttributes(realNode).then(\n      //   argAttributes => {\n      //     return argAttributes.map(el => {\n      //       let info = el.get();\n      //       if (liste && liste.indexOf(info.label) === -1) liste.push(info\n      //         .label);\n      //       return info;\n      //     })\n      //   });\n\n      return serviceDocumentation.getCategory(realNode).then((res) => {\n        return res\n          .map((el) => {\n            let attrs = el.element.get();\n            return attrs.map((attr) => {\n              if (liste && liste.indexOf(attr.label) === -1)\n                liste.push(attr.label);\n              attr['category'] = el.nameCat;\n              return attr;\n            });\n          })\n          .flat();\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n  async getAllData(contextId, nodeId) {\n    let context = SpinalGraphService.getRealNode(contextId);\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n    let res = {\n      types: [],\n      attributes: [],\n      data: {},\n    };\n\n    if (context && realNode) {\n      await realNode.findInContext(context, async (node) => {\n        SpinalGraphService._addNode(node);\n        let type = node.getType().get();\n        let info = node.info.get();\n\n        if (res.types.indexOf(type) === -1) {\n          res.types.push(type);\n        }\n\n        if (typeof res.data[type] === 'undefined') res.data[type] = [];\n\n        info['attributes'] = await this.getAllAttributes(\n          info.id,\n          res.attributes\n        );\n\n        res.data[type].push(info);\n      });\n    }\n\n    return res;\n  }\n\n  getBimObjectAttribute(bimObjectInfo, attributeName) {\n    let value = attributeName.toLowerCase();\n\n    let model =\n      window.spinal.BimObjectService.getModelByBimfile(\n        bimObjectInfo.bimFileId\n      ) || window.NOP_VIEWER.model;\n\n    const dbId = bimObjectInfo.dbid || bimObjectInfo.dbId;\n\n    if (model) {\n      return bimObjectManagerService\n        .getBimObjectProperties({\n          model: model,\n          selection: [dbId],\n        })\n        .then((res) => {\n          let properties = res[0].properties[0].properties;\n\n          let found = properties.find((el) => {\n            let attrName = el.attributeName.toLowerCase();\n            let displayName = el.displayName.toLowerCase();\n\n            return attrName === value || displayName === value;\n          });\n\n          if (found) {\n            return found.displayValue;\n          } else {\n            return '-';\n          }\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    } else {\n      return '-';\n    }\n  }\n\n  async createAttribute(nodeId, categoryName, attributeName) {\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n\n    let category;\n\n    category = await serviceDocumentation.getCategoryByName(\n      realNode,\n      categoryName\n    );\n\n    if (typeof category === 'undefined') {\n      category = await serviceDocumentation.addCategoryAttribute(\n        realNode,\n        categoryName\n      );\n    }\n\n    let attr = {\n      label: attributeName,\n      value: '-',\n    };\n    if (realNode.getType().get() === BIM_OBJECT_TYPE) {\n      attr.value = await this.getBimObjectAttribute(\n        realNode.info.get(),\n        attributeName\n      );\n    }\n\n    await serviceDocumentation.addAttributeByCategory(\n      realNode,\n      category,\n      attr.label,\n      attr.value\n    );\n  }\n\n  async updateAttributeValue(\n    nodeId,\n    categoryName,\n    attributeName,\n    attributeValue\n  ) {\n    let attr = await this.getOrCreateAttribute(\n      nodeId,\n      categoryName,\n      attributeName\n    );\n\n    if (attr && attr.value) {\n      attr.value.set(attributeValue);\n    }\n  }\n\n  getBimObjects(nodeId) {\n    // console.log(SpinalGraphService.getInfo(nodeId));\n    // return SpinalGraphService.findNodes(nodeId,)\n  }\n\n  async getOrCreateAttribute(nodeId, categoryName, attributeName) {\n    let realNode = SpinalGraphService.getRealNode(nodeId);\n    if (realNode) {\n      let category = await serviceDocumentation.getCategoryByName(\n        realNode,\n        categoryName\n      );\n\n      if (typeof category === 'undefined') {\n        category = await serviceDocumentation.addCategoryAttribute(\n          realNode,\n          categoryName\n        );\n      }\n\n      let attributes = await serviceDocumentation.getAttributesByCategory(\n        realNode,\n        categoryName\n      );\n\n      let attr = attributes.find((el) => {\n        return el.label.get() === attributeName;\n      });\n\n      if (attr) return attr;\n\n      await serviceDocumentation.addAttributeByCategory(\n        realNode,\n        category,\n        attributeName,\n        '-'\n      );\n\n      attributes = await serviceDocumentation.getAttributesByCategory(\n        realNode,\n        categoryName\n      );\n\n      return attributes.find((el) => {\n        return el.label.get() === attributeName;\n      });\n    }\n  }\n\n  getAllGroupContext(type) {\n    // return Promise.all([SpinalGraphService.getContextWithType(\n    //     groupService.constants.ROOMS_GROUP_CONTEXT),\n    //   SpinalGraphService.getContextWithType(\n    //     groupService.constants.EQUIPMENTS_GROUP_CONTEXT),\n    //   SpinalGraphService.getContextWithType(\n    //     groupService.constants.ENDPOINTS_GROUP_CONTEXT)\n    // ]).then(values => {\n    //   let contexts = values.flat();\n\n    //   let promises = contexts.map(async context => {\n    //     let res = context.info.get();\n    //     res[\"category\"] = await this.getCategory(res.id, res\n    //       .type);\n    //     return res;\n    //   })\n\n    //   return Promise.all(promises);\n\n    // })\n\n    // console.log(\"service type\", type);\n\n    return groupManagerService.getGroupContexts(type).then((contexts) => {\n      const promises = contexts.map(async (context) => {\n        context['category'] = await this.getCategory(context.id);\n        return context;\n      });\n\n      return Promise.all(promises);\n    });\n  }\n\n  async getCategory(contextId) {\n    // let relationName = groupService.constants\n    //   .CONTEXT_TO_CATEGORY_RELATION;\n\n    // return SpinalGraphService.getChildren(contextId, [relationName]).then(\n    //   children => {\n    //     let promises = children.map(async child => {\n    //       let info = child.get();\n    //       info[\"groups\"] = await this.getGroup(child.id, child\n    //         .type);\n    //       return info;\n    //     })\n\n    //     return Promise.all(promises);\n\n    //   })\n\n    const categories = await groupManagerService.getCategories(contextId);\n\n    const promises = categories.map(async (category) => {\n      let info = category.get();\n      info['groups'] = await this.getGroup(category.id);\n      return info;\n    });\n\n    return Promise.all(promises);\n  }\n\n  async getGroup(categoryId) {\n    // let relationName = groupService.constants.CATEGORY_TO_GROUP_RELATION;\n\n    // return SpinalGraphService.getChildren(categoryId, [relationName])\n    //   .then(\n    //     children => {\n    //       return children.map(el => el.get());\n    //     })\n\n    const groups = await groupManagerService.getGroups(categoryId);\n\n    return groups.map((el) => el.get());\n  }\n\n  linkItem(contextId, parentId, itemId) {\n    // groupService.linkElementToGroup(parentId, itemId, contextId)\n    return groupManagerService.linkElementToGroup(contextId, parentId, itemId);\n  }\n}\n","\"use strict\";\n/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nexports.__esModule = true;\nexports.REFERENCE_OBJECT_RELATION_TYPE = exports.BIM_OBJECT_RELATION_TYPE = exports.BIM_NODE_RELATION_TYPE = exports.BIM_OBJECT_VERSION_RELATION_TYPE = exports.REFERENCE_OBJECT_RELATION_NAME = exports.BIM_OBJECT_VERSION_RELATION_NAME = exports.BIM_OBJECT_RELATION_NAME = exports.BIM_NODE_RELATION_NAME = exports.BIM_CONTEXT_RELATION_TYPE = exports.BIM_CONTEXT_RELATION_NAME = exports.BIM_OBJECT_TYPE = exports.PART_RELATION_TYPE = exports.SCENE_RELATION_TYPE = exports.PART_RELATION_NAME = exports.SCENE_TYPE = exports.SCENE_RELATION_NAME = void 0;\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar constants_js_1 = require(\"spinal-env-viewer-context-geographic-service/build/constants.js\");\nexports.SCENE_RELATION_NAME = 'hasScene';\nexports.SCENE_TYPE = \"scene\";\nexports.PART_RELATION_NAME = 'hasParts';\nexports.SCENE_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.PART_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_OBJECT_TYPE = constants_js_1.EQUIPMENT_TYPE;\nexports.BIM_CONTEXT_RELATION_NAME = \"hasBimContext\";\nexports.BIM_CONTEXT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_NODE_RELATION_NAME = \"hasBimNode\";\nexports.BIM_OBJECT_RELATION_NAME = constants_js_1.EQUIPMENT_RELATION;\nexports.BIM_OBJECT_VERSION_RELATION_NAME = \"hasBimVersion\";\nexports.REFERENCE_OBJECT_RELATION_NAME = constants_js_1.REFERENCE_RELATION;\nexports.BIM_OBJECT_VERSION_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_NODE_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.BIM_OBJECT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\nexports.REFERENCE_OBJECT_RELATION_TYPE = spinal_env_viewer_graph_service_1.SPINAL_RELATION_PTR_LST_TYPE;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bimService_1 = require(\"./bimObjects/bimService\");\nexports.bimObjectManagerService = bimService_1.default;\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BimObjectManagerService {\n    constructor() { }\n    getAllBimObjectsProperties(model) {\n        return this.getBimObjectProperties([\n            {\n                model: model,\n                selection: this.getLeafDbIds(model).selection\n            }\n        ]);\n    }\n    getBimObjectProperties(argBimObjects) {\n        // let properties = [];\n        let bimOjects = Array.isArray(argBimObjects)\n            ? argBimObjects\n            : [argBimObjects];\n        let promises = bimOjects.map(el => {\n            return this._getProperties(el.model, el.selection);\n        });\n        return Promise.all(promises).then(res => {\n            return res;\n        });\n    }\n    getLeafDbIds(model, rootId) {\n        const tree = model.getInstanceTree();\n        const dbIds = [];\n        if (typeof rootId === \"undefined\") {\n            rootId = [tree.nodeAccess.rootId];\n        }\n        else {\n            rootId = Array.isArray(rootId) ? rootId : [rootId];\n        }\n        rootId.forEach(el => {\n            const queue = [el];\n            let hasChildren;\n            while (queue.length) {\n                let id = queue.pop();\n                hasChildren = false;\n                tree.enumNodeChildren(id, childId => {\n                    hasChildren = true;\n                    queue.push(childId);\n                });\n                if (!hasChildren) {\n                    dbIds.push(id);\n                }\n            }\n        });\n        return { model: model, selection: dbIds };\n    }\n    getBimObjectsByPropertiesName(model, properties) {\n        return this.getAllBimObjectsProperties(model).then(res => {\n            let result = [];\n            for (let i = 0; i < res.length; i++) {\n                const element = res[i];\n                for (let j = 0; j < element.properties.length; j++) {\n                    const property = element.properties[j];\n                    if (typeof this._getLabel(property, properties) !== \"undefined\") {\n                        result.push(property);\n                    }\n                    // }\n                }\n                return result;\n            }\n        });\n    }\n    getBimObjectsValidated(referential, regEx) {\n        return this.getBimObjectProperties(referential).then(res => {\n            return res.map(element => {\n                return {\n                    model: element.model,\n                    properties: element.properties.filter(el => {\n                        return this._isValid(el, regEx);\n                    })\n                };\n            });\n        });\n    }\n    getBimObjectsByName(model, bimObjectName, labelName) {\n        return new Promise(resolve => {\n            model.search(bimObjectName.trim(), (res) => __awaiter(this, void 0, void 0, function* () {\n                let properties = yield this.getBimObjectProperties([\n                    { model: model, selection: res }\n                ]);\n                resolve(properties);\n            }), () => {\n                resolve([]);\n            }, labelName);\n        });\n    }\n    ////////////////////////////////////////////////////////////////////////\n    //                             PRIVATES                               //\n    ////////////////////////////////////////////////////////////////////////\n    _getProperties(model, selection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let properties = selection.map(el => {\n                return new Promise(resolve => {\n                    model.getProperties(el, res => {\n                        // properties.push(res);\n                        resolve(res);\n                    }, err => {\n                        resolve(undefined);\n                    });\n                });\n            });\n            return {\n                model: model,\n                properties: yield Promise.all(properties)\n            };\n        });\n    }\n    _getAllDbIds(model) {\n        var instanceTree = model.getData().instanceTree;\n        var allDbIdsStr = Object.keys(instanceTree.nodeAccess.dbIdToIndex);\n        return allDbIdsStr.map(function (id) {\n            return parseInt(id);\n        });\n    }\n    _getLabel(bim, properties) {\n        for (let i = 0; i < properties.length; i++) {\n            const propertieValue = properties[i].value;\n            const propertyName = properties[i].name;\n            const found = bim.properties.find(el => {\n                return typeof propertieValue === \"undefined\" ||\n                    propertieValue.length === 0\n                    ? el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase()\n                    : el.displayName.toLowerCase() ===\n                        propertyName.trim().toLocaleLowerCase() &&\n                        propertieValue == el.displayValue;\n            });\n            if (typeof found === \"undefined\") {\n                return undefined;\n            }\n        }\n        return true;\n    }\n    _isValid(el, regEx) {\n        for (let i = 0; i < regEx.length; i++) {\n            let nameRegex = regEx[i].nameRegex;\n            let valueRegex = regEx[i].valueRegex;\n            let found = el.properties.find(res => {\n                if (typeof valueRegex === \"undefined\") {\n                    return nameRegex.test(res.displayName);\n                }\n                return (nameRegex.test(res.displayName) && valueRegex.test(res.displayValue));\n            });\n            if (typeof found === \"undefined\") {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.default = new BimObjectManagerService();\n//# sourceMappingURL=bimService.js.map",null,"import {\n  groupManagerService\n} from \"spinal-env-viewer-plugin-group-manager-service\";\n\n\nimport {\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\n\nexport default class SpinalConfigurationService {\n  constructor() {\n    this.CONTEXT_NAME = \"NomenclatureConfiguration\";\n    this.CONFIGURATION_PROFIL_TYPE = \"AttributeConfiguration\";\n    this.ATTRIBUTE_TYPE = \"configurationAttribute\";\n  }\n\n  async createOrGetContext() {\n    const context = await groupManagerService.createGroupContext(\n      this.CONTEXT_NAME,\n      this.CONFIGURATION_PROFIL_TYPE\n    );\n\n    return context;\n  }\n\n  async createCategory(categoryName, iconName) {\n    const context = await this.createOrGetContext();\n    const contextId = context ? context.info.id.get() : undefined;\n\n    return groupManagerService.addCategory(contextId, categoryName, iconName);\n  }\n\n  async createGroup(categoryId, groupName, groupColor) {\n    const context = await this.createOrGetContext();\n    const contextId = context ? context.info.id.get() : undefined;\n\n    return groupManagerService.addGroup(\n      contextId,\n      categoryId,\n      groupName,\n      groupColor\n    );\n  }\n\n  async createConfiguration(\n    groupId,\n    configurationName,\n    configurationCategories = []\n  ) {\n    const context = await this.createOrGetContext();\n    const contextId = context ? context.info.id.get() : undefined;\n\n    const configurationNodeId = SpinalGraphService.createNode({\n        name: configurationName,\n        type: this.CONFIGURATION_PROFIL_TYPE,\n      },\n      new Model({\n        name: configurationName,\n        categories: configurationCategories,\n      })\n    );\n\n    await groupManagerService.linkElementToGroup(\n      contextId,\n      groupId,\n      configurationNodeId\n    );\n\n    return SpinalGraphService.getRealNode(configurationNodeId);\n  }\n\n  setAsCurrentConfiguration(nodeId) {\n    this.createOrGetContext().then((context) => {\n      let realNode = SpinalGraphService.getRealNode(nodeId);\n\n      if (realNode) {\n        if (context.info.currentConfiguration) {\n          context.info.rem_attr(\"currentConfiguration\");\n        }\n\n        context.info.add_attr({\n          currentConfiguration: new Ptr(realNode),\n        });\n      }\n    });\n  }\n\n  async deleteCurrentConf() {\n    const context = await this.createOrGetContext();\n    if (context && context.info.currentConfiguration)\n      context.info.rem_attr(\"currentConfiguration\");\n  }\n\n  getCurrentConfiguration() {\n    return this.createOrGetContext().then((context) => {\n      let confPtr = context.info.currentConfiguration;\n\n      if (typeof confPtr !== \"undefined\") {\n        return new Promise((resolve) => {\n          confPtr.load((realNode) => {\n            SpinalGraphService._addNode(realNode);\n            return realNode.getElement().then((el) => {\n              let element = el.get();\n              element[\"id\"] = realNode.info.id.get();\n              resolve(element);\n            });\n          });\n        });\n      }\n\n      return {\n        name: \"\",\n        categories: [],\n      };\n    });\n  }\n\n  editConfiguration(configurationId, configurationElement) {\n    let realNode = SpinalGraphService.getRealNode(configurationId);\n\n    if (realNode) {\n      realNode.getElement().then((element) => {\n        element.set(configurationElement);\n      });\n    }\n  }\n\n  async getConfigurationById(configId) {\n    const realNode = SpinalGraphService.getRealNode(configId);\n\n    if (realNode) {\n      const elementModel = await realNode.getElement();\n\n      if (elementModel) {\n        let element = elementModel.get();\n        element[\"id\"] = configId;\n        return element;\n      }\n    }\n\n  }\n\n  async getCategories() {\n    const context = await this.createOrGetContext();\n    return groupManagerService.getCategories(context.info.id.get());\n  }\n\n  getGroups(nodeId) {\n    // const context = await this.createOrGetContext();\n    return groupManagerService.getGroups(nodeId);\n  }\n\n  getConfigurations(groupId) {\n    return groupManagerService.getElementsLinkedToGroup(groupId);\n  }\n\n\n  isGroup(type) {\n    return groupManagerService.isGroup(type);\n  }\n\n  isCategory(type) {\n    return groupManagerService.isCategory(type);\n  }\n\n  async getElementGroup(id) {\n    const parents = await SpinalGraphService.getParents(id, []);\n\n    return parents[0];\n  }\n\n  async getTree(info) {\n    const obj = {\n      categoryId: undefined,\n      groupId: undefined,\n      configId: undefined\n    }\n\n    if (this.isCategory(info.type)) {\n\n      obj.categoryId = info.id;\n\n    } else if (this.isGroup(info.type)) {\n\n      const category = await groupManagerService.getGroupCategory(info.id);\n      if (category) obj.categoryId = category.id.get();\n\n      obj.groupId = info.id;\n\n    } else if (info.type === this.CONFIGURATION_PROFIL_TYPE) {\n\n      obj.configId = info.id;\n      const group = await this.getElementGroup(info.id);\n\n      if (group) {\n        obj.groupId = group.id.get();\n        const category = await groupManagerService.getGroupCategory(group.id\n          .get());\n\n        if (category) obj.categoryId = category.id.get();\n\n      }\n\n    }\n\n    return obj;\n\n  }\n\n}","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover trigger=\"manual\"\n             :open=\"show\"\n             :auto-hide=\"false\"\n             offset=\"16\">\n    <!-- <md-button class=\"md-primary attr_btn\"\n               title=\"add attribute\"\n               @click=\"open\">\n      <md-icon>add</md-icon>\n      ADD ATTRIBUTE\n    </md-button> -->\n\n    <md-button @click=\"open\"\n               class=\"md-elevation-4 md-dense\"\n               style=\"background-color : #448aff\">\n      <md-icon>add</md-icon>\n      &nbsp;\n      Add attribute\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <label>Category name</label>\n            <md-input v-model=\"categoryName\"></md-input>\n          </md-field>\n\n          <md-field class=\"tooltip-content\">\n            <label>Label Name</label>\n            <md-input v-model=\"attributeName\"></md-input>\n          </md-field>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             @click=\"open\">Close</a>\n\n          <a class=\"btn\"\n             @click=\"Validate\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n\n</template>\n\n<script>\nimport attributeService from \"../../../../../services\";\nexport default {\n  name: \"createAttributeTooltip\",\n  props: {\n    show: {\n      default: false\n    },\n    itemFiltered: {\n      required: true\n    }\n  },\n  data() {\n    return {\n      categoryName: \"\",\n      attributeName: \"\"\n    };\n  },\n  methods: {\n    open() {\n      this.$emit(\"open\");\n    },\n    Validate() {\n      if (this.itemFiltered.length > 0) {\n        let promises = this.itemFiltered.map(el => {\n          return attributeService.createAttribute(\n            el.id,\n            this.categoryName,\n            this.attributeName\n          );\n        });\n\n        return Promise.all(promises).then(() => {\n          this.$emit(\"validate\");\n        });\n      } else {\n        alert(\"select at least one item !\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer {\n  width: 200px;\n  height: 200px;\n  color: black;\n}\n\n.popoverContainer ._popoverContent {\n  width: 100%;\n  height: calc(100% - 40px);\n}\n\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>\n\n<style lang=\"scss\">\n.tooltip {\n  // ...\n\n  &.popover {\n    // $color: #f9f9f9;\n    $color: rgb(44, 43, 43);\n\n    .popoverContainer {\n      pointer-events: auto;\n    }\n\n    .popover-inner {\n      background: $color;\n      color: black;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 5px 30px rgba(black, 0.1);\n    }\n\n    .popover-arrow {\n      border-color: $color;\n    }\n  }\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-button v-for=\"(btn,index) in buttons\"\n               :key=\"index\"\n               @click=\"btn.action\"\n               class=\"md-icon-button md-primary\">\n\n      <md-tooltip>{{btn.name}}</md-tooltip>\n      <md-icon>{{btn.icon}}</md-icon>\n\n    </md-button>\n  </div>\n</template>\n\n<script>\nimport EventBus from \"../../../../../js/events/events.js\";\n\nexport default {\n  name: \"standardButton\",\n  props: { itemsSelected: {} },\n  data() {\n    this.buttons = [\n      { name: \"isolate\", icon: \"settings_overscan\", action: this.isolate },\n      { name: \"select BIM Objects\", icon: \"devices\", action: this.select },\n      { name: \"zoom\", icon: \"zoom_in\", action: this.zoom },\n      { name: \"refresh\", icon: \"refresh\", action: this.refresh }\n    ];\n    return {};\n  },\n  methods: {\n    select() {\n      const ids = this.itemsSelected.map(el => el.id);\n      if (ids.length > 0) {\n        EventBus.$emit(\"select\", ids);\n      } else {\n        alert(\"no item selected\");\n      }\n    },\n    isolate() {\n      const ids = this.itemsSelected.map(el => el.id);\n\n      if (ids.length > 0) {\n        EventBus.$emit(\"isolate\", ids);\n      } else {\n        alert(\"no item selected\");\n      }\n    },\n    zoom() {\n      const ids = this.itemsSelected.map(el => el.id);\n\n      if (ids.length > 0) {\n        EventBus.$emit(\"fitToView\", ids);\n      } else {\n        alert(\"no item selected\");\n      }\n    },\n    refresh() {\n      this.$emit(\"refresh\");\n    }\n  }\n};\n</script>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n\n<template>\n  <div class=\"fabs\">\n    <md-speed-dial v-if=\"!editMode\"\n                   md-direction=\"top\"\n                   md-event=\"click\">\n      <md-speed-dial-target class=\"md-fab md-mini md-primary\">\n        <md-icon class=\"md-morph-initial\">menu</md-icon>\n        <md-icon class=\"md-morph-final\">menu_open</md-icon>\n      </md-speed-dial-target>\n\n      <md-speed-dial-content class=\"mdSpeedDialBtn\">\n        <md-button v-for=\"(btn, index) in buttons\"\n                   :key=\"index\"\n                   class=\"md-primary md-dense\"\n                   @click=\"sendEvent(btn.event)\">\n          <md-icon>{{ btn.icon }}</md-icon>\n          &nbsp;\n          {{ btn.text }}\n        </md-button>\n      </md-speed-dial-content>\n    </md-speed-dial>\n\n    <!-- IF EDIT MODE -->\n    <div v-if=\"editMode\"\n         class=\"editModeBtn\">\n      <md-button title=\"Cancel modification\"\n                 @click=\"validateOrCancel(false)\"\n                 class=\"md-fab md-mini md-plain\">\n        <md-icon>clear</md-icon>\n      </md-button>\n\n      <change-col-value :columns=\"headerDisplayed\"\n                        :itemsSelected=\"itemsSelected\"\n                        @setValueToColumn=\"setValueToColumn\">\n      </change-col-value>\n\n      <md-button title=\"Validate modification\"\n                 @click=\"validateOrCancel(true)\"\n                 class=\"md-fab md-mini md-primary\">\n        <md-icon>done</md-icon>\n      </md-button>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport ChangeColValue from \"../tooltips/changeCol.vue\";\n\nexport default {\n  name: \"fabComponent\",\n  components: {\n    \"change-col-value\": ChangeColValue\n  },\n  props: { editMode: {}, itemsSelected: {}, headerDisplayed: {} },\n  data() {\n    this.buttons = [\n      {\n        icon: \"build\",\n        text: \"Classify in group\",\n        event: \"generateGroup\"\n      },\n      {\n        icon: \"settings_applications\",\n        text: \"Configuration\",\n        event: \"configure\",\n        action: this.OpenParamsDialog\n      },\n      {\n        icon: \"link\",\n        text: \"Link to group\",\n        event: \"link\",\n        action: this.LinkItem\n      },\n      {\n        icon: \"edit\",\n        text: \"Active edit mode\",\n        event: \"edit\",\n        action: this.ActiveEditMode\n      }\n    ];\n\n    return {};\n  },\n  methods: {\n    sendEvent(name) {\n      this.$emit(name);\n    },\n    setValueToColumn(res) {\n      this.$emit(\"setToColumn\", res);\n    },\n    validateOrCancel(res) {\n      this.$emit(\"valid\", res);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.fabs {\n  width: 100%;\n  height: 100%;\n}\n\n.fabs .mdSpeedDialBtn {\n  z-index: 999;\n}\n\n.fabs > * {\n  justify-content: center;\n  align-items: flex-end;\n}\n\n.fabs .editModeBtn {\n  display: flex;\n  flex-direction: row;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover :auto-hide=\"false\"\n             offset=\"16\">\n    <!-- <md-button class=\"md-primary attr_btn\"\n               title=\"add attribute\">\n      <md-icon>view_column</md-icon>\n      EDIT COLUMN\n    </md-button> -->\n\n    <md-button title=\"edit column value\"\n               class=\"md-fab md-mini md-plain\"\n               style=\"background-color : #f39508\">\n      <md-icon>view_column</md-icon>\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <md-select v-model=\"columnSelected\"\n                       placeholder=\"Select Column\"\n                       name=\"columns\"\n                       id=\"columns\">\n\n              <md-option v-if=\"!columnsFiltered || columnsFiltered.length === 0\"\n                         disabled>No column</md-option>\n\n              <md-option v-for=\"(head,index) in columnsFiltered\"\n                         :key=\"index\"\n                         :value=\"`${head.category}/${head.label}`\">\n                {{`${head.category} / ${head.label}`}}\n              </md-option>\n            </md-select>\n          </md-field>\n\n          <!-- <div class=\"tooltip-content\">\n            <md-checkbox v-model=\"getValueOnBIM\"\n                         class=\"md-primary\">get BIM Value</md-checkbox>\n          </div> -->\n\n          <md-checkbox v-model=\"useMaquetteValue\"\n                       class=\"md-primary\">Import from BIM value</md-checkbox>\n\n          <md-field class=\"tooltip-content\">\n            <label>Value</label>\n            <md-input v-model=\"value\"\n                      :disabled=\"useMaquetteValue || (!columnSelected || columnSelected.trim().length === 0)\">\n            </md-input>\n          </md-field>\n\n          <div class=\"tooltip-content pageSelect\">\n\n            <md-radio v-model=\"pageOnly\"\n                      class=\"md-primary\"\n                      :value=\"true\">This page only</md-radio>\n\n            <md-radio v-model=\"pageOnly\"\n                      class=\"md-primary\"\n                      :value=\"false\">All page</md-radio>\n\n          </div>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             v-close-popover>Close</a>\n\n          <a class=\"btn\"\n             v-close-popover\n             @click=\"Validate\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n\n</template>\n\n<script>\n// import attributeService from \"../../../../services\";\n\nexport default {\n  name: \"createAttributeTooltip\",\n  props: {\n    columns: {},\n    itemsSelected: {}\n  },\n  data() {\n    return {\n      columnSelected: \"\",\n      columnsFiltered: [],\n      useMaquetteValue: false,\n      pageOnly: true,\n      value: \"\"\n    };\n  },\n  mounted() {\n    this.columnsFiltered = this.columns.filter(el => {\n      const hasNoCategory = typeof el.category !== \"undefined\";\n      const hasNoLabel = typeof el.label !== \"undefined\";\n\n      return hasNoCategory && hasNoLabel;\n    });\n  },\n  methods: {\n    Validate() {\n      if (\n        this.itemsSelected &&\n        (this.value.trim().length > 0 || this.useMaquetteValue)\n      ) {\n        const value = this.$emit(\"setValueToColumn\", {\n          value: this.value.trim(),\n          column: this.columnSelected,\n          pageOnly: this.pageOnly,\n          useMaquetteValue: this.useMaquetteValue\n        });\n      } else {\n        alert(\"select at least one item, select value !\");\n      }\n    }\n  },\n  watch: {\n    useMaquetteValue() {\n      if (this.useMaquetteValue) this.value = \"\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer {\n  width: 250px;\n  height: 350px;\n  color: white;\n}\n\n.popoverContainer ._popoverContent {\n  width: 100%;\n  height: calc(100% - 40px);\n}\n\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>\n\n<style lang=\"scss\">\n.tooltip {\n  // ...\n\n  &.popover {\n    // $color: #f9f9f9;\n    $color: rgb(44, 43, 43);\n\n    .popoverContainer {\n      pointer-events: auto;\n    }\n\n    .popover-inner {\n      background: $color;\n      color: black;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 5px 30px rgba(black, 0.1);\n    }\n\n    .popover-arrow {\n      border-color: $color;\n    }\n  }\n}\n</style>\n\n<style>\n.md-select-menu.md-menu-content-bottom-start.md-menu-content-small.md-menu-content.md-theme-default {\n  z-index: 99999 !important;\n}\n</style>","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content\n      class=\"paramsContainer\"\n      style=\"overflow : hidden\"\n   >\n      <md-tabs\n         class=\"myTabs\"\n         md-alignment=\"centered\"\n         @md-changed=\"changeTab\"\n         :md-active-tab=\"tabDisplayed ? 'all-params-tab' : 'current-param-tab'\"\n      >\n\n         <md-tab\n            id=\"current-param-tab\"\n            md-label=\"Current configuration\"\n            md-icon=\"offline_pin\"\n         ></md-tab>\n\n         <md-tab\n            id=\"all-params-tab\"\n            md-label=\"Configurations\"\n            md-icon=\"settings_applications\"\n         ></md-tab>\n\n         <!-- <md-tab id=\"all-params-tab\"\n                md-label=\"All configuration\"\n                md-icon=\"settings_applications\"></md-tab> -->\n\n      </md-tabs>\n\n      <md-content class=\"tabsContent\">\n\n         <configuration-template\n            class=\"content\"\n            v-if=\"tabDisplayed === 1\"\n            :tempData=\"tempData\"\n            :item=\"item\"\n            :currentConfiguration=\"currentConfiguration\"\n            @currentConf=\"getCurrentConfiguration\"\n         >\n         </configuration-template>\n\n         <current-configuration-template\n            class=\"content\"\n            v-if=\"tabDisplayed === 0\"\n            :currentConfiguration=\"currentConfiguration\"\n         >\n         </current-configuration-template>\n\n         <!-- <current-param v-if=\"tabDisplayed === 0\"\n                       :currentConfiguration=\"currentConf\"\n                       @refresh=\"RefreshData\">\n        </current-param>\n\n        <edit-param v-if=\"tabDisplayed === 1\"\n                    :data=\"allConfigurations\"\n                    :currentConfiguration=\"currentConf\"\n                    @change=\"changeCurrentConf\"\n                    @refresh=\"RefreshData\"></edit-param>\n\n        <create-param v-if=\"tabDisplayed === 2\"\n                      @refresh=\"RefreshData\"></create-param> -->\n\n      </md-content>\n\n   </md-content>\n</template>\n\n<script>\nimport ConfigurationCrud from \"./components/configuration-crud.vue\";\n\nimport CurrentConfigurationComponent from \"./components/currentConfiguration.vue\";\n\nimport { spinalConfigurationService } from \"../../../services\";\n\nexport default {\n   name: \"configurationPanel\",\n   components: {\n      \"configuration-template\": ConfigurationCrud,\n      \"current-configuration-template\": CurrentConfigurationComponent,\n   },\n   data() {\n      return {\n         tabDisplayed: 1,\n         currentConfiguration: undefined,\n         item: {\n            categorySelected: \"\",\n            categories: [],\n            groupSelected: \"\",\n            groups: [],\n            configurationSelected: \"\",\n            configurations: [],\n         },\n         tempData: {},\n      };\n   },\n   mounted() {},\n   methods: {\n      opened(params) {\n         this.getCurrentConfiguration();\n\n         if (params && Object.keys(params).length > 0) {\n            this.tempData = params;\n            this.tabDisplayed = 1;\n         }\n\n         // if (params.hasOwnProperty(\"categoryId\")) {\n         //   this.item.categorySelected = params.categoryId;\n         //   this.tabDisplayed = 1;\n         // }\n\n         // if (params.hasOwnProperty(\"groupId\")) {\n         //   this.item.groupSelected = params.groupId;\n         //   this.tabDisplayed = 1;\n         // }\n\n         // if (params.hasOwnProperty(\"configId\")) {\n         //   this.item.configurationSelected = params.configId;\n         //   this.tabDisplayed = 1;\n         // }\n      },\n\n      closed() {},\n\n      changeTab(activeTab) {\n         switch (activeTab) {\n            case \"current-param-tab\":\n               this.tabDisplayed = 0;\n               break;\n\n            case \"all-params-tab\":\n               this.tabDisplayed = 1;\n               break;\n\n            // case \"create-param-tab\":\n            //   this.tabDisplayed = 2;\n            //   break;\n         }\n      },\n\n      async getCurrentConfiguration() {\n         const currentConf = await spinalConfigurationService.getCurrentConfiguration();\n         // console.log(\"currentConf\", currentConf);\n         this.currentConfiguration = currentConf.id;\n      },\n   },\n};\n</script>\n\n<style scoped>\n.paramsContainer {\n   width: 100%;\n   height: calc(100% - 15px);\n   overflow: hidden;\n}\n\n.paramsContainer .myTabs {\n   width: 100%;\n   height: 70px;\n}\n\n.paramsContainer .tabsContent {\n   width: calc(100% - 20px);\n   height: calc(100% - 90px);\n   margin: auto;\n   margin-top: 10px;\n   overflow: hidden;\n}\n</style>\n\n<style>\n.paramsContainer .myTabs .md-tabs-navigation .md-button {\n   margin: 0;\n   cursor: pointer;\n   border-radius: 0;\n   font-size: 13px;\n   flex: 1 0 50%;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <md-content class=\"_container md-scrollbar\">\n\n      <div class=\"fabs\">\n         <md-speed-dial\n            md-direction=\"top\"\n            md-event=\"click\"\n            md-effect=\"scale\"\n         >\n            <md-speed-dial-target class=\"md-fab md-bottom-right md-mini md-primary\">\n               <md-icon class=\"md-morph-initial\">menu</md-icon>\n               <md-icon class=\"md-morph-final\">menu_open</md-icon>\n            </md-speed-dial-target>\n\n            <md-speed-dial-content class=\"configMdSpeedDialBtn\">\n\n               <create-item\n                  :title=\"'Create Configuration Profil'\"\n                  :fieldText=\"'Configuration Profil Name'\"\n                  @create=\"createConfiguration\"\n                  :disabled=\"!item.groupSelected\"\n                  v-if=\"item.groupSelected\"\n                  :icon=\"'add'\"\n               ></create-item>\n\n               <create-item\n                  :title=\"'Create Group'\"\n                  :fieldText=\"'Group Name'\"\n                  @create=\"createGroup\"\n                  :disabled=\"!item.categorySelected\"\n                  v-if=\"item.categorySelected\"\n                  :icon=\"'add'\"\n               ></create-item>\n\n               <create-item\n                  :title=\"'Create Category'\"\n                  :fieldText=\"'Category Name'\"\n                  @create=\"createCategory\"\n                  :icon=\"'add'\"\n               ></create-item>\n\n               <!-- <md-button class=\"md-primary md-dense\"\n                     @click.stop=\"importFile\">\n            <md-tooltip>Import</md-tooltip>\n            Import\n          </md-button>\n\n          <md-button class=\"md-primary md-dense\"\n                     @click.stop=\"exportFile\">\n            <md-tooltip>Export</md-tooltip>\n            Export\n          </md-button> -->\n\n            </md-speed-dial-content>\n         </md-speed-dial>\n      </div>\n\n      <div class=\"exportHead\">\n\n         <v-btn\n            outline\n            color=\"#448aff\"\n            @click.stop=\"importFile\"\n         >Import</v-btn>\n\n         <v-btn\n            outline\n            color=\"#448aff\"\n            @click.stop=\"exportFile\"\n         >Export</v-btn>\n\n      </div>\n\n      <div class=\"header\">\n\n         <div class=\"select select-categories\">\n            <select-item\n               :placeholder=\"'Select category'\"\n               :data=\"item.categories\"\n               @select=\"selectCategory\"\n               :value=\"item.categorySelected\"\n            ></select-item>\n         </div>\n\n         <div class=\"select select-groups\">\n            <select-item\n               :placeholder=\"'Select group'\"\n               :data=\"item.groups\"\n               @select=\"selectGroup\"\n               :value=\"item.groupSelected\"\n            ></select-item>\n         </div>\n\n         <div class=\"select select-configurations\">\n            <select-item\n               :placeholder=\"'select configuration'\"\n               :data=\"item.configurations\"\n               @select=\"selectConfiguration\"\n               :value=\"item.configurationSelected\"\n            ></select-item>\n         </div>\n\n      </div>\n\n      <div class=\"body\">\n\n         <div\n            class=\"no-conf\"\n            v-if=\"!item.configurationSelected\"\n         >\n            Select a configuration\n         </div>\n\n         <configuration-component\n            v-else\n            :configurationSelected=\"item.configurationSelected\"\n            :currentConfiguration=\"currentConfiguration\"\n            @getCurrentConf=\"currentConf\"\n         >\n         </configuration-component>\n\n      </div>\n   </md-content>\n</template>\n\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nimport { spinalConfigurationService } from \"../../../../services\";\n\nimport spinalExcelManager from \"spinal-env-viewer-plugin-excel-manager-service\";\n\nimport FileSaver from \"file-saver\";\n\nimport SelectItem from \"./mdSelect.vue\";\nimport CreateItem from \"./createItem.vue\";\nimport ConfigurationsComponent from \"./configurations.vue\";\n\nexport default {\n   name: \"configuration-template\",\n   props: {\n      currentConfiguration: {},\n      item: {},\n      tempData: {},\n   },\n   components: {\n      \"create-item\": CreateItem,\n      \"select-item\": SelectItem,\n      \"configuration-component\": ConfigurationsComponent,\n   },\n   data() {\n      return {};\n   },\n   async mounted() {\n      const categories = await spinalConfigurationService.getCategories();\n      this.item.categories = categories.map((el) => el.get());\n   },\n\n   methods: {\n      async createCategory(name) {\n         const category = await spinalConfigurationService.createCategory(\n            name,\n            \"add\"\n         );\n\n         if (category && category.info) {\n            this.item.categories.push(category.info.get());\n            this.selectCategory(category.getId().get());\n         }\n      },\n\n      async createGroup(name) {\n         const group = await spinalConfigurationService.createGroup(\n            this.item.categorySelected,\n            name,\n            \"#000000\"\n         );\n\n         if (group && group.info) {\n            this.item.groups.push(group.info.get());\n            this.selectGroup(group.getId().get());\n         }\n      },\n\n      async createConfiguration(name) {\n         const configuration = await spinalConfigurationService.createConfiguration(\n            this.item.groupSelected,\n            name\n         );\n\n         if (configuration && configuration.info) {\n            this.item.configurations.push(configuration.info.get());\n            this.selectConfiguration(configuration.getId().get());\n         }\n      },\n\n      async selectCategory(id) {\n         if (typeof id !== \"undefined\") {\n            this.item.categorySelected = id;\n            const groups = await spinalConfigurationService.getGroups(id);\n            this.item.groups = groups.map((el) => el.get());\n\n            // init group && configuration\n            this.item.groupSelected = undefined;\n            this.item.configurationSelected = undefined;\n            // end\n         }\n      },\n\n      async selectGroup(id) {\n         if (typeof id !== \"undefined\") {\n            this.item.groupSelected = id;\n            const configurations = await spinalConfigurationService.getConfigurations(\n               id\n            );\n            this.item.configurations = configurations.map((el) => el.get());\n\n            // init configuration\n            this.item.configurationSelected = undefined;\n            //end\n         }\n      },\n\n      async selectConfiguration(id) {\n         this.item.configurationSelected = id;\n      },\n\n      currentConf() {\n         this.$emit(\"currentConf\");\n      },\n\n      async exportFile() {\n         //\n         // spinalPanelManagerService.openPanel(\"exportConfigurationDialog\", {});\n\n         const result = {\n            data: [],\n         };\n\n         if (this.item.configurationSelected) {\n            const item = await this._formatConfiguration(\n               this.item.configurationSelected,\n               this.item.groupSelected,\n               this.item.categorySelected\n            );\n\n            result.data.push(item);\n         } else if (this.item.groupSelected) {\n            const items = await this._getGroupsItems(this.item.groupSelected);\n            result.data.push(...items);\n         } else if (this.item.categorySelected) {\n            let groupsItems = this.item.groups.map((group) => {\n               return this._getGroupsItems(group.id);\n            });\n\n            let items = await Promise.all(groupsItems);\n\n            items.forEach((el) => {\n               result.data.push(...el);\n            });\n         }\n\n         spinalExcelManager.export(result).then((buffer) => {\n            FileSaver.saveAs(new Blob(buffer), `configurations_spinalcom.xlsx`);\n         });\n      },\n\n      importFile() {\n         let input = document.createElement(\"input\");\n         input.type = \"file\";\n         input.accept =\n            \".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n         input.click();\n\n         input.addEventListener(\n            \"change\",\n            async (event) => {\n               const file = event.target.files[0];\n               const dataJson = await spinalExcelManager.convertConfigurationFile(\n                  file\n               );\n\n               spinalPanelManagerService.openPanel(\n                  \"importConfigurationDialog\",\n                  dataJson\n               );\n            },\n            false\n         );\n      },\n\n      async _formatConfiguration(configurationId, groupId, categoryId) {\n         const data = {\n            name: \"\",\n            header: this._getExcelHeaders(),\n            rows: [],\n         };\n\n         const categoryFound = this.item.categories.find(\n            (el) => el.id === categoryId\n         );\n\n         const groupFound = this.item.groups.find((el) => el.id === groupId);\n\n         const configFound = this.item.configurations.find(\n            (el) => el.id === configurationId\n         );\n\n         const config = await spinalConfigurationService.getConfigurationById(\n            configurationId\n         );\n\n         if (categoryFound && groupFound && configFound && config) {\n            // data.name = `${categoryFound.name}|${groupFound.name}|${config.name}`;\n\n            data.name = configFound.name;\n\n            data.rows.push([\"Category : \", categoryFound.name]);\n            data.rows.push([\"Group : \", groupFound.name]);\n            data.rows.push([\"Configuration Profil : \", configFound.name]);\n\n            data.rows.push([, ,]);\n            data.rows.push([, ,]);\n            data.rows.push([\"Attribute Category\", \"Attribute Name\"]);\n\n            config.categories.forEach((category) => {\n               const res = category.attributes.map((attribute) => {\n                  // return {\n                  //   name: attribute.name,\n                  //   attrCategory: category.name,\n                  //   ConfigProfil: configFound.name,\n                  //   spinalCategory: categoryFound.name,\n                  //   spinalGroup: groupFound.name\n                  // };\n\n                  return [category.name, attribute.name];\n               });\n\n               data.rows.push(...res);\n            });\n            return data;\n         }\n      },\n\n      _getExcelHeaders(attributes) {\n         const header = [\n            // {\n            //   key: \"attrCategory\",\n            //   header: \"Attribute Category\",\n            //   width: 30\n            // },\n            // {\n            //   key: \"name\",\n            //   header: \"Attribute Name\",\n            //   width: 30\n            // }\n            // // {\n            // //   key: \"ConfigProfil\",\n            // //   header: \"Configuration Profil\",\n            // //   width: 30\n            // // },\n            // // {\n            // //   key: \"spinalCategory\",\n            // //   header: \"Category\",\n            // //   width: 30\n            // // },\n            // // {\n            // //   key: \"spinalGroup\",\n            // //   header: \"Group\",\n            // //   width: 30\n            // // }\n         ];\n\n         return header;\n      },\n\n      async _getGroupsItems(groupId) {\n         let configurations = [];\n\n         if (this.item.groupSelected === groupId) {\n            configurations = this.item.configurations;\n         } else {\n            configurations = await spinalConfigurationService.getConfigurations(\n               groupId\n            );\n         }\n\n         const promises = configurations.map((configuration) => {\n            return this._formatConfiguration(\n               configuration.id,\n               groupId,\n               this.item.categorySelected\n            );\n         });\n\n         return Promise.all(promises);\n      },\n\n      Open(...res) {\n         // console.log(\"res\", res);\n      },\n   },\n   watch: {\n      async tempData() {\n         if (this.tempData.hasOwnProperty(\"categoryId\")) {\n            await this.selectCategory(this.tempData.categoryId);\n         }\n\n         if (this.tempData.hasOwnProperty(\"groupId\")) {\n            await this.selectGroup(this.tempData.groupId);\n         }\n\n         if (this.tempData.hasOwnProperty(\"configId\")) {\n            await this.selectConfiguration(this.tempData.configId);\n         }\n      },\n   },\n};\n</script>\n\n<style scoped>\n._container {\n   width: 100%;\n   height: 100%;\n   background-color: transparent;\n   overflow: hidden;\n   overflow-x: auto;\n}\n\n._container .header {\n   width: 100%;\n   height: 40px;\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   margin-bottom: 10px;\n}\n\n._container .header .select {\n   width: 25%;\n}\n\n._container .exportHead {\n   height: 40px;\n   display: flex;\n   justify-content: flex-end;\n   margin-bottom: 10px;\n}\n\n._container .body {\n   width: 100%;\n   height: calc(100% - 100px);\n}\n\n._container .body .no-conf {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   font-size: 1.6em;\n}\n\n._container .fabs {\n   position: absolute;\n   bottom: 24px;\n   right: 20px;\n   display: flex;\n   justify-content: flex-end;\n   align-items: flex-end;\n   /* width: 300px;\n  height: 300px; */\n}\n\n._container .fabs > * {\n   display: flex;\n   justify-content: center;\n   align-items: flex-end;\n}\n\n/* ._container .fabs > * {\n  justify-content: center;\n  align-items: flex-end;\n} */\n\n/* ._container .fabs .configMdSpeedDialBtn {\n  z-index: 999;\n} */\n</style>\n\n\n<style>\n._container .fabs .configMdSpeedDialBtn .md-button .md-ripple {\n   width: 250px;\n}\n\n._container .fabs .md-speed-dial-content {\n   z-index: unset !important;\n}\n\n/* \nwhen fabs not active \n*/\n._container\n   .fabs\n   .md-speed-dial.md-theme-default.md-direction-top.md-effect-scale\n   .md-speed-dial-content.configMdSpeedDialBtn {\n   display: none;\n}\n\n/* \nwhen fabs active \n*/\n._container\n   .fabs\n   .md-speed-dial.md-theme-default.md-active.md-direction-top.md-effect-scale\n   .md-speed-dial-content.configMdSpeedDialBtn {\n   display: flex;\n}\n\n/* ._container\n  .fabs\n  .md-speed-dial.md-direction-top.md-effect-fling\n  .md-speed-dial-content\n  .md-button {\n  background-color: #448aff;\n  color: white;\n} */\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"select-content\">\n\n    <md-field class=\"select-field\">\n      <md-select v-model=\"itemSelected\"\n                 name=\"select-item\"\n                 id=\"select-item\"\n                 :placeholder=\"placeholder\"\n                 @md-selected=\"selectItem\">\n        <md-option v-if=\"!data || data.length === 0\"\n                   disabled>No Item found</md-option>\n\n        <md-option v-for=\"(item,index) in data\"\n                   :key=\"index\"\n                   :value=\"item.id\">\n          {{item.name}}\n        </md-option>\n\n      </md-select>\n    </md-field>\n\n    <!-- <md-button class=\"create-button md-icon-button md-primary\">\n      <md-icon>add</md-icon>\n    </md-button> -->\n\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: \"select-template\",\n  props: {\n    placeholder: {\n      type: String\n    },\n    data: {},\n    value: {}\n  },\n  data() {\n    return {\n      itemSelected: undefined\n    };\n  },\n  methods: {\n    selectItem(id) {\n      if (id) this.$emit(\"select\", id);\n    }\n  },\n  watch: {\n    value() {\n      this.itemSelected = this.value;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.select-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.select-content .select-field {\n  min-height: 0px;\n}\n</style>\n\n<style>\n.select-content .create-button .md-ripple {\n  padding: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover :auto-hide=\"false\"\n             offset=\"16\"\n             :open=\"show && !disabled\">\n\n    <md-button class=\"md-dense md-raised md-primary\"\n               :disabled=\"disabled\"\n               @click.stop=\"OpenAttribute\">\n      <md-tooltip>{{title}}</md-tooltip>\n      <md-icon>{{icon}}</md-icon>\n      {{title}}\n    </md-button>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <label>{{fieldText}}</label>\n            <md-input v-model=\"name\"></md-input>\n          </md-field>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             @click=\"Validate(false)\">Close</a>\n\n          <a class=\"btn\"\n             @click=\"Validate(true)\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n</template>\n\n<script>\nexport default {\n  name: \"createItem\",\n  props: {\n    title: {\n      type: String\n    },\n    fieldText: {\n      type: String\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      name: \"\",\n      show: false\n    };\n  },\n  methods: {\n    Validate(isValid) {\n      this.show = false;\n      if (isValid && this.name.trim().length > 0) {\n        // if (this.category) {\n        //   // let varCategory = serviceDocumentation.\n\n        //   this.$emit(\"add\", { category: this.category, label: this.name });\n        // } else {\n        //   this.$emit(\"add\", { category: this.name });\n        // }\n        this.$emit(\"create\", this.name.trim());\n      }\n\n      this.name = \"\";\n    },\n\n    OpenAttribute() {\n      this.show = !this.show;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div\n      class=\"container\"\n      v-if=\"configurationData\"\n   >\n      <div class=\"header\">\n\n         <div class=\"name\">\n            <md-tooltip>{{configurationData.name}}</md-tooltip>\n            <span>{{configurationData.name}}</span>\n         </div>\n\n         <div class=\"actions\">\n            <div\n               class=\"editMode\"\n               v-if=\"editMode\"\n            >\n               <!-- <v-btn outline\n                 color=\"#448aff\">Add Category</v-btn> -->\n\n               <!-- color=\"#448aff\" -->\n\n               <v-btn\n                  outline\n                  color=\"teal\"\n                  @click=\"save\"\n               >Save</v-btn>\n\n               <v-btn\n                  outline\n                  color=\"#ff5252\"\n                  @click=\"cancel\"\n               >Cancel</v-btn>\n\n               <menu-component @add=\"addAttributeCategory\"></menu-component>\n            </div>\n\n            <div\n               class=\"normalMode\"\n               v-else\n            >\n               <!-- #448aff -->\n               <v-btn\n                  outline\n                  color=\"orange\"\n                  @click=\"activeEditMode\"\n               >Active edit Mode</v-btn>\n\n               <v-btn\n                  outline\n                  color=\"#448aff\"\n                  v-if=\"configurationSelected !== currentConfiguration\"\n                  @click=\"setAsCurrentConf\"\n               >Set as Current Configuration</v-btn>\n\n               <v-btn\n                  outline\n                  v-if=\"configurationSelected === currentConfiguration\"\n                  color=\"teal\"\n                  @click=\"deleteAsCurrentConf\"\n               >\n                  <v-icon>check</v-icon>\n                  Current Configuration\n               </v-btn>\n\n            </div>\n         </div>\n      </div>\n\n      <div class=\"content\">\n         <display-list\n            class=\"displayList md-scrollbar\"\n            :categories=\"configurationData.categories\"\n            :editMode=\"editMode\"\n            :message=\"'No Attribute category found !'\"\n            @add=\"addSubItem\"\n            @remove=\"removeItem\"\n         >\n         </display-list>\n      </div>\n\n   </div>\n</template>\n\n<script>\nimport DisplayList from \"./displayList.vue\";\nimport MenuComponent from \"../../attributePanel/components/tooltips/addItem.vue\";\n\nimport { spinalConfigurationService } from \"../../../../services\";\nimport EventBus from \"../../../../js/events/events\";\n\nexport default {\n   name: \"editConfiguration\",\n   components: {\n      \"display-list\": DisplayList,\n      \"menu-component\": MenuComponent,\n   },\n   props: {\n      configurationSelected: {\n         type: String,\n         default: \"\",\n      },\n      currentConfiguration: {},\n   },\n   data() {\n      return {\n         configurationData: {\n            name: \"\",\n            categories: [],\n         },\n         editMode: false,\n      };\n   },\n   mounted() {\n      this.getConfiguration();\n   },\n   methods: {\n      async getConfiguration() {\n         if (this.configurationSelected) {\n            this.configurationData = await spinalConfigurationService.getConfigurationById(\n               this.configurationSelected\n            );\n         } else {\n            this.configurationData = {\n               name: \"\",\n               categories: [],\n            };\n         }\n      },\n\n      activeEditMode() {\n         this.editMode = true;\n      },\n\n      async setAsCurrentConf() {\n         await spinalConfigurationService.setAsCurrentConfiguration(\n            this.configurationSelected\n         );\n         this.$emit(\"getCurrentConf\");\n         this.refreshPanel();\n      },\n\n      async deleteAsCurrentConf() {\n         await spinalConfigurationService.deleteCurrentConf();\n\n         this.$emit(\"getCurrentConf\");\n         this.refreshPanel();\n      },\n\n      addAttributeCategory(res) {\n         let found = this.configurationData.categories.find(\n            (el) => el.name === res.category\n         );\n\n         if (!found) {\n            this.configurationData.categories.push({\n               id: Date.now(),\n               name: res.category,\n               attributes: [],\n            });\n         }\n      },\n\n      addSubItem(res) {\n         if (res.category && res.label) {\n            let found = this.configurationData.categories.find((el) => {\n               return el.name === res.category;\n            });\n\n            if (found) {\n               let attrFound = found.attributes.find(\n                  (el) => el.name === res.label\n               );\n               if (typeof attrFound === \"undefined\") {\n                  found.attributes.push({\n                     show: true,\n                     name: res.label,\n                     id: Date.now(),\n                  });\n               }\n            }\n         }\n      },\n\n      removeItem(res) {\n         if (typeof res.attr === \"undefined\") {\n            this.configurationData.categories = this.configurationData.categories.filter(\n               (el) => {\n                  return el.id !== res.category.id;\n               }\n            );\n         } else {\n            let found = this.configurationData.categories.find((el) => {\n               return el.id === res.category.id;\n            });\n\n            if (found) {\n               found.attributes = found.attributes.filter(\n                  (el) => el.id !== res.attr.id\n               );\n            }\n         }\n      },\n\n      cancel() {\n         this.editMode = false;\n         this.getConfiguration();\n      },\n\n      async save() {\n         this.editMode = false;\n         await spinalConfigurationService.editConfiguration(\n            this.configurationSelected,\n            this.configurationData\n         );\n\n         this.refreshPanel();\n      },\n\n      refreshPanel() {\n         EventBus.$emit(\"refreshTable\");\n      },\n   },\n   watch: {\n      configurationSelected: function () {\n         this.getConfiguration();\n      },\n   },\n};\n</script>\n\n<style scoped>\n.container {\n   width: 100%;\n   height: 100%;\n   padding: 0;\n   overflow: hidden;\n}\n\n.container .header {\n   width: 100%;\n   height: 50px;\n   display: flex;\n   justify-content: space-between;\n}\n\n.container .header .name {\n   width: 30%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   padding: 0 5px 0 5px;\n   font-size: 1.5em;\n}\n\n.container .header .name span {\n   white-space: nowrap;\n   overflow: hidden;\n   text-overflow: ellipsis;\n}\n\n.container .header .actions {\n   /* width: 60%; */\n   height: 100%;\n   flex: 1 0 60%;\n   display: flex;\n   justify-content: flex-end;\n   flex-wrap: nowrap;\n}\n\n.container .header .actions .editMode,\n.container .header .actions .normalMode {\n   display: flex;\n   flex-wrap: nowrap;\n}\n\n.container .content {\n   width: 100%;\n   height: calc(100% - 50px);\n   overflow: hidden;\n}\n\n.container .content .displayList {\n   width: 100%;\n   height: 100%;\n   overflow: hidden;\n   overflow-y: auto;\n}\n</style>\n\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"myListContainer  md-scrollbar\">\n    <v-list v-if=\"categories && categories.length > 0\"\n            class=\"listContainer\"\n            expand\n            dark\n            flat>\n      <v-list-group v-for=\"(item,index) in categories\"\n                    :key=\"index\"\n                    prepend-icon=\"keyboard_arrow_down\"\n                    append-icon=\"\"\n                    :one-line=\"false\"\n                    no-action>\n        <v-list-tile slot=\"activator\">\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{item.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n\n            <menu-component :category=\"item.name\"\n                            @add=\"addAttributes\"></menu-component>\n\n          </v-list-tile-action>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn flat\n                   icon\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click.stop=\"remove(item,true)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       SubHeaders                      |\n        ---------------------------------------------------------\n     -->\n        <v-list-tile v-for=\"(subItem,subIndex) in item.attributes\"\n                     :key=\"subIndex\">\n\n          <v-list-tile-action>\n            <v-checkbox :disabled=\"!editMode\"\n                        color=\"blue\"\n                        v-model=\"subItem.show\"></v-checkbox>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{subItem.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn icon\n                   flat\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click=\"remove(item,false,subItem)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       End SubHeaders                  |\n        ---------------------------------------------------------\n     -->\n\n      </v-list-group>\n    </v-list>\n\n    <div class=\"emptyList\"\n         v-if=\"categories && categories.length === 0\">\n      {{message}}\n    </div>\n\n  </md-content>\n\n</template>\n\n<script>\nimport menuComponent from \"../../attributePanel/components/tooltips/addItem.vue\";\n\nexport default {\n  name: \"displayListComponent\",\n  components: {\n    \"menu-component\": menuComponent\n  },\n  props: {\n    categories: {},\n    message: {\n      type: String,\n      default: \"No data found\"\n    },\n    editMode: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  methods: {\n    addAttributes(res) {\n      this.$emit(\"add\", res);\n    },\n\n    remove(category, isCategory, attribute) {\n      let item = {\n        category: category,\n        attr: attribute\n      };\n\n      this.$emit(\"remove\", item);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.myListContainer {\n  width: 100%;\n  height: calc(100% - 50px);\n  /* overflow: auto; */\n}\n\n.myListContainer .listContainer {\n  width: 100%;\n  height: 100%;\n  /* overflow: auto; */\n}\n\n.myListContainer .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <v-popover :auto-hide=\"false\"\n             offset=\"16\"\n             :open=\"show\">\n\n    <!-- <md-button v-if=\"category\"\n               class=\"md-icon-button\"\n               title=\"add label\"\n               @click.stop=\"OpenAttribute\">\n      <md-icon>add_circle_outline</md-icon>\n    </md-button> -->\n\n    <!-- <md-button v-if=\"!category\"\n               class=\"md-icon-button md-raised md-primary\"\n               title=\"add category\"\n               @click.stop=\"OpenAttribute\">\n      <md-icon>add</md-icon>\n    </md-button> -->\n\n    <!-- <md-button v-if=\"!category\"\n               title=\"add category\"\n               @click.stop=\"OpenAttribute\"\n               class=\"md-dense md-primary\">\n      <md-icon>add</md-icon>\n      &nbsp;\n      Add category\n    </md-button> -->\n\n    <v-btn outline\n           color=\"#448aff\"\n           v-if=\"!category\"\n           title=\"add category\"\n           @click.stop=\"OpenAttribute\">Add category</v-btn>\n\n    <v-btn v-if=\"category\"\n           title=\"add label\"\n           @click.stop=\"OpenAttribute\"\n           flat\n           icon\n           small\n           color=\"blue\">\n      <v-icon>add</v-icon>\n    </v-btn>\n\n    <template slot=\"popover\">\n      <div class=\"popoverContainer\">\n        <div class=\"_popoverContent\">\n\n          <md-field class=\"tooltip-content\">\n            <label>{{category ? \"Add attribute\" : \"Add category\"}}</label>\n            <md-input v-model=\"name\"></md-input>\n          </md-field>\n\n        </div>\n\n        <div class=\"_popoverBtn\">\n          <a class=\"btn\"\n             @click=\"Validate(false)\">Close</a>\n\n          <a class=\"btn\"\n             @click=\"Validate(true)\">OK</a>\n        </div>\n      </div>\n\n    </template>\n\n  </v-popover>\n</template>\n\n<script>\nimport { serviceDocumentation } from \"spinal-env-viewer-plugin-documentation-service\";\n\nexport default {\n  name: \"CreateLabel\",\n  props: [\"category\"],\n  data() {\n    return {\n      name: \"\",\n      show: false\n    };\n  },\n  methods: {\n    Validate(isValid) {\n      this.show = false;\n      if (isValid && this.name.trim().length > 0) {\n        if (this.category) {\n          // let varCategory = serviceDocumentation.\n\n          this.$emit(\"add\", { category: this.category, label: this.name });\n        } else {\n          this.$emit(\"add\", { category: this.name });\n        }\n      }\n\n      this.name = \"\";\n    },\n    OpenAttribute() {\n      this.show = !this.show;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.popoverContainer ._popoverBtn {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.popoverContainer ._popoverBtn .btn {\n  font-size: 15px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-content class=\"container md-scrollbar\">\n\n    <!-- <div class=\"header\">\n      <v-btn outline\n             color=\"#448aff\">Import</v-btn>\n\n      <v-btn outline\n             color=\"#448aff\">Export</v-btn>\n    </div> -->\n\n    <configuration-component class=\"configuration\"\n                             v-if=\"currentConfiguration\"\n                             :configurationSelected=\"currentConfiguration\"\n                             :currentConfiguration=\"currentConfiguration\">\n    </configuration-component>\n\n    <div class=\"empty\"\n         v-else>\n      No configuration Set\n    </div>\n\n  </md-content>\n</template>\n\n<script>\nimport ConfigurationsComponent from \"./configurations.vue\";\n\nexport default {\n  name: \"current-configuration-template\",\n  components: {\n    \"configuration-component\": ConfigurationsComponent\n  },\n  props: {\n    currentConfiguration: {}\n  },\n  data() {\n    return {};\n  },\n  methods: {}\n};\n</script>\n\n<style scoped>\n.container {\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  overflow: hidden;\n  overflow-x: auto;\n}\n\n.container .header {\n  width: 100%;\n  height: 50px;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.container .configuration {\n  width: 100%;\n  height: 100%;\n  /* height: calc(100% - 60px); */\n}\n\n.container .empty {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5em;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"_container\">\n\n      <md-steppers\n         md-vertical\n         class=\"steppers\"\n         :md-dynamic-height=\"true\"\n         @md-changed=\"changeStep\"\n      >\n\n         <md-step\n            id=\"first\"\n            md-label=\"Selection Step\"\n            md-description=\"select\"\n         >\n            <md-content class=\"step-container md-scrollbar\">\n               <selection-step\n                  :data=\"data\"\n                  :type=\"type\"\n                  @changeType=\"changeType\"\n               ></selection-step>\n            </md-content>\n\n         </md-step>\n\n         <md-step\n            id=\"second\"\n            md-label=\"Configuration Step\"\n            md-description=\"configure\"\n            :md-error=\"errorInConfig\"\n         >\n            <md-content class=\"step-container md-scrollbar\">\n               <configuration-step\n                  :data=\"data\"\n                  :type=\"type\"\n               ></configuration-step>\n            </md-content>\n\n         </md-step>\n\n         <md-step\n            id=\"third\"\n            md-label=\"Creation Step\"\n            md-description=\"create\"\n         >\n\n            <md-content class=\"step-container md-scrollbar\">\n               <launch-generation-step\n                  :data=\"data\"\n                  :type=\"type\"\n                  :error=\"firstStepError\"\n               >\n               </launch-generation-step>\n            </md-content>\n\n         </md-step>\n\n      </md-steppers>\n   </div>\n</template>\n\n\n<script>\nimport ConfigurationStep from \"./components/configurationStep.vue\";\nimport launchGenerationStep from \"./components/launchGenerationStep.vue\";\nimport selectionStep from \"./components/selectionStep.vue\";\n\nimport create_data from \"./js/data.js\";\nimport data_json from \"./js/data.config\";\n\nexport default {\n   name: \"generateGroupPanel\",\n   components: {\n      \"configuration-step\": ConfigurationStep,\n      \"launch-generation-step\": launchGenerationStep,\n      \"selection-step\": selectionStep,\n   },\n   data() {\n      this.CREATE_DATA = create_data;\n\n      return {\n         active: \"first\",\n         errorInConfig: null,\n         first: false,\n         second: false,\n         third: false,\n         type: undefined,\n         firstStepError: false,\n         data: Object.assign({}, data_json),\n         verification: {\n            context: {\n               isVerified: false,\n               message: \"\",\n            },\n            category: {\n               isVerified: false,\n               message: \"\",\n            },\n            group: {\n               isVerified: false,\n               message: \"\",\n            },\n         },\n      };\n   },\n   methods: {\n      opened(params) {\n         this.type = params.type;\n         this.data.items = params.items;\n      },\n\n      closed() {},\n\n      errorInFirstStep() {\n         this.errorInConfig = \"This is an error!\";\n      },\n\n      changeStep(step) {\n         if (step === \"second\") {\n            this.errorInConfig = null;\n         } else if (step === \"third\") {\n            const contextIsOk = this.contextIsVerified();\n            const categoryisOk = this.categoryOrGroupIsVerified(\n               this.data.category\n            );\n            const groupIsOk = this.categoryOrGroupIsVerified(this.data.group);\n\n            if (!contextIsOk || !categoryisOk || !groupIsOk) {\n               this.firstStepError = true;\n               this.errorInConfig = \"This is an error!\";\n            } else {\n               this.firstStepError = false;\n            }\n         }\n      },\n\n      changeType(type) {\n         this.type = type;\n         // if (this.data.context.create) {\n         //   this.data.context.id = \"\";\n         //   this.data.context.name = \"\";\n         // }\n      },\n\n      contextIsVerified() {\n         if (this.data.context.create) {\n            return this.data.context.name.trim().length > 0;\n         } else {\n            return (\n               this.data.context.name.trim().length > 0 &&\n               this.data.context.id.trim().length > 0\n            );\n         }\n      },\n\n      categoryOrGroupIsVerified(info) {\n         // createBy: this.CREATE_DATA.attribute,\n         //     contains: false,\n         //     name: \"\",\n         //     regex: \"\",\n         //     separator: \"\",\n         //     index: -1\n\n         if (info.createBy === this.CREATE_DATA.attribute) {\n            return info.regex.toString().trim().length > 0;\n         } else if (info.createBy === this.CREATE_DATA.name) {\n            return parseInt(info.index) >= 1;\n            // return info.separator.length > 0 && parseInt(info.index) >= 1;\n         } else if (info.createBy === this.CREATE_DATA.fixed) {\n            return info.fixedValue.trim().length > 0;\n         }\n      },\n\n      // setDone(res) {\n      //   this[res.id] = true;\n\n      //   if (res.index) {\n      //     this.active = res.index;\n      //   }\n      // }\n   },\n};\n</script>\n\n<style scoped>\n._container {\n   width: 100%;\n   height: calc(100% - 15px);\n}\n\n._container .steppers {\n   width: 100%;\n   height: 100%;\n   background-color: transparent;\n}\n\n._container .steppers .step-container {\n   height: 100%;\n   max-height: 450px;\n   padding: 16px;\n   overflow: hidden;\n   overflow-y: auto;\n   background-color: transparent;\n}\n</style>\n\n<style>\n._container .md-steppers.md-vertical .md-stepper-content {\n   padding: 0 0 0 35px;\n}\n\n/* ._container .md-steppers.md-steppers.md-vertical .md-stepper-content.md-active {\n  max-height: calc(100% - 180px);\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"_container\">\n    <div class=\"content\"\n         v-if=\"isLoaded\">\n\n      <context-vue :data=\"data\"\n                   :type=\"type\"\n                   @load=\"refresh\"></context-vue>\n\n      <!-- <md-divider></md-divider> -->\n\n      <category-vue :data=\"data\"></category-vue>\n\n      <!-- <md-divider></md-divider> -->\n\n      <group-vue :data=\"data\"></group-vue>\n\n    </div>\n    <div class=\"loading\"\n         v-else>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport contextVue from \"./context.vue\";\nimport categoryVue from \"./category.vue\";\nimport groupVue from \"./group.vue\";\n\nexport default {\n  name: \"configuration\",\n  props: {\n    data: {},\n    type: {}\n  },\n  components: {\n    \"context-vue\": contextVue,\n    \"category-vue\": categoryVue,\n    \"group-vue\": groupVue\n  },\n  data() {\n    return {\n      isLoaded: true\n    };\n  },\n  methods: {\n    refresh() {\n      this.isLoaded = false;\n      setTimeout(() => {\n        this.isLoaded = true;\n      }, 300);\n    }\n\n    // goToNext() {\n    //   this.$emit(\"next\", { id: \"first\", index: \"second\" });\n    // }\n  }\n};\n</script>\n\n<style scoped>\n._container {\n  width: 100%;\n  height: 100%;\n  padding: 0 0 0 0;\n}\n\n._container .content {\n  width: 100%;\n  height: 100%;\n}\n\n/* .container .buttons {\n  width: 100%;\n  height: 10%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n    <md-subheader>Context</md-subheader>\n    <div class=\"contentDiv\">\n      <div class=\"radios\">\n        <md-radio v-model=\"data.context.create\"\n                  :value=\"false\"\n                  @change=\"changeRadio\"\n                  class=\"md-primary\">Select Context</md-radio>\n\n        <md-radio v-model=\"data.context.create\"\n                  :value=\"true\"\n                  @change=\"changeRadio\"\n                  class=\"md-primary\">Create Context</md-radio>\n      </div>\n\n      <div class=\"inputDiv\"\n           v-if=\"data.context.create\">\n        <md-field>\n          <label>Context Name</label>\n          <md-input v-model=\"data.context.name\"></md-input>\n        </md-field>\n      </div>\n\n      <div class=\"inputDiv\"\n           v-else>\n        <md-field>\n          <label for=\"context\">Select context</label>\n          <md-select v-model=\"data.context.id\"\n                     name=\"context\"\n                     id=\"context\"\n                     @md-selected=\"selectItem\">\n            <md-option v-if=\"contexts.length === 0\"\n                       disabled>No Item</md-option>\n\n            <md-option v-for=\"(item,index) in contexts\"\n                       :value=\"item.id\"\n                       :key=\"index\">{{item.name}}</md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { groupManagerService } from \"spinal-env-viewer-plugin-group-manager-service\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\n\nimport PanelVue from \"../panel.vue\";\n\nexport default {\n  name: \"contextTemplate\",\n  props: [\"data\", \"type\"],\n  data() {\n    return {\n      contexts: []\n    };\n  },\n  mounted() {\n    this.getContexts();\n  },\n  methods: {\n    async getContexts() {\n      this.contexts = await groupManagerService.getGroupContexts(this.type);\n    },\n\n    async selectItem(id) {\n      const config = await this.getConfiguration(id);\n\n      if (config && config.context) {\n        this._setValue(\"context\", config.context.get());\n      }\n      if (config && config.category) {\n        this._setValue(\"category\", config.category.get());\n      }\n      if (config && config.group) {\n        this._setValue(\"group\", config.group.get());\n      }\n    },\n\n    changeRadio() {\n      this.data.context.name = \"\";\n      this.data.context.id = \"\";\n    },\n\n    async getConfiguration(id) {\n      const context = SpinalGraphService.getRealNode(id);\n      if (context) {\n        let _ptr = context.info.generate_group_config;\n\n        if (typeof _ptr !== \"undefined\") {\n          return new Promise(resolve => {\n            _ptr.load(info => {\n              resolve(info);\n            });\n          });\n        }\n      }\n\n      return;\n    },\n\n    _setValue(objectProperty, liste) {\n      for (const key of Object.keys(liste)) {\n        if (this.data[objectProperty].hasOwnProperty(key)) {\n          if (key === \"regex\") {\n            this.data[objectProperty][key] = this._getRegex(liste[key]);\n          } else {\n            this.data[objectProperty][key] = liste[key];\n          }\n        }\n      }\n    },\n\n    _getRegex(inputstring) {\n      var match = inputstring.match(new RegExp(\"^/(.*?)/([gimyu]*)$\"));\n      if (match) return new RegExp(match[1], match[2]);\n\n      return \"\";\n    }\n  },\n  watch: {\n    type() {\n      this.getContexts();\n      this.data.context.id = \"\";\n      this.data.context.name = \"\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sub-content {\n  padding: 16px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv {\n  display: flex;\n  flex-direction: column;\n  /* justify-content: space-between; */\n}\n\n.sub-content .contentDiv .inputDiv {\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.sub-content .contentDiv .radios {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  /* padding-top: 16px; */\n}\n</style>\n\n<style>\n.inputDiv .md-field {\n  min-height: unset;\n  margin: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n    <md-subheader>Category</md-subheader>\n\n    <div class=\"contentDiv\">\n\n      <div class=\"radiosDiv\">\n\n        <md-subheader>Create By using : </md-subheader>\n\n        <md-radio v-model=\"data.category.createBy\"\n                  :value=\"CREATE_DATA.attribute\"\n                  class=\"md-primary\">Attribute</md-radio>\n\n        <md-radio v-model=\"data.category.createBy\"\n                  :value=\"CREATE_DATA.name\"\n                  class=\"md-primary\">Name</md-radio>\n\n        <md-radio v-model=\"data.category.createBy\"\n                  :value=\"CREATE_DATA.fixed\"\n                  class=\"md-primary\">Fixed value</md-radio>\n\n      </div>\n\n      <div class=\"content\">\n\n        <create-by-attribute v-if=\"data.category.createBy === CREATE_DATA.attribute\"\n                             :propsName=\"data.category.name\"\n                             :propsContains=\"data.category.contains\"\n                             :propsRegex=\"data.category.regex\"\n                             :propsAdvanced=\"data.category.advanced\"\n                             @setValue=\"setAttributeValue\">\n        </create-by-attribute>\n\n        <create-by-name v-else-if=\"data.category.createBy === CREATE_DATA.name\"\n                        :propsSeparator=\"data.category.separator\"\n                        :propsPosition=\"data.category.position\"\n                        @setValue=\"setNameValue\">\n        </create-by-name>\n\n        <create-by-fixed-value v-else-if=\"data.category.createBy === CREATE_DATA.fixed\"\n                               @setValue=\"setFixedValue\"\n                               :propsName=\"data.category.fixedValue\">\n        </create-by-fixed-value>\n\n        <!-- <md-field class=\"fixedInput inputDiv\"\n                  v-if=\"data.category.fixed\">\n          <label>Category Name</label>\n          <md-input :disabled=\"!data.category.fixed\"\n                    v-model=\"data.category.name\"></md-input>\n        </md-field> -->\n\n        <!-- <div class=\"dynamicDiv\">\n          <md-field class=\"inputDiv\">\n            <label>regex</label>\n            <md-input v-model=\"data.category.regex\"\n                      disabled></md-input>\n\n          </md-field>\n\n          <md-button class=\"md-raised md-primary md-suffix\"\n                     @click=\"openDialog\">\n            <md-tooltip>Create dynamically</md-tooltip>\n            Edit\n          </md-button>\n\n        </div> -->\n\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport create_data from \"../js/data.js\";\nimport CreateByAttribute from \"./createByAttribute.vue\";\nimport CreateByName from \"./createByName.vue\";\nimport CreateByFixedValue from \"./createByFixedValue.vue\";\n\nexport default {\n  name: \"categoryVue\",\n  components: {\n    \"create-by-attribute\": CreateByAttribute,\n    \"create-by-name\": CreateByName,\n    \"create-by-fixed-value\": CreateByFixedValue\n  },\n  props: {\n    data: {}\n  },\n  data() {\n    this.CREATE_DATA = create_data;\n    return {};\n  },\n  methods: {\n    // openDialog() {\n    //   spinalPanelManagerService.openPanel(\"configureGenerationDialog\", {\n    //     callback: (regex, fixed) => {\n    //       this.data.category.regex = regex;\n    //       this.data.category.fixed = fixed;\n    //     }\n    //   });\n    // }\n\n    setAttributeValue(res) {\n      this.data.category.contains = res.contains;\n      this.data.category.name = res.name;\n      this.data.category.regex = res.regex;\n    },\n\n    setNameValue(res) {\n      this.data.category.separator = res.separator;\n      this.data.category.index = res.index;\n    },\n\n    setFixedValue(res) {\n      this.data.category.fixedValue = res.name;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sub-content {\n  padding: 16px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.sub-content .contentDiv .radiosDiv {\n  width: 100%;\n  display: flex;\n  /* justify-content: space-around; */\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv .content {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .fixedInput {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .dynamicDiv {\n  width: 100%;\n  display: flex;\n}\n\n.sub-content .contentDiv .content .dynamicDiv .inputDiv {\n  width: 80%;\n}\n\n.sub-content .contentDiv .content .inputDiv {\n  margin: 0px;\n  /* padding: 0px; */\n}\n\n/* .sub-content .contentDiv .checkboxDiv {\n  height: 100%;\n  flex: 0 0 130px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n}\n\n\n\n.sub-content .contentDiv .dynamicDialog {\n  flex: 0 0 60px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n} */\n</style>","export default Object.freeze({\n  attribute: 1,\n  name: 2,\n  fixed: 3\n});","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"div_container\">\n    <div class=\"inputs\">\n      <md-field md-clearable>\n        <label>Attribute name</label>\n        <md-input v-model=\"name\"\n                  :disabled=\"advanced\"\n                  @blur=\"setValue\"></md-input>\n\n        <span v-if=\"advanced\"\n              class=\"md-primary md-helper-text\">You use regex\n          <a @click=\"removeRegex\">remove it!</a></span>\n      </md-field>\n\n      <md-checkbox :disabled=\"advanced\"\n                   v-model=\"contains\"\n                   class=\"md-primary\">select element includes</md-checkbox>\n    </div>\n\n    <div class=\"buttons\">\n      <md-button class=\"md-raised md-primary\"\n                 @click=\"openDialog\">Use Regex</md-button>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nexport default {\n  name: \"create-by-attribute\",\n  props: {\n    propsName: {},\n    propsContains: {},\n    propsRegex: {},\n    propsAdvanced: {}\n  },\n  data() {\n    return {\n      name: \"\",\n      contains: false,\n      regex: \"\",\n      advanced: false\n    };\n  },\n  methods: {\n    openDialog() {\n      spinalPanelManagerService.openPanel(\"configureGenerationDialog\", {\n        callback: regex => {\n          this.regex = regex;\n          this.advanced = true;\n          //   this.contains = false;\n          this.name = \"\";\n\n          this.setValue();\n        }\n      });\n    },\n\n    removeRegex() {\n      this.regex = \"\";\n      this.advanced = false;\n    },\n\n    getRegex() {\n      if (this.advanced) {\n        return this.regex;\n      } else if (!this.advanced && this.name.trim().length > 0) {\n        if (this.contains) {\n          return new RegExp(`${RegExp.escape(this.name.trim())}`, \"i\");\n        } else {\n          return new RegExp(`^${RegExp.escape(this.name.trim())}$`, \"i\");\n        }\n      } else {\n        return \"\";\n      }\n    },\n\n    setValue() {\n      this.$emit(\"setValue\", {\n        name: this.name,\n        contains: this.contains,\n        regex: this.getRegex()\n      });\n    }\n  },\n  watch: {\n    contains() {\n      this.setValue();\n    },\n    propsName() {\n      if (this.propsName !== this.name) this.name = this.propsName;\n    },\n\n    propsContains() {\n      if (this.propsContains !== this.contains) {\n        this.contains = this.propsContains;\n      }\n    },\n    propsRegex() {\n      if (this.propsRegex !== this.regex) {\n        this.regex = this.propsRegex;\n      }\n    },\n    propsAdvanced() {\n      if (this.propsAdvanced !== this.advanced) {\n        this.advanced = this.propsAdvanced;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.div_container {\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.div_container .inputs {\n  flex: 0 0 70%;\n}\n\n.div_container .buttons {\n  flex: 0 0 20%;\n}\n</style>\n\n<style>\n.div_container .inputs .md-field {\n  /* margin: 0px; */\n  /* padding: 0px; */\n  min-height: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"div_container\">\n    <div class=\"sub-container\">\n      <md-field>\n        <label>Separator</label>\n        <md-input v-model=\"separator\"\n                  @blur=\"setValue\"></md-input>\n      </md-field>\n    </div>\n\n    <div class=\"sub-container\">\n      <md-field>\n        <label>Index</label>\n        <md-input v-model=\"position\"\n                  type=\"number\"\n                  :min=\"1\"\n                  @blur=\"setValue\"></md-input>\n      </md-field>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"create-by-name\",\n  props: {\n    propsSeparator: {},\n    propsPosition: {}\n  },\n  data() {\n    return {\n      separator: \"\",\n      position: 1\n    };\n  },\n  methods: {\n    setValue() {\n      this.$emit(\"setValue\", {\n        separator: this.separator,\n        index: this.position\n      });\n    }\n  },\n  watch: {\n    propsSeparator() {\n      if (this.propsSeparator !== this.separator)\n        this.separator = this.propsSeparator;\n    },\n\n    propsPosition() {\n      if (this.propsPosition !== this.position)\n        this.position = this.propsPosition;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.div_container {\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.div_container .sub-container {\n  width: 40%;\n}\n</style>\n\n<style>\n.div_container .sub-container .md-field {\n  min-height: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"div_container\">\n    <div class=\"inputs\">\n      <md-field md-clearable>\n        <label>value</label>\n        <md-input v-model=\"name\"\n                  @blur=\"setValue\"></md-input>\n      </md-field>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"create-by-fixed-value\",\n  props: {\n    propsName: {}\n  },\n  data() {\n    return {\n      name: \"\"\n    };\n  },\n  methods: {\n    setValue() {\n      this.$emit(\"setValue\", {\n        name: this.name\n      });\n    }\n  },\n  watch: {\n    propsName() {\n      if (this.propsName !== this.name) this.name = this.propsName;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.div_container {\n  width: 100%;\n}\n</style>\n\n<style>\n.div_container .inputs .md-field {\n  /* margin: 0px; */\n  /* padding: 0px; */\n  min-height: 0px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n    <md-subheader>Group</md-subheader>\n\n    <div class=\"contentDiv\">\n\n      <div class=\"radiosDiv\">\n\n        <md-subheader>Create By using : </md-subheader>\n\n        <md-radio v-model=\"data.group.createBy\"\n                  :value=\"CREATE_DATA.attribute\"\n                  class=\"md-primary\">Attribute</md-radio>\n\n        <md-radio v-model=\"data.group.createBy\"\n                  :value=\"CREATE_DATA.name\"\n                  class=\"md-primary\">Name</md-radio>\n\n        <md-radio v-model=\"data.group.createBy\"\n                  :value=\"CREATE_DATA.fixed\"\n                  class=\"md-primary\">Fixed value</md-radio>\n\n      </div>\n\n      <div class=\"content\">\n\n        <create-by-attribute v-if=\"data.group.createBy === CREATE_DATA.attribute\"\n                             :propsName=\"data.group.name\"\n                             :propsContains=\"data.group.contains\"\n                             :propsRegex=\"data.group.regex\"\n                             :propsAdvanced=\"data.group.advanced\"\n                             @setValue=\"setAttributeValue\">\n        </create-by-attribute>\n\n        <create-by-name v-else-if=\"data.group.createBy === CREATE_DATA.name\"\n                        :propsSeparator=\"data.group.separator\"\n                        :propsPosition=\"data.group.position\"\n                        @setValue=\"setNameValue\">\n        </create-by-name>\n\n        <create-by-fixed-value v-else-if=\"data.group.createBy === CREATE_DATA.fixed\"\n                               @setValue=\"setFixedValue\"\n                               :propsName=\"data.group.fixedValue\">\n        </create-by-fixed-value>\n\n        <!-- <md-field class=\"fixedInput inputDiv\"\n                  v-if=\"data.group.fixed\">\n          <label>Category Name</label>\n          <md-input :disabled=\"!data.group.fixed\"\n                    v-model=\"data.group.name\"></md-input>\n        </md-field> -->\n\n        <!-- <div class=\"dynamicDiv\">\n          <md-field class=\"inputDiv\">\n            <label>regex</label>\n            <md-input v-model=\"data.group.regex\"\n                      disabled></md-input>\n\n          </md-field>\n\n          <md-button class=\"md-raised md-primary md-suffix\"\n                     @click=\"openDialog\">\n            <md-tooltip>Create dynamically</md-tooltip>\n            Edit\n          </md-button>\n\n        </div> -->\n\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n\n<script>\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\nimport create_data from \"../js/data.js\";\nimport CreateByAttribute from \"./createByAttribute.vue\";\nimport CreateByName from \"./createByName.vue\";\nimport CreateByFixedValue from \"./createByFixedValue.vue\";\n\nexport default {\n  name: \"groupVue\",\n  components: {\n    \"create-by-attribute\": CreateByAttribute,\n    \"create-by-name\": CreateByName,\n    \"create-by-fixed-value\": CreateByFixedValue\n  },\n  props: {\n    data: {}\n  },\n  data() {\n    this.CREATE_DATA = create_data;\n    return {};\n  },\n  methods: {\n    // openDialog() {\n    //   spinalPanelManagerService.openPanel(\"configureGenerationDialog\", {\n    //     callback: (regex, fixed) => {\n    //       this.data.group.regex = regex;\n    //       this.data.group.fixed = fixed;\n    //     }\n    //   });\n    // }\n\n    setAttributeValue(res) {\n      this.data.group.contains = res.contains;\n      this.data.group.name = res.name;\n      this.data.group.regex = res.regex;\n    },\n\n    setNameValue(res) {\n      this.data.group.separator = res.separator;\n      this.data.group.index = res.index;\n    },\n\n    setFixedValue(res) {\n      this.data.group.fixedValue = res.name;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sub-content {\n  padding: 16px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.sub-content .contentDiv .radiosDiv {\n  width: 100%;\n  display: flex;\n  /* justify-content: space-around; */\n  margin-bottom: 10px;\n}\n\n.sub-content .contentDiv .content {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .fixedInput {\n  width: 100%;\n}\n\n.sub-content .contentDiv .content .dynamicDiv {\n  width: 100%;\n  display: flex;\n}\n\n.sub-content .contentDiv .content .dynamicDiv .inputDiv {\n  width: 80%;\n}\n\n.sub-content .contentDiv .content .inputDiv {\n  margin: 0px;\n  /* padding: 0px; */\n}\n\n/* .sub-content .contentDiv .checkboxDiv {\n  height: 100%;\n  flex: 0 0 130px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n}\n\n\n\n.sub-content .contentDiv .dynamicDialog {\n  flex: 0 0 60px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n} */\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"content\">\n\n      <div\n         class=\"buttons\"\n         v-if=\"appState === STATES.normal\"\n      >\n         <!-- <md-button v-if=\"!verified\"\n                 class=\"md-raised md-primary\"\n                 @click=\"launchVerification\">Verify</md-button> -->\n         <md-button\n            :disabled=\"error\"\n            class=\"md-raised md-primary\"\n            @click=\"launchGeneration\"\n         >Launch Generation</md-button>\n      </div>\n\n      <div\n         class=\"state\"\n         v-else-if=\"appState === STATES.loading\"\n      >\n         <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n\n      </div>\n\n      <div\n         class=\"state\"\n         v-else-if=\"appState === STATES.success\"\n      >\n         <md-icon class=\"md-size-4x\">check</md-icon>\n\n      </div>\n\n      <div\n         class=\"state\"\n         v-else-if=\"appState === STATES.error\"\n      >\n         <md-icon class=\"md-size-4x\">close</md-icon>\n      </div>\n\n   </div>\n</template>\n\n<script>\nimport CREATE_DATA from \"../js/data.js\";\n\nimport utilities from \"../js/utilities.js\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport groupManagerService from \"spinal-env-viewer-plugin-group-manager-service\";\n\nimport { Ptr, Model } from \"spinal-core-connectorjs_type\";\n\nexport default {\n   name: \"launchGeneration\",\n   props: {\n      data: {},\n      type: {},\n      error: {},\n   },\n   data() {\n      this.STATES = {\n         loading: 1,\n         normal: 2,\n         success: 3,\n         error: 4,\n      };\n      return {\n         verified: false,\n         valueGrouped: null,\n         appState: this.STATES.normal,\n      };\n   },\n   methods: {\n      async launchVerification() {\n         this.appState = this.STATES.loading;\n         const contextCondition = this.data.context.name.trim().length > 0;\n\n         const categoryCondition =\n            this.data.category.regex.toString().length > 0 ||\n            this.data.category.name.trim().length > 0;\n\n         const groupCondition =\n            this.data.group.regex.toString().length > 0 ||\n            this.data.group.name.trim().length > 0;\n\n         // if (contextCondition && categoryCondition && groupCondition) {\n         this.valueGrouped = await this.classifyItem(\n            this.data.category,\n            this.data.group\n         );\n\n         this.verified = true;\n         // } else {\n         //   this.$emit(\"error\");\n         // }\n         // console.log(\"items\", this.valueGrouped);\n         this.appState = this.STATES.normal;\n      },\n\n      async launchGeneration() {\n         this.appState = this.STATES.loading;\n         let contextId = await this.getContext();\n\n         this.createNodes(contextId)\n            .then((res) => {\n               this.saveConfiguration(contextId, this.data);\n               this._displayResult(this.STATES.success);\n            })\n            .catch((err) => {\n               this._displayResult(this.STATES.error);\n               console.error(err);\n            });\n      },\n\n      _displayResult(result) {\n         this.appState = result;\n         setTimeout(() => {\n            this.appState = this.STATES.normal;\n         }, 1000);\n      },\n\n      async classifyItem(categoryInfo, groupInfo) {\n         const res = [];\n         const unclassify = \"unclassify\";\n\n         for (const item of this.data.items) {\n            const spinalId = item.id;\n\n            const categoryName = await utilities.getValue(\n               spinalId,\n               categoryInfo,\n               this.type\n            );\n            const groupName = await utilities.getValue(\n               spinalId,\n               groupInfo,\n               this.type\n            );\n\n            let categoryFound = res.find((el) => {\n               if (categoryName) return el.name === categoryName;\n               return el.name === unclassify;\n            });\n\n            if (typeof categoryFound === \"undefined\") {\n               categoryFound = {\n                  name: categoryName ? categoryName : unclassify,\n                  groups: [],\n               };\n               res.push(categoryFound);\n            }\n\n            let groupFound = categoryFound.groups.find((el) => {\n               if (groupName) return el.name === groupName;\n               return el.name === unclassify;\n            });\n\n            if (typeof groupFound === \"undefined\") {\n               groupFound = {\n                  name: groupName ? groupName : unclassify,\n                  items: [],\n                  color: groupName ? this._generateColor() : \"#ff0000\",\n               };\n               categoryFound.groups.push(groupFound);\n            }\n\n            groupFound.items.push(item);\n         }\n\n         return res;\n      },\n\n      async getContext() {\n         if (this.data.context.create) {\n            const contextName = utilities._getValidContextName(\n               this.data.context.name\n            );\n\n            const context = await groupManagerService.createGroupContext(\n               contextName,\n               this.type\n            );\n\n            return context.info.id.get();\n         }\n\n         return this.data.context.id;\n      },\n\n      async createNodes(contextId) {\n         this.valueGrouped = await this.classifyItem(\n            this.data.category,\n            this.data.group\n         );\n\n         for (const obj of this.valueGrouped) {\n            const category = await utilities.createCategory(\n               contextId,\n               obj.name\n            );\n\n            for (const el of obj.groups) {\n               const group = await utilities.createGroup(\n                  contextId,\n                  category.info.id.get(),\n                  el.name,\n                  el.color\n               );\n\n               for (const item of el.items) {\n                  utilities.addElement(contextId, group.info.id.get(), item.id);\n               }\n            }\n         }\n\n         return;\n      },\n\n      saveConfiguration(contextId, configuration) {\n         const context = SpinalGraphService.getRealNode(contextId);\n         const dataCopy = Object.assign({}, this.data);\n\n         dataCopy.context.create = false;\n         dataCopy.context.id = contextId;\n         dataCopy.category.regex = dataCopy.category.regex.toString();\n         dataCopy.group.regex = dataCopy.group.regex.toString();\n\n         if (context) {\n            if (context.info.generate_group_config) {\n               context.info.rem_attr(\"generate_group_config\");\n            }\n\n            const model = new Model({\n               context: dataCopy.context,\n               category: dataCopy.category,\n               group: dataCopy.group,\n            });\n\n            context.info.add_attr({\n               generate_group_config: new Ptr(model),\n            });\n         }\n      },\n\n      _generateColor() {\n         return \"#\" + ((Math.random() * 0xffffff) << 0).toString(16);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.content {\n   width: 100%;\n   height: 100%;\n}\n\n.content .buttons {\n   width: 100%;\n   display: flex;\n   justify-content: center;\n}\n\n.state {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n</style>","import CREATE_DATA from \"./data.js\";\n\nimport {\n  spinalAttributeService\n} from \"../../../../services\";\n\nimport {\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\n\n\nimport {\n  bimObjectManagerService\n} from \"spinal-env-viewer-bim-manager-service\";\n\nimport groupManagerService from \"spinal-env-viewer-plugin-group-manager-service\";\nimport geographicService from \"spinal-env-viewer-context-geographic-service\";\n\nexport default {\n  async getValue(spinalId, info, type) {\n\n    if (info.createBy === CREATE_DATA.attribute) {\n      return this.checkOnSpinalAttributes(spinalId, info.regex, type);\n\n    } else if (info.createBy === CREATE_DATA.name) {\n      const nodeInfo = SpinalGraphService.getInfo(spinalId);\n      const name = nodeInfo.name.get();\n\n      if (info.separator.length === 0) info.separator = \" \";\n\n      const liste = name.split(info.separator);\n\n      return liste[info.index - 1];\n    } else if (info.createBy === CREATE_DATA.fixed) {\n      return info.fixedValue;\n    }\n\n  },\n\n  async checkOnBimObjectAttributes(spinalId, regex) {\n    const bimObjectInfo = SpinalGraphService.getInfo(spinalId).get();\n\n    let model = window.spinal.BimObjectService.getModelByBimfile(bimObjectInfo\n      .bimFileId);\n\n    if (model) {\n      return bimObjectManagerService.getBimObjectProperties({\n        model: model,\n        selection: [bimObjectInfo.dbid]\n      }).then(res => {\n        let properties = res[0].properties[0].properties;\n\n        let found = properties.find(el => {\n          let attrName = el.attributeName.toLowerCase();\n          let displayName = el.displayName.toLowerCase();\n\n          return attrName.match(this._getRegex(regex.toString())) ||\n            displayName.match(this._getRegex(regex.toString()));\n        })\n\n        if (found) return found.displayValue;\n\n\n      }).catch(err => {\n        console.error(err);\n        return;\n      })\n    }\n\n  },\n\n  async checkOnSpinalAttributes(spinalId, regex, type) {\n\n    const attributes = await spinalAttributeService.getAllAttributes(\n      spinalId);\n\n    const found = attributes.find((el) => {\n      return el.label.match(this._getRegex(regex.toString()));\n    });\n\n    if (found && found.value) return found.value;\n\n    else if (type === geographicService.constants.EQUIPMENT_TYPE) {\n      const attrValue = await this.checkOnBimObjectAttributes(spinalId,\n        regex);\n      return attrValue;\n    }\n  },\n\n  ////////////////////////////////////////////////////////////////\n  //                    Creation                                //\n  ////////////////////////////////////////////////////////////////\n\n  contextNameExist(contextName) {\n    const context = SpinalGraphService.getContext(contextName);\n    if (typeof context !== \"undefined\") return true;\n    return false;\n  },\n\n  createCategory(contextId, categoryName) {\n    return groupManagerService.addCategory(contextId, categoryName, \"\");\n  },\n\n  createGroup(contextId, categoryId, groupName, color = \"#000000\") {\n    return groupManagerService.addGroup(\n      contextId,\n      categoryId,\n      groupName,\n      color\n    );\n  },\n\n  addElement(contextId, groupId, elementId) {\n    return groupManagerService.linkElementToGroup(\n      contextId,\n      groupId,\n      elementId\n    );\n  },\n\n  _getValidContextName(name) {\n    let validName;\n    let count = 0;\n    while (typeof validName === \"undefined\") {\n      if (!this.contextNameExist(name)) {\n        validName = name;\n      } else {\n        count++;\n        name = `${name} ${count}`\n      }\n    }\n\n    return validName;\n  },\n\n  _getRegex(inputstring) {\n    var match = inputstring.match(new RegExp(\"^/(.*?)/([gimyu]*)$\"));\n    if (match) return new RegExp(match[1], match[2]);\n    return \"\";\n  }\n};","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"sub-content\">\n\n    <div class=\"countdiv typeSelected\">\n      Type selected : {{type ? type : \"None\"}}\n    </div>\n\n    <div class=\"countdiv\">\n      {{count}} item(s) selected\n    </div>\n\n    <div class=\"buttons\">\n      <md-button @click=\"addSelection\">\n        <md-icon>add</md-icon>\n        <md-tooltip md-delay=\"300\">Add Bim objects selected</md-tooltip>\n      </md-button>\n\n      <md-button @click=\"clearReferential\">\n        <md-icon>clear</md-icon>\n        <md-tooltip md-delay=\"300\">Clear selected</md-tooltip>\n      </md-button>\n\n      <!-- <md-button @click=\"showReferential\">\n        <md-icon>visibility</md-icon>\n        <md-tooltip md-delay=\"300\">Show referential</md-tooltip>\n      </md-button> -->\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport geographicService from \"spinal-env-viewer-context-geographic-service\";\nimport { bimObjectManagerService } from \"spinal-env-viewer-bim-manager-service\";\n\nexport default {\n  name: \"selectionStep\",\n  props: {\n    data: {},\n    type: {}\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    addSelection() {\n      const EQUIPMENT_TYPE = geographicService.constants.EQUIPMENT_TYPE;\n\n      if (this.type === EQUIPMENT_TYPE || this.data.items.length === 0) {\n        if (this.data.items.length === 0)\n          this.$emit(\"changeType\", EQUIPMENT_TYPE);\n\n        this.addItemSelected();\n      } else {\n        window.alert(`can not add ${EQUIPMENT_TYPE} to ${this.type} type`);\n      }\n    },\n\n    clearReferential() {\n      this.data.items = [];\n      this.$emit(\"changeType\");\n    },\n\n    async addItemSelected() {\n      const aggregateSelection = window.spinal.ForgeViewer.viewer.getAggregateSelection();\n\n      const selection = await this.getLeafDbIds(aggregateSelection);\n\n      const nodespromises = selection.map(async el => {\n        return this.getBimObjectsNodes(el);\n      });\n\n      let promisesValues = await Promise.all(nodespromises);\n\n      for (const iterator of promisesValues) {\n        const listeFiltered = this.filterList(iterator);\n        this.data.items = [...this.data.items, ...listeFiltered];\n      }\n    },\n\n    getLeafDbIds(selections) {\n      const dbIds = selections.map(el => {\n        return bimObjectManagerService.getLeafDbIds(el.model, el.selection);\n      });\n\n      return Promise.all(dbIds);\n    },\n\n    getBimObjectsNodes(el) {\n      let nodes = el.selection.map(async dbId => {\n        let node = await window.spinal.BimObjectService.createBIMObject(\n          dbId,\n          el.model\n        );\n        return node.get();\n      });\n\n      return Promise.all(nodes);\n    },\n\n    filterList(liste) {\n      return liste.filter(el => {\n        const found = this.data.items.find(i => i.id === el.id);\n        if (found) return false;\n        return true;\n      });\n    }\n  },\n  computed: {\n    count() {\n      return this.data && this.data.items ? this.data.items.length : 0;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.countdiv {\n  height: 60px;\n  display: flex;\n  align-items: center;\n  font-size: 1.2em;\n}\n</style>\n\n<style>\n.sub-content .buttons .md-button .md-ripple {\n  padding: 0px !important;\n}\n</style>","import CREATE_DATA from \"./data\";\n\nexport default {\n  items: [],\n  context: {\n    create: false,\n    id: \"\",\n    name: \"\"\n  },\n  category: {\n    createBy: CREATE_DATA.attribute,\n    contains: false,\n    name: \"\",\n    regex: \"\",\n    separator: \"\",\n    index: 1,\n    fixedValue: \"\"\n  },\n  group: {\n    createBy: CREATE_DATA.attribute,\n    contains: false,\n    name: \"\",\n    regex: \"\",\n    separator: \"\",\n    index: 1,\n    fixedValue: \"\"\n  }\n}","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer paramsDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title style=\"text-align : center\">\n      Set your configurations\n    </md-dialog-title>\n    <md-dialog-content style=\"overflow : hidden\">\n\n      <md-tabs class=\"myTabs\"\n               md-alignment=\"centered\"\n               @md-changed=\"changeTab\">\n        <md-tab id=\"current-param-tab\"\n                md-label=\"Current configuration\"\n                md-icon=\"offline_pin\"></md-tab>\n\n        <md-tab id=\"create-param-tab\"\n                md-label=\"Create configuration\"\n                md-icon=\"add\"></md-tab>\n\n        <md-tab id=\"all-params-tab\"\n                md-label=\"All configuration\"\n                md-icon=\"settings_applications\"></md-tab>\n\n      </md-tabs>\n\n      <div class=\"tabsContent\">\n\n        <current-param v-if=\"tabDisplayed === 0\"\n                       :currentConfiguration=\"currentConf\"\n                       @refresh=\"RefreshData\">\n        </current-param>\n\n        <edit-param v-if=\"tabDisplayed === 1\"\n                    :data=\"allConfigurations\"\n                    :currentConfiguration=\"currentConf\"\n                    @change=\"changeCurrentConf\"\n                    @refresh=\"RefreshData\"></edit-param>\n\n        <create-param v-if=\"tabDisplayed === 2\"\n                      @refresh=\"RefreshData\"></create-param>\n\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n      <!-- <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button> -->\n    </md-dialog-actions>\n  </md-dialog>\n\n</template>\n\n<script>\n// import menuComponent from \"../../vue/panels/components/tooltips/addItem.vue\";\nimport utilities from \"../../js/utilities\";\n\nimport editParamsComponent from \"./components/editParamsComponent.vue\";\nimport currentConfiguration from \"./components/paramsUploaded.vue\";\nimport addConfiguration from \"./components/createParamsComponent.vue\";\n\nexport default {\n  name: \"paramDialogComponent\",\n  components: {\n    \"edit-param\": editParamsComponent,\n    \"current-param\": currentConfiguration,\n    \"create-param\": addConfiguration\n  },\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true,\n      typeSelected: \"\",\n      data: [],\n      callback: null,\n      tabDisplayed: 0,\n      allConfigurations: [],\n      currentConf: undefined\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.typeSelected = option.typeSelected;\n      this.callback = option.callback;\n      this.allConfigurations = await utilities.getAllConfiguration();\n      this.currentConf = await utilities.getCurrentConfiguration();\n      // this.data = await this.formatData(option.header, option.typeSelected);\n    },\n\n    async changeCurrentConf() {\n      this.currentConf = await utilities.getCurrentConfiguration();\n    },\n\n    async RefreshData() {\n      this.allConfigurations = await utilities.getAllConfiguration();\n      this.currentConf = await utilities.getCurrentConfiguration();\n    },\n\n    removed(option) {\n      // if (option) {\n      //   utilities.addElement(this.typeSelected, this.data);\n      // }\n\n      this.callback();\n      this.showDialog = false;\n    },\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n    // addLabel(res) {\n    //   if (res.category && res.label) {\n    //     let found = this.data.find(el => {\n    //       return el.category === res.category;\n    //     });\n\n    //     if (found) {\n    //       let attrFound = found.attributes.find(el => el.label === res.label);\n    //       if (typeof attrFound === \"undefined\") {\n    //         found.attributes.push({\n    //           show: false,\n    //           label: res.label\n    //         });\n    //       }\n    //     }\n    //   } else if (res.category) {\n    //     let found = this.data.find(el => el.category === res.category);\n\n    //     if (!found) {\n    //       this.data.push({\n    //         category: res.category,\n    //         attributes: []\n    //       });\n    //     }\n    //   }\n    // },\n\n    formatData(headers, type) {\n      return utilities.getElements(type).then(el => {\n        if (el && el.get().length > 0) {\n          return el.get();\n        }\n\n        let res = [];\n        headers.forEach(el => {\n          let found = res.find(el2 => el2.category === el.category);\n\n          if (found) {\n            found.attributes.push({\n              show: false,\n              label: el.label,\n              date: el.date\n            });\n          } else {\n            res.push({\n              category: el.category,\n              attributes: [\n                {\n                  show: false,\n                  label: el.label,\n                  date: el.date\n                }\n              ]\n            });\n          }\n        });\n\n        return res;\n      });\n    },\n\n    changeTab(activeTab) {\n      switch (activeTab) {\n        case \"current-param-tab\":\n          this.tabDisplayed = 0;\n          break;\n\n        case \"all-params-tab\":\n          this.tabDisplayed = 1;\n          break;\n\n        case \"create-param-tab\":\n          this.tabDisplayed = 2;\n          break;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.mdDialogContainer.paramsDialogContainer {\n  width: 700px !important;\n  height: 700px;\n}\n\n.mdDialogContainer.paramsDialogContainer .myTabs {\n  height: 70px;\n}\n\n.mdDialogContainer.paramsDialogContainer .tabsContent {\n  width: calc(100% - 70px);\n  height: calc(100% - 70px);\n  margin: auto;\n  margin-top: 10px;\n}\n\n.mdDialogContainer.paramsDialogContainer .list .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n}\n\n.mdDialogContainer.paramsDialogContainer .list .addCategoryBtn {\n  position: absolute;\n  bottom: 30px;\n  right: 20px;\n}\n</style>","/*\n * Copyright 2020 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE\n} from \"spinal-env-viewer-graph-service\";\n\nimport {\n  Model,\n  Ptr\n} from \"spinal-core-connectorjs_type\";\n\n\nexport default class Utilities {\n\n  static createOrGetContext() {\n    this.contextName = \"Nomenclature_Configuration\";\n    this.CONTEXT_TYPE = \"Nomenclature_Configuration\";\n    this.CATEGORY_TYPE = \"configurationCategory\";\n    this.ATTRIBUTE_TYPE = \"configurationAttribute\";\n\n\n    this.CONTEXT_TO_CONFIGURATION_RELATION = \"hasConfiguration\";\n    this.CONFIGURATION_TO_CATEGORY_RELATION = \"hasCategory\";\n    this.CATEGORY_TO_ATTRIBUTE_RELATION = \"hasAttribute\";\n\n    let context = SpinalGraphService.getContext(this.contextName);\n\n    if (typeof context !== \"undefined\") return Promise.resolve(context);\n\n    return SpinalGraphService.addContext(\n      this.contextName,\n      this.CONTEXT_TYPE,\n      new Model({\n        name: this.contextName\n      })\n    );\n\n  }\n\n  static createConfiguration(configurationName, configurationCategories) {\n    return this.createOrGetContext().then(context => {\n      let contextId = context.info.id.get();\n\n      let configurationNode = SpinalGraphService.createNode({\n        name: configurationName,\n        type: this.CATEGORY_TYPE\n      }, new Model({\n        name: configurationName,\n        categories: configurationCategories\n      }))\n\n      if (configurationNode) {\n        return SpinalGraphService.addChildInContext(contextId,\n          configurationNode,\n          contextId, this.CONTEXT_TO_CONFIGURATION_RELATION,\n          SPINAL_RELATION_PTR_LST_TYPE);\n      }\n\n    })\n  }\n\n  static getAllConfiguration() {\n    return this.createOrGetContext().then(context => {\n      let contextId = context.info.id.get();\n\n      return SpinalGraphService.getChildren(contextId, [this\n        .CONTEXT_TO_CONFIGURATION_RELATION\n      ]).then(configurations => {\n        let promises = configurations.map(async configuration => {\n          let id = configuration.id.get();\n          let realNode = SpinalGraphService.getRealNode(id);\n          let elementModel = await realNode.getElement();\n\n          if (elementModel) {\n            let element = elementModel.get();\n            element[\"id\"] = id;\n            return element;\n          }\n\n        })\n\n        return Promise.all(promises);\n\n      })\n\n    })\n  }\n\n  static getElements() {\n    return this.getCurrentConfiguration().then(res => {\n      return res.categories;\n    })\n  }\n\n  static setAsCurrentConfiguration(nodeId) {\n    this.createOrGetContext().then(context => {\n      let realNode = SpinalGraphService.getRealNode(nodeId);\n\n      if (realNode) {\n        if (context.info.currentConfiguration) {\n\n          // context.info.currentConfiguration.load((res) => {\n          //   res.set(realNode)\n          // });\n\n          context.info.rem_attr(\"currentConfiguration\");\n\n        }\n\n        context.info.add_attr({\n          currentConfiguration: new Ptr(realNode)\n        })\n\n      }\n    })\n  }\n\n  static getCurrentConfiguration() {\n    return this.createOrGetContext().then(context => {\n      //   let id = context.info.currentConfiguration;\n\n      //   if (typeof id === \"undefined\") {\n      //     return\n      //   }\n\n      //   let realNode = SpinalGraphService.getRealNode(id.get());\n\n      //   return realNode.getElement().then(el => {\n      //     let element = el.get();\n      //     element[\"id\"] = id.get();\n\n      //     return element;\n      //   })\n\n      // })\n\n\n      let confPtr = context.info.currentConfiguration;\n\n      if (typeof confPtr !== \"undefined\") {\n        return new Promise(resolve => {\n          confPtr.load((realNode) => {\n            return realNode.getElement().then(el => {\n              let element = el.get();\n              element[\"id\"] = realNode.info.id.get();\n              resolve(element);\n            })\n          })\n        })\n      }\n\n      return {\n        name: \"\",\n        categories: []\n      }\n\n    })\n  }\n\n\n  static editConfiguration(configurationId, configurationElement) {\n    let realNode = SpinalGraphService.getRealNode(configurationId);\n\n    if (realNode) {\n      realNode.getElement().then(element => {\n        element.set(configurationElement);\n      })\n    }\n\n  }\n\n  // static addElement(type, listes) {\n  //   return this.createOrGetContext().then(context => {\n\n  //     if (context) {\n  //       return context.getElement().then(contextElement => {\n  //         if (contextElement[type]) {\n  //           contextElement[type].clear();\n\n  //           listes.forEach(element => {\n  //             contextElement[type].push(element);\n  //           });\n\n  //         } else {\n  //           contextElement.add_attr([type], listes);\n  //         }\n\n  //         return contextElement[type];\n\n  //       })\n  //     }\n\n  //     return [];\n\n\n  //   })\n  // }\n\n}","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"list\">\n\n    <!-- <md-list :md-expand-single=\"false\">\n      <md-list-item v-for=\"(item,index) in data\"\n                    :key=\"index\"\n                    md-expand>\n\n        <span class=\"md-list-item-text\">{{item.category}}</span>\n\n        <menu-component :category=\"item.category\"\n                        @add=\"addLabel\"></menu-component>\n\n        <md-list slot=\"md-expand\">\n          <md-list-item class=\"md-inset\"\n                        v-for=\"(attr,i) in item.attributes\"\n                        :key=\"i\">\n            <md-checkbox class=\"md-primary\"\n                         v-model=\"attr.show\" />\n            <span class=\"md-list-item-text\">{{attr.label}}</span>\n          </md-list-item>\n\n        </md-list>\n      </md-list-item>\n    </md-list>\n\n    <menu-component class=\"addCategoryBtn\"\n                    @add=\"addLabel\"></menu-component> -->\n\n    <div v-if=\"!editMode\"\n         class=\"md-layout md-alignment-space-between header\">\n\n      <div class=\"md-layout-item md-size-55\">\n        <md-field>\n          <label for=\"movie\">Select configuration</label>\n          <md-select v-model=\"configurationSelected\"\n                     name=\"configuration\"\n                     id=\"configuration\">\n            <md-option v-for=\"(configuration,index) in data\"\n                       :key=\"index\"\n                       :value=\"configuration.id\">{{configuration.name}}\n            </md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n\n      <div class=\"md-layout-item md-size-40\">\n        <v-btn outline\n               v-if=\"!isCurrentConfiguration()\"\n               @click=\"setAsCurrentConfiguration\"\n               :disabled=\"!configurationSelected\"\n               color=\"blue\">Set as current configuration</v-btn>\n\n        <v-alert :value=\"true\"\n                 v-if=\"isCurrentConfiguration()\"\n                 color=\"green\"\n                 outline\n                 icon=\"check_circle\">\n          current configuration.\n        </v-alert>\n      </div>\n\n    </div>\n\n    <div v-if=\"configurationSelected\"\n         class=\"content\"\n         :class=\"{'contentWithOutHeader' : editMode}\">\n      <div class=\"header\">\n        <div>{{configurationData.name}}</div>\n\n        <div class=\"buttons\">\n          <v-btn fab\n                 blue\n                 outline\n                 small\n                 color=\"red\"\n                 v-if=\"editMode\"\n                 @click=\"activeEditMode(false)\">\n            <v-icon>close</v-icon>\n          </v-btn>\n\n          <v-btn fab\n                 blue\n                 outline\n                 small\n                 color=\"blue\"\n                 @click=\"activeEditMode(true)\">\n            <v-icon>{{editMode ? \"check\" : \"edit\"}}</v-icon>\n          </v-btn>\n        </div>\n      </div>\n\n      <display-list-component class=\"content md-scrollbar\"\n                              :categories=\"configurationData.categories\"\n                              :editMode=\"editMode\"\n                              :message=\"'No category found create. Create one with the button below !'\"\n                              @add=\"addSubItem\"\n                              @remove=\"removeItem\">\n      </display-list-component>\n\n      <div class=\"header\">\n        <menu-component class=\"addCat\"\n                        v-if=\"editMode\"\n                        @add=\"addCategory\"></menu-component>\n\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n// import menuComponent from \"../../../vue/panels/components/tooltips/addItem.vue\";\n\nimport displayListComponent from \"../components/displayList.vue\";\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\n\nimport Utilities from \"../../../js/utilities\";\n\nexport default {\n  name: \"editParamsComponent\",\n  components: {\n    \"menu-component\": menuComponent,\n    \"display-list-component\": displayListComponent\n  },\n  props: {\n    data: {\n      default: new Array()\n    },\n    currentConfiguration: {}\n  },\n  data() {\n    this.copyItem;\n    return {\n      editMode: false,\n      configurationSelected: undefined,\n      configurationData: {\n        name: \"\",\n        categories: []\n      }\n    };\n  },\n  mounted() {\n    // console.log(\"this.currentConfiguration\", this.currentConfiguration);\n  },\n  methods: {\n    async activeEditMode(edit) {\n      this.editMode = !this.editMode;\n\n      if (!this.editMode && edit) {\n        await Utilities.editConfiguration(\n          this.configurationSelected,\n          this.configurationData\n        );\n\n        this.$emit(\"refresh\");\n      } else if (!this.editMode && !edit) {\n        // console.log(\"cancel edit\", this.copyItem);\n        this.configurationData = JSON.parse(JSON.stringify(this.copyItem));\n      }\n    },\n\n    async setAsCurrentConfiguration() {\n      await Utilities.setAsCurrentConfiguration(this.configurationSelected);\n      this.$emit(\"change\");\n    },\n\n    isCurrentConfiguration() {\n      if (typeof this.configurationSelected === \"undefined\") return false;\n\n      if (\n        this.currentConfiguration &&\n        this.currentConfiguration.id === this.configurationSelected\n      )\n        return true;\n\n      return false;\n    },\n\n    addSubItem(res) {\n      if (res.category && res.label) {\n        let found = this.configurationData.categories.find(el => {\n          return el.name === res.category;\n        });\n\n        if (found) {\n          let attrFound = found.attributes.find(el => el.name === res.label);\n          if (typeof attrFound === \"undefined\") {\n            found.attributes.push({\n              show: false,\n              name: res.label,\n              id: Date.now()\n            });\n          }\n        }\n      }\n    },\n\n    removeItem(res) {\n      if (typeof res.attr === \"undefined\") {\n        this.configurationData.categories = this.configurationData.categories.filter(\n          el => {\n            return el.id !== res.category.id;\n          }\n        );\n      } else {\n        let found = this.configurationData.categories.find(el => {\n          return el.id === res.category.id;\n        });\n\n        if (found) {\n          found.attributes = found.attributes.filter(\n            el => el.id !== res.attr.id\n          );\n        }\n      }\n    },\n\n    addCategory(res) {\n      let found = this.configurationData.categories.find(\n        el => el.name === res.category\n      );\n\n      if (!found) {\n        this.configurationData.categories.push({\n          id: Date.now(),\n          name: res.category,\n          attributes: []\n        });\n      }\n    }\n  },\n  watch: {\n    configurationSelected() {\n      let found = this.data.find(el => el.id === this.configurationSelected);\n      this.configurationData = JSON.parse(JSON.stringify(found));\n      this.copyItem = JSON.parse(JSON.stringify(found));\n    }\n  }\n};\n</script>\n\n<style scoped>\n.list {\n  width: 100%;\n  height: 100%; /* border: 1px solid red; */\n}\n\n.list .header {\n  height: 80px;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.list .content {\n  width: 100%;\n  height: calc(100% - 80px);\n}\n\n.list .content.contentWithOutHeader {\n  width: 100%;\n  height: 100%;\n}\n\n.list .content .content {\n  width: 100%;\n  height: calc(100% - 120px);\n}\n\n.list .content .header {\n  width: 100%;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  text-transform: uppercase;\n  justify-content: space-between;\n}\n\n.list .content .header .addCat {\n  border: 1px solid #448aff;\n}\n\n.list .content .header .buttons {\n  display: flex;\n  flex-direction: row;\n}\n\n/* .mdDialogContainer.paramsDialogContainer .list .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n} */\n</style>\n\n<style >\n.list .content .content .myListContainer .v-list.listContainer.theme--dark {\n  overflow: auto;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"myListContainer\">\n    <v-list v-if=\"categories && categories.length > 0\"\n            class=\"listContainer\"\n            expand\n            flat\n            dark>\n      <v-list-group v-for=\"(item,index) in categories\"\n                    :key=\"index\"\n                    prepend-icon=\"keyboard_arrow_down\"\n                    append-icon=\"\"\n                    :one-line=\"false\"\n                    no-action>\n        <v-list-tile slot=\"activator\">\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{item.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n\n            <menu-component :category=\"item.name\"\n                            @add=\"addAttributes\"></menu-component>\n\n          </v-list-tile-action>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn flat\n                   icon\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click.stop=\"remove(item,true)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       SubHeaders                      |\n        ---------------------------------------------------------\n     -->\n        <v-list-tile v-for=\"(subItem,subIndex) in item.attributes\"\n                     :key=\"subIndex\">\n\n          <v-list-tile-action>\n            <v-checkbox :disabled=\"!editMode\"\n                        color=\"blue\"\n                        v-model=\"subItem.show\"></v-checkbox>\n          </v-list-tile-action>\n\n          <v-list-tile-content>\n            <v-list-tile-title>{{subItem.name}}</v-list-tile-title>\n          </v-list-tile-content>\n\n          <v-list-tile-action v-if=\"editMode\">\n            <v-btn icon\n                   flat\n                   small\n                   color=\"red\"\n                   title=\"remove\"\n                   @click=\"remove(item,false,subItem)\">\n              <v-icon>remove_circle_outline</v-icon>\n            </v-btn>\n          </v-list-tile-action>\n\n        </v-list-tile>\n\n        <!--\n        ---------------------------------------------------------\n        |                       End SubHeaders                  |\n        ---------------------------------------------------------\n     -->\n\n      </v-list-group>\n    </v-list>\n\n    <div class=\"emptyList\"\n         v-if=\"categories && categories.length === 0\">\n      {{message}}\n    </div>\n\n  </div>\n\n</template>\n\n<script>\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\n\nexport default {\n  name: \"displayListComponent\",\n  components: {\n    \"menu-component\": menuComponent\n  },\n  props: {\n    categories: {},\n    message: {\n      type: String,\n      default: \"No data found\"\n    },\n    editMode: {\n      type: Boolean,\n      default: true\n    }\n  },\n  methods: {\n    addAttributes(res) {\n      this.$emit(\"add\", res);\n    },\n    remove(category, isCategory, attribute) {\n      let item = {\n        category: category,\n        attr: attribute\n      };\n\n      this.$emit(\"remove\", item);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.myListContainer {\n  width: 100%;\n  height: calc(100% - 50px);\n}\n\n.myListContainer .listContainer {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.myListContainer .emptyList {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"list\"\n       v-if=\"configurationCopy\">\n\n    <div class=\"header\">\n      <div>{{configurationCopy.name}}</div>\n\n      <!-- <v-alert :value=\"true\"\n               color=\"green\"\n               outline\n               icon=\"check_circle\">\n        current configuration.\n      </v-alert> -->\n\n    </div>\n\n    <display-list-component class=\"content md-scrollbar\"\n                            :categories=\"configurationCopy.categories\"\n                            :editMode=\"true\"\n                            :message=\"'No category found create. Create one with the button below !'\"\n                            @add=\"addSubItem\"\n                            @remove=\"removeItem\">\n    </display-list-component>\n\n    <div class=\"header\">\n      <menu-component class=\"addCatBtn\"\n                      @add=\"addCategory\"></menu-component>\n\n      <v-btn outline\n             color=\"#2196f3\"\n             @click=\"updateConfiguration\">\n        <v-icon dark>check</v-icon>\n        &nbsp;\n        Save Modification\n      </v-btn>\n\n    </div>\n\n  </div>\n\n  <div class=\"empty\"\n       v-else>\n    No current configuration is set\n  </div>\n\n</template>\n\n<script>\nimport displayListComponent from \"../components/displayList.vue\";\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\n\nimport Utilities from \"../../../js/utilities\";\n\nexport default {\n  name: \"currentParams\",\n  components: {\n    \"menu-component\": menuComponent,\n    \"display-list-component\": displayListComponent\n  },\n  props: {\n    currentConfiguration: {}\n  },\n  data() {\n    return {\n      configurationCopy: {}\n    };\n  },\n  mounted() {\n    this.configurationCopy = Object.assign({}, this.currentConfiguration);\n  },\n  methods: {\n    async updateConfiguration() {\n      await Utilities.editConfiguration(\n        this.configurationCopy.id,\n        this.configurationCopy\n      );\n\n      this.$emit(\"refresh\");\n    },\n    addCategory(res) {\n      let found = this.configurationCopy.categories.find(\n        el => el.name === res.category\n      );\n\n      if (!found) {\n        this.configurationCopy.categories.push({\n          id: Date.now(),\n          name: res.category,\n          attributes: []\n        });\n      }\n    },\n    addSubItem(res) {\n      if (res.category && res.label) {\n        let found = this.configurationCopy.categories.find(el => {\n          return el.name === res.category;\n        });\n\n        if (found) {\n          let attrFound = found.attributes.find(el => el.name === res.label);\n          if (typeof attrFound === \"undefined\") {\n            found.attributes.push({\n              show: false,\n              name: res.label,\n              id: Date.now()\n            });\n          }\n        }\n      }\n    },\n    removeItem(res) {\n      if (typeof res.attr === \"undefined\") {\n        this.configurationCopy.categories = this.configurationCopy.categories.filter(\n          el => {\n            return el.id !== res.category.id;\n          }\n        );\n      } else {\n        let found = this.configurationCopy.categories.find(el => {\n          return el.id === res.category.id;\n        });\n\n        if (found) {\n          found.attributes = found.attributes.filter(\n            el => el.id !== res.attr.id\n          );\n        }\n      }\n    }\n  },\n  watch: {\n    currentConfiguration() {\n      this.configurationCopy = Object.assign({}, this.currentConfiguration);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.list {\n  width: 100%;\n  height: 100%; /* border: 1px solid red; */\n}\n\n.list .content {\n  width: 100%;\n  height: calc(100% - 120px);\n  overflow: hidden;\n  overflow-y: auto;\n}\n\n.list .header {\n  width: 100%;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  text-transform: uppercase;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.list .header .buttonsDiv {\n  display: flex;\n  flex-direction: row;\n}\n\n.empty {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n}\n</style>\n\n<style>\n.list .header .addCatBtn .md-ripple {\n  border: 1px solid #2196f3;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div class=\"list\">\n\n    <div class=\"content\">\n\n      <md-field>\n        <label>configuration name</label>\n        <md-input v-model=\"data.paramName\"></md-input>\n      </md-field>\n\n      <display-list-component :categories=\"data.categories\"\n                              :message=\"'No category found create. Create one with the button below !'\"\n                              @add=\"addAttributes\">\n      </display-list-component>\n\n      <!-- <md-list :md-expand-single=\"false\">\n        <md-list-item v-for=\"(item,index) in data.categories\"\n                      :key=\"index\"\n                      md-expand>\n\n          <span class=\"md-list-item-text\">{{item.name}}</span>\n\n          <menu-component :category=\"item.name\"\n                          @add=\"addAttributes\"></menu-component>\n\n          <md-list slot=\"md-expand\">\n            <md-list-item class=\"md-inset\"\n                          v-for=\"(attr,i) in item.attributes\"\n                          :key=\"i\">\n              <md-checkbox class=\"md-primary\"\n                           v-model=\"attr.show\" />\n              <span class=\"md-list-item-text\">{{attr.name}}</span>\n            </md-list-item>\n\n          </md-list>\n        </md-list-item>\n      </md-list> -->\n    </div>\n\n    <div class=\"header\">\n\n      <div class=\"headerButtons addCategoryBtn\">\n        <menu-component @add=\"addAttributes\"></menu-component>\n\n        <div class=\"trigger\">\n          <md-button title=\"add category\"\n                     class=\"md-dense md-primary\"\n                     :disabled=\"disableSaveButton()\"\n                     @click=\"saveConfiguration\">\n            <md-icon>save_alt</md-icon>\n            &nbsp;\n            Save configuration\n          </md-button>\n        </div>\n\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport menuComponent from \"../../../vue/panels/attributePanel/components/tooltips/addItem.vue\";\nimport displayListComponent from \"../components/displayList.vue\";\n\nimport utilities from \"../../../js/utilities\";\n\nexport default {\n  name: \"createParamsComponent\",\n  components: {\n    \"menu-component\": menuComponent,\n    \"display-list-component\": displayListComponent\n  },\n  data() {\n    return {\n      data: {\n        paramName: \"\",\n        categories: []\n      }\n    };\n  },\n  methods: {\n    disableSaveButton() {\n      return (\n        this.data.paramName.trim().length === 0 ||\n        this.data.categories.length === 0\n      );\n    },\n    addAttributes(res) {\n      if (res.category && res.label) {\n        let found = this.data.categories.find(el => {\n          return el.name === res.category;\n        });\n\n        if (found) {\n          let attrFound = found.attributes.find(el => el.name === res.label);\n          if (typeof attrFound === \"undefined\") {\n            found.attributes.push({\n              show: false,\n              name: res.label,\n              id: Date.now()\n            });\n          }\n        }\n      } else if (res.category) {\n        let found = this.data.categories.find(el => el.name === res.category);\n\n        if (!found) {\n          this.data.categories.push({\n            id: Date.now(),\n            name: res.category,\n            attributes: []\n          });\n        }\n      }\n    },\n\n    saveConfiguration() {\n      utilities\n        .createConfiguration(this.data.paramName.trim(), this.data.categories)\n        .then(res => {\n          if (typeof res !== \"undefined\") {\n            this.data.paramName = \"\";\n            this.data.categories = [];\n          }\n          this.$emit(\"refresh\");\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.list {\n  width: 100%;\n  height: 100%; /* border: 1px solid red; */\n}\n\n.list .header {\n  width: 100%;\n  height: 60px;\n}\n\n.list .header .headerButtons {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 40px;\n}\n\n/* .list .header .headerButtons.addCategoryBtn .trigger {\n  margin-left: 10px;\n} */\n\n.list .content {\n  width: 100%;\n  height: calc(100% - 80px);\n  /* overflow: auto; */\n}\n</style>\n\n<style>\n.list .header .headerButtons.addCategoryBtn .trigger {\n  border: 1px solid #448aff;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Import Data</md-dialog-title>\n    <md-dialog-content class=\"mdDialogContainer\">\n      <div v-if=\"appState === STATES.valid\"\n           class=\"valid\">\n        <md-icon class=\"md-size-4x\">check</md-icon>\n        <div>File imported.</div>\n\n      </div>\n\n      <div v-if=\"appState === STATES.normal\"\n           class=\"valid\">\n\n        <div>This file can be imported.</div>\n      </div>\n\n      <div v-else-if=\"appState === STATES.loading\"\n           class=\"loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n\n      </div>\n\n      <div class=\"error\"\n           v-else-if=\"appState === STATES.error\">\n        <md-icon class=\"md-size-4x\">close</md-icon>\n        <div>Something went wrong !</div>\n        <div>Check if the file is the same as the exported one</div>\n      </div>\n\n    </md-dialog-content>\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Cancel</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"appState !== STATES.normal\">Import</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport attributeService from \"../../services\";\n\nexport default {\n  name: \"ImportAttributeExcelDialog\",\n  props: [\"onFinised\"],\n  data() {\n    this.STATES = Object.freeze({\n      valid: 0,\n      loading: 1,\n      error: 2,\n      normal: 3,\n    });\n\n    return {\n      appState: this.STATES.normal,\n      showDialog: true,\n      data: [],\n      itemsMap: new Map(),\n      callback: () => {},\n    };\n  },\n  methods: {\n    async opened(option) {\n      this.appState = this.STATES.loading;\n\n      this.callback = option.callback;\n\n      this.constructMap(option.tableData);\n\n      const excelData = this.concatSheets(option.excelData);\n\n      const data = this.formatExcelData(excelData);\n\n      this.data = await this.getDifferenceBetweenData(data, option.tableData);\n\n      if (this.data) {\n        this.appState = this.STATES.normal;\n      } else {\n        this.appState = this.STATES.error;\n      }\n\n      // const tableFormated = this.convertDataToJson(option.tableData);\n\n      // this.data = this.getDataModified(excelData, tableFormated);\n    },\n\n    async removed(option) {\n      this.appState = this.STATES.loading;\n\n      if (option && this.data) {\n        this._changeValue()\n          .then(() => {\n            this.appState = this.STATES.valid;\n            this.callback();\n            setTimeout(() => {\n              this.showDialog = false;\n            }, 1000);\n          })\n          .catch((el) => {\n            this.appState = this.STATES.error;\n          });\n      } else {\n        this.showDialog = false;\n        this.callback();\n      }\n\n      // this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    formatExcelData(excelData) {\n      return excelData.map((data) => {\n        let obj = { id: \"\", attributes: [] };\n\n        obj.id = data[\"SpinalGraph ID\"];\n        obj.name = data[\"Name\"];\n\n        const lists = [\"name\", \"spinalgraph id\", \"revit id\"];\n\n        for (const key of Object.keys(data)) {\n          // if (!key.includes(\" / \")) continue;\n\n          if (lists.indexOf(key.toLowerCase()) !== -1) continue;\n\n          const list = key.split(\" / \");\n\n          obj.attributes.push({\n            category: list[0] ? list[0] : \"\",\n            label: list[1] ? list[1] : \"\",\n            value: data[key] ? data[key] : \"-\",\n          });\n        }\n\n        return obj;\n      });\n    },\n\n    concatSheets(excelData) {\n      const data = [];\n      for (const values of Object.values(excelData)) {\n        data.push(...values);\n      }\n      return data;\n    },\n\n    constructMap(tableContent) {\n      for (const content of tableContent) {\n        const element = {};\n        for (const attr of content.attributes) {\n          element[`${attr.category}_${attr.label}`] = {\n            value: attr.value,\n            displayValue: attr.value,\n          };\n        }\n        this.itemsMap.set(content.id, element);\n      }\n    },\n\n    getDifferenceBetweenData(excelData, tableContent) {\n      const diff = [];\n      for (const dataIterator of excelData) {\n        let found = tableContent.find((el) => el.id === dataIterator.id);\n\n        if (found && found.attributes) {\n          const diffAttr = this._getAttrDiff(found, dataIterator);\n\n          if (typeof diffAttr === \"undefined\") {\n            continue;\n          } else if (\n            diffAttr &&\n            (diffAttr.newName || diffAttr.attributes.length > 0)\n          ) {\n            diff.push(diffAttr);\n          }\n        }\n      }\n\n      return diff;\n    },\n\n    async _changeValue() {\n      const promises = [];\n\n      for (const found of this.data) {\n        // const found = this.data.find(el => el.id === nodeId);\n        // console.log(\"found\", found);\n        if (found && found.attributes) {\n          if (found.newName) {\n            await this.editNodeName(found.id, found.newName);\n          }\n\n          for (const attr of found.attributes) {\n            // let value = this.itemsMap.get(nodeId)[\n            //   `${attr.category}_${attr.label}`\n            // ][\"value\"];\n            // let displayValue = this.itemsMap.get(nodeId)[\n            //   `${attr.category}_${attr.label}`\n            // ][\"displayValue\"];\n            // console.log(\"value\", value, \"displayValue\", displayValue);\n            // if (value !== displayValue) {\n            promises.push(\n              attributeService.updateAttributeValue(\n                found.id,\n                attr.category,\n                attr.label,\n                attr.value\n              )\n            );\n            // }\n          }\n        }\n      }\n\n      return Promise.all(promises);\n    },\n\n    _getAttrDiff(tableItem, excelItem) {\n      let obj = {\n        id: tableItem.id,\n        attributes: [],\n      };\n\n      if (tableItem.name !== excelItem.name) {\n        obj.newName = excelItem.name;\n      }\n\n      for (const attr of excelItem.attributes) {\n        let attrFound = tableItem.attributes.find((el) => {\n          return attr.category === el.category && attr.label === el.label;\n        });\n\n        if (attrFound && attrFound.value != attr.value) {\n          obj.attributes.push(attr);\n        }\n        // else if (typeof attrFound === \"undefined\") {\n        //   return;\n        // }\n      }\n\n      return obj;\n    },\n\n    editNodeName(nodeId, newName) {\n      const realNode = SpinalGraphService.getRealNode(nodeId);\n      if (realNode) {\n        realNode.info.name.set(newName);\n      }\n    },\n\n    /*\n    convertDataToJson(tableData) {\n      return tableData.map(el => {\n        let res = {};\n\n        res[\"SpinalGraph ID\"] = el.id;\n        res[\"Name\"] = el.name;\n\n        el.attributes.forEach(attr => {\n          res[`${attr.category} / ${attr.label}`] = attr.value;\n        });\n\n        return res;\n      });\n    },\n\n    getDataModified(excelData, tableData) {\n      let formated = excelData.map(data => {\n        let found = tableData.find(el => {\n          return el[\"SpinalGraph ID\"] === data[\"SpinalGraph ID\"];\n        });\n\n        if (typeof found !== \"undefined\") {\n        }\n\n        return;\n      });\n\n      return formated.filter(el => {\n        return typeof el !== \"undefined\";\n      });\n    },\n\n    */\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .valid,\n.mdDialogContainer .error {\n  text-align: center;\n  font-size: 20px;\n}\n\n.mdDialogContainer .valid .md-icon {\n  color: green;\n}\n\n.mdDialogContainer .error .md-icon {\n  color: red;\n}\n</style>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">Export Configuration</md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n\n      <h1>Hello world !!</h1>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Cancel</md-button>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\">export</md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nexport default {\n  name: \"exportConfigurationDialog\",\n  props: [\"onFinised\"],\n  data() {\n    return {\n      showDialog: true\n    };\n  },\n  methods: {\n    opened(option) {},\n\n    async removed(option) {\n      if (option) {\n      }\n\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    }\n  }\n};\n</script>","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog :md-active.sync=\"showDialog\" @md-closed=\"closeDialog(false)\">\n    <md-dialog-title class=\"dialogTitle\">import Configuration</md-dialog-title>\n\n    <md-dialog-content class=\"mdDialogContainer\">\n      <div v-if=\"appState === STATES.valid\" class=\"valid\">\n        <md-icon class=\"md-size-4x\">check</md-icon>\n        <div>File imported.</div>\n      </div>\n\n      <div v-if=\"appState === STATES.normal\" class=\"valid\">\n        <div>This file can be imported.</div>\n      </div>\n\n      <div v-else-if=\"appState === STATES.loading\" class=\"loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n      <div class=\"error\" v-else-if=\"appState === STATES.error\">\n        <md-icon class=\"md-size-4x\">close</md-icon>\n        <div>Something went wrong !</div>\n        <div>Check if the file is the same as the exported one</div>\n      </div>\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n        >Close</md-button\n      >\n      <md-button\n        class=\"md-primary\"\n        @click=\"closeDialog(true)\"\n        :disabled=\"appState !== STATES.normal\"\n        >Import</md-button\n      >\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { spinalConfigurationService } from '../../../../services';\n\nexport default {\n  name: 'importConfigurationDialog',\n  props: ['onFinised'],\n  data() {\n    this.STATES = Object.freeze({\n      valid: 0,\n      loading: 1,\n      error: 2,\n      normal: 3,\n    });\n\n    return {\n      appState: this.STATES.normal,\n      showDialog: true,\n      data: [],\n    };\n  },\n  methods: {\n    opened(option) {\n      this.appState = this.STATES.loading;\n      const data = this.concatSheets(option);\n      this.data = this.formatData(data);\n      this.appState = this.STATES.normal;\n    },\n\n    async removed(option) {\n      this.appState = this.STATES.loading;\n      if (option) {\n        this.createElements(this.data)\n          .then(() => {\n            this.appState = this.STATES.valid;\n          })\n          .catch((el) => {\n            this.appState = this.STATES.error;\n          });\n      } else {\n        this.showDialog = false;\n      }\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === 'function') {\n        this.onFinised(closeResult);\n      }\n    },\n\n    concatSheets(excelData) {\n      const data = [];\n      for (const values of Object.values(excelData)) {\n        data.push(...values);\n      }\n      return data;\n    },\n\n    formatData(argExcelData) {\n      const data = [];\n\n      for (const element of argExcelData) {\n        let categoryFound = data.find((el) => {\n          return el.name.toLowerCase() == element.Category.toLowerCase();\n        });\n\n        if (typeof categoryFound === 'undefined') {\n          categoryFound = {\n            name: element.Category,\n            groups: [],\n          };\n\n          data.push(categoryFound);\n        }\n\n        let groupFound = categoryFound.groups.find((el) => {\n          return el.name.toLowerCase() == element.Group.toLowerCase();\n        });\n\n        if (typeof groupFound === 'undefined') {\n          groupFound = {\n            name: element.Group,\n            configurations: [],\n          };\n\n          categoryFound.groups.push(groupFound);\n        }\n\n        let configurationFound = groupFound.configurations.find((el) => {\n          return (\n            el.name.toLowerCase() ==\n            element['Configuration Profil'].toLowerCase()\n          );\n        });\n\n        if (typeof configurationFound === 'undefined') {\n          configurationFound = {\n            name: element['Configuration Profil'],\n            categories: [],\n          };\n\n          groupFound.configurations.push(configurationFound);\n        }\n\n        let attributeCategoryFound = configurationFound.categories.find(\n          (el) => {\n            return (\n              el.name.toLowerCase() ===\n              element['Attribute Category'].toLowerCase()\n            );\n          }\n        );\n\n        if (typeof attributeCategoryFound === 'undefined') {\n          attributeCategoryFound = {\n            name: element['Attribute Category'],\n            attributes: [],\n          };\n\n          configurationFound.categories.push(attributeCategoryFound);\n        }\n\n        let attributeFound = attributeCategoryFound.attributes.find((el) => {\n          return (\n            el.name.toLowerCase() === element['Attribute Name'].toLowerCase()\n          );\n        });\n\n        if (typeof attributeFound === 'undefined') {\n          attributeCategoryFound.attributes.push({\n            show: true,\n            name: element['Attribute Name'],\n            id: Date.now(),\n          });\n        }\n      }\n\n      return data;\n    },\n\n    async createElements(data) {\n      for (const iterator of data) {\n        const categoryId = await this._createCategory(iterator.name);\n\n        for (const groupIterator of iterator.groups) {\n          const groupId = await this._createGroup(\n            categoryId,\n            groupIterator.name\n          );\n\n          for (const configuration of groupIterator.configurations) {\n            const configId = await this._createConfiguration(\n              groupId,\n              configuration.name\n            );\n\n            spinalConfigurationService.editConfiguration(\n              configId,\n              configuration\n            );\n          }\n        }\n      }\n    },\n\n    async _createCategory(name) {\n      const category = await spinalConfigurationService.createCategory(\n        name,\n        'add'\n      );\n\n      return category.info.id.get();\n    },\n\n    async _createGroup(categoryId, name) {\n      const group = await spinalConfigurationService.createGroup(\n        categoryId,\n        name,\n        '#000000'\n      );\n\n      return group.info.id.get();\n    },\n\n    async _createConfiguration(groupId, name) {\n      const configuration =\n        await spinalConfigurationService.createConfiguration(groupId, name);\n\n      return configuration.info.id.get();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 400px;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .valid,\n.mdDialogContainer .error {\n  text-align: center;\n  font-size: 20px;\n}\n\n.mdDialogContainer .valid .md-icon {\n  color: green;\n}\n\n.mdDialogContainer .error .md-icon {\n  color: red;\n}\n</style>\n","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n\n    <md-dialog-title class=\"dialogTitle\">\n      Use Regex\n    </md-dialog-title>\n\n    <md-dialog-content class=\"dialogContent\">\n\n      <!-- <div class=\"_title\">\n\n        <md-subheader>Create By using : </md-subheader>\n\n        <div class=\"radios\">\n          <md-radio v-model=\"data.fixed\"\n                    :value=\"fase\"\n                    class=\"md-primary\">Fixed Value</md-radio>\n\n          <md-radio v-model=\"data.fixed\"\n                    :value=\"true\"\n                    class=\"md-primary\">Dynamic Value</md-radio>\n        </div>\n\n      </div> -->\n\n      <div class=\"content\">\n\n        <!-- <div class=\"advancedCheckbox\">\n          <md-checkbox v-model=\"advanced\"\n                       class=\"md-primary\">Use advanced option</md-checkbox>\n        </div> -->\n\n        <!-- \n        //////////////////////////////////////////\n        //  NOT Advanced\n        //////////////////////////////////////////\n     -->\n        <!-- <div class=\"normal\"\n             v-if=\"!advanced\">\n\n          <md-list>\n            <md-list-item>\n              <md-field>\n                <label>name</label>\n                <md-input v-model=\"value\"></md-input>\n              </md-field>\n            </md-list-item>\n\n            <md-list-item>\n              <md-checkbox v-model=\"contains\"\n                           class=\"md-primary\">\n                select the elements which contain this key</md-checkbox>\n            </md-list-item>\n          </md-list>\n\n        </div> -->\n        <!-- \n        //////////////////////////////////////////\n        //  Advanced\n        //////////////////////////////////////////\n     -->\n        <div class=\"advanced\">\n          <md-list>\n            <md-list-item>\n              <md-field class=\"_mdField\">\n                <label>Regex</label>\n                <span class=\"md-prefix\">{{delimiterV}}</span>\n                <md-input v-model=\"value\"\n                          palceholder=\"Regex\"></md-input>\n                <span class=\"md-icon md-suffix\">{{delimiterV}}</span>\n\n              </md-field>\n            </md-list-item>\n\n            <md-list-item>\n              <md-field class=\"_mdField\">\n                <label>Flags</label>\n\n                <md-select v-model=\"flags\"\n                           name=\"flags\"\n                           id=\"flags\"\n                           md-dense\n                           multiple>\n\n                  <md-option v-for=\"(flag,index) in flagsList\"\n                             :key=\"index\"\n                             :value=\"flag.value\">{{flag.name}}</md-option>\n\n                </md-select>\n\n              </md-field>\n\n            </md-list-item>\n\n          </md-list>\n        </div>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\">Save</md-button>\n\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport flagsList from \"../js/flags.js\";\nimport create_data from \"../js/data.js\";\n\nexport default {\n  name: \"configureDialog\",\n  props: [\"onFinised\"],\n  data() {\n    this.CREATE_DATA = create_data;\n    this.flagsList = flagsList;\n\n    return {\n      showDialog: true,\n      value: \"\",\n      advanced: true,\n      contains: false,\n      delimiterV: \"/\",\n      flags: [],\n\n      data: {\n        fixed: true\n      },\n      callback: null\n    };\n  },\n  methods: {\n    opened(params) {\n      this.callback = params.callback;\n    },\n    removed(option) {\n      if (option) {\n        const regex = this.getRegex(\n          this.value,\n          this.advanced,\n          this.contains,\n          this.flags.join(\"\"),\n          this.delimiterV\n        );\n\n        if (this.callback) this.callback(regex, this.data.fixed);\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    getRegex(value, advanced, contains, flag, delimiter = \"/\") {\n      let regex;\n\n      switch (advanced) {\n        case false:\n          if (contains) {\n            regex = new RegExp(`${RegExp.escape(value.trim())}`, \"i\");\n          } else {\n            regex = new RegExp(`^${RegExp.escape(value.trim())}$`, \"i\");\n          }\n          break;\n        case true:\n          regex = new RegExp(value, flag);\n          break;\n      }\n\n      return regex;\n    }\n  },\n  computed: {\n    getLabel() {\n      switch (this.data.createBy) {\n        case this.CREATE_DATA.attribute:\n          return \"Attribute Key\";\n        case this.CREATE_DATA.name:\n          return \"name key\";\n        default:\n          break;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.mdDialogContainer {\n  width: 500px;\n  height: 500px;\n}\n\n.mdDialogContainer .dialogTitle {\n  text-align: center;\n}\n\n.mdDialogContainer .dialogContent {\n  padding-bottom: 0px;\n}\n\n.mdDialogContainer .dialogContent ._title {\n  display: flex;\n  /* justify-content: space-between; */\n}\n\n.mdDialogContainer .dialogContent .advancedCheckbox {\n  padding-left: 16px;\n}\n\n/* .mdDialogContainer .dialogContent .sub-content {\n  width: 100%;\n  height: 33%;\n} */\n</style>","export default [\n\n  {\n    name: \"global\",\n    value: \"g\",\n    description: \"Don't return after first match\"\n  },\n  {\n    name: \"Multi line\",\n    value: \"m\",\n    description: \"^ and $ match start/end of line\"\n  },\n  {\n    name: \"Insensitive\",\n    value: \"i\",\n    description: \"Case insensitive match\"\n  },\n  {\n    name: \"unicode\",\n    value: \"u\",\n    description: \"Match with full unicode\"\n  }\n]","<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog class=\"_mdDialogContainer\"\n             :md-active.sync=\"showDialog\"\n             @md-closed=\"closeDialog(false)\">\n\n    <md-dialog-title class=\"_dialogTitle\">\n      Select type\n    </md-dialog-title>\n\n    <md-dialog-content class=\"_dialogContent\">\n\n      <div class=\"loading\"\n           v-if=\"appState === STATES.normal\">\n        <md-field>\n          <label for=\"type\">Type</label>\n          <md-select v-model=\"typeSelected\"\n                     name=\"type\"\n                     id=\"type\">\n            <md-option v-if=\"!data || data.types.length === 0\"\n                       disabled>No found</md-option>\n\n            <md-option v-for=\"(type, index) in data.types\"\n                       :key=\"index\"\n                       :value=\"type\">{{type}}</md-option>\n\n          </md-select>\n        </md-field>\n      </div>\n\n      <!--\n          /////////////////////////////////\n          Loading\n          ////////////////////////////////\n        -->\n      <div v-if=\"appState === STATES.loading\"\n           class=\"loading\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n      </div>\n\n    </md-dialog-content>\n\n    <md-dialog-actions>\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(false)\">Close</md-button>\n\n      <md-button class=\"md-primary\"\n                 @click=\"closeDialog(true)\"\n                 :disabled=\"disabled()\">Save</md-button>\n\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport SpinalAttributeManager from \"../../../../services\";\n\nimport { spinalPanelManagerService } from \"spinal-env-viewer-panel-manager-service\";\n\nexport default {\n  name: \"select-type\",\n  props: [\"onFinised\"],\n  data() {\n    this.STATES = Object.freeze({\n      normal: 0,\n      loading: 1,\n      error: 2\n    });\n\n    return {\n      appState: this.STATES.error,\n      showDialog: true,\n      data: {},\n      typeSelected: \"\"\n    };\n  },\n  methods: {\n    async opened(params) {\n      this.appState = this.STATES.loading;\n      this.data = await this.getAllData(params);\n      this.appState = this.STATES.normal;\n    },\n\n    removed(option) {\n      if (option) {\n        const items = this.getItems(this.typeSelected);\n\n        spinalPanelManagerService.openPanel(\"generateGroupPanel\", {\n          type: this.typeSelected,\n          items: items\n        });\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised(closeResult);\n      }\n    },\n\n    getAllData(params) {\n      return SpinalAttributeManager.getAllData(params.id, params.id);\n    },\n\n    getItems(type) {\n      return this.data.data[type];\n    },\n\n    disabled() {\n      return this.typeSelected.trim().length === 0;\n    }\n  }\n};\n</script>\n\n<style scoped>\n._mdDialogContainer {\n  width: 300px;\n  height: 300px;\n}\n\n._mdDialogContainer ._dialogTitle {\n  text-align: center;\n}\n\n._mdDialogContainer .loading {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>","/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nconst {\n  spinalPanelManagerService,\n  SpinalPanelApp\n} = require(\"spinal-env-viewer-panel-manager-service\");\n\nconst SpinalForgeExtention = require(\"./SpinalForgeExtention.js\")(\n  spinalPanelManagerService,\n  SpinalPanelApp\n);\n\nmodule.exports = {\n  SpinalForgeExtention\n};\n","/*\n * Copyright 2023 SpinalCom - www.spinalcom.com\n * \n * This file is part of SpinalCore.\n * \n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n * \n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n * \n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\n\nfunction configInit(option) {\n  const cfg = {};\n  if (typeof option.toolbar !== \"undefined\") {\n    cfg.toolbar = {\n      icon: option.toolbar.icon || \"done\",\n      label: option.toolbar.label || \"label\",\n      subToolbarName: option.toolbar.subToolbarName || \"spinalcom\",\n      styleBtn: {},\n      styleIcon: {}\n    };\n    Object.assign(cfg.toolbar.styleBtn, option.toolbar.styleBtn);\n    Object.assign(cfg.toolbar.styleIcon, option.toolbar.styleIcon);\n  }\n  if (typeof option.panel !== \"undefined\") {\n    cfg.panel = {\n      title: option.panel.title || \"Spinalcom Panel\",\n      classname: option.panel.classname || \"spinal-pannel\",\n      closeBehaviour: option.panel.closeBehaviour || \"hide\"\n    };\n    if (typeof option.style !== \"undefined\") {\n      cfg.style = {};\n      Object.assign(cfg.style, option.style);\n    }\n  }\n  cfg.name = option.name || \"spinalExtention\";\n  cfg.vueMountComponent = option.vueMountComponent;\n  cfg.onLoad = option.onLoad;\n  cfg.onUnLoad = option.onUnLoad;\n  return cfg;\n}\n\nfunction onToolbarCreated() {\n  this.viewer.removeEventListener(\n    window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n    this.onToolbarCreatedBinded\n  );\n  this.onToolbarCreatedBinded = null;\n  createToolbar.call(this);\n}\n\nfunction createToolbar() {\n  this.toolbarButton = new window.Autodesk.Viewing.UI.Button(\n    this.cfg.toolbar.label\n  );\n  this.toolbarButton.onClick = () => {\n    this.tooglePanel(this.cfg);\n  };\n  var icon = this.toolbarButton.container.firstChild;\n  icon.className = \"adsk-button-icon md-icon md-icon-font md-theme-default\";\n  icon.innerHTML = this.cfg.toolbar.icon;\n\n  for (var key in this.cfg.toolbar.styleIcon) {\n    if (this.cfg.toolbar.styleIcon.hasOwnProperty(key)) {\n      icon.style[key] = this.cfg.toolbar.styleIcon[key];\n    }\n  }\n  for (var key in this.cfg.toolbar.styleBtn) {\n    if (this.cfg.toolbar.styleBtn.hasOwnProperty(key)) {\n      this.toolbarButton.container.style[key] = this.cfg.toolbar.styleBtn[key];\n    }\n  }\n\n  this.toolbarButton.setToolTip(this.cfg.toolbar.label);\n  this.subToolbar = this.viewer.toolbar.getControl(\n    this.cfg.toolbar.subToolbarName\n  );\n  if (!this.subToolbar) {\n    this.subToolbar = new window.Autodesk.Viewing.UI.ControlGroup(\n      this.cfg.toolbar.subToolbarName\n    );\n    this.viewer.toolbar.addControl(this.subToolbar);\n  }\n  this.subToolbar.addControl(this.toolbarButton);\n}\n\nfunction closeComponent() {\n  if (this.cfg.panel.closeBehaviour !== \"hide\") {\n    try {\n      this.component.removed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n    this.panel.container.remove();\n    this.panel = null;\n  } else {\n    try {\n      this.component.closed.call(this.component);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction getPanel() {\n  if (this.panel === null) {\n    this.panel = new window.PanelClass(this.viewer, this.cfg.panel.title);\n    var _container = document.createElement(\"div\");\n    var _scrollContainer = this.panel.createScrollContainer();\n\n    _container.className +=\n      this.panel.container.id + \"-panelcontainer \" + this.cfg.panel.classname;\n    for (var key in this.cfg.style) {\n      if (this.cfg.style.hasOwnProperty(key)) {\n        this.panel.container.style[key] = this.cfg.style[key];\n      }\n    }\n\n    if (this.panel.container.style.left) {\n      this.panel.container.style.left = \"0\";\n    }\n\n    this.panel.container.appendChild(_scrollContainer);\n    _scrollContainer.style.height = \"calc(100% - 52px)\";\n    _scrollContainer.appendChild(_container);\n\n    var _footer = this.panel.createFooter();\n    this.panel.container.appendChild(_footer);\n\n    if (this.cfg.vueMountComponent) {\n      this.component = new this.cfg.vueMountComponent().$mount(_container);\n    }\n\n    const _this = this;\n    this.panel.addVisibilityListener(open => {\n      if (!open) {\n        closeComponent.call(_this);\n      }\n    });\n  }\n  return this.panel;\n}\n\n/**\n *\n *\n * @param {*} spinalPanelManagerService\n * @param {*} SpinalPanelApp\n * @returns {object} { createExtention, registerExtention }\n */\nmodule.exports = function (spinalPanelManagerService, SpinalPanelApp) {\n  return {\n    /**\n     * factory function to create a dynamic class that extends the `SpinalPanelApp` class\n     *```js\n{\n  name: \"extention_name\",\n  vueMountComponent: Vue.extend(aVueCompoment),\n  onLoad: () => {console.log(\"onLoad\");},\n  onUnLoad: () => {console.log(\"onUnLoad\");},\n  toolbar: {\n    icon: \"done\",\n    label: \"testLabel\",\n    subToolbarName: \"spinalcom\"\n  },\n  panel: {\n    title: \"Spinalcom Panel\",\n    classname: \"spinal-pannel\",\n    closeBehaviour: \"hide\"\n  },\n  style: {}\n}\n```\n     * @param {object} option see description\n     * @returns SpinalForgeExtention\n     */\n    createExtention(option) {\n      const cfg = configInit(option);\n      /**\n       * class returned by createExtention\n       * this extention is also registered in autodesk viweer\n       * @extends SpinalPanelApp\n       * @property {AutodeskViewer} viewer the autodesk view\n       * @property {AutodeskPanel} panel the panel\n       * @property {Vue.component} component the component mounted\n       * @property {Object} cfg the option given on creation\n       */\n      const SpinalForgeExtention = class extends SpinalPanelApp {\n        constructor(viewer, options) {\n          super();\n          window.Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n          this.cfg = cfg;\n          spinalPanelManagerService.registerPanel(cfg.name, this);\n        }\n        /**\n         * method called on load of the extention (managed by the autodesk viewer)\n         * the method create a button in the toolbar if put in the option of `createExtention`.\n         */\n        load() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            // add toolbar\n            if (this.viewer.toolbar) {\n              createToolbar.call(this);\n            } else {\n              this.onToolbarCreatedBinded = onToolbarCreated.bind(this);\n              this.viewer.addEventListener(\n                window.Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n                this.onToolbarCreatedBinded\n              );\n            }\n          }\n          if (typeof cfg.onLoad !== \"undefined\") cfg.onLoad.call(this);\n          return true;\n        }\n        /**\n         * method called when the viewer unload of the extention\n         * (managed by the autodesk viewer)\n         */\n        unload() {\n          if (typeof cfg.toolbar !== \"undefined\") {\n            this.viewer.subToolbar.removeControl(this.toolbarButton);\n          }\n          if (typeof cfg.onUnLoad !== \"undefined\") cfg.onUnLoad.call(this);\n          return true;\n        }\n\n        activate() {\n          return this.load();\n        }\n\n        deactivate() {\n          return this.unload();\n        }\n\n        /**\n         *\n         * @param {*} option\n         */\n        openPanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(true);\n          try {\n            this.component.opened.call(this.component, option, this.viewer);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        closePanel(option) {\n          const panel = getPanel.call(this);\n          panel.setVisible(false);\n        }\n        /**\n         *\n         *\n         * @param {*} option\n         */\n        tooglePanel(option) {\n          if (this.panel === null || this.panel.isVisible() === false) {\n            this.openPanel.call(this, option);\n          } else { this.closePanel.call(this, option); }\n        }\n      };\n      return SpinalForgeExtention;\n    },\n\n    /**\n     * Method to register an extention to the viewer and the forge viewer\n     * @param {string} name name of the extention\n     * @param {*} classExtention an extention created by `createExtention`\n     */\n    registerExtention(name, classExtention) {\n      // register to forge\n      window.Autodesk.Viewing.theExtensionManager.registerExtension(\n        name,\n        classExtention\n      );\n      // register to viewer\n      window.spinal.ForgeExtentionManager.addExtention(name);\n    }\n  };\n};\n","import OPEN_PANEL_BTN from \"./openPanel\";\nimport OPEN_CONFIGURATION_PANEL from \"./openConfiguration\"\n\nexport {\n  OPEN_PANEL_BTN,\n  OPEN_CONFIGURATION_PANEL\n}","import {\n  SpinalContextApp\n} from \"spinal-env-viewer-context-menu-service\";\n\nimport {\n  spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\n\nexport default class OpenAttributeManagerPanel extends SpinalContextApp {\n  constructor() {\n    super(\"open attribute manager panel\", \"open attribute manager panel\", {\n      icon: \"power_input\",\n      icon_type: \"in\",\n      backgroundColor: \"#FF0000\",\n      fontColor: \"#FFFFFF\"\n    })\n  }\n\n  isShown() {\n    return Promise.resolve(true);\n  }\n\n\n  action(option) {\n    let params = {\n      nodeSelected: option.selectedNode.get(),\n      context: option.context.get()\n    };\n    spinalPanelManagerService.openPanel(\"attributeManagerPanel\", params);\n  }\n\n}","import {\n  SpinalContextApp\n} from \"spinal-env-viewer-context-menu-service\";\n\nimport {\n  spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\n\nimport {\n  spinalConfigurationService\n} from '../services';\n\n// import {\n//   SpinalGraphService\n// } from \"spinal-env-viewer-graph-service\";\n\nexport default class OpenConfigurationPanel extends SpinalContextApp {\n  constructor() {\n    super(\"open configuration manager panel\",\n      \"open configuration manager panel\", {\n        icon: \"settings_applications\",\n        icon_type: \"in\",\n        backgroundColor: \"#FF0000\",\n        fontColor: \"#FFFFFF\"\n      })\n  }\n\n  isShown(option) {\n    const nodeType = option.context.type.get();\n\n    const configContextType =\n      `${spinalConfigurationService.CONFIGURATION_PROFIL_TYPE}GroupContext`;\n\n    if (nodeType === configContextType) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(-1);\n\n  }\n\n\n  async action(option) {\n\n    const contextInfo = option.context.get();\n    const selectedNode = option.selectedNode.get();\n\n    let params = {}\n\n    if (contextInfo.id !== selectedNode.id) {\n      params = await spinalConfigurationService.getTree(selectedNode);\n    }\n\n    spinalPanelManagerService.openPanel(\"configurationPanel\", params);\n  }\n\n}\n\n\n// const getValues = async (info) => {\n\n\n//   if (spinalConfigurationService.isCategory(info.type)) {\n\n//     obj.categoryId = info.id;\n\n//   } else if (spinalConfigurationService.isGroup(info.type)) {\n\n//   } else if (spinalConfigurationService.CONFIGURATION_PROFIL_TYPE === info\n//     .type) {\n\n\n\n//   }\n// }","import OPEN_SELECT_TYPE_BTN from \"./openSelectType\";\n\nexport {\n  OPEN_SELECT_TYPE_BTN\n}","import {\n  SpinalContextApp\n} from \"spinal-env-viewer-context-menu-service\";\n\nimport {\n  spinalPanelManagerService\n} from \"spinal-env-viewer-panel-manager-service\";\n\nimport {\n  SpinalGraphService,\n  SpinalContext\n} from \"spinal-env-viewer-graph-service\";\n\nexport default class OpenSelectTypePanel extends SpinalContextApp {\n  constructor() {\n    super(\"open Generate group  panel\",\n      \"open Generate group panel\", {\n        icon: \"select_all\",\n        icon_type: \"in\",\n        backgroundColor: \"#FF0000\",\n        fontColor: \"#FFFFFF\"\n      })\n  }\n\n  isShown(option) {\n    const selectedNode = SpinalGraphService.getRealNode(option.selectedNode.id\n      .get());\n\n    if (selectedNode instanceof SpinalContext)\n      return Promise.resolve(true);\n\n    return Promise.resolve(-1);\n  }\n\n\n  action(option) {\n    spinalPanelManagerService.openPanel(\"selectTypeDialog\", option\n      .selectedNode.get());\n  }\n\n}"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-attribute-manager.d55131e7.js.map"}