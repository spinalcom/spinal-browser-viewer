{"mappings":"A","sources":["node_modules/spinal-env-viewer-plugin-node-inspector/src/node-inspector-modal.vue"],"sourcesContent":["<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <md-dialog style=\"min-width: 50vw;\"\n             :md-active=\"display\">\n    <md-dialog-title>{{ name }}</md-dialog-title>\n    <node-inspector ref=\"nodeInspector\"\n                    class=\"node-inspector\"\n                    :edit-mode=\"editMode\"\n                    :child-info=\"childInfo\"\n                    :relation-names=\"relationNames\"\n                    :default-relation-name=\"defaultRelationName\"\n                    @get-children=\"getChildren($event)\"\n                    @remove-from-graph=\"removeFromGraph($event)\"\n                    @remove-from-parent=\"removeFromParent($event)\" />\n    <md-dialog-actions style=\"justify-content: space-between;\">\n      <md-button v-if=\"editMode===false\"\n                 class=\"md-fab md-mini md-primary\"\n                 style=\"min-width: 0;\"\n                 @click=\"startEditBtn\">\n        <md-icon>edit</md-icon>\n      </md-button>\n      <div v-else>\n        <md-button class=\"md-fab md-mini\"\n                   style=\"min-width: 0;\"\n                   @click=\"cancelBtn\">\n          <md-icon>cancel</md-icon>\n        </md-button>\n        <md-button class=\"md-fab md-mini md-primary\"\n                   style=\"min-width: 0;\"\n                   @click=\"validBtn\">\n          <md-icon>check</md-icon>\n        </md-button>\n      </div>\n      <!-- <md-button class=\"md-primary\"\n                 @click=\"display = false\">\n      </md-button> -->\n\n      <md-button class=\"md-primary\"\n                 @click=\"display = false\">\n        close\n      </md-button>\n    </md-dialog-actions>\n  </md-dialog>\n</template>\n\n<script>\nimport { NodeInspector } from \"spinal-env-viewer-vue-components-lib\";\nimport { SpinalGraphService } from \"spinal-env-viewer-graph-service\";\nimport { FileSystem } from \"spinal-core-connectorjs_type\";\nimport { reorderChildren } from \"./reorderUtils\";\nexport default {\n  name: \"NodeInspectorModal\",\n  components: { NodeInspector },\n  data: function () {\n    return {\n      inspectedNode: {},\n      relationNames: [],\n      defaultRelationName: \"\",\n      childInfo: [],\n      childInfoBkp: [],\n      editMode: false,\n      display: false\n    };\n  },\n  computed: {\n    name: function () {\n      if (this.inspectedNode.hasOwnProperty(\"name\")) {\n        return this.inspectedNode.name;\n      }\n      return \"\";\n    }\n  },\n  watch: {\n    inspectedNode: {\n      handler: function (value) {\n        if (value.hasOwnProperty(\"_server_id\")) {\n          this.relationNames = this.getRelationNames(value);\n          if (this.relationNames.length > 0) {\n            this.defaultRelationName = this.relationNames[0];\n          }\n          return this.getChildren(this.defaultRelationName);\n        }\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    getInfo(node) {\n      const item = { _server_id: node._server_id };\n      if (node.info.name) item.name = node.info.name.get();\n      if (node.info.id) item.id = node.info.id.get();\n      return item;\n    },\n    getInfoFromRef(nodeRef) {\n      const realNode = SpinalGraphService.getRealNode(nodeRef.id.get());\n      const item = { _server_id: realNode._server_id };\n      if (realNode.info.name) item.name = realNode.info.name.get();\n      if (realNode.info.id) item.id = realNode.info.id.get();\n      return item;\n    },\n    getRelationNames(inspectedNode) {\n      const node = FileSystem._objects[inspectedNode._server_id];\n      return node.getRelationNames();\n    },\n    opened: function (option) {\n      this.inspectedNode = this.getInfoFromRef(option.selectedNode);\n      this.display = true;\n    },\n    closed: function () {},\n    removeFromGraph: function (id) {\n      SpinalGraphService.removeFromGraph(id.get());\n      for (let i = 0; i < this.childInfo.length; i++) {\n        const child = this.childInfo[i];\n        if (child.id.get() == event.get()) this.childInfo.splice(i);\n      }\n    },\n    removeFromParent: function (id) {\n      console.log(\"removeFromParent NYI\", id);\n      // SpinalGraphService.removeFromGraph(id.get());\n      // for (let i = 0; i < this.childInfo.length; i++) {\n      //   const child = this.childInfo[i];\n      //   if (child.id.get() == event.get()) this.childInfo.splice(i);\n      // }\n    },\n    async getChildren(relationName) {\n      const realNode = FileSystem._objects[this.inspectedNode._server_id];\n      const children = await realNode.getChildren([relationName]);\n      this.childInfo = children.map((node) => {\n        const item = { _server_id: node._server_id };\n        if (node.info.name) item.name = node.info.name.get();\n        if (node.info.id) item.id = node.info.id.get();\n        return item;\n      });\n    },\n    cancelBtn() {\n      this.editMode = false;\n      // this.childInfo = this.childInfoBkp;\n      this.$refs.nodeInspector.reset();\n    },\n    validBtn() {\n      this.editMode = false;\n      const realNode = FileSystem._objects[this.inspectedNode._server_id];\n      console.log(realNode);\n      const sortedArray = this.$refs.nodeInspector.returnSort();\n      const relationName = this.$refs.nodeInspector.relationName;\n      reorderChildren(realNode, relationName, sortedArray);\n      // this.childInfo = data;\n    },\n    startEditBtn() {\n      this.editMode = true;\n      // this.$refs.nodeInspector.\n      // this.childInfoBkp = this.childInfo.concat();\n    }\n    // reorder() {\n    // }\n    // getChildren: function (event) {\n    //   SpinalGraphService.getChildren(this.inspectedNode.id.get(), [event]).then(\n    //     (children) => {\n    //       this.childInfo = [];\n    //       this.childInfo.push(...children);\n    //     }\n    //   );\n    // }\n  }\n};\n</script>\n\n<style scoped>\n.node-inspector {\n  margin: 16px;\n  /* width: 30vw; */\n}\n</style>\n"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-node-inspector.7ec4e045.css.map"}