{"mappings":"A;;;;;A;;;;;;;;;;A;;;;;;;;A;;;;A;;;;;;;;A;;;;A;;;;;A;;;;;;;;A;;;;;;;A;;;;;A;;;;;;;;A","sources":["node_modules/spinal-env-viewer-plugin-upload/src/vue/linkTogroupTemplate.vue","node_modules/spinal-env-viewer-plugin-upload/src/vue/linkProfil.vue","node_modules/spinal-env-viewer-plugin-upload/src/vue/linkGroup.vue"],"sourcesContent":["<!--\nCopyright 2020 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n   <div class=\"subContent\">\n      <div class=\"title\">\n         <div>{{title}}</div>\n         <!-- <div class=\"md-layout-item md-size-10 mdIcon\">\n        <md-button class=\"md-icon-button\"\n                   @click=\"createEvent\"\n                   :disabled=\"disableBtn\">\n          <md-icon>control_point</md-icon>\n        </md-button>\n      </div> -->\n      </div>\n\n      <md-content class=\"container md-scrollbar\">\n         <md-list>\n            <md-list-item\n               class=\"list-item\"\n               v-for=\"(item,index) in data\"\n               :key=\"index\"\n               @click=\"selectItem(item.id)\"\n               :class=\"{'selected' : item.id === itemSelected}\"\n               v-tooltip=\"item.name\"\n            >\n\n               <span class=\"md-list-item-text\">{{item.name}}</span>\n\n            </md-list-item>\n         </md-list>\n      </md-content>\n\n   </div>\n</template>\n\n<script>\nexport default {\n   name: \"linkToGroupTemplate\",\n   props: [\"data\", \"title\", \"itemSelected\", \"disableBtn\"],\n   methods: {\n      createEvent() {\n         this.$emit(\"create\");\n      },\n      selectItem(id) {\n         this.$emit(\"select\", id);\n      },\n   },\n};\n</script>\n\n<style scoped>\n.subContent {\n   width: 100%;\n   height: 100%;\n}\n\n.subContent .title {\n   width: 100%;\n   height: 10%;\n   /* text-align: center; */\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n   padding: 0 15px 0 15px;\n   border-bottom: 1px dashed grey;\n}\n\n.subContent .container {\n   width: 100%;\n   height: 90%;\n   padding: 0px !important;\n   /* border: 1px solid red; */\n   overflow: hidden;\n   overflow-y: auto;\n}\n\n.subContent .container .list-item {\n   border-bottom: 1px solid grey;\n}\n\n.subContent .container .list-item .md-list-item-text {\n   width: 100%;\n   display: block;\n   overflow: hidden;\n   white-space: nowrap;\n   text-overflow: ellipsis;\n}\n\n.subContent .container .list-item.selected {\n   background-color: #448aff;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog class=\"dialogApp\"\n               :md-active.sync=\"showDialog\"\n               @md-closed=\"closeDialog(false)\">\n      <md-dialog-title>Link an endpoint to a profil</md-dialog-title>\n      <md-dialog-content class=\"content\">\n        <div class=\"section\">\n          <link-template :title=\"'Context'\"\n                         :data=\"context\"\n                         :itemSelected=\"contextSelected\"\n                         @select=\"selectContext\"\n                         :disableBtn=\"true\"></link-template>\n        </div>\n\n        <div class=\"section\">\n          <link-template :title=\"'Profil'\"\n                         :data=\"profils\"\n                         :itemSelected=\"profilSelected\"\n                         @select=\"selectProfil\"\n                         :disableBtn=\"true\"></link-template>\n        </div>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(false)\">Close</md-button>\n        <md-button class=\"md-primary\"\n                   @click=\"closeDialog(true)\"\n                   :disabled=\"!profilSelected\">Save</md-button>\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE,\n} from \"spinal-env-viewer-graph-service\";\n\nimport linkTemplate from \"./linkTogroupTemplate.vue\";\n\nexport default {\n  name: \"createContext\",\n  props: [\"onFinised\"],\n  components: { \"link-template\": linkTemplate },\n  data() {\n    this.endpointSelected;\n    return {\n      showDialog: true,\n      contextName: \"\",\n      profilSelected: \"\",\n      contextSelected: \"\",\n      context: [],\n      profils: [],\n    };\n  },\n  methods: {\n    async opened({ nodeId }) {\n      this.endpointSelected = nodeId;\n      this.context = await this.getData();\n    },\n    async removed(option) {\n      if (option.closeResult) {\n        const node = SpinalGraphService.getRealNode(this.endpointSelected);\n        if (node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n          await node.removeRelation(\n            \"endpointHasProfil\",\n            SPINAL_RELATION_PTR_LST_TYPE\n          );\n        SpinalGraphService.addChild(\n          this.endpointSelected,\n          this.profilSelected,\n          \"endpointHasProfil\",\n          SPINAL_RELATION_PTR_LST_TYPE\n        );\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n    selectContext(element) {\n      this.profilSelected = undefined;\n      this.profils = [];\n      this.contextSelected = element;\n      let found = this.context.find((el) => el.id == element);\n      if (found) this.profils = found.profils;\n    },\n    selectProfil(element) {\n      this.profilSelected = element;\n    },\n    getData() {\n      const contextNode =\n        SpinalGraphService.getContextWithType(\"uploadFileContext\");\n      const context = contextNode.map((element) => element.info.get());\n      const promise = context.map(async (el) => {\n        let contextChildren = await SpinalGraphService.getChildrenInContext(\n          el.id,\n          el.id\n        );\n        el.profils = contextChildren.map((element) => element.get());\n        return el;\n      });\n      return Promise.all(promise);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dialogApp {\n  width: 50%;\n  height: 100%;\n}\n.dialogApp .content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.dialogApp .content .section {\n  width: 50%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n</style>","<!--\nCopyright 2021 SpinalCom - www.spinalcom.com\n\nThis file is part of SpinalCore.\n\nPlease read all of the following terms and conditions\nof the Free Software license Agreement (\"Agreement\")\ncarefully.\n\nThis Agreement is a legally binding contract between\nthe Licensee (as defined below) and SpinalCom that\nsets forth the terms and conditions that govern your\nuse of the Program. By installing and/or using the\nProgram, you agree to abide by all the terms and\nconditions stated or referenced herein.\n\nIf you do not agree to abide by these terms and\nconditions, do not demonstrate your acceptance and do\nnot install or use the Program.\nYou should have received a copy of the license along\nwith this file. If not, see\n<http://resources.spinalcom.com/licenses.pdf>.\n-->\n\n<template>\n  <div>\n    <md-dialog\n      class=\"dialogApp\"\n      :md-active.sync=\"showDialog\"\n      @md-closed=\"closeDialog(false)\"\n    >\n      <md-dialog-title>Link an endpoint to a profil</md-dialog-title>\n      <md-dialog-content class=\"content\">\n        <div class=\"section\">\n          <link-template\n            :title=\"'Context'\"\n            :data=\"context\"\n            :itemSelected=\"contextSelected\"\n            @select=\"selectContext\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n\n        <div class=\"section\">\n          <link-template\n            :title=\"'Profil'\"\n            :data=\"profils\"\n            :itemSelected=\"profilSelected\"\n            @select=\"selectProfil\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n        <div class=\"section\">\n          <link-template\n            :title=\"'Device'\"\n            :data=\"devices\"\n            :itemSelected=\"deviceSelected\"\n            @select=\"selectDevice\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n        <div class=\"section\">\n          <link-template\n            :title=\"'Endpoint'\"\n            :data=\"endpoints\"\n            :itemSelected=\"endpointSelected\"\n            @select=\"selectEndpoint\"\n            :disableBtn=\"true\"\n          ></link-template>\n        </div>\n      </md-dialog-content>\n\n      <md-dialog-actions>\n        <md-button class=\"md-primary\" @click=\"closeDialog(false)\"\n          >Close</md-button\n        >\n        <md-button\n          class=\"md-primary\"\n          @click=\"closeDialog(true)\"\n          :disabled=\"!endpointSelected\"\n          >Save</md-button\n        >\n      </md-dialog-actions>\n    </md-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  SpinalGraphService,\n  SPINAL_RELATION_PTR_LST_TYPE\n} from \"spinal-env-viewer-graph-service\";\nvar {\n  SpinalExcelManager\n} = require(\"spinal-env-viewer-plugin-excel-manager-service\");\nimport linkTemplate from \"./linkTogroupTemplate.vue\";\n\nexport default {\n  name: \"createContext\",\n  props: [\"onFinised\"],\n  components: { \"link-template\": linkTemplate },\n  data() {\n    this.selectedNode;\n    return {\n      showDialog: true,\n      contextName: \"\",\n      profilSelected: \"\",\n      contextSelected: \"\",\n      deviceSelected: \"\",\n      endpointSelected: \"\",\n      context: [],\n      profils: [],\n      devices: [],\n      endpoints: []\n    };\n  },\n  methods: {\n    async opened(option) {\n      console.log(\"voici l'option\", option);\n      //this.endpointSelected = option.selectedNode.id.get()\n      console.log(\"this is selctedNode: \", option.selectedNode);\n      console.log(\n        \"this is the context name: \",\n        SpinalGraphService.getContextWithType(\"BIMObjectGroupContext\")\n      );\n      /* const currentNode = option.selectedNode;\n      const currentNodeChildren = await SpinalGraphService.getChildren(currentNode.id.get(), \"groupHasBIMObject\");\n      for(let child of currentNodeChildren){\n          console.log(child.name.get());\n        } */\n      this.selectedNode = option.selectedNode;\n      /*    const currentNodeChildren = await SpinalGraphService.getChildren(currentNode.id.get(), \"groupHasBIMObject\");\n            for(let child of currentNodeChildren){\n                console.log(\"this is child\",child);\n                console.log(\"this thisEndpointSelected\", this.endpointSelected);\n                //const node = SpinalGraphService.getRealNode(child.id.get());\n                /* if(node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n                await node.removeRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE) \n                //SpinalGraphService.addChild(child.id.get(), this.endpointSelected, \"hasEndPoint\", SPINAL_RELATION_PTR_LST_TYPE)\n\n            } */\n      this.context = await this.getData();\n    },\n    async removed(option) {\n      if (option.closeResult) {\n        const currentNode = this.selectedNode;\n        const currentNodeChildren = await SpinalGraphService.getChildren(\n          currentNode.id.get(),\n          [\"groupHasBIMObject\", \"groupHasgeographicRoom\"]\n        );\n        for (let child of currentNodeChildren) {\n          console.log(\"this is child\", child);\n          console.log(\"this thisEndpointSelected\", this.endpointSelected);\n          //const node = SpinalGraphService.getRealNode(child.id.get());\n          /* if(node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n                await node.removeRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE) */\n\n          SpinalGraphService.addChild(\n            child.id.get(),\n            this.endpointSelected,\n            \"hasEndPoint\",\n            SPINAL_RELATION_PTR_LST_TYPE\n          );\n        }\n        /* if(option.closeResult){\n            const node = SpinalGraphService.getRealNode(this.endpointSelected);\n            if(node.hasRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE))\n            await node.removeRelation(\"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE)\n            SpinalGraphService.addChild(this.endpointSelected, this.profilSelected, \"endpointHasProfil\", SPINAL_RELATION_PTR_LST_TYPE)\n        } */\n      }\n      this.showDialog = false;\n    },\n\n    closeDialog(closeResult) {\n      if (typeof this.onFinised === \"function\") {\n        this.onFinised({ closeResult, inputValue: this.inputValue });\n      }\n    },\n\n    selectContext(element) {\n      this.profilSelected = undefined;\n      this.endpointSelected = undefined;\n      this.deviceSelected = undefined;\n      this.endpoints = [];\n      this.profils = [];\n      this.devices = [];\n      this.contextSelected = element;\n      let found = this.context.find(el => el.id == element);\n      if (found) {\n        this.profils = found.profils;\n      }\n    },\n    async selectProfil(element) {\n      this.profilSelected = element;\n      let context = this.context.find(el => el.id == this.contextSelected);\n      if (context) {\n        console.log(this.profilSelected, context);\n        let deviceFound = await SpinalGraphService.getChildrenInContext(\n          this.profilSelected,\n          context.id\n        );\n        this.devices = deviceFound.map(element => element.get());\n      }\n    },\n    async selectDevice(element) {\n      this.deviceSelected = element;\n      let context = this.context.find(el => el.id == this.contextSelected);\n      if (context) {\n        console.log(this.deviceSelected, context);\n        let endpointFound = await SpinalGraphService.getChildrenInContext(\n          this.deviceSelected,\n          context.id\n        );\n        this.endpoints = endpointFound.map(element => element.get());\n      }\n    },\n    selectEndpoint(element) {\n      console.log(element);\n      this.endpointSelected = element;\n    },\n    getData() {\n      const contextNode = SpinalGraphService.getContextWithType(\"Network\");\n      const context = contextNode.map(element => element.info.get());\n      const promise = context.map(async el => {\n        let contextChildren = await SpinalGraphService.getChildrenInContext(\n          el.id,\n          el.id\n        );\n        el.profils = contextChildren.map(element => element.get());\n        return el;\n      });\n      return Promise.all(promise);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.dialogApp {\n  width: 50%;\n  height: 100%;\n}\n.dialogApp .content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n}\n.dialogApp .content .section {\n  width: 50%;\n  border: 1px solid grey;\n  border-radius: 4% 4% 0 0;\n  padding: 15px;\n}\n</style>"],"names":[],"version":3,"file":"spinal-env-viewer-plugin-upload.dd60eea7.css.map"}